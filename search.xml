<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Hexo--百度和谷歌搜索引擎索引方法]]></title>
      <url>%2F2016%2F12%2F05%2Fhexo-baidu-google%2F</url>
      <content type="text"><![CDATA[摘要 让百度和谷歌搜索引擎对当前站点进行索引的方法。 由于国内对谷歌的访问限制，所以可以使用chrome浏览器安装『谷歌访问助手』插件，安装方法 百度搜索 需要拥有百度帐号，并进行网站验证，因为我已经验证过blog.hanqunfneg.com，所以这里为了演示，使用www.hanqunfeng.com进行验证。 推荐『HTML 文件上传』的方式进行验证 将谷歌的验证文件，如我的是baidu_verify_5T5OVCioxp.html下载到本地，并拷贝到source目录下，并在文件上方增加如下内容,这样可以保证该文件不会被编译： 123layout: false---5T5OVCioxp 编译并发布，之后在刚才的下载页面进行验证 谷歌搜索 需要拥有谷歌帐号，并进行网站验证 推荐『HTML 文件上传』的方式进行验证 将谷歌的验证文件，如我的是googleea53a22ff4210278.html下载到本地，并拷贝到source目录下，并在文件上方增加如下内容,这样可以保证该文件不会被编译： 123layout: false---google-site-verification: googleea53a22ff4210278.html 编译并发布，之后在刚才的下载页面进行验证 插件站点地图安装 分别使用以下命令来安装针对百度和Google的地图插件，在站点的根目录下执行以下命令： 12$ npm install hexo-generator-sitemap --save$ npm install hexo-generator-baidu-sitemap --save 配置hexo的站点配置文件_config.yml 1234567891011#启用相应插件Plugins:- hexo-generator-sitemap- hexo-generator-baidu-sitemap#配置站点地图文件#sitemapsitemap: path: sitemap.xml baidusitemap:path: baidusitemap.xml 执行hexo g，当你成功编译并在Public目录下生成对应的baidusitemap.xml(针对百度)，sitemap.xml(针对Google)表明你已经成功建立的站点地图。 收录站点地图 百度推送 入口：百度站长–网页抓取–链接提交 谷歌推送 入口：Google Search Console–抓取–站点地图 百度推送方式–自动推送 索引效率：主动推送&gt;自动推送&gt;sitemap 百度的网站上有说明，地址 将自动推送的js脚本拷贝到themes\next\layout\_partials\footer.swig文件的最下方即可]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[学习笔记]]></title>
      <url>%2F2016%2F12%2F02%2Fbook%2F</url>
      <content type="text"><![CDATA[资料列表 CentOS7下zabbix3.2的安装及使用 Rancher–Docker的管理控制台 git学习笔记]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Dubbo初体验]]></title>
      <url>%2F2016%2F12%2F01%2Fdubbo_dubbox%2F</url>
      <content type="text"><![CDATA[摘要 官网地址，官网有完整的资料以帮助使用者快速熟悉dubbo，不过目前相关下载地址已经失效，代码已经迁移到github，请参看下面的代码地址，自行编译打包 dubbo代码地址 2.5.4(官方版本)，基于spring3.2.16.RELEASE 2.8.4(第三方基于2.5.3修改)，基于spring3.2.9.RELEASE,项目名称为dubbox，但生成的包名依然是dubbo git、maven、jdk、tomcat、nexus请自行安装，我安装的版本如下 git version 2.9.3Apache Maven 3.3.9java version “1.8.0_31”tomcat version 8.5.4nexus version 2.5.0-04 编译打包以dubbo2.8.4为例 git clone https://github.com/dangdangdotcom/dubbox.git cd dubbox mvn clean package install -Dmaven.test.skip=true 发布dubbo2.8.4到nexus的3rd party仓库 登录nexus，设置3rd party的Deployment Policy=Allow Redeploy(在Configuration中配置) vi ~/.m2/settings.xml，在servers中增加如下配置 12345&lt;server&gt; &lt;id&gt;thirdparty&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin123&lt;/password&gt;&lt;/server&gt; 修改dubbox的pom.xml，增加如下配置 123456&lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;thirdparty&lt;/id&gt; &lt;url&gt;http://192.168.36.49:8080/nexus/content/repositories/thirdparty/&lt;/url&gt; &lt;/repository&gt;&lt;/distributionManagement&gt; mvn clean package deploy -Dmaven.test.skip=true 发布dubbo2.5.4到nexus的3rd party仓库 因为目前2.5.4是Snapshots版本，所以不能直接发布到3rd party中，如果要发布到3rd party，需要修改pom.xml，去掉版本号中的Snapshots，比如在intellij IDEA中，使用快捷键Command+Shift+R； dubbo包含四个组件 Provider: 暴露服务的服务提供方。这里我们自己提供(基于2.8.4)； Consumer: 调用远程服务的服务消费方。这里我们自己提供(基于2.8.4)； Registry: 服务注册与发现的注册中心。这里使用zookeeper； Monitor: 统计服务的调用次调和调用时间的监控中心。这里介绍两个，一个是dubbo提供的dubbo-monitor-simple，另一个是第三方对dubbo-monitor-simple的改进版本：改版的monitor(基于2.8.4) 下面分别介绍：顺序为Registry，Provider，Consumer，Monitor。 ZooKeeper Registry注册中心官网地址 下载安装1234$ wget http://apache.fayea.com/zookeeper/zookeeper-3.4.9/zookeeper-3.4.9.tar.gz$ tar zxvf zookeeper-3.4.9.tar.gz$ cd zookeeper-3.4.9$ cp conf/zoo_sample.cfg conf/zoo.cfg 配置$ vi conf/zoo.cfg123456tickTime=2000initLimit=10syncLimit=5#实际上只需要配置dataDir，这里修改为自己的存储目录dataDir=/usr/local/zookeeper-3.4.9/dataclientPort=2181 集群配置 分别在两台主机上按上述方法安装zookeeper，比如两台主机的IP分别为192.168.37.144、192.168.37.143； 分别在两台主机的zoo.cfg中增加如下配置 12server.1=192.168.37.144:2555:3555server.2=192.168.37.143:2555:3555 在144主机的dataDir指定的目录(/usr/local/zookeeper-3.4.9/data)下创建文件myid vi myid设置内容为1 #就是zoo.cfg中server.后面对应的数字 同理将143的myid文件中内容设置为2 开放端口 两台主机分别开放2181，2555，3555端口vi /etc/sysconfig/iptablse，加入如下内容 1234#zookeeper-A INPUT -p tcp -m state --state NEW -m tcp --dport 2181 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 2555 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 3555 -j ACCEPT 重启iptables 启动与关闭zookeeper./bin/zkServer.sh start./bin/zkServer.sh stop 查看在zookeeper中注册的信息echo dump | nc 192.168.37.144 2181ORtelnet 192.168.37.144 2188dump 关于Provider&amp;Consumer，阿里官方的实例很详细了，网上也有很多资料，这里只做简单的说明，示例项目依赖于dubbo2.8.4,spring替换为4.3.3，使用中并未见异常，示例源码地址:https://github.com/hanqunfeng/DubboStudy Provider 服务提供者123456789101112131415161718192021222324&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt; &lt;!-- 一个项目中只能有一个dubbo:application配置项 --&gt; &lt;dubbo:application name="demo-provider" owner="hanqf" organization="dubbox"/&gt; &lt;!-- 使用zookeeper注册中心暴露服务地址--&gt; &lt;dubbo:registry address="zookeeper://192.168.37.144:2181?backup=192.168.37.143:2181" timeout="50000"/&gt; &lt;!-- 用dubbo协议在20880端口暴露服务 --&gt; &lt;dubbo:protocol name="dubbo" port="20880"/&gt; &lt;!-- 声明需要暴露的服务接口 服务实现类是通过注解注册的，所以此处不需要声明实现类 --&gt; &lt;dubbo:service interface="web.function.demo.service.DemoService" ref="demoService"/&gt; &lt;dubbo:service interface="web.function.demo.service.Demo2Service" ref="demo2Service"/&gt; &lt;!-- 启用monitor服务，只有配置这个，才会主动向monitor推送信息 --&gt; &lt;dubbo:monitor protocol="registry" /&gt;&lt;/beans&gt; 不同的Provider之间可以使用相同的应用名称（比如这里是name=”demo-provider”），因为注册的服务只基于服务所在服务器的ip地址和dubbo协议开放的端口号，两者有一个不相同即可，但是不建议这样做。 对于提供相同服务的Provider，也就是副本（同一个war包，部署到不同主机），则可以不去修改name，但是对于提供不同服务的Provider，不要使用相同的name，这样不便于在monitor中查看。 对于同一个Provider，要在同一台主机中部署（同一个war包，部署到同一台主机），则需要修改duboo协议端口，比如示例代码中的dubbo-provider和dubbo-provider02，因为两者提供相同的服务，所以应用名称相同，但是因为都在本机部署，所以一个用20880，一个使用20881 Consumer 服务消费者12345678910111213141516171819202122232425&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt; &lt;dubbo:application name="demo-consumer" owner="hanqf" organization="dubbox"/&gt; &lt;!-- 设置check的缺省值，如果配置中有显式的声明，如：&lt;dubbo:reference check="true"/&gt;，不会受影响 --&gt; &lt;!-- 关闭所有服务的启动时检查,注意：如果关闭某个服务的启动时检查，需要在指定的服务单独配置check="false" --&gt; &lt;dubbo:consumer check="false" /&gt; &lt;dubbo:registry protocol="zookeeper" address="192.168.37.144:2181,192.168.37.143:2181" timeout="50000"/&gt; &lt;!-- 用dubbo协议在20880端口暴露服务 --&gt; &lt;dubbo:protocol name="dubbo" port="20880"/&gt; &lt;!-- 声明需要暴露的服务接口 --&gt; &lt;dubbo:reference interface="web.function.demo.service.DemoService" id="demoService" timeout="50000"/&gt; &lt;dubbo:reference interface="web.function.demo.service.Demo2Service" id="demo2Service" timeout="50000"/&gt; &lt;dubbo:monitor protocol="registry" /&gt;&lt;/beans&gt; Consumer和Provider如果部署在同一台主机，可以使用相同的dubbo协议端口，两者不受影响 关于相关配置属性的说明，还是参考官方资料吧，在dubbo源码中已经包含了Consumer和Provider的示例，可以作为参考。 Monitordubbo-monitor-simple 简易监控中心 dubbo项目源码中已经自带了一个Monitor，就是dubbo-monitor-simple，使用maven编译后，会在dubbox/dubbo-simple/dubbo-monitor-simple/target下生成dubbo-monitor-simple-2.8.4-assembly.tar.gz 将dubbo-monitor-simple-2.8.4-assembly.tar.gz拷贝的合适的地方并解压 123$ tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz$ cd dubbo-monitor-simple-2.8.4$ vi conf/dubbo.properties 主要修改zookeeper地址、端口、绘图目录（该目录必须手工创建，比如这里是/Users/hanqunfeng/monitor）： 1234567891011121314dubbo.container=log4j,spring,registry,jettydubbo.application.name=simple-monitordubbo.application.owner=#dubbo.registry.address=multicast://224.5.6.7:1234dubbo.registry.address=zookeeper://192.168.37.144:2181?backup=192.168.37.143:2181#dubbo.registry.address=redis://127.0.0.1:6379#dubbo.registry.address=dubbo://127.0.0.1:9090dubbo.protocol.port=7070dubbo.jetty.port=8085dubbo.jetty.directory=/Users/hanqunfeng/monitordubbo.charts.directory=$&#123;dubbo.jetty.directory&#125;/chartsdubbo.statistics.directory=/Users/hanqunfeng/monitor/statisticsdubbo.log4j.file=logs/dubbo-monitor-simple.logdubbo.log4j.level=WARN 启动与关闭 ./bin/start.sh./bin/stop.sh 浏览器访问http://localhost:8085，图表中的效果是注册了Provider，Consumer的效果 改版的monitor(基于2.8.4) 特点：使用mysql作为数据存储，界面使用bootstrap进行优化 下载 12$ git clone http://git.oschina.net/handu/dubbo-monitor$ cd dubbo-monitor 配置vi src/main/resources/application.properties，修改zookeeper地址，端口，数据库信息 1234567891011121314dubbo.application.name=dubbo-monitordubbo.application.owner=hanqunfengdubbo.registry.address=zookeeper://192.168.37.144:2181?backup=192.168.37.143:2181dubbo.protocol.port=6060# Database Settingsdb.url=jdbc:mysql://127.0.0.1:3306/monitor?prepStmtCacheSize=517&amp;cachePrepStmts=true&amp;autoReconnect=true&amp;characterEncoding=utf-8db.username=rootdb.password=passworddb.maxActive=500# System Managermanager.username=adminmanager.password=admin 数据库初始化 创建monitor数据库 执行sql目录下的create.sql 打包mvn clean package -Dmaven.test.skip=true 基于本地nexus编译打包时，提示找不到jetbrick-template-2.0.10.jar，去maven中央仓库下载再上传到nexus中吧。 部署将生成的dubbo-monitor.war包部署到tomcat中，启动tomcat（端口8084）访问地址http://localhost:8084/dubbo-monitor 最后说一下dubbo-admin，这个是dubbo官方提供的dubbo管理控制台官方说明：管理控制台为内部裁剪版本，开源部分主要包含：路由规则，动态配置，服务降级，访问控制，权重调整，负载均衡，等管理功能。 dubbo-admin 管理控制台dubbo项目源码中有一个模块叫做dubbo-admin cd dubbox/dubbo-admin/src/main/webapp/WEB-INFvi dubbo.properties配置dubbo.registry.address=zookeeper://192.168.37.144:2181?backup=192.168.37.143:2181编译打包，将生成的dubbo-admin-2.8.4.war部署到tomcat]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo--NexT主题]]></title>
      <url>%2F2016%2F11%2F17%2Fhexo-theme-next%2F</url>
      <content type="text"><![CDATA[NexT主题简介 NexT有着完善的使用文档，NexT官方资料； NexT整合了常用的插件，如评论、分享、统计； 下载安装 12cd ~/bloggit clone https://github.com/iissnan/hexo-theme-next themes/next 第三方参考资料 我的配置多说评论和百度统计 NexT主题的_config.yml，配置方式参考Hexo–添加多说评论插件和百度统计插件 12345678910111213141516171819# 多说配置：# Duoshuo ShortNameduoshuo_shortname: 注册前缀# 开启热评文章duoshuo_hotartical: true# 可以看到评论用户的UA信息# Make duoshuo show UA# user_id must NOT be null when admin_enable is true!# you can visit http://dev.duoshuo.com get duoshuo user id.duoshuo_info: ua_enable: true admin_enable: false user_id: 0# 百度统计配置：# Baidu Analytics ID# 这里只需要填写js代码中hm.js链接的参数(如下：xxxxxxx)部分，而不再需要将整个js配置到模板中baidu_analytics: xxxxxxx 百度统计代码 1234567var _hmt = _hmt || [];(function() &#123; var hm = document.createElement("script"); hm.src = "https://hm.baidu.com/hm.js?xxxxxxx"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(hm, s);&#125;)(); 百度分享 NexT主题的_config.yml，其它主题配置方式参考地址123456# Baidu Share# Available value:# button | slide# Warning: Baidu Share does not support https.baidushare: type: button 阅读次数 注册LeanCloud帐号，在LeanCloud中创建应用，具体配置方式查看参考资料。 复制AppID以及AppKey并在NexT主题的_config.yml文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子: 1234leancloud_visitors: enable: true app_id: joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz app_key: E9UJsJpw1omCHuS22PdSpKoh 这里要注意，一定要在LeanCloud中的安全中心配置Web安全域名，否则不能正常统计 字数统计和阅读时常 参考资料 安装hexo-wordcount插件，在站点的根目录下执行以下命令：npm install hexo-wordcount --save 修改模板位置：themes\next\layout\_macro\post.swig，插入代码如下：1234567891011121314151617181920212223242526272829303132333435# 查找如下代码段： &#123;# LeanCould PageView #&#125; &#123;% if theme.leancloud_visitors.enable %&#125; &lt;span id="&#123;&#123; url_for(post.path) &#125;&#125;" class="leancloud_visitors" data-flag-title="&#123;&#123; post.title &#125;&#125;"&gt; &amp;nbsp; | &amp;nbsp; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-eye"&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class="post-meta-item-text"&gt;&#123;&#123;__('post.visitors')&#125;&#125; &lt;/span&gt; &lt;span class="leancloud-visitors-count"&gt;&lt;/span&gt; &lt;/span&gt; &#123;% endif %&#125;# 添加如下代码段： # 以下部分为：字数统计、阅读时长插入代码 &lt;span class="post-time"&gt; &amp;nbsp; | &amp;nbsp; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-calendar-o"&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class="post-meta-item-text"&gt;字数统计:&lt;/span&gt; &lt;span class="post-count"&gt;&#123;&#123; wordcount(post.content) &#125;&#125;(字)&lt;/span&gt; &lt;/span&gt; &lt;span class="post-time"&gt; &amp;nbsp; | &amp;nbsp; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-calendar-o"&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class="post-meta-item-text"&gt;阅读时长:&lt;/span&gt; &lt;span class="post-count"&gt;&#123;&#123; min2read(post.content) &#125;&#125;(分)&lt;/span&gt; &lt;/span&gt;# 以上部分为：字数统计、阅读时长插入代码 Local Search 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：$ npm install hexo-generator-searchdb --save NexT主题的_config.yml 12345search: path: search.xml field: post format: html limit: 10000 重新编译之后会发现左侧导航栏最下方多出一个搜索菜单 标签页和分类页 默认情况下，NexT没有开启标签页和分类页功能 新增标签页 使用命令hexp new page “tags” 并将页面类型设置为tags12345---title: 标签date: 2016-11-17 23:03:47type: &quot;tags&quot;--- 通常情况下你的标签页并不需要评论框，取消评论代码123456---title: 标签date: 2016-11-17 23:03:47type: &quot;tags&quot;comments: false--- 在主题配置文件下的菜单设置项memu下设置，设置完成在主页导航可以看到标签导航栏12menu: tags: /tags 新增分类页 使用命令hexp new page categories 并将页面类型设置为categories12345---title: 分类date: 2016-11-17 23:08:35type: &quot;categories&quot;--- 通常情况下你的标签页并不需要评论框，取消评论代码123456---title: 分类date: 2016-11-17 23:08:35type: &quot;categories&quot;comments: false--- 在主题配置文件下的菜单设置项memu下设置，设置完成在主页导航可以看到分类导航栏12menu: categories: /categories 设定首页/归档/标签页面文章的篇数 安装如下插件，在站点的根目录下执行以下命令： 123$ npm install hexo-generator-index --save$ npm install hexo-generator-archive --save$ npm install hexo-generator-tag --save NexT主题的_config.yml 12345678910index_generator: per_page: 5archive_generator: per_page: 20 yearly: true monthly: truetag_generator: per_page: 10 RSS设置 安装 hexo-generator-feed，在站点的根目录下执行以下命令：$ npm install hexo-generator-feed --save NexT主题的_config.yml 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 编译后，会看到左侧头像下方会显示RSS入口 跳过指定文件的渲染 如果某些资源希望放到source下，但是又不希望被编译，可以在hexo的_config.yml中增加如下配置： 1234skip_render: - zabbix/** #跳过zabbix文件夹下的全部子目录和文件 - abc.html #跳过某一个具体的文件 - *.html #跳过以html结尾的文件 比如我的导航菜单中的『资料』，其下面配置的资源就是我从为知笔记中导出的html。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo--绑定域名到githubpage]]></title>
      <url>%2F2016%2F11%2F17%2Fhexo-domain-name%2F</url>
      <content type="text"><![CDATA[申请域名 可以通过万网购买域名; 比如博主的域名为hanqunfeng.com; 添加解析规则 登录阿里云的控制台，进入【域名】，找到自己的域名，点击【解析】 点击【添加解析】 『记录类型』：CNAME 『主机记录』：blog #说明：设置为二级域名，也可以设置为www的一级域名 『记录值』：hanqunfeng.github.io. #注意最后面有个点 上面的配置表示将blog.hanqunfeng.com的请求定向到hanqunfeng.github.io blog目录下创建CNAME文件 在自己的blog目录下的/source目录下新建一个文件，命名为CNAME，内容为：blog.hanqunfeng.com hexo cl，hexo g，hexo d，发布到github page 说明 购买域名需要进行实名认证； 官方说域名解析最长等待48小时就可以全球生效； 博主配置时，只是提交了实名认证申请，域名解析不到5分钟就可以访问了；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo--添加多说评论插件和百度统计插件]]></title>
      <url>%2F2016%2F11%2F16%2Fhexo_duoshuo_baidutongji%2F</url>
      <content type="text"><![CDATA[添加多说评论插件 登录多说官网，多说不支持注册，仅支持绑定社交帐号登录，比如QQ，新浪微博，等等。 登录后会要求进行站点设置，这里需要设置域名、站点名称、首页网址等信息，域名的后缀已经默认为.duoshuo.com,所以我们只需要设置前缀，记住这个前缀。站点名称随便起个名字，首页网站填写https://hanqunfeng.github.io； 编辑yilia主题的_config.yml文件，设置如下： duoshuo: 域名前缀 重新发布即可，效果见页面下方的评论区； 在多说管理后台中可以对评论进行管理。 添加百度统计插件 注册百度统计帐号; 新注册用户会要求创建一个网站，设置如下： 登录后在代码管理--》代码获取中复制代码，将其粘贴到yilia主题下的layout/_partial/after-footer.gjs的最下面； 重新发布到github page； 在百度统计管理平台中的代码管理--》代码安装检查查看是否配置正确； 配置无误后，可以通过百度统计平台查看统计数据。 参考资料 http://m.blog.csdn.net/article/details?id=51049695]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo+GitHub Page搭建自己的Blog]]></title>
      <url>%2F2016%2F11%2F14%2Fhexo_gitpage%2F</url>
      <content type="text"><![CDATA[什么是Hexo Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上，引用Hexo作者 @tommy351 的话： 快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js. GitHub Pages是什么？ GitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定， 可以用于介绍托管在github上的Project或者搭建网站。 以下环境为mac下安装。 Hexo安装需要安装git和Node.js运行环境 git安装 mac自带git，如果需要重新安装，可去官网下载12$ git --versiongit version 2.9.3 (Apple Git-75) 安装npm 基于brew方式安装npm1$ brew install npm 安装Hexo1$ npm install hexo-cli -g npm安装Hexo：参考资料 查看Hexo版本12345678910111213$ hexo versionhexo: 3.2.2hexo-cli: 1.0.2os: Darwin 16.1.0 darwin x64http_parser: 2.7.0node: 6.6.0v8: 5.1.281.83uv: 1.9.1zlib: 1.2.8ares: 1.10.1-DEVicu: 57.1modules: 48openssl: 1.0.2h Quick StartSetup your blog123$ cd ~$ hexo init blog$ cd blog 此命令会在当前用户的家目录下创建一个blog目录，并初始化相关文件，如下为初始化的目录结构： blog目录结构说明 scaffolds ：模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo 有三种默认布局： post 、 page 和 draft ，它们分别对应不同的路径。新建文件的默认布局是 post ，可以在配置文件中更改布局。用 draft 布局生成的文件会被保存到 source/_drafts 文件夹。 source ：资源文件夹是存放用户资源的地方。 source/_post ：文件箱。除 posts 文件夹之外，开头命名为 (下划线)的文件或者文件夹和隐藏的文件将会被忽略。Markdown文件会被解析并放到 public 文件夹。 themes ：主题 文件夹。Hexo 会根据主题来生成静态页面。我们可以将自己的主题放到该目录下，然后在_config.yml中修改默认的主题即可。 themes/landscape ：默认的皮肤文件夹 _config.yml ：全局的配置文件，每次更改要重启服务。 _config.yml简介1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site 站点配置title: Study Zone #网站标题subtitle: Spring--java程序员的春天 #网站副标题description: 分享成长与快乐的地方 #网站描述author: hanqunfeng #作者，网站所有者language: zh-CN #网站使用的语言timezone: Asia/Shanghai #网站时区# URL 可以不配置## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://hanqunfeng.github.io #网址，搜索时会在搜索引擎中显示root: / #网站根目录 permalink: :year/:month/:day/:title/ #永久链接格式permalink_defaults: #永久链接中各部分的默认值# Directory 目录配置source_dir: source #资源文件夹，这个文件夹用来存放内容public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件tag_dir: tags #标签文件夹archive_dir: archives #归档文件夹category_dir: categories #分类文件夹code_dir: downloads/code #Include code 文件夹i18n_dir: :lang #国际化文件夹skip_render: #跳过指定文件的渲染，您可使用 glob 来配置路径# Writing 写作配置new_post_name: :title.md # File name of new posts # 新文章的文件名称default_layout: post #默认布局titlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0 #把文件名称转换为 (1) 小写或 (2) 大写render_drafts: false #显示草稿post_asset_folder: false #是否启动资源文件夹relative_link: false #把链接改为与根目录的相对位址future: truehighlight: #代码块的设置 enable: true line_number: true auto_detect: false tab_replace:# Category &amp; Tag 分类 &amp; 标签default_category: uncategorized #默认分类category_map: #分类别名tag_map: #标签别名# Date / Time format 时间和日期## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination 分页## Set per_page to 0 to disable paginationper_page: 10 #每页显示的文章量 (0 = 关闭分页功能)pagination_dir: page #分页目录# Extensions 扩展## Plugins: https://hexo.io/plugins/ 插件## Themes: https://hexo.io/themes/ 主题# theme: landscape #当前主题名称theme: yilia #当前主题名称# Deployment #部署到github## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/hanqunfeng/hanqunfeng.github.io.git branch: master 注意：以下所有命令，都必须在blog目录下执行。 Start the server123$ hexo serverINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 我们可以通过浏览器访问http://localhost:4000/，就可以看到blog的页面了。 创建文件、生成静态文件以及发布到github，都不需要启动服务，启动服务的目的仅是为了能在本地看到效果。 hexo server == hexo s Create a new post12$ hexo new "Hello Hexo"INFO Created: ~/blog/source/_posts/Hello-Hexo.md 创建好的文件基于makedown语法，可以使用sublime或者atom编辑器，进行编辑与管理。 编辑完成后不需要执行hexo generate命令即可在浏览器中查看效果，但是修改了主题内容，有时会不生效，需要先生成静态文件才能看到最终效果。 hexo new == hexo n Generate static files1$ hexo generate 该命令用于将makedown文件转换为静态html文件，并放到public文件夹下。 可以使用hexo clean命令来删除public文件夹，之后再使用hexo generate来重新生成静态文件。 hexo generate == hexo g Clean static files123$ hexo cleanINFO Deleted database.INFO Deleted public folder. hexo clean == hexo cl 主题更换主题 github上有许多技术达人为Hexo制作的主题，可以clone到本地，并拷贝到themes文件夹下，然后修改_config.yml中的theme属性，修改主题需要重启Hexo才能生效。 比如博主使用主题为yilia下载地址: 12$ cd ~/blog$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 更新主题时，在themes/yilia目录下执行git pull。 添加资源 可以在当前主题的source目录下放入自己的资源，执行hexo generate命令时，会将主题中的source目录下的内容拷贝到public目录下。 但是这样做如果更换主题，则资源就失效了，所以一般是在source目录下创建资源文件，执行hexo generate命令时，会将source目录下的内容拷贝到public目录下。 发布到Github安装hexo的git发布包1$ npm install hexo-deployer-git -S 创建SSH密钥 创建密钥可以在执行发布时不需要每次都输入用户名和密码，具体创建方法查看如下资料: github官网 图文教程 Deploy to remote sites 因为使用GitPage，所以需要申请一个Github帐号，并创建一个仓库，仓库名称为”your_name.github.io”。 创建好仓库后，在_config.yml中按上文中的内容配置好deploy属性。 执行如下命令，会将public下的文件发布到该仓库中，一般执行deploy前先执行clean和generate保证文件最新。 访问https://hanqunfeng.github.io，查看blog页面。 123$ hexo clean$ hexo generate$ hexo deploy hexo deploy == hexo d 参考资料 http://www.tuicool.com/articles/ueI7naV http://www.jianshu.com/p/465830080ea9]]></content>
    </entry>

    
  
  
</search>
