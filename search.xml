<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+GitHub Page搭建自己的Blog</title>
    <url>/2016/11/14/hexo_gitpage/</url>
    <content><![CDATA[<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><ul>
<li><p><a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a> 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上，引用Hexo作者 @tommy351 的话：</p>
</li>
<li><p>快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js.</p>
</li>
</ul>
<h2 id="GitHub-Pages是什么？"><a href="#GitHub-Pages是什么？" class="headerlink" title="GitHub Pages是什么？"></a>GitHub Pages是什么？</h2><ul>
<li><a href="https://pages.github.com" target="_blank" rel="noopener">GitHub Pages</a> 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定， 可以用于介绍托管在github上的Project或者搭建网站。</li>
</ul>
<a id="more"></a>
<p>以下环境为mac下安装。</p>
<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>需要安装git和Node.js运行环境</p>
<h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><ul>
<li>mac自带git，如果需要重新安装，可去<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官网下载</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.9.3 (Apple Git-75)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h3><ul>
<li>基于<a href="http://brew.sh" target="_blank" rel="noopener">brew</a>方式安装npm<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install npm</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>npm安装Hexo：<a href="https://www.npmjs.com/package/hexo" target="_blank" rel="noopener">参考资料</a></p>
<h3 id="查看Hexo版本"><a href="#查看Hexo版本" class="headerlink" title="查看Hexo版本"></a>查看Hexo版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br><span class="line">hexo: 3.2.2</span><br><span class="line">hexo-cli: 1.0.2</span><br><span class="line">os: Darwin 16.1.0 darwin x64</span><br><span class="line">http_parser: 2.7.0</span><br><span class="line">node: 6.6.0</span><br><span class="line">v8: 5.1.281.83</span><br><span class="line">uv: 1.9.1</span><br><span class="line">zlib: 1.2.8</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">icu: 57.1</span><br><span class="line">modules: 48</span><br><span class="line">openssl: 1.0.2h</span><br></pre></td></tr></table></figure>


<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Setup-your-blog"><a href="#Setup-your-blog" class="headerlink" title="Setup your blog"></a>Setup your blog</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>
<ul>
<li>此命令会在当前用户的家目录下创建一个blog目录，并初始化相关文件，如下为初始化的目录结构：<br><img src="/images_glob/blog_dir.png" alt="blog目录结构" title="blog目录结构"></li>
</ul>
<h3 id="blog目录结构说明"><a href="#blog目录结构说明" class="headerlink" title="blog目录结构说明"></a>blog目录结构说明</h3><ul>
<li>scaffolds ：模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo 有三种默认布局： post 、 page 和 draft ，它们分别对应不同的路径。新建文件的默认布局是 post ，可以在配置文件中更改布局。用 draft 布局生成的文件会被保存到 source/_drafts 文件夹。</li>
<li>source ：资源文件夹是存放用户资源的地方。</li>
<li>source/_post ：文件箱。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件或者文件夹和隐藏的文件将会被忽略。Markdown文件会被解析并放到 public 文件夹。</li>
<li>themes ：主题 文件夹。Hexo 会根据主题来生成静态页面。我们可以将自己的主题放到该目录下，然后在_config.yml中修改默认的主题即可。</li>
<li>themes/landscape ：默认的皮肤文件夹</li>
<li>_config.yml ：全局的配置文件，每次更改要重启服务。</li>
</ul>
<h3 id="config-yml简介"><a href="#config-yml简介" class="headerlink" title="_config.yml简介"></a>_config.yml简介</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site 站点配置</span></span><br><span class="line">title: Study Zone <span class="comment">#网站标题</span></span><br><span class="line">subtitle: Spring--java程序员的春天 <span class="comment">#网站副标题</span></span><br><span class="line">description: 分享成长与快乐的地方 <span class="comment">#网站描述</span></span><br><span class="line">author: hanqunfeng <span class="comment">#作者，网站所有者</span></span><br><span class="line">language: zh-CN <span class="comment">#网站使用的语言</span></span><br><span class="line">timezone: Asia/Shanghai <span class="comment">#网站时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 可以不配置</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://hanqunfeng.github.io <span class="comment">#网址，搜索时会在搜索引擎中显示</span></span><br><span class="line">root: / <span class="comment">#网站根目录</span></span><br><span class="line">permalink: :year/:month/:day/:title/ <span class="comment">#永久链接格式</span></span><br><span class="line">permalink_defaults: <span class="comment">#永久链接中各部分的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory 目录配置</span></span><br><span class="line">source_dir: <span class="built_in">source</span> <span class="comment">#资源文件夹，这个文件夹用来存放内容</span></span><br><span class="line">public_dir: public <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件</span></span><br><span class="line">tag_dir: tags <span class="comment">#标签文件夹</span></span><br><span class="line">archive_dir: archives <span class="comment">#归档文件夹</span></span><br><span class="line">category_dir: categories <span class="comment">#分类文件夹</span></span><br><span class="line">code_dir: downloads/code <span class="comment">#Include code 文件夹</span></span><br><span class="line">i18n_dir: :lang <span class="comment">#国际化文件夹</span></span><br><span class="line">skip_render: <span class="comment">#跳过指定文件的渲染，您可使用 glob 来配置路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing 写作配置</span></span><br><span class="line">new_post_name: :title.md <span class="comment"># File name of new posts # 新文章的文件名称</span></span><br><span class="line">default_layout: post <span class="comment">#默认布局</span></span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">filename_case: 0 <span class="comment">#把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line">render_drafts: <span class="literal">false</span> <span class="comment">#显示草稿</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span> <span class="comment">#是否启动资源文件夹</span></span><br><span class="line">relative_link: <span class="literal">false</span> <span class="comment">#把链接改为与根目录的相对位址</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line">highlight: <span class="comment">#代码块的设置</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag 分类 &amp; 标签</span></span><br><span class="line">default_category: uncategorized <span class="comment">#默认分类</span></span><br><span class="line">category_map: <span class="comment">#分类别名</span></span><br><span class="line">tag_map: <span class="comment">#标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format 时间和日期</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination 分页</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10 <span class="comment">#每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line">pagination_dir: page <span class="comment">#分页目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions 扩展</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/ 插件</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/ 主题</span></span><br><span class="line"><span class="comment"># theme: landscape #当前主题名称</span></span><br><span class="line">theme: yilia <span class="comment">#当前主题名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment #部署到github</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/hanqunfeng/hanqunfeng.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>注意：以下所有命令，都必须在blog目录下执行。</p>
<h3 id="Start-the-server"><a href="#Start-the-server" class="headerlink" title="Start the server"></a>Start the server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<ul>
<li>我们可以通过浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，就可以看到blog的页面了。</li>
<li>创建文件、生成静态文件以及发布到github，都不需要启动服务，启动服务的目的仅是为了能在本地看到效果。</li>
<li><code>hexo server</code> == <code>hexo s</code></li>
</ul>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"Hello Hexo"</span></span><br><span class="line">INFO  Created: ~/blog/<span class="built_in">source</span>/_posts/Hello-Hexo.md</span><br></pre></td></tr></table></figure>
<ul>
<li>创建好的文件基于<a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">makedown</a>语法，可以使用sublime或者atom编辑器，进行编辑与管理。</li>
<li>编辑完成后不需要执行<code>hexo generate</code>命令即可在浏览器中查看效果，但是修改了主题内容，有时会不生效，需要先生成静态文件才能看到最终效果。</li>
<li><code>hexo new</code> == <code>hexo n</code></li>
</ul>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<ul>
<li>该命令用于将makedown文件转换为静态html文件，并放到public文件夹下。</li>
<li>可以使用<code>hexo clean</code>命令来删除public文件夹，之后再使用<code>hexo generate</code>来重新生成静态文件。</li>
<li><code>hexo generate</code> == <code>hexo g</code></li>
</ul>
<h3 id="Clean-static-files"><a href="#Clean-static-files" class="headerlink" title="Clean static files"></a>Clean static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">INFO  Deleted database.</span><br><span class="line">INFO  Deleted public folder.</span><br></pre></td></tr></table></figure>
<ul>
<li><code>hexo clean</code> == <code>hexo cl</code></li>
</ul>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><ul>
<li>github上有许多技术达人为Hexo制作的主题，可以clone到本地，并拷贝到themes文件夹下，然后修改_config.yml中的theme属性，修改主题需要重启Hexo才能生效。</li>
<li>比如博主使用主题为<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia下载地址</a>:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure></li>
<li>更新主题时，在themes/yilia目录下执行<code>git pull</code>。</li>
</ul>
<h3 id="添加资源"><a href="#添加资源" class="headerlink" title="添加资源"></a>添加资源</h3><ul>
<li>可以在当前主题的source目录下放入自己的资源，执行<code>hexo generate</code>命令时，会将主题中的source目录下的内容拷贝到public目录下。</li>
<li>但是这样做如果更换主题，则资源就失效了，所以一般是在source目录下创建资源文件，执行<code>hexo generate</code>命令时，会将source目录下的内容拷贝到public目录下。</li>
</ul>
<h2 id="发布到Github"><a href="#发布到Github" class="headerlink" title="发布到Github"></a>发布到Github</h2><h3 id="安装hexo的git发布包"><a href="#安装hexo的git发布包" class="headerlink" title="安装hexo的git发布包"></a>安装hexo的git发布包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git -S</span><br></pre></td></tr></table></figure>

<h3 id="创建SSH密钥"><a href="#创建SSH密钥" class="headerlink" title="创建SSH密钥"></a>创建SSH密钥</h3><ul>
<li>创建密钥可以在执行发布时不需要每次都输入用户名和密码，具体创建方法查看如下资料:<blockquote>
<ul>
<li><a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="noopener">github官网</a></li>
<li><a href="http://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html" target="_blank" rel="noopener">图文教程</a></li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><ul>
<li>因为使用<a href="https://pages.github.com" target="_blank" rel="noopener">GitPage</a>，所以需要申请一个Github帐号，并创建一个仓库，仓库名称为”your_name.github.io”。</li>
<li>创建好仓库后，在_config.yml中按上文中的内容配置好deploy属性。</li>
<li>执行如下命令，会将public下的文件发布到该仓库中，一般执行deploy前先执行clean和generate保证文件最新。</li>
<li>访问<a href="https://hanqunfeng.github.io" target="_blank" rel="noopener">https://hanqunfeng.github.io</a>，查看blog页面。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<ul>
<li><code>hexo deploy</code> == <code>hexo d</code></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.tuicool.com/articles/ueI7naV" target="_blank" rel="noopener">http://www.tuicool.com/articles/ueI7naV</a></li>
<li><a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="noopener">http://www.jianshu.com/p/465830080ea9</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot动态更新外部属性文件</title>
    <url>/2020/04/17/spring-boot-ExternalPropertiesRefresh/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>本文内容基于springboot2.2.6</li>
<li>SpringBoot可以通过<code>@PropertySource(value = &quot;file:demo.properties&quot;)</code>的方式加载外部配置文件，这样打好jar包后只要将这个属性文件放到相同路径即可</li>
<li>如果能够在不重启服务的情况下就可以重新加载这个属性文件，就可以很方便的实现动态更新，那么要怎么做呢？</li>
</ul>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><div class="note info">
            <p>SpringCloud可以通过config组件实现配置的动态加载，我们也可以将数据存在数据库或者缓存中，可是如果只是一个小项目，不想依赖任何中间件，那么就可以通过如下的方式实现。</p>
          </div>

<ul>
<li>获取所有注解了<code>@PropertySource</code>的对象，并且获取其value属性数组中是以<code>file:</code>开头的文件路径</li>
<li>判断是否同时注解了<code>@ConfigurationProperties</code>，并且获取其<code>prefix</code>的值</li>
<li>对每个属性文件进行遍历，通过反射找到对象的field名称（去除<code>prefix</code>后的名字），并将属性值赋值给该field</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="note info">
            <p>这个类要注册到spring上下文，并在需要的地方调用该对象的refresh方法即可重新加载所有外部属性文件。</p>
          </div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.FileSystemResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PropertiesLoaderUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;动态加载外部属性处理类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalPropertiesRefresh</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConfigurableListableBeanFactory configurableListableBeanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;根据属性名获取属性值&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fieldName bean的属性名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object    bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Object get方法返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> hanqf</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">getFieldValueByName</span><span class="params">(String fieldName, Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String firstLetter = fieldName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase();</span><br><span class="line">            String getter = <span class="string">"get"</span> + firstLetter + fieldName.substring(<span class="number">1</span>);</span><br><span class="line">            Method method = object.getClass().getMethod(getter, <span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">            Object value = method.invoke(object, <span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;根据属性名设置属性值&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fieldName  bean的属性名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object     bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramTypes set方法参数类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params     set方法参数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> hanqf</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setFieldValueByName</span><span class="params">(String fieldName, Object object, Class[] paramTypes, Object[] params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String firstLetter = fieldName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase();</span><br><span class="line">            String setter = <span class="string">"set"</span> + firstLetter + fieldName.substring(<span class="number">1</span>);</span><br><span class="line">            Method method = object.getClass().getMethod(setter, paramTypes);</span><br><span class="line">            method.invoke(object, params);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;获取属性名称，去除前缀&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   属性key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix 属性key前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> hanqf</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">fieldName</span><span class="params">(String key, String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(prefix)) &#123;</span><br><span class="line">            <span class="keyword">return</span> key.replace(prefix + <span class="string">"."</span>, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;将属性文件值绑定到bean对象&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> hanqf</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">bind</span><span class="params">(Object bean, Properties[] properties, String prefix)</span> </span>&#123;</span><br><span class="line">        String fieldName = <span class="string">""</span>;<span class="comment">//属性名称</span></span><br><span class="line">        String pValue = <span class="string">""</span>;<span class="comment">//属性值</span></span><br><span class="line">        String[] sp = <span class="keyword">null</span>; <span class="comment">//map属性分割key和value</span></span><br><span class="line">        <span class="keyword">for</span> (Properties pro : properties) &#123;</span><br><span class="line">            Map&lt;String, Map&lt;String, String&gt;&gt; fidleMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            Map&lt;String, Set&lt;String&gt;&gt; fidleSet = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            Map&lt;String, List&lt;String&gt;&gt; fidleList = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">//遍历属性</span></span><br><span class="line">            <span class="keyword">for</span> (Object key : pro.keySet()) &#123;</span><br><span class="line">                pValue = (String) (pro.get(key));</span><br><span class="line">                fieldName = fieldName((String) key, prefix);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//map</span></span><br><span class="line">                sp = fieldName.split(<span class="string">"\\."</span>);</span><br><span class="line">                <span class="keyword">if</span> (sp.length == <span class="number">2</span>) &#123;</span><br><span class="line">                    fieldName = sp[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//list&amp;&amp;set</span></span><br><span class="line">                <span class="keyword">if</span> (fieldName.indexOf(<span class="string">"["</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    fieldName = fieldName.substring(<span class="number">0</span>, fieldName.indexOf(<span class="string">"["</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//属性类型</span></span><br><span class="line">                Object object = getFieldValueByName(fieldName, bean);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//类型匹配</span></span><br><span class="line">                <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fidleMap.get(fieldName) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        object = fidleMap.get(fieldName);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        object = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (sp.length == <span class="number">2</span>) &#123;</span><br><span class="line">                        ((Map) object).put(sp[<span class="number">1</span>], pValue);</span><br><span class="line">                        fidleMap.put(fieldName, (Map&lt;String, String&gt;) object);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Set) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fidleSet.get(fieldName) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        object = fidleSet.get(fieldName);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        object = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">                    &#125;</span><br><span class="line">                    ((Set) object).add(pValue);</span><br><span class="line">                    fidleSet.put(fieldName, (Set&lt;String&gt;) object);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fidleList.get(fieldName) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        object = fidleList.get(fieldName);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        object = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">                    &#125;</span><br><span class="line">                    ((List) object).add(pValue);</span><br><span class="line">                    fidleList.put(fieldName, (List&lt;String&gt;) object);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                    setFieldValueByName(fieldName, bean, new Class[]&#123;String.class&#125;, new Object[]&#123;pValue&#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">                    setFieldValueByName(fieldName, bean, new Class[]&#123;Integer.class&#125;, new Object[]&#123;Integer.valueOf(pValue)&#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Long) &#123;</span><br><span class="line">                    setFieldValueByName(fieldName, bean, new Class[]&#123;Long.class&#125;, new Object[]&#123;Long.valueOf(pValue)&#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Double) &#123;</span><br><span class="line">                    setFieldValueByName(fieldName, bean, new Class[]&#123;Double.class&#125;, new Object[]&#123;Double.valueOf(pValue)&#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Float) &#123;</span><br><span class="line">                    setFieldValueByName(fieldName, bean, new Class[]&#123;Float.class&#125;, new Object[]&#123;Float.valueOf(pValue)&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//map类型赋值</span></span><br><span class="line">            <span class="keyword">if</span> (fidleMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String fname : fidleMap.keySet()) &#123;</span><br><span class="line">                    setFieldValueByName(fname, bean, new Class[]&#123;Map.class&#125;, new Object[]&#123;fidleMap.get(fname)&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//set类型赋值</span></span><br><span class="line">            <span class="keyword">if</span> (fidleSet.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String fname : fidleSet.keySet()) &#123;</span><br><span class="line">                    setFieldValueByName(fname, bean, new Class[]&#123;Set.class&#125;, new Object[]&#123;fidleSet.get(fname)&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//list类型赋值</span></span><br><span class="line">            <span class="keyword">if</span> (fidleList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String fname : fidleList.keySet()) &#123;</span><br><span class="line">                    setFieldValueByName(fname, bean, new Class[]&#123;List.class&#125;, new Object[]&#123;fidleList.get(fname)&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;刷新指定属性类&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> hanqf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName bean的注册名称，默认类名称首字母小写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        Class&lt;?&gt; cls = configurableListableBeanFactory.getType(beanName);</span><br><span class="line">        Object bean = configurableListableBeanFactory.getBean(cls);</span><br><span class="line">        Properties[] propertiesArray = <span class="keyword">null</span>;</span><br><span class="line">        String prefix = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (cls.getAnnotations() != <span class="keyword">null</span> &amp;&amp; cls.getAnnotations().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Annotation annotation : cls.getAnnotations()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> PropertySource) &#123;</span><br><span class="line">                    PropertySource propertySource = (PropertySource) annotation;</span><br><span class="line">                    String[] values = propertySource.value();</span><br><span class="line">                    <span class="keyword">if</span> (values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        propertiesArray = <span class="keyword">new</span> Properties[values.length];</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                            <span class="comment">//如果引用的是外部文件，则重新加载</span></span><br><span class="line">                            <span class="keyword">if</span> (values[i].startsWith(<span class="string">"file:"</span>)) &#123;</span><br><span class="line">                                String path = values[i].replace(<span class="string">"file:"</span>, <span class="string">""</span>);</span><br><span class="line">                                Properties properties = PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> FileSystemResource(path));</span><br><span class="line">                                propertiesArray[i] = properties;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> ConfigurationProperties) &#123;</span><br><span class="line">                    ConfigurationProperties configurationProperties = (ConfigurationProperties) annotation;</span><br><span class="line">                    prefix = configurationProperties.prefix();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (propertiesArray != <span class="keyword">null</span> &amp;&amp; propertiesArray.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//将属性绑定到对象</span></span><br><span class="line">            bind(bean, propertiesArray, prefix);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;重新加载属性文件&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> hanqf</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] ary = configurableListableBeanFactory.getBeanNamesForAnnotation(PropertySource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (ary != <span class="keyword">null</span> &amp;&amp; ary.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String beanName : ary) &#123;</span><br><span class="line">                <span class="comment">//通过Spring的beanName获取bean的类型</span></span><br><span class="line">                refresh(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="下面通过http请求刷新配置文件"><a href="#下面通过http请求刷新配置文件" class="headerlink" title="下面通过http请求刷新配置文件"></a>下面通过http请求刷新配置文件</h2><div class="note info">
            <p>启动服务器后，任意修改属性文件的值，然后请求/refresh，即可重新加载全部属性文件，然后请求/demo查看是否生效，也可以请求/propertiesDemo/refresh，指定要刷新的对象。</p>
          </div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExternalPropertiesRefresh externalPropertiesRefresh;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PropertiesDemo propertiesDemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/refresh"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">refreshpro</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        externalPropertiesRefresh.refresh();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"refresh properties success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;beanName&#125;/refresh"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">refreshProByBeanName</span><span class="params">(@PathVariable String beanName)</span> </span>&#123;</span><br><span class="line">        externalPropertiesRefresh.refresh(beanName);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"refresh properties success for "</span> + beanName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertiesDemo <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> propertiesDemo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PropertiesDemo-java"><a href="#PropertiesDemo-java" class="headerlink" title="PropertiesDemo.java"></a>PropertiesDemo.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"file:demo.properties"</span>,encoding = <span class="string">"utf-8"</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"demo.data"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set2 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="demo-properties"><a href="#demo-properties" class="headerlink" title="demo.properties"></a>demo.properties</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">demo.data.map.client=client</span><br><span class="line">demo.data.map.token=token</span><br><span class="line"></span><br><span class="line">demo.data.map2.client=client</span><br><span class="line">demo.data.map2.token=token</span><br><span class="line"></span><br><span class="line">demo.data.name=张三</span><br><span class="line">demo.data.age=<span class="number">20</span></span><br><span class="line">demo.data.salary=<span class="number">12345.67</span></span><br><span class="line"></span><br><span class="line">demo.data.set[<span class="number">0</span>]=beijing</span><br><span class="line">demo.data.set[<span class="number">1</span>]=shanghai</span><br><span class="line">demo.data.set[<span class="number">2</span>]=tianjin</span><br><span class="line"></span><br><span class="line">demo.data.set2[<span class="number">0</span>]=guangzhou</span><br><span class="line">demo.data.set2[<span class="number">1</span>]=shenzheng</span><br><span class="line">demo.data.set2[<span class="number">2</span>]=hangzhou</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo.data.list[<span class="number">0</span>]=南极</span><br><span class="line">demo.data.list[<span class="number">1</span>]=北极</span><br><span class="line">demo.data.list[<span class="number">2</span>]=赤道</span><br><span class="line"></span><br><span class="line">demo.data.list2[<span class="number">0</span>]=喜马拉雅山</span><br><span class="line">demo.data.list2[<span class="number">1</span>]=噶麦斯山</span><br><span class="line">demo.data.list2[<span class="number">2</span>]=阿尔卑斯山</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 分片集群搭建</title>
    <url>/2020/03/19/mongodb-mongos/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>本文内容基于mongodb4.2.3</li>
<li>本文基于本地安装，也就是ip相同，端口不同</li>
<li>3个shard复制集(3台)，1个config复制集(3台)，2个router</li>
</ul>
<a id="more"></a>

<h2 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h2><p>下载地址 ： <a href="https://www.mongodb.com/download-center" target="_blank" rel="noopener">https://www.mongodb.com/download-center</a></p>
<p>下载后解压即可，可以将bin目录配置到$PATH中</p>
<h2 id="目录设计"><a href="#目录设计" class="headerlink" title="目录设计"></a>目录设计</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── config</span><br><span class="line">│  ├── node1</span><br><span class="line">│  │  ├── db</span><br><span class="line">│  │  ├── logs</span><br><span class="line">│  │  └── mongod.conf</span><br><span class="line">│  ├── node2</span><br><span class="line">│  │  ├── db</span><br><span class="line">│  │  ├── logs</span><br><span class="line">│  │  └── mongod.conf</span><br><span class="line">│  └── node3</span><br><span class="line">│     ├── db</span><br><span class="line">│     ├── logs</span><br><span class="line">│     └── mongod.conf</span><br><span class="line">├── keyfile.key</span><br><span class="line">├── router</span><br><span class="line">│  ├── node1</span><br><span class="line">│  │  ├── logs</span><br><span class="line">│  │  └── mongos.conf</span><br><span class="line">│  └── node2</span><br><span class="line">│     ├── logs</span><br><span class="line">│     └── mongos.conf</span><br><span class="line">├── shard1</span><br><span class="line">│  ├── node1</span><br><span class="line">│  │  ├── db</span><br><span class="line">│  │  ├── logs</span><br><span class="line">│  │  └── mongod.conf</span><br><span class="line">│  ├── node2</span><br><span class="line">│  │  ├── db</span><br><span class="line">│  │  ├── logs</span><br><span class="line">│  │  └── mongod.conf</span><br><span class="line">│  └── node3</span><br><span class="line">│     ├── db</span><br><span class="line">│     ├── logs</span><br><span class="line">│     └── mongod.conf</span><br><span class="line">├── shard2</span><br><span class="line">│  ├── node1</span><br><span class="line">│  │  ├── db</span><br><span class="line">│  │  ├── logs</span><br><span class="line">│  │  └── mongod.conf</span><br><span class="line">│  ├── node2</span><br><span class="line">│  │  ├── db</span><br><span class="line">│  │  ├── logs</span><br><span class="line">│  │  └── mongod.conf</span><br><span class="line">│  └── node3</span><br><span class="line">│     ├── db</span><br><span class="line">│     ├── logs</span><br><span class="line">│     └── mongod.conf</span><br><span class="line">└── shard3</span><br><span class="line">   ├── node1</span><br><span class="line">   │  ├── db</span><br><span class="line">   │  ├── logs</span><br><span class="line">   │  └── mongod.conf</span><br><span class="line">   ├── node2</span><br><span class="line">   │  ├── db</span><br><span class="line">   │  ├── logs</span><br><span class="line">   │  └── mongod.conf</span><br><span class="line">   └── node3</span><br><span class="line">      ├── db</span><br><span class="line">      ├── logs</span><br><span class="line">      └── mongod.conf</span><br></pre></td></tr></table></figure>

<h2 id="端口分配"><a href="#端口分配" class="headerlink" title="端口分配"></a>端口分配</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shard1 28011~28013</span><br><span class="line">shard2 28021~28023</span><br><span class="line">shard3 28031~28033</span><br><span class="line">config 29011~29013</span><br><span class="line">router 29021~29022</span><br></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="shard"><a href="#shard" class="headerlink" title="shard"></a>shard</h3><p>以shard1为例，三个node下都有mongod.conf，要注意替换文件路径和端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: file</span><br><span class="line">   path: <span class="string">"/Users/hanqf/myservice_dir/mongodb-mongos/shard1/node1/logs/mongo.log"</span> <span class="comment">#注意修改路径</span></span><br><span class="line">   logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">   journal:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">   dbPath: <span class="string">"/Users/hanqf/myservice_dir/mongodb-mongos/shard1/node1/db"</span> <span class="comment">#注意修改路径</span></span><br><span class="line">processManagement:</span><br><span class="line">   fork: <span class="literal">true</span></span><br><span class="line">net:</span><br><span class="line">   bindIp: 0.0.0.0</span><br><span class="line">   port: 28011   <span class="comment">#注意修改端口</span></span><br><span class="line">setParameter:</span><br><span class="line">   enableLocalhostAuthBypass: <span class="literal">true</span></span><br><span class="line">replication:</span><br><span class="line">   replSetName: <span class="string">"shard1"</span> <span class="comment">#复制集名称</span></span><br><span class="line">sharding:</span><br><span class="line">   clusterRole: shardsvr <span class="comment">#作为分片服务</span></span><br><span class="line">security:</span><br><span class="line">    authorization: <span class="string">"enabled"</span></span><br><span class="line">    keyFile: /Users/hanqf/myservice_dir/mongodb-mongos/keyFile.key <span class="comment">#密钥文件，用于集群内部认证</span></span><br></pre></td></tr></table></figure>

<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: file</span><br><span class="line">   path: <span class="string">"/Users/hanqf/myservice_dir/mongodb-mongos/config/node1/logs/mongo.log"</span> <span class="comment">#注意修改路径</span></span><br><span class="line">   logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">   journal:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">   dbPath: <span class="string">"/Users/hanqf/myservice_dir/mongodb-mongos/config/node1/db"</span> <span class="comment">#注意修改路径</span></span><br><span class="line">processManagement:</span><br><span class="line">   fork: <span class="literal">true</span></span><br><span class="line">net:</span><br><span class="line">   bindIp: 0.0.0.0</span><br><span class="line">   port: 29011  <span class="comment">#注意修改端口</span></span><br><span class="line">setParameter:</span><br><span class="line">   enableLocalhostAuthBypass: <span class="literal">true</span></span><br><span class="line">replication:</span><br><span class="line">   replSetName: <span class="string">"config"</span> <span class="comment">#复制集名称</span></span><br><span class="line">sharding:</span><br><span class="line">   clusterRole: configsvr <span class="comment">#作为配置服务</span></span><br><span class="line">security:</span><br><span class="line">  authorization: <span class="string">"enabled"</span></span><br><span class="line">  keyFile: /Users/hanqf/myservice_dir/mongodb-mongos/keyFile.key <span class="comment">#密钥文件，用于集群内部认证</span></span><br></pre></td></tr></table></figure>

<h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: file</span><br><span class="line">   path: <span class="string">"/Users/hanqf/myservice_dir/mongodb-mongos/router/node1/logs/mongos.log"</span> <span class="comment">#注意修改路径</span></span><br><span class="line">   logAppend: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">   fork: <span class="literal">true</span></span><br><span class="line">net:</span><br><span class="line">   bindIp: 0.0.0.0</span><br><span class="line">   port: 29021   <span class="comment">#注意修改端口</span></span><br><span class="line">setParameter:</span><br><span class="line">   enableLocalhostAuthBypass: <span class="literal">true</span></span><br><span class="line">replication:</span><br><span class="line">   localPingThresholdMs: 15</span><br><span class="line">sharding:</span><br><span class="line">   configDB: config/127.0.0.1:29011,127.0.0.1:29012,127.0.0.1:29013 <span class="comment">#关联配置服务</span></span><br><span class="line">security:</span><br><span class="line">    keyFile: /Users/hanqf/myservice_dir/mongodb-mongos/keyFile.key <span class="comment">#密钥文件，用于集群内部认证</span></span><br></pre></td></tr></table></figure>

<h3 id="keyFile"><a href="#keyFile" class="headerlink" title="keyFile"></a>keyFile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/hanqf/myservice_dir/mongodb-mongos</span><br><span class="line">openssl rand -base64 741 &gt; keyFile.key</span><br><span class="line">chmod 400 mongodb-keyfile</span><br></pre></td></tr></table></figure>

<h2 id="配置config复制集"><a href="#配置config复制集" class="headerlink" title="配置config复制集"></a>配置config复制集</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --config /Users/hanqf/myservice_dir/mongodb-mongos/config/node1/mongod.conf</span><br><span class="line">mongod --config /Users/hanqf/myservice_dir/mongodb-mongos/config/node2/mongod.conf</span><br><span class="line">mongod --config /Users/hanqf/myservice_dir/mongodb-mongos/config/node3/mongod.conf</span><br></pre></td></tr></table></figure>
<h3 id="登录及配置"><a href="#登录及配置" class="headerlink" title="登录及配置"></a>登录及配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录任意一台config</span></span><br><span class="line">mongo --host 127.0.0.1:29011</span><br><span class="line"></span><br><span class="line">&gt;rs.initiate(</span><br><span class="line">  &#123;</span><br><span class="line">    _id: <span class="string">"config"</span>,</span><br><span class="line">    configsvr: <span class="literal">true</span>,</span><br><span class="line">    members: [</span><br><span class="line">      &#123; _id : 0, host : <span class="string">"127.0.0.1:29011"</span> &#125;,</span><br><span class="line">      &#123; _id : 1, host : <span class="string">"127.0.0.1:29012"</span> &#125;,</span><br><span class="line">      &#123; _id : 2, host : <span class="string">"127.0.0.1:29013"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建超级管理员，此时要求登录的是主库</span></span><br><span class="line">&gt;rs.isMaster() <span class="comment">#验证是否主库</span></span><br><span class="line">&gt;use admin</span><br><span class="line">&gt;db.createUser(</span><br><span class="line">   &#123;</span><br><span class="line">     user: <span class="string">"root"</span>,</span><br><span class="line">     <span class="built_in">pwd</span>: <span class="string">"password"</span>,</span><br><span class="line">     roles: [ &#123; role: <span class="string">"root"</span>, db: <span class="string">"admin"</span> &#125; ]</span><br><span class="line">   &#125;</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>


<p>验证用户是否可以登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --host 127.0.0.1:29011</span><br><span class="line">&gt;use admin</span><br><span class="line">&gt;db.auth(<span class="string">"root"</span>,<span class="string">"password"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="配置shard复制集"><a href="#配置shard复制集" class="headerlink" title="配置shard复制集"></a>配置shard复制集</h2><h3 id="启动shard1服务"><a href="#启动shard1服务" class="headerlink" title="启动shard1服务"></a>启动shard1服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --config /Users/hanqf/myservice_dir/mongodb-mongos/shard1/node1/mongod.conf</span><br><span class="line">mongod --config /Users/hanqf/myservice_dir/mongodb-mongos/shard1/node2/mongod.conf</span><br><span class="line">mongod --config /Users/hanqf/myservice_dir/mongodb-mongos/shard1/node3/mongod.conf</span><br></pre></td></tr></table></figure>
<h3 id="登录及配置-1"><a href="#登录及配置-1" class="headerlink" title="登录及配置"></a>登录及配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录任意一台config</span></span><br><span class="line">mongo --host 127.0.0.1:28011</span><br><span class="line"></span><br><span class="line">&gt;rs.initiate(</span><br><span class="line">  &#123;</span><br><span class="line">    _id: <span class="string">"shard1"</span>,</span><br><span class="line">    members: [</span><br><span class="line">      &#123; _id : 0, host : <span class="string">"127.0.0.1:28011"</span> &#125;,</span><br><span class="line">      &#123; _id : 1, host : <span class="string">"127.0.0.1:28012"</span> &#125;,</span><br><span class="line">      &#123; _id : 2, host : <span class="string">"127.0.0.1:28013"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建超级管理员，此时要求登录的是主库</span></span><br><span class="line">&gt;rs.isMaster() <span class="comment">#验证是否主库</span></span><br><span class="line">&gt;use admin</span><br><span class="line">&gt;db.createUser(</span><br><span class="line">   &#123;</span><br><span class="line">     user: <span class="string">"root"</span>,</span><br><span class="line">     <span class="built_in">pwd</span>: <span class="string">"password"</span>,</span><br><span class="line">     roles: [ &#123; role: <span class="string">"root"</span>, db: <span class="string">"admin"</span> &#125; ]</span><br><span class="line">   &#125;</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>

<h3 id="启动shard2服务"><a href="#启动shard2服务" class="headerlink" title="启动shard2服务"></a>启动shard2服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --config /Users/hanqf/myservice_dir/mongodb-mongos/shard2/node1/mongod.conf</span><br><span class="line">mongod --config /Users/hanqf/myservice_dir/mongodb-mongos/shard2/node2/mongod.conf</span><br><span class="line">mongod --config /Users/hanqf/myservice_dir/mongodb-mongos/shard2/node3/mongod.conf</span><br></pre></td></tr></table></figure>
<h3 id="登录及配置-2"><a href="#登录及配置-2" class="headerlink" title="登录及配置"></a>登录及配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录任意一台config</span></span><br><span class="line">mongo --host 127.0.0.1:28021</span><br><span class="line"></span><br><span class="line">&gt;rs.initiate(</span><br><span class="line">  &#123;</span><br><span class="line">    _id: <span class="string">"shard2"</span>,</span><br><span class="line">    members: [</span><br><span class="line">      &#123; _id : 0, host : <span class="string">"127.0.0.1:28021"</span> &#125;,</span><br><span class="line">      &#123; _id : 1, host : <span class="string">"127.0.0.1:28022"</span> &#125;,</span><br><span class="line">      &#123; _id : 2, host : <span class="string">"127.0.0.1:28023"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建超级管理员，此时要求登录的是主库</span></span><br><span class="line">&gt;rs.isMaster() <span class="comment">#验证是否主库</span></span><br><span class="line">&gt;use admin</span><br><span class="line">&gt;db.createUser(</span><br><span class="line">   &#123;</span><br><span class="line">     user: <span class="string">"root"</span>,</span><br><span class="line">     <span class="built_in">pwd</span>: <span class="string">"password"</span>,</span><br><span class="line">     roles: [ &#123; role: <span class="string">"root"</span>, db: <span class="string">"admin"</span> &#125; ]</span><br><span class="line">   &#125;</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>

<h3 id="启动shard3服务"><a href="#启动shard3服务" class="headerlink" title="启动shard3服务"></a>启动shard3服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --config /Users/hanqf/myservice_dir/mongodb-mongos/shard3/node1/mongod.conf</span><br><span class="line">mongod --config /Users/hanqf/myservice_dir/mongodb-mongos/shard3/node2/mongod.conf</span><br><span class="line">mongod --config /Users/hanqf/myservice_dir/mongodb-mongos/shard3/node3/mongod.conf</span><br></pre></td></tr></table></figure>
<h3 id="登录及配置-3"><a href="#登录及配置-3" class="headerlink" title="登录及配置"></a>登录及配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录任意一台config</span></span><br><span class="line">mongo --host 127.0.0.1:28031</span><br><span class="line"></span><br><span class="line">&gt;rs.initiate(</span><br><span class="line">  &#123;</span><br><span class="line">    _id: <span class="string">"shard3"</span>,</span><br><span class="line">    members: [</span><br><span class="line">      &#123; _id : 0, host : <span class="string">"127.0.0.1:28031"</span> &#125;,</span><br><span class="line">      &#123; _id : 1, host : <span class="string">"127.0.0.1:28032"</span> &#125;,</span><br><span class="line">      &#123; _id : 2, host : <span class="string">"127.0.0.1:28033"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建超级管理员，此时要求登录的是主库</span></span><br><span class="line">&gt;rs.isMaster() <span class="comment">#验证是否主库</span></span><br><span class="line">&gt;use admin</span><br><span class="line">&gt;db.createUser(</span><br><span class="line">   &#123;</span><br><span class="line">     user: <span class="string">"root"</span>,</span><br><span class="line">     <span class="built_in">pwd</span>: <span class="string">"password"</span>,</span><br><span class="line">     roles: [ &#123; role: <span class="string">"root"</span>, db: <span class="string">"admin"</span> &#125; ]</span><br><span class="line">   &#125;</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>


<h2 id="重启router服务"><a href="#重启router服务" class="headerlink" title="重启router服务"></a>重启router服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongos --config /Users/hanqf/myservice_dir/mongodb-mongos/router/node1/mongos.conf</span><br><span class="line">mongos --config /Users/hanqf/myservice_dir/mongodb-mongos/router/node2/mongos.conf</span><br></pre></td></tr></table></figure>

<h2 id="分片配置"><a href="#分片配置" class="headerlink" title="分片配置"></a>分片配置</h2><p>登录任意router</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --host 127.0.0.1:29021</span><br><span class="line">&gt;use admin</span><br><span class="line">&gt;db.auth(<span class="string">"root"</span>,<span class="string">"password"</span>)</span><br><span class="line"></span><br><span class="line">&gt;sh.addShard( <span class="string">"shard1/127.0.0.1:28011,127.0.0.1:28012,127.0.0.1:28013"</span>)</span><br><span class="line">&gt;sh.addShard( <span class="string">"shard2/127.0.0.1:28021,127.0.0.1:28022,127.0.0.1:28023"</span>)</span><br><span class="line">&gt;sh.addShard( <span class="string">"shard3/127.0.0.1:28031,127.0.0.1:28032,127.0.0.1:28033"</span>)</span><br><span class="line"><span class="comment">#查看集群状态</span></span><br><span class="line">&gt;sh.status()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据库用户，客户端可以使用该用户连接mongo路由</span></span><br><span class="line">&gt;use springboot</span><br><span class="line">&gt;db.createUser(</span><br><span class="line">   &#123;</span><br><span class="line">     user: <span class="string">"springboot"</span>,</span><br><span class="line">     <span class="built_in">pwd</span>: <span class="string">"123456"</span>,</span><br><span class="line">     roles: [ &#123; role: <span class="string">"dbOwner"</span>, db: <span class="string">"springboot"</span> &#125; ]</span><br><span class="line">   &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定要分片的数据库</span></span><br><span class="line">&gt;sh.enableSharding(<span class="string">"springboot"</span>)</span><br><span class="line"><span class="comment">#指定集合的分片规则</span></span><br><span class="line"><span class="comment">#这里表示指定springboot库下的user集合的_id字段（也就是主键，每个集合都有这个字段）按hash散列进行分片，&#123; id : 1 &#125;表示按字段id进度范围分片，这里id必须是整型</span></span><br><span class="line"><span class="comment">#要分片存储的集合都需要指定分片规则，分片规则一经创建不可修改，只能删除集合再重新设置</span></span><br><span class="line">&gt;sh.shardCollection(<span class="string">"springboot.user"</span>, &#123; _id : <span class="string">"hashed"</span> &#125; )</span><br><span class="line"></span><br><span class="line">&gt;use springboot</span><br><span class="line"><span class="comment">#查询user的集合状态</span></span><br><span class="line">&gt;db.user.stats()</span><br></pre></td></tr></table></figure>
<!--
这是一个注释，可以写很多内容，哈哈
-->
<blockquote class="blockquote-center">
            <h3 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h3>
          </blockquote>

<div class="note info">
            <h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>正式环境注意权限控制，使客户端只能连接router</li><li>可以创建任意多个router</li><li>springboot连接方式：<br><code>spring.data.mongodb.uri=mongodb://springboot:123456@127.0.0.1:29021,127.0.0.1:29022/springboot?authSource=springboot</code></li></ul>
          </div>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群</title>
    <url>/2018/12/27/redis-cluster/</url>
    <content><![CDATA[<h2 id="一、摘要"><a href="#一、摘要" class="headerlink" title="一、摘要"></a>一、摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ul>
<li>redis集群的构建方法【redis-5.0.2】</li>
<li>redis早期的版本中使用基于ruby的<code>redis-trib.rb</code>命令进行集群创建，新版本推荐使用 <code>redis-cli --cluster</code>，本文就是通过<code>redis-cli --cluster</code>命令实现集群构建。</li>
</ul>
<a id="more"></a>

<h2 id="二、快速创建集群"><a href="#二、快速创建集群" class="headerlink" title="二、快速创建集群"></a>二、快速创建集群</h2><p>redis为我们提供了快速创建集群的工具，安装好redis后，在其<code>/redis-5.0.2/utils/create-cluster/</code>目录下存在一个<code>create-cluster</code>命令，通过该命令可以快速创建一个基于本机端口30001~30006的三主三从的redis集群，可以通过修改端口号及服务数量来改变集群的配置。<br>1.启动6个redis服务，<code>./create-cluster start</code><br>2.创建集群，<code>./create-cluster create</code><br>3.关闭集群服务，<code>./create-cluster stop</code><br>4.清除数据及日志文件，<code>./create-cluster clean</code></p>
<h2 id="三、源码分析"><a href="#三、源码分析" class="headerlink" title="三、源码分析"></a>三、源码分析</h2><p>通过看源码可以很清楚其创建过程<br>1.启动6个reids服务，通过参数的方式进行启动，在生产环境中建议通过配置文件启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ &quot;$1&quot; &#x3D;&#x3D; &quot;start&quot; ]</span><br><span class="line">then</span><br><span class="line">    while [ $((PORT &lt; ENDPORT)) !&#x3D; &quot;0&quot; ]; do</span><br><span class="line">        PORT&#x3D;$((PORT+1))</span><br><span class="line">        echo &quot;Starting $PORT&quot;</span><br><span class="line">        ..&#x2F;..&#x2F;src&#x2F;redis-server --port $PORT --cluster-enabled yes --cluster-config-file nodes-$&#123;PORT&#125;.conf --cluster-node-timeout $TIMEOUT --appendonly yes --appendfilename appendonly-$&#123;PORT&#125;.aof --dbfilename dump</span><br><span class="line">-$&#123;PORT&#125;.rdb --logfile $&#123;PORT&#125;.log --daemonize yes</span><br><span class="line">    done</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#端口：</span><br><span class="line">port $PORT</span><br><span class="line">#是否启用集群：</span><br><span class="line">cluster-enabled yes</span><br><span class="line">#集群关联文件路径，创建redis集群时自动创建</span><br><span class="line">cluster-config-file nodes-$&#123;PORT&#125;.conf</span><br><span class="line">#集群节点间通信的超时时间，毫秒，建议2000，默认15000</span><br><span class="line">cluster-node-timeout $TIMEOUT</span><br><span class="line">#开启aof</span><br><span class="line">appendonly yes</span><br><span class="line">#aof文件名称，注意这里只能是文件名称，若要修改路径需要设置dir属性 ，如dir &#x2F;home&#x2F;hanqf&#x2F;redis-dir&#x2F;redis-5.0.2&#x2F;cluster-conf&#x2F;files&#x2F;</span><br><span class="line">appendfilename appendonly-$&#123;PORT&#125;.aof</span><br><span class="line">#rdb文件名称，同样只能是文件名称，同上路径共用dir属性</span><br><span class="line">dbfilename dump-$&#123;PORT&#125;.rdb</span><br><span class="line">#日志文件路径</span><br><span class="line">logfile $&#123;PORT&#125;.log</span><br><span class="line">#后台运行模式启动</span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure>

<p>2.构建集群，这里使用的就是<code>redis-cli --cluster</code>命令，可以看出与<code>redis-trib.rb</code>命令类似</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ &quot;$1&quot; &#x3D;&#x3D; &quot;create&quot; ]</span><br><span class="line">then</span><br><span class="line">    HOSTS&#x3D;&quot;&quot;</span><br><span class="line">    while [ $((PORT &lt; ENDPORT)) !&#x3D; &quot;0&quot; ]; do</span><br><span class="line">        PORT&#x3D;$((PORT+1))</span><br><span class="line">        HOSTS&#x3D;&quot;$HOSTS 127.0.0.1:$PORT&quot;</span><br><span class="line">    done</span><br><span class="line">    ..&#x2F;..&#x2F;src&#x2F;redis-cli --cluster create $HOSTS --cluster-replicas $REPLICAS</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p><code>create</code>后根的<code>$HOSTS</code>就是redis服务列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:30001 127.0.0.1:30002 127.0.0.1:30003 127.0.0.1:30004 127.0.0.1:30005 127.0.0.1:30006</span><br></pre></td></tr></table></figure>
<p><code>--cluster-replicas $REPLICAS</code>，这里$REPLICAS值为1，表示为每一个master节点分配一个slave节点</p>
<h2 id="四、实际应用"><a href="#四、实际应用" class="headerlink" title="四、实际应用"></a>四、实际应用</h2><p>这里我们使用2台服务器，分别启动3个redis服务，来构建一个三主三从的redis集群。</p>
<h3 id="1-服务器IP"><a href="#1-服务器IP" class="headerlink" title="1.服务器IP"></a>1.服务器IP</h3><ul>
<li>10.211.55.15</li>
<li>10.211.55.16</li>
</ul>
<h3 id="2-端口设置"><a href="#2-端口设置" class="headerlink" title="2.端口设置"></a>2.端口设置</h3><p>分别开启俩台服务器的如下端口，前面是redis服务端口，后面是集群通信端口（默认服务端口+10000）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6379，16379</span><br><span class="line">6380，16380</span><br><span class="line">6381，16381</span><br></pre></td></tr></table></figure>

<h3 id="3-redis-port-conf"><a href="#3-redis-port-conf" class="headerlink" title="3.redis-{port}.conf"></a>3.redis-{port}.conf</h3><p>这里需要按照上面的参数说明进行配置，如我们配置号redis-6379.conf后，可以通过如下命令进行复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">more redis-6379.conf | sed &#39;s&#x2F;6379&#x2F;6380&#x2F;g&#39; &gt; redis-6380.conf</span><br><span class="line">more redis-6379.conf | sed &#39;s&#x2F;6379&#x2F;6381&#x2F;g&#39; &gt; redis-6381.conf</span><br></pre></td></tr></table></figure>

<h3 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4.启动服务"></a>4.启动服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#10.211.55.15</span><br><span class="line">.&#x2F;redis-server redis-6379.conf</span><br><span class="line">.&#x2F;redis-server redis-6380.conf</span><br><span class="line">.&#x2F;redis-server redis-6381.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#10.211.55.16</span><br><span class="line">.&#x2F;redis-server redis-6379.conf</span><br><span class="line">.&#x2F;redis-server redis-6380.conf</span><br><span class="line">.&#x2F;redis-server redis-6381.conf</span><br></pre></td></tr></table></figure>

<h3 id="5-构建集群"><a href="#5-构建集群" class="headerlink" title="5.构建集群"></a>5.构建集群</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-cli --cluster create 10.211.55.15:6379 10.211.55.15:6380 10.211.55.15:6381 10.211.55.16:6379 10.211.55.16:6380 10.211.55.16:6381  --cluster-replicas 1</span><br></pre></td></tr></table></figure>

<h2 id="五、集群相关命令"><a href="#五、集群相关命令" class="headerlink" title="五、集群相关命令"></a>五、集群相关命令</h2><h3 id="1-健康检查"><a href="#1-健康检查" class="headerlink" title="1.健康检查"></a>1.健康检查</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 后面可以是集群中任意节点</span><br><span class="line">.&#x2F;redis-cli --cluster check 10.211.55.15:6380</span><br></pre></td></tr></table></figure>

<p>输出如下，可以看到集群中的主从关系，以及每个master中含有key的数量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.211.55.15:6380 (c39c1e8a...) -&gt; 2 keys | 5461 slots | 1 slaves.</span><br><span class="line">10.211.55.16:6380 (3edc1dae...) -&gt; 5 keys | 5461 slots | 1 slaves.</span><br><span class="line">10.211.55.16:6379 (4dd31f17...) -&gt; 2 keys | 5462 slots | 1 slaves.</span><br><span class="line">[OK] 9 keys in 3 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 10.211.55.15:6380)</span><br><span class="line">M: c39c1e8aa6e07e337aaab03eab3727f739201cd2 10.211.55.15:6380</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: a83903f50621d7627f3ce59f1210af4938b8acc4 10.211.55.15:6381</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 4dd31f17e83ef7aa6c7a36474f7f54d842e0ed64</span><br><span class="line">M: 3edc1daeaf3a848156ad8cc601b1374dd0459d9c 10.211.55.16:6380</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 4dd31f17e83ef7aa6c7a36474f7f54d842e0ed64 10.211.55.16:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: cb6a94201d6f5a4e016b1549afc8c976a1a3dda4 10.211.55.15:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 3edc1daeaf3a848156ad8cc601b1374dd0459d9c</span><br><span class="line">S: 3f41a95296cb2681ea599f47aaff9c662b3338ad 10.211.55.16:6381</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates c39c1e8aa6e07e337aaab03eab3727f739201cd2</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>

<p>说明：此时如果关闭其中一个master节点，那么其对应的从节点就会升级为主节点，当重新启动原master节点后，则该节点会自动加入集群，并作为从节点。</p>
<h3 id="2-集群扩容，即为集群添加新的主机和从机"><a href="#2-集群扩容，即为集群添加新的主机和从机" class="headerlink" title="2.集群扩容，即为集群添加新的主机和从机"></a>2.集群扩容，即为集群添加新的主机和从机</h3><h4 id="2-1通过如下命令添加新的node"><a href="#2-1通过如下命令添加新的node" class="headerlink" title="2.1通过如下命令添加新的node"></a>2.1通过如下命令添加新的node</h4><p>说明：10.211.55.15:6382 是新的服务地址，10.211.55.16:6380 是集群中任意一个的服务地址,添加后的服务类型为master。</p>
<p>此时我们通过健康检查可以看到新加入的服务没有分配槽点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-cli --cluster check 10.211.55.15:6380</span><br><span class="line">Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.</span><br><span class="line">Could not connect to Redis at 10.211.55.15:6379: Connection refused</span><br><span class="line">10.211.55.15:6380 (a5f63b8e...) -&gt; 2 keys | 5461 slots | 1 slaves.</span><br><span class="line">10.211.55.16:6379 (15506850...) -&gt; 2 keys | 5462 slots | 1 slaves.</span><br><span class="line">10.211.55.15:6382 (316e068f...) -&gt; 0 keys | 0 slots | 0 slaves.   #注意，这里新添加的主机没有分配槽（slot），需要先进行分配才能使用</span><br><span class="line">10.211.55.16:6380 (d944c0b1...) -&gt; 5 keys | 5461 slots | 0 slaves.</span><br><span class="line">[OK] 9 keys in 4 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 10.211.55.15:6380)</span><br><span class="line">M: a5f63b8e4f24a73d36da9e0bbf84988d7c5558d3 10.211.55.15:6380</span><br><span class="line">  slots:[10923-16383] (5461 slots) master</span><br><span class="line">  1 additional replica(s)</span><br><span class="line">M: 15506850b235f4277306368533cacf4a5ec1bbd1 10.211.55.16:6379</span><br><span class="line">  slots:[5461-10922] (5462 slots) master</span><br><span class="line">  1 additional replica(s)</span><br><span class="line">M: 316e068fd71ee228299198a271efd839d3493835 10.211.55.15:6382</span><br><span class="line">  slots: (0 slots) master</span><br><span class="line">S: b3c0e06da5b5d694c3a68408fb4c8f7607d7e9e0 10.211.55.16:6381</span><br><span class="line">  slots: (0 slots) slave</span><br><span class="line">  replicates a5f63b8e4f24a73d36da9e0bbf84988d7c5558d3</span><br><span class="line">M: d944c0b19e92af325b882e3a86ff09c2b6b53f47 10.211.55.16:6380</span><br><span class="line">  slots:[0-5460] (5461 slots) master</span><br><span class="line">S: 4bce4c24959bda55d087296e86f58ec03186d3ae 10.211.55.15:6381</span><br><span class="line">  slots: (0 slots) slave</span><br><span class="line">  replicates 15506850b235f4277306368533cacf4a5ec1bbd1</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>

<h4 id="2-2分配槽"><a href="#2-2分配槽" class="headerlink" title="2.2分配槽"></a>2.2分配槽</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-cli --cluster reshard 10.211.55.15:6382</span><br></pre></td></tr></table></figure>
<p>执行命令后会有如下设置：<br>  1.问你是否从原有的1-16384个槽中分配多少到新的主节点，我们这里分配4000为例，回车<br>    2：然后紧接着会询问你给id为谁的主节点分配，这里就是新加的节点10.211.55.15:6382，其对应的Id为:316e068fd71ee228299198a271efd839d3493835<br>    3：询问你是从所有的空间去给这个节点分配空间还是从某一个节点分配，我这里输入all  回车继续<br>    4：然后会给你分配出一个分配计划，输入yes开始分配。完成ok</p>
<p>此时再次运行健康检查可以看到槽点已经分配成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-cli --cluster check localhost:6380</span><br><span class="line">Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.</span><br><span class="line">localhost:6380 (a5f63b8e...) -&gt; 1 keys | 4128 slots | 1 slaves.</span><br><span class="line">10.211.55.16:6379 (15506850...) -&gt; 2 keys | 4128 slots | 1 slaves.</span><br><span class="line">10.211.55.15:6382 (316e068f...) -&gt; 2 keys | 4000 slots | 0 slaves.</span><br><span class="line">10.211.55.16:6380 (d944c0b1...) -&gt; 4 keys | 4128 slots | 1 slaves.</span><br><span class="line">[OK] 9 keys in 4 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br><span class="line">………………………………</span><br></pre></td></tr></table></figure>


<h4 id="2-3平衡槽，就是均匀分配集群中的所有槽到所有的节点，该步非必须，只是看着好看点"><a href="#2-3平衡槽，就是均匀分配集群中的所有槽到所有的节点，该步非必须，只是看着好看点" class="headerlink" title="2.3平衡槽，就是均匀分配集群中的所有槽到所有的节点，该步非必须，只是看着好看点"></a>2.3平衡槽，就是均匀分配集群中的所有槽到所有的节点，该步非必须，只是看着好看点</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-cli --cluster rebalance --cluster-threshold 1 10.211.55.15:6382</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-cli --cluster info localhost:6380</span><br><span class="line">Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.</span><br><span class="line">localhost:6380 (a5f63b8e...) -&gt; 1 keys | 4096 slots | 1 slaves.</span><br><span class="line">10.211.55.16:6379 (15506850...) -&gt; 2 keys | 4096 slots | 1 slaves.</span><br><span class="line">10.211.55.15:6382 (316e068f...) -&gt; 2 keys | 4096 slots | 0 slaves.</span><br><span class="line">10.211.55.16:6380 (d944c0b1...) -&gt; 4 keys | 4096 slots | 1 slaves.</span><br><span class="line">[OK] 9 keys in 4 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br></pre></td></tr></table></figure>


<h4 id="2-4为新加入的master添加slave"><a href="#2-4为新加入的master添加slave" class="headerlink" title="2.4为新加入的master添加slave"></a>2.4为新加入的master添加slave</h4><p>同样需要先加入集群</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-cli --cluster add-node 10.211.55.16:6382 10.211.55.16:6380</span><br></pre></td></tr></table></figure>

<p>之后不需要做分配和平衡槽的操作<br>登录这个redis， <code>./redis-cli -h 10.211.55.16 -p 6382</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6382&gt; cluster replicate 316e068fd71ee228299198a271efd839d3493835 #主节点的id</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>


<h3 id="3-删除节点"><a href="#3-删除节点" class="headerlink" title="3.删除节点"></a>3.删除节点</h3><h4 id="3-1删除主节点"><a href="#3-1删除主节点" class="headerlink" title="3.1删除主节点"></a>3.1删除主节点</h4><p>删除节点前，节点上的槽要被清空</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-cli --cluster reshard 10.211.55.15:6382 #集群中任意ip即可</span><br></pre></td></tr></table></figure>
<p>  1.问你是否从原有的1-16384个槽中分配多少到新的主节点我们这里分配4096，即该节点上的槽数<br>    2：然后紧接着会询问你给id为谁的主节点分配，这里我们分配给10.211.55.16:6379，即15506850b235f4277306368533cacf4a5ec1bbd1<br>    3：询问你是从所有的空间去给这个节点分配空间还是从某一个节点分配<br>    我这里输入要移出的节点ID ,即316e068fd71ee228299198a271efd839d3493835 回车继续 输入 done<br>    4：然后会给你分配出一个分配计划，输入yes开始分配。完成ok</p>
<p>执行删除节点命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-cli --cluster del-node 10.211.55.16:6379 316e068fd71ee228299198a271efd839d3493835</span><br><span class="line">Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.</span><br><span class="line">&gt;&gt;&gt; Removing node 316e068fd71ee228299198a271efd839d3493835 from cluster 10.211.55.16:6379</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="line">&gt;&gt;&gt; SHUTDOWN the node.</span><br></pre></td></tr></table></figure>

<p>说明：<br>删除节点会自动关闭被移出的redis服务，此时，该主节点的从节点会自动转为其它主节点的从节点，而不会升级为主节点</p>
<h4 id="3-2删除从节点"><a href="#3-2删除从节点" class="headerlink" title="3.2删除从节点"></a>3.2删除从节点</h4><p>直接执行节点删除命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-cli --cluster del-node 10.211.55.16:6379 从节点ID</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot2学习笔记--activemq</title>
    <url>/2018/12/12/activemq-springboot/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ul>
<li>Spring Boot(2.1.1.RELEASE)中使用<a href="http://activemq.apache.org" target="_blank" rel="noopener">activemq(5.15.8)</a>的方法</li>
</ul>
<a id="more"></a>

<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- activemq自动配置依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 连接池依赖 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 如果springboot是2.x.x的版本如果启用连接池（spring.activemq.pool.enabled=true），就必须引入这个依赖，否则启动时会报错，提示找不到JmsMessagingTemplate</span></span><br><span class="line"><span class="comment">      springboot是1.5.x的版本就不需要引入，</span></span><br><span class="line"><span class="comment">      这是因为springboot1.5.x使用的是org.apache.activemq.pool.PooledConnectionFactory，</span></span><br><span class="line"><span class="comment">      而springboot2.x.x时候用的org.messaginghub.pooled.jms.JmsPoolConnectionFactory，</span></span><br><span class="line"><span class="comment">      可以通过源码查看：</span></span><br><span class="line"><span class="comment">      org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryConfiguration : 负责初始化ConnectionFactory</span></span><br><span class="line"><span class="comment">      org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration  : 负责初始化JmsMessagingTemplate --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.messaginghub<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pooled-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.activemq.broker-url</span>=<span class="string">tcp://localhost:61616</span></span><br><span class="line"><span class="meta">spring.activemq.user</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.activemq.password</span>=<span class="string">admin</span></span><br><span class="line"><span class="comment">#启用连接池</span></span><br><span class="line"><span class="meta">spring.activemq.pool.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#最大连接数</span></span><br><span class="line"><span class="meta">spring.activemq.pool.max-connections</span>=<span class="string">100</span></span><br></pre></td></tr></table></figure>

<h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJms</span> <span class="comment">//启用jms功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果要使用topic类型的消息，则需要配置该bean</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"jmsTopicListenerContainerFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JmsListenerContainerFactory <span class="title">jmsTopicListenerContainerFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ConnectionFactory connectionFactory</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>&#123;</span><br><span class="line">        DefaultJmsListenerContainerFactory factory</span><br><span class="line">                = <span class="keyword">new</span> DefaultJmsListenerContainerFactory();</span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line">        factory.setPubSubDomain(<span class="keyword">true</span>); <span class="comment">//这里必须设置为true，false则表示是queue类型</span></span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"springboot.queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQQueue(<span class="string">"springboot.queue"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"springboot.topic"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Topic <span class="title">topic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQTopic(<span class="string">"springboot.topic"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"springboot.queuereply"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queuereply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQQueue(<span class="string">"springboot.queuereply"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//监听队列，queue类型</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination=<span class="string">"springboot.queue.a"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveQueueA</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+ <span class="string">"收到的报文为:"</span>+text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination=<span class="string">"springboot.*.b"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveQueueB</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+ <span class="string">"收到的报文为:"</span>+text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination=<span class="string">"springboot.&gt;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveQueueAll</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+ <span class="string">"收到的报文为:"</span>+text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听队列，topic类型，这里containerFactory要配置为jmsTopicListenerContainerFactory</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"springboot.topic"</span>,</span><br><span class="line">            containerFactory = <span class="string">"jmsTopicListenerContainerFactory"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveTopic</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">" 收到的报文为:"</span>+text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination=<span class="string">"springboot.queuereply"</span>)</span><br><span class="line">    <span class="meta">@SendTo</span>(<span class="string">"out.replyTo.queue"</span>) <span class="comment">//消费者应答后通知生产者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">receiveQueueReply</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+ <span class="string">"收到的报文为:"</span>+text);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"out.replyTo.queue receiveQueueReply"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(<span class="string">"springboot.queue.a"</span>)</span><br><span class="line">    <span class="keyword">private</span> Queue queuea;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(<span class="string">"springboot.queue.b"</span>)</span><br><span class="line">    <span class="keyword">private</span> Queue queueb;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(<span class="string">"springboot.topic"</span>)</span><br><span class="line">    <span class="keyword">private</span> Topic topic;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(<span class="string">"springboot.queuereply"</span>)</span><br><span class="line">    <span class="keyword">private</span> Queue queuereply;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息，destination是发送到的队列，message是待发送的消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Destination destination, <span class="keyword">final</span> String message)</span></span>&#123;</span><br><span class="line">        jmsTemplate.convertAndSend(destination, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendQueueAMessage</span><span class="params">(<span class="keyword">final</span> String message)</span></span>&#123;</span><br><span class="line">        sendMessage(queuea, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendQueueBMessage</span><span class="params">(<span class="keyword">final</span> String message)</span></span>&#123;</span><br><span class="line">        sendMessage(queueb, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTopicMessage</span><span class="params">(<span class="keyword">final</span> String message)</span></span>&#123;</span><br><span class="line">        sendMessage(topic, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendQueueMessageReply</span><span class="params">(<span class="keyword">final</span> String message)</span></span>&#123;</span><br><span class="line">        sendMessage(queuereply, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者监听消费者的应答</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"out.replyTo.queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumerMessage</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"从out.replyTo.queue收到报文"</span>+text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术 activemq</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot2学习笔记--thymeleaf</title>
    <url>/2018/10/10/thymeleaf_study/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ul>
<li>Spring Boot(2.0.4)中使用<a href="https://www.thymeleaf.org" target="_blank" rel="noopener">thymeleaf(3.0.9)</a>的常用语法</li>
</ul>
<a id="more"></a>

<h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring对thymeleaf的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="开启spring-boot对thymeleaf的支持"><a href="#开启spring-boot对thymeleaf的支持" class="headerlink" title="开启spring boot对thymeleaf的支持"></a>开启spring boot对thymeleaf的支持</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">##thymeleaf</span></span><br><span class="line"><span class="meta">spring.thymeleaf.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"><span class="meta">spring.thymeleaf.suffix</span>=<span class="string">.html</span></span><br><span class="line"><span class="meta">spring.thymeleaf.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="meta">spring.thymeleaf.mode</span>=<span class="string">HTML</span></span><br><span class="line"><span class="comment">#关闭页面缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.thymeleaf.servlet.content-type</span>=<span class="string">text/html</span></span><br></pre></td></tr></table></figure>

<p>也可以通过@Bean的方式开启支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ThymeleafViewResolver <span class="title">thymeleafViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"thymeleafViewResolver"</span>);</span><br><span class="line">    ThymeleafViewResolver viewResolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">    viewResolver.setTemplateEngine(templateEngine());</span><br><span class="line">    viewResolver.setOrder(<span class="number">1</span>);</span><br><span class="line">    viewResolver.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    viewResolver.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">    viewResolver.setCache(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> viewResolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SpringResourceTemplateResolver <span class="title">templateResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SpringResourceTemplateResolver templateResolver = <span class="keyword">new</span> SpringResourceTemplateResolver();</span><br><span class="line">    templateResolver.setApplicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">    templateResolver.setPrefix(<span class="string">"classpath:/templates/"</span>);</span><br><span class="line">    templateResolver.setSuffix(<span class="string">".html"</span>);        </span><br><span class="line">    templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">    templateResolver.setCacheable(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> templateResolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">    templateEngine.setTemplateResolver(templateResolver());</span><br><span class="line">    templateEngine.setEnableSpringELCompiler(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> templateEngine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="开启html页面对thymeleaf语法的支持"><a href="#开启html页面对thymeleaf语法的支持" class="headerlink" title="开启html页面对thymeleaf语法的支持"></a>开启html页面对thymeleaf语法的支持</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="各种表达式语法"><a href="#各种表达式语法" class="headerlink" title="各种表达式语法"></a>各种表达式语法</h3><ol>
<li><p>${…} 变量表达式，用于展示后台传递过来的变量（request和session中的值）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"modify"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;modify&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;dataObj.id&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">name</span>=<span class="string">"logParamData"</span> <span class="attr">id</span>=<span class="string">"logParamData"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;dataObj.logParamData&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">以下两种方式效果一致</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;dataObj.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>[[$&#123;dataObj.name&#125;]]<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">字符串拼接，可以使用加号，也可以使用竖线，以下两种方式效果一致</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"accessTypes"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;item.id&#125;+'_'+$&#123;type.id&#125;"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span> [[$&#123;type.name&#125;]</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"accessTypes"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;|$&#123;item.id&#125;_$&#123;type.id&#125;|&#125;"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span> [[$&#123;type.name&#125;]</span><br><span class="line"></span><br><span class="line">#dates与java.util.Date对象的方法对应，格式化、日期组件抽取等等</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(item.logTime, 'yyyy-MM-dd')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;#dates.format(item.logTime, 'yyyy-MM-dd')&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>#{…} 国际化消息表达式，用于展示message.properties等国际化资源文件中的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"selectAll"</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;common.choose&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">消息中需要传递变量的情况，多个变量逗号分割</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span> <span class="attr">th:text</span>=<span class="string">"#&#123;common.page.summary($&#123;_pageBean.pageCount&#125;,$&#123;_pageBean.total&#125;)&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">以下两种方式效果一致</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"#&#123;common.operate&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>[[#&#123;common.operate&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>@{…} 链接url表达式，用于封装url，如contextPath补全</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resource/css/netqin.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>/&gt;</span></span><br><span class="line">用两个竖线来拼接带表达式的字符串</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;|/resource/js/i18n/list.#&#123;locale&#125;.js|&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">带请求参数的url，多个用逗号分割</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/auth/systemLogger/edit.do(id=$&#123;item.id&#125;,flag=$&#123;flag&#125;)&#125;"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;common.edit&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>js和css中用到表达式时使用双中括号的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> modify = <span class="string">"[[$&#123;modify&#125;]]"</span>;</span><br><span class="line"><span class="keyword">if</span>(modify != <span class="string">"add"</span>)&#123;</span><br><span class="line">    $(<span class="string">"#password"</span>).attr(<span class="string">"placeholder"</span>,<span class="string">"[[#&#123;user.detail.changeNotice&#125;]]"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>*{…} 选择变量表达式，用于简写变量名称，需要配合th:object一起使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>firstName: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;firstName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>lastName: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;lastName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">相当于</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>firstName: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.firstName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>lastName: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.lastName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><del>{…} 代码块表达式，用于在html中复用相同的结构<br>语法：</del>{templatename::fragmentname}<br>示例：<br>common/model.html，th:fragment=”header”指定代码块名称</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:fragment</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">http-equiv</span>=<span class="string">"Pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">http-equiv</span>=<span class="string">"Expire"</span> <span class="attr">content</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resource/css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resource/css/ace.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/resource/css/font-awesome.min.css&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/resource/js/jquery-1.11.0.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>demo.html，th:replace=”common/model::header”，模板名称::代码块名称</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">th:replace</span>=<span class="string">"common/model::header"</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>说明：代码块表达式需要配合th属性（th:insert，th:replace，th:include）一起使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">th:insert：将代码块片段整个插入到使用了th:insert的HTML标签中，</span><br><span class="line">th:replace：将代码块片段整个替换使用了th:replace的HTML标签中，</span><br><span class="line">th:include：将代码块片段包含的内容插入到使用了th:include的HTML标签中，</span><br></pre></td></tr></table></figure>

<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"item:$&#123;results&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ids"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;item.id&#125;"</span> <span class="attr">class</span>=<span class="string">"noborder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    [[$&#123;#dates.format(item.logTime, 'yyyy-MM-dd')&#125;]]</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.logDesc&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.logUser&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="带遍历状态的示例"><a href="#带遍历状态的示例" class="headerlink" title="带遍历状态的示例"></a>带遍历状态的示例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"item,status:$&#123;results&#125;"</span> <span class="attr">th:class</span>=<span class="string">"$&#123;status.odd&#125;? 'odd':'even'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ids"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;item.id&#125;"</span> <span class="attr">class</span>=<span class="string">"noborder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    [[$&#123;#dates.format(item.logTime, 'yyyy-MM-dd')&#125;]]</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.logDesc&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.logUser&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>状态说明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index：当前遍历索引，从0开始</span><br><span class="line">count：当前遍历索引，从1开始</span><br><span class="line">size：总元素数量</span><br><span class="line">current：每一次遍历的iter变量</span><br><span class="line">even&#x2F;odd：当前遍历是even还是odd，布尔属性</span><br><span class="line">first：当前遍历是第一个，布尔属性</span><br><span class="line">last：当前遍历是最后一个，布尔属性</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="遍历时可以自定义变量"><a href="#遍历时可以自定义变量" class="headerlink" title="遍历时可以自定义变量"></a>遍历时可以自定义变量</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:with：用于定义变量，多个使用逗号分割</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:each</span>=<span class="string">"type,status:$&#123;accessTypes&#125;"</span> <span class="attr">th:with</span>=<span class="string">"shwoName=$&#123;item.id&#125;+'_'+$&#123;item.name&#125;"</span>&gt;</span></span><br><span class="line">[[$&#123;shwoName&#125;]]</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not status.last&#125;"</span>&gt;</span>,<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><h4 id="th-if"><a href="#th-if" class="headerlink" title="th:if"></a>th:if</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">判断为true时才会显示div，authorities为Set类型，所以判断是否包含时可以使用#sets.contains()方法，测试时发现使用#arrays.contains()方法时也可以</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;dataObj.reserved&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"item:$&#123;dataObj.authorities&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"authorities"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;item.id&#125;"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">th:if</span>=<span class="string">"$&#123;dataObj.authorities ==null or not #sets.contains(dataObj.authorities,item)&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"authorities"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;item.id&#125;"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;dataObj.authorities !=null and #sets.contains(dataObj.authorities,item)&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.showNameRole&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">如果要判断为false时才会显示div，可以判断值是否等于false，或者使用th:unless</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;dataObj.reserved==false&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"item:$&#123;dataObj.authorities&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"authorities"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;item.id&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.showNameRole&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:unless</span>=<span class="string">"$&#123;dataObj.reserved&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"item:$&#123;dataObj.authorities&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"authorities"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;item.id&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.showNameRole&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>th:if 以下情况运算为true<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">值不为null</span><br><span class="line">值为boolean且为true</span><br><span class="line">值为数字且非0</span><br><span class="line">值为字符且非0</span><br><span class="line">值是字符串且不是：“false”，“off”，“no”</span><br><span class="line">值是object,但不为null</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="th-switch-和-th-case"><a href="#th-switch-和-th-case" class="headerlink" title="th:switch 和 th:case"></a>th:switch 和 th:case</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">bool匹配</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;dataObj.reserved&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"true"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"false"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">字符串匹配，要加单引号</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;item.showNameRole&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'manager'"</span>&gt;</span>manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;item.showNameRole&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'manager'"</span>&gt;</span>manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>unknow<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>说明：th:case=”*” 表示没有匹配成功时显示的内容</li>
</ul>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li>字符串连接<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　+ : $&#123;item.id&#125;+&#39;_&#39;+$&#123;type.id&#125;</span><br><span class="line">　　|xxxx| : |The name is $&#123;name&#125;|</span><br></pre></td></tr></table></figure></li>
<li>算术运算<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　+ , - , * , &#x2F; , %  (二元运算符)</span><br><span class="line">　　-  :负号（一元运算符）</span><br></pre></td></tr></table></figure></li>
<li>布尔操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　and :且,or :或 (二元运算符)</span><br><span class="line">　　!,not :非（一元操作符）</span><br></pre></td></tr></table></figure></li>
<li>关系操作符<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　&gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; (gt , lt , ge , le)</span><br><span class="line">　　&#x3D;&#x3D; , !&#x3D; (eq, ne)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="表达式工具对象"><a href="#表达式工具对象" class="headerlink" title="表达式工具对象"></a>表达式工具对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#dates 与java.util.Date对象的方法对应，格式化、日期组件抽取等等</span><br><span class="line">#calendars 类似#dates，与java.util.Calendar对象对应</span><br><span class="line">#numbers 格式化数字对象的工具方法</span><br><span class="line">#strings 与java.lang.String对应的工具方法：contains、startsWith、prepending&#x2F;appending等等</span><br><span class="line">#objects 用于对象的工具方法</span><br><span class="line">#bools 用于布尔运算的工具方法</span><br><span class="line">#arrays 用于数组的工具方法</span><br><span class="line">#lists 用于列表的工具方法</span><br><span class="line">#sets 用于set的工具方法</span><br><span class="line">#maps 用于map的工具方法</span><br><span class="line">#aggregates 用于创建数组或集合的聚合的工具方法</span><br><span class="line">#messages 用于在变量表达式内部获取外化消息的工具方法，与#&#123;…&#125;语法获取的方式相同</span><br><span class="line">#ids 用于处理可能重复出现（例如，作为遍历的结果）的id属性的工具方法</span><br></pre></td></tr></table></figure>


<h2 id="使用springsecurity权限标签的方法"><a href="#使用springsecurity权限标签的方法" class="headerlink" title="使用springsecurity权限标签的方法"></a>使用springsecurity权限标签的方法</h2><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果项目中使用到了springsecurity4， 则要加入下面的依赖来使用权限标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>开启命名空间支持</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用方式与jsp标签类似：</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/auth/systemLogger/edit.do&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-success btn-xs no-hover"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;common.create&#125;"</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('LOGGER_ADD')"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-xs"</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;common.delete&#125;"</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('LOGGER_DELETE')"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="调用spring管理的bean的方法"><a href="#调用spring管理的bean的方法" class="headerlink" title="调用spring管理的bean的方法"></a>调用spring管理的bean的方法</h2><p>语法：${@beanName.methodName(param,…)}<br>说明：beanName就是注册时的名称<br>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#httpSession就是javax.servlet.http.HttpSession对象</span><br><span class="line">#httpServletRequest就是javax.servlet.http.HttpServletRequest对象</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;@commonService.clearSessionMessage(#httpServletRequest)&#125;"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.cnblogs.com/itdragon/archive/2018/04/13/8724291.html" target="_blank" rel="noopener">https://www.cnblogs.com/itdragon/archive/2018/04/13/8724291.html</a></li>
<li><a href="https://blog.csdn.net/abap_brave/article/details/53009149" target="_blank" rel="noopener">https://blog.csdn.net/abap_brave/article/details/53009149</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Python--virtualenv</title>
    <url>/2018/04/28/python_virtualenv/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>官方网站：<a href="https://virtualenv.pypa.io/en/stable/installation/" target="_blank" rel="noopener">https://virtualenv.pypa.io/en/stable/installation/</a></p>
<ul>
<li>执行python项目时都需要为其安装运行环境需要的依赖，比如有些项目需要在python2下运行，有些项目需要在python3下运行，有些项目需要安装mysqlclient依赖，有些项目需要django依赖，如果这些依赖都被安装在统一的系统环境中，势必彼此之间会造成干扰，特别是需要同一个依赖的不同版本时更是难以维护；</li>
<li>virtualenv可以为python项目创建独立的虚拟运行环境，这样不同的项目可以运行在各自独立的执行环境中而彼此之间不受干扰；</li>
<li>在使用pycharm创建项目时，需要指定python执行器，此时就是创建的虚拟环境。<a id="more"></a>

</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>pip3 install virtualenv</code></p>
<ul>
<li>本文使用python3的pip命令安装virtualenv，所以默认情况下创建虚拟环境时都是python3的执行环境，可以通过<code>--python</code>参数指定python的执行环境，详见下文『创建新的虚拟环境』</li>
</ul>
<h2 id="创建新的虚拟环境"><a href="#创建新的虚拟环境" class="headerlink" title="创建新的虚拟环境"></a>创建新的虚拟环境</h2><p><code>virtualenv venv1</code> # 当前目录下创建venv1文件夹，并在其下创建python环境</p>
<ul>
<li><p>默认情况下，除了python本身的命令外不包含系统环境下的第三方依赖，比如系统环境已经安装好django、mysqlclient等，都不会带过来，需要重新在当前虚拟环境下安装。</p>
</li>
<li><p>如果希望访问系统环境中的某些第三方依赖，可以在创建虚拟环境时执行如下命令：<br><code>virtualenv venv1 --system-site-packages</code> #此时当前虚拟环境就可以访问系统环境了</p>
</li>
<li><p>python本身支持python2和python3同时共存，可以指定python命令路径，比如使用python2的环境</p>
<figure class="highlight plain"><figcaption><span>--python</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 激活虚拟环境</span><br><span class="line">&#96;source activate&#96;</span><br><span class="line">&#96;&#96;&#96;shell</span><br><span class="line">cd venv1&#x2F;bin</span><br><span class="line">hanqunfengdeMacBook-Pro:bin hanqunfeng$ source activate</span><br><span class="line">(venv1) hanqunfengdeMacBook-Pro:bin hanqunfeng$</span><br></pre></td></tr></table></figure>
</li>
<li><p>激活后所有python相关命令都变为venv1下的命令了</p>
</li>
</ul>
<h2 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h2><p><code>deactivate</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(venv1) hanqunfengdeMacBook-Pro:bin hanqunfeng$ deactivate</span><br><span class="line">hanqunfengdeMacBook-Pro:bin hanqunfeng$</span><br></pre></td></tr></table></figure>
<h2 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h2><p><code>rm -rf venv1</code> 删除venv1目录即可</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django2学习笔记</title>
    <url>/2018/04/28/django2_study/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li><p>版本：python3.6.4+django2.0.3<br>Demo：<a href="https://github.com/hanqunfeng/DjangoHelloWorld" target="_blank" rel="noopener">https://github.com/hanqunfeng/DjangoHelloWorld</a></p>
</li>
<li><p>参考资料：<br><a href="https://docs.djangoproject.com/en/2.0/" target="_blank" rel="noopener">官方资料</a><br><a href="https://yiyibooks.cn/xx/django_182/index.html" target="_blank" rel="noopener">Django 1.8.2 文档</a><br><a href="https://yiyibooks.cn/xx/Django_1.11.6/index.html" target="_blank" rel="noopener">Django 1.11.6 文档</a><br><a href="https://yiyibooks.cn/qy/django2/index.html" target="_blank" rel="noopener">Django 2.0.2文档</a><br><a href="https://code.ziqiangxuetang.com/django/django-internationalization.html" target="_blank" rel="noopener">Django中文教程</a></p>
<a id="more"></a>

</li>
</ul>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p><code>pip install Django</code><br><code>python -m django --version</code></p>
<h2 id="2-创建新项目"><a href="#2-创建新项目" class="headerlink" title="2.创建新项目"></a>2.创建新项目</h2><p><code>django-admin startproject mysite</code>  # mysite就是项目名称</p>
<h2 id="3-创建新的应用"><a href="#3-创建新的应用" class="headerlink" title="3.创建新的应用"></a>3.创建新的应用</h2><p><code>python manage.py startapp polls</code> # polls是应用名称<br>settings.py中加入新应用配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'polls.apps.PollsConfig'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="4-创建和更新数据库："><a href="#4-创建和更新数据库：" class="headerlink" title="4.创建和更新数据库："></a>4.创建和更新数据库：</h2><p><code>python manage.py makemigrations</code> # 全部应用都会创建迁移文件</p>
<p><code>python manage.py makemigrations polls</code> # 只创建指定的应用</p>
<p><code>python manage.py migrate</code> # 执行迁移文件到数据库</p>
<p>查看迁移文件生成的sql:<br> sqlmigrate命令接收迁移文件的名字并返回它们的SQL语句：#只是打印出要执行的sql语句</p>
<p><code>python manage.py sqlmigrate polls 0001</code>  # 这里迁移文件的后缀_initial.py不需要。</p>
<h2 id="5-启动服务器"><a href="#5-启动服务器" class="headerlink" title="5.启动服务器"></a>5.启动服务器</h2><p>Django的管理后台站点是默认启用的。 让我们启动开发服务器，然后探索它。<br>如果服务器没有运行，像下面这样启动它：</p>
<p><code>python manage.py runserver</code></p>
<p>现在，打开一个浏览器访问你本地域名中的 “/admin/” — 例如<a href="http://127.0.0.1:8000/admin/。" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/。</a></p>
<p>启动：</p>
<p><code>python manage.py runserver 9000</code> #指定启动端口</p>
<p><code>python manage.py runserver 0.0.0.0:9000</code> #指定启动ip+端口</p>
<h2 id="6-测试："><a href="#6-测试：" class="headerlink" title="6.测试："></a>6.测试：</h2><p><code>python manage.py test</code> #运行整个项目的全部tests.py</p>
<p><code>python manage.py test django2</code> #运行指定模块的tests.py</p>
<p><code>python manage.py test django2.tests.Django2Test</code> #测试指定模块的指定测试类</p>
<p><code>python manage.py test django2.tests.Django2Test.test_sql</code> #测试指定模块的指定测试类指定方法</p>
<h2 id="7-检查代码覆盖率："><a href="#7-检查代码覆盖率：" class="headerlink" title="7.检查代码覆盖率："></a>7.检查代码覆盖率：</h2><p><code>pip install coverage</code></p>
<p><code>coverage run my_program.py arg1 arg2</code></p>
<p>django检查方法：</p>
<p><code>coverage run --source=&#39;.&#39; manage.py test myapp</code></p>
<p>之后可以运行</p>
<p><code>coverage report</code> ：显示结果</p>
<p><code>coverage html</code>：生成html  测试会在当前项目下生成htmlcov目录，运行index.html即可查看</p>
<h2 id="8-mysql"><a href="#8-mysql" class="headerlink" title="8.mysql:"></a>8.mysql:</h2><p><code>brew install mysql-connector-c</code></p>
<p><code>pip install mysqlclient</code></p>
<p>需要提前创建好数据库<br>settings.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'django'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'django'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据库更新：<br>一般情况下，我们使用如下两个命令更新数据库</p>
<p><code>python manage.py makemigrations</code> #生成数据库模型文件</p>
<p><code>python manage.py migrate</code> #执行模型文件</p>
<p>或者：<br><code>python  manage.py migrate --database=users</code> #指定数据库，默认为default</p>
<p>如果由于默写原因删除了数据库中对应的表，则再次执行上面的命令是不能重新创建成功的，原因是每次django执行模型文件时都会在django_migrations表中新增对应的log记录，删掉对应的log记录即可重新执行成功。</p>
<h2 id="9-多数据源配置"><a href="#9-多数据源配置" class="headerlink" title="9.多数据源配置"></a>9.多数据源配置</h2><p>django配置连接多个数据库，自定义表名称：<br><a href="https://www.cnblogs.com/dreamer-fish/p/5469141.html" target="_blank" rel="noopener">https://www.cnblogs.com/dreamer-fish/p/5469141.html</a></p>
<p>使用models文件夹维护model时，一定要在其下的<strong>init</strong>.py中添加对model的引用，<br>否则<code>python manage.py makemigrations</code> 命令不会创建出对应的迁移文件<br>比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .person <span class="keyword">import</span> Person</span><br><span class="line"><span class="keyword">from</span> .user <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> .identity_card <span class="keyword">import</span> IdentityCard</span><br><span class="line"><span class="keyword">from</span> .car <span class="keyword">import</span> Car</span><br></pre></td></tr></table></figure>
<p>数据库路由:<br>settings.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASE_ROUTERS = [<span class="string">'django2.router.django2_router.Django2Router'</span>, ]</span><br></pre></td></tr></table></figure>

<p>可以将对应的迁移文件的sql导入到指定的db，所以路由器的设置很重要</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allow_migrate</span><span class="params">(self, db, app_label, model_name=None, **hints)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> db == <span class="string">'django2_db'</span>:  <span class="comment">#如果指定了数据库</span></span><br><span class="line">        <span class="keyword">return</span> app_label == <span class="string">'django2'</span> <span class="comment">#并且model被设置了正确的app_label，则可以执行迁移文件</span></span><br><span class="line">    <span class="keyword">elif</span> app_label == <span class="string">'django2'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>设置好数据库路由器后，执行python manage.py migrate –database=django2_db</p>
<h2 id="10-缓存"><a href="#10-缓存" class="headerlink" title="10.缓存"></a>10.缓存</h2><p>说明：不推荐使用站点级缓存和页面级缓存，除非是展示信息类的网站，如果是频繁修改的站点，最好手工在代码中维护缓存。</p>
<p>1).memcached</p>
<p><code>brew install memcached</code></p>
<p>启动：<code>memcached -d -p 11211 -c 1024 -m 64</code></p>
<p>-d:后台运行<br>-p:端口<br>-c:最大连接数<br>-m:最多分配内存</p>
<p>1.使用memcached：<code>pip install python-memcached</code></p>
<p>2.settings</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缓存设置</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.memcached.MemcachedCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'127.0.0.1:11211'</span>,</span><br><span class="line">        <span class="string">'TIMEOUT'</span>: <span class="number">600</span>,  <span class="comment"># 单位秒，默认300s, 60s * 10 = 10min</span></span><br><span class="line">        <span class="string">'KEY_PREFIX'</span>: <span class="string">'myapp'</span>,  <span class="comment"># 缓存键的字符串前缀</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.代码中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> caches</span><br><span class="line">cache = caches[<span class="string">'default'</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果希望使用默认的default，也可以</span></span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"></span><br><span class="line">cache.set(<span class="string">'user_list'</span>, user_list)</span><br><span class="line">user_list = cache.get(<span class="string">'user_list'</span>)</span><br><span class="line">user_list = cache.delete(<span class="string">'user_list'</span>)</span><br></pre></td></tr></table></figure>

<p>2).redis</p>
<p>参考资料：<a href="http://django-redis-chs.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">http://django-redis-chs.readthedocs.io/zh_CN/latest/</a></p>
<p>1.<code>brew install redis</code></p>
<p>启动：<code>redis-server /usr/local/etc/redis.conf</code></p>
<p>2.<code>pip install django-redis</code></p>
<p>3.settings</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缓存设置</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.memcached.MemcachedCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'127.0.0.1:11211'</span>,</span><br><span class="line">        <span class="string">'TIMEOUT'</span>: <span class="number">600</span>,  <span class="comment"># 单位秒，默认300s, 60s * 10 = 10min</span></span><br><span class="line">        <span class="string">'KEY_PREFIX'</span>: <span class="string">'myapp'</span>,  <span class="comment"># 缓存键的字符串前缀</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"redis"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379/1"</span>,</span><br><span class="line">        <span class="string">'TIMEOUT'</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">            <span class="string">"SOCKET_CONNECT_TIMEOUT"</span>: <span class="number">5</span>,  <span class="comment"># in seconds socket 建立连接超时设置</span></span><br><span class="line">            <span class="string">"SOCKET_TIMEOUT"</span>: <span class="number">5</span>,  <span class="comment"># in seconds 连接建立后的读写操作超时设置</span></span><br><span class="line">            <span class="string">"COMPRESSOR"</span>: <span class="string">"django_redis.compressors.zlib.ZlibCompressor"</span>,  <span class="comment"># 压缩支持</span></span><br><span class="line">            <span class="string">"IGNORE_EXCEPTIONS"</span>: <span class="literal">True</span>,  <span class="comment"># 如果redis服务关闭，不会引起异常，memcached默认支持</span></span><br><span class="line">            <span class="string">"CONNECTION_POOL_KWARGS"</span>: &#123;<span class="string">"max_connections"</span>: <span class="number">100</span>&#125;  <span class="comment"># 连接池</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># redis记录异常日志</span></span><br><span class="line">DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>4.代码中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> caches</span><br><span class="line">redis_cache = caches[<span class="string">'redis'</span>]</span><br><span class="line"></span><br><span class="line">redis_cache.set(<span class="string">'user_list'</span>, user_list)</span><br><span class="line">user_list = redis_cache.get(<span class="string">'user_list'</span>)</span><br><span class="line">user_list = redis_cache.delete(<span class="string">'user_list'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="11-注册模板自定义方法"><a href="#11-注册模板自定义方法" class="headerlink" title="11.注册模板自定义方法:"></a>11.注册模板自定义方法:</h2><p>1.创建myapp.libraries.utils.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">register = template.Library()</span><br><span class="line">color = ((<span class="number">1</span>, <span class="string">'red'</span>), (<span class="number">2</span>, <span class="string">'black'</span>), (<span class="number">3</span>, <span class="string">'blue'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># @register.filter使用方法，最多两个参数</span></span><br><span class="line"><span class="comment"># &#123;&#123; car.carColor|getcolorstr &#125;&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#123; car.carColor|getcolorstr:param2 &#125;&#125; 前面的表示第一个参数</span></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcolorstr</span><span class="params">(colorNum)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> color[colorNum - <span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># @register.simple_tag使用方法，不限制参数个数</span></span><br><span class="line"><span class="comment"># &#123;% getcolorstr2 car.carColor %&#125;</span></span><br><span class="line"><span class="comment"># &#123;% getcolorstr2 param1 param2 param3 %&#125;</span></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcolorstr2</span><span class="params">(colorNum)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> color[colorNum - <span class="number">1</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>2.settings:在模板配置中加入libraries配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)]</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">'libraries'</span>: &#123;  <span class="comment"># Adding this section should work around the issue.</span></span><br><span class="line">                <span class="string">'utils'</span>: <span class="string">'myapp.libraries.utils'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>3.模板页面中使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load utils %&#125;</span><br><span class="line">&#123;&#123; car.carColor|getcolorstr &#125;&#125;</span><br><span class="line">&#123;% getcolorstr2 car.carColor %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="12-模板"><a href="#12-模板" class="headerlink" title="12.模板"></a>12.模板</h2><p>1.转义:<br>由于模板系统没有“转义”的概念，为了显示模板标签中使用的一个位，必须使用{％ templatetag ％}标记。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">论据 输出</span><br><span class="line">openblock &#123;％</span><br><span class="line">closeblock ％&#125;</span><br><span class="line">openvariable &#123;&#123;</span><br><span class="line">closevariable &#125;&#125;</span><br><span class="line">openbrace &#123;</span><br><span class="line">closebrace &#125;</span><br><span class="line">opencomment &#123;＃</span><br><span class="line">closecomment ＃&#125;</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% templatetag openblock %&#125; url &#39;entry_list&#39; &#123;% templatetag closeblock %&#125;</span><br></pre></td></tr></table></figure>
<p>或者使用如下方式：被包含的内容不会被模板引擎转意，将直接输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% verbatim myblock %&#125;</span><br><span class="line">    Avoid template rendering via the &#123;% verbatim %&#125;&#123;% endverbatim %&#125; block.</span><br><span class="line">&#123;% endverbatim myblock %&#125;</span><br></pre></td></tr></table></figure>
<p>2.for:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量 描述</span><br><span class="line">forloop.counter 循环的当前迭代（1索引）</span><br><span class="line">forloop.counter0 循环的当前迭代（0索引）</span><br><span class="line">forloop.revcounter 循环结束的迭代次数（1索引）</span><br><span class="line">forloop.revcounter0 循环结束的迭代次数（0索引）</span><br><span class="line">forloop.first 如果这是第一次通过循环，则为真</span><br><span class="line">forloop.last 如果这是最后一次循环，则为真</span><br><span class="line">forloop.parentloop 对于嵌套循环，这是围绕当前循环的循环</span><br></pre></td></tr></table></figure>

<h2 id="13-自定义400、403、404、500页面"><a href="#13-自定义400、403、404、500页面" class="headerlink" title="13.自定义400、403、404、500页面"></a>13.自定义400、403、404、500页面</h2><p>1.settings.py中DEBUG = False，否则自定义页面不起作用</p>
<p>2.在任意模块下的views.py中增加如下方法，也可以在主模块中创建一个views.py<br>方法处理逻辑可以参考：~venv/lib/python3.6/site-packages/django/views/defaults.py中对各个方法的定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bad_request</span><span class="params">(request, exception, template_name=<span class="string">'400.html'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, template_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permission_denied</span><span class="params">(request, exception, template_name=<span class="string">'403.html'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, template_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(request, exception, template_name=<span class="string">'404.html'</span>)</span>:</span></span><br><span class="line">    context = &#123;<span class="string">'exception'</span>: exception&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, template_name, context=context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_error</span><span class="params">(request, template_name=<span class="string">'500.html'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, template_name)</span><br></pre></td></tr></table></figure>

<p>3.在项目根目录下的templates下创建对应的400.html、403.html、404.html、500.html，内容更加需要自定义，也可以参考~venv/lib/python3.6/site-packages/django/views/templates下的对应文件</p>
<p>4.在主模块下urls.py中增加如下配置:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">handler400 = <span class="string">'DjangoHelloWorld.views.bad_request'</span> <span class="comment">#模块名称.views.方法名称</span></span><br><span class="line">handler403 = <span class="string">'DjangoHelloWorld.views.permission_denied'</span></span><br><span class="line">handler404 = <span class="string">'DjangoHelloWorld.views.page_not_found'</span></span><br><span class="line">handler500 = <span class="string">'DjangoHelloWorld.views.server_error'</span></span><br></pre></td></tr></table></figure>

<h2 id="14-Django配置session超时"><a href="#14-Django配置session超时" class="headerlink" title="14.Django配置session超时"></a>14.Django配置session超时</h2><p>#配置失效时间为半个小时<br>SESSION_COOKIE_AGE = 60*30<br>#关闭浏览器清除cookie<br>SESSION_EXPIRE_AT_BROWSER_CLOSE = True</p>
<h2 id="15-json与xml"><a href="#15-json与xml" class="headerlink" title="15.json与xml"></a>15.json与xml</h2><p>1.json<br>创建一个JSONUtil工具类，用于返回json数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.core.serializers <span class="keyword">import</span> serialize, deserialize</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.db.models.query <span class="keyword">import</span> QuerySet</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_to_list</span><span class="params">(json)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> json[<span class="number">0</span>] == <span class="string">'['</span>:</span><br><span class="line">        deserializedObjectList = deserialize(<span class="string">'json'</span>, json)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        deserializedObjectList = deserialize(<span class="string">'json'</span>, <span class="string">'['</span> + json + <span class="string">']'</span>)</span><br><span class="line">    list = []</span><br><span class="line">    <span class="keyword">for</span> deserializedObject <span class="keyword">in</span> deserializedObjectList:</span><br><span class="line">        list.append(deserializedObject.object)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_json</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(obj, models.Model):</span><br><span class="line">        obj = [obj]  <span class="comment"># 因为serialize只支持可迭代对象，比如querySet对象</span></span><br><span class="line">    data = serialize(<span class="string">"json"</span>, obj)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该方法没有做严格的验证，只支持dict,models.Model,models.QuerySet，可以根据需要自行扩展</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_json</span><span class="params">(data, dict_key=<span class="string">'data'</span>, **response_kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(data, dict):</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(data)</span><br><span class="line">    data = to_json(data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'safe'</span> <span class="keyword">in</span> response_kwargs <span class="keyword">and</span> response_kwargs[<span class="string">'safe'</span>] <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = &#123;dict_key: data&#125;  <span class="comment"># 默认必须传递字典数据</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(data, str):  <span class="comment"># 由于非字典类型的数据会被当做字符串处理，即返回结果两边都有引号，所以此处将其转换为对象，否则ajax调用时不方便处理</span></span><br><span class="line">        data = json.loads(data)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(data, **response_kwargs)</span><br></pre></td></tr></table></figure>

<p>view.py中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_query_json</span><span class="params">(request)</span>:</span></span><br><span class="line">    user_list = User.objects.all()</span><br><span class="line">    <span class="keyword">return</span> JSONUtil.render_json(user_list, safe=<span class="literal">False</span>) <span class="comment"># safe=False可以传递对象，否则必须传递一个dict，ajax请求时这样要设置safe=False，这样页面可以直接获取到对象</span></span><br></pre></td></tr></table></figure>
<p>返回结果，可以看到两边没有引号：<br>[{“model”: “myapp.user”, “pk”: 4, “fields”: {“name”: “\u54c8\u54c8”, “birth_day”: “2018-04-09”, “phone”: “None”, “email”: “None”}}, {“model”: “myapp.user”, “pk”: 9, “fields”: {“name”: “\u5929\u738b\u5c71”, “birth_day”: “2018-09-10”, “phone”: “123”, “email”: “<a href="mailto:123@123.com">123@123.com</a>“}}]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_query_json_get</span><span class="params">(request, user_id)</span>:</span></span><br><span class="line">    user = User.objects.get(pk=user_id)</span><br><span class="line">    <span class="comment"># user = User.objects.filter(pk=user_id)</span></span><br><span class="line">    <span class="keyword">return</span> JSONUtil.render_json(user, dict_key=<span class="string">'user'</span>, safe=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>返回结果：[{“model”: “myapp.user”, “pk”: 1, “fields”: {“name”: “\u97e9\u7fa4\u5cf0”, “birth_day”: “2018-04-07”, “phone”: “None”, “email”: “<a href="mailto:qunfeng_han@126.com">qunfeng_han@126.com</a>“}}]</p>
<p>模板中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'polls/js/jquery-1.11.0.min.js' %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> #注意这里必须有闭合标签<span class="tag">&lt;/<span class="name">script</span>&gt;</span>，否则显示会有问题</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"userdiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"userlistdiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    $.getJSON(<span class="string">"&#123;% url 'myapp:user_query_json_get' 1 %&#125;"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.each(ret, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// key 为字典的 key，value 为对应的值</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#userdiv"</span>).append(value.pk+<span class="string">"#"</span>+value.fields.name+<span class="string">"#"</span>+value.fields.birth_day+<span class="string">"#"</span>+value.fields.phone+<span class="string">"#"</span>+value.fields.email+<span class="string">"&lt;br&gt;"</span>)</span></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    $.getJSON(<span class="string">"&#123;% url 'myapp:user_query_json' %&#125;"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.each(ret, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// key 为字典的 key，value 为对应的值</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#userlistdiv"</span>).append(value.pk+<span class="string">"#"</span>+value.fields.name+<span class="string">"#"</span>+value.fields.birth_day+<span class="string">"#"</span>+value.fields.phone+<span class="string">"#"</span>+value.fields.email+<span class="string">"&lt;br&gt;"</span>)</span></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.xml</p>
<p>XMLUtil.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.db.models.query <span class="keyword">import</span> QuerySet</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_xml</span><span class="params">(data)</span>:</span></span><br><span class="line">    data = to_xml(data)</span><br><span class="line">    response = HttpResponse(data)</span><br><span class="line">    response[<span class="string">'Content-Type'</span>] = <span class="string">'application/xml'</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_xml</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(data, models.Model):</span><br><span class="line">        data = [data]  <span class="comment"># 因为serialize只支持可迭代对象，比如querySet对象</span></span><br><span class="line">    <span class="keyword">elif</span> isinstance(data, QuerySet):</span><br><span class="line">        data = data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    data = serializers.serialize(<span class="string">"xml"</span>, data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xml_to_list</span><span class="params">(xml)</span>:</span></span><br><span class="line">    deserializedObjectList = serializers.deserialize(<span class="string">"xml"</span>, xml)</span><br><span class="line">    list = []</span><br><span class="line">    <span class="keyword">for</span> deserializedObject <span class="keyword">in</span> deserializedObjectList:</span><br><span class="line">        list.append(deserializedObject.object)</span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure>
<p>views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> XMLUtil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_query_xml</span><span class="params">(request)</span>:</span></span><br><span class="line">    user_list = User.objects.all()</span><br><span class="line">    <span class="keyword">return</span> XMLUtil.render_xml(user_list)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_query_xml_get</span><span class="params">(request, user_id)</span>:</span></span><br><span class="line">    user = User.objects.get(pk=user_id)</span><br><span class="line">    <span class="keyword">return</span> XMLUtil.render_xml(user)</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">django-objects</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">model</span>=<span class="string">"myapp.user"</span> <span class="attr">pk</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"CharField"</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"birth_day"</span> <span class="attr">type</span>=<span class="string">"DateField"</span>&gt;</span>2018-04-09<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"phone"</span> <span class="attr">type</span>=<span class="string">"CharField"</span>&gt;</span>13800138000<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"CharField"</span>&gt;</span>138@qq.com<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">model</span>=<span class="string">"myapp.user"</span> <span class="attr">pk</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"CharField"</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"birth_day"</span> <span class="attr">type</span>=<span class="string">"DateField"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">None</span>&gt;</span><span class="tag">&lt;/<span class="name">None</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"phone"</span> <span class="attr">type</span>=<span class="string">"CharField"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">None</span>&gt;</span><span class="tag">&lt;/<span class="name">None</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"CharField"</span>&gt;</span>zhansan@163.com<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">django-objects</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">"&#123;% url 'myapp:user_query_xml' %&#125;"</span>,</span><br><span class="line">    type:<span class="string">"GET"</span>,</span><br><span class="line">    dataType:<span class="string">'xml'</span>,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">xml</span>)</span>&#123;</span><br><span class="line">        $(xml).find(<span class="string">"object"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//获取id</span></span><br><span class="line">            <span class="keyword">var</span> id=$(<span class="keyword">this</span>).attr(<span class="string">"pk"</span>);</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">""</span>;</span><br><span class="line">            $(<span class="keyword">this</span>).find(<span class="string">"field"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">                content += $(<span class="keyword">this</span>).attr(<span class="string">'name'</span>) + <span class="string">"=="</span> + $(<span class="keyword">this</span>).text() + <span class="string">"#"</span></span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">"#userdivxml"</span>).append(id+ <span class="string">"#"</span> + content +<span class="string">"&lt;br&gt;"</span>)</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"加载失败"</span>); &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="16-response添加相应头"><a href="#16-response添加相应头" class="headerlink" title="16.response添加相应头"></a>16.response添加相应头</h2><p>一般我们返回视图时都是调用<br>from django.shortcuts import render的render(request, ‘myapp/user/index.html’, context)<br>实际上它返回的是一个HttpResponse对象，我们可以这样为其添加返回头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = render(request, <span class="string">'myapp/user/index.html'</span>, context)</span><br><span class="line">response[<span class="string">'Last-Modified'</span>] = date.strftime(<span class="string">'%a, %d %b %Y %H:%M:%S GMT'</span>)</span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>


<h2 id="17-多语言"><a href="#17-多语言" class="headerlink" title="17.多语言"></a>17.多语言</h2><p>参考：<a href="https://code.ziqiangxuetang.com/django/django-internationalization.html" target="_blank" rel="noopener">https://code.ziqiangxuetang.com/django/django-internationalization.html</a></p>
<p>1.<code>brew install gettext</code></p>
<p>2.pip的bug，需要手工处理<br>/venv/lib/python3.6/site-packages/pip-9.0.1-py3.6.egg/pip/<em>vendor/webencodings/<br>修改3个文件：<br><em>_init</em></em>.py，<br>tests.py，<br>x_user_defined.py，<br>将：utf8 修改为 utf-8.<br>3.settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span>  <span class="comment"># 英文是en，这里是中文，注意这里必须配置为zh-hans，而下面创建和编译语言文件是要使用zh_hans</span></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line">LOCALE_PATHS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'myapp/locale'</span>), <span class="comment"># 应用下的路径</span></span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'locale'</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>注意：这里『locale』文件夹需要手工创建，默认就是项目根路径下的locale目录。<br>这里需要注意一点，如果应用下面创建了locale并且配置到LOCALE_PATHS中，则后面执行创建命令时，无论是在项目根路径下执行还是在应用下执行，都只会将语言文件创建到应用下的locale中。如果应用下没用locale目录则需要在项目根路径下执行命令，并且创建到项目根路径下的locale目录中。</p>
<p>4.在代码中加入一些多语言对应的内容<br>代码中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext <span class="keyword">as</span> _</span><br><span class="line"> output = _(<span class="string">'Today is %(month)s %(day)s.'</span>) % &#123;<span class="string">'month'</span>: m, <span class="string">'day'</span>: d&#125;</span><br></pre></td></tr></table></figure>
<p>模板页面中可以直接使用下划线的别名形式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; _('Django site admin') &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123; _('my test local') &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">这里注意，如果要使用『trans』标签，必须在页面中加载 i18n</span><br><span class="line">&#123;% load i18n %&#125;</span><br><span class="line">&#123;% trans "my test local" %&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;#将翻译结果保存到变量中#&#125;</span><br><span class="line">&#123;% trans "my test local" as mylocal %&#125;</span><br><span class="line">&#123;&#123; mylocal &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;#设置局部显示的语言，下面的内容将显示对应的英文内容，但只在区块内有效#&#125;</span><br><span class="line">&#123;% language 'en' %&#125;</span><br><span class="line">    &#123;% get_current_language as LANGUAGE_CODE %&#125;</span><br><span class="line">    Current language: &#123;&#123; LANGUAGE_CODE &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span>  #区块内显示en</span><br><span class="line">    &#123;&#123; _('Django site admin') &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;% endlanguage %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% get_current_language as LANGUAGE_CODE %&#125;</span><br><span class="line">    Current language: &#123;&#123; LANGUAGE_CODE &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span>  #区块外显示zh-hans</span><br></pre></td></tr></table></figure>
<p>如果没有找到对应的key值，则会直接显示待翻译的key值字符串；<br>如果对应的语言包下没有找到key值，而默认语言包下有对应的key值，则会显示默认的语言，如LANGUAGE_CODE = ‘zh-hans’</p>
<p>PS:如果需要翻译的内容包含变量，比如_(‘Today is %(month)s %(day)s.’) ，最好在后台处理好后做为变量传递到模板页面上，目前暂不知道如何在模板中直接处理。</p>
<p>5.创建或更新语言文件</p>
<p><code>django-admin makemessages -l en</code> # 英文</p>
<p><code>django-admin makemessages -l zh_hans</code> #指定中文语言，注意这里不要写成zh-hans</p>
<p>会在locale目录下生成对应的语言包django.po</p>
<p><code>django-admin makemessages -a</code> #全部语言</p>
<p>说明：如果在项目根路径下执行，会将项目中所有应用都扫描一遍并汇总合并到一起，如果在某个应用下执行命令，则只会扫描当前应用，并在其下的locale目录下创建文件，优先级根据settings中配置的LOCALE_PATHS的顺序而定。</p>
<p>6.编译</p>
<p><code>django-admin compilemessages --locale zh_hans</code> #指定语言</p>
<p><code>django-admin compilemessages</code> # 全部语言</p>
<ul>
<li>django.po—-&gt;diango.mo</li>
</ul>
<p>7.语言切换</p>
<p>1）在settings中的中间件配置中加入如下配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.locale.LocaleMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>2）url中加入配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">'i18n/'</span>, include(<span class="string">'django.conf.urls.i18n'</span>)), <span class="comment">#对应下面的&#123;% url 'set_language' %&#125;</span></span><br></pre></td></tr></table></figure>
<p>变更后的语言会保存在session中，可以通过<code>request.session[&#39;_language&#39;]</code>获得</p>
<p>3）在模板页面中需要切换语言的地方加入如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'set_language' %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>&#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"next"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; redirect_to &#125;&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"language"</span>&gt;</span></span><br><span class="line">        &#123;% get_current_language as LANGUAGE_CODE %&#125;</span><br><span class="line">        &#123;% get_available_languages as LANGUAGES %&#125;</span><br><span class="line">        &#123;% get_language_info_list for LANGUAGES as languages %&#125;</span><br><span class="line">        &#123;% for language in languages %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; language.code &#125;&#125;"</span>&#123;% <span class="attr">if</span> <span class="attr">language.code</span> == <span class="string">LANGUAGE_CODE</span> %&#125; <span class="attr">selected</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span></span><br><span class="line">                &#123;&#123; language.name_local &#125;&#125; (&#123;&#123; language.code &#125;&#125;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Go"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：<br>redirect_to：如果不设置就会返回当前页面，设置的话就会跳转到设置的页面<br>这里get_available_languages会显示所有支持的语言，不过一般项目不会支持这么多的语言，所以可以在settings中增加配置来明确语言范围：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LANGUAGES = (</span><br><span class="line">    (<span class="string">'en'</span>, (<span class="string">'English'</span>)),</span><br><span class="line">    (<span class="string">'zh-hans'</span>, (<span class="string">'中文简体'</span>)),</span><br><span class="line">    (<span class="string">'zh-hant'</span>, (<span class="string">'中文繁體'</span>)),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>4）js中使用多语言<br>js需要单独处理，比如我们写了一个js文件，路径为project/myapp/static/myapp/js/test.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a = gettext(<span class="string">'wwww hhhh'</span>)</span><br><span class="line">alert(a)</span><br></pre></td></tr></table></figure>
<p>模板中引入：<br>#下面这个是动态js，必须引入，否则gettext方法不起作用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;% url 'javascript-catalog' %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'myapp/js/test.js' %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>urls加入对javascript-catalog的支持：<br>`path(‘jsi18n/‘, JavaScriptCatalog.as_view(), name=’javascript-catalog’),``</p>
<p>执行如下命令：</p>
<p><code>django-admin makemessages -d djangojs  -l zh_hans</code><br>此时会在应用下的locale中生成djangojs.po文件（如果配置了应用locale，否则会在项目下的locale中创建）</p>
<p><code>django-admin compilemessages --locale zh_hans</code><br>此时会将djangojs.po编译为djangojs.mo</p>
<p>如果直接将带翻译的js代码写在模板页面中，暂时不清楚要通过什么命令实现，不过可以有个折中的办法，就是创建一个js文件，然后将所有需要翻译的内容都加上，然后运行上面两个命令，这样django在运行模板中的js时同样可以完成翻译<br>模板中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    alert(gettext(<span class="string">'hello js'</span>))</span><br><span class="line">    alert(gettext(<span class="string">'o my god'</span>))</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>js中：只要js代码中出现翻译方法的地方都会被加入翻译，这个js不需要被任何模板引入，也不需要被同步到静态文件夹中，仅仅是为生成翻译文件而存在</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gettext(<span class="string">'hello js'</span>)</span><br><span class="line">gettext(<span class="string">'o my god'</span>)</span><br></pre></td></tr></table></figure>


<h2 id="18-日志"><a href="#18-日志" class="headerlink" title="18.日志"></a>18.日志</h2><p>1.settings</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="literal">False</span>,  <span class="comment"># 是否禁用logger，建议设置为False</span></span><br><span class="line">    <span class="string">'formatters'</span>: &#123;  <span class="comment"># 日志格式，提供给handler使用，非必须，如果不设置格式，默认只会打印消息体</span></span><br><span class="line">        <span class="string">'verbose'</span>: &#123;  <span class="comment"># 格式名称</span></span><br><span class="line">            <span class="comment"># INFO 2018-04-25 15:43:27,586 views 8756 123145350217728 这是一个日志</span></span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="comment"># INFO  这是一个日志</span></span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(message)s'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'standard'</span>: &#123;</span><br><span class="line">            <span class="comment"># 2018-04-25 16:40:00,195 [Thread-7:123145575223296] [myapp.log:282] [views:user_query_json_get] [INFO]- 这是一个日志</span></span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'filters'</span>: &#123;  <span class="comment"># 过滤器，提供给handler使用，非必须</span></span><br><span class="line">        <span class="string">'require_debug_true'</span>: &#123;  <span class="comment"># 要求DEBUG=True时才打印日志</span></span><br><span class="line">            <span class="string">'()'</span>: <span class="string">'django.utils.log.RequireDebugTrue'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;  <span class="comment"># 处理器，设置日志记录方式，必须</span></span><br><span class="line">        <span class="string">'console'</span>: &#123;  <span class="comment"># 处理器名称</span></span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,  <span class="comment"># 设置级别</span></span><br><span class="line">            <span class="string">'filters'</span>: [<span class="string">'require_debug_true'</span>],  <span class="comment"># 设置过滤器，多个用逗号分割</span></span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,  <span class="comment"># 处理器，这里是控制台打印</span></span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'verbose'</span>  <span class="comment"># 设置日志格式</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'file'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.FileHandler'</span>,  <span class="comment"># 记录到文件</span></span><br><span class="line">            <span class="string">'filename'</span>: <span class="string">'/Users/hanqunfeng/python_workspace/log/file.log'</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'verbose'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'rotatingFile'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,  <span class="comment"># 按文件大小切割日志</span></span><br><span class="line">            <span class="comment"># 'filename': 'log/all.log',  # 日志输出文件 默认在当前项目根路径下</span></span><br><span class="line">            <span class="string">'filename'</span>: <span class="string">'/Users/hanqunfeng/python_workspace/log/rotatingFile.log'</span>,  <span class="comment"># 日志输出文件</span></span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>,  <span class="comment"># 每个文件大小</span></span><br><span class="line">            <span class="string">'backupCount'</span>: <span class="number">5</span>,  <span class="comment"># 保留日志份数，只保留最后5份，如果都保留，设置为0，默认就是0</span></span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'standard'</span>,  <span class="comment"># 使用哪种formatters日志格式</span></span><br><span class="line">        &#125;,</span><br><span class="line">		<span class="string">'timedRotatingFile'</span>: &#123;</span><br><span class="line">		    <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">		    <span class="string">'class'</span>: <span class="string">'logging.handlers.TimedRotatingFileHandler'</span>,  <span class="comment"># 按时间切割日志</span></span><br><span class="line">		    <span class="string">'filename'</span>: <span class="string">'/Users/hanqunfeng/python_workspace/log/timedRotatingFile.log'</span>,  <span class="comment"># 日志输出文件</span></span><br><span class="line">		    <span class="string">'when'</span>: <span class="string">'D'</span>,  <span class="comment"># 按天分割</span></span><br><span class="line">		    <span class="string">'backupCount'</span>: <span class="number">5</span>,  <span class="comment"># 保留日志份数，只保留最后5份，如果都保留，设置为0，默认就是0</span></span><br><span class="line">		    <span class="string">'formatter'</span>: <span class="string">'standard'</span>,  <span class="comment"># 使用哪种formatters日志格式</span></span><br><span class="line">		&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>: &#123;<span class="comment">#日志记录器</span></span><br><span class="line">        <span class="string">'django'</span>: &#123;<span class="comment">#日志名称路径前缀，即logging.getLogger(__name__)获取logger对象时，_name__得到的前缀与之匹配即可，比如__name__得到的是django.server</span></span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>],</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'level'</span>: os.getenv(<span class="string">'DJANGO_LOG_LEVEL'</span>, <span class="string">'DEBUG'</span>),  <span class="comment"># 只有设置DEBUG = True时，该配置才会打印sql信息</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'django.request'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'rotatingFile'</span>],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'ERROR'</span>,</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">False</span>,  <span class="comment"># 设置为False，表示不像其父级别传递日志内容</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'myapp.log'</span>: &#123; <span class="comment"># 也可以这样创建logger对象，logging.getLogger('myapp.log')</span></span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'file'</span>, <span class="string">'timedRotatingFile'</span>],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,  <span class="comment"># 这里的日志级别不能低于处理器中设置的日志级别</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中使用方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入logging库</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># 获取logger的一个实例</span></span><br><span class="line"><span class="comment"># logger = logging.getLogger(__name__)</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'myapp.log'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法中：</span></span><br><span class="line">logger.info(<span class="string">'这是一个日志'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="19-发送邮件"><a href="#19-发送邮件" class="headerlink" title="19.发送邮件"></a>19.发送邮件</h2><p>1.settings</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">EMAIL_BACKEND = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line">EMAIL_USE_SSL = <span class="literal">True</span></span><br><span class="line">EMAIL_HOST = <span class="string">'smtp.163.com'</span></span><br><span class="line">EMAIL_PORT = <span class="number">465</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">'xxx@163.com'</span>  <span class="comment"># 帐号</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">'xxxxxxx'</span>  <span class="comment"># 密码</span></span><br><span class="line">DEFAULT_FROM_EMAIL = <span class="string">'hanqf &lt;xxx@163.com&gt;'</span></span><br></pre></td></tr></table></figure>
<p>2.代码里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="comment"># 发送邮件</span></span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line">send_mail(<span class="string">'Subject here主题'</span>, <span class="string">'Here is the message.消息'</span>, settings.DEFAULT_FROM_EMAIL,</span><br><span class="line">          [<span class="string">'aaaaa@126.com'</span>], fail_silently=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次可以发送多组邮件</span></span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mass_mail</span><br><span class="line"></span><br><span class="line">message1 = (<span class="string">'Subject here'</span>, <span class="string">'Here is the message'</span>, settings.DEFAULT_FROM_EMAIL,</span><br><span class="line">            [<span class="string">'aaaaa@126.com'</span>, <span class="string">'aaaaa@163.com'</span>])</span><br><span class="line">message2 = (<span class="string">'Another Subject'</span>, <span class="string">'Here is another message'</span>, settings.DEFAULT_FROM_EMAIL, [<span class="string">'aaaaa@126.com'</span>])</span><br><span class="line">send_mass_mail((message1, message2), fail_silently=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以这是抄送附件等</span></span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> EmailMultiAlternatives</span><br><span class="line">msg = EmailMultiAlternatives(<span class="string">'主题'</span>, <span class="string">'内容'</span>, settings.DEFAULT_FROM_EMAIL, [<span class="string">'aaaaa@126.com'</span>],</span><br><span class="line">                             cc=[<span class="string">'aaaaa@163.com'</span>])</span><br><span class="line"><span class="comment"># msg.content_subtype = "html" # 设置邮件格式，html可以发送内容为html，不推荐这么使用，可以使用下面的方式</span></span><br><span class="line">html_content = <span class="string">'&lt;p&gt;这是一封&lt;strong&gt;重要的&lt;/strong&gt;邮件.&lt;/p&gt;'</span></span><br><span class="line">msg.attach_alternative(html_content, <span class="string">"text/html"</span>)  <span class="comment"># 如果接收方的邮件支持html，则显示该信息，否则显示原「内容」</span></span><br><span class="line"><span class="comment"># 添加附件（可选）</span></span><br><span class="line">msg.attach_file(<span class="string">'/Users/hanqunfeng/python_workspace/STATIC_ROOT/polls/images/background.jpg'</span>)</span><br><span class="line"><span class="comment"># 发送</span></span><br><span class="line">msg.send()</span><br></pre></td></tr></table></figure>

<h2 id="20-main方法测试"><a href="#20-main方法测试" class="headerlink" title="20.main方法测试"></a>20.main方法测试</h2><p>mian方法测试一定要在如下情况下使用，这样可以保证当前模块被别处引用时不会触发如下测试代码，只有独立运行该模块时才会执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 加载环境配置</span></span><br><span class="line">    <span class="keyword">import</span> django, os</span><br><span class="line">    os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"DjangoHelloWorld.settings"</span>)</span><br><span class="line">    django.setup()</span><br><span class="line">    <span class="comment"># 以下是测试内容</span></span><br><span class="line">    <span class="keyword">from</span> myapp.models.user <span class="keyword">import</span> User</span><br><span class="line">    user_list = User.objects.all()</span><br><span class="line">    xml = to_xml(user_list)</span><br><span class="line">    print(xml)</span><br></pre></td></tr></table></figure>

<h2 id="21-Signal，信号，有点类似MQ"><a href="#21-Signal，信号，有点类似MQ" class="headerlink" title="21.Signal，信号，有点类似MQ"></a>21.Signal，信号，有点类似MQ</h2><p>1.定义信号和接收器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> Signal, receiver</span><br><span class="line"><span class="comment"># my_singal = Signal()</span></span><br><span class="line">my_singal = Signal(providing_args=[<span class="string">"key1"</span>, <span class="string">"key2"</span>]) <span class="comment"># 定义信号接收的参数，不指定参数也可以</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@receiver(my_singal)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_callback</span><span class="params">(sender, **kwargs)</span>:</span> <span class="comment"># 接收器回调函数</span></span><br><span class="line">    print(sender)</span><br><span class="line">    print(kwargs)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> kwargs:</span><br><span class="line">        print(key)</span><br><span class="line">        print(kwargs[key])</span><br><span class="line">    print(<span class="string">"Request finished!"</span>)</span><br></pre></td></tr></table></figure>
<p>2.发送信号，发送信号时接收器就会被执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> signals.signals <span class="keyword">import</span> my_singal</span><br><span class="line">my_singal.send(sender=__name__, key1=<span class="string">'qqq'</span>, key2=<span class="number">10</span>, key3=<span class="number">100</span>) <span class="comment"># 实际上可以多发送一些参数</span></span><br></pre></td></tr></table></figure>


<h2 id="22-Django管理后台简介"><a href="#22-Django管理后台简介" class="headerlink" title="22.Django管理后台简介"></a>22.Django管理后台简介</h2><p>首先，我们需要创建一个能够登录管理后台站点的用户。<br>运行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>

<p>键入你想要使用的用户名，然后按下回车键：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Username: admin</span><br></pre></td></tr></table></figure>

<p>然后提示你输入想要使用的邮件地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Email address: admin@example.com</span><br></pre></td></tr></table></figure>

<p>你需要输入两次密码，第二次输入是确认密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Password: **********</span><br><span class="line">Password (again): *********</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure>

<p>PS：管理员密码忘记了可以通过如下方法修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py shell</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from django.contrib.auth.models import User</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; user = User.objects.get(pk=1) <span class="comment"># 可以通过查询获得用户对象</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; user.set_password(<span class="string">'xxxxxxxx'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; user.save()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; quit()</span></span><br></pre></td></tr></table></figure>




<h2 id="23-部署正式环境"><a href="#23-部署正式环境" class="headerlink" title="23.部署正式环境"></a>23.部署正式环境</h2><p>settings.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span> <span class="comment"># 此时很多问题就会出现，需要增加很多额外的配置才能正常工作，这也是为了包含生产环境吧</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'127.0.0.1'</span>]</span><br><span class="line"><span class="comment"># ALLOWED_HOSTS = ['*', ]  # 允许所有机器访问</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'http://localhost/static/'</span>      <span class="comment"># apache部署的静态文件服务器访问地址</span></span><br><span class="line"></span><br><span class="line">STATIC_ROOT = <span class="string">"/Users/hanqunfeng/python_workspace/STATIC_ROOT/"</span>  <span class="comment">#apache 服务目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件路径</span></span><br><span class="line">MEDIA_URL = <span class="string">'http://localhost/media/'</span></span><br><span class="line">MEDIA_ROOT = <span class="string">'/Users/hanqunfeng/python_workspace/MEDIA/'</span></span><br></pre></td></tr></table></figure>

<p>apache配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Alias /media/ /Users/hanqunfeng/python_workspace/MEDIA/</span><br><span class="line">Alias /static/ /Users/hanqunfeng/python_workspace/STATIC_ROOT/</span><br><span class="line"></span><br><span class="line">&lt;Directory /Users/hanqunfeng/python_workspace/STATIC_ROOT&gt;</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory /Users/hanqunfeng/python_workspace/MEDIA/&gt;</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<p>使用如下命令可以将本地的静态资源部署到apache服务目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure>

<p>模板页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'polls/style.css' %&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>上传文件：<br>model中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">photo = models.ImageField(upload_to=<span class="string">"photo"</span>, default=<span class="string">"default/django.jpeg"</span>)  <span class="comment"># 路径相对于MEDIA_ROOT的配置</span></span><br></pre></td></tr></table></figure>
<p>之后要注意更新数据库。</p>
<p>需要安装Pillow，否则会报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERRORS:</span><br><span class="line">polls.Question.photo: (fields.E210) Cannot use ImageField because Pillow is not installed.</span><br><span class="line">	HINT: Get Pillow at https:&#x2F;&#x2F;pypi.python.org&#x2F;pypi&#x2F;Pillow or run command &quot;pip install Pillow&quot;.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure>

<p>如果要在页面中使用settings中的变量，需要在当前应用中创建一个context_processors.py 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings  <span class="comment"># import the settings file</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">settings_constant</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># return the value you want as a dictionnary. you may add multiple values in there.</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'MEDIA_URL'</span>: settings.MEDIA_URL, <span class="string">'DEBUG'</span>: settings.DEBUG&#125;</span><br></pre></td></tr></table></figure>
<p>并在settings文件配置如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)]</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">                <span class="string">'polls.context_processors.settings_constant'</span>, <span class="comment">#应用名称.文件名称.方法名称</span></span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>模板页面中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;MEDIA_URL&#125;&#125;abc/a.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"photo"</span> <span class="attr">id</span>=<span class="string">"id_photo"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">也可以使用下面的形式获得上传文件的url，</span><br><span class="line">即使用上传文件字段的url属性：&#123;&#123; question.photo.url &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;MEDIA_URL&#125;&#125;&#123;&#123; question.photo &#125;&#125;"</span>&gt;</span>&#123;&#123; question.photo &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> ##</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; question.photo.url &#125;&#125;"</span>&gt;</span>&#123;&#123; question.photo &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>views处理代码中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_img = request.FILES[<span class="string">'photo'</span>]</span><br><span class="line">question.photo = input_img</span><br><span class="line">question.save()</span><br></pre></td></tr></table></figure>


<p>部署到apache：</p>
<p>下载mod_wsgi：<a href="https://github.com/GrahamDumpleton/mod_wsgi/releases" target="_blank" rel="noopener">https://github.com/GrahamDumpleton/mod_wsgi/releases</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar xvfz mod_wsgi-X.Y.tar.gz</span><br><span class="line">.&#x2F;configure --with-apxs&#x3D;&#x2F;Applications&#x2F;XAMPP&#x2F;bin&#x2F;apxs --with-python&#x3D;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;bin&#x2F;python3</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>然后在apache配置文件中加入如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LoadModule wsgi_module modules&#x2F;mod_wsgi.so</span><br></pre></td></tr></table></figure>
<p>普通模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WSGIPythonHome &#x2F;Users&#x2F;hanqunfeng&#x2F;python_workspace&#x2F;DjangoHelloWorld&#x2F;venv</span><br><span class="line">WSGIPythonPath &#x2F;Users&#x2F;hanqunfeng&#x2F;python_workspace&#x2F;DjangoHelloWorld</span><br></pre></td></tr></table></figure>
<p>或者采用守护进程模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WSGIDaemonProcess example.com python-home&#x3D;&#x2F;Users&#x2F;hanqunfeng&#x2F;python_workspace&#x2F;DjangoHelloWorld&#x2F;venv python-path&#x3D;&#x2F;Users&#x2F;hanqunfeng&#x2F;python_workspace&#x2F;DjangoHelloWorld</span><br><span class="line"></span><br><span class="line">WSGIProcessGroup example.com</span><br></pre></td></tr></table></figure>
<p>配置项目访问路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WSGIScriptAlias &#x2F;mysite &#x2F;Users&#x2F;hanqunfeng&#x2F;python_workspace&#x2F;DjangoHelloWorld&#x2F;DjangoHelloWorld&#x2F;wsgi.py</span><br><span class="line"></span><br><span class="line">&lt;Directory &#x2F;Users&#x2F;hanqunfeng&#x2F;python_workspace&#x2F;DjangoHelloWorld&#x2F;DjangoHelloWorld&gt;</span><br><span class="line">&lt;Files wsgi.py&gt;</span><br><span class="line">Require all granted</span><br><span class="line">&lt;&#x2F;Files&gt;</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br></pre></td></tr></table></figure>
<p>访问地址：<a href="http://127.0.0.1/mysite/polls" target="_blank" rel="noopener">http://127.0.0.1/mysite/polls</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Protocol Buffer学习笔记(Python)</title>
    <url>/2018/03/27/protocol-buffer-study-python/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>本文内容基于python3.6.4，protobuf3.5.1，但实际上python2和protobuf2.x.x同样适用</li>
<li><a href="https://www.jianshu.com/p/55f4b4b22dd2" target="_blank" rel="noopener">Protocol Buffer学习笔记(Java&amp;NodeJS)</a></li>
<li><a href="https://www.jianshu.com/p/7b12fa3ca8e3" target="_blank" rel="noopener">Protocol Buffer学习笔记(PHP)</a></li>
</ul>
<a id="more"></a>
<h2 id="项目中引入proto的依赖"><a href="#项目中引入proto的依赖" class="headerlink" title="项目中引入proto的依赖"></a>项目中引入proto的依赖</h2><p>【两种方法】：<br>方法1、 <a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">官网下载对应的语言包</a>，这里下载<a href="https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-python-3.5.1.tar.gz" target="_blank" rel="noopener">protobuf-python-3.5.1.tar.gz</a>，解压后进入<code>python-protobuf-3.5.1/python</code>目录，执行<code>python3 setup.py install</code><br>方法2 、【推荐】命令行执行<code>pip3 install protobuf</code>，此时会下载最新的protobuf版本，如果下载的版本与本地安装的proto命令版本不一致，有可能导致异常，所以此时最好指定要下载的版本号：<code>pip3 install protobuf==3.5.1</code></p>
<p>【注意】</p>
<ul>
<li>上面的安装方式是全局安装，安装成功后对应的依赖包都会被安装到对应的site-packages目录下，比如<code>/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages</code>使用IDE开发时，如PyCharm，绑定interpreter时要注意勾选<code>inherit global site-packages</code>，这样项目才能使用全局依赖中的所有包</li>
<li>如果只是为当前项目安装依赖包可以不勾选<code>inherit global site-packages</code>，然后进入当前项目依赖的pip目录，即<code>Location</code>指定的路径下，执行<code>./bin/pip install protobuf==3.5.1</code>来安装需要的依赖包</li>
</ul>
<h2 id="准备proto文件"><a href="#准备proto文件" class="headerlink" title="准备proto文件"></a>准备proto文件</h2><ul>
<li>proto示例文件参考[Protocol Buffer学习笔记(Java&amp;NodeJS)]<br>(<a href="https://www.jianshu.com/p/55f4b4b22dd2" target="_blank" rel="noopener">https://www.jianshu.com/p/55f4b4b22dd2</a>)</li>
<li>python同时支持proto2和proto3，所以如果基于proto3，这里注意去掉其中的<code>required</code>、<code>optional</code>，因为这里要求语法严格遵循proto3，不能在属性前出现<code>required</code>、<code>optional</code>，同时文件顶端要明确<code>syntax = &quot;proto3&quot;;</code></li>
</ul>
<h2 id="生成proto对应的python文件"><a href="#生成proto对应的python文件" class="headerlink" title="生成proto对应的python文件"></a>生成proto对应的python文件</h2><ul>
<li>命令行执行<br><code>protoc   --python_out=. OTIpcDef.proto</code></li>
<li>此时会在当前目录下生成<code>OTIpcDef_pb2.py</code>，将该文件拷贝到项目中，比如放到项目根目录的proto目录下</li>
</ul>
<h2 id="python中使用protobuf"><a href="#python中使用protobuf" class="headerlink" title="python中使用protobuf"></a>python中使用protobuf</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> proto <span class="keyword">import</span> OTIpcDef_pb2</span><br><span class="line"></span><br><span class="line">otIpcList = OTIpcDef_pb2.OTIpcList()</span><br><span class="line"></span><br><span class="line"><span class="comment"># list类型数据创建方式</span></span><br><span class="line">otIpc = otIpcList.otpic.add()</span><br><span class="line">otIpc.CompanyId = <span class="string">"companyId"</span></span><br><span class="line">otIpc.Source = <span class="string">"Source"</span></span><br><span class="line">otIpc.IPCType = OTIpcDef_pb2.baseInfoCompany</span><br><span class="line"><span class="comment"># list类型数据创建方式</span></span><br><span class="line">baseInfoCompany = otIpc.baseInfoCompany.add()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(type(baseInfoCompany))</span></span><br><span class="line"></span><br><span class="line">baseInfoCompany.Address = <span class="number">110011</span></span><br><span class="line">baseInfoCompany.CompanyId = <span class="string">"companyId"</span></span><br><span class="line">baseInfoCompany.CompanyName = <span class="string">"companyName中文"</span></span><br><span class="line">baseInfoCompany.Identifier = <span class="string">"identifier"</span></span><br><span class="line">baseInfoCompany.BusinessScope = <span class="string">"BusinessScope"</span></span><br><span class="line">baseInfoCompany.ContactAddress = <span class="string">"ContactAddress"</span></span><br><span class="line">baseInfoCompany.EconomicType = <span class="string">"EconomicType"</span></span><br><span class="line">baseInfoCompany.RegCapital = <span class="string">"RegCapital"</span></span><br><span class="line">baseInfoCompany.LegalName = <span class="string">"LegalName"</span></span><br><span class="line">baseInfoCompany.LegalID = <span class="string">"LegalID"</span></span><br><span class="line">baseInfoCompany.LegalPhone = <span class="string">"LegalPhone"</span></span><br><span class="line">baseInfoCompany.State = <span class="number">0</span></span><br><span class="line">baseInfoCompany.Flag = <span class="number">1</span></span><br><span class="line">baseInfoCompany.UpdateTime = <span class="number">20180226121212</span></span><br><span class="line"></span><br><span class="line">otIpc2 = otIpcList.otpic.add()</span><br><span class="line">otIpc2.CompanyId = <span class="string">"companyId"</span></span><br><span class="line">otIpc2.Source = <span class="string">"Source"</span></span><br><span class="line">otIpc2.IPCType = OTIpcDef_pb2.baseInfoCompanyStat</span><br><span class="line">baseInfoCompanyStat = otIpc2.baseInfoCompanyStat.add()</span><br><span class="line">baseInfoCompanyStat.CompanyId = <span class="string">"companyId"</span></span><br><span class="line">baseInfoCompanyStat.DriverNum = <span class="number">10</span></span><br><span class="line">baseInfoCompanyStat.Flag = <span class="number">0</span></span><br><span class="line">baseInfoCompanyStat.UpdateTime = <span class="number">20180226121212</span></span><br><span class="line">baseInfoCompanyStat.VehicleNum = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"============================================"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(otIpc)</span></span><br><span class="line">print(otIpcList)</span><br><span class="line">print(<span class="string">"============================================"</span>)</span><br><span class="line"><span class="comment"># 序列化</span></span><br><span class="line">b = otIpcList.SerializeToString()</span><br><span class="line"><span class="comment"># 打印二进制数据</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"============================================"</span>)</span><br><span class="line"></span><br><span class="line">otIpcList2 = OTIpcDef_pb2.OTIpcList()</span><br><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line">otIpcList2.ParseFromString(b)</span><br><span class="line"></span><br><span class="line">print(otIpcList2)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>protocbuf</tag>
      </tags>
  </entry>
  <entry>
    <title>Protocol Buffer学习笔记(PHP)</title>
    <url>/2018/03/19/protocol-buffer-study-php/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>本文内容基于laravel5.4.*框架</li>
<li><a href="http://blog.hanqunfeng.com/2018/02/26/protocol-buffer-study/">Protocol Buffer学习笔记(Java&amp;NodeJS)</a></li>
</ul>
<a id="more"></a>

<h2 id="项目中引入proto的依赖"><a href="#项目中引入proto的依赖" class="headerlink" title="项目中引入proto的依赖"></a>项目中引入proto的依赖</h2><p>在项目根目录下执行如下命令，composer会自动下载最新版本，目前是”google/protobuf”: “^3.5”<br><code>composer require &quot;google/protobuf&quot;</code></p>
<h2 id="准备proto文件"><a href="#准备proto文件" class="headerlink" title="准备proto文件"></a>准备proto文件</h2><ul>
<li>注意事项参考：<a href="https://developers.google.com/protocol-buffers/docs/reference/php-generated" target="_blank" rel="noopener">PHP Generated Code</a></li>
<li>proto示例文件参考<a href="http://blog.hanqunfeng.com/2018/02/26/protocol-buffer-study/">Protocol Buffer学习笔记(Java&amp;NodeJS)</a>，这里注意去掉其中的<code>required</code>、<code>optional</code>，因为这里要求语法严格遵循proto3，不能在属性前出现<code>required</code>、<code>optional</code>，所以文件顶端要明确<code>syntax = &quot;proto3&quot;;</code>，另外增加package配置为<code>package app.proto;</code></li>
</ul>
<h2 id="生成proto对应的php文件"><a href="#生成proto对应的php文件" class="headerlink" title="生成proto对应的php文件"></a>生成proto对应的php文件</h2><ul>
<li><p>将准备好的proto文件放到laravel根目录下，并在根目录下执行如下命令<br><code>protoc   --php_out=. OTIpcDef.proto</code></p>
</li>
<li><p>此时会在app目录下自动创建Proto目录，并在其目录下生成对应的php类文件</p>
</li>
<li><p>同时在根目录下会生成GPBMetadata\OTIpcDef.php</p>
</li>
<li><p>由于laravel要求所有的class都必须在app目录下，所以需要移动GPBMetadata目录到app目录下，同时修改对应的namespace 为<code>namespace App\GPBMetadata;</code>;</p>
</li>
<li><p>同时需要修改app\Proto下的各个class的构造方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    \App\GPBMetadata\OTIpcDef::initOnce();</span><br><span class="line">    <span class="keyword">parent</span>::__construct();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="php中使用protobuf"><a href="#php中使用protobuf" class="headerlink" title="php中使用protobuf"></a>php中使用protobuf</h2><p>创建ProtoController</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Proto</span>\<span class="title">BaseInfoCompany</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Helper</span>\<span class="title">HttpUtils</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProtoController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ProtoController constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-主动获取protobuf数据"><a href="#1-主动获取protobuf数据" class="headerlink" title="1.主动获取protobuf数据"></a>1.主动获取protobuf数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build_proto_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $baseInfoCompany  = <span class="keyword">new</span> BaseInfoCompany();</span><br><span class="line">        $baseInfoCompany-&gt;setAddress(<span class="number">110011</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setCompanyId(<span class="string">"companyId"</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setCompanyName(<span class="string">"companyName中文"</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setIdentifier(<span class="string">"identifier"</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setBusinessScope(<span class="string">"BusinessScope"</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setContactAddress(<span class="string">"ContactAddress"</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setEconomicType(<span class="string">"EconomicType"</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setRegCapital(<span class="string">"RegCapital"</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setLegalName(<span class="string">"LegalName"</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setLegalID(<span class="string">"LegalID"</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setLegalPhone(<span class="string">"LegalPhone"</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setState(<span class="number">0</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setFlag(<span class="number">1</span>);</span><br><span class="line">        $baseInfoCompany-&gt;setUpdateTime(<span class="number">20180226121212</span>);</span><br><span class="line">        <span class="comment">// $protostr = $baseInfoCompany-&gt;serializeToString();</span></span><br><span class="line">        <span class="comment">//生成json</span></span><br><span class="line">        $protostr = $baseInfoCompany-&gt;serializeToJsonString();</span><br><span class="line">        <span class="keyword">return</span> $protostr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">receive_proto_data</span><span class="params">()</span></span>&#123;       </span><br><span class="line">        $protoData = file_get_contents(<span class="string">"http://localhost:83/proto/build"</span>);     </span><br><span class="line">        <span class="keyword">try</span> &#123;   </span><br><span class="line">            $baseInfoCompany = <span class="keyword">new</span> BaseInfoCompany();</span><br><span class="line"><span class="comment">//            $baseInfoCompany-&gt;mergeFromString($protoData);</span></span><br><span class="line">            $baseInfoCompany-&gt;mergeFromJsonString($protoData);</span><br><span class="line">            <span class="keyword">echo</span> $baseInfoCompany-&gt;getCompanyName();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $baseInfoCompany-&gt;serializeToJsonString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $ex) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'something is wrong'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-被动接收protobuf数据"><a href="#2-被动接收protobuf数据" class="headerlink" title="2.被动接收protobuf数据"></a>2.被动接收protobuf数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send_proto_data</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;build_proto_data();</span><br><span class="line">        $receive = HttpUtils::request_by_curl(<span class="string">"http://localhost:83/proto/receive"</span>,$data);</span><br><span class="line">        <span class="keyword">echo</span> $receive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">receive_proto_data</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// $protoData = file_get_contents("http://localhost:83/proto/build");   </span></span><br><span class="line">        $protoData = $_POST[<span class="string">"data"</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;       </span><br><span class="line">            $baseInfoCompany = <span class="keyword">new</span> BaseInfoCompany();</span><br><span class="line"><span class="comment">//            $baseInfoCompany-&gt;mergeFromString($protoData);</span></span><br><span class="line">            $baseInfoCompany-&gt;mergeFromJsonString($protoData);</span><br><span class="line">            <span class="keyword">echo</span> $baseInfoCompany-&gt;getCompanyName();</span><br><span class="line">            <span class="keyword">return</span> $baseInfoCompany-&gt;serializeToJsonString();        </span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $ex) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'something is wrong'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这里用到一个工具类<code>App\Helper\HttpUtils</code><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Helper</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpUtils</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">request_by_curl</span><span class="params">($remote_server, $post_string)</span> </span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $remote_server);</span><br><span class="line">        curl_setopt($ch, CURLOPT_POSTFIELDS, <span class="string">'data='</span> . $post_string);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_USERAGENT, <span class="string">'Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)'</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">1</span>);<span class="comment">//异步处理</span></span><br><span class="line">        $data = curl_exec($ch);</span><br><span class="line">        <span class="keyword">if</span> (curl_errno($ch)) &#123; <span class="comment">//响应错误的处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>protocbuf</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA与NodeJS实现AES加密</title>
    <url>/2018/03/09/java_nodejs_aes/</url>
    <content><![CDATA[<h2 id="内容要点"><a href="#内容要点" class="headerlink" title="内容要点"></a>内容要点</h2><p>本文实现java与nodejs的AES加密方式如下，并可实现java加密，nodejs解密或者nodejs加密，java解密</p>
<ul>
<li>aes-128-ecb</li>
<li>aes-256-ecb</li>
<li>aes-128-cbc</li>
<li>aes-256-cbc</li>
</ul>
<a id="more"></a>

<h2 id="java实现AES"><a href="#java实现AES" class="headerlink" title="java实现AES"></a>java实现AES</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>Java本身限制密钥的长度最多128位，而AES256需要的密钥长度是256位，因此需要到Java官网上下载一个<a href="http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html" target="_blank" rel="noopener">Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files</a>。在<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Java SE的下载页面</a>下面的Additional Resources那里会有下载链接。下载后打开压缩包，里面有两个jar文件:<br><code>local_policy.jar</code>和<code>US_export_policy.jar</code><br>把这两个jar文件解压到JRE目录下的lib/security文件夹，覆盖原来的文件。这样Java就不再限制密钥的长度了，否则编译会报错：</p>
<p><code>java.security.InvalidKeyException: Illegal key size</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.AlgorithmParameterSpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//key是16进制，需要转换为bytes，转换后bytes长度为16，即aes128，如果bytes长度是32则是aes256</span></span><br><span class="line">        <span class="comment">//也就是说keybytes.length须满足16的整数倍</span></span><br><span class="line">        String key128 = <span class="string">"c4b84456c1379bec99c4d1b7e9f13173"</span>;</span><br><span class="line">        String key256 = <span class="string">"c4b84456c1379bec99c4d1b7e9f13173c4b84456c1379bec99c4d1b7e9f13173"</span>;</span><br><span class="line">        <span class="comment">//iv.length须满足16的整数倍</span></span><br><span class="line">        <span class="keyword">byte</span>[] iv = <span class="string">"abcdefgh12345678"</span>.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">        String content_str = <span class="string">"helloworld 你好"</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] contentbytes = content_str.getBytes(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ecb128 bytes</span></span><br><span class="line">        <span class="keyword">byte</span>[] encryptbytes = EncodeUtil.aesEncryptToECB(contentbytes,key128);</span><br><span class="line">        <span class="keyword">byte</span>[] decryptbytes = EncodeUtil.aesDecryptToECB(encryptbytes,key128);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(decryptbytes,<span class="string">"utf-8"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ecb256 bytes</span></span><br><span class="line">        encryptbytes = EncodeUtil.aesEncryptToECB(contentbytes,key256);</span><br><span class="line">        decryptbytes = EncodeUtil.aesDecryptToECB(encryptbytes,key256);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(decryptbytes,<span class="string">"utf-8"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ecb128 String</span></span><br><span class="line">        String encryptString = EncodeUtil.aesEncryptToECB(content_str,key128);</span><br><span class="line">        String decryptString = EncodeUtil.aesDecryptToECB(encryptString,key128);</span><br><span class="line">        System.out.println(decryptString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ecb256 String</span></span><br><span class="line">        encryptString = EncodeUtil.aesEncryptToECB(content_str,key256);</span><br><span class="line">        decryptString = EncodeUtil.aesDecryptToECB(encryptString,key256);</span><br><span class="line">        System.out.println(decryptString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cbc128 bytes</span></span><br><span class="line">        encryptbytes = EncodeUtil.aesEncryptToCBC(contentbytes,key128,iv);</span><br><span class="line">        decryptbytes = EncodeUtil.aesDecryptToCBC(encryptbytes,key128,iv);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(decryptbytes,<span class="string">"utf-8"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cbc256 bytes</span></span><br><span class="line">        encryptbytes = EncodeUtil.aesEncryptToCBC(contentbytes,key256,iv);</span><br><span class="line">        decryptbytes = EncodeUtil.aesDecryptToCBC(encryptbytes,key256,iv);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(decryptbytes,<span class="string">"utf-8"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cbc128 String</span></span><br><span class="line">        encryptString = EncodeUtil.aesEncryptToCBC(content_str,key128,iv);</span><br><span class="line">        decryptString = EncodeUtil.aesDecryptToCBC(encryptString,key128,iv);</span><br><span class="line">        System.out.println(decryptString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cbc256 String</span></span><br><span class="line">        encryptString = EncodeUtil.aesEncryptToCBC(content_str,key256,iv);</span><br><span class="line">        decryptString = EncodeUtil.aesDecryptToCBC(encryptString,key256,iv);</span><br><span class="line">        System.out.println(decryptString);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * base 64 encode</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 待编码的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 编码后的base 64 code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">base64Encode</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BASE64Encoder().encode(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * base 64 decode</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> base64Code 待解码的base 64 code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解码后的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] base64Decode(String base64Code) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.isEmpty(base64Code) ? <span class="keyword">null</span> : <span class="keyword">new</span> BASE64Decoder().decodeBuffer(base64Code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证密钥长度是否有效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkkey</span><span class="params">(<span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(key.length != <span class="number">16</span> &amp;&amp; key.length != <span class="number">32</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"密钥长度错误，必须是16后者32位"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES加密 aes-128/256-ecb</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content    待加密的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptKey 加密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密后的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] aesEncryptToECB(<span class="keyword">byte</span>[] content, String encryptKey) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] key = org.apache.commons.codec.binary.Hex.decodeHex(encryptKey.toCharArray());</span><br><span class="line">        checkkey(key);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/ECB/PKCS5Padding"</span>);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>));</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES加密 aes-128/256-ecb</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content    待加密的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptKey 加密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密后的base64字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">aesEncryptToECB</span><span class="params">(String content, String encryptKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] key = org.apache.commons.codec.binary.Hex.decodeHex(encryptKey.toCharArray());</span><br><span class="line">        checkkey(key);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/ECB/PKCS5Padding"</span>);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>));</span><br><span class="line">        <span class="keyword">return</span> base64Encode(cipher.doFinal(content.getBytes(<span class="string">"utf-8"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES解密 aes-128/256-ecb</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 待解密的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> decryptKey   解密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] aesDecryptToECB(<span class="keyword">byte</span>[] content, String decryptKey) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] key = org.apache.commons.codec.binary.Hex.decodeHex(decryptKey.toCharArray());</span><br><span class="line">        checkkey(key);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/ECB/PKCS5Padding"</span>);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] decryptBytes = cipher.doFinal(content);</span><br><span class="line">        <span class="keyword">return</span> decryptBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES解密 aes-128/256-ecb</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 待解密的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> decryptKey   解密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">aesDecryptToECB</span><span class="params">(String content, String decryptKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] key = org.apache.commons.codec.binary.Hex.decodeHex(decryptKey.toCharArray());</span><br><span class="line">        checkkey(key);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/ECB/PKCS5Padding"</span>);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] decryptBytes = cipher.doFinal(base64Decode(content));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(decryptBytes,<span class="string">"utf-8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES加密 aes-128/256-cbc</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 待解密的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptKey   加密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> iv 偏移</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] aesEncryptToCBC(<span class="keyword">byte</span>[] content, String encryptKey,<span class="keyword">byte</span>[] iv) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] key = org.apache.commons.codec.binary.Hex.decodeHex(encryptKey.toCharArray());</span><br><span class="line">        checkkey(key);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5Padding"</span>);</span><br><span class="line">        <span class="comment">//算法参数</span></span><br><span class="line">        AlgorithmParameterSpec paramSpec = <span class="keyword">new</span> IvParameterSpec(iv);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>),paramSpec);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES解密 aes-128/256-cbc</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 待解密的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> decryptKey   解密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> iv 偏移</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] aesDecryptToCBC(<span class="keyword">byte</span>[] content, String decryptKey,<span class="keyword">byte</span>[] iv) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] key = org.apache.commons.codec.binary.Hex.decodeHex(decryptKey.toCharArray());</span><br><span class="line">        checkkey(key);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5Padding"</span>);</span><br><span class="line">        <span class="comment">//算法参数</span></span><br><span class="line">        AlgorithmParameterSpec paramSpec = <span class="keyword">new</span> IvParameterSpec(iv);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>),paramSpec);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES加密 aes-128/256-cbc</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 待解密的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptKey   加密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> iv 偏移</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">aesEncryptToCBC</span><span class="params">(String content, String encryptKey,<span class="keyword">byte</span>[] iv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] key = org.apache.commons.codec.binary.Hex.decodeHex(encryptKey.toCharArray());</span><br><span class="line">        checkkey(key);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5Padding"</span>);</span><br><span class="line">        <span class="comment">//算法参数</span></span><br><span class="line">        AlgorithmParameterSpec paramSpec = <span class="keyword">new</span> IvParameterSpec(iv);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>),paramSpec);</span><br><span class="line">        <span class="keyword">return</span> base64Encode(cipher.doFinal(content.getBytes(<span class="string">"utf-8"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES解密 aes-128/256-cbc</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 待解密的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> decryptKey   解密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> iv 偏移</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">aesDecryptToCBC</span><span class="params">(String content, String decryptKey,<span class="keyword">byte</span>[] iv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] key = org.apache.commons.codec.binary.Hex.decodeHex(decryptKey.toCharArray());</span><br><span class="line">        checkkey(key);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5Padding"</span>);</span><br><span class="line">        <span class="comment">//算法参数</span></span><br><span class="line">        AlgorithmParameterSpec paramSpec = <span class="keyword">new</span> IvParameterSpec(iv);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>),paramSpec);</span><br><span class="line">        <span class="keyword">byte</span>[] decryptBytes = cipher.doFinal(base64Decode(content));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(decryptBytes,<span class="string">"utf-8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>以下nodejs代码来源于 <a href="https://github.com/keel/aes-cross" target="_blank" rel="noopener">aes-cross</a>项目</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * "AES/cbc/pkcs5Padding" encription and decription.</span></span><br><span class="line"><span class="comment"> * setAutoPadding(true) is actually pkcs5Padding,.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CBC = <span class="string">'cbc'</span>;</span><br><span class="line"><span class="keyword">var</span> ECB = <span class="string">'ecb'</span>;</span><br><span class="line"><span class="keyword">var</span> NULL_IV = <span class="keyword">new</span> Buffer([]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> IV = <span class="keyword">new</span> Buffer([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line"><span class="keyword">var</span> cipherMode = ECB;</span><br><span class="line"><span class="keyword">var</span> keySize = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">var</span> algorithm;</span><br><span class="line">setAlgorithm();</span><br><span class="line"><span class="keyword">var</span> outputEncoding = <span class="string">'base64'</span>;</span><br><span class="line"><span class="keyword">var</span> inputEncoding = <span class="string">'utf8'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setAlgorithm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    algorithm = <span class="string">'aes-'</span> + keySize + <span class="string">'-'</span> + cipherMode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCipherMode</span>(<span class="params">mode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mode !== CBC &amp;&amp; mode !== ECB) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (<span class="string">'AES.setCipherMode error: '</span> + mode);</span><br><span class="line">    &#125;</span><br><span class="line">    cipherMode = mode;</span><br><span class="line">    setAlgorithm();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setKeySize</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size !== <span class="number">128</span> &amp;&amp; size !== <span class="number">256</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (<span class="string">'AES.setKeySize error: '</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line">    keySize = size;</span><br><span class="line">    setAlgorithm();</span><br><span class="line">    <span class="comment">// console.log('setKeySize:%j',keySize);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * the key must match the keySize/8 , like:16 ,32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Buffer&#125;</span> <span class="variable">key</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkKey</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'AES.checkKey error: key is null '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key.length !== (keySize / <span class="number">8</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'AES.checkKey error: key length is not '</span> + (keySize / <span class="number">8</span>) + <span class="string">': '</span> + key.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * buffer/bytes encription</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Buffer&#125;</span> <span class="variable">buff</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Buffer&#125;</span> </span>key  the length must be 16 or 32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Buffer&#125;</span> </span>[newIv]   default is [0,0...0]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;encripted Buffer&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encBytes</span>(<span class="params">buff, key, newIv</span>) </span>&#123;</span><br><span class="line">    checkKey(key);</span><br><span class="line">    <span class="keyword">var</span> iv = newIv || IV;</span><br><span class="line">    <span class="keyword">if</span> (cipherMode === ECB) iv = NULL_IV;</span><br><span class="line">    <span class="keyword">var</span> cipher = crypto.createCipheriv(algorithm, key, iv);</span><br><span class="line">    cipher.setAutoPadding(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">var</span> re = Buffer.concat([cipher.update(buff), cipher.final()]);</span><br><span class="line">    <span class="comment">// console.log('enc re:%s,len:%d', printBuf(re), re.length);</span></span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * text encription</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;string&#125;</span> <span class="variable">text</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Buffer&#125;</span> </span>key         the length must be 16 or 32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Buffer&#125;</span> </span>[newIv]       default is [0,0...0]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;string&#125;</span> </span>[input_encoding]  ["utf8" -default,"ascii","base64","binary"...](https://nodejs.org/api/buffer.html#buffer_buffer)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;string&#125;</span> </span>[output_encoding] ["base64" -default,"hex"]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span>                 </span>encription result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encText</span>(<span class="params">text, key, newIv, input_encoding, output_encoding</span>) </span>&#123;</span><br><span class="line">    checkKey(key);</span><br><span class="line">    <span class="keyword">var</span> iv = newIv || IV;</span><br><span class="line">    <span class="keyword">if</span> (cipherMode === ECB) iv = NULL_IV;</span><br><span class="line">    <span class="keyword">var</span> inEncoding = input_encoding || inputEncoding;</span><br><span class="line">    <span class="keyword">var</span> outEncoding = output_encoding || outputEncoding;</span><br><span class="line">    <span class="keyword">var</span> buff = <span class="keyword">new</span> Buffer(text, inEncoding);</span><br><span class="line">    <span class="keyword">var</span> out = encBytes(buff, key, iv);</span><br><span class="line">    <span class="keyword">var</span> re = <span class="keyword">new</span> Buffer(out).toString(outEncoding);</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * buffer/bytes decription</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Buffer&#125;</span> <span class="variable">buff</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Buffer&#125;</span> </span>key  the length must be 16 or 32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Buffer&#125;</span> </span>[newIv] default is [0,0...0]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;encripted Buffer&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decBytes</span>(<span class="params">buff, key, newIv</span>) </span>&#123;</span><br><span class="line">    checkKey(key);</span><br><span class="line">    <span class="keyword">var</span> iv = newIv || IV;</span><br><span class="line">    <span class="keyword">if</span> (cipherMode === ECB) iv = NULL_IV;</span><br><span class="line">    <span class="keyword">var</span> decipher = crypto.createDecipheriv(algorithm, key, iv);</span><br><span class="line">    decipher.setAutoPadding(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">var</span> out = Buffer.concat([decipher.update(buff), decipher.final()]);</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * text decription</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;string&#125;</span> <span class="variable">text</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Buffer&#125;</span> </span>key         the length must be 16 or 32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Buffer&#125;</span> </span>[newIv]       default is [0,0...0]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;string&#125;</span> </span>[input_encoding]  ["utf8" - default,"ascii","base64","binary"...](https://nodejs.org/api/buffer.html#buffer_buffer)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;string&#125;</span> </span>[output_encoding] ["base64"- default ,"hex"]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span>                 </span>decription result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decText</span>(<span class="params">text, key, newIv, input_encoding, output_encoding</span>) </span>&#123;</span><br><span class="line">    checkKey(key);</span><br><span class="line">    <span class="keyword">var</span> iv = newIv || IV;</span><br><span class="line">    <span class="keyword">if</span> (cipherMode === ECB) iv = NULL_IV;</span><br><span class="line">    <span class="keyword">var</span> inEncoding = input_encoding || inputEncoding;</span><br><span class="line">    <span class="keyword">var</span> outEncoding = output_encoding || outputEncoding;</span><br><span class="line">    <span class="keyword">var</span> buff = <span class="keyword">new</span> Buffer(text, outEncoding);</span><br><span class="line">    <span class="keyword">var</span> re = <span class="keyword">new</span> Buffer(decBytes(buff, key, iv)).toString(inEncoding);</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exports.setCipherMode = setCipherMode;</span><br><span class="line">exports.setKeySize = setKeySize;</span><br><span class="line">exports.encText = encText;</span><br><span class="line">exports.encBytes = encBytes;</span><br><span class="line">exports.decText = decText;</span><br><span class="line">exports.decBytes = decBytes;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下为测试部分</span></span><br><span class="line"><span class="comment">// //key是16进制，需要转换为buffer，转换后buffer长度为16，即aes128，如果buffer长度是32则是aes256</span></span><br><span class="line"><span class="comment">// var key = new Buffer("c4b84456c1379bec99c4d1b7e9f13173", 'hex');</span></span><br><span class="line"><span class="comment">// var key256 = new Buffer("c4b84456c1379bec99c4d1b7e9f13173c4b84456c1379bec99c4d1b7e9f13173", 'hex');</span></span><br><span class="line"><span class="comment">// var str = "helloworld 你好";</span></span><br><span class="line"><span class="comment">// var buffer = new Buffer(str,"utf8");</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// //aes-ecb-128 buffer</span></span><br><span class="line"><span class="comment">// var buffer_encrypt = encBytes(buffer,key);</span></span><br><span class="line"><span class="comment">// var crypto_buffer =decBytes(buffer_encrypt,key);</span></span><br><span class="line"><span class="comment">// var str = crypto_buffer.toString();</span></span><br><span class="line"><span class="comment">// console.log(str);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// //aes-ecb-128 string</span></span><br><span class="line"><span class="comment">// var text_encrypt = encText(str,key);</span></span><br><span class="line"><span class="comment">// var text_decrypt =decText(text_encrypt,key);</span></span><br><span class="line"><span class="comment">// console.log(text_decrypt);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// text_encrypt = encText(str,key,null,'utf8','base64');</span></span><br><span class="line"><span class="comment">// text_decrypt =decText(text_encrypt,key,null,'utf8','base64');</span></span><br><span class="line"><span class="comment">// console.log(text_decrypt);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// //aes-cbc-128 buffer</span></span><br><span class="line"><span class="comment">// setCipherMode(CBC);</span></span><br><span class="line"><span class="comment">// var iv = new Buffer("abcdefgh12345678","utf8");//字符串一定是16位</span></span><br><span class="line"><span class="comment">// buffer_encrypt = encBytes(buffer,key,iv);</span></span><br><span class="line"><span class="comment">// crypto_buffer =decBytes(buffer_encrypt,key,iv);</span></span><br><span class="line"><span class="comment">// str = crypto_buffer.toString();</span></span><br><span class="line"><span class="comment">// console.log(str);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// //aes-cbc-128 string</span></span><br><span class="line"><span class="comment">// text_encrypt = encText(str,key,iv);</span></span><br><span class="line"><span class="comment">// text_decrypt =decText(text_encrypt,key,iv);</span></span><br><span class="line"><span class="comment">// console.log(text_decrypt);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// text_encrypt = encText(str,key,iv,'utf8','base64');</span></span><br><span class="line"><span class="comment">// text_decrypt =decText(text_encrypt,key,iv,'utf8','base64');</span></span><br><span class="line"><span class="comment">// console.log(text_decrypt);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// //aes-ecb-256 buffer</span></span><br><span class="line"><span class="comment">// setKeySize(256);</span></span><br><span class="line"><span class="comment">// setCipherMode(ECB);</span></span><br><span class="line"><span class="comment">// buffer_encrypt = encBytes(buffer,key256);</span></span><br><span class="line"><span class="comment">// crypto_buffer =decBytes(buffer_encrypt,key256);</span></span><br><span class="line"><span class="comment">// str = crypto_buffer.toString();</span></span><br><span class="line"><span class="comment">// console.log("256=="+str);</span></span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://blog.csdn.net/u011363981/article/details/51149360" target="_blank" rel="noopener">用Java进行AES256-ECB-PKCS7Padding加密</a></li>
<li><a href="https://github.com/keel/aes-cross" target="_blank" rel="noopener">aes-cross</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Protocol Buffer学习笔记(Java&amp;NodeJS)</title>
    <url>/2018/02/26/protocol-buffer-study/</url>
    <content><![CDATA[<h2 id="什么是Protocol-Buffer"><a href="#什么是Protocol-Buffer" class="headerlink" title="什么是Protocol Buffer"></a>什么是Protocol Buffer</h2><p>Protocol Buffers(也称protobuf)是Google公司出品的一种独立于开发语言，独立于平台的可扩展的结构化数据序列机制。通俗点来讲它跟xml和json是一类。是一种数据交互格式协议。<br>主要优点是它是基于二进制的，所以比起结构化的xml协议来说，它的体积很少，数据在传输过程中会更快。另外它也支持c++、java、python、php、javascript等主流开发语言。</p>
<p><a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener">官网地址：https://developers.google.com/protocol-buffers/</a></p>
<a id="more"></a>

<h2 id="Proto3安装"><a href="#Proto3安装" class="headerlink" title="Proto3安装"></a>Proto3安装</h2><p><a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">下载地址</a>：3.x.x的版本基本都按照操作系统和语言进行了区分，系统包里只包含了protoc命令，语言包则是用于编译后使用，比如java需要生成对应的jar包。这里可以根据需要下载对应的操作系统和语言包，比如这里我下载的是protoc-3.5.1-osx-x86_64.zip（苹果系统）和protobuf-java-3.5.1.tar.gz（java语言）。</p>
<ul>
<li><code>unzip protoc-3.5.1-osx-x86_64.zip</code></li>
<li>在/etc/profile中添加环境变量PROTOCTL_BUFFER_HOME（protoc-3.5.1-osx-x86_64.zip解压后目录），并在PATH中添加$PROTOCTL_BUFFER_HOME/bin</li>
<li>查看版本：<code>protoc --version</code> ：输出 libprotoc 3.5.1</li>
</ul>
<p><code>以下部分只为自行编译生成对应的jar包，实际上maven中央仓库中已经存在了</code></p>
<ul>
<li><code>tar -zxcf protobuf-java-3.5.1.tar.gz</code>，解压后目录名称为protobuf-3.5.1</li>
<li><code>cd protobuf-3.5.1/src</code>，创建软连接 <code>ln -s $PROTOCTL_BUFFER_HOME/bin/protoc protoc</code></li>
<li><code>cd protobuf-3.5.1/java</code>，<code>mvn package</code>（maven请自行安装），成功后会在protobuf-3.5.1/java/code/target下生成protobuf-java-3.5.1.jar</li>
<li>然后将protobuf-java-3.5.1.jar上传到maven私服或者安装到本地仓库就可以使用了<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=protobuf-java-3.5.1.jar -DgroupId=com.google.protobuf -DartifactId=protobuf-java -Dversion=3.5.1 -Dpackaging=jar</span><br></pre></td></tr></table></figure></li>
<li>pom中添加依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- protocol buffer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Proto2安装"><a href="#Proto2安装" class="headerlink" title="Proto2安装"></a>Proto2安装</h2><p><a href="http://repo1.maven.org/maven2/com/google/protobuf/protoc/" target="_blank" rel="noopener">下载地址</a>：这里只是操作系统包，比如这里我下载的是protoc-2.6.1-osx-x86_64.exe，<a href="https://github.com/google/protobuf/releases/tag/v2.6.1" target="_blank" rel="noopener">语言包protobuf-2.6.1.tar.gz</a>。</p>
<ul>
<li>mv protoc-2.6.1-osx-x86_64.exe protoc</li>
<li>将上面重命名后的protoc文件所在目录加到系统环境变量PATH中</li>
<li>查看版本：<code>protoc --version</code> ：输出 libprotoc 2.6.1</li>
</ul>
<p><code>以下部分只为自行编译生成对应的jar包，实际上maven中央仓库中已经存在了</code></p>
<ul>
<li><code>tar -zxcf protobuf-2.6.1.tar.gz</code>，解压后目录名称为protobuf-2.6.1</li>
<li><code>cd protobuf-2.6.1/src</code>，创建软连接 <code>ln -s $PROTOCTL_BUFFER_HOME/bin/protoc protoc</code></li>
<li><code>cd protobuf-2.6.1/java</code>，<code>mvn package</code>（maven请自行安装），成功后会在protobuf-2.6.1/java/target下生成protobuf-java-2.6.1.jar</li>
<li>然后将protobuf-java-2.6.1.jar上传到maven私服或者安装到本地仓库就可以使用了<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=protobuf-java-2.6.1.jar -DgroupId=com.google.protobuf -DartifactId=protobuf-java -Dversion=2.6.1 -Dpackaging=jar</span><br></pre></td></tr></table></figure></li>
<li>pom中添加依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- protocol buffer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Proto使用"><a href="#Proto使用" class="headerlink" title="Proto使用"></a>Proto使用</h2><ul>
<li>先编写proto文件，具体语法请参考<a href="http://blog.csdn.net/briblue/article/details/53187780" target="_blank" rel="noopener">通信协议之Protocol buffer(Java篇)</a></li>
<li>生成java文件：<code>protoc --java_out=.  XXXX.proto</code></li>
<li>生成js文件：<code>protoc --js_out=import_style=commonjs,binary:. XXXX.proto</code> 『只有proto3支持该命令』</li>
<li>proto2与proto3语法上有一些不同，但是在使用时却没有特别的不同之处，此外proto3向下兼容proto2，所以可以只安装proto3，然后通过在proto文件中声明『syntax = “proto2”;或者syntax = “proto3”;』来指定类型</li>
</ul>
<h3 id="proto例子"><a href="#proto例子" class="headerlink" title="proto例子"></a>proto例子</h3><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">//syntax = "proto2";</span></span><br><span class="line"><span class="keyword">package</span> com.data.upload.proto;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.1 网约车平台公司基本信息接口</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">BaseInfoCompany</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="comment">// 公司标识</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> CompanyId       = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 公司名称</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> CompanyName     = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 统一社会信用代码</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> Identifier      = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注册地行政区划代码</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">uint32</span> Address         = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 经营范围</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> BusinessScope   = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通讯地址</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> ContactAddress  = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 经营业户经济类型</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> EconomicType    = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注册资本</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> RegCapital      = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 法人代表姓名</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> LegalName       = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 法人代表身份证号</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> LegalID         = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 法人代表电话</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> LegalPhone      = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 法人代表身份证扫描件文件编号</span></span><br><span class="line">	<span class="keyword">optional</span> <span class="built_in">string</span> LegalPhoto      = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 状态</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">uint32</span> State           = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 操作标识</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">uint32</span> Flag            = <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 更新时间</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">uint64</span> UpdateTime      = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 保留字段</span></span><br><span class="line">	<span class="keyword">optional</span> <span class="built_in">string</span> Reserved        = <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.2 网约车平台公司营运规模信息信息接口</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">BaseInfoCompanyStat</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="comment">// 公司标识</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> CompanyId       = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 平台注册网约车辆数</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">uint32</span> VehicleNum      = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 平台注册驾驶员数</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">uint32</span> DriverNum       = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 操作标识</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">uint32</span> Flag            = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 更新时间</span></span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">uint64</span> UpdateTime      = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 保留字段</span></span><br><span class="line">	<span class="keyword">optional</span> <span class="built_in">string</span> Reserved        = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpcType</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="comment">// 4.1 网约车平台公司基本信息接口</span></span><br><span class="line">	baseInfoCompany 							= <span class="number">0</span>x1001;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 4.2 网约车平台公司营运规模信息信息接口</span></span><br><span class="line">	baseInfoCompanyStat 						= <span class="number">0</span>x1002;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">OTIpc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	 <span class="comment">// 公司标识</span></span><br><span class="line">	 <span class="keyword">required</span> <span class="built_in">string</span> CompanyId                       			= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	 <span class="comment">// 消息来源标识</span></span><br><span class="line">	 <span class="keyword">required</span> <span class="built_in">string</span> Source	                        			= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	 <span class="comment">// 业务接口代码</span></span><br><span class="line">     <span class="keyword">required</span> IpcType IPCType                           		= <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 4.1 网约车平台公司基本信息接口</span></span><br><span class="line">	<span class="keyword">repeated</span> BaseInfoCompany baseInfoCompany 					= <span class="number">0</span>x1001;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 4.2 网约车平台公司营运规模信息信息接口</span></span><br><span class="line">	<span class="keyword">repeated</span> BaseInfoCompanyStat baseInfoCompanyStat 			= <span class="number">0</span>x1002;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">OTIpcList</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="keyword">repeated</span> OTIpc otpic                     = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="java中使用Protocol-Buffer"><a href="#java中使用Protocol-Buffer" class="headerlink" title="java中使用Protocol Buffer"></a>java中使用Protocol Buffer</h3><ul>
<li>添加依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- protocol buffer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>Client端<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">OTIpcDef.BaseInfoCompany.Builder baseInfoCompanyBuilder = OTIpcDef.BaseInfoCompany.newBuilder();</span><br><span class="line">baseInfoCompanyBuilder.setAddress(<span class="number">110011</span>);</span><br><span class="line">baseInfoCompanyBuilder.setCompanyId(<span class="string">"companyId"</span>);</span><br><span class="line">baseInfoCompanyBuilder.setCompanyName(<span class="string">"companyName"</span>);</span><br><span class="line">baseInfoCompanyBuilder.setIdentifier(<span class="string">"identifier"</span>);</span><br><span class="line">baseInfoCompanyBuilder.setBusinessScope(<span class="string">"BusinessScope"</span>);</span><br><span class="line">baseInfoCompanyBuilder.setContactAddress(<span class="string">"ContactAddress"</span>);</span><br><span class="line">baseInfoCompanyBuilder.setEconomicType(<span class="string">"EconomicType"</span>);</span><br><span class="line">baseInfoCompanyBuilder.setRegCapital(<span class="string">"RegCapital"</span>);</span><br><span class="line">baseInfoCompanyBuilder.setLegalName(<span class="string">"LegalName"</span>);</span><br><span class="line">baseInfoCompanyBuilder.setLegalID(<span class="string">"LegalID"</span>);</span><br><span class="line">baseInfoCompanyBuilder.setLegalPhone(<span class="string">"LegalPhone"</span>);</span><br><span class="line">baseInfoCompanyBuilder.setState(<span class="number">0</span>);</span><br><span class="line">baseInfoCompanyBuilder.setFlag(<span class="number">1</span>);</span><br><span class="line">baseInfoCompanyBuilder.setUpdateTime(<span class="number">20180226121212l</span>);</span><br><span class="line"></span><br><span class="line">OTIpcDef.BaseInfoCompany baseInfoCompany = baseInfoCompanyBuilder.build();</span><br><span class="line"></span><br><span class="line">OTIpcDef.OTIpc.Builder otIpcBuilder = OTIpcDef.OTIpc.newBuilder();</span><br><span class="line">otIpcBuilder.setCompanyId(<span class="string">"companyId"</span>);</span><br><span class="line">otIpcBuilder.setSource(<span class="string">"Source"</span>);</span><br><span class="line">otIpcBuilder.setIPCType(OTIpcDef.IpcType.baseInfoCompany);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果一次传递多条记录可以使用list</span></span><br><span class="line"><span class="comment">//List&lt;OTIpcDef.BaseInfoCompany&gt; list  = new ArrayList&lt;OTIpcDef.BaseInfoCompany&gt;();</span></span><br><span class="line"><span class="comment">//list.add(baseInfoCompany);</span></span><br><span class="line"><span class="comment">//otIpcBuilder.addAllBaseInfoCompany(list);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以用add方法一个一个的添加</span></span><br><span class="line">otIpcBuilder.addBaseInfoCompany(baseInfoCompany);</span><br><span class="line">otIpcBuilder.addBaseInfoCompany(baseInfoCompany);</span><br><span class="line"></span><br><span class="line">OTIpcDef.OTIpc otIpc = otIpcBuilder.build();</span><br><span class="line"></span><br><span class="line">OTIpcDef.BaseInfoCompanyStat.Builder baseInfoCompanyStatBuilder = OTIpcDef.BaseInfoCompanyStat.newBuilder();</span><br><span class="line">baseInfoCompanyStatBuilder.setCompanyId(<span class="string">"companyId"</span>);</span><br><span class="line">baseInfoCompanyStatBuilder.setDriverNum(<span class="number">10</span>);</span><br><span class="line">baseInfoCompanyStatBuilder.setFlag(<span class="number">0</span>);</span><br><span class="line">baseInfoCompanyStatBuilder.setUpdateTime(<span class="number">20180226121212l</span>);</span><br><span class="line">baseInfoCompanyStatBuilder.setVehicleNum(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">OTIpcDef.BaseInfoCompanyStat baseInfoCompanyStat = baseInfoCompanyStatBuilder.build();</span><br><span class="line"></span><br><span class="line">OTIpcDef.OTIpc.Builder otIpcBuilder2 = OTIpcDef.OTIpc.newBuilder();</span><br><span class="line">otIpcBuilder2.setCompanyId(<span class="string">"companyId"</span>);</span><br><span class="line">otIpcBuilder2.setSource(<span class="string">"Source"</span>);</span><br><span class="line">otIpcBuilder2.setIPCType(OTIpcDef.IpcType.baseInfoCompanyStat);</span><br><span class="line"></span><br><span class="line">otIpcBuilder2.addBaseInfoCompanyStat(baseInfoCompanyStat);</span><br><span class="line"></span><br><span class="line">OTIpcDef.OTIpc otIpc2 = otIpcBuilder2.build();</span><br><span class="line"></span><br><span class="line">OTIpcDef.OTIpcList.Builder oTIpcListBuilder = OTIpcDef.OTIpcList.newBuilder();</span><br><span class="line">oTIpcListBuilder.addOtpic(otIpc);</span><br><span class="line">oTIpcListBuilder.addOtpic(otIpc2);</span><br><span class="line"></span><br><span class="line">OTIpcDef.OTIpcList otIpcList = oTIpcListBuilder.build();</span><br><span class="line"><span class="comment">//序列话数据</span></span><br><span class="line"><span class="keyword">byte</span>[] array = otIpcList.toByteArray();</span><br><span class="line"></span><br><span class="line">HttpClientUtils httpClientUtils = <span class="keyword">new</span> HttpClientUtils();</span><br><span class="line">httpClientUtils.doPost4ProtocleBuffer(<span class="string">"http://localhost:3000/demo/protoc"</span>,array);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>HttpClientUtils.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yipin.entity.HttpResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.config.RequestConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.ByteArrayEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.LaxRedirectStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CloseableHttpClient httpClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RequestConfig requestConfig;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpClientUtils</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        PoolingHttpClientConnectionManager httpClientConnectionManager = <span class="keyword">new</span> PoolingHttpClientConnectionManager();</span><br><span class="line">        <span class="comment">// 创建全局的requestConfig</span></span><br><span class="line">        <span class="keyword">this</span>.requestConfig = RequestConfig.custom().build();</span><br><span class="line">        <span class="comment">// 声明重定向策略对象</span></span><br><span class="line">        LaxRedirectStrategy redirectStrategy = <span class="keyword">new</span> LaxRedirectStrategy();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.httpClient = HttpClients.custom().setConnectionManager(httpClientConnectionManager)</span><br><span class="line">                .setDefaultRequestConfig(requestConfig)</span><br><span class="line">                .setRedirectStrategy(redirectStrategy)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpResult <span class="title">doPost4ProtocleBuffer</span><span class="params">(String url, <span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建http POST请求</span></span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">        httpPost.setConfig(<span class="keyword">this</span>.requestConfig);</span><br><span class="line">        httpPost.setHeader(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>);</span><br><span class="line">        httpPost.setHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-protobuf"</span>);</span><br><span class="line">        httpPost.setHeader(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip"</span>);</span><br><span class="line">        httpPost.setHeader(<span class="string">"Accept-Charset"</span>, <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 构造一个请求实体</span></span><br><span class="line">            ByteArrayEntity byteArrayEntity = <span class="keyword">new</span> ByteArrayEntity(bytes);</span><br><span class="line">            byteArrayEntity.setContentType(<span class="string">"application/x-protobuf"</span>);</span><br><span class="line">            <span class="comment">// 将请求实体设置到httpPost对象中</span></span><br><span class="line">            httpPost.setEntity(byteArrayEntity);</span><br><span class="line">        &#125;</span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行请求</span></span><br><span class="line">            response = <span class="keyword">this</span>.httpClient.execute(httpPost);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HttpResult(response.getStatusLine().getStatusCode(),</span><br><span class="line">                    EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>server端<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream in = request.getInputStream();</span><br><span class="line">OTIpcDef.OTIpcList otIpcList = OTIpcDef.OTIpcList.parseFrom(in);</span><br><span class="line">List&lt;OTIpcDef.OTIpc&gt; list= otIpcList.getOtpicList();</span><br><span class="line"><span class="keyword">for</span>(OTIpcDef.OTIpc otIpc : list)&#123;</span><br><span class="line">    String companyid = otIpc.getCompanyId();</span><br><span class="line">    String source = otIpc.getSource();</span><br><span class="line">    OTIpcDef.IpcType ipcType = otIpc.getIPCType();</span><br><span class="line">    <span class="keyword">if</span>(ipcType == OTIpcDef.IpcType.baseInfoCompany)&#123;</span><br><span class="line">        List&lt;OTIpcDef.BaseInfoCompany&gt; baseInfoCompanyList = otIpc.getBaseInfoCompanyList();</span><br><span class="line">        <span class="keyword">for</span>(OTIpcDef.BaseInfoCompany baseInfoCompany : baseInfoCompanyList)&#123;</span><br><span class="line">            String companyName = baseInfoCompany.getCompanyName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ipcType == OTIpcDef.IpcType.baseInfoCompanyStat)&#123;</span><br><span class="line">        List&lt;OTIpcDef.BaseInfoCompanyStat&gt; baseInfoCompanyStatList = otIpc.getBaseInfoCompanyStatList();</span><br><span class="line">        <span class="keyword">for</span>(OTIpcDef.BaseInfoCompanyStat baseInfoCompanyStat : baseInfoCompanyStatList)&#123;</span><br><span class="line">            <span class="keyword">int</span> driverNum = baseInfoCompanyStat.getDriverNum();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="nodejs中使用Protocol-Buffer"><a href="#nodejs中使用Protocol-Buffer" class="headerlink" title="nodejs中使用Protocol Buffer"></a>nodejs中使用Protocol Buffer</h3><ul>
<li><p>安装依赖<br><code>npm install google-protobuf --save</code><br><code>npm install bufferhelper --save</code></p>
</li>
<li><p>Client端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> OTIpcDefProto = <span class="built_in">require</span>(<span class="string">'../protocbuf/OTIpcDef_pb'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务对象封装</span></span><br><span class="line"><span class="keyword">var</span> baseInfoCompany = <span class="keyword">new</span> OTIpcDefProto.BaseInfoCompany();</span><br><span class="line">baseInfoCompany.setAddress(<span class="number">110011</span>);</span><br><span class="line">baseInfoCompany.setCompanyid(<span class="string">"companyId"</span>);</span><br><span class="line">baseInfoCompany.setIdentifier(<span class="string">"identifier"</span>);</span><br><span class="line">baseInfoCompany.setCompanyname(<span class="string">"companyName公司名称"</span>);</span><br><span class="line">baseInfoCompany.setBusinessscope(<span class="string">"BusinessScope"</span>);</span><br><span class="line">baseInfoCompany.setContactaddress(<span class="string">"ContactAddress"</span>);</span><br><span class="line">baseInfoCompany.setEconomictype(<span class="string">"EconomicType"</span>);</span><br><span class="line">baseInfoCompany.setRegcapital(<span class="string">"RegCapital"</span>);</span><br><span class="line">baseInfoCompany.setLegalname(<span class="string">"LegalName"</span>);</span><br><span class="line">baseInfoCompany.setLegalid(<span class="string">"LegalID"</span>);</span><br><span class="line">baseInfoCompany.setLegalphone(<span class="string">"LegalPhone"</span>);</span><br><span class="line">baseInfoCompany.setState(<span class="number">0</span>);</span><br><span class="line">baseInfoCompany.setFlag(<span class="number">1</span>);</span><br><span class="line">baseInfoCompany.setUpdatetime(<span class="number">20180226121212</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务类型封装</span></span><br><span class="line"><span class="keyword">var</span> otIpc = <span class="keyword">new</span> OTIpcDefProto.OTIpc();</span><br><span class="line">otIpc.setCompanyid(<span class="string">"companyId"</span>);</span><br><span class="line">otIpc.setSource(<span class="string">"Source"</span>);</span><br><span class="line">otIpc.setIpctype(OTIpcDefProto.IpcType.BASEINFOCOMPANY);</span><br><span class="line"><span class="comment">//可以多次调用add方法添加多条业务对象数据</span></span><br><span class="line">otIpc.addBaseinfocompany(baseInfoCompany);</span><br><span class="line"></span><br><span class="line"><span class="comment">//统一封装为list传输</span></span><br><span class="line"><span class="keyword">var</span> otIpcList = <span class="keyword">new</span> OTIpcDefProto.OTIpcList();</span><br><span class="line"><span class="comment">//可以通过add方法条件多条业务类型数据</span></span><br><span class="line">otIpcList.addOtpic(otIpc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//序列化对象</span></span><br><span class="line"><span class="keyword">var</span> contents = otIpcList.serializeBinary();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    path: <span class="string">'/demo2/protoc'</span>,</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-protobuf'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// res.setEncoding('uft8');</span></span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//转成buffer</span></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(contents);</span><br><span class="line"><span class="comment">//只支持string和buffer类型</span></span><br><span class="line">req.write(buffer);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure>
</li>
<li><p>Server端（express）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> OTIpcDefProto = <span class="built_in">require</span>(<span class="string">'../protocbuf/OTIpcDef_pb'</span>);</span><br><span class="line"><span class="keyword">var</span> BufferHelper = <span class="built_in">require</span>(<span class="string">'bufferhelper'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:3000/demo/</span></span><br><span class="line">router.post(<span class="string">'/protoc'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//数据接收，可以使用bufferHelper接收protocolbuffer数据</span></span><br><span class="line">    <span class="keyword">var</span> bufferHelper = <span class="keyword">new</span> BufferHelper();</span><br><span class="line">    req.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        bufferHelper.concat(chunk);</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = bufferHelper.toBuffer();</span><br><span class="line">        <span class="comment">//buffer转换为proto对象</span></span><br><span class="line">        <span class="keyword">var</span> otIpcList = OTIpcDefProto.OTIpcList.deserializeBinary(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;otIpcList.getOtpicList().length;i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i+<span class="string">"========================================"</span>);</span><br><span class="line">            <span class="keyword">var</span> otIpc = otIpcList.getOtpicList()[i];</span><br><span class="line">            <span class="keyword">var</span> companyid = otIpc.getCompanyid();</span><br><span class="line">            <span class="keyword">var</span> source = otIpc.getSource();</span><br><span class="line">            <span class="keyword">var</span> iPCType = otIpc.getIpctype();</span><br><span class="line">            <span class="built_in">console</span>.log(companyid);</span><br><span class="line">            <span class="built_in">console</span>.log(source);</span><br><span class="line">            <span class="built_in">console</span>.log(iPCType);</span><br><span class="line">            <span class="keyword">if</span>(iPCType == OTIpcDefProto.IpcType.BASEINFOCOMPANY)&#123;</span><br><span class="line">                <span class="keyword">var</span> baseInfoCompanyList = otIpc.getBaseinfocompanyList();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;baseInfoCompanyList.length;j++)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(j+<span class="string">"===============baseInfoCompanyList================="</span>);</span><br><span class="line">                    <span class="keyword">var</span> baseInfoCompany = baseInfoCompanyList[j];</span><br><span class="line">                    <span class="built_in">console</span>.log(baseInfoCompany.toObject());</span><br><span class="line">                    <span class="built_in">console</span>.log(baseInfoCompany.getCompanyid());</span><br><span class="line">                    <span class="built_in">console</span>.log(baseInfoCompany.getCompanyname());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(iPCType == OTIpcDefProto.IpcType.BASEINFOCOMPANYSTAT)&#123;</span><br><span class="line">                <span class="keyword">var</span> baseInfoCompanyStatList = otIpc.getBaseinfocompanystatList();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;baseInfoCompanyStatList.length;j++)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(j+<span class="string">"===============baseInfoCompanyStatList================="</span>);</span><br><span class="line">                    <span class="keyword">var</span> baseInfoCompanyStat = baseInfoCompanyStatList[j];</span><br><span class="line">                    <span class="built_in">console</span>.log(baseInfoCompanyStat.toObject());</span><br><span class="line">                    <span class="built_in">console</span>.log(baseInfoCompanyStat.getCompanyid());</span><br><span class="line">                    <span class="built_in">console</span>.log(baseInfoCompanyStat.getDrivernum());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(otIpcList.toObject());</span><br><span class="line"></span><br><span class="line">        res.send(otIpcList.toObject());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这里可以将protocolbuffer数据的接收过程封装到app.js中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下代码要在路由映射的最上方声明，以保证其先被执行</span></span><br><span class="line">app.use(<span class="string">'/*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> contentType = req.get(<span class="string">'Content-Type'</span>);</span><br><span class="line">  <span class="comment">//判断contentType，如果是protobuf类型则将数据封装到req.body中</span></span><br><span class="line">  <span class="keyword">if</span>(contentType==<span class="string">'application/x-protobuf'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> bufferHelper = <span class="keyword">new</span> BufferHelper();</span><br><span class="line">      req.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">          bufferHelper.concat(chunk);</span><br><span class="line">      &#125;);</span><br><span class="line">      req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> buffer = bufferHelper.toBuffer();</span><br><span class="line">          req.body = buffer;</span><br><span class="line">          <span class="built_in">console</span>.log(req.body);</span><br><span class="line">          next();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      next();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后在路由js中只需要按照如下方式接收数据即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> otIpcList = OTIpcDefProto.OTIpcList.deserializeBinary(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(req.body));</span><br></pre></td></tr></table></figure>

<ul>
<li>Server端（restify）<br>restify中接收proto数据比较简单，因为proto数据已经被封装到req.body中了，所以使用方式类似于上面express的第二种方法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> otIpcList = OTIpcDefProto.OTIpcList.deserializeBinary(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(req.body));</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="JSON与Protobuf相互转换"><a href="#JSON与Protobuf相互转换" class="headerlink" title="JSON与Protobuf相互转换"></a>JSON与Protobuf相互转换</h2><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- protocol buffer format --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.googlecode.protobuf-java-format<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java-format<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>json to proto</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.googlecode.protobuf.format.JsonFormat jsonFormat = <span class="keyword">new</span> JsonFormat();</span><br><span class="line">com.google.protobuf.Message.Builder builder = OTIpcDef.BaseInfoCompany.newBuilder();</span><br><span class="line"><span class="comment">//这里实际上需要提供一个json字符串，这里假设这个json是从某个对象转换而来的</span></span><br><span class="line">String json = com.alibaba.fastjson.JSON.toJSONString(myObject);</span><br><span class="line"><span class="comment">//该方法会将json中与builder所代表的对象中的属性做merge，也就是说只要字段名称和类型一致即可进行封装，对于字段名称和类型匹配不上的属性不予处理，方法成功后builder对象会完成属性值的封装。</span></span><br><span class="line">jsonFormat.merge(<span class="keyword">new</span> ByteArrayInputStream(json.getBytes()), builder);</span><br></pre></td></tr></table></figure>
</li>
<li><p>proto to json</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OTIpcDef.OTIpcList otIpcList = oTIpcListBuilder.build();</span><br><span class="line"><span class="comment">//proto对象转json</span></span><br><span class="line">com.googlecode.protobuf.format.JsonFormat jsonFormat = <span class="keyword">new</span> JsonFormat();</span><br><span class="line">String json =jsonFormat.printToString(otIpcList);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><ul>
<li>json to proto<br>编写json2Proto.js，里面就一个方法，用于将json字符串转换为封装好的proto对象<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json2proto = <span class="function"><span class="keyword">function</span> (<span class="params">json_str,protoObject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Array</span>.prototype.contains = <span class="function"><span class="keyword">function</span> (<span class="params"> needle </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>[i] == needle) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p_json_str = json_str;</span><br><span class="line">    <span class="keyword">var</span> p_json = <span class="built_in">eval</span>(<span class="string">"("</span> + p_json_str + <span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p_json_key_array = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> p_json)&#123;<span class="comment">//遍历json对象的每个key/value对,p为key</span></span><br><span class="line">        p_json_key_array[i] = p;</span><br><span class="line">        i++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s_json = protoObject.toObject();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> s_json)&#123;<span class="comment">//遍历json对象的每个key/value对,p为key</span></span><br><span class="line">        <span class="keyword">if</span> (p_json_key_array.contains(p)) &#123;</span><br><span class="line">            <span class="keyword">var</span> setMethod = <span class="string">"set"</span>+p.charAt(<span class="number">0</span>).toUpperCase() + p.slice(<span class="number">1</span>);    </span><br><span class="line">            protoObject[setMethod](p_json[p]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> protoObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = json2proto;</span><br></pre></td></tr></table></figure>
调用方法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> OTIpcDefProto = <span class="built_in">require</span>(<span class="string">'../protocbuf/OTIpcDef_pb'</span>);</span><br><span class="line"><span class="keyword">var</span> json2proto = <span class="built_in">require</span>(<span class="string">'../json2Proto'</span>);</span><br><span class="line"><span class="comment">//json字符串</span></span><br><span class="line"><span class="keyword">var</span> p_json_str = <span class="string">"&#123; companyid: '公司ID',"</span> +</span><br><span class="line">    <span class="string">"companyname: 'companyId',"</span> +</span><br><span class="line">    <span class="string">"identifier : 'identifier',"</span> +</span><br><span class="line">    <span class="string">"address : 111111,"</span> +</span><br><span class="line">    <span class="string">"businessscope : 'businessscope',"</span> +</span><br><span class="line">    <span class="string">"contactaddress : 'contactaddress',"</span> +</span><br><span class="line">    <span class="string">"economictype : 'economictype',"</span> +</span><br><span class="line">    <span class="string">"regcapital : 'regcapital',"</span> +</span><br><span class="line">    <span class="string">"legalname : 'legalname',"</span> +</span><br><span class="line">    <span class="string">"legalid : 'legalid',"</span> +</span><br><span class="line">    <span class="string">"legalphone : 'legalphone',"</span> +</span><br><span class="line">    <span class="string">"legalphoto : 'legalphoto',"</span> +</span><br><span class="line">    <span class="string">"state : 0,"</span> +</span><br><span class="line">    <span class="string">"flag : 1,"</span> +</span><br><span class="line">    <span class="string">"updatetime: 20180226121212&#125;"</span>;</span><br><span class="line"><span class="keyword">var</span> baseInfoCompany = json2proto(p_json_str,<span class="keyword">new</span> OTIpcDefProto.BaseInfoCompany());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(baseInfoCompany.toObject());</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://blog.csdn.net/fangzhangsc2006/article/details/8687415" target="_blank" rel="noopener">springMVC项目中实现Protocol Buffers对象自动转换</a></li>
<li><a href="http://blog.csdn.net/zhuyijian135757/article/details/52294745" target="_blank" rel="noopener">protobuf实现js与java间的http通信</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>protocbuf</tag>
      </tags>
  </entry>
  <entry>
    <title>钉钉与企业微信之OA产品分析</title>
    <url>/2017/08/08/dingtalk-weixin-oa/</url>
    <content><![CDATA[<h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><ul>
<li><a href="https://www.dingtalk.com" target="_blank" rel="noopener">钉钉</a></li>
<li><a href="https://work.weixin.qq.com" target="_blank" rel="noopener">企业微信</a></li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li>钉钉自身就实现了OA中的绝大部分功能，且流程配置更加灵活，目前我们用到的只有CRM需要依赖于第三方的销帮帮。</li>
<li>销帮帮不支持区间设置，但只有合同审批会受此影响（目前正在和对方沟通希望其能进行升级）。</li>
<li>微信自身提供的功能和第三方应用都不如钉钉的多。</li>
<li>从功能、使用方式、价格和技术支持等多个维度对比，钉钉更有优势。</li>
</ul>
<h2 id="平台对比"><a href="#平台对比" class="headerlink" title="平台对比"></a>平台对比</h2><table>
<thead>
<tr>
<th align="left">功能</th>
<th align="center">钉钉</th>
<th align="center">企业微信</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">web端</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">手机客户端</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">PC客户端</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="left">钉钉：除第三方功能（销帮帮CRM）外，都可以在客户端上完成，第三方功能会跳转到web端。<br>企业微信：部分内置审批功能都需要跳转到web端，第三方（企微云）支持客户端直接发起申请很审批。</td>
</tr>
<tr>
<td align="left">微信插件</td>
<td align="center">无</td>
<td align="center">有</td>
<td align="left">使用微信插件可以不安装企业微信客户端，只使用微信就可以。</td>
</tr>
<tr>
<td align="left">自定义表单</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">自定义流程</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="left">企业微信：分支流程不支持区间设置，所以不能实现超过2个分支的情况，比如按请假天数走不同的审批流：小于3天，大于等于3天且小于10天，大于等于10天。企微云mac系统支持不好。销帮帮不支持区间设置。</td>
</tr>
<tr>
<td align="left">自定义工作台布局</td>
<td align="center">支持</td>
<td align="center">不支持</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">使用方式</td>
<td align="center">多公司</td>
<td align="center">单公司</td>
<td align="left">钉钉：登录后可同时接收多家公司的消息，在工作台中对某个公司进行切换。<br>企业微信：登录时选择公司，只接收登录公司的信息</td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="OA功能对比"><a href="#OA功能对比" class="headerlink" title="OA功能对比"></a>OA功能对比</h2><table>
<thead>
<tr>
<th align="left">功能</th>
<th align="center">钉钉</th>
<th align="center">企业微信</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">出勤休假–考勤打卡（签到）</td>
<td align="center">有</td>
<td align="center">有</td>
<td>企微云平台 - 移动办公</td>
</tr>
<tr>
<td align="left">出勤休假–请假</td>
<td align="center">有</td>
<td align="center">有</td>
<td>适用于请假申请，精确扣减出勤时间，并同步考勤报表</td>
</tr>
<tr>
<td align="left">出勤休假–出差</td>
<td align="center">有</td>
<td align="center">有</td>
<td>适用于出差申请，精确汇总至考勤报表</td>
</tr>
<tr>
<td align="left">出勤休假–外出</td>
<td align="center">有</td>
<td align="center">有</td>
<td>适用于外出申请，精确汇总至考勤报表</td>
</tr>
<tr>
<td align="left">出勤休假–加班</td>
<td align="center">有</td>
<td align="center">有</td>
<td>适用于加班申请，精确汇总至考勤报表</td>
</tr>
<tr>
<td align="left">出勤休假–补卡</td>
<td align="center">有</td>
<td align="center">有（企微云）</td>
<td>当员工考勤出现缺卡时，可发起补卡审批，审批通过后考勤报表中的缺卡记录改为正常</td>
</tr>
<tr>
<td align="left">人事–转正</td>
<td align="center">有</td>
<td align="center">无（可以创建）</td>
<td>用于试用期内员工的员工转正申请</td>
</tr>
<tr>
<td align="left">人事–招聘</td>
<td align="center">有</td>
<td align="center">无（可以创建）</td>
<td>用于用人部门需求申请</td>
</tr>
<tr>
<td align="left">人事–调岗申请单</td>
<td align="center">有</td>
<td align="center">无（可以创建）</td>
<td>适用于调岗审批</td>
</tr>
<tr>
<td align="left">人事–离职申请单</td>
<td align="center">有</td>
<td align="center">无（可以创建）</td>
<td>适用于离职审批</td>
</tr>
<tr>
<td align="left">行政–用车申请</td>
<td align="center">有</td>
<td align="center">有（企微云）</td>
<td>适用于因公使用车辆的申请</td>
</tr>
<tr>
<td align="left">行政–物品领用</td>
<td align="center">有</td>
<td align="center">有（企微云）</td>
<td>适用于物品领用申请</td>
</tr>
<tr>
<td align="left">行政–用印申请</td>
<td align="center">有</td>
<td align="center">无（可以创建）</td>
<td>适用于公司印章使用</td>
</tr>
<tr>
<td align="left">行政–通用审批</td>
<td align="center">有</td>
<td align="center">有</td>
<td>适用于通用审批</td>
</tr>
<tr>
<td align="left">财务–报销</td>
<td align="center">有</td>
<td align="center">有</td>
<td>适用于公司报销审批</td>
</tr>
<tr>
<td align="left">财务–备用金申请</td>
<td align="center">有</td>
<td align="center">无（可以创建）</td>
<td>用于企业员工出差或外出办事填写的备用金申请单</td>
</tr>
<tr>
<td align="left">财务–付款申请</td>
<td align="center">有</td>
<td align="center">无（可以创建）</td>
<td>适用于付款审批</td>
</tr>
<tr>
<td align="left">其它–立项申请</td>
<td align="center">有</td>
<td align="center">无（可以创建）</td>
<td>适用于项目立项时的申请</td>
</tr>
<tr>
<td align="left">其它–采购</td>
<td align="center">有</td>
<td align="center">无（可以创建）</td>
<td>用于企业办公或所需材料的采购申请</td>
</tr>
<tr>
<td align="left">合同和CRM</td>
<td align="center">无（销帮帮）</td>
<td align="center">企微云</td>
<td>均为第三方产品，都支持自定义合同表单和审批流程。<br>钉钉中第三方产品比较多。<br>企业微信比较少。</td>
</tr>
</tbody></table>
<h2 id="手机客户端界面对比"><a href="#手机客户端界面对比" class="headerlink" title="手机客户端界面对比"></a>手机客户端界面对比</h2><table>
<thead>
<tr>
<th align="center">功能页</th>
<th align="center">钉钉</th>
<th align="center">企业微信</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">首页</td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/dingtalk-index.PNG" alt=""></td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/weixin-index.PNG" alt=""></td>
<td align="left">钉钉：显示多个公司的信息。<br>企业微信：显示单个公司的信息。</td>
</tr>
<tr>
<td align="center">工作台</td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/dingtalk-work.PNG" alt=""></td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/weixin-work.PNG" alt=""></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">审批</td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/dingtalk-approve.PNG" alt=""></td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/weixin-approve.PNG" alt="">)<img src="/images_glob/dingtalk-weixin-oa/weixin-approve-thd.PNG" alt=""></td>
<td align="left">企业微信：第一个是微信的，第二张图是第三方的（指掌天下）</td>
</tr>
<tr>
<td align="center">CRM(合同)</td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/dingtalk-crm-index.PNG" alt="">)<img src="/images_glob/dingtalk-weixin-oa/dingtalk-crm-create.PNG" alt=""></td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/weixin-crm.PNG" alt=""></td>
<td align="left">钉钉：销帮帮（第三方）。<br> 企业微信：企微云（第三方）</td>
</tr>
</tbody></table>
<h2 id="PC客户端界面对比"><a href="#PC客户端界面对比" class="headerlink" title="PC客户端界面对比"></a>PC客户端界面对比</h2><table>
<thead>
<tr>
<th align="center">功能页</th>
<th align="center">钉钉</th>
<th align="center">企业微信</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">首页</td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/dt-index.png" alt=""></td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/wx-index.png" alt=""></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">工作台</td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/dt-work.png" alt=""></td>
<td align="center"></td>
<td align="left">企业微信：首页即为工作台</td>
</tr>
<tr>
<td align="center">审批</td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/dt-approve.png" alt="">)<img src="/images_glob/dingtalk-weixin-oa/dt-approve-create.png" alt=""></td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/wx-approve-create.png" alt=""></td>
<td align="left">企业微信：内置审批需要跳转到web申请</td>
</tr>
<tr>
<td align="center">CRM(合同)</td>
<td align="center"></td>
<td align="center"><img src="/images_glob/dingtalk-weixin-oa/wx-crm.png" alt=""></td>
<td align="left">钉钉：跳转到web</td>
</tr>
</tbody></table>
<h2 id="销帮帮"><a href="#销帮帮" class="headerlink" title="销帮帮"></a>销帮帮</h2><ul>
<li><a href="https://dingtalk.xbongbong.com//user/crmIndex.html" target="_blank" rel="noopener">网址</a><br><img src="/images_glob/dingtalk-weixin-oa/xbb-index.png" alt=""></li>
<li>使用手册<br><a href="/images_glob/dingtalk-weixin-oa/销帮帮CRM钉钉版管理员使用手册V3.4.pptx">销帮帮CRM钉钉版管理员使用手册V3.4.pptx</a><br><a href="/images_glob/dingtalk-weixin-oa/销帮帮CRM钉钉版用户使用手册V3.4.ppt">销帮帮CRM钉钉版用户使用手册V3.4.ppt</a></li>
<li>费用<br><img src="/images_glob/dingtalk-weixin-oa/xbb-price.png" alt=""></li>
</ul>
<h2 id="企微云"><a href="#企微云" class="headerlink" title="企微云"></a>企微云</h2><ul>
<li><a href="http://qy.do1.com.cn/qwy/manager/form_flow/main.jsp" target="_blank" rel="noopener">网址</a><br><img src="/images_glob/dingtalk-weixin-oa/qwy-index.png" alt=""></li>
<li>使用手册<br><a href="/images_glob/dingtalk-weixin-oa/企微云平台-微信办公第一品牌8.0.pdf">企微云平台-微信办公第一品牌8.0.pdf</a></li>
<li><a href="http://qy.do1.com.cn/qwy/qiweipublicity/companysrv/vip/vip_single_buy.jsp?tabCode=3" target="_blank" rel="noopener">免费版与收费版区别</a></li>
<li>费用:服务价格：100人（含）内2万元/年，超出部分，每50人增加2千元（不足50人按50人计算) ，超过2千人价格面议</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot学习笔记08--NoSql之MongoDB&amp;Redis</title>
    <url>/2016/12/30/spring-boot-study-nosql/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>Spring Boot对MongoDB的支持</li>
<li>Spring Boot对Redis的支持</li>
</ol>
<a id="more"></a>

<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="Spring-Boot对MongoDB的支持"><a href="#Spring-Boot对MongoDB的支持" class="headerlink" title="Spring Boot对MongoDB的支持"></a>Spring Boot对MongoDB的支持</h2><p><strong>pom</strong>中加入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义Repository需要继承于<strong>MongoRepository</strong>，与JPA类似，同样支持命名方法和@Query接口查询。</p>
<p>按方法名进行查询，规则与JPA一致，@Query接口查询就是mongo的原生查询语句的语法类似。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Person</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等于</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//And --- 等价于 SQL 中的 and 关键字；</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByNameAndAge</span><span class="params">(String name, Integer age)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Or --- 等价于 SQL 中的 or 关键字；</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByNameOrAge</span><span class="params">(String name, Integer age)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    <span class="function">Page&lt;Person&gt; <span class="title">findByNameNot</span><span class="params">(String name, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mongo原生查询语句</span></span><br><span class="line">    <span class="comment">//等于</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;'age':?0&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">withQueryFindByAge</span><span class="params">(Integer age)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大于</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;'age': &#123;'$gt' : ?0&#125;&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByAgeGreaterThan</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正则匹配name，age范围</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"&#123; 'name':&#123;'$regex':?0,'$options':'i'&#125;, 'age': &#123;'$gte':?1,'$lte':?2&#125;&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Person&gt; <span class="title">findByNameAndAgeRange</span><span class="params">(String name,<span class="keyword">int</span> ageFrom,<span class="keyword">int</span> ageTo,Pageable page)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正则匹配name，age范围，查询结果只封装name和age，当然默认ID是必须封装的</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"&#123; 'name':&#123;'$regex':?0,'$options':'i'&#125;, 'age': &#123;'$gte':?1,'$lte':?2&#125;&#125;"</span>,fields = <span class="string">"&#123; 'name' : 1, 'age' : 1&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Person&gt; <span class="title">findByNameAndAgeRangeShow</span><span class="params">(String name,<span class="keyword">int</span> ageFrom,<span class="keyword">int</span> ageTo,Pageable page)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>关于Mongo原生语句的说明可以参考：<a href="http://www.cnblogs.com/egger/archive/2013/06/14/3135847.html" target="_blank" rel="noopener">http://www.cnblogs.com/egger/archive/2013/06/14/3135847.html</a></p>
<hr>
<p>如果希望接管spring boot对mongo的自动配置，可以创建如下配置类，这样我们也可以像前文介绍的JPA绑定多数据源那样，绑定多个mongo数据源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mongo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClientURI;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.ServerAddress;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.MongoDbFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.SimpleMongoDbFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.repository.config.EnableMongoRepositories;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableMongoRepositories</span>(basePackages = &#123;<span class="string">"com.example.mongo.dao"</span>&#125;,mongoTemplateRef = <span class="string">"mongoTemplate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.data.mongodb.host&#125;"</span>)</span><br><span class="line">    String mongoHost;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.data.mongodb.uri&#125;"</span>)</span><br><span class="line">    String mongoUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoClient <span class="title">mongoClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MongoClient mongoClient = <span class="keyword">new</span> MongoClient(<span class="keyword">new</span> ServerAddress(mongoHost));</span><br><span class="line">        <span class="keyword">return</span> mongoClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoDbFactory <span class="title">mongoDbFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String database = <span class="keyword">new</span> MongoClientURI(mongoUrl).getDatabase();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleMongoDbFactory(mongoClient(),database);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"mongoTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoTemplate <span class="title">mongoTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MongoTemplate(mongoDbFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Spring-Boot对Redis的支持"><a href="#Spring-Boot对Redis的支持" class="headerlink" title="Spring Boot对Redis的支持"></a>Spring Boot对Redis的支持</h2><p><strong>pom</strong>中加入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后就可以通过<strong>@Autowired</strong>注解注入<strong>RedisTemplate</strong>，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.redis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.redis.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;Object,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"stringRedisTemplate"</span>)</span><br><span class="line">    ValueOperations&lt;String,String&gt; valueOperationsStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    ValueOperations&lt;Object,Object&gt; valueOperations;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String key,String value)</span></span>&#123;</span><br><span class="line">        valueOperationsStr.set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> valueOperationsStr.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveStudent</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        valueOperations.set(student.getId(),student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Student)valueOperations.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样，如果希望接管spring boot对redis的自动配置，可以创建如下自动配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.database&#125;"</span>)</span><br><span class="line">    String redisDatabase;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    String redisHost;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">connectionFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JedisConnectionFactory jedisConnectionFactory = <span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line">        jedisConnectionFactory.setDatabase(Integer.valueOf(redisDatabase));</span><br><span class="line">        jedisConnectionFactory.setHostName(redisHost);</span><br><span class="line">        <span class="keyword">return</span> jedisConnectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jackson2JsonRedisSerializer&lt;Object&gt; <span class="title">jackson2JsonRedisSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(</span><br><span class="line">                Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> jackson2JsonRedisSerializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于对存储内容转换为json格式</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">objRedisTemplate</span><span class="params">(JedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;Object, Object&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        redisTemplate.setDefaultSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"stringRedisTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(JedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate stringRedisTemplate = <span class="keyword">new</span> StringRedisTemplate(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>本文示例代码下载地址：<a href="https://github.com/hanqunfeng/SpringBootStudy" target="_blank" rel="noopener">https://github.com/hanqunfeng/SpringBootStudy</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot学习笔记07--DataSource的创建方法</title>
    <url>/2016/12/22/spring-boot-study-datasource/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>Spring Boot项目中DataSource的创建方法</li>
</ol>
<a id="more"></a>

<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="DataSource的创建方法"><a href="#DataSource的创建方法" class="headerlink" title="DataSource的创建方法"></a>DataSource的创建方法</h2><p>前面讲了很多Spring Boot数据访问方面的内容，在讲到自己扩展数据访问的时候，示例代码中给出的DataSource创建方式都是<strong>DriverManagerDataSource</strong>，比如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#datasource</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://localhost:3306/springboot1?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="string">spring.datasource.password=newpwd</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</span><br><span class="line">String driverClass;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</span><br><span class="line">String url;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</span><br><span class="line">String userName;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</span><br><span class="line">String passWord;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">    dataSource.setDriverClassName(driverClass);</span><br><span class="line">    dataSource.setUrl(url);</span><br><span class="line">    dataSource.setUsername(userName);</span><br><span class="line">    dataSource.setPassword(passWord);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果有多个数据源，就再创建多个<strong>DriverManagerDataSource</strong>。<br>一般生产项目中我们不会这样使用，通常可以使用<strong>org.apache.commons.dbcp.BasicDataSource</strong>。</p>
<hr>
<p>实际上Spring Boot为我们提供了简便的创建DataSource的方法：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#datasource</span></span><br><span class="line"><span class="comment">#需要执行数据源的类型</span></span><br><span class="line"><span class="string">spring.datasource.ds1.type=org.apache.tomcat.jdbc.pool.DataSource</span></span><br><span class="line"><span class="string">spring.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.ds1.url=jdbc:mysql://localhost:3306/springboot1?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="string">spring.datasource.ds1.username=root</span></span><br><span class="line"><span class="string">spring.datasource.ds1.password=newpwd</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.datasource.ds2.type=org.apache.tomcat.jdbc.pool.DataSource</span></span><br><span class="line"><span class="string">spring.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.ds2.url=jdbc:mysql://localhost:3306/springboot2?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="string">spring.datasource.ds2.username=root</span></span><br><span class="line"><span class="string">spring.datasource.ds2.password=newpwd</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"dataSource1"</span>)</span><br><span class="line"><span class="comment">//application.properties中属性名称的前缀</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.ds1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.ds2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目前，此种方式支持如下几种数据源类型：</p>
<p>“org.apache.tomcat.jdbc.pool.DataSource”, “com.zaxxer.hikari.HikariDataSource”, “org.apache.commons.dbcp.BasicDataSource”, “org.apache.commons.dbcp2.BasicDataSource”</p>
<p>使用哪种数据源类型，就要在项目中加入相应的jar依赖，<br>比如<strong>org.apache.tomcat.jdbc.pool.DataSource</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot学习笔记06--JPA</title>
    <url>/2016/12/21/spring-boot-study-jpa/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>Spring Boot项目中JPA的配置及使用方法</li>
<li>Spring Boot项目配置Spring Data JPA的方法</li>
<li>Spring Data JPA与Atomikos整合实现多数据源事务管理</li>
<li>扩展JPA的方法</li>
</ol>
<a id="more"></a>

<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JPA即Java Persistence API，是一个基于O/R映射的标准规范，该规范只负责定义规则的标准（注解或接口），而不需要提供具体实现，具体的实现交由软件提供商来实现，目前主要的JPA提供商为Hibernate，EclipseLink和OperJPA。</p>
<p><a href="http://projects.spring.io/spring-data-jpa/" target="_blank" rel="noopener">Spring Data JPA</a>是Spring Data的一个子项目，通过提供基于JPA的Repository来简化代码量。<br>其提供了一个<strong>org.springframework.data.jpa.repository.JpaRepository</strong>，我们的Repository只要继承该JpaRepository，即可享受到JPA带来的好处。</p>
<p>Spring Boot通过<strong>spring-boot-starter-data-jpa</strong>来提供对JPA的支持，Spring Boot默认的JPA实现者是Hibernate。</p>
<hr>
<p><strong>说明</strong><br>在讲解下面的内容前，我们先在数据库中创建一张表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建库1</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="string">`springboot1`</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`springboot1`</span>.<span class="string">`person`</span> (</span><br><span class="line">  <span class="string">`p_id`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`p_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">45</span>) <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`p_age`</span> <span class="built_in">INT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`p_id`</span>))</span><br><span class="line"><span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line"><span class="keyword">COMMENT</span> = <span class="string">'人员信息表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springboot1`</span>.<span class="string">`person`</span> (<span class="string">`p_id`</span>, <span class="string">`p_name`</span>, <span class="string">`p_age`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'张三'</span>, <span class="string">'20'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springboot1`</span>.<span class="string">`person`</span> (<span class="string">`p_id`</span>, <span class="string">`p_name`</span>, <span class="string">`p_age`</span>) <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'李四'</span>, <span class="string">'25'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springboot1`</span>.<span class="string">`person`</span> (<span class="string">`p_id`</span>, <span class="string">`p_name`</span>, <span class="string">`p_age`</span>) <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'王五'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springboot1`</span>.<span class="string">`person`</span> (<span class="string">`p_id`</span>, <span class="string">`p_name`</span>, <span class="string">`p_age`</span>) <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'王五'</span>, <span class="string">'18'</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Spring-Boot项目中使用JPA"><a href="#Spring-Boot项目中使用JPA" class="headerlink" title="Spring Boot项目中使用JPA"></a>Spring Boot项目中使用JPA</h2><p>创建项目时选择JPA依赖，或者手工将<strong>spring-boot-starter-data-jpa</strong>添加到pom中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时项目会自动开启如下两个自动配置类：</p>
<blockquote>
<p>JpaRepositoriesAutoConfiguration<br>HibernateJpaAutoConfiguration</p>
</blockquote>
<p><strong>application.properties</strong>中增加jpa相关配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#datasource</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://localhost:3306/springboot1?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="string">spring.datasource.password=newpwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#spring_jpa</span></span><br><span class="line"><span class="comment">#启动时会根据实体类生成数据表，或者更新表结构，不清空数据，开发阶段使用；validate：表结构稳定后使用，可用于正式环境；</span></span><br><span class="line"><span class="string">spring.jpa.hibernate.ddl-auto=update</span></span><br><span class="line"><span class="comment">#控制台打印sql</span></span><br><span class="line"><span class="string">spring.jpa.show-sql=true</span></span><br><span class="line"><span class="comment">#让控制器输出的json格式更美观</span></span><br><span class="line"><span class="string">spring.jackson.serialization.indent-output=true</span></span><br></pre></td></tr></table></figure>

<p>在项目中使用JPA时，只需要创建一个继承于<strong>JpaRepository</strong>的Repository接口，即可拥有<strong>JpaRepository</strong>及其父类中提供的全部数据访问方法。如果提供的方法不满足业务需要，可以按如下规则扩展数据方法。</p>
<p><strong>JpaRepository</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.data.jpa.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Example;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.NoRepositoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.PagingAndSortingRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.query.QueryByExampleExecutor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;, <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">save</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">saveAndFlush</span><span class="params">(S var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteInBatch</span><span class="params">(Iterable&lt;T&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAllInBatch</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">getOne</span><span class="params">(ID var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1, Sort var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义Repository：<strong>PersonRepository</strong>，并扩展数据访问方法，具体扩展方法参看示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.model.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Modifying;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.query.Param;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Person</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.以下方法基于属性名称和查询关键字，所以方法名称必须遵循命名规则，并且参数类型要与实体的参数类型一致。</span></span><br><span class="line">    <span class="comment">// 只用于查询方法，以下给出常用的示例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//等于</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPName</span><span class="params">(String PName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//And --- 等价于 SQL 中的 and 关键字；  </span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameAndPAge</span><span class="params">(String PName, Integer PAge)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Or --- 等价于 SQL 中的 or 关键字；  </span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameOrPAge</span><span class="params">(String PName, Integer PAge)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Between --- 等价于 SQL 中的 between 关键字；  </span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPAgeBetween</span><span class="params">(Integer min, Integer max)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//LessThan --- 等价于 SQL 中的 "&lt;"；  日期类型也可以使用Before关键字</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPAgeLessThan</span><span class="params">(Integer max)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//LessThanEqual --- 等价于 SQL 中的 "&lt;="；</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPAgeLessThanEqual</span><span class="params">(Integer max)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//GreaterThan --- 等价于 SQL 中的"&gt;"；日期类型也可以使用After关键字</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPAgeGreaterThan</span><span class="params">(Integer min)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//GreaterThanEqual --- 等价于 SQL 中的"&gt;="；</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPAgeGreaterThanEqual</span><span class="params">(Integer min)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IsNull --- 等价于 SQL 中的 "is null"；</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameIsNull</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IsNotNull --- 等价于 SQL 中的 "is not null"；</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameIsNotNull</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NotNull --- 与 IsNotNull 等价；  </span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameNotNull</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Like --- 等价于 SQL 中的 "like";</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameLike</span><span class="params">(String PName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NotLike --- 等价于 SQL 中的 "not like"；</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameNotLike</span><span class="params">(String PName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//OrderBy --- 等价于 SQL 中的 "order by"；</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameNotNullOrderByPAgeAsc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Not --- 等价于 SQL 中的 "！ ="；</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameNot</span><span class="params">(String PName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//In --- 等价于 SQL 中的 "in";</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameIn</span><span class="params">(String PName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NotIn --- 等价于 SQL 中的 "not in";</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByPNameNotIn</span><span class="params">(String PName)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Top --- 查询符合条件的前两条记录，等价与First关键字</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findTop2ByPName</span><span class="params">(String PName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.以下方法基于@Query注解，方法名称可以随意，可用于查询和更新方法，更新方法要设置@Modifying注解</span></span><br><span class="line">    <span class="comment">//使用命名参数</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"select p from Person p where p.pName = :name and p.pAge = :age"</span>)</span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">withNameAndAgeQuery</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span> Integer age)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用参数索引</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"select p from Person p where p.pName = ?1 and p.pAge = ?2"</span>)</span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">withNameAndAgeQuery2</span><span class="params">(String name, Integer age)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除操作，使用hql，如果要使用sql，需要增加nativeQuery = true</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"delete from Person where pId=?1"</span>)</span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deletePersonById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改操作</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"update Person set pName=?1 where pId=?2 "</span>)</span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updatePersonName</span><span class="params">(String name, Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入操作，使用sql操作</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"insert into person(p_name,p_age) value(?1,?2)"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertPersonByParam</span><span class="params">(String name, Integer age)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.以下方法实现分页查询功能，只需要在方法中增加Pageable pageable参数即可，返回结果为Page集合</span></span><br><span class="line">    <span class="function">Page&lt;Person&gt; <span class="title">findByPNameNot</span><span class="params">(String name, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用命名参数</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"select p from Person p where p.pName = :name "</span>)</span><br><span class="line">    <span class="function">Page&lt;Person&gt; <span class="title">withNameQueryPage</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, Pageable pageable)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>POJO实体对象：<strong>Person</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.model;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> javax.persistence.GenerationType.IDENTITY;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"person"</span></span><br><span class="line">        , catalog = <span class="string">"springboot1"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"p_id"</span>, unique = <span class="keyword">true</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer pId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"p_name"</span>, length = <span class="number">45</span>)</span><br><span class="line">    <span class="keyword">private</span> String pName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"p_age"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer pAge;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"pId="</span> + pId +</span><br><span class="line">                <span class="string">", pName='"</span> + pName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", pAge="</span> + pAge +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="测试演示"><a href="#测试演示" class="headerlink" title="测试演示"></a>测试演示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.dao.PersonRepository;</span><br><span class="line"><span class="keyword">import</span> com.example.model.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">Transactional</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JpaSingleDatasourceApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepository personRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">"王五"</span>;</span><br><span class="line">        List&lt;Person&gt; list = personRepository.findByPName(name);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Person person : list)&#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPNameAndPAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">"王五"</span>;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">        List&lt;Person&gt; list = personRepository.findByPNameAndPAge(name,age);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Person person : list)&#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPNameOrPAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">"王五"</span>;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">25</span>;</span><br><span class="line">        List&lt;Person&gt; list = personRepository.findByPNameOrPAge(name,age);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Person person : list)&#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findTop2ByPName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">"王五"</span>;</span><br><span class="line">        List&lt;Person&gt; list = personRepository.findTop2ByPName(name);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Person person : list)&#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withNameAndAgeQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">"王五"</span>;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">        List&lt;Person&gt; list = personRepository.withNameAndAgeQuery(name,age);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Person person : list)&#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withNameAndAgeQuery2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">"王五"</span>;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">        List&lt;Person&gt; list = personRepository.withNameAndAgeQuery2(name,age);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Person person : list)&#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletePersonById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> result = personRepository.deletePersonById(id);</span><br><span class="line">        System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePersonName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">        String name = <span class="string">"哈哈"</span>;</span><br><span class="line">        <span class="keyword">int</span> result = personRepository.updatePersonName(name,id);</span><br><span class="line">        System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertPersonByParam</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">        String name = <span class="string">"哈哈"</span>;</span><br><span class="line">        <span class="keyword">int</span> result = personRepository.insertPersonByParam(name,age);</span><br><span class="line">        System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPNameNot</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String name = <span class="string">"哈哈"</span>;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"pId"</span>);</span><br><span class="line">        <span class="comment">//查询第一页，按一页三行分页</span></span><br><span class="line">        Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">3</span>, sort);</span><br><span class="line"></span><br><span class="line">        Page&lt;Person&gt; pages = personRepository.findByPNameNot(name,pageable);</span><br><span class="line">        System.out.println(<span class="string">"pages.getTotalElements()"</span> + pages.getTotalElements());</span><br><span class="line">        System.out.println(<span class="string">"pages.getTotalPages()"</span> + pages.getTotalPages());</span><br><span class="line">        Iterator&lt;Person&gt; it=pages.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(<span class="string">"value:"</span>+((Person)it.next()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withNameQueryPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String name = <span class="string">"王五"</span>;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"pId"</span>);</span><br><span class="line">        <span class="comment">//查询第二页，按一页三行分页</span></span><br><span class="line">        Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">1</span>, <span class="number">3</span>, sort);</span><br><span class="line"></span><br><span class="line">        Page&lt;Person&gt; pages = personRepository.withNameQueryPage(name,pageable);</span><br><span class="line">        System.out.println(<span class="string">"pages.getTotalElements()"</span> + pages.getTotalElements());</span><br><span class="line">        System.out.println(<span class="string">"pages.getTotalPages()"</span> + pages.getTotalPages());</span><br><span class="line">        Iterator&lt;Person&gt; it=pages.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(<span class="string">"value:"</span>+((Person)it.next()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="Spring-Boot项目配置Spring-Data-JPA的方法"><a href="#Spring-Boot项目配置Spring-Data-JPA的方法" class="headerlink" title="Spring Boot项目配置Spring Data JPA的方法"></a>Spring Boot项目配置Spring Data JPA的方法</h2><p>如果不想依赖于<strong>spring-boot-starter-data-jpa</strong>，我们依然可以通过配置类来实现Spring Boot对Spring Data JPA的支持。</p>
<p><strong>pom</strong>替换依赖<br>这里说明一下，实际上我们可以不用替换掉<strong>spring-boot-starter-data-jpa</strong>的依赖，替换掉的好处仅仅是减少对不需要的jar的依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.transaction<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hibernate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义配置类：<strong>DataSourceConfig</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.jpa.HibernatePersistenceProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaVendorAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.Database;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="comment">//开启Spring Data JPA的支持</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.example.dao"</span>, entityManagerFactoryRef = <span class="string">"entityManagerFactory"</span>, transactionManagerRef = <span class="string">"transactionManager"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</span><br><span class="line">    String driverClass;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</span><br><span class="line">    String passWord;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClass);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(userName);</span><br><span class="line">        dataSource.setPassword(passWord);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  jpa事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JpaTransactionManager jpaTransactionManager = <span class="keyword">new</span> JpaTransactionManager();</span><br><span class="line">        jpaTransactionManager.setDataSource(dataSource());</span><br><span class="line">        jpaTransactionManager.setEntityManagerFactory(entityManagerFactory().getObject());</span><br><span class="line">        <span class="keyword">return</span> jpaTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JpaVendorAdapter <span class="title">jpaVendorAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HibernateJpaVendorAdapter adapter = <span class="keyword">new</span> HibernateJpaVendorAdapter();</span><br><span class="line">        adapter.setShowSql(<span class="keyword">true</span>);</span><br><span class="line">        adapter.setDatabase(Database.MYSQL);</span><br><span class="line">        adapter.setGenerateDdl(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalContainerEntityManagerFactoryBean entityManager = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</span><br><span class="line">        entityManager.setDataSource(dataSource());</span><br><span class="line">        entityManager.setJpaVendorAdapter(jpaVendorAdapter());</span><br><span class="line">        entityManager.setPackagesToScan(<span class="string">"com.example.model"</span>);<span class="comment">// entity package</span></span><br><span class="line">        entityManager.setPersistenceProviderClass(HibernatePersistenceProvider<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> entityManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>项目启动类中要关闭jpa的自动配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>,<span class="title">JpaRepositoriesAutoConfiguration</span>.<span class="title">class</span>, <span class="title">HibernateJpaAutoConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JpaSingleDatasourceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(JpaSingleDatasourceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="Spring-Data-JPA与Atomikos整合实现多数据源事务管理"><a href="#Spring-Data-JPA与Atomikos整合实现多数据源事务管理" class="headerlink" title="Spring Data JPA与Atomikos整合实现多数据源事务管理"></a>Spring Data JPA与Atomikos整合实现多数据源事务管理</h2><p>spring-data-jpa虽说默认使用的是Hibernate，但是其与Atomikos整合方式与Hibernate略有不同。</p>
<p><strong>pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atomikos-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.transaction<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- hibernate --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>application.properties</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#datasource</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://localhost:3306/springboot1?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="string">spring.datasource.password=newpwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#datasource2</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name2=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.url2=jdbc:mysql://localhost:3306/springboot2?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="string">spring.datasource.username2=root</span></span><br><span class="line"><span class="string">spring.datasource.password2=newpwd</span></span><br></pre></td></tr></table></figure>


<p><strong>MainConfig</strong>：用于注册Atomikos事务管理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atomikos.icatch.jta.UserTransactionImp;</span><br><span class="line"><span class="keyword">import</span> com.atomikos.icatch.jta.UserTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.jta.JtaTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.transaction.TransactionManager;</span><br><span class="line"><span class="keyword">import</span> javax.transaction.UserTransaction;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"userTransaction"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserTransaction <span class="title">userTransaction</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        UserTransactionImp userTransactionImp = <span class="keyword">new</span> UserTransactionImp();</span><br><span class="line">        userTransactionImp.setTransactionTimeout(<span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">return</span> userTransactionImp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"atomikosTransactionManager"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionManager <span class="title">atomikosTransactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        UserTransactionManager userTransactionManager = <span class="keyword">new</span> UserTransactionManager();</span><br><span class="line">        userTransactionManager.setForceShutdown(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> userTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="meta">@DependsOn</span>(&#123; <span class="string">"userTransaction"</span>, <span class="string">"atomikosTransactionManager"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        UserTransaction userTransaction = userTransaction();</span><br><span class="line">        TransactionManager atomikosTransactionManager = atomikosTransactionManager();</span><br><span class="line">        JtaTransactionManager jtaTransactionManager = <span class="keyword">new</span> JtaTransactionManager(userTransaction, atomikosTransactionManager);</span><br><span class="line">        jtaTransactionManager.setAllowCustomIsolationLevels(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> jtaTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上面三个都认识，下面说一下这个bean</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"atomikosJtaPlatfom"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AtomikosJtaPlatfom <span class="title">atomikosJtaPlatfom</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AtomikosJtaPlatfom atomikosJtaPlatfom = <span class="keyword">new</span> AtomikosJtaPlatfom();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            atomikosJtaPlatfom.setTm(atomikosTransactionManager());</span><br><span class="line">            atomikosJtaPlatfom.setUt(userTransaction());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> atomikosJtaPlatfom;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>配置JPA的LocalContainerEntityManagerFactoryBean时候，如果要使其能够支持JTA事务，则在配置其<strong>JpaProperties</strong>时需要为其指定如下参数：</p>
<blockquote>
<p>hibernate.transaction.jta.platform<br>hibernate.current_session_context_class<br>hibernate.transaction.factory_class</p>
</blockquote>
<p>后面我们配置LocalContainerEntityManagerFactoryBean的时候会看到相应的配置，<br>这里要说的是，<code>hibernate.transaction.jta.platform</code>需要指定<code>org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform</code>的实现类，其主要功能就是要绑定<strong>javax.transaction.TransactionManager</strong>和<strong>javax.transaction.UserTransaction</strong>。</p>
<p>spring-data-jpa没有提供该实现类，但是hibernate提供了许多实现类，spring boot也提供了一个实现类–<strong>SpringJtaPlatform</strong>，<br>但是这些实现类都是通过构造函数绑定<strong>javax.transaction.TransactionManager</strong>和<strong>javax.transaction.UserTransaction</strong>，而没有提供缺省的构造方法，这就导致通过属性指定<code>hibernate.transaction.jta.platform</code>时，spring不能初始化该实现类（可能是我还没有搞明白吧）。</p>
<p>所以，可以自己创建一个实现类，并通过set方法来绑定<strong>javax.transaction.TransactionManager</strong>和<strong>javax.transaction.UserTransaction</strong>。<br>这就是<strong>AtomikosJtaPlatfom</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.transaction.TransactionManager;</span><br><span class="line"><span class="keyword">import</span> javax.transaction.UserTransaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomikosJtaPlatfom</span> <span class="keyword">extends</span> <span class="title">AbstractJtaPlatform</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UserTransaction ut;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TransactionManager tm;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> TransactionManager <span class="title">locateTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> UserTransaction <span class="title">locateUserTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserTransaction <span class="title">getUt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUt</span><span class="params">(UserTransaction ut)</span> </span>&#123;</span><br><span class="line">        AtomikosJtaPlatfom.ut = ut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionManager <span class="title">getTm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTm</span><span class="params">(TransactionManager tm)</span> </span>&#123;</span><br><span class="line">        AtomikosJtaPlatfom.tm = tm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来需要在配置类中注册<strong>LocalContainerEntityManagerFactoryBean</strong>，<br>由于<em>@EnableJpaRepositories</em>注解不能在同一个配置类上声明两次，所以就按数据源进行分别设置：</p>
<p><strong>JpaConfigDs1</strong>：数据源1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atomikos.jdbc.AtomikosDataSourceBean;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.jdbc2.optional.MysqlXADataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaVendorAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.Database;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="comment">//指定数据源1的Repository路径，数据源1的entityManagerFactory，事务是公共事务</span></span><br><span class="line"><span class="meta">@EnableJpaRepositoryies</span>(basePackages = <span class="string">"com.example.dao.ds1"</span>, entityManagerFactoryRef = <span class="string">"entityManagerFactory"</span>, transactionManagerRef = <span class="string">"transactionManager"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfigDs1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</span><br><span class="line">    String driverClass;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</span><br><span class="line">    String passWord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dataSource init"</span>);</span><br><span class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</span><br><span class="line">        mysqlXaDataSource.setUrl(url);</span><br><span class="line">        mysqlXaDataSource.setPassword(passWord);</span><br><span class="line">        mysqlXaDataSource.setUser(userName);</span><br><span class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource"</span>);</span><br><span class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</span><br><span class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jpaVendorAdapter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JpaVendorAdapter <span class="title">jpaVendorAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"jpaVendorAdapter init"</span>);</span><br><span class="line">        HibernateJpaVendorAdapter adapter = <span class="keyword">new</span> HibernateJpaVendorAdapter();</span><br><span class="line">        adapter.setShowSql(<span class="keyword">true</span>);</span><br><span class="line">        adapter.setDatabase(Database.MYSQL);</span><br><span class="line">        adapter.setDatabasePlatform(<span class="string">"org.hibernate.dialect.MySQLDialect"</span>);</span><br><span class="line">        adapter.setGenerateDdl(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactory"</span>)</span><br><span class="line">    <span class="meta">@DependsOn</span>(&#123;<span class="string">"atomikosJtaPlatfom"</span>&#125;) <span class="comment">//需要先注册atomikosJtaPlatfom</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"entityManagerFactory init"</span>);</span><br><span class="line">        LocalContainerEntityManagerFactoryBean entityManager = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</span><br><span class="line"></span><br><span class="line">        entityManager.setJpaVendorAdapter(jpaVendorAdapter());</span><br><span class="line">        <span class="comment">// entity package</span></span><br><span class="line">        entityManager.setPackagesToScan(<span class="string">"com.example.model.ds1"</span>);</span><br><span class="line">        entityManager.setJtaDataSource(dataSource());</span><br><span class="line"></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();       </span><br><span class="line">        properties.put(<span class="string">"hibernate.dialect"</span>, <span class="string">"org.hibernate.dialect.MySQLDialect"</span>);</span><br><span class="line">        properties.put(<span class="string">"hibernate.show_sql"</span>, <span class="string">"true"</span>);</span><br><span class="line">        properties.put(<span class="string">"hibernate.format_sql"</span>, <span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jta设置</span></span><br><span class="line">        properties.put(<span class="string">"hibernate.current_session_context_class"</span>, <span class="string">"jta"</span>);</span><br><span class="line">        properties.put(<span class="string">"hibernate.transaction.factory_class"</span>, <span class="string">"org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory"</span>);</span><br><span class="line">        <span class="comment">//这里指定我们自己创建的AtomikosJtaPlatfom</span></span><br><span class="line">        properties.put(<span class="string">"hibernate.transaction.jta.platform"</span>,<span class="string">"com.example.AtomikosJtaPlatfom"</span>);</span><br><span class="line">        entityManager.setJpaProperties(properties);</span><br><span class="line">        <span class="keyword">return</span> entityManager;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>JpaConfigDs2</strong>：数据源2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atomikos.jdbc.AtomikosDataSourceBean;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.jdbc2.optional.MysqlXADataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaVendorAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.Database;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.example.dao.ds2"</span>, entityManagerFactoryRef = <span class="string">"entityManagerFactory2"</span>, transactionManagerRef = <span class="string">"transactionManager"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfigDs2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name2&#125;"</span>)</span><br><span class="line">    String driverClass;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url2&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username2&#125;"</span>)</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password2&#125;"</span>)</span><br><span class="line">    String passWord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dataSource2 init"</span>);</span><br><span class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</span><br><span class="line">        mysqlXaDataSource.setUrl(url);</span><br><span class="line">        mysqlXaDataSource.setPassword(passWord);</span><br><span class="line">        mysqlXaDataSource.setUser(userName);</span><br><span class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource2"</span>);</span><br><span class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</span><br><span class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jpaVendorAdapter2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JpaVendorAdapter <span class="title">jpaVendorAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"jpaVendorAdapter2 init"</span>);</span><br><span class="line">        HibernateJpaVendorAdapter adapter = <span class="keyword">new</span> HibernateJpaVendorAdapter();</span><br><span class="line">        adapter.setShowSql(<span class="keyword">true</span>);</span><br><span class="line">        adapter.setDatabase(Database.MYSQL);</span><br><span class="line">        adapter.setDatabasePlatform(<span class="string">"org.hibernate.dialect.MySQLDialect"</span>);</span><br><span class="line">        adapter.setGenerateDdl(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactory2"</span>)</span><br><span class="line">    <span class="meta">@DependsOn</span>(&#123;<span class="string">"atomikosJtaPlatfom"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"entityManagerFactory2 init"</span>);</span><br><span class="line">        LocalContainerEntityManagerFactoryBean entityManager = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        entityManager.setJpaVendorAdapter(jpaVendorAdapter());</span><br><span class="line">        entityManager.setPackagesToScan(<span class="string">"com.example.model.ds2"</span>);<span class="comment">// entity package</span></span><br><span class="line">        entityManager.setJtaDataSource(dataSource());</span><br><span class="line"></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">"hibernate.transaction.jta.platform"</span>,<span class="string">"com.example.AtomikosJtaPlatfom"</span>);</span><br><span class="line"></span><br><span class="line">        properties.put(<span class="string">"hibernate.dialect"</span>, <span class="string">"org.hibernate.dialect.MySQLDialect"</span>);</span><br><span class="line">        properties.put(<span class="string">"hibernate.show_sql"</span>, <span class="string">"true"</span>);</span><br><span class="line">        properties.put(<span class="string">"hibernate.format_sql"</span>, <span class="string">"true"</span>);</span><br><span class="line">        properties.put(<span class="string">"hibernate.current_session_context_class"</span>, <span class="string">"jta"</span>);</span><br><span class="line">        properties.put(<span class="string">"hibernate.transaction.factory_class"</span>, <span class="string">"org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory"</span>);</span><br><span class="line"></span><br><span class="line">        entityManager.setJpaProperties(properties);</span><br><span class="line">        <span class="keyword">return</span> entityManager;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其它方面与单数据源使用JPA没有区别，这里就不罗列代码了。</p>
<hr>
<h2 id="扩展JPA的方法"><a href="#扩展JPA的方法" class="headerlink" title="扩展JPA的方法"></a>扩展JPA的方法</h2><p>上面我们介绍过，一般情况下我们的Repository接口继承JpaRepository，所以可以默认使用JpaRepository提供的所有方法，如果提供的方法不满足需求时，可以在自己的Repository中通过命名规则或者@Query注解等实现方法的扩展。那么，我们如果希望将一些自己扩展公共的方法放在父类中，以便我们所有的Repository都能拥有该扩展功能，该如何实现呢？</p>
<p>本例只举例说明，实现的功能为接收查询条件的分页查询，查询时按传递实体对象的属性进行处理，如果是字符串就按模糊匹配，否则就按精确匹配。</p>
<h3 id="定义父类接口–BaseJpaRepository"><a href="#定义父类接口–BaseJpaRepository" class="headerlink" title="定义父类接口–BaseJpaRepository"></a>定义父类接口–BaseJpaRepository</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span> <span class="comment">//说明这不是一个需要被扫描到的Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseJpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Page&lt;T&gt; <span class="title">findByAuto</span><span class="params">(T example, Pageable pageable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建实现类–BaseJpaRepositoryImpl"><a href="#创建实现类–BaseJpaRepositoryImpl" class="headerlink" title="创建实现类–BaseJpaRepositoryImpl"></a>创建实现类–BaseJpaRepositoryImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseJpaRepositoryImpl</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">SimpleJpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">implements</span> <span class="title">BaseJpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过构造方法初始化EntityManager</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EntityManager entityManager;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseJpaRepositoryImpl</span><span class="params">(Class&lt;T&gt; domainClass, EntityManager entityManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(domainClass, entityManager);</span><br><span class="line">        <span class="keyword">this</span>.entityManager = entityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体方法实现，这里使用了一个自定义工具类BaseSpecs</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;T&gt; <span class="title">findByAuto</span><span class="params">(T example, Pageable pageable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> findAll(BaseSpecs.byAuto(entityManager,example),pageable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BaseSpecs的byAuto方法负责封装查询对象Specification，按传递实体对象的属性进行处理，如果是字符串就按模糊匹配，否则就按精确匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseSpecs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Specification&lt;T&gt; <span class="title">byAuto</span><span class="params">(<span class="keyword">final</span> EntityManager entityManager, <span class="keyword">final</span> T example)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;T&gt; type = (Class&lt;T&gt;) example.getClass();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Specification&lt;T&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;T&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                List&lt;Predicate&gt; predicateList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                EntityType&lt;T&gt; entityType = entityManager.getMetamodel().entity(type);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(Attribute&lt;T,?&gt; attribute : entityType.getDeclaredAttributes())&#123;</span><br><span class="line">                    Object attrValue = getValue(example,attribute);</span><br><span class="line">                    <span class="keyword">if</span>(attrValue != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(attribute.getJavaType() == String<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(!StringUtils.isEmpty(attrValue))&#123;</span><br><span class="line">                                predicateList.add(criteriaBuilder.like(root.get(attribute(entityType,attribute.getName(),String<span class="class">.<span class="keyword">class</span>)),<span class="title">pattern</span>((<span class="title">String</span>)<span class="title">attrValue</span>)))</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            predicateList.add(criteriaBuilder.equal(root.get(attribute(entityType,attribute.getName(),attrValue.getClass())),attrValue));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> predicateList.isEmpty()?criteriaBuilder.conjunction():criteriaBuilder.and(toArray(predicateList));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> &lt;T&gt; <span class="function">Object <span class="title">getValue</span><span class="params">(T example,Attribute&lt;T,?&gt; attr)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ReflectionUtils.getField((Field)attr.getJavaMember(),example);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> &lt;E,T&gt; <span class="function">SingularAttribute&lt;T,E&gt; <span class="title">attribute</span><span class="params">(EntityType&lt;T&gt; entityType,String fieldName,Class&lt;E&gt; fieldClass)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> entityType.getDeclaredSingularAttribute(fieldName,fieldClass);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> Predicate[] toArray(List&lt;Predicate&gt; predicateList)&#123;</span><br><span class="line">                Predicate[] array = predicateList.toArray(<span class="keyword">new</span> Predicate[predicateList.size()]);</span><br><span class="line">                <span class="keyword">return</span> array;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">private</span> String <span class="title">pattern</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%"</span> + str + <span class="string">"%"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<p><strong>说明</strong><br>当我们的Repository实现的是JpaRepository的时候，<em>Spring-data-jpa</em>会为我们动态使用JpaRepository的实现类<em>SimpleJpaRepository</em>，这也是为什么我们只需要创建接口而不需要提供实现类。</p>
<p>这里，我们创建了新的父类接口<em>BaseJpaRepository</em>，并为其提供了实现类<em>BaseJpaRepositoryImpl</em>，所以我们要告诉<em>Spring-data-jpa</em>要使用我们自己的实现类，而不能去使用<em>SimpleJpaRepository</em>，所以我们要改写<em>JpaRepositoryFactoryBean</em>；</p>
<p>创建一个<strong>BaseRepositoryFactoryBean</strong>继承于<em>JpaRepositoryFactoryBean</em>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseRepositoryFactoryBean</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">S</span>, <span class="title">ID</span>&gt;, <span class="title">S</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;   <span class="keyword">extends</span> <span class="title">JpaRepositoryFactoryBean</span>&lt;<span class="title">T</span>,<span class="title">S</span>,<span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> RepositoryFactorySupport <span class="title">createRepositoryFactory</span><span class="params">(EntityManager entityManager)</span>    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseRepositoryFactory(entityManager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseRepositoryFactory</span> <span class="keyword">extends</span> <span class="title">JpaRepositoryFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseRepositoryFactory</span><span class="params">(EntityManager entityManager)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entityManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定实现类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T, ID extends Serializable&gt; SimpleJpaRepository&lt;?, ?&gt; getTargetRepository(RepositoryInformation information, EntityManager entityManager) &#123;</span><br><span class="line">        BaseJpaRepositoryImpl customRepository = <span class="keyword">new</span> BaseJpaRepositoryImpl&lt;T,ID&gt;((Class&lt;T&gt;)information.getDomainType(),entityManager);</span><br><span class="line">        <span class="keyword">return</span> customRepository;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定实现类类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; getRepositoryBaseClass(RepositoryMetadata metadata)     </span><br><span class="line">        <span class="keyword">return</span> BaseJpaRepositoryImpl<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并且在<em>@EnableJpaRepositories</em>注解中进行指定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.example.dao"</span>, entityManagerFactoryRef = <span class="string">"entityManagerFactory"</span>, transactionManagerRef = <span class="string">"transactionManager"</span>,repositoryFactoryBeanClass=BaseRepositoryFactoryBean<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JpaConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//………………</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="自定义Repository继承BaseJpaRepository"><a href="#自定义Repository继承BaseJpaRepository" class="headerlink" title="自定义Repository继承BaseJpaRepository"></a>自定义Repository继承BaseJpaRepository</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">BaseJpaRepository</span>&lt;<span class="title">Person</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//………依然可以在该接口中对功能进行扩展………</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">Transactional</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JpaExtendApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepository personRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByAuto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setpName(<span class="string">"王五"</span>);</span><br><span class="line">        person.setpAge(<span class="number">18</span>);</span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"pId"</span>);</span><br><span class="line">        <span class="comment">//查询第一页，按一页三行分页</span></span><br><span class="line">        Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">3</span>, sort);</span><br><span class="line">        Page&lt;Person&gt; list = personRepository.findByAuto(person,pageable);</span><br><span class="line">        <span class="keyword">for</span>(Person p:list)&#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>本文示例代码下载地址：<a href="https://github.com/hanqunfeng/SpringBootStudy" target="_blank" rel="noopener">https://github.com/hanqunfeng/SpringBootStudy</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot学习笔记05--Mybatis+通用Mapper+分页插件</title>
    <url>/2016/12/20/spring-boot-study-mybatis/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>Spring Boot项目中，Mybatis+通用Mapper+分页插件的配置方法</li>
</ol>
<a id="more"></a>

<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前文已经对Spring Boot中各种类型的数据访问做了说明，本文是对Spring Boot中使用Mybatis的扩展，重点说明如何在mybatis中集成通用Mapper和分页插件。</p>
<p>本文代码是在上文中讲到的mybatis单数据源配置的基础上进行扩展。</p>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p><strong>pom</strong>中增加通用Mapper和分页插件的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通用Mapper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>MyBatisConfig</strong>：在SqlSessionFactory中增加分页插件配置，因为通用Mapper是基于注解的，所以这里去掉xml的加载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">    bean.setDataSource(dataSource());</span><br><span class="line"></span><br><span class="line">    bean.setTypeAliasesPackage(<span class="string">"com.example.pojo"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页插件设置</span></span><br><span class="line">    PageHelper pageHelper = <span class="keyword">new</span> PageHelper();</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.setProperty(<span class="string">"reasonable"</span>, <span class="string">"true"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"supportMethodsArguments"</span>, <span class="string">"true"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"returnPageInfo"</span>, <span class="string">"check"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"params"</span>, <span class="string">"count=countSql"</span>);</span><br><span class="line">    pageHelper.setProperties(properties);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加分页插件</span></span><br><span class="line">    bean.setPlugins(<span class="keyword">new</span> Interceptor[]&#123;pageHelper&#125;);</span><br><span class="line"></span><br><span class="line">    ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//基于注解扫描Mapper，不需配置xml路径</span></span><br><span class="line">        <span class="comment">//bean.setMapperLocations(resolver.getResources("classpath:mapper/*.xml"));</span></span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>MyBatisMapperScannerConfig</strong><br>注意这里使用的是<strong>tk.mybatis.spring.mapper.MapperScannerConfigurer</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//必须在MyBatisConfig注册后再加载MapperScannerConfigurer，否则会报错</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(MyBatisConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyBatisMapperScannerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory"</span>);</span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"com.example.mapper"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化扫描器的相关配置，这里我们要创建一个Mapper的父类</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">"mappers"</span>, <span class="string">"com.example.MyMapper"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"notEmpty"</span>, <span class="string">"false"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"IDENTITY"</span>, <span class="string">"MYSQL"</span>);</span><br><span class="line"></span><br><span class="line">        mapperScannerConfigurer.setProperties(properties);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MyMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.MySqlMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">MySqlMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">    <span class="comment">//FIXME 特别注意，该接口不能被扫描到，否则会出错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>PersonMapper</strong>：实体mapper继承<em>MyMapper</em>即可，业务方法中我们就可以使用通用Mapper提供的各种方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.MyMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.pojo.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonMapper</span> <span class="keyword">extends</span> <span class="title">MyMapper</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下方法用于演示，当通用Mapper不能买足需求时，可以自己扩展相应的方法</span></span><br><span class="line">    <span class="comment">//不允许查询参数为空的情况</span></span><br><span class="line">    <span class="meta">@Select</span>(&#123;</span><br><span class="line">            <span class="string">"select"</span>,</span><br><span class="line">            <span class="string">"p_id, p_name, p_age"</span>,</span><br><span class="line">            <span class="string">"from person"</span>,</span><br><span class="line">            <span class="string">"where  p_age between #&#123;startAge&#125; and #&#123;endAge&#125;"</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(column=<span class="string">"p_id"</span>, property=<span class="string">"pId"</span>, jdbcType= JdbcType.INTEGER, id=<span class="keyword">true</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column=<span class="string">"p_name"</span>, property=<span class="string">"pName"</span>, jdbcType=JdbcType.VARCHAR),</span><br><span class="line">            <span class="meta">@Result</span>(column=<span class="string">"p_age"</span>, property=<span class="string">"pAge"</span>, jdbcType=JdbcType.INTEGER)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">queryListByParam</span><span class="params">(Person person)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//允许查询参数为空的情况</span></span><br><span class="line">    <span class="meta">@SelectProvider</span>(type = PersonSqlProvider<span class="class">.<span class="keyword">class</span>,<span class="title">method</span> </span>= <span class="string">"selectSelective"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(column=<span class="string">"p_id"</span>, property=<span class="string">"pId"</span>, jdbcType= JdbcType.INTEGER, id=<span class="keyword">true</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column=<span class="string">"p_name"</span>, property=<span class="string">"pName"</span>, jdbcType=JdbcType.VARCHAR),</span><br><span class="line">            <span class="meta">@Result</span>(column=<span class="string">"p_age"</span>, property=<span class="string">"pAge"</span>, jdbcType=JdbcType.INTEGER)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">queryListByParamSelective</span><span class="params">(Person person)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.ibatis.jdbc.SqlBuilder.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonSqlProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectSelective</span><span class="params">(Person record)</span></span>&#123;</span><br><span class="line">        BEGIN();</span><br><span class="line"></span><br><span class="line">        SELECT(<span class="string">"p_id, p_name, p_age"</span>);</span><br><span class="line">        FROM(<span class="string">"person"</span>);</span><br><span class="line">        WHERE(<span class="string">"1=1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(record.getStartAge()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            AND();</span><br><span class="line">            WHERE(<span class="string">"p_age &gt;= #&#123;startAge&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(record.getEndAge()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            AND();</span><br><span class="line">            WHERE(<span class="string">"p_age &lt;= #&#123;endAge&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SQL();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里要注意，使用通用<strong>Mapper</strong>时，实体类必须有一个叫做<strong>id</strong>的整型主键，另外，为了方便使用分页插件，要在每个实体对象中定义两个属性–<em>page</em>和<em>rows</em>，我们可以把这些通用的属性放到父类中，比如我们创建一个父类：BaseEntity</p>
<p><strong>BaseEntity</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Transient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="comment">//注意，如果是老的项目，表中的主键可能不叫做id，这时可以在父类中去掉这个属性，改在子类中实现</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>) </span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> Integer page = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> Integer rows = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pName;</span><br><span class="line">    <span class="keyword">private</span> Integer pAge;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下属性用于演示范围查询</span></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> Integer startAge;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> Integer endAge; </span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="测试演示"><a href="#测试演示" class="headerlink" title="测试演示"></a>测试演示</h3><p><strong>业务方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mapper.PersonMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED, readOnly = <span class="keyword">false</span>, rollbackFor = &#123;Exception<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonMapper personMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personMapper.insert(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">selectByPrimaryKey</span><span class="params">(Integer pId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personMapper.selectByPrimaryKey(pId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getPagePersonList</span><span class="params">(Person person, RowBounds rowBounds)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> personMapper.selectByRowBounds(person,rowBounds);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getPagePersonList</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (person.getPage() != <span class="keyword">null</span> &amp;&amp; person.getRows() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            PageHelper.startPage(person.getPage(), person.getRows(), <span class="string">"p_id"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> personMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">queryListByParam</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (person.getPage() != <span class="keyword">null</span> &amp;&amp; person.getRows() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            PageHelper.startPage(person.getPage(), person.getRows(), <span class="string">"p_id"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> personMapper.queryListByParam(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">queryListByParamSelective</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (person.getPage() != <span class="keyword">null</span> &amp;&amp; person.getRows() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            PageHelper.startPage(person.getPage(), person.getRows(), <span class="string">"p_id"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> personMapper.queryListByParamSelective(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>单元测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> com.example.service.PersonService;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">Transactional</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MybatisMapperPagehelperApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PersonService personService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByPrimaryKey</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = personService.selectByPrimaryKey(<span class="number">1</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setpName(<span class="string">"王五"</span>);</span><br><span class="line">        person.setpAge(<span class="number">18</span>);</span><br><span class="line">        System.out.println(personService.insert(person));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Person&gt; list = personService.getAllPersonList();</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Person person : list)&#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPagePersonList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setpName(<span class="string">"王五"</span>);</span><br><span class="line">        <span class="comment">//指定limit和offset</span></span><br><span class="line">        List&lt;Person&gt; list = personService.getPagePersonList(person,<span class="keyword">new</span> RowBounds(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Person p : list)&#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPagePersonList2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//每页2行，查询第二页</span></span><br><span class="line">        person.setPage(<span class="number">2</span>);</span><br><span class="line">        person.setRows(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; list = personService.getPagePersonList(person);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Person p : list)&#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryListByParam</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//每页2行，查询第二页</span></span><br><span class="line">        person.setPage(<span class="number">2</span>);</span><br><span class="line">        person.setRows(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//查询年龄在15到22之间的数据</span></span><br><span class="line">        person.setStartAge(<span class="number">15</span>);</span><br><span class="line">        person.setEndAge(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; list = personService.queryListByParam(person);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Person p : list)&#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryListByParamSelective</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//每页2行，查询第一页</span></span><br><span class="line">        person.setPage(<span class="number">1</span>);</span><br><span class="line">        person.setRows(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询年龄大于等于15的数据</span></span><br><span class="line">        person.setStartAge(<span class="number">15</span>);</span><br><span class="line">        <span class="comment">//person.setEndAge(22);</span></span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; list = personService.queryListByParamSelective(person);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Person p : list)&#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>本文示例代码下载地址：<a href="https://github.com/hanqunfeng/SpringBootStudy" target="_blank" rel="noopener">https://github.com/hanqunfeng/SpringBootStudy</a></p>
<p>项目参考：<a href="https://github.com/abel533/MyBatis-Spring-Boot" target="_blank" rel="noopener">https://github.com/abel533/MyBatis-Spring-Boot</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot学习笔记04--数据访问</title>
    <url>/2016/12/17/spring-boot-study-data/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>Spring Boot对JDBC的支持</li>
<li>Spring Boot项目多数据源的配置</li>
<li>Spring Boot的事务管理</li>
<li>Spring Boot项目多数据源的事务管理</li>
<li>Spring Boot项目中使用Hibernate4的方法</li>
<li>Spring Boot项目中使用Mybatis的方法</li>
</ol>
<a id="more"></a>

<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Boot针对企业开发场景提供了各种『开箱即用』的<strong>spring-boot-starter-xxx</strong>自动配置依赖模块，这就使得我们开发Spring应用更加快速和高效。比如我们前面创建web项目时使用到的<strong>spring-boot-starter-web</strong>。</p>
<p>这些<strong>spring-boot-starter-xxx</strong>不但包含了对该功能的全部依赖包，同时也提供了该功能的自动配置类。我们本节要讨论的『数据访问』就是基于这些<strong>spring-boot-starter-xxx</strong>的自动配置依赖模块。</p>
<hr>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><strong>jdk版本</strong>：java version “1.8.0_31”<br><strong>数据库</strong>：10.1.16-MariaDB<br><strong>脚本</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建库1</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="string">`springboot1`</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`springboot1`</span>.<span class="string">`person`</span> (</span><br><span class="line">  <span class="string">`p_id`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`p_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">45</span>) <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`p_age`</span> <span class="built_in">INT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`p_id`</span>))</span><br><span class="line"><span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line"><span class="keyword">COMMENT</span> = <span class="string">'人员信息表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springboot1`</span>.<span class="string">`person`</span> (<span class="string">`p_id`</span>, <span class="string">`p_name`</span>, <span class="string">`p_age`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'张三'</span>, <span class="string">'20'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springboot1`</span>.<span class="string">`person`</span> (<span class="string">`p_id`</span>, <span class="string">`p_name`</span>, <span class="string">`p_age`</span>) <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'李四'</span>, <span class="string">'25'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建库2</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="string">`springboot2`</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`springboot2`</span>.<span class="string">`person`</span> (</span><br><span class="line">  <span class="string">`p_id`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`p_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">45</span>) <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`p_age`</span> <span class="built_in">INT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`p_id`</span>))</span><br><span class="line"><span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line"><span class="keyword">COMMENT</span> = <span class="string">'人员信息表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springboot2`</span>.<span class="string">`person`</span> (<span class="string">`p_id`</span>, <span class="string">`p_name`</span>, <span class="string">`p_age`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'张三'</span>, <span class="string">'20'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springboot2`</span>.<span class="string">`person`</span> (<span class="string">`p_id`</span>, <span class="string">`p_name`</span>, <span class="string">`p_age`</span>) <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'李四'</span>, <span class="string">'25'</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Spring-Boot对JDBC的支持"><a href="#Spring-Boot对JDBC的支持" class="headerlink" title="Spring Boot对JDBC的支持"></a>Spring Boot对JDBC的支持</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>新建一个springboot项目，依赖选择web和jdbc<br><img src="/images_glob/spring-boot-study-data/jdbc1.png" alt=""></p>
<p>项目创建成功后查看pom，会看到添加了<strong>spring-boot-starter-jdbc</strong>的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h3><p>在pom中增加MySQL依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<em>application.properties</em>中添加数据源配置信息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#datasource</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://localhost:3306/springboot1?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="string">spring.datasource.password=newpwd</span></span><br></pre></td></tr></table></figure>

<h3 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h3><p>本例只做简单演示，所以只创建如下3个类，并用一个单元测试类进行测试<br>Model:<strong>Person</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter and setter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dao:<strong>PersonDao</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">savePerson</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"INSERT INTO `springboot1`.`person` (`p_name`, `p_age`) VALUES (?, ?)"</span>;</span><br><span class="line">        <span class="keyword">int</span> result = jdbcTemplate.update(sql,<span class="keyword">new</span> Object[]&#123;person.getName(),person.getAge()&#125;);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from person s"</span>;</span><br><span class="line">        List&lt;Person&gt; list = jdbcTemplate.query(sql,<span class="keyword">new</span> PersonMapper());</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PersonMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.setId(resultSet.getLong(<span class="string">"p_id"</span>));</span><br><span class="line">            person.setName(resultSet.getString(<span class="string">"p_name"</span>));</span><br><span class="line">            person.setAge(resultSet.getInt(<span class="string">"p_age"</span>));</span><br><span class="line">            <span class="keyword">return</span> person;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Service:<strong>PersonService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonDao personDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">savePserson</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> personDao.savePerson(person);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personDao.getAllPersonList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单元测试:<strong>SpringbootjdbcdemoApplicationTests</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringbootjdbcdemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonService personService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(<span class="string">"王五"</span>);</span><br><span class="line">        person.setAge(<span class="number">18</span>);</span><br><span class="line">        <span class="keyword">int</span> result = personService.savePserson(person);</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Person&gt; list = personService.getAllPersonList();</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="keyword">for</span>(Person person : list)&#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<p><strong>说明</strong><br>实际上，项目加入<strong>spring-boot-starter-jdbc</strong>的依赖后，即可在项目代码中通过@Autowired自动注入JdbcTemplate。而数据源的配置则在<em>application.properties</em>中进行配置。</p>
<p>如果不想使用<strong>spring-boot-starter-jdbc</strong>带来的默认依赖和自动配置，那么采用如下的方式，效果是一样的。</p>
<hr>
<h3 id="使用自定义的DataSourceConfig"><a href="#使用自定义的DataSourceConfig" class="headerlink" title="使用自定义的DataSourceConfig"></a>使用自定义的DataSourceConfig</h3><p>修改pom中的依赖，去掉对<strong>spring-boot-starter-jdbc</strong>的依赖，并加入对<strong>spring-jdbc</strong>的依赖，这样我们就失去了对JDBC的自动配置功能了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动类中去掉对<strong>DataSourceAutoConfiguration</strong>的自动配置支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude=&#123;DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringbootjdbcdemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootjdbcdemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建<strong>DataSourceConfig</strong>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</span><br><span class="line">    String driverClass;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</span><br><span class="line">    String passWord;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClass);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(userName);</span><br><span class="line">        dataSource.setPassword(passWord);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其它代码不需要任何修改，运行效果一致。</p>
<hr>
<p><strong>说明</strong><br>为什么SpringBoot为我们提供了<strong>spring-boot-starter-jdbc</strong>的自动配置解决方案，我们还要自己配置呢，这是因为自动配置并不是那么的强大，<strong>spring-boot-starter-jdbc</strong>只能支持单一的数据源配置，如果项目中需要关联多个数据源，就需要我们自己处理了。</p>
<p>比如我们在环境准备中创建了两个数据库，接下来我们在项目中增加多数据源的配置。</p>
<hr>
<p>在<em>application.properties</em>中添加数据源配置信息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#datasource2</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name2=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.url2=jdbc:mysql://localhost:3306/springboot2?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="string">spring.datasource.username2=root</span></span><br><span class="line"><span class="string">spring.datasource.password2=newpwd</span></span><br></pre></td></tr></table></figure>

<p>然后在<strong>DataSourceConfig</strong>配置类中增加如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name2&#125;"</span>)</span><br><span class="line">String driverClass2;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url2&#125;"</span>)</span><br><span class="line">String url2;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username2&#125;"</span>)</span><br><span class="line">String userName2;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password2&#125;"</span>)</span><br><span class="line">String passWord2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">    dataSource.setDriverClassName(driverClass2);</span><br><span class="line">    dataSource.setUrl(url2);</span><br><span class="line">    dataSource.setUsername(userName2);</span><br><span class="line">    dataSource.setPassword(passWord2);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource2());</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时需要在Dao中将@Autowired注解替换成<code>@Resource(name = &quot;jdbcTemplate&quot;)</code>，来明确指定要使用哪一个jdbcTemplate对象。</p>
<hr>
<p><strong>说明</strong><br>关于如何在项目中使用Hibernate4框架，可以参考:<a href="http://hanqunfeng.iteye.com/blog/2114975" target="_blank" rel="noopener">SpringMVC4零配置</a></p>
<hr>
<h2 id="Spring-Boot的事务管理"><a href="#Spring-Boot的事务管理" class="headerlink" title="Spring Boot的事务管理"></a>Spring Boot的事务管理</h2><h3 id="JDBC事务管理"><a href="#JDBC事务管理" class="headerlink" title="JDBC事务管理"></a>JDBC事务管理</h3><p>如果我们项目中使用的是JDBC的数据访问方案，并且容器中只注册了一个<strong>DataSource</strong>，那么SpringBoot就会为我们开启<strong>DataSourceTransactionManagerAutoConfiguration</strong>的自动配置类，其会在容器中注册一个<strong>DataSourceTransactionManager</strong>事务管理器，同时会开启对注解式事务<strong>@Transactional</strong>的支持。感兴趣的可以看一下<strong>DataSourceTransactionManagerAutoConfiguration</strong>的源码。</p>
<hr>
<p><strong>@Transactional</strong>是Spring框架提供的，配置方法参考下面的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般我们会在业务实现类上声明事务注解</span></span><br><span class="line"><span class="comment">//当前表示需要在事务中运行，可以执行更新和删除操作，遇到异常则回滚</span></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED, readOnly = <span class="keyword">false</span>, rollbackFor = &#123; Exception<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">PersonService</span></span>&#123;</span><br><span class="line">    <span class="comment">//方法上也可以标注事务注解，方法上注解声明会覆盖类上的</span></span><br><span class="line">    <span class="comment">//一般查询操作readOnly设置为true，增删该操作设置为false</span></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不加@Transactiona注解，则使用类上的设置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">savePserson</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果在测试类上声明<strong>@Transactional</strong>，则会开启自动回滚，不会产生脏数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">Transactional</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringbootjdbcdemoApplicationTests</span> </span>&#123;…………&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>如果希望自己配置事务，可以在配置类中增加事务管理器的配置，比如，我们在<strong>DataSourceConfig</strong>中增加如下配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//启用注解事务管理，使用CGLib代理</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</span><br><span class="line">    String driverClass;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</span><br><span class="line">    String passWord;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClass);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(userName);</span><br><span class="line">        dataSource.setPassword(passWord);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<p><strong>说明</strong><br>上面的方法只是针对单一数据源进行事务管理的，但是项目中经常会用到多数据源的情况，那么要如何进行事务管理呢？</p>
<hr>
<p>我们上文讲到了可以在项目中通过配置类，自己配置多个数据源，并通过<strong>DataSourceConfig</strong>进行了演示，接下来我们添加多个事务管理器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//启用注解事务管理，使用CGLib代理</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</span><br><span class="line">    String driverClass;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</span><br><span class="line">    String passWord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name2&#125;"</span>)</span><br><span class="line">    String driverClass2;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url2&#125;"</span>)</span><br><span class="line">    String url2;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username2&#125;"</span>)</span><br><span class="line">    String userName2;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password2&#125;"</span>)</span><br><span class="line">    String passWord2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClass);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(userName);</span><br><span class="line">        dataSource.setPassword(passWord);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClass2);</span><br><span class="line">        dataSource.setUrl(url2);</span><br><span class="line">        dataSource.setUsername(userName2);</span><br><span class="line">        dataSource.setPassword(passWord2);</span><br><span class="line">        System.out.println(url2);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource2());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource2());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时，我们必须在<strong>@Transactional</strong>注解中指定要使用哪一个事务管理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(transactionManager = <span class="string">"transactionManager"</span>,propagation = Propagation.REQUIRED, readOnly = <span class="keyword">false</span>, rollbackFor = &#123; Exception<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonDao personDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">savePserson</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personDao.savePerson(person);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Transactional</span>(transactionManager = <span class="string">"transactionManager"</span>,readOnly = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersonList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personDao.getAllPersonList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(transactionManager = <span class="string">"transactionManager2"</span>,propagation = Propagation.REQUIRED, readOnly = <span class="keyword">false</span>, rollbackFor = &#123; Exception<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">int</span> <span class="title">savePserson2</span>(<span class="title">Person</span> <span class="title">person</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personDao.savePerson2(person);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Transactional</span>(transactionManager = <span class="string">"transactionManager2"</span>,readOnly = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersonList2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personDao.getAllPersonList2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>说明</strong><br>这样做并不美好，不能对多个数据源同时进行事务管理，比如，我们在一个业务方法里同时对两个数据源进行操作，我们希望只要有一个发生异常，则两个数据源的数据都进行回滚。</p>
<p>那要怎么做呢，我们接着往下看。</p>
<hr>
<h3 id="多数据源事务管理"><a href="#多数据源事务管理" class="headerlink" title="多数据源事务管理"></a>多数据源事务管理</h3><p>这里推荐使用<strong><a href="https://www.atomikos.com" target="_blank" rel="noopener">Atomikos</a></strong>，Atomikos支持Mysql、Oracle等多种数据库，可与多种ORM框架集成，如MyBatis、JPA、Hibernate等等，同时支持各种容器下JNDI的多数据源管理。Atomikos官网提供了各种情况下使用Atomikos的Example，本文只对使用JDBC时的情况进行说明。</p>
<p>目前maven中央仓库的最新版本是4.0.4，使用Atomikos，需要在项目中加入如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atomikos-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.transaction<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>对<strong>DataSourceConfig</strong>进行改造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atomikos.icatch.jta.UserTransactionImp;</span><br><span class="line"><span class="keyword">import</span> com.atomikos.icatch.jta.UserTransactionManager;</span><br><span class="line"><span class="keyword">import</span> com.atomikos.jdbc.AtomikosDataSourceBean;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.jdbc2.optional.MysqlXADataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.jta.JtaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> javax.transaction.TransactionManager;</span><br><span class="line"><span class="keyword">import</span> javax.transaction.UserTransaction;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//启用注解事务管理，使用CGLib代理</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</span><br><span class="line">    String driverClass;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</span><br><span class="line">    String passWord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name2&#125;"</span>)</span><br><span class="line">    String driverClass2;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url2&#125;"</span>)</span><br><span class="line">    String url2;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username2&#125;"</span>)</span><br><span class="line">    String userName2;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password2&#125;"</span>)</span><br><span class="line">    String passWord2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"userTransaction"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserTransaction <span class="title">userTransaction</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        UserTransactionImp userTransactionImp = <span class="keyword">new</span> UserTransactionImp();</span><br><span class="line">        userTransactionImp.setTransactionTimeout(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">return</span> userTransactionImp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"atomikosTransactionManager"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionManager <span class="title">atomikosTransactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        UserTransactionManager userTransactionManager = <span class="keyword">new</span> UserTransactionManager();</span><br><span class="line">        userTransactionManager.setForceShutdown(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> userTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="meta">@DependsOn</span>(&#123; <span class="string">"userTransaction"</span>, <span class="string">"atomikosTransactionManager"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        UserTransaction userTransaction = userTransaction();</span><br><span class="line">        TransactionManager atomikosTransactionManager = atomikosTransactionManager();</span><br><span class="line">        JtaTransactionManager jtaTransactionManager = <span class="keyword">new</span> JtaTransactionManager(userTransaction, atomikosTransactionManager);</span><br><span class="line">        jtaTransactionManager.setAllowCustomIsolationLevels(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> jtaTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dataSource init"</span>);</span><br><span class="line">        <span class="comment">//Oracle:oracle.jdbc.xa.client.OracleXADataSource</span></span><br><span class="line">        <span class="comment">//Druid:com.alibaba.druid.pool.xa.DruidXADataSource</span></span><br><span class="line">        <span class="comment">//Postgresql:org.postgresql.xa.PGXADataSource</span></span><br><span class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</span><br><span class="line">        mysqlXaDataSource.setUrl(url);</span><br><span class="line">        mysqlXaDataSource.setPassword(passWord);</span><br><span class="line">        mysqlXaDataSource.setUser(userName);</span><br><span class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource"</span>);</span><br><span class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</span><br><span class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span> xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dataSource2 init"</span>);</span><br><span class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</span><br><span class="line">        mysqlXaDataSource.setUrl(url2);</span><br><span class="line">        mysqlXaDataSource.setPassword(passWord2);</span><br><span class="line">        mysqlXaDataSource.setUser(userName2);</span><br><span class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource2"</span>);</span><br><span class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</span><br><span class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span> xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"jdbcTemplate2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource2());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>项目编译路径下可以创建一个<strong>jta.properties</strong>文件，用于对Atomikos的相关属性进行配置，不过也可以不加这个文件，因为所有的属性都有默认值。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">com.atomikos.icatch.enable_logging=true</span></span><br><span class="line"><span class="string">com.atomikos.icatch.force_shutdown_on_vm_exit=false</span></span><br><span class="line"><span class="string">com.atomikos.icatch.automatic_resource_registration=true</span></span><br><span class="line"><span class="string">com.atomikos.icatch.checkpoint_interval=500</span></span><br><span class="line"><span class="string">com.atomikos.icatch.serial_jta_transactions=true</span></span><br><span class="line"><span class="string">com.atomikos.icatch.default_jta_timeout=10000</span></span><br><span class="line"><span class="string">com.atomikos.icatch.max_timeout=300000</span></span><br><span class="line"><span class="string">com.atomikos.icatch.log_base_dir=./</span></span><br><span class="line"><span class="string">com.atomikos.icatch.threaded_2pc=false</span></span><br><span class="line"><span class="string">com.atomikos.icatch.max_actives=50</span></span><br><span class="line"><span class="string">com.atomikos.icatch.log_base_name=tmlog</span></span><br><span class="line"><span class="string">java.naming.factory.initial=com.sun.jndi.rmi.registry.RegistryContextFactory</span></span><br><span class="line"><span class="string">com.atomikos.icatch.client_demarcation=false</span></span><br><span class="line"><span class="string">java.naming.provider.url=rmi://localhost:1099</span></span><br><span class="line"><span class="string">com.atomikos.icatch.rmi_export_class=none</span></span><br><span class="line"><span class="string">com.atomikos.icatch.trust_client_tm=false</span></span><br><span class="line"><span class="string">com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000</span></span><br><span class="line"><span class="string">com.atomikos.icatch.recovery_delay=$&#123;com.atomikos.icatch.default_jta_timeout&#125;</span></span><br><span class="line"><span class="string">com.atomikos.icatch.oltp_max_retries=5</span></span><br><span class="line"><span class="string">com.atomikos.icatch.oltp_retry_interval=10000</span></span><br><span class="line"><span class="string">com.atomikos.icatch.allow_subtransactions=true</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Spring-Boot中Atomikos与Hibernate4多数据源集成方法"><a href="#Spring-Boot中Atomikos与Hibernate4多数据源集成方法" class="headerlink" title="Spring Boot中Atomikos与Hibernate4多数据源集成方法"></a>Spring Boot中Atomikos与Hibernate4多数据源集成方法</h2><p>Atomikos与Hibernate4集成方法与JDBC类似，我们在pom中加入hibernate的依赖，并对<strong>DataSourceConfig</strong>进行改造<br><strong>pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>DataSourceConfig</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atomikos.icatch.jta.UserTransactionImp;</span><br><span class="line"><span class="keyword">import</span> com.atomikos.icatch.jta.UserTransactionManager;</span><br><span class="line"><span class="keyword">import</span> com.atomikos.jdbc.AtomikosDataSourceBean;</span><br><span class="line"><span class="keyword">import</span> com.example.hibernate.CP_HibernateDAO;</span><br><span class="line"><span class="keyword">import</span> com.example.hibernate.impl.CP_Hibernate4DAOImpl;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.jdbc2.optional.MysqlXADataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.hibernate4.LocalSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.jta.JtaTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> javax.transaction.TransactionManager;</span><br><span class="line"><span class="keyword">import</span> javax.transaction.UserTransaction;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</span><br><span class="line">    String driverClass;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</span><br><span class="line">    String passWord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name2&#125;"</span>)</span><br><span class="line">    String driverClass2;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url2&#125;"</span>)</span><br><span class="line">    String url2;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username2&#125;"</span>)</span><br><span class="line">    String userName2;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password2&#125;"</span>)</span><br><span class="line">    String passWord2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"userTransaction"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserTransaction <span class="title">userTransaction</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        UserTransactionImp userTransactionImp = <span class="keyword">new</span> UserTransactionImp();</span><br><span class="line">        userTransactionImp.setTransactionTimeout(<span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">return</span> userTransactionImp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"atomikosTransactionManager"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionManager <span class="title">atomikosTransactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        UserTransactionManager userTransactionManager = <span class="keyword">new</span> UserTransactionManager();</span><br><span class="line">        userTransactionManager.setForceShutdown(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> userTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="meta">@DependsOn</span>(&#123; <span class="string">"userTransaction"</span>, <span class="string">"atomikosTransactionManager"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        UserTransaction userTransaction = userTransaction();</span><br><span class="line">        TransactionManager atomikosTransactionManager = atomikosTransactionManager();</span><br><span class="line">        JtaTransactionManager jtaTransactionManager = <span class="keyword">new</span> JtaTransactionManager(userTransaction, atomikosTransactionManager);</span><br><span class="line">        jtaTransactionManager.setAllowCustomIsolationLevels(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jtaTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</span><br><span class="line">        mysqlXaDataSource.setUrl(url);</span><br><span class="line">        mysqlXaDataSource.setPassword(passWord);</span><br><span class="line">        mysqlXaDataSource.setUser(userName);</span><br><span class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource"</span>);</span><br><span class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</span><br><span class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</span><br><span class="line">        mysqlXaDataSource.setUrl(url2);</span><br><span class="line">        mysqlXaDataSource.setPassword(passWord2);</span><br><span class="line">        mysqlXaDataSource.setUser(userName2);</span><br><span class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource2"</span>);</span><br><span class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</span><br><span class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span> xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalSessionFactoryBean <span class="title">localSessionFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sessionFactory"</span>);</span><br><span class="line">        LocalSessionFactoryBean sessionFactory = <span class="keyword">new</span> LocalSessionFactoryBean();</span><br><span class="line">        sessionFactory.setDataSource(dataSource());</span><br><span class="line">        <span class="comment">//扫描实体对象的目录，不同的数据源，实体要存放不同的目录</span></span><br><span class="line">        String[] packagesToScan = <span class="keyword">new</span> String[] &#123; <span class="string">"com.example.model.ds1"</span> &#125;;</span><br><span class="line">        sessionFactory.setPackagesToScan(packagesToScan);</span><br><span class="line"></span><br><span class="line">        Properties hibernateProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.dialect"</span>, <span class="string">"org.hibernate.dialect.MySQLDialect"</span>);</span><br><span class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.show_sql"</span>, <span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启Hibernate对JTA的支持</span></span><br><span class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.current_session_context_class"</span>, <span class="string">"jta"</span>);</span><br><span class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.transaction.factory_class"</span>, <span class="string">"org.hibernate.transaction.JTATransactionFactory"</span>);</span><br><span class="line"></span><br><span class="line">        sessionFactory.setHibernateProperties(hibernateProperties);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sessionFactory;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sessionFactory2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalSessionFactoryBean <span class="title">localSessionFactoryBean2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sessionFactory2"</span>);</span><br><span class="line">        LocalSessionFactoryBean sessionFactory = <span class="keyword">new</span> LocalSessionFactoryBean();</span><br><span class="line">        sessionFactory.setDataSource(dataSource2());</span><br><span class="line">        <span class="comment">//扫描实体对象的目录，不同的数据源，实体要存放不同的目录</span></span><br><span class="line">        String[] packagesToScan = <span class="keyword">new</span> String[] &#123; <span class="string">"com.example.model.ds2"</span> &#125;;</span><br><span class="line">        sessionFactory.setPackagesToScan(packagesToScan);</span><br><span class="line"></span><br><span class="line">        Properties hibernateProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.dialect"</span>, <span class="string">"org.hibernate.dialect.MySQLDialect"</span>);</span><br><span class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.show_sql"</span>, <span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启Hibernate对JTA的支持</span></span><br><span class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.current_session_context_class"</span>, <span class="string">"jta"</span>);</span><br><span class="line">        hibernateProperties.setProperty(<span class="string">"hibernate.transaction.factory_class"</span>, <span class="string">"org.hibernate.transaction.JTATransactionFactory"</span>);</span><br><span class="line"></span><br><span class="line">        sessionFactory.setHibernateProperties(hibernateProperties);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sessionFactory;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"hibernateDAO"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CP_HibernateDAO <span class="title">hibernate4Dao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hibernateDAO"</span>);</span><br><span class="line">        CP_Hibernate4DAOImpl dao = <span class="keyword">new</span> CP_Hibernate4DAOImpl();</span><br><span class="line">        <span class="comment">//绑定SessionFactory</span></span><br><span class="line">        dao.setSessionFactory(localSessionFactoryBean().getObject());</span><br><span class="line">        <span class="keyword">return</span> dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"hibernateDAO2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CP_HibernateDAO <span class="title">hibernate4Dao2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hibernateDAO2"</span>);</span><br><span class="line">        CP_Hibernate4DAOImpl dao = <span class="keyword">new</span> CP_Hibernate4DAOImpl();</span><br><span class="line">        <span class="comment">//绑定SessionFactory2</span></span><br><span class="line">        dao.setSessionFactory(localSessionFactoryBean2().getObject());</span><br><span class="line">        <span class="keyword">return</span> dao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"p_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"p_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"p_age"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CP_HibernateDAO</strong>是我们自定义的Hibernate的通用Dao接口，其定义的方法和和实现类<strong>CP_Hibernate4DAOImpl</strong>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hibernate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CP_HibernateDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;?&gt; findAll(Class&lt;?&gt; entityClazz, String... str);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object entity)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hibernate.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.hibernate.CP_HibernateDAO;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.criterion.DetachedCriteria;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CP_Hibernate4DAOImpl</span> <span class="keyword">implements</span> <span class="title">CP_HibernateDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionFactory <span class="title">getSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绑定SessionFactory</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSessionFactory</span><span class="params">(SessionFactory sessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sessionFactory = sessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Session <span class="title">getHibernateSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session session = sessionFactory.openSession();</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @see com.example.hibernate.CP_HibernateDAO#findAll()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;?&gt; findAll(Class&lt;?&gt; entityClazz, String... str) &#123;</span><br><span class="line">        DetachedCriteria dc = DetachedCriteria.forClass(entityClazz);</span><br><span class="line">        List&lt;?&gt; list = findAllByCriteria(dc);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @see com.example.hibernate.CP_HibernateDAO#save(java.lang.Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object entity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        getHibernateSession().save(entity);</span><br><span class="line">        <span class="comment">//注意这里一定要执行flush方法</span></span><br><span class="line">        getHibernateSession().flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;?&gt; findAllByCriteria(DetachedCriteria detachedCriteria) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Criteria criteria = detachedCriteria</span><br><span class="line">                .getExecutableCriteria(getHibernateSession());</span><br><span class="line">        <span class="keyword">return</span> criteria.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>说明</strong><br>需要注意两点：</p>
<ol>
<li>session必须使用sessionFactory.openSession()的方式获得，不能使用sessionFactory.getCurrentSession()。</li>
<li>更新操作必须调用session.flush()方法。</li>
</ol>
<p>Spring配置文件的方式，可以参考：<a href="http://hanqunfeng.iteye.com/blog/2121427" target="_blank" rel="noopener">Spring4+Hibernate4+Atomikos3.3多数据源事务管理</a></p>
<hr>
<h2 id="Spring-Boot中Mybitas的使用"><a href="#Spring-Boot中Mybitas的使用" class="headerlink" title="Spring Boot中Mybitas的使用"></a>Spring Boot中Mybitas的使用</h2><p>创建项目时，我们可以选择<strong>mybatis-spring-boot-starter</strong>依赖，这样可以激活SpringBoot对Mybatis的自动配置类。</p>
<p><strong>pom</strong>中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>application.properties</strong>中添加mybaits的自动配置属性，可以查看<strong>MybatisProperties</strong>了解可以配置哪些属性</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mapper配置文件路径，如果是基于注解的形式可以不需要配置该属性</span></span><br><span class="line"><span class="string">mybatis.mapper-locations=classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>Mapper接口上要配置<strong>@Mapper</strong>注解，因为<strong>mybatis-spring-boot-starter</strong>的自动配置会扫描<strong>@Mapper</strong>注解来注册Mapper接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//………………</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时同样可以使用<strong>@Transactional</strong>注解</p>
<hr>
<p><strong>说明</strong><br>可以使用maven的mybatis-generator插件自动生成代码，参考<a href="http://hanqunfeng.iteye.com/admin/blogs/2328749" target="_blank" rel="noopener">maven插件–MyBatis自动生成代码</a></p>
<hr>
<p><strong>mybatis-spring-boot-starter</strong>不利于扩展，所以还是我们自己实现个mybitas的配置类吧。</p>
<p><strong>pom</strong>中去掉<strong>mybatis-spring-boot-starter</strong>的依赖，增加mybatis的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">    &lt;version&gt;1.1.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建<strong>MyBatisConfig</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</span><br><span class="line">    String driverClass;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</span><br><span class="line">    String passWord;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClass);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(userName);</span><br><span class="line">        dataSource.setPassword(passWord);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加XML目录</span></span><br><span class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bean.setMapperLocations(resolver.getResources(<span class="string">"classpath:mapper/*.xml"</span>));</span><br><span class="line">            <span class="keyword">return</span> bean.getObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">annotationDrivenTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MyBatisMapperScannerConfig</strong>，基于包扫描Mapper，此时不需要配置<strong>@Mapper</strong>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//必须在MyBatisConfig注册后再加载MapperScannerConfigurer，否则会报错</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(MyBatisConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyBatisMapperScannerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory"</span>);</span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"com.example.mapper"</span>);</span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关闭<strong>DataSourceAutoConfiguration</strong>，因为这里我们配置了数据源，所以需要关闭该自动配置，另外，<strong>MybatisAutoConfiguration</strong>也是基于<strong>DataSourceAutoConfiguration</strong>的，所以关闭了<strong>DataSourceAutoConfiguration</strong>也就同时关闭了<strong>MybatisAutoConfiguration</strong>。</p>
<hr>
<h2 id="Spring-Boot中Atomikos与Mybatis多数据源集成方法"><a href="#Spring-Boot中Atomikos与Mybatis多数据源集成方法" class="headerlink" title="Spring Boot中Atomikos与Mybatis多数据源集成方法"></a>Spring Boot中Atomikos与Mybatis多数据源集成方法</h2><p><strong>pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atomikos-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.transaction<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>MyBatisConfig</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</span><br><span class="line">    String driverClass;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</span><br><span class="line">    String passWord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name2&#125;"</span>)</span><br><span class="line">    String driverClass2;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url2&#125;"</span>)</span><br><span class="line">    String url2;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username2&#125;"</span>)</span><br><span class="line">    String userName2;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password2&#125;"</span>)</span><br><span class="line">    String passWord2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"userTransaction"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserTransaction <span class="title">userTransaction</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        UserTransactionImp userTransactionImp = <span class="keyword">new</span> UserTransactionImp();</span><br><span class="line">        userTransactionImp.setTransactionTimeout(<span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">return</span> userTransactionImp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"atomikosTransactionManager"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionManager <span class="title">atomikosTransactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        UserTransactionManager userTransactionManager = <span class="keyword">new</span> UserTransactionManager();</span><br><span class="line">        userTransactionManager.setForceShutdown(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> userTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="meta">@DependsOn</span>(&#123; <span class="string">"userTransaction"</span>, <span class="string">"atomikosTransactionManager"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        UserTransaction userTransaction = userTransaction();</span><br><span class="line">        TransactionManager atomikosTransactionManager = atomikosTransactionManager();</span><br><span class="line">        JtaTransactionManager jtaTransactionManager = <span class="keyword">new</span> JtaTransactionManager(userTransaction, atomikosTransactionManager);</span><br><span class="line">        jtaTransactionManager.setAllowCustomIsolationLevels(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> jtaTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dataSource init"</span>);</span><br><span class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</span><br><span class="line">        mysqlXaDataSource.setUrl(url);</span><br><span class="line">        mysqlXaDataSource.setPassword(passWord);</span><br><span class="line">        mysqlXaDataSource.setUser(userName);</span><br><span class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource"</span>);</span><br><span class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</span><br><span class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource2"</span>, initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dataSource2 init"</span>);</span><br><span class="line">        MysqlXADataSource mysqlXaDataSource = <span class="keyword">new</span> MysqlXADataSource();</span><br><span class="line">        mysqlXaDataSource.setUrl(url2);</span><br><span class="line">        mysqlXaDataSource.setPassword(passWord2);</span><br><span class="line">        mysqlXaDataSource.setUser(userName2);</span><br><span class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        AtomikosDataSourceBean xaDataSource = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(<span class="string">"dataSource2"</span>);</span><br><span class="line">        xaDataSource.setMinPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setPoolSize(<span class="number">10</span>);</span><br><span class="line">        xaDataSource.setMaxPoolSize(<span class="number">30</span>);</span><br><span class="line">        xaDataSource.setBorrowConnectionTimeout(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setReapTimeout(<span class="number">20</span>);</span><br><span class="line">        xaDataSource.setMaxIdleTime(<span class="number">60</span>);</span><br><span class="line">        xaDataSource.setMaintenanceInterval(<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span> xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基于xml式Mapper</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加Mapper配置文件的目录</span></span><br><span class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bean.setMapperLocations(resolver.getResources(<span class="string">"classpath:mapper/ds1/*.xml"</span>));</span><br><span class="line">            <span class="keyword">return</span> bean.getObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactoryBean());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基于注解式Mapper</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource2());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> bean.getObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionTemplate2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactoryBean2());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MyBatisMapperScannerConfig</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//必须在MyBatisConfig注册后再加载MapperScannerConfigurer，否则会报错</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(MyBatisConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyBatisMapperScannerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">        <span class="comment">//绑定datasorce的sqlSessionFactory</span></span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory"</span>);</span><br><span class="line">        <span class="comment">//扫描ds1目录来注册Mapper接口</span></span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"com.example.mapper.ds1"</span>);</span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">        <span class="comment">//绑定datasorce2的sqlSessionFactory</span></span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory2"</span>);</span><br><span class="line">        <span class="comment">//扫描ds2目录来注册Mapper接口</span></span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"com.example.mapper.ds2"</span>);</span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里要说明的是，如果两个数据源下的Mapper起了相同的类名，虽然他们在不同的包路径下，启动也会报错了，因为默认注册Mapper时使用的是类名称（不含包名），此时可以在Mapper上加上<strong>@Component(“personMapper”)</strong>注解</p>
<hr>
<h2 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h2><p>Spring Boot为我们提供了大量的<strong>spring-boot-starter-xxx</strong>来加快我们的开发流程，创建项目时就可以看到可供选择的各种<strong>spring-boot-starter-xxx</strong>，那么这么多的<strong>spring-boot-starter-xxx</strong>，我们是否都需要了解呢，如果项目中需要用到某一个功能，是否就应该加入这个<strong>spring-boot-starter-xxx</strong>呢？</p>
<p>笔者人为，<strong>spring-boot-starter-xxx</strong>提供的完整jar包依赖和自动配置固然很好，但是当我们要在项目中加入某一个功能时，作为开发人员，是应该清楚的知道该功能的依赖关系和配置逻辑的，所以并不一定需要引入SpringBoot的<strong>spring-boot-starter-xxx</strong>，而且SpringBoot对这些<strong>spring-boot-starter-xxx</strong>做的自动配置，如果我们并不熟悉和十分清楚，往往会给我们开发人员造成不明所以的困扰，所以，笔者建议，在对SpringBoot提供的某一个<strong>spring-boot-starter-xxx</strong>所提供的功能并不十分清楚时，还是使用配置类的方式吧。</p>
<p>还有，由于某些自动配置类的激活是根据项目中是否包含某个class或容器中是否注册了某个bean，所以笔者建议，如果项目中引入了新的jar包，或者手工注册了某个bean，都要通过debug的方式查看是否开启了某个自动配置。</p>
<p>另外，本文代码只是为了辅助说明，比如<strong>DriverManagerDataSource</strong>正式环境不建议使用，请更换为其它数据源，比如<strong>BasicDataSource</strong>。</p>
<p>本文示例代码下载地址：<a href="https://github.com/hanqunfeng/SpringBootStudy" target="_blank" rel="noopener">https://github.com/hanqunfeng/SpringBootStudy</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot学习笔记03--深入了解SpringBoot的启动过程</title>
    <url>/2016/12/13/spring-boot-study-springapplication/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>SpringApplication的作用及运行过程</li>
<li>SpringBootServletInitializer的作用及运行过程</li>
</ol>
<p><strong>PS:本节内容略显枯燥，如果对SpringBoot的启动过程不感兴趣，可以略过。</strong></p>
<a id="more"></a>

<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="深入了解SpringApplication"><a href="#深入了解SpringApplication" class="headerlink" title="深入了解SpringApplication"></a>深入了解SpringApplication</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootWebDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootWebDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就是SpringBoot的启动入口，通过前面的学习我们大体上了解了<strong>@SpringBootApplication</strong>的作用，接下来我们来认识一下<strong>SpringApplication</strong>。<br><a href="http://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/SpringApplication.html" target="_blank" rel="noopener">SpringApplication (Spring Boot Docs 1.4.2.RELEASE API)</a>。</p>
<h3 id="SpringApplication-run-SpringBootWebDemoApplication-class-args"><a href="#SpringApplication-run-SpringBootWebDemoApplication-class-args" class="headerlink" title="SpringApplication.run(SpringBootWebDemoApplication.class, args);"></a>SpringApplication.run(SpringBootWebDemoApplication.class, args);</h3><p>通过源码我们来看一下<strong>SpringApplication.run()</strong>方法的执行过程<br>1.调用static方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object source, String... args)</span> </span>&#123;<span class="keyword">return</span> run(<span class="keyword">new</span> Object[]&#123;source&#125;, args);&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object[] sources, String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> (<span class="keyword">new</span> SpringApplication(sources)).run(args);&#125;</span><br></pre></td></tr></table></figure>

<p>2.创建SpringApplication对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Object... sources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bannerMode = Mode.CONSOLE; <span class="comment">//banner的打印模式，此时是控制台模式</span></span><br><span class="line">        <span class="keyword">this</span>.logStartupInfo = <span class="keyword">true</span>; <span class="comment">//开启日志</span></span><br><span class="line">        <span class="keyword">this</span>.addCommandLineProperties = <span class="keyword">true</span>;<span class="comment">//启用CommandLineProperties</span></span><br><span class="line">        <span class="keyword">this</span>.headless = <span class="keyword">true</span>;<span class="comment">//开启headless模式支持</span></span><br><span class="line">        <span class="keyword">this</span>.registerShutdownHook = <span class="keyword">true</span>;<span class="comment">//启用注册ShutdownHook，用于在非Web应用中关闭IoC容器和资源</span></span><br><span class="line">        <span class="keyword">this</span>.additionalProfiles = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">this</span>.initialize(sources);<span class="comment">//初始化</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>PS：Headless参考资料：<a href="https://www.oschina.net/translate/using-headless-mode-in-java-se" target="_blank" rel="noopener">在 Java SE 平台上使用 Headless 模式</a></p>
<p>3.初始化相关对象和属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.1判断是否是web运行环境，如果classpath中是否含有**WEB_ENVIRONMENT_CLASSES**指定的全部类，则返回true</span></span><br><span class="line">        <span class="keyword">this</span>.webEnvironment = <span class="keyword">this</span>.deduceWebEnvironment();</span><br><span class="line">        <span class="comment">//3.2找到*META-INF/spring.factories*中声明的所有ApplicationContextInitializer的实现类并将其实例化</span></span><br><span class="line">        <span class="keyword">this</span>.setInitializers(<span class="keyword">this</span>.getSpringFactoriesInstances(ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="comment">//3.3找到*META-INF/spring.factories*中声明的所有ApplicationListener的实现类并将其实例化</span></span><br><span class="line">        <span class="keyword">this</span>.setListeners(<span class="keyword">this</span>.getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="comment">//3.4获得当前执行main方法的类对象，这里就是SpringBootWebDemoApplication的实例</span></span><br><span class="line">        <span class="keyword">this</span>.mainApplicationClass = <span class="keyword">this</span>.deduceMainApplicationClass();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>3.1 判断是否是web运行环境<br>如果classpath中是否含有<strong>WEB_ENVIRONMENT_CLASSES</strong>指定的全部类，则返回true，用于创建指定类型的ApplicationContext对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.1</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] WEB_ENVIRONMENT_CLASSES = <span class="keyword">new</span> String[]&#123;<span class="string">"javax.servlet.Servlet"</span>, <span class="string">"org.springframework.web.context.ConfigurableWebApplicationContext"</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>3.2 大体的过程就是通过<em>SpringFactoriesLoader</em>检索<em>META-INF/spring.factories</em>，找到声明的所有ApplicationContextInitializer的实现类并将其实例化。<br><strong>ApplicationContextInitializer</strong>是Spring框架中的接口，其作用可以理解为在ApplicationContext执行refresh之前，调用<em>ApplicationContextInitializer</em>的initialize()方法，对ApplicationContext做进一步的设置和处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">C</span> <span class="keyword">extends</span> <span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(C var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>spring-boot-1.4.2.RELEASE.jar</em>中的<em>META-INF/spring.factories</em>包含的<strong>ApplicationContextInitializer</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Application Context Initializers</span></span><br><span class="line"><span class="string">org.springframework.context.ApplicationContextInitializer=\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.web.ServerPortInfoApplicationContextInitializer</span></span><br></pre></td></tr></table></figure>

<p><em>spring-boot-autoconfigure-1.4.2.RELEASE.jar</em>中的<em>META-INF/spring.factories</em>包含的<strong>ApplicationContextInitializer</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Initializers</span></span><br><span class="line"><span class="string">org.springframework.context.ApplicationContextInitializer=\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer</span></span><br></pre></td></tr></table></figure>

<p>3.3 大体的过程就是通过<em>SpringFactoriesLoader</em>检索<em>META-INF/spring.factories</em>，找到声明的所有ApplicationListener的实现类并将其实例化。<br><strong>ApplicationListener</strong>是Spring框架中的接口，就是事件监听器，其作用可以理解为在<strong>SpringApplicationRunListener</strong>发布通知事件时，由<strong>ApplicationListener</strong>负责接收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationListener</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(E var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringBoot只提供了一个<strong>SpringApplicationRunListener</strong>的实现类，就是<strong>EventPublishingRunListener</strong>，起作用就是在SpringBoot启动过程中，负责注册<em>ApplicationListener</em>监听器，在不同的时点发布不同的事件类型，如果有哪些<strong>ApplicationListener</strong>的实现类监听了这些事件，则可以接收并处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通知监听器，SpringBoot开始执行</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">started</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//通知监听器，Environment准备完成</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment var1)</span></span>;</span><br><span class="line">    <span class="comment">//通知监听器，ApplicationContext已经创建并初始化完成</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext var1)</span></span>;</span><br><span class="line">    <span class="comment">//通知监听器，ApplicationContext已经完成IoC配置加载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext var1)</span></span>;</span><br><span class="line">    <span class="comment">//通知监听器，SpringBoot启动完成</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext var1, Throwable var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>spring-boot-1.4.2.RELEASE.jar</em>中的<em>META-INF/spring.factories</em>包含的<strong>ApplicationListener</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="string">org.springframework.context.ApplicationListener=\</span></span><br><span class="line"><span class="string">org.springframework.boot.ClearCachesApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.FileEncodingApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.config.ConfigFileApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.config.DelegatingApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.logging.ClasspathLoggingApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.logging.LoggingApplicationListener</span></span><br></pre></td></tr></table></figure>

<p><em>spring-boot-autoconfigure-1.4.2.RELEASE.jar</em>中的<em>META-INF/spring.factories</em>包含的<strong>ApplicationListener</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="string">org.springframework.context.ApplicationListener=\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span></span><br></pre></td></tr></table></figure>

<p><em>spring-boot-1.4.2.RELEASE.jar</em>中的<em>META-INF/spring.factories</em>包含的<strong>SpringApplicationRunListener</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Run Listeners</span></span><br><span class="line"><span class="string">org.springframework.boot.SpringApplicationRunListener=\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.event.EventPublishingRunListener</span></span><br></pre></td></tr></table></figure>


<p>3.4 获得当前执行main方法的类对象，这里就是SpringBootWebDemoApplication的实例。</p>
<p>4.核心方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开启任务执行时间监听器</span></span><br><span class="line">        StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        stopWatch.start();</span><br><span class="line"></span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">        Object analyzers = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置系统属性『java.awt.headless』，为true则启用headless模式支持</span></span><br><span class="line">        <span class="keyword">this</span>.configureHeadlessProperty();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过*SpringFactoriesLoader*检索*META-INF/spring.factories*，</span></span><br><span class="line">        <span class="comment">//找到声明的所有SpringApplicationRunListener的实现类并将其实例化，</span></span><br><span class="line">        <span class="comment">//之后逐个调用其started()方法，广播SpringBoot要开始执行了。</span></span><br><span class="line">        SpringApplicationRunListeners listeners = <span class="keyword">this</span>.getRunListeners(args);</span><br><span class="line">        listeners.started();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DefaultApplicationArguments ex = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建并配置当前SpringBoot应用将要使用的Environment（包括配置要使用的PropertySource以及Profile）,</span></span><br><span class="line">            <span class="comment">//并遍历调用所有的SpringApplicationRunListener的environmentPrepared()方法，广播Environment准备完毕。</span></span><br><span class="line">            ConfigurableEnvironment environment = <span class="keyword">this</span>.prepareEnvironment(listeners, ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//决定是否打印Banner</span></span><br><span class="line">            Banner printedBanner = <span class="keyword">this</span>.printBanner(environment);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据webEnvironment的值来决定创建何种类型的ApplicationContext对象</span></span><br><span class="line">            <span class="comment">//如果是web环境，则创建org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext</span></span><br><span class="line">            <span class="comment">//否则创建org.springframework.context.annotation.AnnotationConfigApplicationContext</span></span><br><span class="line">            context = <span class="keyword">this</span>.createApplicationContext();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//注册异常分析器</span></span><br><span class="line">            <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//为ApplicationContext加载environment，之后逐个执行ApplicationContextInitializer的initialize()方法来进一步封装ApplicationContext，</span></span><br><span class="line">            <span class="comment">//并调用所有的SpringApplicationRunListener的contextPrepared()方法，【EventPublishingRunListener只提供了一个空的contextPrepared()方法】，</span></span><br><span class="line">            <span class="comment">//之后初始化IoC容器，并调用SpringApplicationRunListener的contextLoaded()方法，广播ApplicationContext的IoC加载完成，</span></span><br><span class="line">            <span class="comment">//这里就包括通过**@EnableAutoConfiguration**导入的各种自动配置类。</span></span><br><span class="line">            <span class="keyword">this</span>.prepareContext(context, environment, listeners, ex, printedBanner);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//初始化所有自动配置类，调用ApplicationContext的refresh()方法</span></span><br><span class="line">            <span class="keyword">this</span>.refreshContext(context);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历所有注册的ApplicationRunner和CommandLineRunner，并执行其run()方法。</span></span><br><span class="line">            <span class="comment">//该过程可以理解为是SpringBoot完成ApplicationContext初始化前的最后一步工作，</span></span><br><span class="line">            <span class="comment">//我们可以实现自己的ApplicationRunner或者CommandLineRunner，来对SpringBoot的启动过程进行扩展。</span></span><br><span class="line">            <span class="keyword">this</span>.afterRefresh(context, ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用所有的SpringApplicationRunListener的finished()方法，广播SpringBoot已经完成了ApplicationContext初始化的全部过程。</span></span><br><span class="line">            listeners.finished(context, (Throwable)<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭任务执行时间监听器</span></span><br><span class="line">            stopWatch.stop();</span><br><span class="line">            <span class="comment">//如果开启日志，则答应执行是时间</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">                (<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)).logStarted(<span class="keyword">this</span>.getApplicationLog(), stopWatch);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> context;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var9) &#123;</span><br><span class="line">            <span class="comment">//调用异常分析器打印报告，调用所有的SpringApplicationRunListener的finished()方法将异常信息发布出去</span></span><br><span class="line">            <span class="keyword">this</span>.handleRunFailure(context, listeners, (FailureAnalyzers)analyzers, var9);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var9);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><em>spring-boot-1.4.2.RELEASE.jar</em>中的<em>META-INF/spring.factories</em>包含的<strong>FailureAnalyzer</strong>和<strong>FailureAnalysisReporters</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Failure Analyzers</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.FailureAnalyzer=\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.BeanNotOfRequiredTypeFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.ConnectorStartFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.PortInUseFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FailureAnalysisReporters</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.FailureAnalysisReporter=\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>说明</strong></p>
<ul>
<li>SpringBoot的启动过程，实际上就是对ApplicationContext的初始化过程。</li>
<li>ApplicationContext创建后立刻为其设置Environmen，并由<strong>ApplicationContextInitializer</strong>对其进一步封装。</li>
<li>通过<em>SpringApplicationRunListener</em>在ApplicationContext初始化过程中各个时点发布各种广播事件，并由<em>ApplicationListener</em>负责接收广播事件。</li>
<li>初始化过程中完成IoC的注入，包括通过<strong>@EnableAutoConfiguration</strong>导入的各种自动配置类。</li>
<li>初始化完成前调用ApplicationRunner和CommandLineRunner的实现类。</li>
</ul>
<hr>
<h3 id="扩展SpringApplication"><a href="#扩展SpringApplication" class="headerlink" title="扩展SpringApplication"></a>扩展SpringApplication</h3><p>通过上面的学习，我们基本上了解了，如果要对SpringApplication进行扩展，我们可以选择如下三种方案：</p>
<ul>
<li>创建ApplicationContextInitializer的实现类</li>
<li>创建ApplicationListener的实现类</li>
<li>创建ApplicationRunner和CommandLineRunner的实现类</li>
</ul>
<p>1.可以通过如下方式加载自定义的<em>ApplicationContextInitializer<em>和</em>ApplicationListener</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootWebDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//SpringApplication.run(SpringBootWebDemoApplication.class, args);</span></span><br><span class="line">        SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(SpringBootWebDemoApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        springApplication.addInitializers(MyApplicationContextInitializer1,MyApplicationContextInitializer2);</span><br><span class="line"></span><br><span class="line">        springApplication.addListeners(MyApplicationListener1,MyApplicationListener2);</span><br><span class="line"></span><br><span class="line">        springApplication.run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.也可以在当前项目的类路径下创建<em>META-INF/spring.factories<em>文件，并声明相应的</em>ApplicationContextInitializer<em>和</em>ApplicationListener</em></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">org.springframework.context.ApplicationContextInitializer=\</span></span><br><span class="line"><span class="string">xxx.xxx.MyApplicationContextInitializer1,\</span></span><br><span class="line"><span class="string">xxx.xxx.MyApplicationContextInitializer2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="string">org.springframework.context.ApplicationListener=\</span></span><br><span class="line"><span class="string">xxx.xxx.MyApplicationListener1,\</span></span><br><span class="line"><span class="string">xxx.xxx.MyApplicationListener2</span></span><br></pre></td></tr></table></figure>

<p>3.至于ApplicationRunner和CommandLineRunner，只需要在其实现类上加上<strong>@Component</strong>注解或者在@Configuration配置类中通过@Bean注解注入。</p>
<hr>
<h2 id="深入了解SpringBootServletInitializer"><a href="#深入了解SpringBootServletInitializer" class="headerlink" title="深入了解SpringBootServletInitializer"></a>深入了解SpringBootServletInitializer</h2><p>熟悉了<strong>SpringApplication</strong>的原理之后，我们再来了解<strong>SpringBootServletInitializer</strong>的原理就比较容易了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(DemoWarApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringBootServletInitializer就是一个<em>org.springframework.web.context.WebApplicationContext</em>，容器启动时会调用其onStartup(ServletContext servletContext)方法，接下来我么就来看一下这个方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.logger = LogFactory.getLog(<span class="keyword">this</span>.getClass());</span><br><span class="line">        <span class="keyword">final</span> WebApplicationContext rootAppContext = <span class="keyword">this</span>.createRootApplicationContext(servletContext);</span><br><span class="line">        <span class="keyword">if</span>(rootAppContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            servletContext.addListener(<span class="keyword">new</span> ContextLoaderListener(rootAppContext) &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">"No ContextLoaderListener registered, as createRootApplicationContext() did not return an application context"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里的核心方法就是createRootApplicationContext(servletContext)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建SpringApplicationBuilder，并用其生产出SpringApplication对象</span></span><br><span class="line">        SpringApplicationBuilder builder = <span class="keyword">this</span>.createSpringApplicationBuilder();</span><br><span class="line">        builder.main(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">        ApplicationContext parent = <span class="keyword">this</span>.getExistingRootWebApplicationContext(servletContext);</span><br><span class="line">        <span class="keyword">if</span>(parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</span><br><span class="line">            servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)<span class="keyword">null</span>);</span><br><span class="line">            builder.initializers(<span class="keyword">new</span> ApplicationContextInitializer[]&#123;<span class="keyword">new</span> ParentContextApplicationContextInitializer(parent)&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化并封装SpringApplicationBuilder对象，为SpringApplication对象增加ApplicationContextInitializer和ApplicationListener做准备</span></span><br><span class="line">        builder.initializers(<span class="keyword">new</span> ApplicationContextInitializer[]&#123;<span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext)&#125;);</span><br><span class="line">        builder.listeners(<span class="keyword">new</span> ApplicationListener[]&#123;<span class="keyword">new</span> ServletContextApplicationListener(servletContext)&#125;);</span><br><span class="line">        <span class="comment">//指定创建的ApplicationContext类型</span></span><br><span class="line">        builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传递入口类，并构建SpringApplication对象</span></span><br><span class="line">        <span class="comment">//可以通过configure()方法对SpringBootServletInitializer进行扩展</span></span><br><span class="line">        builder = <span class="keyword">this</span>.configure(builder);</span><br><span class="line">        SpringApplication application = builder.build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(application.getSources().isEmpty() &amp;&amp; AnnotationUtils.findAnnotation(<span class="keyword">this</span>.getClass(), Configuration<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line">            application.getSources().add(<span class="keyword">this</span>.getClass());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Assert.state(!application.getSources().isEmpty(), <span class="string">"No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation"</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">            application.getSources().add(ErrorPageFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后调用SpringApplication的run方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.run(application);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>说明</strong><br><strong>SpringBootServletInitializer</strong>的执行过程，简单来说就是通过<em>SpringApplicationBuilder</em>构建并封装SpringApplication对象，并最终调用SpringApplication的run方法的过程。</p>
<hr>
<h3 id="扩展SpringBootServletInitializer"><a href="#扩展SpringBootServletInitializer" class="headerlink" title="扩展SpringBootServletInitializer"></a>扩展SpringBootServletInitializer</h3><p>与扩展<em>SpringApplication</em>类似，<em>ApplicationContextInitializer</em>和<em>ApplicationListener</em>可以基于<em>SpringApplicationBuilder</em>提供的public方法进行扩展</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        application.initializers(MyApplicationContextInitializer1,MyApplicationContextInitializer2);</span><br><span class="line">        application.listeners(MyApplicationListener1,MyApplicationListener2)</span><br><span class="line">        <span class="keyword">return</span> application.sources(DemoWarApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot学习笔记02--深入了解自动配置</title>
    <url>/2016/12/10/spring-boot-study-web/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>SpringBoot都帮我们做了哪些自动配置</li>
<li>我们如何接管SpringBoot的自动配置</li>
<li>注册Servlet、Filter、Listener的方法</li>
</ol>
<a id="more"></a>

<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="SpringBoot的自动配置"><a href="#SpringBoot的自动配置" class="headerlink" title="SpringBoot的自动配置"></a>SpringBoot的自动配置</h2><p>1.自动配置类都存放在<em>spring-boot-autoconfigure-1.4.2.RELEASE.jar</em>下的<br><em>org.springframework.boot.autoconfigure</em>路径下；<br>2.application.properties中配置<code>debug=true</code>后启动容器，可以看到服务器初始化的自动配置如下:</p>
<ul>
<li>DispatcherServletAutoConfiguration<br>注册<strong>org.springframework.web.servlet.DispatcherServlet</strong></li>
<li>EmbeddedServletContainerAutoConfiguration<br>注册容器类型，如类路径下存在<strong>org.apache.catalina.startup.Tomcat</strong>，就会注册Tomcat容器</li>
<li>ErrorMvcAutoConfiguration<br>注册异常处理器</li>
<li>HttpEncodingAutoConfiguration<br>注册http编码过滤器</li>
<li>HttpMessageConvertersAutoConfiguration<br>注册json或者xml处理器</li>
<li>JacksonAutoConfiguration<br>注册json对象解析器</li>
<li>JmxAutoConfiguration<br>注册<a href="http://baike.baidu.com/link?url=UrBouL697r00U6pJyc5IXwk_GiFaWf0di0wZEpG9J9obYa69_7nApO5iddAuj4ajDz0hwJZ8CA-iBghoyqI39a" target="_blank" rel="noopener">JMX</a>管理器<blockquote>
<p><a href="https://my.oschina.net/bayuanqian/blog/90043" target="_blank" rel="noopener">JMX与Spring集成</a><br><a href="http://blog.csdn.net/yaerfeng/article/details/28232435" target="_blank" rel="noopener">spring通过annotation注解注册MBean到JMX实现监控java运行状态</a></p>
</blockquote>
</li>
<li>MultipartAutoConfiguration<br>注册文件传输处理器</li>
<li>ServerPropertiesAutoConfiguration<br>用于初始化容器相关的配置属性，如服务地址、端口、contextPath，并根据当前容器类型初始化各个容器的特有属性，如tomcat的maxThreads、uriEncoding等等，其对应的属性类为<strong>ServerProperties</strong>；</li>
<li>WebClientAutoConfiguration<br>注册RestTemplate</li>
<li>WebMvcAutoConfiguration<br>注册SpringMvc相关处理器，如ResourceResolver、RequestMappingHandlerAdapter、ExceptionHandlerExceptionResolver、ViewResolver、LocaleResolver，等等</li>
<li>WebSocketAutoConfiguration<br>注册webSocket相关处理器，根据容器类型注册不同的处理器</li>
</ul>
<p>3.如果依赖中加入了其它功能的依赖，SpringBoot还会实现这些功能的自动适配，比如我们增加数据库的JPA的功能，就会启用对<em>JpaRepositoriesAutoConfiguration</em>的自动配置功能。关于数据库方面的内容将在后文介绍。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>说明</strong><br>从各个AutoConfiguration配置类中可以看到如下注解，基于这些注解可以确定这些AutoConfiguration的初始化顺序：</p>
<ul>
<li>@AutoConfigureOrder(-2147483648)：数越小越先初始化</li>
<li>@AutoConfigureAfter({EmbeddedServletContainerAutoConfiguration.class})：在指定的配置类初始化后再加载</li>
<li>@AutoConfigureBefore({WebMvcAutoConfiguration.class})：在指定的配置类初始化前加载</li>
</ul>
<hr>
<h2 id="接管SpringBoot的自动配置"><a href="#接管SpringBoot的自动配置" class="headerlink" title="接管SpringBoot的自动配置"></a>接管SpringBoot的自动配置</h2><p>我们介绍过<strong>@SpringBootApplication</strong>这个注解，因其包含<strong>@EnableAutoConfiguration</strong>和<strong>@ComponentScan</strong>注解，可以自动扫描相关的自动配置类，从而实现自动配置功能的。<br>上面介绍默认情况下SpringBoot默认会初始化很多的自动配置，这些配置有些我们在项目中可能用不到，那要如何去掉呢？</p>
<h3 id="去掉不需要的自动配置类"><a href="#去掉不需要的自动配置类" class="headerlink" title="去掉不需要的自动配置类"></a>去掉不需要的自动配置类</h3><p>比如我们不需要开启webSocket和JMX的自动配置，我们需要在<strong>@SpringBootApplication</strong>这个注解中指定<strong>exclude</strong>属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;WebSocketAutoConfiguration<span class="class">.<span class="keyword">class</span>,<span class="title">JmxAutoConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringBootWebDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootWebDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="明确指定需要启用哪些自动配置"><a href="#明确指定需要启用哪些自动配置" class="headerlink" title="明确指定需要启用哪些自动配置"></a>明确指定需要启用哪些自动配置</h3><p>我们可以去掉<strong>@SpringBootApplication</strong>注解，改用<em>@Configuration、@Import、@ComponentScan</em>注解，在<strong>@Import</strong>注解中明确指定需要启用哪些自动配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@SpringBootApplication(exclude = &#123;WebSocketAutoConfiguration.class,JmxAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;</span><br><span class="line">        DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">EmbeddedServletContainerAutoConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ErrorMvcAutoConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">HttpEncodingAutoConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">HttpMessageConvertersAutoConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">JacksonAutoConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">MultipartAutoConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ServerPropertiesAutoConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">WebMvcAutoConfiguration</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ComponentScan</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringBootWebDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootWebDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>说明：</strong></p>
<ul>
<li>这里推荐使用第一种方式：<strong>@SpringBootApplication(exclude={})</strong>；</li>
<li>实际上，开启默认的自动配置功能，只是会影响项目启动时间，所以没有特殊需要，可以不需要关闭某个自动配置功能；</li>
<li>在某些情况，比如项目需要多数据源时，在项目中就会包含多个DataSource的Bean，因为<strong>DataSourceAutoConfiguration</strong>自动配置只能绑定一个数据源，此时发现多个DataSource的Bean被Spring注册就会抛出异常。<blockquote>
<p>1.这时就可以采用去掉<strong>DataSourceAutoConfiguration</strong>的方式;<br>2.或者也可以在某一个DataSource的Bean上声明<strong>@Primary</strong>注解，指定其为主数据源，这时<strong>DataSourceAutoConfiguration</strong>只会加载被指定<strong>@Primary</strong>注解的主数据源，这样就可以享受到SpringBoot自动配置带来的好处。</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="接管WebMvc自动配置"><a href="#接管WebMvc自动配置" class="headerlink" title="接管WebMvc自动配置"></a>接管WebMvc自动配置</h3><p>对于一个web项目，最重要的就是Mvc相关的控制，SpringBoot通过<strong>WebMvcAutoConfiguration</strong>来完成与Mvc有关的自动配置。如果希望完全接管WebMvc自动配置，可以在项目中创建一个注解了<strong>@EnableWebMvc</strong>的配置类，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.FilterType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ResourceBundleMessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.SimpleServletHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.i18n.CookieLocaleResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.i18n.LocaleChangeInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.example"</span>, useDefaultFilters = <span class="keyword">false</span>, includeFilters = &#123;</span><br><span class="line">        <span class="meta">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION, value = &#123;Controller<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger</span><br><span class="line">            .getLogger(MvcConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述 : &lt;注册视图处理器&gt;. &lt;br&gt;</span></span><br><span class="line"><span class="comment">     *&lt;p&gt;</span></span><br><span class="line"><span class="comment">     &lt;使用方法说明&gt;</span></span><br><span class="line"><span class="comment">     &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"ViewResolver"</span>);</span><br><span class="line">        InternalResourceViewResolver viewResolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">        viewResolver.setPrefix(<span class="string">"/WEB-INF/views/jsp/function/"</span>);</span><br><span class="line">        viewResolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述 : &lt;注册消息资源处理器&gt;. &lt;br&gt;</span></span><br><span class="line"><span class="comment">     *&lt;p&gt;</span></span><br><span class="line"><span class="comment">     &lt;使用方法说明&gt;</span></span><br><span class="line"><span class="comment">     &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"MessageSource"</span>);</span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        messageSource.setBasename(<span class="string">"config.messages.messages"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述 : &lt;注册servlet适配器&gt;. &lt;br&gt;</span></span><br><span class="line"><span class="comment">     *&lt;p&gt;</span></span><br><span class="line"><span class="comment">     &lt;只需要在自定义的servlet上用<span class="doctag">@Controller</span>("映射路径")标注即可&gt;</span></span><br><span class="line"><span class="comment">     &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HandlerAdapter <span class="title">servletHandlerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"HandlerAdapter"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleServletHandlerAdapter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述 : &lt;本地化拦截器&gt;. &lt;br&gt;</span></span><br><span class="line"><span class="comment">     *&lt;p&gt;</span></span><br><span class="line"><span class="comment">     &lt;使用方法说明&gt;</span></span><br><span class="line"><span class="comment">     &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleChangeInterceptor <span class="title">localeChangeInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"LocaleChangeInterceptor"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LocaleChangeInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述 : &lt;基于cookie的本地化资源处理器&gt;. &lt;br&gt;</span></span><br><span class="line"><span class="comment">     *&lt;p&gt;</span></span><br><span class="line"><span class="comment">     &lt;使用方法说明&gt;</span></span><br><span class="line"><span class="comment">     &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"localeResolver"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CookieLocaleResolver <span class="title">cookieLocaleResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"CookieLocaleResolver"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CookieLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述 : &lt;添加拦截器&gt;. &lt;br&gt;</span></span><br><span class="line"><span class="comment">     *&lt;p&gt;</span></span><br><span class="line"><span class="comment">     &lt;使用方法说明&gt;</span></span><br><span class="line"><span class="comment">     &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        logger.info(<span class="string">"addInterceptors start"</span>);</span><br><span class="line">        registry.addInterceptor(localeChangeInterceptor());</span><br><span class="line">        logger.info(<span class="string">"addInterceptors end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述 : &lt;资源访问处理器&gt;. &lt;br&gt;</span></span><br><span class="line"><span class="comment">     *&lt;p&gt;</span></span><br><span class="line"><span class="comment">     &lt;可以在jsp中使用/static/**的方式访问/WEB-INF/static/下的内容&gt;</span></span><br><span class="line"><span class="comment">     &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"addResourceHandlers"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/static/**"</span>).addResourceLocations(<span class="string">"/WEB-INF/static/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述 : &lt;文件上传处理器&gt;. &lt;br&gt;</span></span><br><span class="line"><span class="comment">     *&lt;p&gt;</span></span><br><span class="line"><span class="comment">     &lt;使用方法说明&gt;</span></span><br><span class="line"><span class="comment">     &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"multipartResolver"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonsMultipartResolver <span class="title">commonsMultipartResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"CommonsMultipartResolver"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述 : &lt;异常处理器&gt;. &lt;br&gt;</span></span><br><span class="line"><span class="comment">     *&lt;p&gt;</span></span><br><span class="line"><span class="comment">     &lt;系统运行时遇到指定的异常将会跳转到指定的页面&gt;</span></span><br><span class="line"><span class="comment">     &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"exceptionResolver"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleMappingExceptionResolver <span class="title">simpleMappingExceptionResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"CP_SimpleMappingExceptionResolver"</span>);</span><br><span class="line">        SimpleMappingExceptionResolver simpleMappingExceptionResolver= <span class="keyword">new</span> SimpleMappingExceptionResolver();</span><br><span class="line">        simpleMappingExceptionResolver.setDefaultErrorView(<span class="string">"common_error"</span>);</span><br><span class="line">        simpleMappingExceptionResolver.setExceptionAttribute(<span class="string">"exception"</span>);</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">"java.lang.RuntimeException"</span>, <span class="string">"common_error"</span>);</span><br><span class="line">        simpleMappingExceptionResolver.setExceptionMappings(properties);</span><br><span class="line">        <span class="keyword">return</span> simpleMappingExceptionResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时debug模式运行项目，会看到<strong>WebMvcAutoConfiguration</strong>没有被自动配置，说明我们自己定义的<code>MvcConfig</code>已经完全接管了默认的自动配置，这是因为<strong>WebMvcAutoConfiguration</strong>有一个条件注解:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;WebMvcConfigurationSupport<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure>
<p>而我们本例中<code>MvcConfig</code>就是WebMvcConfigurationSupport的实现类，同时加入<strong>@EnableWebMvc</strong>注解也会导入一个WebMvcConfigurationSupport的实现类：DelegatingWebMvcConfiguration<br>，所以<code>MvcConfig</code>继承WebMvcConfigurationSupport不是必须的，但是可以方便我们编码。</p>
<hr>
<p>参考：<a href="http://hanqunfeng.iteye.com/blog/2114987" target="_blank" rel="noopener">SpringMVC4零配置–Web上下文配置【MvcConfig】</a></p>
<hr>
<p>如果希望可以继续使用<strong>WebMvcAutoConfiguration</strong>的自动配置，而只是需要修改或者增加MVC中的某些配置时，我们可以创建一个配置类，并继承于抽象类<strong>WebMvcConfigurerAdapter</strong>，我们可以通过实现抽象类的方法来注册自己的控制器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebMvcConfigurerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAsyncSupport</span><span class="params">(AsyncSupportConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addReturnValueHandlers</span><span class="params">(List&lt;HandlerMethodReturnValueHandler&gt; returnValueHandlers)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; exceptionResolvers)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; exceptionResolvers)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageCodesResolver <span class="title">getMessageCodesResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比如我们可以增加一个视图跳转控制器，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/demo/123"</span>).setViewName(<span class="string">"/demo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="注册Servlet、Filter、Listener的方法"><a href="#注册Servlet、Filter、Listener的方法" class="headerlink" title="注册Servlet、Filter、Listener的方法"></a>注册Servlet、Filter、Listener的方法</h2><p>1.如果是war包项目，我们可以将Servlet、Filter、Listener注册到<strong>WebApplicationInitializer</strong>的实现类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Log4jConfigListener</span></span><br><span class="line">        servletContext.setInitParameter(<span class="string">"log4jConfigLocation"</span>, <span class="string">"classpath:log4j.properties"</span>);</span><br><span class="line">        servletContext.addListener(Log4jConfigListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//OpenSessionInViewFilter</span></span><br><span class="line">        OpenSessionInViewFilter hibernateSessionInViewFilter = <span class="keyword">new</span> OpenSessionInViewFilter();</span><br><span class="line">        FilterRegistration.Dynamic filterRegistration = servletContext.addFilter(</span><br><span class="line">                <span class="string">"hibernateFilter"</span>, hibernateSessionInViewFilter);</span><br><span class="line">        filterRegistration.addMappingForUrlPatterns(</span><br><span class="line">                EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), <span class="keyword">false</span>, <span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//DemoServlet</span></span><br><span class="line">        DemoServlet demoServlet = <span class="keyword">new</span> DemoServlet();</span><br><span class="line">        ServletRegistration.Dynamic dynamic = servletContext.addServlet(</span><br><span class="line">                <span class="string">"demoServlet"</span>, demoServlet);</span><br><span class="line">        dynamic.setLoadOnStartup(<span class="number">2</span>);</span><br><span class="line">        dynamic.addMapping(<span class="string">"/demo_servlet"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.如果是jar包部署方式，则可以将其注册到任意一个<strong>@Configuration</strong>配置类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean_demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> DemoServlet(),<span class="string">"/demo-servlet1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean_demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean();</span><br><span class="line">        servletRegistrationBean.addUrlMappings(<span class="string">"/demo-servlet2"</span>);</span><br><span class="line">        servletRegistrationBean.setServlet(<span class="keyword">new</span> DemoServlet2());</span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        filterRegistrationBean.setFilter(<span class="keyword">new</span> OpenSessionInViewFilter());</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        set.add(<span class="string">"/"</span>);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(set);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean servletListenerRegistrationBean =  <span class="keyword">new</span> ServletListenerRegistrationBean();</span><br><span class="line">        servletListenerRegistrationBean.setListener(<span class="keyword">new</span> Log4jConfigListener());</span><br><span class="line">        servletListenerRegistrationBean.addInitParameter(<span class="string">"log4jConfigLocation"</span>,<span class="string">"classpath:log4j.properties"</span>);</span><br><span class="line">        <span class="keyword">return</span> servletListenerRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一句话概括SpringBoot的自动配置–<strong>就是一组基于条件注解实现Bean注册的Spring配置类。</strong></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot学习笔记01--基本介绍</title>
    <url>/2016/12/09/spring-boot-study/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>看完本文你将掌握如下知识点：</p>
<ol>
<li>如何搭建一个SpringBoot项目</li>
<li>SpringBoot自动配置原理</li>
<li>SpringBoot属性配置方法</li>
<li>修改默认的Logback日志为log4j和log4j2的方法</li>
<li>修改默认的内置tomcat容器为Jetty容器和Undertow容器的方法 </li>
<li>SpringBoot单元测试方法</li>
<li>使用war包运行项目</li>
</ol>
<a id="more"></a>

<hr>
<p><strong>SpringBoot系列</strong>：<a href="/tags/Spring-Boot/">Spring Boot学习笔记</a></p>
<hr>
<h2 id="Spring-Boot简介"><a href="#Spring-Boot简介" class="headerlink" title="Spring Boot简介"></a>Spring Boot简介</h2><ul>
<li>要我给<a href="http://projects.spring.io/spring-boot/" target="_blank" rel="noopener">Spring Boot</a>做个定义，简单来说就是一个基于强大的Spring框架的、推崇JavaConfig的极简配置的web开发框架；</li>
<li>Spring Boot通过内嵌Servlet容器（Tomcat、Jetty，等等）的方式，可以以jar包的形式独立运行一个web项目；</li>
<li>Spring Boot提倡JavaConfig和注解的零配置方式，并且默认配置满足绝大多数场景的需要，意味着少量修改默认配置即可快速搭建一个web项目，极大的提高开发效率；</li>
<li>项目中加入某一个<code>spring-boot-starter-*</code>依赖，就可以引入该功能的完整jar包，降低pom的复杂度</li>
<li>本文基于Spring Boot的版本为<a href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#appendix-dependency-versions" target="_blank" rel="noopener">1.4.2.RELEASE</a></li>
</ul>
<h2 id="Spring-Boot项目创建方法"><a href="#Spring-Boot项目创建方法" class="headerlink" title="Spring Boot项目创建方法"></a>Spring Boot项目创建方法</h2><ul>
<li><a href="http://start.spring.io" target="_blank" rel="noopener">http://start.spring.io</a>：可以通过网页创建项目结构并下载；</li>
<li><a href="http://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html" target="_blank" rel="noopener">Spring Boot CLI</a>：通过命令行的方式创建Spring Boot项目；</li>
<li><a href="http://spring.io/tools/sts" target="_blank" rel="noopener">Spring Tool Suite</a>：习惯Eclipse的用户可以使用STS创建『Spring Starter Project』项目;</li>
<li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a>：强大的生产力工具，推荐使用，创建『Spring Initializr』项目;</li>
</ul>
<h2 id="使用IntelliJ-IDEA创建一个web项目"><a href="#使用IntelliJ-IDEA创建一个web项目" class="headerlink" title="使用IntelliJ IDEA创建一个web项目"></a>使用IntelliJ IDEA创建一个web项目</h2><ol>
<li>新建Spring Initializr项目<br><img src="/images_glob/spring-boot-study/create1.png" alt=""><blockquote>
<p>说明：Spring Boot要求JDK1.6+</p>
</blockquote>
</li>
<li>填写项目信息，构建工具使用maven<br><img src="/images_glob/spring-boot-study/create2.png" alt=""></li>
<li>选择项目使用的依赖，这里我们只需要勾选web<br><img src="/images_glob/spring-boot-study/create3.png" alt=""><blockquote>
<ol>
<li>Spring Boot当前最新的稳定版是1.4.2；</li>
<li>所有依赖可以在创建时勾选，也可以在创建后手工将依赖添加到pom中，如果对依赖比较熟悉，推荐手工添加，这样可以加快创建项目的时间；</li>
</ol>
</blockquote>
</li>
<li>填写项目名称，点击Finish<br><img src="/images_glob/spring-boot-study/create4.png" alt=""></li>
<li>新建的项目结构如下<br><img src="/images_glob/spring-boot-study/create5.png" alt=""><blockquote>
<p>SpringBoot项目只会在项目根目录下生成一个类–SpringBootWebDemoApplication(artifactId+Application)，它就是一个带有main函数的启动类；</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootWebDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(SpringBootWebDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>pom.xml说明<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springbootwebdemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringBootWebDemo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 创建的Springboot项目需要继承于spring-boot-starter-parent --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建项目是勾选的web依赖 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 每个项目都会自动添加一个test依赖 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Springboot的编译插件 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这就是一个web项目的pom文件，可以看到只关联了很少的依赖，这是因为我们继承的spring-boot-starter-parent和关联的spring-boot-starter-web本身已经为我们关联了全部的依赖，如下是该项目所有的依赖包<br><img src="/images_glob/spring-boot-study/create6.png" alt=""><br><img src="/images_glob/spring-boot-study/create7.png" alt=""></p>
</blockquote>
</li>
</ul>
<h2 id="运行Spring-Boot项目"><a href="#运行Spring-Boot项目" class="headerlink" title="运行Spring Boot项目"></a>运行Spring Boot项目</h2><ol>
<li>maven运行：<code>mvn spring-boot:run</code>；</li>
<li>main函数运行：右键单击SpringBootWebDemoApplication，选择『Run 或者 Debug』；</li>
<li>推荐安装JRebel插件，支持热部署；</li>
<li>当然，也可以maven先打成jar，然后通过命令行执行<code>java -jar xx.jar</code>；<blockquote>
<ul>
<li>运行成功会看到控制台打印了如下信息<br><img src="/images_glob/spring-boot-study/run1.png" alt=""></li>
<li>可以看到打印信息中有tomcat的启动信息，说明springboot默认使用tomcat作为web运行容器，这点从上面的依赖包中也可以看到。因为当前项目并没有开放任何服务，所以此时访问8080端口会提示无服务<br><img src="/images_glob/spring-boot-study/run2.png" alt=""></li>
</ul>
</blockquote>
</li>
</ol>
<h3 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h3><ul>
<li>我们可以在项目中创建一个Controller控制器，比如DemoController<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function">String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Spring Boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行SpringBootWebDemoApplication，再次访问<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br><img src="/images_glob/spring-boot-study/run3.png" alt=""></li>
</ul>
<hr>
<p><strong>一切似乎就是那么美好，我们什么都没配置，一个web项目就这样运行起来了，SpringBoot自动帮我们默认了一些常用的配置</strong></p>
<hr>
<h2 id="自动配置原理说明"><a href="#自动配置原理说明" class="headerlink" title="自动配置原理说明"></a>自动配置原理说明</h2><h3 id="SpringBootWebDemoApplication类上的注解：-SpringBootApplication"><a href="#SpringBootWebDemoApplication类上的注解：-SpringBootApplication" class="headerlink" title="SpringBootWebDemoApplication类上的注解：@SpringBootApplication"></a>SpringBootWebDemoApplication类上的注解：@SpringBootApplication</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.TypeExcludeFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.FilterType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan.Filter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">attribute</span> </span>= <span class="string">"basePackages"</span></span><br><span class="line">    )</span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">attribute</span> </span>= <span class="string">"basePackageClasses"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>@SpringBootConfiguration实际上就是@Configuration，说明这是一个JavaConfig</li>
<li>@ComponentScan，启用注解自动扫描</li>
<li>@EnableAutoConfiguration的作用是根据类路径中jar包是否存在来决定是否开启某一个功能的自动配置，比如，我们项目中添加了spring-boot-starter-web依赖，因其关联Tomcat和Srping MVC，所以类路径下就会存在Tomcat和Spring MVC的jar包，SpringBoot项目扫描到这些jar包后会自动开启两者的配置，当然，这个配置是默认配置，我们可以根据需要进行修改（下文介绍）。</li>
<li>exclude和excludeName用于关闭指定的自动配置，比如关闭数据源相关的自动配置<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude=&#123;DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure></li>
<li>scanBasePackages和scanBasePackageClasses用于指定扫描的路径，默认情况下会自动扫描被@SpringBootApplication注解的类（这里是SpringBootWebDemoApplication）的同级包以及子包中的Bean。比如我们创建的DemoController，因为开启了SpringMVC自动配置，同时又在对应的路径下，所以该Controller会被自动加载。比如我们这里指定扫描的包路径如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = &#123;<span class="string">"com.temp.Controller"</span>&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>再次运行程序，发现原来的DemoController不能被访问了，而『com.temp.Controller』下的controller却可以被访问。</p>
</blockquote>
</li>
</ul>
<h3 id="那么问题来了，SpringBoot到底为我们自动配置了哪些功能呢？"><a href="#那么问题来了，SpringBoot到底为我们自动配置了哪些功能呢？" class="headerlink" title="那么问题来了，SpringBoot到底为我们自动配置了哪些功能呢？"></a>那么问题来了，SpringBoot到底为我们自动配置了哪些功能呢？</h3><ul>
<li>开启Debug模式，方式有多种:<blockquote>
<ul>
<li>java -jar xx.jar –debug</li>
<li>在IDE中执行Run时添加VM arguments:<code>-Ddebug</code></li>
<li>在项目resources下的application.properties文件中增加<code>debug=true</code></li>
</ul>
</blockquote>
</li>
<li>Debug模式运行程序，打印信息中会显示如下内容<blockquote>
<p>启动的自动配置<br><img src="/images_glob/spring-boot-study/conf1.png" alt=""><br>未启用的自动配置<br><img src="/images_glob/spring-boot-study/conf2.png" alt=""></p>
</blockquote>
</li>
<li>从打印结果中看到，每一个<code>*AutoConfiguration*</code>都对应着一类功能的自动配置类，比如<em>HttpEncodingAutoConfiguration</em>:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HttpEncodingAutoConfiguration matched:</span><br><span class="line">      - @ConditionalOnClass found required class &#39;org.springframework.web.filter.CharacterEncodingFilter&#39; (OnClassCondition)</span><br><span class="line">      - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition)</span><br><span class="line">      - @ConditionalOnProperty (spring.http.encoding.enabled) matched (OnPropertyCondition)</span><br></pre></td></tr></table></figure></li>
<li>开启的自动配置中都会有<code>@ConditionalOnClass</code>、<code>@ConditionalOnWebApplication</code>等标识，这是什么意思呢？为了弄清楚这个，我们需要先来认识一下<code>@EnableAutoConfiguration</code>；</li>
</ul>
<h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigurationPackage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfigurationImportSelector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里我们需要了解一下@Import注解中的EnableAutoConfigurationImportSelector<blockquote>
<p>感兴趣的可以看一下源码，大体的功能就是扫描jar包里是否含有<code>META-INF/spring.factories</code>文件;<br>并在spring.factories中找到<strong>@EnableAutoConfiguration</strong>的全路径名称<strong>org.springframework.boot.autoconfigure.EnableAutoConfiguration</strong>这个key，该key对应的value就是用于声明都需要启用哪些自动配置类;<br>比如<em>spring-boot-autoconfigure-1.4.2.RELEASE.jar</em>中就有一个spring.factories，可以看到<em>org.springframework.boot.autoconfigure.EnableAutoConfiguration</em>参数中列出了自动配置类列表，而<em>HttpEncodingAutoConfiguration</em>这个自动配置类就是其声明的;<br><img src="/images_glob/spring-boot-study/conf3.png" alt=""></p>
</blockquote>
</li>
</ul>
<h3 id="HttpEncodingAutoConfiguration"><a href="#HttpEncodingAutoConfiguration" class="headerlink" title="HttpEncodingAutoConfiguration"></a>HttpEncodingAutoConfiguration</h3><ul>
<li>先看下源码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;HttpEncodingProperties<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span></span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnClass</span>(</span>&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(</span></span><br><span class="line"><span class="class">    <span class="title">prefix</span> </span>= <span class="string">"spring.http.encoding"</span>,</span><br><span class="line">    value = &#123;<span class="string">"enabled"</span>&#125;,</span><br><span class="line">    matchIfMissing = <span class="keyword">true</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">CharacterEncodingFilter</span> <span class="title">characterEncodingFilter</span>() </span>&#123;</span><br><span class="line">        OrderedCharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//.......省略以下........</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>熟悉JavaConfig的都会明白，这就是一个配置类<code>@Configuration</code>，并且通过<code>@Bean</code>注册了一个<code>CharacterEncodingFilter</code>;</li>
</ul>
<hr>
<p>但是还有一些注解，是什么意思呢，我们分别说明：</p>
<hr>
<ul>
<li>@EnableConfigurationProperties：开启属性注入<blockquote>
<p>本例中表示<em>HttpEncodingProperties</em>是属性类，并使用@Autowired自动注入；<br>属性类实际上是一个是注解了<code>@ConfigurationProperties</code>的JavaBean，SpringBoot将属性文件（application.properties）中的键值对与JavaBean的属性建立起一一对应关系:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.http.encoding"</span> <span class="comment">//属性值的前缀</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">举例：application.properties中设置如下属性</span></span><br><span class="line"><span class="comment">spring.http.encoding.charset=UTF-8</span></span><br><span class="line"><span class="comment">spring.http.encoding.force=true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Charset charset;</span><br><span class="line">    <span class="keyword">private</span> Boolean force;</span><br><span class="line">    <span class="comment">//....属性声明及set、get方法........</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p>所有<strong>@ConditionalOn</strong>开头的注解都是用于进行条件判断的</p>
<hr>
<ul>
<li>@ConditionalOnWebApplication：当前项目是web项目的条件下才加载当前配置类</li>
<li>@ConditionalOnClass：当类路径下有指定的类的条件下才加载当前配置类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本例表示，当前类路径（含jar）下必须存在CharacterEncodingFilter</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure></li>
<li>@ConditionalOnProperty：当指定的属性等于指定的值的情况下加载当前配置类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// spring.http.encoding=enabled</span></span><br><span class="line"><span class="comment">// matchIfMissing = true表示如果没有在application.properties设置该属性，则默认为条件符合</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">    prefix = <span class="string">"spring.http.encoding"</span>,</span><br><span class="line">    value = &#123;<span class="string">"enabled"</span>&#125;,</span><br><span class="line">    matchIfMissing = <span class="keyword">true</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>@ConditionalOnMissingBean：当前容器里没有指定的Bean的情况下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果当前容器中找不到CharacterEncodingFilter实例，则创建当前的Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p>通过上面的分析，应该可以明白SpringBoot是如何做到自动配置的，简单总结如下：</p>
<ol>
<li>@SpringBootConfiguration实际上就是@Configuration，说明这是一个JavaConfig</li>
<li>@EnableAutoConfiguration负责扫描jar包中的<code>META-INF/spring.factories</code>来找到要初始化的各种<strong>AutoConfiguration</strong>类</li>
<li>各种@Conditional注解决定哪些Bean可以被容器初始化</li>
<li>如果希望进一步了解SpringBoot的自动配置，建议查看每一个<strong>AutoConfiguration</strong>类的源码</li>
</ol>
<hr>
<h3 id="除了上面介绍的，-Conditional注解还有如下形式"><a href="#除了上面介绍的，-Conditional注解还有如下形式" class="headerlink" title="除了上面介绍的，@Conditional注解还有如下形式"></a>除了上面介绍的，@Conditional注解还有如下形式</h3><ul>
<li>@ConditionalOnExpression：基于SpEL表达式作为条件判断</li>
<li>@ConditionalOnJava：基于JAVA版本作为判断条件</li>
<li>@ConditionalOnJndi：在JNDI存在的条件下查找指定的位置</li>
<li>@ConditionalOnMissingClass：当前类路径下没有指定的类的条件下</li>
<li>@ConditionalOnNotWebApplication：当前项目不是web项目的条件下</li>
<li>@ConditionalOnResource：类路径下是否有指定的值</li>
<li>@ConditionalOnSingleCandidate：当指定的Bean在容器中只有一个的情况下</li>
</ul>
<hr>
<p>如果我们希望自己创建一个自动配置类(AutoConfiguration)，则只需要在我们自己创建的JavaConfig中加上<strong>@ConditionalOn</strong>注解，并且在类路径下创建<code>META-INF/spring.factories</code>，加入参数<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=xxxxAutoConfiguration</code></p>
<hr>
<h2 id="SpringBoot的配置文件"><a href="#SpringBoot的配置文件" class="headerlink" title="SpringBoot的配置文件"></a>SpringBoot的配置文件</h2><ul>
<li>SpringBoot支持常规的properties配置文件(application.properties)，还支持<a href="http://baike.baidu.com/link?url=Fe_VBwl7yKA6SO6fZF6USjJwefUUGq5VeN3tSjp3gpRTm7l3ZIoRvTye4QsIz95qJmaW6LC99Nkvb2vnLHBU4_" target="_blank" rel="noopener">yaml</a>语言的配置文件(application.yml)</li>
<li>SpringBoot会从classpath下的/config目录或者classpath的根目录查找application.properties或application.yml</li>
<li>如果要修改SpringBoot自动配置中默认配置，可以通过在配置文件中配置相应的参数即可</li>
<li>比如，项目启动时，tomcat默认的端口号是『8080』，访问路径是『/』，修改如下：</li>
<li><strong>application.properties</strong><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">server.context-path</span>=<span class="string">/demo</span></span><br></pre></td></tr></table></figure></li>
<li><strong>application.yml</strong><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/demo</span></span><br></pre></td></tr></table></figure></li>
<li>IntelliJ IDEA支持对properties和yml的代码提示功能，编辑起来还是很方便的，不需要特别记住这些属性名称</li>
<li>SpringBoot默认使用priperites进行配置</li>
</ul>
<hr>
<p>SpringBoot的属性可以通过多种方式指定，配置文件只是其中一种方式，常用的方式还有如下几种，按加载的优先级列出：</p>
<blockquote>
<p>命令行参数：<code>java -jar xx.jar --server.port=8081 --server.context-path=/demo</code><br>操作系统环境变量：有些OS不支持使用.这种名字，如server.port，可以使用SERVER_PORT来配置。<br>项目中的配置文件：application.properties或者application.yml<br>项目依赖jar包中的配置文件：application.properties或者application.yml</p>
</blockquote>
<p><strong>关于SpringBoot支持的配置属性可以查看<a href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">官网地址1.4.2.RELEASE</a></strong></p>
<hr>
<h3 id="Profile配置"><a href="#Profile配置" class="headerlink" title="Profile配置"></a>Profile配置</h3><ul>
<li>不同的环境可以使用不同的配置文件，application-{profile}.properties，比如<blockquote>
<p>开发：application-rnd.properties<br>测试：application-release.properties<br>验证：application-verify.properties<br>生产：application-prod.properties</p>
</blockquote>
</li>
<li>通过在application.properties(项目中必须包含该文件)中设置<code>spring.profiles.active=prod</code>来指定启用哪一个Profile。</li>
</ul>
<h2 id="关于属性配置还想多说的一些内容"><a href="#关于属性配置还想多说的一些内容" class="headerlink" title="关于属性配置还想多说的一些内容"></a>关于属性配置还想多说的一些内容</h2><ul>
<li><p>application.properties也可以配置自定义属性：my.name=hanqf</p>
</li>
<li><p>通过<code>@Value</code>将属性注入Bean属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;my.name&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String myName;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过<code>@ConfigurationProperties</code>将属性注入Bean对象</p>
</li>
</ul>
<p>使用<code>prefix</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">my.name=hanqf</span></span><br><span class="line"><span class="string">my.servers[0]=rnd.hanqf.com</span></span><br><span class="line"><span class="string">my.servers[1]=release.hanqf.com</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"my"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; servers = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//list需要初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//....set and get method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不使用<code>prefix</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">name=hanqf</span></span><br><span class="line"><span class="string">jdbc.username=root</span></span><br><span class="line"><span class="string">jdbc.password=root</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Jdbc jdbc;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Jdbc</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String username;</span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line">        <span class="comment">//....set and get method</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//....set and get method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>属性占位符</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">app.name=MyApp</span></span><br><span class="line"><span class="string">app.description=$&#123;app.name&#125;</span> <span class="string">is</span> <span class="string">a</span> <span class="string">Spring</span> <span class="string">Boot</span> <span class="string">application</span> </span><br><span class="line"></span><br><span class="line"><span class="string">server.port=$&#123;port:8080&#125;</span> <span class="comment"># 如果没有设置port，则使用默认值8080</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性名匹配规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//....set and get method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><code>firstName</code>可以使用的属性名如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">person.firstName，标准的驼峰式命名</span></span><br><span class="line"><span class="string">person.first-name，虚线（-）分割方式，推荐在.properties和.yml配置文件中使用</span></span><br><span class="line"><span class="string">PERSON_FIRST_NAME，大写下划线形式，建议在系统环境变量中使用</span></span><br></pre></td></tr></table></figure>

<h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><ul>
<li><p>Spring Boot默认使用Logback作为日志框架，这是推荐的方式，如果希望修改为熟悉的log4j可以看下文</p>
<blockquote>
<p>创建项目时我们引入了<code>spring-boot-starter-web</code>，其依赖<code>spring-boot-starter</code>，<code>spring-boot-starter</code>又依赖于<code>spring-boot-starter-logging</code>，该依赖内容就是Spring Boot默认的日志框架Logback<br>Logback相关设置，可以在<code>application.properties</code>中进行如下配置：</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日志文件路径</span></span><br><span class="line"><span class="string">logging.file=D:/my_log.log</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志打印级别</span></span><br><span class="line"><span class="string">logging.level.org.springframework=INFO</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然，也可以直接将自己的<code>logback.xml</code>放到项目根路径下</p>
</blockquote>
</li>
<li><p>修改为log4j框架<br>pom中排除对<code>spring-boot-starter-logging</code>的依赖，并加入对<code>spring-boot-starter-log4j</code>的依赖<br>目前maven中央仓库的最新版本是<a href="http://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-log4j" target="_blank" rel="noopener">1.3.8.RELEASE</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>项目根路径下添加<code>log4j.properties</code></p>
</li>
<li><p>修改为log4j2框架<br>与log4j类似，修改pom，增加<code>spring-boot-starter-log4j2</code>依赖<br>目前maven中央仓库的最新版本是<a href="http://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-log4j2" target="_blank" rel="noopener">1.4.2.RELEASE</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>项目根路径下添加<code>log4j2.xml</code></p>
</li>
</ul>
<hr>
<p><strong>说明</strong><br>这里需要说明一个问题，如果切换为其它log框架，<code>debug=true</code>将会失效，需要在各自的log配置文件中声明，比如log4j需要添加<code>log4j.logger.org.springframework.boot=debug</code></p>
<hr>
<h2 id="修改内置Tomcat为Jetty"><a href="#修改内置Tomcat为Jetty" class="headerlink" title="修改内置Tomcat为Jetty"></a>修改内置Tomcat为Jetty</h2><ul>
<li>修改pom，去除<code>spring-boot-starter-tomcat</code>的依赖，增加<code>spring-boot-starter-jetty</code>依赖<br>目前maven中央仓库的最新版本是<a href="http://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jetty" target="_blank" rel="noopener">1.4.2.RELEASE</a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><code>application.properties</code>中的属性配置与tomcat一致</li>
</ul>
<h2 id="修改内置Tomcat为Undertow容器"><a href="#修改内置Tomcat为Undertow容器" class="headerlink" title="修改内置Tomcat为Undertow容器"></a>修改内置Tomcat为Undertow容器</h2><ul>
<li>修改pom，去除<code>spring-boot-starter-tomcat</code>的依赖，增加<code>spring-boot-starter-undertow</code>依赖<br>目前maven中央仓库的最新版本是<a href="http://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-undertow" target="_blank" rel="noopener">1.4.2.RELEASE</a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><code>application.properties</code>中的属性配置与tomcat一致</li>
</ul>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ul>
<li><p>创建一个单元测试的抽象父类，用于初始化必要的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">//1.4.2.<span class="title">RELEASE</span>中不再需要@<span class="title">SpringApplicationConfiguration</span>和@<span class="title">WebAppConfiguration</span></span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span> </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">abstract</span> <span class="title">class</span> <span class="title">SpringBootTestParent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WebApplicationContext webApplicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>继承抽象父类，并实现测试逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootWebDemoApplicationTests</span> <span class="keyword">extends</span> <span class="title">SpringBootTestParent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String content = <span class="string">"456"</span>;</span><br><span class="line">        System.out.println(demoService.printContent(content));</span><br><span class="line">        Assert.assertEquals(content,demoService.printContent(content));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">DemoControllerContent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String uri = <span class="string">"/content/123"</span>;</span><br><span class="line">        MvcResult mvcResult;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mvcResult = mockMvc.perform(MockMvcRequestBuilders.get(uri)).andReturn();</span><br><span class="line">            System.out.println(mvcResult.getResponse().getStatus() + <span class="string">"##"</span> + mvcResult.getResponse().getContentAsString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="使用war包的形式运行项目"><a href="#使用war包的形式运行项目" class="headerlink" title="使用war包的形式运行项目"></a>使用war包的形式运行项目</h2><p>上面我们介绍了SpringBoot通过jar的形式运行项目的方法，这也是SpringBoot推荐的方式，因其内置Servlet容器，所以发布和部署都非常方便，但是某些情况下（比如使用JSP作为VIEW层，内置容器的形式并不能支持），我们希望将web项目部署到自己的容器中，这时候就需要将SpringBoot项目打成war包部署，有两种方式：<br>1.创建项目时打包方式选择：war<br><img src="/images_glob/spring-boot-study/war1.png" alt=""></p>
<blockquote>
<p>war项目目录结构<br><img src="/images_glob/spring-boot-study/war2.png" alt=""></p>
</blockquote>
<p>2.将原打包方式为jar的项目修改为war形式<br>与war项目对比发现，通过修改如下内容，可以将jar项目修改为war项目<br>2.1 pom中将<code>&lt;packaging&gt;jar&lt;/packaging&gt;</code>==&gt;<code>&lt;packaging&gt;war&lt;/packaging&gt;</code><br>2.2 pom中添加tomcat依赖，显示声明scope为provided，这样打包时就不会将tomcat的jar包打到war中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.3 创建<em>ServletInitializer</em>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(DemoWarApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>Servlet3.0规范，支持将web.xml相关配置也硬编码到代码中，并由<code>javax.servlet.ServletContainerInitializer</code>的实现类负责在容器启动时进行加载</li>
<li>spring提供了一个实现类<code>org.springframework.web.SpringServletContainerInitializer</code>,<br>该类会调用所有<code>org.springframework.web.WebApplicationInitializer</code>的实现类的onStartup(ServletContext servletContext)方法，从而将相关的容器组件注册到容器；</li>
<li>SpringBootServletInitializer就是WebApplicationInitializer的实现类；</li>
<li>我之前写过一篇<a href="http://hanqunfeng.iteye.com/blog/2113820" target="_blank" rel="noopener">SpringMVC4零配置</a>的文章，对零配置感兴趣的同学可以参考。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown编辑器--Sublime Text和Atom</title>
    <url>/2016/12/06/md-subl-atom/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>Markdown 是一种轻量级的「标记语言」，相对于更为复杂的 HTML 标记语言来说Markdown的语法十分简单。<a href="http://baike.baidu.com/link?url=O9XKK1evEVJwA5MXb3ocPV8O5tsSKxUTLUByaLLP6j96MEJfABRnD9u43H_MY2z9HdaZWNy1boxsfGh10Tju3FZclXQnf2XCIALFVxBhiKS" target="_blank" rel="noopener">Markdown百度百科</a>；</li>
<li>Markdown语法说明<a href="http://wowubuntu.com/markdown/#list" target="_blank" rel="noopener">『中文』</a>，<a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">『英文』</a>，Hexo就是基于Markdown语法；</li>
<li>支持Markdown的编辑器很多，这里推荐使用Sublime Text和Atom，因为这两种编辑器对于喜欢编程的人来说都非常熟悉，支持多种语法并且跨平台，所以如果你已经在使用其中之一，就没必要为了使用markdown再安装其它的编辑器了；</li>
</ul>
<a id="more"></a>
<h2 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h2><ul>
<li><a href="http://www.sublimetext.com" target="_blank" rel="noopener">官方网站</a></li>
<li>Sublime默认不支持Markdown语法，需要安装插件，而要为Sublime Text安装插件，需要先安装<code>package control</code>；</li>
<li><a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">Package Control安装方法</a>，简单说就是按『ctrl+`』调出控制台，并根据Sublime Text的版本粘贴相应的脚本并回车执行；</li>
<li>安装完成后按<code>ctrl+shift+p</code> (Win, Linux) or <code>cmd+shift+p</code> (OS X)，调出『Command Palette』，输入<code>package control install</code>回车，等待左下角的缓冲结束会弹出一个输入框，我们在里面输入插件的名称，即可快速筛选出可用的插件；<br><img src="/images_glob/md-subl-atom/subl1.png" alt=""><br><img src="/images_glob/md-subl-atom/subl2.png" alt=""></li>
<li>安装markdown编辑插件：<a href="https://github.com/SublimeText-Markdown/MarkdownEditing" target="_blank" rel="noopener">MarkdownEditing</a><blockquote>
<ol>
<li>在弹出的输入框中输入<code>MarkdownEditing</code>，回车安装，安装后需要重新启动Sublime Text；</li>
</ol>
<ul>
<li>新建文件后缀为md，则会自动开启markdown语法支持；</li>
<li>非md后缀文件，可以按<code>ctrl+shift+p</code> (Win, Linux) or <code>cmd+shift+p</code> (OS X)，调出『Command Palette』，输入<code>markdown</code>回车来开启markdown语法支持；</li>
</ul>
</blockquote>
</li>
<li>安装markdown查看插件：<a href="http://theo.im/OmniMarkupPreviewer/" target="_blank" rel="noopener">OmniMarkupPreviwer</a><blockquote>
<ol>
<li>在弹出的输入框中输入<code>OmniMarkupPreviwer</code>，回车安装，安装后需要重新启动Sublime Text；</li>
</ol>
<ul>
<li>打开markdown的文档，按<code>ctrl+alt+o</code> (Win, Linux) or <code>cmd+alt+o</code> (OS X)，会打开浏览器对当前文档查看效果；</li>
</ul>
</blockquote>
</li>
<li>可以通过下面的方式查看所有安装的插件，并对其进行个性化配置；<br><img src="/images_glob/md-subl-atom/subl3.png" alt=""></li>
</ul>
<h2 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h2><ul>
<li><a href="https://atom.io" target="_blank" rel="noopener">官方网站</a></li>
<li>Atom是github开发的开源跨平台的编辑器，Atom的强大可以与大名鼎鼎的Sublime Text相媲美。其使用方式与Sublime Text类似，所以如果会使用Sublime Text，上手Atom会很快。而且与Sublime Text相比，Atom是免费的，但是由于其安装包大小接近百兆，所以对于轻量级编辑器来说略显笨重；</li>
<li>Atom内置了对markdown的支持，编辑markdown文档时，按<code>ctrl+shift+M</code>即可打开实时预览窗口，这点比Sublime Text方便很多；</li>
<li>对于非md结尾的文档，可以通过点击右下角的语法格式条，在弹出筛选框输入<code>markdown</code>进行语法切换；</li>
<li>可以按<code>ctrl+,</code> (Win, Linux) or <code>cmd+,</code>(OS X)，调出Atom的Settings，对其进行设置以及插件的管理;<br><img src="/images_glob/md-subl-atom/atom1.png" alt=""></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>Atom相比Sublime Text来说一个新的产物，目前还不是很普及，不过Atom从一开始就整合了Sublime Text优点，同时提供了更友好的配置和管理方式，安装与卸载插件更加的方便；</p>
</li>
<li><p>编程时我们经常喜欢使用<code>snippets+tab</code>补全的方式来快速生成代码块，Atom和Sublime Text都支持snippets</p>
</li>
<li><p>Atom</p>
<blockquote>
<p>按<code>ctrl+shift+p</code> (Win, Linux) or <code>cmd+shift+p</code> (OS X)，调出『Command Palette』，输入<code>Snippet: Available</code>，可以调出snippets筛选框；</p>
</blockquote>
</li>
<li><p>Sublime Text</p>
<blockquote>
<p>按<code>ctrl+shift+p</code> (Win, Linux) or <code>cmd+shift+p</code> (OS X)，调出『Command Palette』，输入<code>Snippet:</code>，可以调出snippets筛选框；</p>
</blockquote>
</li>
<li><p>在Atom的Settings中，我们可以搜索相应的插件，并点击『settings』，可以在其中查看到其所支持的snippets，语法与Sublime Text一致；<br><img src="/images_glob/md-subl-atom/atom2.png" alt=""><br><img src="/images_glob/md-subl-atom/atom3.png" alt=""></p>
</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo--解决百度不能索引git page的问题</title>
    <url>/2016/12/05/hexo-baidu-coding/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>由于git page网站对百度spider进行了屏蔽，所以导致了百度是无法对我们发布在git page上的网站进行索引；</li>
<li>解决方式是将我们的代码发布到国内的coding站点，其同样可以提供代码托管和Pages服务；<a id="more"></a>

</li>
</ul>
<h2 id="Coding配置"><a href="#Coding配置" class="headerlink" title="Coding配置"></a>Coding配置</h2><ul>
<li><a href="https://coding.net" target="_blank" rel="noopener">Coding站点地址</a>，注册个帐号</li>
<li>新建一个项目，比如：<br><img src="/images_glob/hexo-baidu-coding/coding1.png" alt=""></li>
<li>设置SSH公钥，实现免密提交代码，如下图，将我们设置github page时生成的公钥填入其中，这里注意，要去掉最后面的邮箱地址。<a href="/2016/11/14/hexo_gitpage/">参考</a><br><img src="/images_glob/hexo-baidu-coding/coding2.png" alt=""></li>
<li>新建coding-pages分支，并设置为默认<br><img src="/images_glob/hexo-baidu-coding/coding3.png" alt=""></li>
<li>开启Pages服务<br><img src="/images_glob/hexo-baidu-coding/coding4.png" alt=""><blockquote>
<p>注意，此时提交代码后，可以通过<a href="http://hanqunfeng.coding.me" target="_blank" rel="noopener">http://hanqunfeng.coding.me</a>访问</p>
</blockquote>
</li>
</ul>
<h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><ul>
<li><p>hexo支持多仓库发布</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/hanqunfeng/hanqunfeng.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://git.coding.net/hanqunfeng/hanqunfeng.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">coding-pages</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>hexo d</code>，会将代码同时发布到github和coding</p>
</li>
</ul>
<h2 id="域名解析–Dnspod"><a href="#域名解析–Dnspod" class="headerlink" title="域名解析–Dnspod"></a>域名解析–Dnspod</h2><ul>
<li>因为代码同时发布到github和coding，所以我希望国内用户访问coding，国外用户访问github，这样可以提高访问效率；</li>
<li>使用Dnspod实现域名解析，其支持让来源为指定线路的用户访问特定的地址；</li>
<li>注册一个Dnspod帐号，注册成功后在【域名解析】中添加一个域名，我这里添加的就是<code>hanqunfeng.com</code>；<br><img src="/images_glob/hexo-baidu-coding/coding5.png" alt=""></li>
<li>添加成功后会自动解析出两个记录类型为A的记录，选择导入；</li>
<li>之后手工添加两条记录，一个CNAME到hanqunfeng.github.io.【国外】，一个CNAME到hanqunfeng.coding.me.【国内】，如下：<br><img src="/images_glob/hexo-baidu-coding/coding6.png" alt=""><blockquote>
<p>注意记录值最后都要加个点</p>
</blockquote>
</li>
</ul>
<h2 id="修改万网的域名DNS"><a href="#修改万网的域名DNS" class="headerlink" title="修改万网的域名DNS"></a>修改万网的域名DNS</h2><ul>
<li>因为我的域名是在万网购买的，所以要想Dnspod起作用，需要修改万网中的DNS为Dnspod提供的地址；</li>
<li><a href="https://help.aliyun.com/knowledge_detail/39845.html" target="_blank" rel="noopener">万网域名修改 DNS 方法</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f1g1ns1.dnspod.net</span><br><span class="line">f1g1ns2.dnspod.net</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Coding-Pages服务中配置映射域名"><a href="#Coding-Pages服务中配置映射域名" class="headerlink" title="Coding Pages服务中配置映射域名"></a>Coding Pages服务中配置映射域名</h2><p><img src="/images_glob/hexo-baidu-coding/coding7.png" alt=""></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo--百度和谷歌搜索引擎索引方法</title>
    <url>/2016/12/05/hexo-baidu-google/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>让百度和谷歌搜索引擎对当前站点进行索引的方法。</li>
<li>由于国内对谷歌的访问限制，所以可以使用chrome浏览器安装『谷歌访问助手』插件，<a href="http://jingyan.baidu.com/article/fa4125acdb25fa28ac70921d.html" target="_blank" rel="noopener">安装方法</a><a id="more"></a>

</li>
</ul>
<h2 id="百度搜索"><a href="#百度搜索" class="headerlink" title="百度搜索"></a>百度搜索</h2><ul>
<li>需要拥有百度帐号，并进行<a href="http://zhanzhang.baidu.com/site/siteadd" target="_blank" rel="noopener">网站验证</a>，因为我已经验证过blog.hanqunfneg.com，所以这里为了演示，使用<a href="http://www.hanqunfeng.com进行验证。" target="_blank" rel="noopener">www.hanqunfeng.com进行验证。</a><br><img src="/images_glob/hexo-baidu-google/b1.png" alt=""></li>
<li>推荐『HTML 文件上传』的方式进行验证</li>
<li>将百度的验证文件，如我的是baidu_verify_5T5OVCioxp.html下载到本地，并拷贝到source目录下，并在文件上方增加如下内容,这样可以保证该文件不会被编译：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">layout: <span class="literal">false</span></span><br><span class="line">---</span><br><span class="line">5T5OVCioxp</span><br></pre></td></tr></table></figure></li>
<li>编译并发布，之后在刚才的下载页面进行验证<br><img src="/images_glob/hexo-baidu-google/b2.png" alt=""></li>
</ul>
<h2 id="谷歌搜索"><a href="#谷歌搜索" class="headerlink" title="谷歌搜索"></a>谷歌搜索</h2><ul>
<li>需要拥有谷歌帐号，并进行<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">网站验证</a><br><img src="/images_glob/hexo-baidu-google/g1.png" alt=""></li>
<li>推荐『HTML 文件上传』的方式进行验证</li>
<li>将谷歌的验证文件，如我的是googleea53a22ff4210278.html下载到本地，并拷贝到source目录下，并在文件上方增加如下内容,这样可以保证该文件不会被编译：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">layout: <span class="literal">false</span></span><br><span class="line">---</span><br><span class="line">google-site-verification: googleea53a22ff4210278.html</span><br></pre></td></tr></table></figure></li>
<li>编译并发布，之后在刚才的下载页面进行验证<br><img src="/images_glob/hexo-baidu-google/g2.png" alt=""></li>
</ul>
<h2 id="插件站点地图安装"><a href="#插件站点地图安装" class="headerlink" title="插件站点地图安装"></a>插件站点地图安装</h2><ul>
<li><p>分别使用以下命令来安装针对百度和Google的地图插件，在站点的根目录下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置hexo的站点配置文件_config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启用相应插件</span></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-sitemap</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-baidu-sitemap</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置站点地图文件</span></span><br><span class="line"><span class="comment">#sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">sitemap.xml</span>    </span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>hexo g</code>，当你成功编译并在Public目录下生成对应的baidusitemap.xml(针对百度)，sitemap.xml(针对Google)表明你已经成功建立的站点地图。</p>
</li>
</ul>
<h2 id="收录站点地图"><a href="#收录站点地图" class="headerlink" title="收录站点地图"></a>收录站点地图</h2><ul>
<li>百度推送<blockquote>
<p>入口：<a href="http://zhanzhang.baidu.com/linksubmit/index" target="_blank" rel="noopener">百度站长–网页抓取–链接提交</a><br><img src="/images_glob/hexo-baidu-google/bt1.png" alt=""></p>
</blockquote>
</li>
<li>谷歌推送<blockquote>
<p>入口：<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">Google Search Console–抓取–站点地图</a><br><img src="/images_glob/hexo-baidu-google/gt1.png" alt=""></p>
</blockquote>
</li>
</ul>
<h2 id="百度推送方式–自动推送"><a href="#百度推送方式–自动推送" class="headerlink" title="百度推送方式–自动推送"></a>百度推送方式–自动推送</h2><ul>
<li>索引效率：主动推送&gt;自动推送&gt;sitemap</li>
<li>百度的网站上有说明，<a href="http://zhanzhang.baidu.com/linksubmit/index" target="_blank" rel="noopener">地址</a></li>
<li>将自动推送的js脚本拷贝到<code>themes\next\layout\_partials\footer.swig</code>文件的最下方即可</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记</title>
    <url>/2016/12/02/book/</url>
    <content><![CDATA[<h2 id="资料列表"><a href="#资料列表" class="headerlink" title="资料列表"></a>资料列表</h2><ul>
<li><a href="/book/zabbix">CentOS7下zabbix3.2的安装及使用</a></li>
<li><a href="/book/rancher">Rancher–Docker的管理控制台</a></li>
<li><a href="/book/git">git学习笔记</a></li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo初体验</title>
    <url>/2016/12/01/dubbo_dubbox/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li><a href="http://dubbo.io/Home-zh.htm" target="_blank" rel="noopener">官网地址</a>，官网有完整的资料以帮助使用者快速熟悉dubbo，不过目前相关下载地址已经失效，代码已经迁移到github，请参看下面的代码地址，自行编译打包</li>
</ul>
<a id="more"></a>

<h2 id="dubbo代码地址"><a href="#dubbo代码地址" class="headerlink" title="dubbo代码地址"></a>dubbo代码地址</h2><blockquote>
<ul>
<li><a href="https://github.com/alibaba/dubbo" target="_blank" rel="noopener">2.5.4(官方版本)</a>，基于spring3.2.16.RELEASE</li>
<li><a href="https://github.com/dangdangdotcom/dubbox" target="_blank" rel="noopener">2.8.4(第三方基于2.5.3修改)</a>，基于spring3.2.9.RELEASE,项目名称为dubbox，但生成的包名依然是dubbo</li>
</ul>
</blockquote>
<h2 id="git、maven、jdk、tomcat、nexus请自行安装，我安装的版本如下"><a href="#git、maven、jdk、tomcat、nexus请自行安装，我安装的版本如下" class="headerlink" title="git、maven、jdk、tomcat、nexus请自行安装，我安装的版本如下"></a>git、maven、jdk、tomcat、nexus请自行安装，我安装的版本如下</h2><blockquote>
<p>git version 2.9.3<br>Apache Maven 3.3.9<br>java version “1.8.0_31”<br>tomcat version 8.5.4<br>nexus version 2.5.0-04</p>
</blockquote>
<h2 id="编译打包"><a href="#编译打包" class="headerlink" title="编译打包"></a>编译打包</h2><h3 id="以dubbo2-8-4为例"><a href="#以dubbo2-8-4为例" class="headerlink" title="以dubbo2.8.4为例"></a>以dubbo2.8.4为例</h3><blockquote>
<ul>
<li>git clone <a href="https://github.com/dangdangdotcom/dubbox.git" target="_blank" rel="noopener">https://github.com/dangdangdotcom/dubbox.git</a></li>
<li>cd dubbox </li>
<li>mvn clean package install -Dmaven.test.skip=true</li>
</ul>
</blockquote>
<h3 id="发布dubbo2-8-4到nexus的3rd-party仓库"><a href="#发布dubbo2-8-4到nexus的3rd-party仓库" class="headerlink" title="发布dubbo2.8.4到nexus的3rd party仓库"></a>发布dubbo2.8.4到nexus的3rd party仓库</h3><blockquote>
<ul>
<li>登录nexus，设置3rd party的Deployment Policy=Allow Redeploy(在Configuration中配置)</li>
<li>vi ~/.m2/settings.xml，在servers中增加如下配置</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>修改dubbox的pom.xml，增加如下配置</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.36.49:8080/nexus/content/repositories/thirdparty/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>mvn clean package deploy -Dmaven.test.skip=true</li>
</ul>
</blockquote>
<h3 id="发布dubbo2-5-4到nexus的3rd-party仓库"><a href="#发布dubbo2-5-4到nexus的3rd-party仓库" class="headerlink" title="发布dubbo2.5.4到nexus的3rd party仓库"></a>发布dubbo2.5.4到nexus的3rd party仓库</h3><blockquote>
<ul>
<li>因为目前2.5.4是Snapshots版本，所以不能直接发布到3rd party中，如果要发布到3rd party，需要修改pom.xml，去掉版本号中的Snapshots，比如在intellij IDEA中，使用快捷键Command+Shift+R；</li>
</ul>
</blockquote>
<h2 id="dubbo包含四个组件"><a href="#dubbo包含四个组件" class="headerlink" title="dubbo包含四个组件"></a>dubbo包含四个组件</h2><ul>
<li>Provider: 暴露服务的服务提供方。这里我们自己提供(基于2.8.4)；</li>
<li>Consumer: 调用远程服务的服务消费方。这里我们自己提供(基于2.8.4)；</li>
<li>Registry: 服务注册与发现的注册中心。这里使用zookeeper；</li>
<li>Monitor: 统计服务的调用次调和调用时间的监控中心。这里介绍两个，一个是dubbo提供的dubbo-monitor-simple，另一个是第三方对dubbo-monitor-simple的改进版本：<a href="http://git.oschina.net/handu/dubbo-monitor" target="_blank" rel="noopener">改版的monitor(基于2.8.4)</a></li>
</ul>
<hr>
<p>下面分别介绍：顺序为Registry，Provider，Consumer，Monitor。</p>
<hr>
<h2 id="ZooKeeper-Registry注册中心"><a href="#ZooKeeper-Registry注册中心" class="headerlink" title="ZooKeeper Registry注册中心"></a>ZooKeeper Registry注册中心</h2><p><a href="http://zookeeper.apache.org" target="_blank" rel="noopener">官网地址</a></p>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://apache.fayea.com/zookeeper/zookeeper-3.4.9/zookeeper-3.4.9.tar.gz</span><br><span class="line">$ tar zxvf zookeeper-3.4.9.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> zookeeper-3.4.9</span><br><span class="line">$ cp conf/zoo_sample.cfg conf/zoo.cfg</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>$ vi conf/zoo.cfg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment">#实际上只需要配置dataDir，这里修改为自己的存储目录</span></span><br><span class="line">dataDir=/usr/<span class="built_in">local</span>/zookeeper-3.4.9/data</span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure>

<h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><ul>
<li><p>分别在两台主机上按上述方法安装zookeeper，比如两台主机的IP分别为192.168.37.144、192.168.37.143；</p>
</li>
<li><p>分别在两台主机的zoo.cfg中增加如下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server.1=192.168.37.144:2555:3555</span><br><span class="line">server.2=192.168.37.143:2555:3555</span><br></pre></td></tr></table></figure></li>
<li><p>在144主机的dataDir指定的目录(/usr/local/zookeeper-3.4.9/data)下创建文件myid</p>
<blockquote>
<p>vi myid<br>设置内容为1  #就是zoo.cfg中server.后面对应的数字</p>
</blockquote>
</li>
<li><p>同理将143的myid文件中内容设置为2</p>
</li>
</ul>
<h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><ul>
<li>两台主机分别开放2181，2555，3555端口<br>vi /etc/sysconfig/iptablse，加入如下内容<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#zookeeper</span></span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 2181 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 2555 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 3555 -j ACCEPT</span><br></pre></td></tr></table></figure></li>
<li>重启iptables</li>
</ul>
<h3 id="启动与关闭zookeeper"><a href="#启动与关闭zookeeper" class="headerlink" title="启动与关闭zookeeper"></a>启动与关闭zookeeper</h3><p>./bin/zkServer.sh start<br>./bin/zkServer.sh stop</p>
<h3 id="查看在zookeeper中注册的信息"><a href="#查看在zookeeper中注册的信息" class="headerlink" title="查看在zookeeper中注册的信息"></a>查看在zookeeper中注册的信息</h3><p>echo dump | nc 192.168.37.144 2181<br>OR<br>telnet 192.168.37.144 2188<br>dump</p>
<hr>
<p>关于Provider&amp;Consumer，阿里官方的实例很详细了，网上也有很多资料，这里只做简单的说明，示例项目依赖于dubbo2.8.4,spring替换为4.3.3，使用中并未见异常，示例源码地址:<a href="https://github.com/hanqunfeng/DubboStudy" target="_blank" rel="noopener">https://github.com/hanqunfeng/DubboStudy</a></p>
<hr>
<h2 id="Provider-服务提供者"><a href="#Provider-服务提供者" class="headerlink" title="Provider 服务提供者"></a>Provider 服务提供者</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 一个项目中只能有一个dubbo:application配置项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-provider"</span> <span class="attr">owner</span>=<span class="string">"hanqf"</span> <span class="attr">organization</span>=<span class="string">"dubbox"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用zookeeper注册中心暴露服务地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span></span></span><br><span class="line"><span class="tag">            <span class="attr">address</span>=<span class="string">"zookeeper://192.168.37.144:2181?backup=192.168.37.143:2181"</span> <span class="attr">timeout</span>=<span class="string">"50000"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口 服务实现类是通过注解注册的，所以此处不需要声明实现类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"web.function.demo.service.DemoService"</span> <span class="attr">ref</span>=<span class="string">"demoService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"web.function.demo.service.Demo2Service"</span> <span class="attr">ref</span>=<span class="string">"demo2Service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用monitor服务，只有配置这个，才会主动向monitor推送信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">"registry"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>不同的Provider之间可以使用相同的应用名称（比如这里是name=”demo-provider”），因为注册的服务只基于服务所在服务器的ip地址和dubbo协议开放的端口号，两者有一个不相同即可，但是不建议这样做。</li>
<li>对于提供相同服务的Provider，也就是副本（同一个war包，部署到不同主机），则可以不去修改name，但是对于提供不同服务的Provider，不要使用相同的name，这样不便于在monitor中查看。</li>
<li>对于同一个Provider，要在同一台主机中部署（同一个war包，部署到同一台主机），则需要修改duboo协议端口，比如示例代码中的dubbo-provider和dubbo-provider02，因为两者提供相同的服务，所以应用名称相同，但是因为都在本机部署，所以一个用20880，一个使用20881</li>
</ul>
</blockquote>
<h2 id="Consumer-服务消费者"><a href="#Consumer-服务消费者" class="headerlink" title="Consumer 服务消费者"></a>Consumer 服务消费者</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-consumer"</span> <span class="attr">owner</span>=<span class="string">"hanqf"</span> <span class="attr">organization</span>=<span class="string">"dubbox"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置check的缺省值，如果配置中有显式的声明，如：&lt;dubbo:reference check="true"/&gt;，不会受影响 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 关闭所有服务的启动时检查,注意：如果关闭某个服务的启动时检查，需要在指定的服务单独配置check="false" --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">address</span>=<span class="string">"192.168.37.144:2181,192.168.37.143:2181"</span> <span class="attr">timeout</span>=<span class="string">"50000"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"web.function.demo.service.DemoService"</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">timeout</span>=<span class="string">"50000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"web.function.demo.service.Demo2Service"</span> <span class="attr">id</span>=<span class="string">"demo2Service"</span> <span class="attr">timeout</span>=<span class="string">"50000"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">"registry"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>Consumer和Provider如果部署在同一台主机，可以使用相同的dubbo协议端口，两者不受影响</li>
</ul>
</blockquote>
<hr>
<p>关于相关配置属性的说明，还是参考官方资料吧，在dubbo源码中已经包含了Consumer和Provider的示例，可以作为参考。</p>
<hr>
<h2 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h2><h3 id="dubbo-monitor-simple-简易监控中心"><a href="#dubbo-monitor-simple-简易监控中心" class="headerlink" title="dubbo-monitor-simple 简易监控中心"></a>dubbo-monitor-simple 简易监控中心</h3><ul>
<li>dubbo项目源码中已经自带了一个Monitor，就是dubbo-monitor-simple，使用maven编译后，会在dubbox/dubbo-simple/dubbo-monitor-simple/target下生成dubbo-monitor-simple-2.8.4-assembly.tar.gz</li>
<li>将dubbo-monitor-simple-2.8.4-assembly.tar.gz拷贝的合适的地方并解压<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> dubbo-monitor-simple-2.8.4</span><br><span class="line">$ vi conf/dubbo.properties</span><br></pre></td></tr></table></figure></li>
<li>主要修改zookeeper地址、端口、绘图目录（该目录必须手工创建，比如这里是/Users/hanqunfeng/monitor）：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dubbo.container=log4j,spring,registry,jetty</span><br><span class="line">dubbo.application.name=simple-monitor</span><br><span class="line">dubbo.application.owner=</span><br><span class="line"><span class="comment">#dubbo.registry.address=multicast://224.5.6.7:1234</span></span><br><span class="line">dubbo.registry.address=zookeeper://192.168.37.144:2181?backup=192.168.37.143:2181</span><br><span class="line"><span class="comment">#dubbo.registry.address=redis://127.0.0.1:6379</span></span><br><span class="line"><span class="comment">#dubbo.registry.address=dubbo://127.0.0.1:9090</span></span><br><span class="line">dubbo.protocol.port=7070</span><br><span class="line">dubbo.jetty.port=8085</span><br><span class="line">dubbo.jetty.directory=/Users/hanqunfeng/monitor</span><br><span class="line">dubbo.charts.directory=<span class="variable">$&#123;dubbo.jetty.directory&#125;</span>/charts</span><br><span class="line">dubbo.statistics.directory=/Users/hanqunfeng/monitor/statistics</span><br><span class="line">dubbo.log4j.file=logs/dubbo-monitor-simple.log</span><br><span class="line">dubbo.log4j.level=WARN</span><br></pre></td></tr></table></figure></li>
<li>启动与关闭<blockquote>
<p>./bin/start.sh<br>./bin/stop.sh</p>
</blockquote>
</li>
<li>浏览器访问<a href="http://localhost:8085，图表中的效果是注册了Provider，Consumer的效果">http://localhost:8085，图表中的效果是注册了Provider，Consumer的效果</a><br><img src="/images_glob/dubbo_simple_monitor.png" alt=""></li>
</ul>
<h3 id="改版的monitor-基于2-8-4"><a href="#改版的monitor-基于2-8-4" class="headerlink" title="改版的monitor(基于2.8.4)"></a>改版的monitor(基于2.8.4)</h3><ul>
<li>特点：使用mysql作为数据存储，界面使用bootstrap进行优化</li>
<li>下载<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> http://git.oschina.net/handu/dubbo-monitor</span><br><span class="line">$ <span class="built_in">cd</span> dubbo-monitor</span><br></pre></td></tr></table></figure></li>
<li>配置<br>vi src/main/resources/application.properties，修改zookeeper地址，端口，数据库信息<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dubbo.application.name=dubbo-monitor</span><br><span class="line">dubbo.application.owner=hanqunfeng</span><br><span class="line">dubbo.registry.address=zookeeper://192.168.37.144:2181?backup=192.168.37.143:2181</span><br><span class="line">dubbo.protocol.port=6060</span><br><span class="line"></span><br><span class="line"><span class="comment"># Database Settings</span></span><br><span class="line">db.url=jdbc:mysql://127.0.0.1:3306/monitor?prepStmtCacheSize=517&amp;cachePrepStmts=<span class="literal">true</span>&amp;autoReconnect=<span class="literal">true</span>&amp;characterEncoding=utf-8</span><br><span class="line">db.username=root</span><br><span class="line">db.password=password</span><br><span class="line">db.maxActive=500</span><br><span class="line"></span><br><span class="line"><span class="comment"># System Manager</span></span><br><span class="line">manager.username=admin</span><br><span class="line">manager.password=admin</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>数据库初始化</p>
<blockquote>
<ul>
<li>创建monitor数据库</li>
<li>执行sql目录下的create.sql</li>
</ul>
</blockquote>
</li>
<li><p>打包<br>mvn clean package -Dmaven.test.skip=true</p>
<blockquote>
<p>基于本地nexus编译打包时，提示找不到jetbrick-template-2.0.10.jar，去maven中央仓库<a href="http://mvnrepository.com/artifact/com.github.subchen/jetbrick-template/2.0.10" target="_blank" rel="noopener">下载</a>再上传到nexus中吧。</p>
</blockquote>
</li>
<li><p>部署<br>将生成的dubbo-monitor.war包部署到tomcat中，启动tomcat（端口8084）<br>访问地址<a href="http://localhost:8084/dubbo-monitor" target="_blank" rel="noopener">http://localhost:8084/dubbo-monitor</a><br><img src="/images_glob/dubbo-monitor.png" alt=""></p>
</li>
</ul>
<hr>
<p>最后说一下dubbo-admin，这个是dubbo官方提供的dubbo管理控制台<br>官方说明：管理控制台为内部裁剪版本，开源部分主要包含：路由规则，动态配置，服务降级，访问控制，权重调整，负载均衡，等管理功能。</p>
<hr>
<h2 id="dubbo-admin-管理控制台"><a href="#dubbo-admin-管理控制台" class="headerlink" title="dubbo-admin 管理控制台"></a>dubbo-admin 管理控制台</h2><p>dubbo项目源码中有一个模块叫做dubbo-admin</p>
<blockquote>
<p>cd dubbox/dubbo-admin/src/main/webapp/WEB-INF<br>vi dubbo.properties<br>配置dubbo.registry.address=zookeeper://192.168.37.144:2181?backup=192.168.37.143:2181<br>编译打包，将生成的dubbo-admin-2.8.4.war部署到tomcat<br><img src="/images_glob/dubbo-admin.png" alt=""></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo--NexT主题</title>
    <url>/2016/11/17/hexo-theme-next/</url>
    <content><![CDATA[<h2 id="NexT主题简介"><a href="#NexT主题简介" class="headerlink" title="NexT主题简介"></a>NexT主题简介</h2><ul>
<li>NexT有着完善的使用文档，<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT官方资料</a>；</li>
<li>NexT整合了常用的插件，如评论、分享、统计；</li>
<li>下载安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/blog</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li>
<li><a href="http://www.joryhe.com/2016-05-17-hexoxo-series-for-site-build-basic.html" target="_blank" rel="noopener">第三方参考资料</a></li>
</ul>
<a id="more"></a>
<h2 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h2><h3 id="多说评论和百度统计"><a href="#多说评论和百度统计" class="headerlink" title="多说评论和百度统计"></a>多说评论和百度统计</h3><ul>
<li>NexT主题的_config.yml，配置方式参考<a href="http://blog.hanqunfeng.com/2016/11/16/hexo_duoshuo_baidutongji">Hexo–添加多说评论插件和百度统计插件</a><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多说配置：</span></span><br><span class="line"><span class="comment"># Duoshuo ShortName</span></span><br><span class="line"><span class="attr">duoshuo_shortname:</span> <span class="string">注册前缀</span></span><br><span class="line"><span class="comment"># 开启热评文章</span></span><br><span class="line"><span class="attr">duoshuo_hotartical:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到评论用户的UA信息</span></span><br><span class="line"><span class="comment"># Make duoshuo show UA</span></span><br><span class="line"><span class="comment"># user_id must NOT be null when admin_enable is true!</span></span><br><span class="line"><span class="comment"># you can visit http://dev.duoshuo.com get duoshuo user id.</span></span><br><span class="line"><span class="attr">duoshuo_info:</span></span><br><span class="line">  <span class="attr">ua_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">admin_enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">user_id:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度统计配置：</span></span><br><span class="line"><span class="comment"># Baidu Analytics ID</span></span><br><span class="line"><span class="comment"># 这里只需要填写js代码中hm.js链接的参数(如下：xxxxxxx)部分，而不再需要将整个js配置到模板中</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">xxxxxxx</span></span><br></pre></td></tr></table></figure></li>
<li>百度统计代码<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _hmt = _hmt || [];</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  hm.src = <span class="string">"https://hm.baidu.com/hm.js?xxxxxxx"</span>;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>]; </span><br><span class="line">  s.parentNode.insertBefore(hm, s);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h3><ul>
<li>NexT主题的_config.yml，其它主题配置方式<a href="http://share.baidu.com" target="_blank" rel="noopener">参考地址</a><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Baidu Share</span></span><br><span class="line"><span class="comment"># Available value:</span></span><br><span class="line"><span class="comment">#    button | slide</span></span><br><span class="line"><span class="comment"># Warning: Baidu Share does not support https.</span></span><br><span class="line"><span class="attr">baidushare:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">button</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="阅读次数"><a href="#阅读次数" class="headerlink" title="阅读次数"></a>阅读次数</h3><ul>
<li>注册<a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a>帐号，在LeanCloud中创建应用，具体配置方式查看<a href="https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html#配置LeanCloud" target="_blank" rel="noopener">参考资料</a>。</li>
<li>复制AppID以及AppKey并在NexT主题的_config.yml文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">E9UJsJpw1omCHuS22PdSpKoh</span></span><br></pre></td></tr></table></figure></li>
<li>这里要注意，一定要在LeanCloud中的安全中心配置Web安全域名，否则不能正常统计</li>
</ul>
<h3 id="字数统计和阅读时常"><a href="#字数统计和阅读时常" class="headerlink" title="字数统计和阅读时常"></a>字数统计和阅读时常</h3><ul>
<li><a href="http://www.joryhe.com/2016-06-06-hexo_wordcount_setting_your_post.html" target="_blank" rel="noopener">参考资料</a></li>
<li>安装hexo-wordcount插件，在站点的根目录下执行以下命令：<br><code>npm install hexo-wordcount --save</code></li>
<li>修改模板位置：<code>themes\next\layout\_macro\post.swig</code>，插入代码如下：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 查找如下代码段：</span><br><span class="line">         &#123;# LeanCould PageView #&#125;</span><br><span class="line">         &#123;% if theme.leancloud_visitors.enable %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"&#123;&#123; url_for(post.path) &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"leancloud_visitors"</span> <span class="attr">data-flag-title</span>=<span class="string">"&#123;&#123; post.title &#125;&#125;"</span>&gt;</span></span><br><span class="line">         <span class="symbol">&amp;nbsp;</span> | <span class="symbol">&amp;nbsp;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>&#123;&#123;__('post.visitors')&#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"leancloud-visitors-count"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"># 添加如下代码段：      </span><br><span class="line"># 以下部分为：字数统计、阅读时长插入代码</span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">       <span class="symbol">&amp;nbsp;</span> | <span class="symbol">&amp;nbsp;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-calendar-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>字数统计:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>&#123;&#123; wordcount(post.content) &#125;&#125;(字)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">         <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">       <span class="symbol">&amp;nbsp;</span> | <span class="symbol">&amp;nbsp;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-calendar-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>阅读时长:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>&#123;&#123; min2read(post.content) &#125;&#125;(分)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">         <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"># 以上部分为：字数统计、阅读时长插入代码</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h3><ul>
<li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：<br><code>$ npm install hexo-generator-searchdb --save</code></li>
<li>NexT主题的_config.yml<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></li>
<li>重新编译之后会发现左侧导航栏最下方多出一个搜索菜单</li>
</ul>
<h3 id="标签页和分类页"><a href="#标签页和分类页" class="headerlink" title="标签页和分类页"></a>标签页和分类页</h3><ul>
<li>默认情况下，NexT没有开启标签页和分类页功能</li>
<li>新增标签页</li>
</ul>
<blockquote>
<p>使用命令<code>hexp new page “tags”</code> 并将页面类型设置为tags</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2016-11-17 23:03:47</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>通常情况下你的标签页并不需要评论框，取消评论代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2016-11-17 23:03:47</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在主题配置文件下的菜单设置项memu下设置，设置完成在主页导航可以看到标签导航栏</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  tags: &#x2F;tags</span><br></pre></td></tr></table></figure>

<ul>
<li>新增分类页</li>
</ul>
<blockquote>
<p>使用命令<code>hexp new page categories</code> 并将页面类型设置为categories</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2016-11-17 23:08:35</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通常情况下你的标签页并不需要评论框，取消评论代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2016-11-17 23:08:35</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在主题配置文件下的菜单设置项memu下设置，设置完成在主页导航可以看到分类导航栏</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  categories: &#x2F;categories</span><br></pre></td></tr></table></figure>

<h3 id="设定首页-归档-标签页面文章的篇数"><a href="#设定首页-归档-标签页面文章的篇数" class="headerlink" title="设定首页/归档/标签页面文章的篇数"></a>设定首页/归档/标签页面文章的篇数</h3><ul>
<li>安装如下插件，在站点的根目录下执行以下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-archive --save</span><br><span class="line">$ npm install hexo-generator-tag --save</span><br></pre></td></tr></table></figure></li>
<li>NexT主题的_config.yml<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">yearly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">monthly:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="RSS设置"><a href="#RSS设置" class="headerlink" title="RSS设置"></a>RSS设置</h3><ul>
<li>安装 hexo-generator-feed，在站点的根目录下执行以下命令：<br><code>$ npm install hexo-generator-feed --save</code></li>
<li>NexT主题的_config.yml<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure></li>
<li>编译后，会看到左侧头像下方会显示RSS入口</li>
</ul>
<h3 id="跳过指定文件的渲染"><a href="#跳过指定文件的渲染" class="headerlink" title="跳过指定文件的渲染"></a>跳过指定文件的渲染</h3><ul>
<li>如果某些资源希望放到source下，但是又不希望被编译，可以在hexo的_config.yml中增加如下配置：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">zabbix/**</span> <span class="comment">#跳过zabbix文件夹下的全部子目录和文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">abc.html</span>  <span class="comment">#跳过某一个具体的文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">*.html</span>    <span class="comment">#跳过以html结尾的文件</span></span><br></pre></td></tr></table></figure></li>
<li>比如我的导航菜单中的『资料』，其下面配置的资源就是我从为知笔记中导出的html。</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo--绑定域名到githubpage</title>
    <url>/2016/11/17/hexo-domain-name/</url>
    <content><![CDATA[<h2 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h2><ul>
<li>可以通过<a href="https://wanwang.aliyun.com" target="_blank" rel="noopener">万网</a>购买域名;</li>
<li>比如博主的域名为<code>hanqunfeng.com</code>;</li>
</ul>
<h2 id="添加解析规则"><a href="#添加解析规则" class="headerlink" title="添加解析规则"></a>添加解析规则</h2><ul>
<li>登录阿里云的控制台，进入【域名】，找到自己的域名，点击【解析】</li>
<li>点击【添加解析】<blockquote>
<ul>
<li>『记录类型』：CNAME</li>
<li>『主机记录』：blog #说明：设置为二级域名，也可以设置为www的一级域名</li>
<li>『记录值』：hanqunfeng.github.io.  #注意最后面有个点</li>
</ul>
</blockquote>
</li>
<li>上面的配置表示将blog.hanqunfeng.com的请求定向到hanqunfeng.github.io</li>
</ul>
<a id="more"></a>
<h2 id="blog目录下创建CNAME文件"><a href="#blog目录下创建CNAME文件" class="headerlink" title="blog目录下创建CNAME文件"></a>blog目录下创建CNAME文件</h2><ul>
<li>在自己的blog目录下的<code>/source</code>目录下新建一个文件，命名为CNAME，内容为：blog.hanqunfeng.com</li>
<li><code>hexo cl</code>，<code>hexo g</code>，<code>hexo d</code>，发布到github page</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>购买域名需要进行实名认证；</li>
<li>官方说域名解析最长等待48小时就可以全球生效；</li>
<li>博主配置时，只是提交了实名认证申请，域名解析不到5分钟就可以访问了；</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo--添加多说评论插件和百度统计插件</title>
    <url>/2016/11/16/hexo_duoshuo_baidutongji/</url>
    <content><![CDATA[<h2 id="添加多说评论插件"><a href="#添加多说评论插件" class="headerlink" title="添加多说评论插件"></a>添加多说评论插件</h2><ul>
<li>登录<a href="http://duoshuo.com" target="_blank" rel="noopener">多说官网</a>，多说不支持注册，仅支持绑定社交帐号登录，比如QQ，新浪微博，等等。</li>
<li>登录后会要求进行站点设置，这里需要设置域名、站点名称、首页网址等信息，域名的后缀已经默认为<code>.duoshuo.com</code>,所以我们只需要设置前缀，记住这个前缀。站点名称随便起个名字，首页网站填写<code>https://hanqunfeng.github.io</code>；</li>
</ul>
<a id="more"></a>

<ul>
<li>编辑yilia主题的_config.yml文件，设置如下：<blockquote>
<p> duoshuo: 域名前缀</p>
</blockquote>
</li>
<li>重新发布即可，效果见页面下方的评论区；</li>
<li>在多说管理后台中可以对评论进行管理。</li>
</ul>
<h2 id="添加百度统计插件"><a href="#添加百度统计插件" class="headerlink" title="添加百度统计插件"></a>添加百度统计插件</h2><ul>
<li>注册<a href="http://tongji.baidu.com/web/welcome/login" target="_blank" rel="noopener">百度统计</a>帐号;</li>
<li>新注册用户会要求创建一个网站，设置如下：<br><img src="/images_glob/baidu_tj_net.png" alt="baidu_tj"></li>
<li>登录后在<code>代码管理--》代码获取</code>中复制代码，将其粘贴到yilia主题下的<code>layout/_partial/after-footer.gjs</code>的最下面；</li>
<li>重新发布到github page；</li>
<li>在百度统计管理平台中的<code>代码管理--》代码安装检查</code>查看是否配置正确；</li>
<li>配置无误后，可以通过百度统计平台查看统计数据。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://m.blog.csdn.net/article/details?id=51049695" target="_blank" rel="noopener">http://m.blog.csdn.net/article/details?id=51049695</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
