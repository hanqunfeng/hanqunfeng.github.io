{"version":"https://jsonfeed.org/version/1","name":"飘逸峰的博客","home_page_url":"https://blog.hanqunfeng.com","feed_url":"https://blog.hanqunfeng.com/feed.json","author":{"name":"飘逸峰"},"items":[{"id":"https://blog.hanqunfeng.com/2023/08/08/spring-boot-security-session-rememberme/","url":"https://blog.hanqunfeng.com/2023/08/08/spring-boot-security-session-rememberme/","title":"SpringBoot Security--Session管理与RememberMe","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍在SpringBoot Security中的Session管理与RememberMe</p>\n</li>\n<li class=\"lvl-2\">\n<p>实现了基于内存、Jdbc和Redis三种配置方式</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于SpringBoot-2.7.14和SpringBoot-3.1.2</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"Security配置类\">Security配置类</h2>\n<h3 id=\"SpringBoot-2-7-14\">SpringBoot-2.7.14</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.common.security.CP_UserDetailsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.common.support.CP_ImageFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.csrf.CookieCsrfTokenRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;springboot升级到2.7.x以后的配置方法&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringSecurityConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * session注册器，默认是基于内存的SessionRegistryImpl，也可以配置为jdbc或redis，下文会介绍</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SessionRegistry sessionRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Token存储库，用于记录remember me的用户信息，默认是基于内存的InMemoryTokenRepositoryImpl，也可以配置为jdbc或redis，下文会介绍</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PersistentTokenRepository persistentTokenRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 验证码过滤器，负责登录时验证用户提交的验证码是否有效，本文对此不做介绍</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CP_ImageFilter imageFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 不需要进行验证的url数组</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] ignorings = &#123; <span class=\"string\">&quot;/login.do*&quot;</span>, <span class=\"string\">&quot;/**/*.json*&quot;</span>, <span class=\"string\">&quot;/**/*.xml*&quot;</span>, <span class=\"string\">&quot;/druid/**&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;/forgotPassword.do&quot;</span>, <span class=\"string\">&quot;/forgotPasswordEmail.do&quot;</span>, <span class=\"string\">&quot;/resetPassword.do&quot;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * AuthenticationManager（认证管理器）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManager</span><span class=\"params\">(AuthenticationConfiguration authenticationConfiguration)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;AuthenticationManager&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义一个能够与 HttpServletRequest 匹配的过滤器链。以确定它是否适用于该请求。</span></span><br><span class=\"line\"><span class=\"comment\">     * springboot升级到2.7.x以后的配置方式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    SecurityFilterChain <span class=\"title function_\">filterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;HttpSecurity&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//解决不允许显示在iframe中的问题</span></span><br><span class=\"line\">        http.headers().frameOptions().disable();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置拦截规则</span></span><br><span class=\"line\">        http.authorizeRequests()</span><br><span class=\"line\">                <span class=\"comment\">// 不需要验证的url</span></span><br><span class=\"line\">                .antMatchers(ignorings).permitAll()</span><br><span class=\"line\">                <span class=\"comment\">// 登录即可访问的url</span></span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/&quot;</span>).authenticated()</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/index.do*&quot;</span>).authenticated()</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/welcome.do*&quot;</span>).authenticated()</span><br><span class=\"line\">                <span class=\"comment\">// 自定义规则进行验证,基于权限管理模型的认证,public Boolean hasPerssion(HttpServletRequest request, Authentication authentication)，本文不做介绍</span></span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/**/*.do*&quot;</span>).access(<span class=\"string\">&quot;@rbacService.hasPerssion(request,authentication)&quot;</span>)</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                <span class=\"comment\">// 登录成功但是权限验证失败后的跳转地址</span></span><br><span class=\"line\">                .exceptionHandling().accessDeniedPage(<span class=\"string\">&quot;/access/denied.do&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 开启默认登录页面</span></span><br><span class=\"line\">        <span class=\"comment\">// http.formLogin();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义登录页面</span></span><br><span class=\"line\">        http.formLogin()</span><br><span class=\"line\">                .loginPage(<span class=\"string\">&quot;/login.do&quot;</span>)  <span class=\"comment\">// 登录页面</span></span><br><span class=\"line\">                .failureUrl(<span class=\"string\">&quot;/login.do?login_error=1&quot;</span>) <span class=\"comment\">// 登录失败跳转页面</span></span><br><span class=\"line\">                .defaultSuccessUrl(<span class=\"string\">&quot;/index.do&quot;</span>, <span class=\"literal\">true</span>)  <span class=\"comment\">// 登录成功默认跳转页面，这里设置true表示无论请求哪个地址，登录成功后都跳转到该页面</span></span><br><span class=\"line\">                .loginProcessingUrl(<span class=\"string\">&quot;/j_spring_security_check&quot;</span>) <span class=\"comment\">// 登录页面中的提交登录验证url, 默认 /login</span></span><br><span class=\"line\">                .usernameParameter(<span class=\"string\">&quot;j_username&quot;</span>)  <span class=\"comment\">// 登录页面中的用户名参数，默认username</span></span><br><span class=\"line\">                .passwordParameter(<span class=\"string\">&quot;j_password&quot;</span>)  <span class=\"comment\">// 登录页面中的密码参数，默认password</span></span><br><span class=\"line\">                .permitAll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关闭csrf，如果默认开启csrf，则在生成页面时会自动在每个form中增加一个隐藏属性&lt;input type=&quot;hidden&quot; name=&quot;_csrf&quot; value=&quot;95e8706b-8d22-4d62-9a27-3da5993e0a7d&quot;&gt;，</span></span><br><span class=\"line\">        <span class=\"comment\">// 实际上就是&lt;input type=&quot;hidden&quot; th:name=&quot;$&#123;_csrf.parameterName&#125;&quot; th:value=&quot;$&#123;_csrf.token&#125;&quot; /&gt;，js中如果需要使用时也可以使用该属性</span></span><br><span class=\"line\">        <span class=\"comment\">//http.csrf().disable();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开启csrf，默认开启，csrf不会拦截get请求</span></span><br><span class=\"line\">        http.csrf()</span><br><span class=\"line\">                <span class=\"comment\">//.csrfTokenRepository(new CookieCsrfTokenRepository()) //令牌存储方式，CookieCsrfTokenRepository或者HttpSessionCsrfTokenRepository，默认HttpSessionCsrfTokenRepository</span></span><br><span class=\"line\">                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) <span class=\"comment\">//关闭仅支持http浏览器请求，这样ajax和postMan都可以访问，header需要带上X-CSRF-TOKEN</span></span><br><span class=\"line\">                .ignoringAntMatchers(<span class=\"string\">&quot;/**/json.do*&quot;</span>, <span class=\"string\">&quot;/**/xml.do*&quot;</span>); <span class=\"comment\">//哪些不需要csrf，非浏览器直接访问的地址需要进行屏蔽，因为csrf标签只有页面会自动生成，另外认证接口也需要屏蔽，因为需要第一次获取CSRF-TOKEN</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义注销，这里需要注意的是，如果启用了csrf(默认就是开启)，则logout只能是post提交，如果要get提交，则必须如下配置</span></span><br><span class=\"line\">        http.logout()</span><br><span class=\"line\">                <span class=\"comment\">// 在注销时清除认证信息</span></span><br><span class=\"line\">                .clearAuthentication(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                .logoutRequestMatcher(<span class=\"keyword\">new</span> <span class=\"title class_\">AntPathRequestMatcher</span>(<span class=\"string\">&quot;/logout.do&quot;</span>)) <span class=\"comment\">//get</span></span><br><span class=\"line\">                <span class=\"comment\">//.logoutUrl(&quot;/logout.do&quot;)  //post</span></span><br><span class=\"line\">                .logoutSuccessUrl(<span class=\"string\">&quot;/login.do&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 在注销时使HttpSession失效</span></span><br><span class=\"line\">                .invalidateHttpSession(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// session管理</span></span><br><span class=\"line\">        http.sessionManagement()</span><br><span class=\"line\">                <span class=\"comment\">//默认开启session</span></span><br><span class=\"line\">                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)</span><br><span class=\"line\">                <span class=\"comment\">//每次登录验证将创建一个新的session</span></span><br><span class=\"line\">                .sessionFixation().migrateSession()</span><br><span class=\"line\">                <span class=\"comment\">//同一个用户最大的登录数量</span></span><br><span class=\"line\">                .maximumSessions(<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"comment\">//true表示已经登录就不予许再次登录，false表示允许再次登录但是之前的登录会下线。</span></span><br><span class=\"line\">                .maxSessionsPreventsLogin(<span class=\"literal\">false</span>)</span><br><span class=\"line\">                <span class=\"comment\">//session被下线(超时)之后的显示页面</span></span><br><span class=\"line\">                .expiredUrl(<span class=\"string\">&quot;/access/sameLogin.do&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 会话注册器</span></span><br><span class=\"line\">                .sessionRegistry(sessionRegistry);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// sessionRegistry是session注册器，默认是基于内存的SessionRegistryImpl，此时当用户注销时，Spring Security的默认行为是不会主动从SessionRegistry中移除相关的SessionInformation对象。这意味着注销后，SessionRegistryImpl中仍然保留该用户的会话信息。</span></span><br><span class=\"line\">        <span class=\"comment\">// 但是SessionRegistryImpl里对session的销毁和改变进行了事件监听，我们只需要注册事件发布者HttpSessionEventPublisher即可实现session的自动清理。</span></span><br><span class=\"line\">        <span class=\"comment\">//SessionRegistryImpl使用map来维护session信息，这样在分布式系统(多个副本)中获取会话数就不准确了，</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以这里我们可以使用基于SpringSession的SpringSessionBackedSessionRegistry，其可以绑定基于jdbc的JdbcIndexedSessionRepository或者基于redis的RedisIndexedSessionRepository</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果使用SpringSessionBackedSessionRegistry，这里就不需要HttpSessionEventPublisher的Bean，因为这里Session管理全部交由SpringSession去管理，也就是Session的相关清理工作会自动帮助我们完成。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// RemeberMe</span></span><br><span class=\"line\">        <span class=\"comment\">//http.rememberMe().key(&quot;webmvc#FD637E6D9C0F1A5A67082AF56CE32485&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//两周内免登录</span></span><br><span class=\"line\">        http.rememberMe()</span><br><span class=\"line\">                .rememberMeParameter(<span class=\"string\">&quot;_spring_security_remember_me&quot;</span>) <span class=\"comment\">// 默认 remember-me</span></span><br><span class=\"line\">                .rememberMeCookieName(<span class=\"string\">&quot;remember-me-cookie&quot;</span>)  <span class=\"comment\">//保存在浏览器端的cookie的名称，如果不设置默认也是remember-me</span></span><br><span class=\"line\">                .tokenValiditySeconds(<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">14</span>) <span class=\"comment\">// 单位秒 两周=60*60*24*14</span></span><br><span class=\"line\">                .tokenRepository(persistentTokenRepository); <span class=\"comment\">//Token存储库，用于记录remember me的用户信息，默认内存，也可以配置为数据库或者redis;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 验证码过滤器</span></span><br><span class=\"line\">        http.addFilterBefore(imageFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">        <span class=\"comment\">// 设置userDetailsService</span></span><br><span class=\"line\">        http.userDetailsService(userDetailsService());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ignore的url</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果你需要忽略URL，请考虑通过HttpSecurity.authorizeHttpRequests的permitAll来实现。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//@Bean</span></span><br><span class=\"line\">    <span class=\"comment\">//public WebSecurityCustomizer webSecurityCustomizer() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//    return web -&gt; web.ignoring().antMatchers(ignorings);</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 登录的时候需要获取用户信息，只有登录的时候使用，其余时候使用http.authorizeRequests()中配置的验证规则（验证时，用户名和权限都确定了）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CP_UserDetailsService <span class=\"title function_\">userDetailsService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;CP_UserDetailsService&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">CP_UserDetailsService</span> <span class=\"variable\">userDetailsService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CP_UserDetailsService</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userDetailsService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 认证日志</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> org.springframework.security.authentication.event.LoggerListener <span class=\"title function_\">loggerListener</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;org.springframework.security.authentication.event.LoggerListener&quot;</span>);</span><br><span class=\"line\">        org.springframework.security.authentication.event.<span class=\"type\">LoggerListener</span> <span class=\"variable\">loggerListener</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">org</span>.springframework.security.authentication.event.LoggerListener();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loggerListener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求日志</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> org.springframework.security.access.event.LoggerListener <span class=\"title function_\">eventLoggerListener</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;org.springframework.security.access.event.LoggerListener&quot;</span>);</span><br><span class=\"line\">        org.springframework.security.access.event.<span class=\"type\">LoggerListener</span> <span class=\"variable\">eventLoggerListener</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">org</span>.springframework.security.access.event.LoggerListener();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eventLoggerListener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 密码加密，在进行登录验证时会自动将页面提交的密码通过其进行加密</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SpringBoot-3-1-2\">SpringBoot-3.1.2</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.support.security.CP_ImageFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.support.security.CP_RbacService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.event.LoggerListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authorization.AuthorizationDecision;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.csrf.CookieCsrfTokenRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;springboot升级到3.x.x以后的配置方法&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableMethodSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringSecurityConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SessionRegistry sessionRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PersistentTokenRepository persistentTokenRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CP_RbacService rbacService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CP_ImageFilter imageFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] ignorings = &#123;<span class=\"string\">&quot;/email/**&quot;</span>, <span class=\"string\">&quot;/actuator*/**&quot;</span>, <span class=\"string\">&quot;/admin*/**&quot;</span>, <span class=\"string\">&quot;/logger**&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;/rabbitmq/**&quot;</span>, <span class=\"string\">&quot;/checkcode/**&quot;</span>, <span class=\"string\">&quot;/resource/**&quot;</span>, <span class=\"string\">&quot;/**/*.jsp&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;/access/sameLogin.do&quot;</span>, <span class=\"string\">&quot;/**/*.json*&quot;</span>, <span class=\"string\">&quot;/**/*.xml*&quot;</span>, <span class=\"string\">&quot;/druid/**&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;/forgotPassword.do&quot;</span>, <span class=\"string\">&quot;/forgotPasswordEmail.do&quot;</span>, <span class=\"string\">&quot;/resetPassword.do&quot;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;AntPathRequestMatcher&gt; ignoringsMatcherList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">       ignoringsMatcherList = Arrays.stream(ignorings).map(AntPathRequestMatcher::antMatcher).toList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取AuthenticationManager（认证管理器），登录时认证使用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> authenticationConfiguration</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManager</span><span class=\"params\">(AuthenticationConfiguration authenticationConfiguration)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;AuthenticationManager&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    SecurityFilterChain <span class=\"title function_\">filterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;HttpSecurity&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//解决不允许显示在iframe的问题</span></span><br><span class=\"line\">        http.headers(httpSecurityHeadersConfigurer -&gt; httpSecurityHeadersConfigurer</span><br><span class=\"line\">                .frameOptions(HeadersConfigurer.FrameOptionsConfig::disable));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置拦截规则</span></span><br><span class=\"line\">        http.authorizeHttpRequests(authorizationManagerRequestMatcherRegistry -&gt; authorizationManagerRequestMatcherRegistry</span><br><span class=\"line\">                .requestMatchers(ignoringsMatcherList.toArray(AntPathRequestMatcher[]::<span class=\"keyword\">new</span>)).permitAll()</span><br><span class=\"line\">                .requestMatchers(AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/login.do*&quot;</span>)).permitAll() <span class=\"comment\">// 登录请求不拦截</span></span><br><span class=\"line\">                .requestMatchers(AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/index.do*&quot;</span>)).authenticated()</span><br><span class=\"line\">                .requestMatchers(AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/*.do*&quot;</span>), AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/**/*.do*&quot;</span>)).access((authentication, context) -&gt;</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">AuthorizationDecision</span>(rbacService.hasPerssion(context.getRequest(),authentication.get()))));</span><br><span class=\"line\">            <span class=\"comment\">// 这种方式效果同上，都是开启自定义认证</span></span><br><span class=\"line\">            <span class=\"comment\">//  .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/*.do*&quot;),AntPathRequestMatcher.antMatcher(&quot;/**/*.do*&quot;)).access(webExpressionAuthorizationManager()));</span></span><br><span class=\"line\"></span><br><span class=\"line\">        http.exceptionHandling(exceptionHandlingCustomizer -&gt; exceptionHandlingCustomizer</span><br><span class=\"line\">                .accessDeniedPage(<span class=\"string\">&quot;/access/denied.do&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 开启默认登录页面</span></span><br><span class=\"line\">        http.formLogin(httpSecurityFormLoginConfigurer -&gt; httpSecurityFormLoginConfigurer</span><br><span class=\"line\">                .loginPage(<span class=\"string\">&quot;/login.do&quot;</span>)</span><br><span class=\"line\">                .failureUrl(<span class=\"string\">&quot;/login.do?login_error=1&quot;</span>)</span><br><span class=\"line\">                .defaultSuccessUrl(<span class=\"string\">&quot;/index.do&quot;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">                .loginProcessingUrl(<span class=\"string\">&quot;/j_spring_security_check&quot;</span>) <span class=\"comment\">// 默认 /login</span></span><br><span class=\"line\">                .usernameParameter(<span class=\"string\">&quot;j_username&quot;</span>)  <span class=\"comment\">// 默认username</span></span><br><span class=\"line\">                .passwordParameter(<span class=\"string\">&quot;j_password&quot;</span>)  <span class=\"comment\">// 默认password</span></span><br><span class=\"line\">                .permitAll());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开启csrf，默认开启，csrf不会拦截get请求</span></span><br><span class=\"line\">        http.csrf(httpSecurityCsrfConfigurer -&gt; httpSecurityCsrfConfigurer</span><br><span class=\"line\">                <span class=\"comment\">//关闭仅支持http浏览器请求，这样ajax和postMan都可以访问，header需要带上X-CSRF-TOKEN</span></span><br><span class=\"line\">                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())</span><br><span class=\"line\">                <span class=\"comment\">//哪些不需要csrf，非浏览器直接访问的地址需要进行屏蔽，因为csrf标签只有页面会自动生成，另外认证接口也需要屏蔽，因为需要第一次获取CSRF-TOKEN</span></span><br><span class=\"line\">                .ignoringRequestMatchers(AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/**/json.do*&quot;</span>), AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/**/xml.do*&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义注销，这里需要注意的是，如果启用了csrf(默认就是开启)，则logout只能是post提交，如果要get提交，则必须如下配置</span></span><br><span class=\"line\">        http.logout(httpSecurityLogoutConfigurer -&gt; httpSecurityLogoutConfigurer</span><br><span class=\"line\">                <span class=\"comment\">// 在注销时清除认证信息</span></span><br><span class=\"line\">                .clearAuthentication(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                .logoutRequestMatcher(AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/logout.do&quot;</span>)) <span class=\"comment\">//get</span></span><br><span class=\"line\">                <span class=\"comment\">//.logoutUrl(&quot;/logout.do&quot;)  //post</span></span><br><span class=\"line\">                .logoutSuccessUrl(<span class=\"string\">&quot;/login.do&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 在注销时使HttpSession失效</span></span><br><span class=\"line\">                .invalidateHttpSession(<span class=\"literal\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// session管理</span></span><br><span class=\"line\">        http.sessionManagement(httpSecuritySessionManagementConfigurer -&gt; httpSecuritySessionManagementConfigurer</span><br><span class=\"line\">                <span class=\"comment\">//默认开启session</span></span><br><span class=\"line\">                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)</span><br><span class=\"line\">                <span class=\"comment\">//每次登录验证将创建一个新的session</span></span><br><span class=\"line\">                .sessionFixation().migrateSession()</span><br><span class=\"line\">                <span class=\"comment\">//同一个用户最大的登录数量</span></span><br><span class=\"line\">                .maximumSessions(<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"comment\">//true表示已经登录就不予许再次登录，false表示允许再次登录但是之前的登录会下线。</span></span><br><span class=\"line\">                .maxSessionsPreventsLogin(<span class=\"literal\">false</span>)</span><br><span class=\"line\">                <span class=\"comment\">//session被下线(超时)之后的显示页面</span></span><br><span class=\"line\">                .expiredUrl(<span class=\"string\">&quot;/access/sameLogin.do&quot;</span>)</span><br><span class=\"line\">                .sessionRegistry(sessionRegistry));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// RemeberMe 两周内免登录</span></span><br><span class=\"line\">        http.rememberMe(httpSecurityRememberMeConfigurer -&gt; httpSecurityRememberMeConfigurer</span><br><span class=\"line\">                .rememberMeParameter(<span class=\"string\">&quot;_spring_security_remember_me&quot;</span>) <span class=\"comment\">// 默认 remember-me</span></span><br><span class=\"line\">                .rememberMeCookieName(<span class=\"string\">&quot;remember-me-cookie&quot;</span>)  <span class=\"comment\">//保存在浏览器端的cookie的名称，如果不设置默认也是remember-me</span></span><br><span class=\"line\">                .tokenValiditySeconds(<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">14</span>)</span><br><span class=\"line\">                .tokenRepository(persistentTokenRepository));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置userDetailsService</span></span><br><span class=\"line\">        http.userDetailsService(userDetailsService());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置过滤器，这里是验证码过滤器</span></span><br><span class=\"line\">        http.addFilterBefore(imageFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * web表达式认证管理器，支持自定义认证</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"comment\">//    private WebExpressionAuthorizationManager webExpressionAuthorizationManager() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        final var expressionHandler = new DefaultHttpSecurityExpressionHandler();</span></span><br><span class=\"line\"><span class=\"comment\">//        expressionHandler.setApplicationContext(applicationContext);</span></span><br><span class=\"line\"><span class=\"comment\">//        final var authorizationManager = new WebExpressionAuthorizationManager(&quot;@rbacService.hasPerssion(request,authentication)&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        // 一定要设置expressionHandler，否则不生效</span></span><br><span class=\"line\"><span class=\"comment\">//        authorizationManager.setExpressionHandler(expressionHandler);</span></span><br><span class=\"line\"><span class=\"comment\">//        return authorizationManager;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 基于内存的userDetailsService</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> InMemoryUserDetailsManager <span class=\"title function_\">userDetailsService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">UserDetails</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> User.builder()</span><br><span class=\"line\">                .username(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 123456</span></span><br><span class=\"line\">                .password(<span class=\"string\">&quot;$2a$10$JHj.XB.5RtpY60JEuTTGjuIT4m.hYT1yWoevJ6inU6Q7JE1qcvTYC&quot;</span>)</span><br><span class=\"line\">                .roles(<span class=\"string\">&quot;USER&quot;</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">UserDetails</span> <span class=\"variable\">admin</span> <span class=\"operator\">=</span> User.builder()</span><br><span class=\"line\">                .username(<span class=\"string\">&quot;admin&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 123456</span></span><br><span class=\"line\">                .password(<span class=\"string\">&quot;$2a$10$JHj.XB.5RtpY60JEuTTGjuIT4m.hYT1yWoevJ6inU6Q7JE1qcvTYC&quot;</span>)</span><br><span class=\"line\">                .roles(<span class=\"string\">&quot;ADMIN&quot;</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryUserDetailsManager</span>(user, admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 认证日志</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LoggerListener <span class=\"title function_\">loggerListener</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;org.springframework.security.authentication.event.LoggerListener&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoggerListener</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 密码加密策略</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;BCryptPasswordEncoder&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SessionRegistry–Session注册器\">SessionRegistry–Session注册器</h2>\n<h3 id=\"基于内存–SessionRegistryImpl\">基于内存–SessionRegistryImpl</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.session.HttpSessionEventPublisher;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;CommonSessionSpringSecurityConfig&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonSessionSpringSecurityConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用于跟踪用户的会话信息，包括已经认证的用户和它们的会话（Session）。</span></span><br><span class=\"line\"><span class=\"comment\">     * 每当用户成功进行身份认证并建立了一个新的会话时，SessionRegistry将负责将该会话添加到其内部的数据结构中。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SessionRegistry <span class=\"title function_\">sessionRegistry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;CommonSessionRegistry&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SessionRegistryImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * session事件发布者</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果使用SpringSessionBackedSessionRegistry，这里就不需要HttpSessionEventPublisher的Bean，而是交由SpringSession来管理</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HttpSessionEventPublisher <span class=\"title function_\">httpSessionEventPublisher</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpSessionEventPublisher</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于Spring-Session的jdbc\">基于Spring-Session的jdbc</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>maven依赖</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>建表语句<br>\n建表语句可在<code>spring-session-jdbc-[version].jar</code>的<code>org.springframework.session.jdbc</code>包路径中查看</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.jdbc.config.annotation.web.http.EnableJdbcHttpSession;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;jdbc-session&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJdbcHttpSession</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcSessionConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.jdbc.JdbcIndexedSessionRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.security.SpringSessionBackedSessionRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;JdbcSessionSpringSecurityConfig&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(JdbcSessionConfig.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcSessionSpringSecurityConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JdbcIndexedSessionRepository sessionRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SessionRegistry <span class=\"title function_\">springSessionBackedSessionRegistry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;JdbcSessionRegistry&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringSessionBackedSessionRegistry</span>&lt;&gt;(sessionRepository);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于Spring-Session的redis\">基于Spring-Session的redis</h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * RedisSessionConfig</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableRedisHttpSession</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisSessionConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.data.redis.RedisIndexedSessionRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.security.SpringSessionBackedSessionRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;RedisSessionSpringSecurityConfig&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(RedisSessionConfig.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisSessionSpringSecurityConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisIndexedSessionRepository sessionRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SessionRegistry <span class=\"title function_\">springSessionBackedSessionRegistry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;RedisSessionRegistry&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringSessionBackedSessionRegistry</span>&lt;&gt;(sessionRepository);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取当前所有登录用户信息\">获取当前所有登录用户信息</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.common.session;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;HttpSession服务类&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HttpSessionService</span> &#123;</span><br><span class=\"line\">    Map&lt;String, Date&gt; <span class=\"title function_\">getAllPrincipals</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于内存–SessionRegistryImpl-2\">基于内存–SessionRegistryImpl</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.common.session.HttpSessionService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionInformation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonHttpSessionService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HttpSessionService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    SessionRegistry sessionRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String, Date&gt; <span class=\"title function_\">getAllPrincipals</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Date&gt; lastActivityDates = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object principal : sessionRegistry.getAllPrincipals()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (principal <span class=\"keyword\">instanceof</span> User) &#123;</span><br><span class=\"line\">                username = ((User) principal).getUsername();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// a principal may have multiple active sessions</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (SessionInformation session : sessionRegistry.getAllSessions(</span><br><span class=\"line\">                    principal, <span class=\"literal\">false</span>)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// no last activity stored</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lastActivityDates.get(username) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    lastActivityDates.put(username, session.getLastRequest());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// check to see if this session is newer than the last</span></span><br><span class=\"line\">                    <span class=\"comment\">// stored</span></span><br><span class=\"line\">                    <span class=\"type\">Date</span> <span class=\"variable\">prevLastRequest</span> <span class=\"operator\">=</span> lastActivityDates.get(username);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (session.getLastRequest().after(prevLastRequest)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// update if so</span></span><br><span class=\"line\">                        lastActivityDates.put(username, session.getLastRequest());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastActivityDates;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于Spring-Session的jdbc-2\">基于Spring-Session的jdbc</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.common.session.HttpSessionService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.function.session.dao.SpringSessionJpaRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.function.session.model.SpringSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcHttpSessionService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HttpSessionService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 基于JPA的dao对象，对应表为spring_session</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SpringSessionJpaRepository springSessionJpaRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String, Date&gt; <span class=\"title function_\">getAllPrincipals</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Date&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> List&lt;SpringSession&gt; sessionList = springSessionJpaRepository.findSpringSessionsByExpiryTimeAfter(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().getTime());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (SpringSession springSession : sessionList) &#123;</span><br><span class=\"line\">                map.put(springSession.getPrincipalName(), <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(springSession.getLastAccessTime()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于Spring-Session的redis-2\">基于Spring-Session的redis</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.common.session.HttpSessionService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.data.redis.RedisIndexedSessionRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisHttpSessionService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HttpSessionService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SESSION_SESSIONS</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisIndexedSessionRepository sessionRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String, Date&gt; <span class=\"title function_\">getAllPrincipals</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Date&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Set&lt;String&gt; keys = redisTemplate.keys(SESSION_SESSIONS + <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">principalName</span> <span class=\"operator\">=</span> key.replace(SESSION_SESSIONS, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">Map</span> <span class=\"variable\">byPrincipalName</span> <span class=\"operator\">=</span> sessionRepository.findByPrincipalName(principalName);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (byPrincipalName != <span class=\"literal\">null</span> &amp;&amp; byPrincipalName.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> objectMapper.writeValueAsString(byPrincipalName);</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> Map&lt;String, RedisSessionPojo&gt; redisSessionMap = objectMapper.readerForMapOf(RedisSessionPojo.class).readValue(json);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (String mapKey : redisSessionMap.keySet()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"type\">RedisSessionPojo</span> <span class=\"variable\">redisSession</span> <span class=\"operator\">=</span> redisSessionMap.get(mapKey);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!redisSession.getExpired()) &#123;</span><br><span class=\"line\">                            map.put(principalName, redisSession.getLastAccessedTime());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisSessionPojo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object attributeNames;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String maxInactiveInterval;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean expired;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date lastAccessedTime;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String creationTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Remember-Me\">Remember-Me</h2>\n<h3 id=\"基于内存–InMemoryTokenRepositoryImpl\">基于内存–InMemoryTokenRepositoryImpl</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.InMemoryTokenRepositoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonRememberMeConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PersistentTokenRepository <span class=\"title function_\">persistentTokenRepository</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;InMemoryTokenRepositoryImpl&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">InMemoryTokenRepositoryImpl</span> <span class=\"variable\">tokenRepository</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryTokenRepositoryImpl</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tokenRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于jdbc\">基于jdbc</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcRememberMeConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * RemeberMe</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置从数据库中获取token</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * CREATE TABLE `persistent_logins` (</span></span><br><span class=\"line\"><span class=\"comment\">     * `username` varchar(64) NOT NULL,</span></span><br><span class=\"line\"><span class=\"comment\">     * `series` varchar(64) NOT NULL,</span></span><br><span class=\"line\"><span class=\"comment\">     * `token` varchar(64) NOT NULL,</span></span><br><span class=\"line\"><span class=\"comment\">     * `last_used` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span></span><br><span class=\"line\"><span class=\"comment\">     * PRIMARY KEY (`series`)</span></span><br><span class=\"line\"><span class=\"comment\">     * ) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PersistentTokenRepository <span class=\"title function_\">persistentTokenRepository</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;JdbcTokenRepositoryImpl&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">JdbcTokenRepositoryImpl</span> <span class=\"variable\">tokenRepository</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JdbcTokenRepositoryImpl</span>();</span><br><span class=\"line\">        <span class=\"comment\">//自动创建表，第一次运行时可是设置为true，让其自动创建表</span></span><br><span class=\"line\">        tokenRepository.setCreateTableOnStartup(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        tokenRepository.setDataSource(dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tokenRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于redis\">基于redis</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.common.RedisTokenRepositoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(RedisConfig.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisRememberMeConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String ,Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * RemeberMe</span></span><br><span class=\"line\"><span class=\"comment\">     * redis，springSecurity没有提供基于redis的PersistentTokenRepository，需要我们自己创建</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PersistentTokenRepository <span class=\"title function_\">persistentTokenRepository</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;RedisTokenRepositoryImpl&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">RedisTokenRepositoryImpl</span> <span class=\"variable\">tokenRepository</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTokenRepositoryImpl</span>(redisTemplate);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tokenRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>自定义基于Redis的PersistentTokenRepository</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.common;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.dao.DataIntegrityViolationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentRememberMeToken;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisTokenRepositoryImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PersistentTokenRepository</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SERIES_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring:security:rememberMe:series:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">USERNAME_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring:security:rememberMe:username:&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RedisTokenRepositoryImpl</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">generateKey</span><span class=\"params\">(String prefix, String <span class=\"keyword\">var</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prefix + <span class=\"keyword\">var</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createNewToken</span><span class=\"params\">(PersistentRememberMeToken token)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> generateKey(SERIES_PREFIX, token.getSeries());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Boolean.TRUE.equals(redisTemplate.persist(key))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataIntegrityViolationException</span>(<span class=\"string\">&quot;Series Id &#x27;&quot;</span> + token.getSeries() + <span class=\"string\">&quot;&#x27; already exists!&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建一个hashmap</span></span><br><span class=\"line\">            Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;username&quot;</span>, token.getUsername());</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;tokenValue&quot;</span>, token.getTokenValue());</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;date&quot;</span>, String.valueOf(token.getDate().getTime()));</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;series&quot;</span>, token.getSeries());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//这里不能直接将PersistentRememberMeToken对象存入redis，因为这里使用的RedisTemplate是基于json的，要求对象必须有无参构造方法以及属性的setter和getter方法</span></span><br><span class=\"line\">            redisTemplate.opsForValue().set(key, map);</span><br><span class=\"line\">            redisTemplate.expire(key, <span class=\"number\">14</span>, TimeUnit.DAYS);</span><br><span class=\"line\">            redisTemplate.opsForValue().set(generateKey(USERNAME_PREFIX, token.getUsername()), token.getSeries());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateToken</span><span class=\"params\">(String series, String tokenValue, Date lastUsed)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">PersistentRememberMeToken</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getTokenForSeries(series);</span><br><span class=\"line\">        <span class=\"type\">PersistentRememberMeToken</span> <span class=\"variable\">newToken</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PersistentRememberMeToken</span>(token.getUsername(), series, tokenValue, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">        <span class=\"comment\">//创建一个hashmap</span></span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;username&quot;</span>, newToken.getUsername());</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;tokenValue&quot;</span>, newToken.getTokenValue());</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;date&quot;</span>, String.valueOf(newToken.getDate().getTime()));</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;series&quot;</span>, newToken.getSeries());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> generateKey(SERIES_PREFIX, series);</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, map);</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">14</span>, TimeUnit.DAYS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PersistentRememberMeToken <span class=\"title function_\">getTokenForSeries</span><span class=\"params\">(String seriesId)</span> &#123;</span><br><span class=\"line\">        Map&lt;String, String&gt; map = (Map) redisTemplate.opsForValue().get(generateKey(SERIES_PREFIX, seriesId));</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> map.get(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">tokenValue</span> <span class=\"operator\">=</span> map.get(<span class=\"string\">&quot;tokenValue&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> map.get(<span class=\"string\">&quot;date&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == username || <span class=\"literal\">null</span> == tokenValue || <span class=\"literal\">null</span> == date) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">timestamp</span> <span class=\"operator\">=</span> Long.valueOf(date);</span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">time</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(timestamp);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">PersistentRememberMeToken</span> <span class=\"variable\">rememberMeToken</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PersistentRememberMeToken</span>(username, seriesId, tokenValue, time);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rememberMeToken;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeUserTokens</span><span class=\"params\">(String username)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//可能redis版本低于6用不了getAndDelete</span></span><br><span class=\"line\"><span class=\"comment\">//            String series = (String) redisTemplate.opsForValue().getAndDelete(generateKey(USERNAME_PREFIX, username));</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">series</span> <span class=\"operator\">=</span> (String) redisTemplate.opsForValue().get(generateKey(USERNAME_PREFIX, username));</span><br><span class=\"line\">            redisTemplate.delete(generateKey(USERNAME_PREFIX, username));</span><br><span class=\"line\">            redisTemplate.delete(generateKey(SERIES_PREFIX, series));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍在SpringBoot Security中的Session管理与RememberMe 实现了基于内存、Jdbc和Redis三种配置方式 本文基于SpringBoot-2.7.14和SpringBoot-3.1.2 Security配置类 SpringBoot-2.7.14 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214package com.hanqf.config;import com.hanqf.common.security.CP_UserDetailsService;import com.hanqf.common.support.CP_ImageFilter;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.session.SessionRegistry;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;import org.springframework.security.web.csrf.CookieCsrfTokenRepository;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;/** * &lt;h1&gt;springboot升级到2.7.x以后的配置方法&lt;/h1&gt; */@Slf4j@Configuration@EnableGlobalMethodSecurity(prePostEnabled = true)public class SpringSecurityConfig &#123; /** * session注册器，默认是基于内存的SessionRegistryImpl，也可以配置为jdbc或redis，下文会介绍 */ @Autowired private SessionRegistry sessionRegistry; /** * Token存储库，用于记录remember me的用户信息，默认是基于内存的InMemoryTokenRepositoryImpl，也可以配置为jdbc或redis，下文会介绍 */ @Autowired private PersistentTokenRepository persistentTokenRepository; /** * 验证码过滤器，负责登录时验证用户提交的验证码是否有效，本文对此不做介绍 */ @Autowired private CP_ImageFilter imageFilter; /** * 不需要进行验证的url数组 */ private String[] ignorings = &#123; &quot;/login.do*&quot;, &quot;/**/*.json*&quot;, &quot;/**/*.xml*&quot;, &quot;/druid/**&quot;, &quot;/forgotPassword.do&quot;, &quot;/forgotPasswordEmail.do&quot;, &quot;/resetPassword.do&quot; &#125;; /** * AuthenticationManager（认证管理器） */ @Bean public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception &#123; log.info(&quot;AuthenticationManager&quot;); return authenticationConfiguration.getAuthenticationManager(); &#125; /** * 定义一个能够与 HttpServletRequest 匹配的过滤器链。以确定它是否适用于该请求。 * springboot升级到2.7.x以后的配置方式 */ @Bean SecurityFilterChain filterChain(HttpSecurity http) throws Exception &#123; log.info(&quot;HttpSecurity&quot;); //解决不允许显示在iframe中的问题 http.headers().frameOptions().disable(); // 设置拦截规则 http.authorizeRequests() // 不需要验证的url .antMatchers(ignorings).permitAll() // 登录即可访问的url .antMatchers(&quot;/&quot;).authenticated() .antMatchers(&quot;/index.do*&quot;).authenticated() .antMatchers(&quot;/welcome.do*&quot;).authenticated() // 自定义规则进行验证,基于权限管理模型的认证,public Boolean hasPerssion(HttpServletRequest request, Authentication authentication)，本文不做介绍 .antMatchers(&quot;/**/*.do*&quot;).access(&quot;@rbacService.hasPerssion(request,authentication)&quot;) .and() // 登录成功但是权限验证失败后的跳转地址 .exceptionHandling().accessDeniedPage(&quot;/access/denied.do&quot;); // 开启默认登录页面 // http.formLogin(); // 自定义登录页面 http.formLogin() .loginPage(&quot;/login.do&quot;) // 登录页面 .failureUrl(&quot;/login.do?login_error=1&quot;) // 登录失败跳转页面 .defaultSuccessUrl(&quot;/index.do&quot;, true) // 登录成功默认跳转页面，这里设置true表示无论请求哪个地址，登录成功后都跳转到该页面 .loginProcessingUrl(&quot;/j_spring_security_check&quot;) // 登录页面中的提交登录验证url, 默认 /login .usernameParameter(&quot;j_username&quot;) // 登录页面中的用户名参数，默认username .passwordParameter(&quot;j_password&quot;) // 登录页面中的密码参数，默认password .permitAll(); //关闭csrf，如果默认开启csrf，则在生成页面时会自动在每个form中增加一个隐藏属性&lt;input type=&quot;hidden&quot; name=&quot;_csrf&quot; value=&quot;95e8706b-8d22-4d62-9a27-3da5993e0a7d&quot;&gt;， // 实际上就是&lt;input type=&quot;hidden&quot; th:name=&quot;$&#123;_csrf.parameterName&#125;&quot; th:value=&quot;$&#123;_csrf.token&#125;&quot; /&gt;，js中如果需要使用时也可以使用该属性 //http.csrf().disable(); //开启csrf，默认开启，csrf不会拦截get请求 http.csrf() //.csrfTokenRepository(new CookieCsrfTokenRepository()) //令牌存储方式，CookieCsrfTokenRepository或者HttpSessionCsrfTokenRepository，默认HttpSessionCsrfTokenRepository .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) //关闭仅支持http浏览器请求，这样ajax和postMan都可以访问，header需要带上X-CSRF-TOKEN .ignoringAntMatchers(&quot;/**/json.do*&quot;, &quot;/**/xml.do*&quot;); //哪些不需要csrf，非浏览器直接访问的地址需要进行屏蔽，因为csrf标签只有页面会自动生成，另外认证接口也需要屏蔽，因为需要第一次获取CSRF-TOKEN // 自定义注销，这里需要注意的是，如果启用了csrf(默认就是开启)，则logout只能是post提交，如果要get提交，则必须如下配置 http.logout() // 在注销时清除认证信息 .clearAuthentication(true) .logoutRequestMatcher(new AntPathRequestMatcher(&quot;/logout.do&quot;)) //get //.logoutUrl(&quot;/logout.do&quot;) //post .logoutSuccessUrl(&quot;/login.do&quot;) // 在注销时使HttpSession失效 .invalidateHttpSession(true); // session管理 http.sessionManagement() //默认开启session .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED) //每次登录验证将创建一个新的session .sessionFixation().migrateSession() //同一个用户最大的登录数量 .maximumSessions(1) //true表示已经登录就不予许再次登录，false表示允许再次登录但是之前的登录会下线。 .maxSessionsPreventsLogin(false) //session被下线(超时)之后的显示页面 .expiredUrl(&quot;/access/sameLogin.do&quot;) // 会话注册器 .sessionRegistry(sessionRegistry); // sessionRegistry是session注册器，默认是基于内存的SessionRegistryImpl，此时当用户注销时，Spring Security的默认行为是不会主动从SessionRegistry中移除相关的SessionInformation对象。这意味着注销后，SessionRegistryImpl中仍然保留该用户的会话信息。 // 但是SessionRegistryImpl里对session的销毁和改变进行了事件监听，我们只需要注册事件发布者HttpSessionEventPublisher即可实现session的自动清理。 //SessionRegistryImpl使用map来维护session信息，这样在分布式系统(多个副本)中获取会话数就不准确了， // 所以这里我们可以使用基于SpringSession的SpringSessionBackedSessionRegistry，其可以绑定基于jdbc的JdbcIndexedSessionRepository或者基于redis的RedisIndexedSessionRepository // 如果使用SpringSessionBackedSessionRegistry，这里就不需要HttpSessionEventPublisher的Bean，因为这里Session管理全部交由SpringSession去管理，也就是Session的相关清理工作会自动帮助我们完成。 // RemeberMe //http.rememberMe().key(&quot;webmvc#FD637E6D9C0F1A5A67082AF56CE32485&quot;); //两周内免登录 http.rememberMe() .rememberMeParameter(&quot;_spring_security_remember_me&quot;) // 默认 remember-me .rememberMeCookieName(&quot;remember-me-cookie&quot;) //保存在浏览器端的cookie的名称，如果不设置默认也是remember-me .tokenValiditySeconds(60 * 60 * 24 * 14) // 单位秒 两周=60*60*24*14 .tokenRepository(persistentTokenRepository); //Token存储库，用于记录remember me的用户信息，默认内存，也可以配置为数据库或者redis; // 验证码过滤器 http.addFilterBefore(imageFilter, UsernamePasswordAuthenticationFilter.class); // 设置userDetailsService http.userDetailsService(userDetailsService()); return http.build(); &#125; /** * ignore的url * 如果你需要忽略URL，请考虑通过HttpSecurity.authorizeHttpRequests的permitAll来实现。 */ //@Bean //public WebSecurityCustomizer webSecurityCustomizer() &#123; // return web -&gt; web.ignoring().antMatchers(ignorings); //&#125; /** * 登录的时候需要获取用户信息，只有登录的时候使用，其余时候使用http.authorizeRequests()中配置的验证规则（验证时，用户名和权限都确定了） */ @Bean public CP_UserDetailsService userDetailsService() &#123; log.info(&quot;CP_UserDetailsService&quot;); CP_UserDetailsService userDetailsService = new CP_UserDetailsService(); return userDetailsService; &#125; /** * 认证日志 */ @Bean public org.springframework.security.authentication.event.LoggerListener loggerListener() &#123; log.info(&quot;org.springframework.security.authentication.event.LoggerListener&quot;); org.springframework.security.authentication.event.LoggerListener loggerListener = new org.springframework.security.authentication.event.LoggerListener(); return loggerListener; &#125; /** * 请求日志 */ @Bean public org.springframework.security.access.event.LoggerListener eventLoggerListener() &#123; log.info(&quot;org.springframework.security.access.event.LoggerListener&quot;); org.springframework.security.access.event.LoggerListener eventLoggerListener = new org.springframework.security.access.event.LoggerListener(); return eventLoggerListener; &#125; /** * 密码加密，在进行登录验证时会自动将页面提交的密码通过其进行加密 */ @Bean public PasswordEncoder passwordEncoder() &#123; return new BCryptPasswordEncoder(); &#125;&#125; SpringBoot-3.1.2 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215package com.hanqf.config;import com.hanqf.support.security.CP_ImageFilter;import com.hanqf.support.security.CP_RbacService;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.event.LoggerListener;import org.springframework.security.authorization.AuthorizationDecision;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.session.SessionRegistry;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.provisioning.InMemoryUserDetailsManager;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;import org.springframework.security.web.csrf.CookieCsrfTokenRepository;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;import java.util.Arrays;import java.util.List;/** * &lt;h1&gt;springboot升级到3.x.x以后的配置方法&lt;/h1&gt; */@Slf4j@Configuration@EnableMethodSecuritypublic class SpringSecurityConfig &#123; @Autowired private SessionRegistry sessionRegistry; @Autowired private PersistentTokenRepository persistentTokenRepository; @Autowired private CP_RbacService rbacService; @Autowired private CP_ImageFilter imageFilter; private static String[] ignorings = &#123;&quot;/email/**&quot;, &quot;/actuator*/**&quot;, &quot;/admin*/**&quot;, &quot;/logger**&quot;, &quot;/rabbitmq/**&quot;, &quot;/checkcode/**&quot;, &quot;/resource/**&quot;, &quot;/**/*.jsp&quot;, &quot;/access/sameLogin.do&quot;, &quot;/**/*.json*&quot;, &quot;/**/*.xml*&quot;, &quot;/druid/**&quot;, &quot;/forgotPassword.do&quot;, &quot;/forgotPasswordEmail.do&quot;, &quot;/resetPassword.do&quot; &#125;; private static List&lt;AntPathRequestMatcher&gt; ignoringsMatcherList; static &#123; ignoringsMatcherList = Arrays.stream(ignorings).map(AntPathRequestMatcher::antMatcher).toList(); &#125; /** * 获取AuthenticationManager（认证管理器），登录时认证使用 * * @param authenticationConfiguration * @return * @throws Exception */ @Bean public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception &#123; log.info(&quot;AuthenticationManager&quot;); return authenticationConfiguration.getAuthenticationManager(); &#125; @Bean SecurityFilterChain filterChain(HttpSecurity http) throws Exception &#123; log.info(&quot;HttpSecurity&quot;); //解决不允许显示在iframe的问题 http.headers(httpSecurityHeadersConfigurer -&gt; httpSecurityHeadersConfigurer .frameOptions(HeadersConfigurer.FrameOptionsConfig::disable)); // 设置拦截规则 http.authorizeHttpRequests(authorizationManagerRequestMatcherRegistry -&gt; authorizationManagerRequestMatcherRegistry .requestMatchers(ignoringsMatcherList.toArray(AntPathRequestMatcher[]::new)).permitAll() .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/login.do*&quot;)).permitAll() // 登录请求不拦截 .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/index.do*&quot;)).authenticated() .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/*.do*&quot;), AntPathRequestMatcher.antMatcher(&quot;/**/*.do*&quot;)).access((authentication, context) -&gt; new AuthorizationDecision(rbacService.hasPerssion(context.getRequest(),authentication.get())))); // 这种方式效果同上，都是开启自定义认证 // .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/*.do*&quot;),AntPathRequestMatcher.antMatcher(&quot;/**/*.do*&quot;)).access(webExpressionAuthorizationManager())); http.exceptionHandling(exceptionHandlingCustomizer -&gt; exceptionHandlingCustomizer .accessDeniedPage(&quot;/access/denied.do&quot;)); // 开启默认登录页面 http.formLogin(httpSecurityFormLoginConfigurer -&gt; httpSecurityFormLoginConfigurer .loginPage(&quot;/login.do&quot;) .failureUrl(&quot;/login.do?login_error=1&quot;) .defaultSuccessUrl(&quot;/index.do&quot;, true) .loginProcessingUrl(&quot;/j_spring_security_check&quot;) // 默认 /login .usernameParameter(&quot;j_username&quot;) // 默认username .passwordParameter(&quot;j_password&quot;) // 默认password .permitAll()); //开启csrf，默认开启，csrf不会拦截get请求 http.csrf(httpSecurityCsrfConfigurer -&gt; httpSecurityCsrfConfigurer //关闭仅支持http浏览器请求，这样ajax和postMan都可以访问，header需要带上X-CSRF-TOKEN .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) //哪些不需要csrf，非浏览器直接访问的地址需要进行屏蔽，因为csrf标签只有页面会自动生成，另外认证接口也需要屏蔽，因为需要第一次获取CSRF-TOKEN .ignoringRequestMatchers(AntPathRequestMatcher.antMatcher(&quot;/**/json.do*&quot;), AntPathRequestMatcher.antMatcher(&quot;/**/xml.do*&quot;))); // 自定义注销，这里需要注意的是，如果启用了csrf(默认就是开启)，则logout只能是post提交，如果要get提交，则必须如下配置 http.logout(httpSecurityLogoutConfigurer -&gt; httpSecurityLogoutConfigurer // 在注销时清除认证信息 .clearAuthentication(true) .logoutRequestMatcher(AntPathRequestMatcher.antMatcher(&quot;/logout.do&quot;)) //get //.logoutUrl(&quot;/logout.do&quot;) //post .logoutSuccessUrl(&quot;/login.do&quot;) // 在注销时使HttpSession失效 .invalidateHttpSession(true)); // session管理 http.sessionManagement(httpSecuritySessionManagementConfigurer -&gt; httpSecuritySessionManagementConfigurer //默认开启session .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED) //每次登录验证将创建一个新的session .sessionFixation().migrateSession() //同一个用户最大的登录数量 .maximumSessions(1) //true表示已经登录就不予许再次登录，false表示允许再次登录但是之前的登录会下线。 .maxSessionsPreventsLogin(false) //session被下线(超时)之后的显示页面 .expiredUrl(&quot;/access/sameLogin.do&quot;) .sessionRegistry(sessionRegistry)); // RemeberMe 两周内免登录 http.rememberMe(httpSecurityRememberMeConfigurer -&gt; httpSecurityRememberMeConfigurer .rememberMeParameter(&quot;_spring_security_remember_me&quot;) // 默认 remember-me .rememberMeCookieName(&quot;remember-me-cookie&quot;) //保存在浏览器端的cookie的名称，如果不设置默认也是remember-me .tokenValiditySeconds(60 * 60 * 24 * 14) .tokenRepository(persistentTokenRepository)); //设置userDetailsService http.userDetailsService(userDetailsService()); // 设置过滤器，这里是验证码过滤器 http.addFilterBefore(imageFilter, UsernamePasswordAuthenticationFilter.class); return http.build(); &#125; /** * web表达式认证管理器，支持自定义认证 */// private WebExpressionAuthorizationManager webExpressionAuthorizationManager() &#123;// final var expressionHandler = new DefaultHttpSecurityExpressionHandler();// expressionHandler.setApplicationContext(applicationContext);// final var authorizationManager = new WebExpressionAuthorizationManager(&quot;@rbacService.hasPerssion(request,authentication)&quot;);// // 一定要设置expressionHandler，否则不生效// authorizationManager.setExpressionHandler(expressionHandler);// return authorizationManager;// &#125; /** * 基于内存的userDetailsService */ @Bean public InMemoryUserDetailsManager userDetailsService() &#123; UserDetails user = User.builder() .username(&quot;user&quot;) // 123456 .password(&quot;$2a$10$JHj.XB.5RtpY60JEuTTGjuIT4m.hYT1yWoevJ6inU6Q7JE1qcvTYC&quot;) .roles(&quot;USER&quot;) .build(); UserDetails admin = User.builder() .username(&quot;admin&quot;) // 123456 .password(&quot;$2a$10$JHj.XB.5RtpY60JEuTTGjuIT4m.hYT1yWoevJ6inU6Q7JE1qcvTYC&quot;) .roles(&quot;ADMIN&quot;) .build(); return new InMemoryUserDetailsManager(user, admin); &#125; /** * 认证日志 */ @Bean public LoggerListener loggerListener() &#123; log.info(&quot;org.springframework.security.authentication.event.LoggerListener&quot;); return new LoggerListener(); &#125; /** * 密码加密策略 */ @Bean public PasswordEncoder passwordEncoder() &#123; log.info(&quot;BCryptPasswordEncoder&quot;); return new BCryptPasswordEncoder(); &#125;&#125; SessionRegistry–Session注册器 基于内存–SessionRegistryImpl 12345678910111213141516171819202122232425262728293031323334353637package com.hanqf.config;import lombok.extern.slf4j.Slf4j;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.core.session.SessionRegistry;import org.springframework.security.core.session.SessionRegistryImpl;import org.springframework.security.web.session.HttpSessionEventPublisher;/** * &lt;h1&gt;CommonSessionSpringSecurityConfig&lt;/h1&gt; */@Configuration@Slf4jpublic class CommonSessionSpringSecurityConfig &#123; /** * 用于跟踪用户的会话信息，包括已经认证的用户和它们的会话（Session）。 * 每当用户成功进行身份认证并建立了一个新的会话时，SessionRegistry将负责将该会话添加到其内部的数据结构中。 */ @Bean public SessionRegistry sessionRegistry() &#123; log.info(&quot;CommonSessionRegistry&quot;); return new SessionRegistryImpl(); &#125; /** * session事件发布者 * 如果使用SpringSessionBackedSessionRegistry，这里就不需要HttpSessionEventPublisher的Bean，而是交由SpringSession来管理 */ @Bean public HttpSessionEventPublisher httpSessionEventPublisher() &#123; return new HttpSessionEventPublisher(); &#125;&#125; 基于Spring-Session的jdbc maven依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.session&lt;/groupId&gt; &lt;artifactId&gt;spring-session-jdbc&lt;/artifactId&gt;&lt;/dependency&gt; 建表语句 建表语句可在spring-session-jdbc-[version].jar的org.springframework.session.jdbc包路径中查看 123456789101112package com.hanqf.config;import org.springframework.context.annotation.Configuration;import org.springframework.session.jdbc.config.annotation.web.http.EnableJdbcHttpSession;/** * &lt;h1&gt;jdbc-session&lt;/h1&gt; */@Configuration@EnableJdbcHttpSessionpublic class JdbcSessionConfig &#123;&#125; 12345678910111213141516171819202122232425262728package com.hanqf.config;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.AutoConfigureAfter;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.core.session.SessionRegistry;import org.springframework.session.jdbc.JdbcIndexedSessionRepository;import org.springframework.session.security.SpringSessionBackedSessionRegistry;/** * &lt;h1&gt;JdbcSessionSpringSecurityConfig&lt;/h1&gt; */@Slf4j@Configuration@AutoConfigureAfter(JdbcSessionConfig.class)public class JdbcSessionSpringSecurityConfig &#123; @Autowired private JdbcIndexedSessionRepository sessionRepository; @Bean public SessionRegistry springSessionBackedSessionRegistry() &#123; log.info(&quot;JdbcSessionRegistry&quot;); return new SpringSessionBackedSessionRegistry&lt;&gt;(sessionRepository); &#125;&#125; 基于Spring-Session的redis 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.session&lt;/groupId&gt; &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; 1234567891011package com.hanqf.config;import org.springframework.context.annotation.Configuration;import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;/** * RedisSessionConfig */@Configuration@EnableRedisHttpSessionpublic class RedisSessionConfig &#123;&#125; 1234567891011121314151617181920212223242526272829package com.hanqf.config;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.AutoConfigureAfter;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.core.session.SessionRegistry;import org.springframework.session.data.redis.RedisIndexedSessionRepository;import org.springframework.session.security.SpringSessionBackedSessionRegistry;/** * &lt;h1&gt;RedisSessionSpringSecurityConfig&lt;/h1&gt; */@Slf4j@Configuration@AutoConfigureAfter(RedisSessionConfig.class)public class RedisSessionSpringSecurityConfig &#123; @Autowired private RedisIndexedSessionRepository sessionRepository; @Bean public SessionRegistry springSessionBackedSessionRegistry() &#123; log.info(&quot;RedisSessionRegistry&quot;); return new SpringSessionBackedSessionRegistry&lt;&gt;(sessionRepository); &#125;&#125; 获取当前所有登录用户信息 1234567891011package com.hanqf.common.session;import java.util.Date;import java.util.Map;/** * &lt;h1&gt;HttpSession服务类&lt;/h1&gt; */public interface HttpSessionService &#123; Map&lt;String, Date&gt; getAllPrincipals();&#125; 基于内存–SessionRegistryImpl 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.hanqf.config;import com.hanqf.common.session.HttpSessionService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.session.SessionInformation;import org.springframework.security.core.session.SessionRegistry;import org.springframework.security.core.userdetails.User;import org.springframework.stereotype.Component;import java.util.Date;import java.util.HashMap;import java.util.Map;@Componentpublic class CommonHttpSessionService implements HttpSessionService &#123; @Autowired SessionRegistry sessionRegistry; @Override public Map&lt;String, Date&gt; getAllPrincipals() &#123; Map&lt;String, Date&gt; lastActivityDates = new HashMap&lt;&gt;(); for (Object principal : sessionRegistry.getAllPrincipals()) &#123; String username = &quot;&quot;; if (principal instanceof User) &#123; username = ((User) principal).getUsername(); &#125; // a principal may have multiple active sessions for (SessionInformation session : sessionRegistry.getAllSessions( principal, false)) &#123; // no last activity stored if (lastActivityDates.get(username) == null) &#123; lastActivityDates.put(username, session.getLastRequest()); &#125; else &#123; // check to see if this session is newer than the last // stored Date prevLastRequest = lastActivityDates.get(username); if (session.getLastRequest().after(prevLastRequest)) &#123; // update if so lastActivityDates.put(username, session.getLastRequest()); &#125; &#125; &#125; &#125; return lastActivityDates; &#125;&#125; 基于Spring-Session的jdbc 12345678910111213141516171819202122232425262728293031323334353637package com.hanqf.config;import com.hanqf.common.session.HttpSessionService;import com.hanqf.function.session.dao.SpringSessionJpaRepository;import com.hanqf.function.session.model.SpringSession;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;@Componentpublic class JdbcHttpSessionService implements HttpSessionService &#123; /** * 基于JPA的dao对象，对应表为spring_session */ @Autowired private SpringSessionJpaRepository springSessionJpaRepository; @Override public Map&lt;String, Date&gt; getAllPrincipals() &#123; Map&lt;String, Date&gt; map = new HashMap&lt;&gt;(); try &#123; final List&lt;SpringSession&gt; sessionList = springSessionJpaRepository.findSpringSessionsByExpiryTimeAfter(new Date().getTime()); for (SpringSession springSession : sessionList) &#123; map.put(springSession.getPrincipalName(), new Date(springSession.getLastAccessTime())); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return map; &#125;&#125; 基于Spring-Session的redis 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.hanqf.config;import com.fasterxml.jackson.databind.ObjectMapper;import com.hanqf.common.session.HttpSessionService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.session.data.redis.RedisIndexedSessionRepository;import org.springframework.stereotype.Component;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.Set;@Componentpublic class RedisHttpSessionService implements HttpSessionService &#123; private final String SESSION_SESSIONS = &quot;spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:&quot;; @Autowired private RedisTemplate&lt;String, Object&gt; redisTemplate; @Autowired private RedisIndexedSessionRepository sessionRepository; @Autowired private ObjectMapper objectMapper; @Override public Map&lt;String, Date&gt; getAllPrincipals() &#123; Map&lt;String, Date&gt; map = new HashMap&lt;&gt;(); final Set&lt;String&gt; keys = redisTemplate.keys(SESSION_SESSIONS + &quot;*&quot;); try &#123; for (String key : keys) &#123; String principalName = key.replace(SESSION_SESSIONS, &quot;&quot;); final Map byPrincipalName = sessionRepository.findByPrincipalName(principalName); if (byPrincipalName != null &amp;&amp; byPrincipalName.size() &gt; 0) &#123; final String json = objectMapper.writeValueAsString(byPrincipalName); final Map&lt;String, RedisSessionPojo&gt; redisSessionMap = objectMapper.readerForMapOf(RedisSessionPojo.class).readValue(json); for (String mapKey : redisSessionMap.keySet()) &#123; final RedisSessionPojo redisSession = redisSessionMap.get(mapKey); if (!redisSession.getExpired()) &#123; map.put(principalName, redisSession.getLastAccessedTime()); &#125; &#125; &#125; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return map; &#125;&#125;@Datapublic class RedisSessionPojo &#123; private String id; private Object attributeNames; private String maxInactiveInterval; private Boolean expired; private Date lastAccessedTime; private String creationTime;&#125; Remember-Me 基于内存–InMemoryTokenRepositoryImpl 12345678910111213141516171819package com.hanqf.config;import lombok.extern.slf4j.Slf4j;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.web.authentication.rememberme.InMemoryTokenRepositoryImpl;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;@Slf4j@Configurationpublic class CommonRememberMeConfig &#123; @Bean public PersistentTokenRepository persistentTokenRepository() &#123; log.info(&quot;InMemoryTokenRepositoryImpl&quot;); InMemoryTokenRepositoryImpl tokenRepository = new InMemoryTokenRepositoryImpl(); return tokenRepository; &#125;&#125; 基于jdbc 123456789101112131415161718192021222324252627282930313233343536373839package com.hanqf.config;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;import javax.sql.DataSource;@Slf4j@Configurationpublic class JdbcRememberMeConfig &#123; @Autowired private DataSource dataSource; /** * RemeberMe * 配置从数据库中获取token * * CREATE TABLE `persistent_logins` ( * `username` varchar(64) NOT NULL, * `series` varchar(64) NOT NULL, * `token` varchar(64) NOT NULL, * `last_used` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, * PRIMARY KEY (`series`) * ) ENGINE=InnoDB DEFAULT CHARSET=utf8; */ @Bean public PersistentTokenRepository persistentTokenRepository() &#123; log.info(&quot;JdbcTokenRepositoryImpl&quot;); JdbcTokenRepositoryImpl tokenRepository = new JdbcTokenRepositoryImpl(); //自动创建表，第一次运行时可是设置为true，让其自动创建表 tokenRepository.setCreateTableOnStartup(false); tokenRepository.setDataSource(dataSource); return tokenRepository; &#125;&#125; 基于redis 123456789101112131415161718192021222324252627282930package com.hanqf.config;import com.hanqf.common.RedisTokenRepositoryImpl;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.AutoConfigureAfter;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;@Slf4j@Configuration@AutoConfigureAfter(RedisConfig.class)public class RedisRememberMeConfig &#123; @Autowired private RedisTemplate&lt;String ,Object&gt; redisTemplate; /** * RemeberMe * redis，springSecurity没有提供基于redis的PersistentTokenRepository，需要我们自己创建 */ @Bean public PersistentTokenRepository persistentTokenRepository() &#123; log.info(&quot;RedisTokenRepositoryImpl&quot;); RedisTokenRepositoryImpl tokenRepository = new RedisTokenRepositoryImpl(redisTemplate); return tokenRepository; &#125;&#125; 自定义基于Redis的PersistentTokenRepository 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596package com.hanqf.common;import lombok.extern.slf4j.Slf4j;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.security.web.authentication.rememberme.PersistentRememberMeToken;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.concurrent.TimeUnit;@Slf4jpublic class RedisTokenRepositoryImpl implements PersistentTokenRepository &#123; private final String SERIES_PREFIX = &quot;spring:security:rememberMe:series:&quot;; private final String USERNAME_PREFIX = &quot;spring:security:rememberMe:username:&quot;; private RedisTemplate&lt;String, Object&gt; redisTemplate; public RedisTokenRepositoryImpl(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123; this.redisTemplate = redisTemplate; &#125; private String generateKey(String prefix, String var) &#123; return prefix + var; &#125; @Override public void createNewToken(PersistentRememberMeToken token) &#123; String key = generateKey(SERIES_PREFIX, token.getSeries()); if (Boolean.TRUE.equals(redisTemplate.persist(key))) &#123; throw new DataIntegrityViolationException(&quot;Series Id &#x27;&quot; + token.getSeries() + &quot;&#x27; already exists!&quot;); &#125; else &#123; //创建一个hashmap Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); map.put(&quot;username&quot;, token.getUsername()); map.put(&quot;tokenValue&quot;, token.getTokenValue()); map.put(&quot;date&quot;, String.valueOf(token.getDate().getTime())); map.put(&quot;series&quot;, token.getSeries()); //这里不能直接将PersistentRememberMeToken对象存入redis，因为这里使用的RedisTemplate是基于json的，要求对象必须有无参构造方法以及属性的setter和getter方法 redisTemplate.opsForValue().set(key, map); redisTemplate.expire(key, 14, TimeUnit.DAYS); redisTemplate.opsForValue().set(generateKey(USERNAME_PREFIX, token.getUsername()), token.getSeries()); &#125; &#125; @Override public void updateToken(String series, String tokenValue, Date lastUsed) &#123; PersistentRememberMeToken token = this.getTokenForSeries(series); PersistentRememberMeToken newToken = new PersistentRememberMeToken(token.getUsername(), series, tokenValue, new Date()); //创建一个hashmap Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); map.put(&quot;username&quot;, newToken.getUsername()); map.put(&quot;tokenValue&quot;, newToken.getTokenValue()); map.put(&quot;date&quot;, String.valueOf(newToken.getDate().getTime())); map.put(&quot;series&quot;, newToken.getSeries()); String key = generateKey(SERIES_PREFIX, series); redisTemplate.opsForValue().set(key, map); redisTemplate.expire(key, 14, TimeUnit.DAYS); &#125; @Override public PersistentRememberMeToken getTokenForSeries(String seriesId) &#123; Map&lt;String, String&gt; map = (Map) redisTemplate.opsForValue().get(generateKey(SERIES_PREFIX, seriesId)); String username = map.get(&quot;username&quot;); String tokenValue = map.get(&quot;tokenValue&quot;); String date = map.get(&quot;date&quot;); if (null == username || null == tokenValue || null == date) &#123; return null; &#125; Long timestamp = Long.valueOf(date); Date time = new Date(timestamp); PersistentRememberMeToken rememberMeToken = new PersistentRememberMeToken(username, seriesId, tokenValue, time); return rememberMeToken; &#125; @Override public void removeUserTokens(String username) &#123; try &#123; //可能redis版本低于6用不了getAndDelete// String series = (String) redisTemplate.opsForValue().getAndDelete(generateKey(USERNAME_PREFIX, username)); String series = (String) redisTemplate.opsForValue().get(generateKey(USERNAME_PREFIX, username)); redisTemplate.delete(generateKey(USERNAME_PREFIX, username)); redisTemplate.delete(generateKey(SERIES_PREFIX, series)); &#125; catch (Exception e) &#123; log.error(e.getMessage()); &#125; &#125;&#125;","summary":"摘要 本文介绍在SpringBoot Security中的Session管理与RememberMe 实现了基于内存、Jdbc和Redis三种配置方式 本文基于SpringBoot-2.7.14和SpringBoot-3.1.2","date_published":"2023-08-08T14:30:05.000Z","tags":["技术","springboot","springsecurity","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/19/aws-eks19-autoscaler-karpenter/","url":"https://blog.hanqunfeng.com/2023/07/19/aws-eks19-autoscaler-karpenter/","title":"AWS-EKS-19--Autoscaling 之 Karpenter","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍EKS集群Autoscaling 之 Karpenter</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"Karperter是什么？\">Karperter是什么？</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://karpenter.sh/docs/\">Karpenter</a> 是一个开源集群自动缩放器，可以自动为不可安排的pod提供新节点。Karpenter评估了挂起的pod的聚合资源需求，并选择运行它们的最佳实例类型。它将自动扩展或终止没有任何非daemonset pod的实例，以减少浪费。它还支持整合功能，该功能将积极移动pod，并用更便宜的版本删除或替换节点，以降低集群成本。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Karpenter 是aws为 k8s 构建的能用于生产环境的开源的工作节点动态调度控制器。</p>\n</li>\n<li class=\"lvl-2\">\n<p>在Karpenter推出之前，Kubernetes用户主要依靠Amazon EC2 Auto Scaling组和Kubernetes Cluster Autoscaler（CAS）来动态调整其集群的计算容量。</p>\n</li>\n<li class=\"lvl-2\">\n<p>相较于传统的 Cluster Autoscaler 工具，Karpenter 具有调度速度快、更灵活、资源利用率高等众多优势，另外，Karpenter与Kubernetes版本没有那么紧密耦合（像CAS那样），所以其是 EKS 自动扩缩容的首选方案，两者的比较可以参考下图。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特 性</th>\n<th>Cluster Autoscaler</th>\n<th>Karpenter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>资源管理</td>\n<td>Cluster Autoscaler基于现有节点的资源利用率采用反应性方法来扩展节点。</td>\n<td>Karpenter基于未调度的Pod的当前资源需求采取主动方法来进行节点预配。</td>\n</tr>\n<tr>\n<td>节点管理</td>\n<td>Cluster Autoscaler根据当前工作负载的资源需求来管理节点，使用预定义的自动缩放组。</td>\n<td>Karpenter根据自定义预配程序的配置来扩展、预配和管理节点。</td>\n</tr>\n<tr>\n<td>扩展</td>\n<td>Cluster Autoscaler更专注于节点级别的扩展，这意味着它可以有效地添加更多的节点以满足需求的增加。 但这也意味着它在缩减资源方面可能不太有效。</td>\n<td>Karpenter根据特定的工作负载需求提供更有效和精细的扩展功能。换句话说，它根据实际使用情况进行扩展。它还允许用户指定特定的扩展策略或规则以满足其需求。</td>\n</tr>\n<tr>\n<td>调度</td>\n<td>使用Cluster Autoscaler进行调度更简单，因为它是根据工作负载的当前需求设计的进行扩展或缩减。</td>\n<td>Karpenter可以根据可用区和资源需求有效地调度工作负载。它可以尝试通过Spot实例来优化成本，但它不会知道你已经在aws帐号中做的任何承诺，如RI（预留实例）或Savings Plans（储蓄计划）。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Karpenter-运行环境准备\">Karpenter 运行环境准备</h2>\n<h3 id=\"设置环境变量\">设置环境变量</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># aws认证profile</span></span><br><span class=\"line\">$ AWS_PROFILE=eks-us-west-2</span><br><span class=\"line\"><span class=\"comment\"># EKS集群名称</span></span><br><span class=\"line\">$ CLUSTER_NAME=eks-lexing</span><br><span class=\"line\"><span class=\"comment\"># AWS分区</span></span><br><span class=\"line\"><span class=\"comment\"># if you are not using standard partitions, you may need to configure to aws-cn / aws-us-gov</span></span><br><span class=\"line\">$ AWS_PARTITION=<span class=\"string\">&quot;aws&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># EKS所在的Region</span></span><br><span class=\"line\">$ AWS_REGION=<span class=\"string\">&quot;<span class=\"subst\">$(aws configure list | grep region | tr -s <span class=\"string\">&quot; &quot;</span> | cut -d<span class=\"string\">&quot; &quot;</span> -f3)</span>&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># EKS配置OIDC的Endpoint</span></span><br><span class=\"line\">$ OIDC_ENDPOINT=<span class=\"string\">&quot;<span class=\"subst\">$(aws eks describe-cluster --name $&#123;CLUSTER_NAME&#125; --query <span class=\"string\">&quot;cluster.identity.oidc.issuer&quot;</span> --output text)</span>&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># aws帐号ID</span></span><br><span class=\"line\">$ AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query <span class=\"string\">&#x27;Account&#x27;</span> --output text)</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建-Karpenter-的-node-需要的-role\">创建 Karpenter 的 node 需要的 role</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>1.创建role</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;Statement&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Effect&quot;: &quot;Allow&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Principal&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;Service&quot;: &quot;ec2.amazonaws.com&quot;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Action&quot;: &quot;sts:AssumeRole&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span> &gt; node-trust-policy.json</span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam create-role --role-name <span class=\"string\">&quot;KarpenterNodeRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --assume-role-policy-document file://node-trust-policy.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Role&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Path&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;RoleName&quot;</span>: <span class=\"string\">&quot;KarpenterNodeRole-eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;RoleId&quot;</span>: <span class=\"string\">&quot;AROA22DP3G4GH4RZQFGR7&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreateDate&quot;</span>: <span class=\"string\">&quot;2023-07-19T07:20:17+00:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;AssumeRolePolicyDocument&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Version&quot;</span>: <span class=\"string\">&quot;2012-10-17&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Statement&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Effect&quot;</span>: <span class=\"string\">&quot;Allow&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Principal&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;Service&quot;</span>: <span class=\"string\">&quot;ec2.amazonaws.com&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Action&quot;</span>: <span class=\"string\">&quot;sts:AssumeRole&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>2.给这个 role 添加 policy</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws iam attach-role-policy --role-name <span class=\"string\">&quot;KarpenterNodeRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --policy-arn arn:<span class=\"variable\">$&#123;AWS_PARTITION&#125;</span>:iam::aws:policy/AmazonEKSWorkerNodePolicy</span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam attach-role-policy --role-name <span class=\"string\">&quot;KarpenterNodeRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --policy-arn arn:<span class=\"variable\">$&#123;AWS_PARTITION&#125;</span>:iam::aws:policy/AmazonEKS_CNI_Policy</span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam attach-role-policy --role-name <span class=\"string\">&quot;KarpenterNodeRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --policy-arn arn:<span class=\"variable\">$&#123;AWS_PARTITION&#125;</span>:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly</span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam attach-role-policy --role-name <span class=\"string\">&quot;KarpenterNodeRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --policy-arn arn:<span class=\"variable\">$&#123;AWS_PARTITION&#125;</span>:iam::aws:policy/AmazonSSMManagedInstanceCore</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>3.把 role 授予 EC2 的 instance profile</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws iam create-instance-profile \\</span><br><span class=\"line\">    --instance-profile-name <span class=\"string\">&quot;KarpenterNodeInstanceProfile-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;InstanceProfile&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Path&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;InstanceProfileName&quot;</span>: <span class=\"string\">&quot;KarpenterNodeInstanceProfile-eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;InstanceProfileId&quot;</span>: <span class=\"string\">&quot;AIPA22DP3G4GBMSNSBEQF&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:instance-profile/KarpenterNodeInstanceProfile-eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreateDate&quot;</span>: <span class=\"string\">&quot;2023-07-19T07:24:19+00:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Roles&quot;</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam add-role-to-instance-profile \\</span><br><span class=\"line\">    --instance-profile-name <span class=\"string\">&quot;KarpenterNodeInstanceProfile-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --role-name <span class=\"string\">&quot;KarpenterNodeRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建-Karpenter-controller-需要的-role\">创建 Karpenter controller 需要的 role</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>1.创建role</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; controller-trust-policy.json</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;Statement&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Effect&quot;: &quot;Allow&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Principal&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;Federated&quot;: &quot;arn:$&#123;AWS_PARTITION&#125;:iam::$&#123;AWS_ACCOUNT_ID&#125;:oidc-provider/$&#123;OIDC_ENDPOINT#*//&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Condition&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;StringEquals&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;$&#123;OIDC_ENDPOINT#*//&#125;:aud&quot;: &quot;sts.amazonaws.com&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;$&#123;OIDC_ENDPOINT#*//&#125;:sub&quot;: &quot;system:serviceaccount:karpenter:karpenter&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam create-role --role-name KarpenterControllerRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --assume-role-policy-document file://controller-trust-policy.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Role&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Path&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;RoleName&quot;</span>: <span class=\"string\">&quot;KarpenterControllerRole-eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;RoleId&quot;</span>: <span class=\"string\">&quot;AROA22DP3G4GLRLLAPW6T&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:role/KarpenterControllerRole-eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreateDate&quot;</span>: <span class=\"string\">&quot;2023-07-19T07:28:09+00:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;AssumeRolePolicyDocument&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Version&quot;</span>: <span class=\"string\">&quot;2012-10-17&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Statement&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Effect&quot;</span>: <span class=\"string\">&quot;Allow&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Principal&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;Federated&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Action&quot;</span>: <span class=\"string\">&quot;sts:AssumeRoleWithWebIdentity&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Condition&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;StringEquals&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;</span>: <span class=\"string\">&quot;sts.amazonaws.com&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;</span>: <span class=\"string\">&quot;system:serviceaccount:karpenter:karpenter&quot;</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>2.为role配置policy</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; controller-policy.json</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;Statement&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Action&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ssm:GetParameter&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeImages&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:RunInstances&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeSubnets&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeSecurityGroups&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeLaunchTemplates&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeInstances&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeInstanceTypes&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeInstanceTypeOfferings&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeAvailabilityZones&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DeleteLaunchTemplate&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:CreateTags&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:CreateLaunchTemplate&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:CreateFleet&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeSpotPriceHistory&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;pricing:GetProducts&quot;</span></span><br><span class=\"line\"><span class=\"string\">            ],</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Effect&quot;: &quot;Allow&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Resource&quot;: &quot;*&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Sid&quot;: &quot;Karpenter&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Action&quot;: &quot;ec2:TerminateInstances&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Condition&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;StringLike&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;ec2:ResourceTag/karpenter.sh/provisioner-name&quot;: &quot;*&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Effect&quot;: &quot;Allow&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Resource&quot;: &quot;*&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Sid&quot;: &quot;ConditionalEC2Termination&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Effect&quot;: &quot;Allow&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Action&quot;: &quot;iam:PassRole&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Resource&quot;: &quot;arn:$&#123;AWS_PARTITION&#125;:iam::$&#123;AWS_ACCOUNT_ID&#125;:role/KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Sid&quot;: &quot;PassNodeIAMRole&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Effect&quot;: &quot;Allow&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Action&quot;: &quot;eks:DescribeCluster&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Resource&quot;: &quot;arn:$&#123;AWS_PARTITION&#125;:eks:$&#123;AWS_REGION&#125;:$&#123;AWS_ACCOUNT_ID&#125;:cluster/$&#123;CLUSTER_NAME&#125;&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Sid&quot;: &quot;EKSClusterEndpointLookup&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    &quot;Version&quot;: &quot;2012-10-17&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam put-role-policy --role-name KarpenterControllerRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --policy-name KarpenterControllerPolicy-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --policy-document file://controller-policy.json</span><br></pre></td></tr></table></figure>\n<h3 id=\"为所有子网和安全组添加标签\">为所有子网和安全组添加标签</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>1.为节点组内的子网打标签</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">for</span> NODEGROUP <span class=\"keyword\">in</span> $(aws eks list-nodegroups --cluster-name <span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> --query <span class=\"string\">&#x27;nodegroups&#x27;</span> --output text)</span><br><span class=\"line\">  <span class=\"keyword\">do</span> aws ec2 create-tags \\</span><br><span class=\"line\">        --tags <span class=\"string\">&quot;Key=karpenter.sh/discovery,Value=<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">        --resources $(aws eks describe-nodegroup --cluster-name <span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">        --nodegroup-name <span class=\"variable\">$NODEGROUP</span> --query <span class=\"string\">&#x27;nodegroup.subnets&#x27;</span> --output text )</span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>2.给托管节点组的运行模版的安全组打标签</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取节点组</span></span><br><span class=\"line\">$ NODEGROUP=$(aws eks list-nodegroups --cluster-name <span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --query <span class=\"string\">&#x27;nodegroups[0]&#x27;</span> --output text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取节点组的启动模板及其版本号</span></span><br><span class=\"line\">$ LAUNCH_TEMPLATE=$(aws eks describe-nodegroup --cluster-name <span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --nodegroup-name <span class=\"variable\">$&#123;NODEGROUP&#125;</span> --query <span class=\"string\">&#x27;nodegroup.launchTemplate.&#123;id:id,version:version&#125;&#x27;</span> \\</span><br><span class=\"line\">    --output text | <span class=\"built_in\">tr</span> -s <span class=\"string\">&quot;\\t&quot;</span> <span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取启动模板的安全组</span></span><br><span class=\"line\">$ SECURITY_GROUPS=$(aws ec2 describe-launch-template-versions \\</span><br><span class=\"line\">    --launch-template-id <span class=\"variable\">$&#123;LAUNCH_TEMPLATE%,*&#125;</span> --versions <span class=\"variable\">$&#123;LAUNCH_TEMPLATE#*,&#125;</span> \\</span><br><span class=\"line\">    --query <span class=\"string\">&#x27;LaunchTemplateVersions[0].LaunchTemplateData.[NetworkInterfaces[0].Groups||SecurityGroupIds]&#x27;</span> \\</span><br><span class=\"line\">    --output text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为安全组打标签</span></span><br><span class=\"line\">$ aws ec2 create-tags \\</span><br><span class=\"line\">    --tags <span class=\"string\">&quot;Key=karpenter.sh/discovery,Value=<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --resources <span class=\"variable\">$&#123;SECURITY_GROUPS&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"更新-aws-auth-ConfigMap\">更新 aws-auth ConfigMap</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将上面为node创建的role加入到集群权限</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl edit configmap aws-auth -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 mapRoles 下添加如下内容</span></span><br><span class=\"line\">- <span class=\"built_in\">groups</span>:</span><br><span class=\"line\">  - system:bootstrappers</span><br><span class=\"line\">  - system:nodes</span><br><span class=\"line\">  rolearn: arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing</span><br><span class=\"line\">  username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者通过命令行直接添加</span></span><br><span class=\"line\">$ eksctl create iamidentitymapping --cluster eks-lexing \\</span><br><span class=\"line\">  --arn arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing \\</span><br><span class=\"line\">  --username system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; \\</span><br><span class=\"line\">  --group system:bootstrappers \\</span><br><span class=\"line\">  --group system:nodes \\</span><br><span class=\"line\">  --no-duplicate-arns</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>编辑后完整的内容如下:</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">mapRoles:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    - groups:</span></span><br><span class=\"line\"><span class=\"string\">      - system:bootstrappers</span></span><br><span class=\"line\"><span class=\"string\">      - system:nodes</span></span><br><span class=\"line\"><span class=\"string\">      rolearn: arn:aws:iam::743263909644:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y28EPJO9XYDG</span></span><br><span class=\"line\"><span class=\"string\">      username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    - groups:</span></span><br><span class=\"line\"><span class=\"string\">      - system:bootstrappers</span></span><br><span class=\"line\"><span class=\"string\">      - system:nodes</span></span><br><span class=\"line\"><span class=\"string\">      rolearn: arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing</span></span><br><span class=\"line\"><span class=\"string\">      username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span>  <span class=\"attr\">mapUsers:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    - groups:</span></span><br><span class=\"line\"><span class=\"string\">      - eks-console-dashboard-full-access-group</span></span><br><span class=\"line\"><span class=\"string\">      userarn: arn:aws:iam::743263909644:user/ekstest</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"string\">&quot;2023-06-28T06:30:56Z&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">aws-auth</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">resourceVersion:</span> <span class=\"string\">&quot;7544319&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">uid:</span> <span class=\"string\">5e488d60-6ce0-4657-9a08-bbd17d048f0c</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看授权信息</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ eksctl get iamidentitymapping --cluster eks-lexing</span><br><span class=\"line\">ARN\t\t\t\t\t\t\t\t\t\t\t\tUSERNAME\t\t\t\tGROUPS\t\t\t\t\tACCOUNT</span><br><span class=\"line\">arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing\t\t\t\t\tsystem:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;\tsystem:bootstrappers,system:nodes</span><br><span class=\"line\">arn:aws:iam::743263909644:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y28EPJO9XYDG\tsystem:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;\tsystem:bootstrappers,system:nodes</span><br><span class=\"line\">arn:aws:iam::743263909644:user/ekstest\t\t\t\t\t\t\t\t\t\t\t\t\teks-console-dashboard-full-access-group</span><br></pre></td></tr></table></figure>\n<h2 id=\"部署-Karpenter\">部署 Karpenter</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>1.设置环境变量</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前最新版是 v0.29.1 , https://github.com/aws/karpenter/releases</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KARPENTER_VERSION=v0.29.1</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>2.创建 karpenter.yaml 模版</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm template karpenter oci://public.ecr.aws/karpenter/karpenter --version <span class=\"variable\">$&#123;KARPENTER_VERSION&#125;</span> \\</span><br><span class=\"line\">    --namespace karpenter \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> settings.aws.defaultInstanceProfile=KarpenterNodeInstanceProfile-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> settings.aws.clusterName=<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> serviceAccount.annotations.<span class=\"string\">&quot;eks\\.amazonaws\\.com/role-arn&quot;</span>=<span class=\"string\">&quot;arn:<span class=\"variable\">$&#123;AWS_PARTITION&#125;</span>:iam::<span class=\"variable\">$&#123;AWS_ACCOUNT_ID&#125;</span>:role/KarpenterControllerRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> controller.resources.requests.cpu=1 \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> controller.resources.requests.memory=1Gi \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> controller.resources.limits.cpu=1 \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> controller.resources.limits.memory=1Gi &gt; karpenter.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>3.设置节点亲和性，编辑<code>karpenter.yaml</code>，找到karpenter deployment的亲和性配置，修改为如下内容，注意这里<code>ng-4d9024eb</code>要替换为你的<code>$&#123;NODEGROUP&#125;</code>。关节K8s<code>节点亲和性</code>的介绍可以参考官方文档<a href=\"https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\">亲和性与反亲和性</a></p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">affinity:</span></span><br><span class=\"line\">  <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">    <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">karpenter.sh/provisioner-name</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">DoesNotExist</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">eks.amazonaws.com/nodegroup</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">ng-4d9024eb</span></span><br><span class=\"line\">  <span class=\"attr\">podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">topologyKey:</span> <span class=\"string\">&quot;kubernetes.io/hostname&quot;</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>为其他关键集群工作负载设置nodeAffinity</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">例如 CoreDNS，Controller，CNI，CSI 和 Operator 等，这些 workload 对弹性要求不高但是稳定性要求比较高，建议部署在创建EKS时的节点组运行。</li>\n<li class=\"lvl-2\">为这些关键负载设置nodeAffinity</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">affinity:</span></span><br><span class=\"line\">  <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">    <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">eks.amazonaws.com/nodegroup</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">$&#123;NODEGROUP&#125;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">比如设置<code>k edit deploy ebs-csi-controller -n kube-system</code>，添加好<code>nodeAffinity</code>后保存，然后查看对应的pod是否重启成功，如果一只处于<code>pending</code>状态，可以试着重启</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k scale deploy ebs-csi-controller --replicas 0 -n kube-system</span><br><span class=\"line\">$ k scale deploy ebs-csi-controller --replicas 2 -n kube-system</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">设置好所有关键负载后，可以重启一下 karpenter</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k scale deploy karpenter --replicas 0 -n karpenter</span><br><span class=\"line\">$ k scale deploy karpenter --replicas 2 -n karpenter</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>查看 karpenter 日志是否正常</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k logs deployments/karpenter -f -n karpenter</span><br></pre></td></tr></table></figure>\n</div>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>4.部署 karpenter 及其 相关资源</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Namespace</span></span><br><span class=\"line\">$ kubectl create namespace karpenter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载karpenter 相关资源</span></span><br><span class=\"line\"><span class=\"comment\"># karpenter的版本分支，正常karpenter发布时都会打branch，比如：release-v0.28.1，不过我在github上没有找到v0.29.1的branch，所以这里就指定 main 了</span></span><br><span class=\"line\">$ KARPENTER_BRANCH=main</span><br><span class=\"line\">$ curl -O <span class=\"string\">&quot;https://raw.githubusercontent.com/aws/karpenter/<span class=\"variable\">$&#123;KARPENTER_BRANCH&#125;</span>/pkg/apis/crds/karpenter.sh_provisioners.yaml&quot;</span></span><br><span class=\"line\">$ curl -O <span class=\"string\">&quot;https://raw.githubusercontent.com/aws/karpenter/<span class=\"variable\">$&#123;KARPENTER_BRANCH&#125;</span>/pkg/apis/crds/karpenter.k8s.aws_awsnodetemplates.yaml&quot;</span></span><br><span class=\"line\">$ curl -O <span class=\"string\">&quot;https://raw.githubusercontent.com/aws/karpenter/<span class=\"variable\">$&#123;KARPENTER_BRANCH&#125;</span>/pkg/apis/crds/karpenter.sh_machines.yaml &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署karpenter 相关资源</span></span><br><span class=\"line\">$ kubectl apply -f karpenter.sh_provisioners.yaml</span><br><span class=\"line\">$ kubectl apply -f karpenter.k8s.aws_awsnodetemplates.yaml</span><br><span class=\"line\">$ kubectl apply -f karpenter.sh_machines.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署karpenter</span></span><br><span class=\"line\">$ k apply -f karpenter.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>5.创建默认的供应者(provisioner)</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://karpenter.sh/docs/concepts/provisioners/\">Provisioner</a>与<a href=\"https://karpenter.sh/docs/concepts/node-templates/\">AWSNodeTemplate</a>是karpenter在K8s中的自定义资源。</li>\n<li class=\"lvl-6\"><code>Provisioner</code> 对 Karpenter 可创建的节点以及可在这些节点上运行的 Pod 设置约束。如果没有配置至少一个<code>Provisioner</code>，Karpenter 将不会执行任何操作。</li>\n<li class=\"lvl-6\">关于<code>Provisioner</code>支持的配置项可以参考<a href=\"https://karpenter.sh/docs/concepts/provisioners/\">官方文档</a>，比如下面就限制了被管控的节点必须符合两个条件：</li>\n</ul>\n<blockquote>\n<p>1.实例类别必须在[c, m, r]中<br>\n2.实例的生成代次必须大于2。比如 实例类型为 <code>c1.xxx，m1.xxx，m2.xxx</code>就不符合要求</p>\n</blockquote>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><code>AWSNodeTemplate</code>节点模板启用AWS特定设置的配置。关于<code>AWSNodeTemplate</code>支持的配置项可以参考<a href=\"https://karpenter.sh/docs/concepts/node-templates/\">官方文档</a>，比如默认节点关联的存储为20G gp3，如果要修改为40G可以在spec下指定如下内容，先创建后编辑也可以，但只有修改后新创建的节点才会使用新的配置。</li>\n</ul>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">blockDeviceMappings:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">deviceName:</span> <span class=\"string\">/dev/xvda</span></span><br><span class=\"line\">  <span class=\"attr\">ebs:</span></span><br><span class=\"line\">    <span class=\"attr\">volumeType:</span> <span class=\"string\">gp3</span></span><br><span class=\"line\">    <span class=\"attr\">volumeSize:</span> <span class=\"string\">40Gi</span></span><br><span class=\"line\">    <span class=\"attr\">deleteOnTermination:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">\n<p><code>Provisioner</code>需要与<code>AWSNodeTemplate</code>关联使用，通过在<code>Provisioner</code>的<code>providerRef</code>中指定<code>AWSNodeTemplate</code>的<code>name</code>进行关联，一个<code>AWSNodeTemplate</code>可以被多个<code>Provisioner</code>关联。</p>\n</li>\n<li class=\"lvl-6\">\n<p>配置的每个 <code>Provisioner</code> 均由 Karpenter 循环遍历。在 <code>Provisioner</code> 中定义污点以限制可以在 Karpenter 创建的节点上运行的 Pod。建议创建互斥的 <code>Provisioner</code>。因此任何 Pod 都不应该匹配多个 <code>Provisioner</code>。如果匹配多个<code>Provisioner</code>，Karpenter将使用权重最高的<code>Provisioner</code> 。关于K8s中<code>污点</code>的介绍可以参考官方文档<a href=\"https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/taint-and-toleration/\">污点和容忍度</a></p>\n</li>\n<li class=\"lvl-6\">\n<p>下面是一个最基本的<code>Provisioner</code>定义，你可以根据需要创建自己的<code>Provisioner</code>，可以参考<a href=\"https://karpenter.sh/docs/concepts/provisioners/\">官方文档</a>或者查看<a href=\"https://github.com/aws/karpenter/tree/v0.29.1/examples/provisioner\">provisioner examples</a>中的示例。</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 default Provisioner</span></span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF | kubectl apply -f -</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: karpenter.sh/v1alpha5</span></span><br><span class=\"line\"><span class=\"string\">kind: Provisioner</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  name: default</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  requirements:</span></span><br><span class=\"line\"><span class=\"string\">    - key: karpenter.k8s.aws/instance-category</span></span><br><span class=\"line\"><span class=\"string\">      operator: In</span></span><br><span class=\"line\"><span class=\"string\">      values: [c, m, r]</span></span><br><span class=\"line\"><span class=\"string\">    - key: karpenter.k8s.aws/instance-generation</span></span><br><span class=\"line\"><span class=\"string\">      operator: Gt</span></span><br><span class=\"line\"><span class=\"string\">      values: [&quot;2&quot;]</span></span><br><span class=\"line\"><span class=\"string\">  providerRef:</span></span><br><span class=\"line\"><span class=\"string\">    name: default</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: karpenter.k8s.aws/v1alpha1</span></span><br><span class=\"line\"><span class=\"string\">kind: AWSNodeTemplate</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  name: default</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  subnetSelector:</span></span><br><span class=\"line\"><span class=\"string\">    karpenter.sh/discovery: &quot;$&#123;CLUSTER_NAME&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">  securityGroupSelector:</span></span><br><span class=\"line\"><span class=\"string\">    karpenter.sh/discovery: &quot;$&#123;CLUSTER_NAME&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看 karpenter 状态</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get pod -n karpenter</span><br><span class=\"line\">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">karpenter-789bbcbfd7-htj6z   1/1     Running   0          101s</span><br><span class=\"line\">karpenter-789bbcbfd7-rlxfp   1/1     Running   0          101s</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看 karpenter 日志是否正常</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k logs deployments/karpenter -f -n karpenter</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>karpenter创建新的节点时不会在原有的节点组中进行，所以为了摆脱从节点组添加的实例，我们可以将节点组缩小到最小大小</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果您有一个多AZ节点组，我们建议至少2个实例。</span></span><br><span class=\"line\">$ aws eks update-nodegroup-config --cluster-name <span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --nodegroup-name <span class=\"variable\">$&#123;NODEGROUP&#125;</span> \\</span><br><span class=\"line\">    --scaling-config <span class=\"string\">&quot;minSize=2,maxSize=2,desiredSize=2&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>关停Cluster Autoscaler(CAS)<br>\n如果EKS中已经开启了CAS，则安装Karpenter后需要关闭CAS</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl scale deploy/cluster-autoscaler -n kube-system --replicas=0</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\">测试</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看当前node信息</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   19d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   19d   v1.26.4-eks-0a21954</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>采用 <a href=\"/2023/07/18/aws-eks18-autoscaler-cas/\" title=\"AWS-EKS-18--Autoscaling 之 Cluster Autoscaler(CAS)\">AWS-EKS-18--Autoscaling 之 Cluster Autoscaler(CAS)</a> 中的测试方法，将deploy的副本数设置为50，过一会查看node情况</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以看到node数量已经变为3了，说明扩容成功</span></span><br><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   19d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-34-126.us-west-2.compute.internal   Ready    &lt;none&gt;   47s   v1.26.6-eks-a5565ad</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   19d   v1.26.4-eks-0a21954</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/Rx3wJO.png\" alt=\"\" width=\"1000\" height=\"800\"></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>缩容测试用的deploy，副本数设置为1，过一会发现node节点并没有被终止，这是为什么呢？</p>\n</li>\n</ul>\n<blockquote>\n<p>默认情况下，Karpenter不会主动终止节点，需要为其设置终止节点的方式，参考<a href=\"https://karpenter.sh/docs/concepts/deprovisioning/\">Karpenter官方文档Deprovisioning部分</a></p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在<code>Provisioner</code>中设置节点终止的方式</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><code>spec.ttlSecondsAfterEmpty</code>: 当最后一个工作负载（非守护程序集）pod停止在节点上运行时，Karpenter会注意到。从那时起，Karpenter在提供程序中等待<code>ttlSecondsAfterEmpty</code>设置的秒数，然后Karpenter请求删除节点。此功能可以通过删除不再用于工作负载的节点来降低成本。</li>\n<li class=\"lvl-6\"><code>spec.ttlSecondsUntilExpired</code>: Karpenter 将根据<code>Provisioner</code>的<code>ttlSecondsUntilExpired</code>值将节点注释为过期，并在节点生存了设定秒数后取消配置节点。节点过期的一种用例是定期回收节点。</li>\n<li class=\"lvl-6\"><code>spec.consolidation.enabled</code>: 实现整合，通过删除不需要的节点和缩减无法删除的节点的规模来降低集群成本。与<code>ttlSecondsAfterEmpty</code>参数互斥。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 default provisioner，并为其指定 spec.ttlSecondsAfterEmpty: 30，表示空闲超过30秒则终止节点。</span></span><br><span class=\"line\">$ k edit provisioners.karpenter.sh default</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">karpenter.sh/v1alpha5</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Provisioner</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubectl.kubernetes.io/last-applied-configuration:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&quot;apiVersion&quot;:&quot;karpenter.sh/v1alpha5&quot;,&quot;kind&quot;:&quot;Provisioner&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;</span></span><br><span class=\"line\"><span class=\"string\"></span>  <span class=\"attr\">creationTimestamp:</span> <span class=\"string\">&quot;2023-07-19T09:49:43Z&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">generation:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">resourceVersion:</span> <span class=\"string\">&quot;7987578&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">uid:</span> <span class=\"string\">5716142b-2b9f-493c-a049-e4304cdf82d4</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">providerRef:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">requirements:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">karpenter.k8s.aws/instance-category</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">    <span class=\"attr\">values:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">c</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">m</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">r</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">karpenter.k8s.aws/instance-generation</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">Gt</span></span><br><span class=\"line\">    <span class=\"attr\">values:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">kubernetes.io/os</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">    <span class=\"attr\">values:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">linux</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">kubernetes.io/arch</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">    <span class=\"attr\">values:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">amd64</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">karpenter.sh/capacity-type</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">    <span class=\"attr\">values:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">on-demand</span></span><br><span class=\"line\">  <span class=\"attr\">ttlSecondsAfterEmpty:</span> <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attr\">status:</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ephemeral-storage:</span> <span class=\"string\">20959212Ki</span></span><br><span class=\"line\">    <span class=\"attr\">memory:</span> <span class=\"string\">3900360Ki</span></span><br><span class=\"line\">    <span class=\"attr\">pods:</span> <span class=\"string\">&quot;29&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>等待30秒后查看node情况，新创建的node已经成功终止</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   19d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   19d   v1.26.4-eks-0a21954</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建和终止节点的过程可以通过日志进行观察</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k logs deployments/karpenter -f -n karpenter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下创建节点的日志</span></span><br><span class=\"line\">2023-07-20T09:03:54.763Z\tINFO\tcontroller.provisioner\tfound provisionable pod(s)\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;pods&quot;</span>: 17&#125;</span><br><span class=\"line\">2023-07-20T09:03:54.763Z\tINFO\tcontroller.provisioner\tcomputed new machine(s) to fit pod(s)\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machines&quot;</span>: 1, <span class=\"string\">&quot;pods&quot;</span>: 17&#125;</span><br><span class=\"line\">2023-07-20T09:03:54.788Z\tINFO\tcontroller.provisioner\tcreated machine\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;requests&quot;</span>: &#123;<span class=\"string\">&quot;cpu&quot;</span>:<span class=\"string\">&quot;155m&quot;</span>,<span class=\"string\">&quot;memory&quot;</span>:<span class=\"string\">&quot;120Mi&quot;</span>,<span class=\"string\">&quot;pods&quot;</span>:<span class=\"string\">&quot;21&quot;</span>&#125;, <span class=\"string\">&quot;instance-types&quot;</span>: <span class=\"string\">&quot;c3.2xlarge, c3.large, c3.xlarge, c4.2xlarge, c4.large and 95 other(s)&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:03:54.978Z\tDEBUG\tcontroller.machine.lifecycle\tcreated launch template\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;launch-template-name&quot;</span>: <span class=\"string\">&quot;karpenter.k8s.aws/2892028901667059566&quot;</span>, <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;lt-0ef53ab2c4909f493&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:03:55.108Z\tDEBUG\tcontroller.machine.lifecycle\tcreated launch template\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;launch-template-name&quot;</span>: <span class=\"string\">&quot;karpenter.k8s.aws/1810058814439854165&quot;</span>, <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;lt-02cda7252a2d29e16&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:03:57.095Z\tINFO\tcontroller.machine.lifecycle\tlaunched machine\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;provider-id&quot;</span>: <span class=\"string\">&quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;</span>, <span class=\"string\">&quot;instance-type&quot;</span>: <span class=\"string\">&quot;c6a.large&quot;</span>, <span class=\"string\">&quot;zone&quot;</span>: <span class=\"string\">&quot;us-west-2d&quot;</span>, <span class=\"string\">&quot;capacity-type&quot;</span>: <span class=\"string\">&quot;on-demand&quot;</span>, <span class=\"string\">&quot;allocatable&quot;</span>: &#123;<span class=\"string\">&quot;cpu&quot;</span>:<span class=\"string\">&quot;1930m&quot;</span>,<span class=\"string\">&quot;ephemeral-storage&quot;</span>:<span class=\"string\">&quot;17Gi&quot;</span>,<span class=\"string\">&quot;memory&quot;</span>:<span class=\"string\">&quot;3114Mi&quot;</span>,<span class=\"string\">&quot;pods&quot;</span>:<span class=\"string\">&quot;29&quot;</span>&#125;&#125;</span><br><span class=\"line\">2023-07-20T09:04:14.473Z\tDEBUG\tcontroller.machine.lifecycle\tregistered machine\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;provider-id&quot;</span>: <span class=\"string\">&quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;</span>, <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;ip-192-168-79-236.us-west-2.compute.internal&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:04:28.620Z\tDEBUG\tcontroller.machine.lifecycle\tinitialized machine&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;provider-id&quot;</span>: <span class=\"string\">&quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;</span>, <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;ip-192-168-79-236.us-west-2.compute.internal&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下是终止节点的日志</span></span><br><span class=\"line\">2023-07-20T09:05:46.420Z\tDEBUG\tcontroller.machine.disruption\tmarking machine as empty\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:06:20.642Z\tINFO\tcontroller.deprovisioning\tdeprovisioning via emptiness delete, terminating 1 machines ip-192-168-79-236.us-west-2.compute.internal/c6a.large/on-demand\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:06:20.699Z\tINFO\tcontroller.termination\tcordoned node\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;ip-192-168-79-236.us-west-2.compute.internal&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:06:21.026Z\tINFO\tcontroller.termination\tdeleted node\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;ip-192-168-79-236.us-west-2.compute.internal&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:06:21.288Z\tINFO\tcontroller.machine.termination\tdeleted machine\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>, <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;ip-192-168-79-236.us-west-2.compute.internal&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;provider-id&quot;</span>: <span class=\"string\">&quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em><br>\n当Karpenter管理的Node节点由于某种原因不可用时(比如我们在AWS控制台终止了EC2或通过命令行删除节点<code>k delete node nodeName</code>)，Karpenter会立刻为我们创建一个新的Node节点，并在其上重启Pod。</p>\n</div>\n<h2 id=\"参考资料\">参考资料</h2>\n<p><a href=\"https://karpenter.sh/docs/getting-started/migrating-from-cas/\">从Cluster Autoscaler迁移</a><br>\n<a href=\"https://aws.amazon.com/cn/blogs/china/migration-of-cluster-autoscaler-to-karpenter-on-eks/\">EKS Cluster Autoscaler 迁移 Karpenter 实践</a><br>\n<a href=\"https://aws.github.io/aws-eks-best-practices/karpenter/\">Karpenter Best Practices</a></p>\n","content_text":"摘要 本文介绍EKS集群Autoscaling 之 Karpenter 参考资料： Amazon EKS用户指南 Kubernetes 文档 Karperter是什么？ Karpenter 是一个开源集群自动缩放器，可以自动为不可安排的pod提供新节点。Karpenter评估了挂起的pod的聚合资源需求，并选择运行它们的最佳实例类型。它将自动扩展或终止没有任何非daemonset pod的实例，以减少浪费。它还支持整合功能，该功能将积极移动pod，并用更便宜的版本删除或替换节点，以降低集群成本。 Karpenter 是aws为 k8s 构建的能用于生产环境的开源的工作节点动态调度控制器。 在Karpenter推出之前，Kubernetes用户主要依靠Amazon EC2 Auto Scaling组和Kubernetes Cluster Autoscaler（CAS）来动态调整其集群的计算容量。 相较于传统的 Cluster Autoscaler 工具，Karpenter 具有调度速度快、更灵活、资源利用率高等众多优势，另外，Karpenter与Kubernetes版本没有那么紧密耦合（像CAS那样），所以其是 EKS 自动扩缩容的首选方案，两者的比较可以参考下图。 特 性 Cluster Autoscaler Karpenter 资源管理 Cluster Autoscaler基于现有节点的资源利用率采用反应性方法来扩展节点。 Karpenter基于未调度的Pod的当前资源需求采取主动方法来进行节点预配。 节点管理 Cluster Autoscaler根据当前工作负载的资源需求来管理节点，使用预定义的自动缩放组。 Karpenter根据自定义预配程序的配置来扩展、预配和管理节点。 扩展 Cluster Autoscaler更专注于节点级别的扩展，这意味着它可以有效地添加更多的节点以满足需求的增加。 但这也意味着它在缩减资源方面可能不太有效。 Karpenter根据特定的工作负载需求提供更有效和精细的扩展功能。换句话说，它根据实际使用情况进行扩展。它还允许用户指定特定的扩展策略或规则以满足其需求。 调度 使用Cluster Autoscaler进行调度更简单，因为它是根据工作负载的当前需求设计的进行扩展或缩减。 Karpenter可以根据可用区和资源需求有效地调度工作负载。它可以尝试通过Spot实例来优化成本，但它不会知道你已经在aws帐号中做的任何承诺，如RI（预留实例）或Savings Plans（储蓄计划）。 Karpenter 运行环境准备 设置环境变量 12345678910111213# aws认证profile$ AWS_PROFILE=eks-us-west-2# EKS集群名称$ CLUSTER_NAME=eks-lexing# AWS分区# if you are not using standard partitions, you may need to configure to aws-cn / aws-us-gov$ AWS_PARTITION=&quot;aws&quot;# EKS所在的Region$ AWS_REGION=&quot;$(aws configure list | grep region | tr -s &quot; &quot; | cut -d&quot; &quot; -f3)&quot;# EKS配置OIDC的Endpoint$ OIDC_ENDPOINT=&quot;$(aws eks describe-cluster --name $&#123;CLUSTER_NAME&#125; --query &quot;cluster.identity.oidc.issuer&quot; --output text)&quot;# aws帐号ID$ AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query &#x27;Account&#x27; --output text) 创建 Karpenter 的 node 需要的 role 1.创建role 123456789101112131415161718192021222324252627282930313233343536$ echo &#x27;&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Service&quot;: &quot;ec2.amazonaws.com&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRole&quot; &#125; ]&#125;&#x27; &gt; node-trust-policy.json$ aws iam create-role --role-name &quot;KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot; \\ --assume-role-policy-document file://node-trust-policy.json&#123; &quot;Role&quot;: &#123; &quot;Path&quot;: &quot;/&quot;, &quot;RoleName&quot;: &quot;KarpenterNodeRole-eks-lexing&quot;, &quot;RoleId&quot;: &quot;AROA22DP3G4GH4RZQFGR7&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing&quot;, &quot;CreateDate&quot;: &quot;2023-07-19T07:20:17+00:00&quot;, &quot;AssumeRolePolicyDocument&quot;: &#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Service&quot;: &quot;ec2.amazonaws.com&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRole&quot; &#125; ] &#125; &#125;&#125; 2.给这个 role 添加 policy 1234567891011$ aws iam attach-role-policy --role-name &quot;KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot; \\ --policy-arn arn:$&#123;AWS_PARTITION&#125;:iam::aws:policy/AmazonEKSWorkerNodePolicy$ aws iam attach-role-policy --role-name &quot;KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot; \\ --policy-arn arn:$&#123;AWS_PARTITION&#125;:iam::aws:policy/AmazonEKS_CNI_Policy$ aws iam attach-role-policy --role-name &quot;KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot; \\ --policy-arn arn:$&#123;AWS_PARTITION&#125;:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly$ aws iam attach-role-policy --role-name &quot;KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot; \\ --policy-arn arn:$&#123;AWS_PARTITION&#125;:iam::aws:policy/AmazonSSMManagedInstanceCore 3.把 role 授予 EC2 的 instance profile 12345678910111213141516$ aws iam create-instance-profile \\ --instance-profile-name &quot;KarpenterNodeInstanceProfile-$&#123;CLUSTER_NAME&#125;&quot;&#123; &quot;InstanceProfile&quot;: &#123; &quot;Path&quot;: &quot;/&quot;, &quot;InstanceProfileName&quot;: &quot;KarpenterNodeInstanceProfile-eks-lexing&quot;, &quot;InstanceProfileId&quot;: &quot;AIPA22DP3G4GBMSNSBEQF&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909644:instance-profile/KarpenterNodeInstanceProfile-eks-lexing&quot;, &quot;CreateDate&quot;: &quot;2023-07-19T07:24:19+00:00&quot;, &quot;Roles&quot;: [] &#125;&#125;$ aws iam add-role-to-instance-profile \\ --instance-profile-name &quot;KarpenterNodeInstanceProfile-$&#123;CLUSTER_NAME&#125;&quot; \\ --role-name &quot;KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot; 创建 Karpenter controller 需要的 role 1.创建role 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950$ cat &lt;&lt; EOF &gt; controller-trust-policy.json&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Federated&quot;: &quot;arn:$&#123;AWS_PARTITION&#125;:iam::$&#123;AWS_ACCOUNT_ID&#125;:oidc-provider/$&#123;OIDC_ENDPOINT#*//&#125;&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;, &quot;Condition&quot;: &#123; &quot;StringEquals&quot;: &#123; &quot;$&#123;OIDC_ENDPOINT#*//&#125;:aud&quot;: &quot;sts.amazonaws.com&quot;, &quot;$&#123;OIDC_ENDPOINT#*//&#125;:sub&quot;: &quot;system:serviceaccount:karpenter:karpenter&quot; &#125; &#125; &#125; ]&#125;EOF$ aws iam create-role --role-name KarpenterControllerRole-$&#123;CLUSTER_NAME&#125; \\ --assume-role-policy-document file://controller-trust-policy.json&#123; &quot;Role&quot;: &#123; &quot;Path&quot;: &quot;/&quot;, &quot;RoleName&quot;: &quot;KarpenterControllerRole-eks-lexing&quot;, &quot;RoleId&quot;: &quot;AROA22DP3G4GLRLLAPW6T&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909644:role/KarpenterControllerRole-eks-lexing&quot;, &quot;CreateDate&quot;: &quot;2023-07-19T07:28:09+00:00&quot;, &quot;AssumeRolePolicyDocument&quot;: &#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Federated&quot;: &quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;, &quot;Condition&quot;: &#123; &quot;StringEquals&quot;: &#123; &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;: &quot;sts.amazonaws.com&quot;, &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;: &quot;system:serviceaccount:karpenter:karpenter&quot; &#125; &#125; &#125; ] &#125; &#125;&#125; 2.为role配置policy 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657$ cat &lt;&lt; EOF &gt; controller-policy.json&#123; &quot;Statement&quot;: [ &#123; &quot;Action&quot;: [ &quot;ssm:GetParameter&quot;, &quot;ec2:DescribeImages&quot;, &quot;ec2:RunInstances&quot;, &quot;ec2:DescribeSubnets&quot;, &quot;ec2:DescribeSecurityGroups&quot;, &quot;ec2:DescribeLaunchTemplates&quot;, &quot;ec2:DescribeInstances&quot;, &quot;ec2:DescribeInstanceTypes&quot;, &quot;ec2:DescribeInstanceTypeOfferings&quot;, &quot;ec2:DescribeAvailabilityZones&quot;, &quot;ec2:DeleteLaunchTemplate&quot;, &quot;ec2:CreateTags&quot;, &quot;ec2:CreateLaunchTemplate&quot;, &quot;ec2:CreateFleet&quot;, &quot;ec2:DescribeSpotPriceHistory&quot;, &quot;pricing:GetProducts&quot; ], &quot;Effect&quot;: &quot;Allow&quot;, &quot;Resource&quot;: &quot;*&quot;, &quot;Sid&quot;: &quot;Karpenter&quot; &#125;, &#123; &quot;Action&quot;: &quot;ec2:TerminateInstances&quot;, &quot;Condition&quot;: &#123; &quot;StringLike&quot;: &#123; &quot;ec2:ResourceTag/karpenter.sh/provisioner-name&quot;: &quot;*&quot; &#125; &#125;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Resource&quot;: &quot;*&quot;, &quot;Sid&quot;: &quot;ConditionalEC2Termination&quot; &#125;, &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: &quot;iam:PassRole&quot;, &quot;Resource&quot;: &quot;arn:$&#123;AWS_PARTITION&#125;:iam::$&#123;AWS_ACCOUNT_ID&#125;:role/KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot;, &quot;Sid&quot;: &quot;PassNodeIAMRole&quot; &#125;, &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: &quot;eks:DescribeCluster&quot;, &quot;Resource&quot;: &quot;arn:$&#123;AWS_PARTITION&#125;:eks:$&#123;AWS_REGION&#125;:$&#123;AWS_ACCOUNT_ID&#125;:cluster/$&#123;CLUSTER_NAME&#125;&quot;, &quot;Sid&quot;: &quot;EKSClusterEndpointLookup&quot; &#125; ], &quot;Version&quot;: &quot;2012-10-17&quot;&#125;EOF$ aws iam put-role-policy --role-name KarpenterControllerRole-$&#123;CLUSTER_NAME&#125; \\ --policy-name KarpenterControllerPolicy-$&#123;CLUSTER_NAME&#125; \\ --policy-document file://controller-policy.json 为所有子网和安全组添加标签 1.为节点组内的子网打标签 123456$ for NODEGROUP in $(aws eks list-nodegroups --cluster-name $&#123;CLUSTER_NAME&#125; --query &#x27;nodegroups&#x27; --output text) do aws ec2 create-tags \\ --tags &quot;Key=karpenter.sh/discovery,Value=$&#123;CLUSTER_NAME&#125;&quot; \\ --resources $(aws eks describe-nodegroup --cluster-name $&#123;CLUSTER_NAME&#125; \\ --nodegroup-name $NODEGROUP --query &#x27;nodegroup.subnets&#x27; --output text ) done 2.给托管节点组的运行模版的安全组打标签 12345678910111213141516171819# 获取节点组$ NODEGROUP=$(aws eks list-nodegroups --cluster-name $&#123;CLUSTER_NAME&#125; \\ --query &#x27;nodegroups[0]&#x27; --output text)# 获取节点组的启动模板及其版本号$ LAUNCH_TEMPLATE=$(aws eks describe-nodegroup --cluster-name $&#123;CLUSTER_NAME&#125; \\ --nodegroup-name $&#123;NODEGROUP&#125; --query &#x27;nodegroup.launchTemplate.&#123;id:id,version:version&#125;&#x27; \\ --output text | tr -s &quot;\\t&quot; &quot;,&quot;)# 获取启动模板的安全组$ SECURITY_GROUPS=$(aws ec2 describe-launch-template-versions \\ --launch-template-id $&#123;LAUNCH_TEMPLATE%,*&#125; --versions $&#123;LAUNCH_TEMPLATE#*,&#125; \\ --query &#x27;LaunchTemplateVersions[0].LaunchTemplateData.[NetworkInterfaces[0].Groups||SecurityGroupIds]&#x27; \\ --output text)# 为安全组打标签$ aws ec2 create-tags \\ --tags &quot;Key=karpenter.sh/discovery,Value=$&#123;CLUSTER_NAME&#125;&quot; \\ --resources $&#123;SECURITY_GROUPS&#125; 更新 aws-auth ConfigMap 将上面为node创建的role加入到集群权限 12345678910111213141516$ kubectl edit configmap aws-auth -n kube-system# 在 mapRoles 下添加如下内容- groups: - system:bootstrappers - system:nodes rolearn: arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;# 或者通过命令行直接添加$ eksctl create iamidentitymapping --cluster eks-lexing \\ --arn arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing \\ --username system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; \\ --group system:bootstrappers \\ --group system:nodes \\ --no-duplicate-arns 编辑后完整的内容如下: 123456789101112131415161718192021222324apiVersion: v1data: mapRoles: | - groups: - system:bootstrappers - system:nodes rolearn: arn:aws:iam::743263909644:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y28EPJO9XYDG username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; - groups: - system:bootstrappers - system:nodes rolearn: arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; mapUsers: | - groups: - eks-console-dashboard-full-access-group userarn: arn:aws:iam::743263909644:user/ekstestkind: ConfigMapmetadata: creationTimestamp: &quot;2023-06-28T06:30:56Z&quot; name: aws-auth namespace: kube-system resourceVersion: &quot;7544319&quot; uid: 5e488d60-6ce0-4657-9a08-bbd17d048f0c 查看授权信息 12345$ eksctl get iamidentitymapping --cluster eks-lexingARN USERNAME GROUPS ACCOUNTarn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; system:bootstrappers,system:nodesarn:aws:iam::743263909644:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y28EPJO9XYDG system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; system:bootstrappers,system:nodesarn:aws:iam::743263909644:user/ekstest eks-console-dashboard-full-access-group 部署 Karpenter 1.设置环境变量 12# 当前最新版是 v0.29.1 , https://github.com/aws/karpenter/releasesexport KARPENTER_VERSION=v0.29.1 2.创建 karpenter.yaml 模版 123456789$ helm template karpenter oci://public.ecr.aws/karpenter/karpenter --version $&#123;KARPENTER_VERSION&#125; \\ --namespace karpenter \\ --set settings.aws.defaultInstanceProfile=KarpenterNodeInstanceProfile-$&#123;CLUSTER_NAME&#125; \\ --set settings.aws.clusterName=$&#123;CLUSTER_NAME&#125; \\ --set serviceAccount.annotations.&quot;eks\\.amazonaws\\.com/role-arn&quot;=&quot;arn:$&#123;AWS_PARTITION&#125;:iam::$&#123;AWS_ACCOUNT_ID&#125;:role/KarpenterControllerRole-$&#123;CLUSTER_NAME&#125;&quot; \\ --set controller.resources.requests.cpu=1 \\ --set controller.resources.requests.memory=1Gi \\ --set controller.resources.limits.cpu=1 \\ --set controller.resources.limits.memory=1Gi &gt; karpenter.yaml 3.设置节点亲和性，编辑karpenter.yaml，找到karpenter deployment的亲和性配置，修改为如下内容，注意这里ng-4d9024eb要替换为你的$&#123;NODEGROUP&#125;。关节K8s节点亲和性的介绍可以参考官方文档亲和性与反亲和性 123456789101112131415affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - key: karpenter.sh/provisioner-name operator: DoesNotExist - matchExpressions: - key: eks.amazonaws.com/nodegroup operator: In values: - ng-4d9024eb podAntiAffinity: requiredDuringSchedulingIgnoredDuringExecution: - topologyKey: &quot;kubernetes.io/hostname&quot; 为其他关键集群工作负载设置nodeAffinity 例如 CoreDNS，Controller，CNI，CSI 和 Operator 等，这些 workload 对弹性要求不高但是稳定性要求比较高，建议部署在创建EKS时的节点组运行。 为这些关键负载设置nodeAffinity 123456789affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - key: eks.amazonaws.com/nodegroup operator: In values: - $&#123;NODEGROUP&#125; 比如设置k edit deploy ebs-csi-controller -n kube-system，添加好nodeAffinity后保存，然后查看对应的pod是否重启成功，如果一只处于pending状态，可以试着重启 12$ k scale deploy ebs-csi-controller --replicas 0 -n kube-system$ k scale deploy ebs-csi-controller --replicas 2 -n kube-system 设置好所有关键负载后，可以重启一下 karpenter 12$ k scale deploy karpenter --replicas 0 -n karpenter$ k scale deploy karpenter --replicas 2 -n karpenter 查看 karpenter 日志是否正常 1$ k logs deployments/karpenter -f -n karpenter 4.部署 karpenter 及其 相关资源 1234567891011121314151617# 创建Namespace$ kubectl create namespace karpenter# 下载karpenter 相关资源# karpenter的版本分支，正常karpenter发布时都会打branch，比如：release-v0.28.1，不过我在github上没有找到v0.29.1的branch，所以这里就指定 main 了$ KARPENTER_BRANCH=main$ curl -O &quot;https://raw.githubusercontent.com/aws/karpenter/$&#123;KARPENTER_BRANCH&#125;/pkg/apis/crds/karpenter.sh_provisioners.yaml&quot;$ curl -O &quot;https://raw.githubusercontent.com/aws/karpenter/$&#123;KARPENTER_BRANCH&#125;/pkg/apis/crds/karpenter.k8s.aws_awsnodetemplates.yaml&quot;$ curl -O &quot;https://raw.githubusercontent.com/aws/karpenter/$&#123;KARPENTER_BRANCH&#125;/pkg/apis/crds/karpenter.sh_machines.yaml &quot;# 部署karpenter 相关资源$ kubectl apply -f karpenter.sh_provisioners.yaml$ kubectl apply -f karpenter.k8s.aws_awsnodetemplates.yaml$ kubectl apply -f karpenter.sh_machines.yaml# 部署karpenter$ k apply -f karpenter.yaml 5.创建默认的供应者(provisioner) Provisioner与AWSNodeTemplate是karpenter在K8s中的自定义资源。 Provisioner 对 Karpenter 可创建的节点以及可在这些节点上运行的 Pod 设置约束。如果没有配置至少一个Provisioner，Karpenter 将不会执行任何操作。 关于Provisioner支持的配置项可以参考官方文档，比如下面就限制了被管控的节点必须符合两个条件： 1.实例类别必须在[c, m, r]中 2.实例的生成代次必须大于2。比如 实例类型为 c1.xxx，m1.xxx，m2.xxx就不符合要求 AWSNodeTemplate节点模板启用AWS特定设置的配置。关于AWSNodeTemplate支持的配置项可以参考官方文档，比如默认节点关联的存储为20G gp3，如果要修改为40G可以在spec下指定如下内容，先创建后编辑也可以，但只有修改后新创建的节点才会使用新的配置。 123456blockDeviceMappings:- deviceName: /dev/xvda ebs: volumeType: gp3 volumeSize: 40Gi deleteOnTermination: true Provisioner需要与AWSNodeTemplate关联使用，通过在Provisioner的providerRef中指定AWSNodeTemplate的name进行关联，一个AWSNodeTemplate可以被多个Provisioner关联。 配置的每个 Provisioner 均由 Karpenter 循环遍历。在 Provisioner 中定义污点以限制可以在 Karpenter 创建的节点上运行的 Pod。建议创建互斥的 Provisioner。因此任何 Pod 都不应该匹配多个 Provisioner。如果匹配多个Provisioner，Karpenter将使用权重最高的Provisioner 。关于K8s中污点的介绍可以参考官方文档污点和容忍度 下面是一个最基本的Provisioner定义，你可以根据需要创建自己的Provisioner，可以参考官方文档或者查看provisioner examples中的示例。 123456789101112131415161718192021222324252627# 创建 default Provisioner$ cat &lt;&lt;EOF | kubectl apply -f -apiVersion: karpenter.sh/v1alpha5kind: Provisionermetadata: name: defaultspec: requirements: - key: karpenter.k8s.aws/instance-category operator: In values: [c, m, r] - key: karpenter.k8s.aws/instance-generation operator: Gt values: [&quot;2&quot;] providerRef: name: default---apiVersion: karpenter.k8s.aws/v1alpha1kind: AWSNodeTemplatemetadata: name: defaultspec: subnetSelector: karpenter.sh/discovery: &quot;$&#123;CLUSTER_NAME&#125;&quot; securityGroupSelector: karpenter.sh/discovery: &quot;$&#123;CLUSTER_NAME&#125;&quot;EOF 查看 karpenter 状态 1234$ k get pod -n karpenterNAME READY STATUS RESTARTS AGEkarpenter-789bbcbfd7-htj6z 1/1 Running 0 101skarpenter-789bbcbfd7-rlxfp 1/1 Running 0 101s 查看 karpenter 日志是否正常 1$ k logs deployments/karpenter -f -n karpenter karpenter创建新的节点时不会在原有的节点组中进行，所以为了摆脱从节点组添加的实例，我们可以将节点组缩小到最小大小 1234# 如果您有一个多AZ节点组，我们建议至少2个实例。$ aws eks update-nodegroup-config --cluster-name $&#123;CLUSTER_NAME&#125; \\ --nodegroup-name $&#123;NODEGROUP&#125; \\ --scaling-config &quot;minSize=2,maxSize=2,desiredSize=2&quot; 关停Cluster Autoscaler(CAS) 如果EKS中已经开启了CAS，则安装Karpenter后需要关闭CAS 1$ kubectl scale deploy/cluster-autoscaler -n kube-system --replicas=0 测试 查看当前node信息 1234$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 19d v1.26.4-eks-0a21954ip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 19d v1.26.4-eks-0a21954 采用 AWS-EKS-18--Autoscaling 之 Cluster Autoscaler(CAS) 中的测试方法，将deploy的副本数设置为50，过一会查看node情况 123456# 可以看到node数量已经变为3了，说明扩容成功$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 19d v1.26.4-eks-0a21954ip-192-168-34-126.us-west-2.compute.internal Ready &lt;none&gt; 47s v1.26.6-eks-a5565adip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 19d v1.26.4-eks-0a21954 缩容测试用的deploy，副本数设置为1，过一会发现node节点并没有被终止，这是为什么呢？ 默认情况下，Karpenter不会主动终止节点，需要为其设置终止节点的方式，参考Karpenter官方文档Deprovisioning部分 在Provisioner中设置节点终止的方式 spec.ttlSecondsAfterEmpty: 当最后一个工作负载（非守护程序集）pod停止在节点上运行时，Karpenter会注意到。从那时起，Karpenter在提供程序中等待ttlSecondsAfterEmpty设置的秒数，然后Karpenter请求删除节点。此功能可以通过删除不再用于工作负载的节点来降低成本。 spec.ttlSecondsUntilExpired: Karpenter 将根据Provisioner的ttlSecondsUntilExpired值将节点注释为过期，并在节点生存了设定秒数后取消配置节点。节点过期的一种用例是定期回收节点。 spec.consolidation.enabled: 实现整合，通过删除不需要的节点和缩减无法删除的节点的规模来降低集群成本。与ttlSecondsAfterEmpty参数互斥。 12# 编辑 default provisioner，并为其指定 spec.ttlSecondsAfterEmpty: 30，表示空闲超过30秒则终止节点。$ k edit provisioners.karpenter.sh default 1234567891011121314151617181920212223242526272829303132333435363738394041424344apiVersion: karpenter.sh/v1alpha5kind: Provisionermetadata: annotations: kubectl.kubernetes.io/last-applied-configuration: | &#123;&quot;apiVersion&quot;:&quot;karpenter.sh/v1alpha5&quot;,&quot;kind&quot;:&quot;Provisioner&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123; creationTimestamp: &quot;2023-07-19T09:49:43Z&quot; generation: 3 name: default resourceVersion: &quot;7987578&quot; uid: 5716142b-2b9f-493c-a049-e4304cdf82d4spec: providerRef: name: default requirements: - key: karpenter.k8s.aws/instance-category operator: In values: - c - m - r - key: karpenter.k8s.aws/instance-generation operator: Gt values: - &quot;2&quot; - key: kubernetes.io/os operator: In values: - linux - key: kubernetes.io/arch operator: In values: - amd64 - key: karpenter.sh/capacity-type operator: In values: - on-demand ttlSecondsAfterEmpty: 30status: resources: cpu: &quot;2&quot; ephemeral-storage: 20959212Ki memory: 3900360Ki pods: &quot;29&quot; 等待30秒后查看node情况，新创建的node已经成功终止 1234$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 19d v1.26.4-eks-0a21954ip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 19d v1.26.4-eks-0a21954 创建和终止节点的过程可以通过日志进行观察 12345678910111213141516171819$ k logs deployments/karpenter -f -n karpenter# 以下创建节点的日志2023-07-20T09:03:54.763Z INFO controller.provisioner found provisionable pod(s) &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;pods&quot;: 17&#125;2023-07-20T09:03:54.763Z INFO controller.provisioner computed new machine(s) to fit pod(s) &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machines&quot;: 1, &quot;pods&quot;: 17&#125;2023-07-20T09:03:54.788Z INFO controller.provisioner created machine &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;requests&quot;: &#123;&quot;cpu&quot;:&quot;155m&quot;,&quot;memory&quot;:&quot;120Mi&quot;,&quot;pods&quot;:&quot;21&quot;&#125;, &quot;instance-types&quot;: &quot;c3.2xlarge, c3.large, c3.xlarge, c4.2xlarge, c4.large and 95 other(s)&quot;&#125;2023-07-20T09:03:54.978Z DEBUG controller.machine.lifecycle created launch template &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;launch-template-name&quot;: &quot;karpenter.k8s.aws/2892028901667059566&quot;, &quot;id&quot;: &quot;lt-0ef53ab2c4909f493&quot;&#125;2023-07-20T09:03:55.108Z DEBUG controller.machine.lifecycle created launch template &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;launch-template-name&quot;: &quot;karpenter.k8s.aws/1810058814439854165&quot;, &quot;id&quot;: &quot;lt-02cda7252a2d29e16&quot;&#125;2023-07-20T09:03:57.095Z INFO controller.machine.lifecycle launched machine &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;provider-id&quot;: &quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;, &quot;instance-type&quot;: &quot;c6a.large&quot;, &quot;zone&quot;: &quot;us-west-2d&quot;, &quot;capacity-type&quot;: &quot;on-demand&quot;, &quot;allocatable&quot;: &#123;&quot;cpu&quot;:&quot;1930m&quot;,&quot;ephemeral-storage&quot;:&quot;17Gi&quot;,&quot;memory&quot;:&quot;3114Mi&quot;,&quot;pods&quot;:&quot;29&quot;&#125;&#125;2023-07-20T09:04:14.473Z DEBUG controller.machine.lifecycle registered machine &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;provider-id&quot;: &quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;, &quot;node&quot;: &quot;ip-192-168-79-236.us-west-2.compute.internal&quot;&#125;2023-07-20T09:04:28.620Z DEBUG controller.machine.lifecycle initialized machine&#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;provider-id&quot;: &quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;, &quot;node&quot;: &quot;ip-192-168-79-236.us-west-2.compute.internal&quot;&#125;# 以下是终止节点的日志2023-07-20T09:05:46.420Z DEBUG controller.machine.disruption marking machine as empty &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;&#125;2023-07-20T09:06:20.642Z INFO controller.deprovisioning deprovisioning via emptiness delete, terminating 1 machines ip-192-168-79-236.us-west-2.compute.internal/c6a.large/on-demand &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;&#125;2023-07-20T09:06:20.699Z INFO controller.termination cordoned node &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;node&quot;: &quot;ip-192-168-79-236.us-west-2.compute.internal&quot;&#125;2023-07-20T09:06:21.026Z INFO controller.termination deleted node &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;node&quot;: &quot;ip-192-168-79-236.us-west-2.compute.internal&quot;&#125;2023-07-20T09:06:21.288Z INFO controller.machine.termination deleted machine &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;, &quot;node&quot;: &quot;ip-192-168-79-236.us-west-2.compute.internal&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;provider-id&quot;: &quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;&#125; 小贴士 当Karpenter管理的Node节点由于某种原因不可用时(比如我们在AWS控制台终止了EC2或通过命令行删除节点k delete node nodeName)，Karpenter会立刻为我们创建一个新的Node节点，并在其上重启Pod。 参考资料 从Cluster Autoscaler迁移 EKS Cluster Autoscaler 迁移 Karpenter 实践 Karpenter Best Practices","summary":"摘要 本文介绍EKS集群Autoscaling 之 Karpenter 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-19T12:30:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/18/aws-eks18-autoscaler-cas/","url":"https://blog.hanqunfeng.com/2023/07/18/aws-eks18-autoscaler-cas/","title":"AWS-EKS-18--Autoscaling 之 Cluster Autoscaler(CAS)","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍EKS集群Autoscaling 之 Cluster Autoscaler(CAS)</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"EKS集群Autoscaling\">EKS集群Autoscaling</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>弹性伸缩是一项功能，可以自动上下伸缩您的资源以满足不断变化的需求。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Amazon EKS 支持两款自动扩缩产品:</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md\">Cluster Autoscaler(CAS) </a>，本文就介绍这款产品的使用方法。</li>\n<li class=\"lvl-6\"><a href=\"https://karpenter.sh/docs/\">Karpenter</a>，参看 <a href=\"/2023/07/19/aws-eks19-autoscaler-karpenter/\" title=\"AWS-EKS-19--Autoscaling 之 Karpenter\">AWS-EKS-19--Autoscaling 之 Karpenter</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Cluster-Autoscaler-CAS-是什么？\">Cluster Autoscaler(CAS)是什么？</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>Cluster Autoscaler</code> 是一个可以自动调整<code>Kubernetes</code>集群大小的组件，以便所有<code>pod</code>都有运行的地方，并且没有不需要的节点。支持多个公共云提供商。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>AWS EKS</code>集群自动扩容功能可以基于<code>Cluster Autoscaler</code>自动调整集群中node的数量以适应需求变化。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>Cluster Autoscaler</code>一般以Deployment的方式部署在K8s中，通过<code>service account</code>赋予的权限来访问<code>AWS autoscaling group</code>资源，并控制node（EC2）的增减。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>AWS EKS Cluster Autoscaler</code> 以 <code>Amazon EC2 Auto Scaling Groups</code>服务为基础对node进行扩容，所以其扩容或缩容时，也要遵守节点组扩缩中的配置<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/igPla5.png\" alt=\"\" width=\"300\" height=\"300\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>当有新的Pod无法在现有node上schedule时会触发扩容，当node空闲超过10min时，会触发缩容。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>Cluster Autoscaler</code>的镜像版本要求与K8s版本匹配，所以当EKS(K8s)升级时，<code>Cluster Autoscaler</code>的镜像也要进行升级。</p>\n</li>\n</ul>\n<h2 id=\"创建IAM策略和角色\">创建IAM策略和角色</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建Policy：<code>cluster-autoscaler-policy.json</code></p>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2012-10-17&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Statement&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Effect&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Allow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Action&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:DescribeAutoScalingGroups&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:DescribeAutoScalingInstances&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:DescribeLaunchConfigurations&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:DescribeScalingActivities&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:DescribeTags&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;ec2:DescribeInstanceTypes&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;ec2:DescribeLaunchTemplateVersions&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Resource&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Effect&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Allow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Action&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:SetDesiredCapacity&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:TerminateInstanceInAutoScalingGroup&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;ec2:DescribeImages&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;ec2:GetInstanceTypesFromInstanceRequirements&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;eks:DescribeNodegroup&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Resource&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> AWS_PROFILE=eks-ty-old</span><br><span class=\"line\">$ aws iam create-policy \\</span><br><span class=\"line\">    --policy-name AmazonEKSClusterAutoscalerPolicy \\</span><br><span class=\"line\">    --policy-document file://cluster-autoscaler-policy.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Policy&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;PolicyName&quot;</span>: <span class=\"string\">&quot;AmazonEKSClusterAutoscalerPolicy&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;PolicyId&quot;</span>: <span class=\"string\">&quot;ANPA22DP3G4GBZ4RXQA2J&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:policy/AmazonEKSClusterAutoscalerPolicy&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Path&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;DefaultVersionId&quot;</span>: <span class=\"string\">&quot;v1&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;AttachmentCount&quot;</span>: 0,</span><br><span class=\"line\">        <span class=\"string\">&quot;PermissionsBoundaryUsageCount&quot;</span>: 0,</span><br><span class=\"line\">        <span class=\"string\">&quot;IsAttachable&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreateDate&quot;</span>: <span class=\"string\">&quot;2023-07-18T09:31:24+00:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;UpdateDate&quot;</span>: <span class=\"string\">&quot;2023-07-18T09:31:24+00:00&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建IAM Role的信任关系：<code>trust-policy.json</code></p>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2012-10-17&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Statement&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Effect&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Allow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Principal&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Federated&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Action&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sts:AssumeRoleWithWebIdentity&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Condition&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;StringEquals&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sts.amazonaws.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;system:serviceaccount:kube-system:cluster-autoscaler&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建 IAM Role</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws iam create-role \\</span><br><span class=\"line\">  --role-name AmazonEKSClusterAutoscalerRole \\</span><br><span class=\"line\">  --assume-role-policy-document file://<span class=\"string\">&quot;trust-policy.json&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Role&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Path&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;RoleName&quot;</span>: <span class=\"string\">&quot;AmazonEKSClusterAutoscalerRole&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;RoleId&quot;</span>: <span class=\"string\">&quot;AROA22DP3G4GHSSPEOMUH&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:role/AmazonEKSClusterAutoscalerRole&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreateDate&quot;</span>: <span class=\"string\">&quot;2023-07-18T09:39:54+00:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;AssumeRolePolicyDocument&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Version&quot;</span>: <span class=\"string\">&quot;2012-10-17&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Statement&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Effect&quot;</span>: <span class=\"string\">&quot;Allow&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Principal&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;Federated&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Action&quot;</span>: <span class=\"string\">&quot;sts:AssumeRoleWithWebIdentity&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Condition&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;StringEquals&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;</span>: <span class=\"string\">&quot;sts.amazonaws.com&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;</span>: <span class=\"string\">&quot;system:serviceaccount:kube-system:cluster-autoscaler&quot;</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>为 Role 添加 Policy</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws iam attach-role-policy \\</span><br><span class=\"line\">  --policy-arn arn:aws:iam::743263909644:policy/AmazonEKSClusterAutoscalerPolicy \\</span><br><span class=\"line\">  --role-name AmazonEKSClusterAutoscalerRole</span><br></pre></td></tr></table></figure>\n<h2 id=\"部署Cluster-Autoscaler\">部署Cluster Autoscaler</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>下载Autoscaler yaml文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载yaml文件，github仓库中的文件下载路径格式为：https://raw.githubusercontent.com/&lt;Owner&gt;/&lt;RepositoryName&gt;/&lt;branch&gt;/&lt;FilePath&gt;</span></span><br><span class=\"line\">$ wget https://raw.githubusercontent.com/kubernetes/autoscaler/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取使用git命令，这里只clone出指定文件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> --depth 1 https://github.com/kubernetes/autoscaler --branch master --single-branch cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>修改yaml文件配置<br>\n打开<code>Cluster Autoscaler</code>的<a href=\"https://github.com/kubernetes/autoscaler/releases\">github地址</a>，查看与EKS版本匹配的最新Autoscaler镜像版本<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/GBArR8.png\" alt=\"\" width=\"600\" height=\"600\"></p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">1.把cluster-autoscaler的镜像版本换成上面查到的版本1.26.3</li>\n<li class=\"lvl-6\">2.查找并替换“<YOUR CLUSTER NAME>”为我们EKS的名称: <code>eks-lexing</code></li>\n<li class=\"lvl-6\">3.在EKS的名称“tsEKS”下面，并添加以下两行</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- --balance-similar-node-groups</span><br><span class=\"line\">- --skip-nodes-with-system-pods=false</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>--balance-similar-node-groups</code>：此选项用于启用集群节点组的负载均衡功能。当你有多个具有相似容量的节点组时，启用此选项可以确保 Cluster Autoscaler 尽可能均衡地在这些节点组之间分配 Pod。它帮助确保节点组的资源利用率更加平衡，以提高集群的整体性能。<br>\n<code>--skip-nodes-with-system-pods=false</code>：此选项用于设置是否跳过具有系统 Pod 的节点。默认情况下，Cluster Autoscaler 会跳过具有系统 Pod（如 kube-system 命名空间中的核心组件）的节点，以确保这些关键组件的正常运行。将该选项设置为 false，即禁用跳过具有系统 Pod 的节点，可以让 Cluster Autoscaler 考虑包括具有系统 Pod 的节点在内的所有节点进行调整。</p>\n</blockquote>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">4.为ServiceAccount添加IMA Role注解，注意一定要添加这个注解后再进行部署，否则会提示没有权限<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/98SQ9l.png\" alt=\"\" width=\"1200\" height=\"600\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/88IL8W.png\" alt=\"\" width=\"1200\" height=\"300\"></li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>部署Cluster Autoscaler</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f cluster-autoscaler-autodiscover.yaml</span><br><span class=\"line\">serviceaccount/cluster-autoscaler created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/cluster-autoscaler created</span><br><span class=\"line\">role.rbac.authorization.k8s.io/cluster-autoscaler created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/cluster-autoscaler created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/cluster-autoscaler created</span><br><span class=\"line\">deployment.apps/cluster-autoscaler created</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看Cluster Autoscaler Deployment</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cluster-autoscaler</span></span><br><span class=\"line\">$ k get deploy</span><br><span class=\"line\">NAME                           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">aws-load-balancer-controller   2/2     2            2           14d</span><br><span class=\"line\">cluster-autoscaler             1/1     1            1           9m10s</span><br><span class=\"line\">coredns                        2/2     2            2           20d</span><br><span class=\"line\">ebs-csi-controller             2/2     2            2           20d</span><br><span class=\"line\">efs-csi-controller             2/2     2            2           15d</span><br><span class=\"line\">metrics-server                 1/1     1            1           20d</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>给autoscaler deployment打patch，增加annotation</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这个注解的作用是告诉 Kubernetes 系统不要将这些 Pod 标记为可以被安全驱逐（evict）的 Pod。</span></span><br><span class=\"line\"><span class=\"comment\"># 通过将 cluster-autoscaler 部署的 Pod 标记为不可安全驱逐，可以避免 Cluster Autoscaler 将这些关键组件的 Pod 视为可以被删除的对象。</span></span><br><span class=\"line\">$ kubectl patch deployment cluster-autoscaler \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  -p <span class=\"string\">&#x27;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&quot;cluster-autoscaler.kubernetes.io/safe-to-evict&quot;: &quot;false&quot;&#125;&#125;&#125;&#125;&#125;&#x27;</span></span><br><span class=\"line\">deployment.apps/cluster-autoscaler patched</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\">测试</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看当前node节点</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   18d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   18d   v1.26.4-eks-0a21954</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建测试用的deployment：<code>testDeploy.yaml</code></p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.20.2</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k apply -f testDeploy.yaml</span><br><span class=\"line\">deployment.apps/nginx-deployment created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 扩容</span></span><br><span class=\"line\"><span class=\"comment\"># 因为我这里的节点实例类型为 m5.large，所以replicas要设置的大一些</span></span><br><span class=\"line\">k scale deploy nginx-deployment --replicas 50 -n <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>过一会查看node情况</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以看到新创建了一个node节点</span></span><br><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   18d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   18d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-86-167.us-west-2.compute.internal   Ready    &lt;none&gt;   68s   v1.26.4-eks-0a21954</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pod也都正常运行</span></span><br><span class=\"line\">$ k get pod -n <span class=\"built_in\">test</span></span><br><span class=\"line\">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-deployment-7876b754ff-2nd5k        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-2ppvw        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-45csw        1/1     Running   0          110s</span><br><span class=\"line\">nginx-deployment-7876b754ff-46tmf        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-5vt8p        1/1     Running   0          110s</span><br><span class=\"line\">nginx-deployment-7876b754ff-66ztw        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-77f4d        1/1     Running   0          110s</span><br><span class=\"line\">nginx-deployment-7876b754ff-8jj92        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-8kj97        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-9c8kr        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-9szmq        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-blbqd        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-bpppd        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-c46sb        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-d5b45        1/1     Running   0          111s</span><br><span class=\"line\">………………………………</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>缩容deploy</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将副本降为1</span></span><br><span class=\"line\">$ k scale deploy nginx-deployment --replicas 1 -n <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试完成可以删除</span></span><br><span class=\"line\">$ k delete -f testDeploy.yaml</span><br><span class=\"line\">deployment.apps <span class=\"string\">&quot;nginx-deployment&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>大约过10几分钟就可以看到新增的node已经下线</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   18d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   18d   v1.26.4-eks-0a21954</span><br></pre></td></tr></table></figure>\n<h2 id=\"升级Cluster-Autoscaler\">升级Cluster Autoscaler</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>Cluster Autoscaler</code>的镜像版本要求与K8s版本匹配，所以当EKS(K8s)升级时，<code>Cluster Autoscaler</code>的镜像也要进行升级。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"built_in\">set</span> image deployment cluster-autoscaler \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  cluster-autoscaler=registry.k8s.io/autoscaling/cluster-autoscaler:v&lt;x.x.x&gt;</span><br><span class=\"line\"><span class=\"comment\"># 或者直接编辑也是可以的</span></span><br><span class=\"line\">$ k edit deploy -n kube-system cluster-autoscaler</span><br></pre></td></tr></table></figure>\n<h2 id=\"关闭Cluster-Autoscaler\">关闭Cluster Autoscaler</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k scale deploy cluster-autoscaler -n kube-system --replicas 0</span><br><span class=\"line\">deployment.apps/cluster-autoscaler scaled</span><br><span class=\"line\"></span><br><span class=\"line\">$ k get deploy</span><br><span class=\"line\">NAME                           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">aws-load-balancer-controller   2/2     2            2           14d</span><br><span class=\"line\">cluster-autoscaler             0/0     0            0           20h</span><br><span class=\"line\">coredns                        2/2     2            2           21d</span><br><span class=\"line\">ebs-csi-controller             2/2     2            2           20d</span><br><span class=\"line\">efs-csi-controller             2/2     2            2           15d</span><br><span class=\"line\">metrics-server                 1/1     1            1           21d</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍EKS集群Autoscaling 之 Cluster Autoscaler(CAS) 参考资料： Amazon EKS用户指南 Kubernetes 文档 EKS集群Autoscaling 弹性伸缩是一项功能，可以自动上下伸缩您的资源以满足不断变化的需求。 Amazon EKS 支持两款自动扩缩产品: Cluster Autoscaler(CAS) ，本文就介绍这款产品的使用方法。 Karpenter，参看 AWS-EKS-19--Autoscaling 之 Karpenter Cluster Autoscaler(CAS)是什么？ Cluster Autoscaler 是一个可以自动调整Kubernetes集群大小的组件，以便所有pod都有运行的地方，并且没有不需要的节点。支持多个公共云提供商。 AWS EKS集群自动扩容功能可以基于Cluster Autoscaler自动调整集群中node的数量以适应需求变化。 Cluster Autoscaler一般以Deployment的方式部署在K8s中，通过service account赋予的权限来访问AWS autoscaling group资源，并控制node（EC2）的增减。 AWS EKS Cluster Autoscaler 以 Amazon EC2 Auto Scaling Groups服务为基础对node进行扩容，所以其扩容或缩容时，也要遵守节点组扩缩中的配置 当有新的Pod无法在现有node上schedule时会触发扩容，当node空闲超过10min时，会触发缩容。 Cluster Autoscaler的镜像版本要求与K8s版本匹配，所以当EKS(K8s)升级时，Cluster Autoscaler的镜像也要进行升级。 创建IAM策略和角色 创建Policy：cluster-autoscaler-policy.json 1234567891011121314151617181920212223242526272829&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;autoscaling:DescribeAutoScalingGroups&quot;, &quot;autoscaling:DescribeAutoScalingInstances&quot;, &quot;autoscaling:DescribeLaunchConfigurations&quot;, &quot;autoscaling:DescribeScalingActivities&quot;, &quot;autoscaling:DescribeTags&quot;, &quot;ec2:DescribeInstanceTypes&quot;, &quot;ec2:DescribeLaunchTemplateVersions&quot; ], &quot;Resource&quot;: [&quot;*&quot;] &#125;, &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;autoscaling:SetDesiredCapacity&quot;, &quot;autoscaling:TerminateInstanceInAutoScalingGroup&quot;, &quot;ec2:DescribeImages&quot;, &quot;ec2:GetInstanceTypesFromInstanceRequirements&quot;, &quot;eks:DescribeNodegroup&quot; ], &quot;Resource&quot;: [&quot;*&quot;] &#125; ] &#125; 123456789101112131415161718$ export AWS_PROFILE=eks-ty-old$ aws iam create-policy \\ --policy-name AmazonEKSClusterAutoscalerPolicy \\ --policy-document file://cluster-autoscaler-policy.json&#123; &quot;Policy&quot;: &#123; &quot;PolicyName&quot;: &quot;AmazonEKSClusterAutoscalerPolicy&quot;, &quot;PolicyId&quot;: &quot;ANPA22DP3G4GBZ4RXQA2J&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909644:policy/AmazonEKSClusterAutoscalerPolicy&quot;, &quot;Path&quot;: &quot;/&quot;, &quot;DefaultVersionId&quot;: &quot;v1&quot;, &quot;AttachmentCount&quot;: 0, &quot;PermissionsBoundaryUsageCount&quot;: 0, &quot;IsAttachable&quot;: true, &quot;CreateDate&quot;: &quot;2023-07-18T09:31:24+00:00&quot;, &quot;UpdateDate&quot;: &quot;2023-07-18T09:31:24+00:00&quot; &#125;&#125; 创建IAM Role的信任关系：trust-policy.json 123456789101112131415161718&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Federated&quot;: &quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;, &quot;Condition&quot;: &#123; &quot;StringEquals&quot;: &#123; &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;: &quot;sts.amazonaws.com&quot;, &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;: &quot;system:serviceaccount:kube-system:cluster-autoscaler&quot; &#125; &#125; &#125; ]&#125; 创建 IAM Role 123456789101112131415161718192021222324252627282930$ aws iam create-role \\ --role-name AmazonEKSClusterAutoscalerRole \\ --assume-role-policy-document file://&quot;trust-policy.json&quot;&#123; &quot;Role&quot;: &#123; &quot;Path&quot;: &quot;/&quot;, &quot;RoleName&quot;: &quot;AmazonEKSClusterAutoscalerRole&quot;, &quot;RoleId&quot;: &quot;AROA22DP3G4GHSSPEOMUH&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909644:role/AmazonEKSClusterAutoscalerRole&quot;, &quot;CreateDate&quot;: &quot;2023-07-18T09:39:54+00:00&quot;, &quot;AssumeRolePolicyDocument&quot;: &#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Federated&quot;: &quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;, &quot;Condition&quot;: &#123; &quot;StringEquals&quot;: &#123; &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;: &quot;sts.amazonaws.com&quot;, &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;: &quot;system:serviceaccount:kube-system:cluster-autoscaler&quot; &#125; &#125; &#125; ] &#125; &#125;&#125; 为 Role 添加 Policy 123$ aws iam attach-role-policy \\ --policy-arn arn:aws:iam::743263909644:policy/AmazonEKSClusterAutoscalerPolicy \\ --role-name AmazonEKSClusterAutoscalerRole 部署Cluster Autoscaler 下载Autoscaler yaml文件 12345#下载yaml文件，github仓库中的文件下载路径格式为：https://raw.githubusercontent.com/&lt;Owner&gt;/&lt;RepositoryName&gt;/&lt;branch&gt;/&lt;FilePath&gt;$ wget https://raw.githubusercontent.com/kubernetes/autoscaler/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml# 获取使用git命令，这里只clone出指定文件$ git clone --depth 1 https://github.com/kubernetes/autoscaler --branch master --single-branch cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml 修改yaml文件配置 打开Cluster Autoscaler的github地址，查看与EKS版本匹配的最新Autoscaler镜像版本 1.把cluster-autoscaler的镜像版本换成上面查到的版本1.26.3 2.查找并替换“”为我们EKS的名称: eks-lexing 3.在EKS的名称“tsEKS”下面，并添加以下两行 12- --balance-similar-node-groups- --skip-nodes-with-system-pods=false --balance-similar-node-groups：此选项用于启用集群节点组的负载均衡功能。当你有多个具有相似容量的节点组时，启用此选项可以确保 Cluster Autoscaler 尽可能均衡地在这些节点组之间分配 Pod。它帮助确保节点组的资源利用率更加平衡，以提高集群的整体性能。 --skip-nodes-with-system-pods=false：此选项用于设置是否跳过具有系统 Pod 的节点。默认情况下，Cluster Autoscaler 会跳过具有系统 Pod（如 kube-system 命名空间中的核心组件）的节点，以确保这些关键组件的正常运行。将该选项设置为 false，即禁用跳过具有系统 Pod 的节点，可以让 Cluster Autoscaler 考虑包括具有系统 Pod 的节点在内的所有节点进行调整。 4.为ServiceAccount添加IMA Role注解，注意一定要添加这个注解后再进行部署，否则会提示没有权限 部署Cluster Autoscaler 1234567$ kubectl apply -f cluster-autoscaler-autodiscover.yamlserviceaccount/cluster-autoscaler createdclusterrole.rbac.authorization.k8s.io/cluster-autoscaler createdrole.rbac.authorization.k8s.io/cluster-autoscaler createdclusterrolebinding.rbac.authorization.k8s.io/cluster-autoscaler createdrolebinding.rbac.authorization.k8s.io/cluster-autoscaler createddeployment.apps/cluster-autoscaler created 查看Cluster Autoscaler Deployment 123456789# cluster-autoscaler$ k get deployNAME READY UP-TO-DATE AVAILABLE AGEaws-load-balancer-controller 2/2 2 2 14dcluster-autoscaler 1/1 1 1 9m10scoredns 2/2 2 2 20debs-csi-controller 2/2 2 2 20defs-csi-controller 2/2 2 2 15dmetrics-server 1/1 1 1 20d 给autoscaler deployment打patch，增加annotation 123456# 这个注解的作用是告诉 Kubernetes 系统不要将这些 Pod 标记为可以被安全驱逐（evict）的 Pod。# 通过将 cluster-autoscaler 部署的 Pod 标记为不可安全驱逐，可以避免 Cluster Autoscaler 将这些关键组件的 Pod 视为可以被删除的对象。$ kubectl patch deployment cluster-autoscaler \\ -n kube-system \\ -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&quot;cluster-autoscaler.kubernetes.io/safe-to-evict&quot;: &quot;false&quot;&#125;&#125;&#125;&#125;&#125;&#x27;deployment.apps/cluster-autoscaler patched 测试 查看当前node节点 1234$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 18d v1.26.4-eks-0a21954ip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 18d v1.26.4-eks-0a21954 创建测试用的deployment：testDeploy.yaml 12345678910111213141516171819202122apiVersion: apps/v1kind: Deploymentmetadata: name: nginx-deployment namespace: test labels: app: nginxspec: replicas: 1 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.20.2 ports: - containerPort: 80 123456$ k apply -f testDeploy.yamldeployment.apps/nginx-deployment created# 扩容# 因为我这里的节点实例类型为 m5.large，所以replicas要设置的大一些k scale deploy nginx-deployment --replicas 50 -n test 过一会查看node情况 1234567891011121314151617181920212223242526# 可以看到新创建了一个node节点$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 18d v1.26.4-eks-0a21954ip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 18d v1.26.4-eks-0a21954ip-192-168-86-167.us-west-2.compute.internal Ready &lt;none&gt; 68s v1.26.4-eks-0a21954# pod也都正常运行$ k get pod -n testNAME READY STATUS RESTARTS AGEnginx-deployment-7876b754ff-2nd5k 1/1 Running 0 111snginx-deployment-7876b754ff-2ppvw 1/1 Running 0 111snginx-deployment-7876b754ff-45csw 1/1 Running 0 110snginx-deployment-7876b754ff-46tmf 1/1 Running 0 111snginx-deployment-7876b754ff-5vt8p 1/1 Running 0 110snginx-deployment-7876b754ff-66ztw 1/1 Running 0 111snginx-deployment-7876b754ff-77f4d 1/1 Running 0 110snginx-deployment-7876b754ff-8jj92 1/1 Running 0 111snginx-deployment-7876b754ff-8kj97 1/1 Running 0 111snginx-deployment-7876b754ff-9c8kr 1/1 Running 0 111snginx-deployment-7876b754ff-9szmq 1/1 Running 0 111snginx-deployment-7876b754ff-blbqd 1/1 Running 0 111snginx-deployment-7876b754ff-bpppd 1/1 Running 0 111snginx-deployment-7876b754ff-c46sb 1/1 Running 0 111snginx-deployment-7876b754ff-d5b45 1/1 Running 0 111s……………………………… 缩容deploy 123456# 将副本降为1$ k scale deploy nginx-deployment --replicas 1 -n test# 测试完成可以删除$ k delete -f testDeploy.yamldeployment.apps &quot;nginx-deployment&quot; deleted 大约过10几分钟就可以看到新增的node已经下线 1234$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 18d v1.26.4-eks-0a21954ip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 18d v1.26.4-eks-0a21954 升级Cluster Autoscaler Cluster Autoscaler的镜像版本要求与K8s版本匹配，所以当EKS(K8s)升级时，Cluster Autoscaler的镜像也要进行升级。 12345$ kubectl set image deployment cluster-autoscaler \\ -n kube-system \\ cluster-autoscaler=registry.k8s.io/autoscaling/cluster-autoscaler:v&lt;x.x.x&gt;# 或者直接编辑也是可以的$ k edit deploy -n kube-system cluster-autoscaler 关闭Cluster Autoscaler 1234567891011$ k scale deploy cluster-autoscaler -n kube-system --replicas 0deployment.apps/cluster-autoscaler scaled$ k get deployNAME READY UP-TO-DATE AVAILABLE AGEaws-load-balancer-controller 2/2 2 2 14dcluster-autoscaler 0/0 0 0 20hcoredns 2/2 2 2 21debs-csi-controller 2/2 2 2 20defs-csi-controller 2/2 2 2 15dmetrics-server 1/1 1 1 21d","summary":"摘要 本文介绍EKS集群Autoscaling 之 Cluster Autoscaler(CAS) 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-18T12:30:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/17/aws-eks17-hpa/","url":"https://blog.hanqunfeng.com/2023/07/17/aws-eks17-hpa/","title":"AWS-EKS-17--Horizontal Pod Autoscaler（HPA）","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍在EKS集群下创建HPA的方法</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"Horizontal-Pod-Autoscaler-简介\">Horizontal Pod Autoscaler 简介</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Horizontal Pod Autoscaler（HPA）基于资源 CPU 利用率自动调整 deployment、replication controller 或者 replica 中 pod 的数量，这有助于您的应用程序进行扩展以满足增长的需求，或在不需要资源时进行缩减，从而释放出节点用于其他应用程序。当您设置目标 CPU 利用率百分比时，HPA 扩展或缩减应用程序来尝试满足该目标。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Kubernetes 本身已经包含了 HPA 的 controller，所以不需要额外的安装或部署。</p>\n</li>\n<li class=\"lvl-2\">\n<p>HPA 需要获取 metrics 信息，metrics 信息需要从 Metrics Server 中获取或者从第三方软件获取，关于如何在EKS中安装Metrics Server可以查看 <a href=\"/2023/07/07/aws-eks11-metrics/\" title=\"AWS-EKS-11--安装 Kubernetes Metrics Server\">AWS-EKS-11--安装 Kubernetes Metrics Server</a>。</p>\n</li>\n<li class=\"lvl-2\">\n<p>HPA 会周期性(默认15秒)查询目标资源的使用情况，然后和 HPA 中定义的值做比较，并根据比较结果相应的调整 pod 数量。</p>\n</li>\n<li class=\"lvl-2\">\n<p>创建pod时，必须为其设定cpu资源，用于与目标值进行比较，目前v2版本的HPA除了支持CPU的对比，还可以设定其它指标，具体参考<a href=\"https://kubernetes.io/zh-cn/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/\">HorizontalPodAutoscaler 演练</a>。</p>\n</li>\n</ul>\n<h2 id=\"示例\">示例</h2>\n<p>参考<a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/horizontal-pod-autoscaler.html\">官方示例</a></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>定义资源yaml</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># php-apache.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">php-apache</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">php-apache</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">php-apache</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">php-apache</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.k8s.io/hpa-example</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span>   <span class=\"comment\"># 最多可使用资源，500m（0.5 个 CPU）</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span>   <span class=\"comment\"># 期望使用资源（desiredMetricValue），200m（0.2 个 CPU）</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">php-apache</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">php-apache</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">php-apache</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>部署yaml</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k apply -f php-apache.yaml</span><br><span class=\"line\">deployment.apps/php-apache created</span><br><span class=\"line\">service/php-apache created</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建HPA</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建了一个叫“php-apache”的 HPA，与 deployment 的名称相同，可以用 --name=&#x27;hpa-name&#x27; 指定hpa的名称</span></span><br><span class=\"line\"><span class=\"comment\"># replicas 变动范围是最小 1，最大 10</span></span><br><span class=\"line\"><span class=\"comment\"># 目标cpu利用率为 50%，上面我们设定 CPU request 值为 200m，所以当平均cpu值为 100m 时就会触发 autoscale</span></span><br><span class=\"line\"><span class=\"comment\"># 这里说平均cpu，是指所有pod的cpu利用率的平均值</span></span><br><span class=\"line\">$ k autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10</span><br><span class=\"line\">horizontalpodautoscaler.autoscaling/php-apache autoscaled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过yaml创建</span></span><br><span class=\"line\">apiVersion: autoscaling/v2</span><br><span class=\"line\">kind: HorizontalPodAutoscaler</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: php-apache</span><br><span class=\"line\">  namespace: <span class=\"built_in\">test</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  maxReplicas: 10</span><br><span class=\"line\">  minReplicas: 1</span><br><span class=\"line\">  metrics:</span><br><span class=\"line\">  - resource:</span><br><span class=\"line\">      name: cpu</span><br><span class=\"line\">      target:</span><br><span class=\"line\">        averageUtilization: 50</span><br><span class=\"line\">        <span class=\"built_in\">type</span>: Utilization</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: Resource</span><br><span class=\"line\">  scaleTargetRef:</span><br><span class=\"line\">    apiVersion: apps/v1</span><br><span class=\"line\">    kind: Deployment</span><br><span class=\"line\">    name: php-apache</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看HPA</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get hpa</span><br><span class=\"line\">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">php-apache   Deployment/php-apache   0%/50%    1         10        1          29s</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>测试HPA</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过运行容器为 Web 服务器创建负载</span></span><br><span class=\"line\"><span class=\"comment\"># 这里利用 busybox 镜像临时生成一个 pod，用 while 循环不停的访问 php-apache 的 service，而 php-apache 中的 hpa-example 镜像已经配置了进行消耗 CPU 的计算网页，所以 php-apache pod 的 CPU 负载会很快增长</span></span><br><span class=\"line\"><span class=\"comment\"># 该命令会一直运行，直到 Ctrl+C</span></span><br><span class=\"line\">$ kubectl run -i \\</span><br><span class=\"line\">    --<span class=\"built_in\">tty</span> load-generator \\</span><br><span class=\"line\">    --<span class=\"built_in\">rm</span> --image=busybox \\</span><br><span class=\"line\">    --restart=Never \\</span><br><span class=\"line\">    -- /bin/sh -c <span class=\"string\">&quot;while sleep 0.01; do wget -q -O- http://php-apache; done&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上面的命令运行一会后再开一个终端查看hpa的情况，可以看到已经发生扩容了</span></span><br><span class=\"line\">$ k get hpa</span><br><span class=\"line\">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">php-apache   Deployment/php-apache   57%/50%   1         10        7          5m27s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行一段时间后发现hpa稳定在8个，说明此时pod的数量已经满足平均cpu使用率小于50%的目标</span></span><br><span class=\"line\">$ k get hpa</span><br><span class=\"line\">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">php-apache   Deployment/php-apache   43%/50%   1         10        8          20m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod的cpu使用情况，虽然此时也有个别的pod大于100m，但是8个pod的平均cpu是小于100m的，此时就不会再进行扩容了</span></span><br><span class=\"line\">$ k top pod</span><br><span class=\"line\">NAME                                     CPU(cores)   MEMORY(bytes)</span><br><span class=\"line\">php-apache-7495ff8f5b-2kjsc              98m          11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-49vb9              85m          11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-65r62              100m         11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-7mn9l              79m          11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-7njtt              74m          11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-8n5t6              88m          11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-spvnh              103m         11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-w64f4              101m         11Mi</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时<code>Ctrl+C</code>中断测试容器，过一会查看hpa和pod的情况，可以看到平均 CPU 负载已经降到 0 了，但 REPLICAS 还是 8 个，不会立即降低，不要着急，大约5分钟左右 REPLICAS 最终变为 1</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get hpa</span><br><span class=\"line\">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">php-apache   Deployment/php-apache   0%/50%    1         10        8          26m</span><br><span class=\"line\">$ k top pod</span><br><span class=\"line\">NAME                                     CPU(cores)   MEMORY(bytes)</span><br><span class=\"line\">php-apache-7495ff8f5b-2kjsc              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-49vb9              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-65r62              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-7mn9l              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-7njtt              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-8n5t6              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-spvnh              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-w64f4              1m           11Mi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以看到hpa的 AGE 在26m时还是8个，30m时就降为1个了</span></span><br><span class=\"line\">$ k get hpa</span><br><span class=\"line\">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">php-apache   Deployment/php-apache   0%/50%    1         10        1          30m</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除HPA\">删除HPA</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k delete hpa php-apache</span><br><span class=\"line\">horizontalpodautoscaler.autoscaling <span class=\"string\">&quot;php-apache&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍在EKS集群下创建HPA的方法 参考资料： Amazon EKS用户指南 Kubernetes 文档 Horizontal Pod Autoscaler 简介 Horizontal Pod Autoscaler（HPA）基于资源 CPU 利用率自动调整 deployment、replication controller 或者 replica 中 pod 的数量，这有助于您的应用程序进行扩展以满足增长的需求，或在不需要资源时进行缩减，从而释放出节点用于其他应用程序。当您设置目标 CPU 利用率百分比时，HPA 扩展或缩减应用程序来尝试满足该目标。 Kubernetes 本身已经包含了 HPA 的 controller，所以不需要额外的安装或部署。 HPA 需要获取 metrics 信息，metrics 信息需要从 Metrics Server 中获取或者从第三方软件获取，关于如何在EKS中安装Metrics Server可以查看 AWS-EKS-11--安装 Kubernetes Metrics Server。 HPA 会周期性(默认15秒)查询目标资源的使用情况，然后和 HPA 中定义的值做比较，并根据比较结果相应的调整 pod 数量。 创建pod时，必须为其设定cpu资源，用于与目标值进行比较，目前v2版本的HPA除了支持CPU的对比，还可以设定其它指标，具体参考HorizontalPodAutoscaler 演练。 示例 参考官方示例 定义资源yaml 123456789101112131415161718192021222324252627282930313233343536# php-apache.yamlapiVersion: apps/v1kind: Deploymentmetadata: name: php-apachespec: selector: matchLabels: run: php-apache template: metadata: labels: run: php-apache spec: containers: - name: php-apache image: registry.k8s.io/hpa-example ports: - containerPort: 80 resources: limits: cpu: 500m # 最多可使用资源，500m（0.5 个 CPU） requests: cpu: 200m # 期望使用资源（desiredMetricValue），200m（0.2 个 CPU）---apiVersion: v1kind: Servicemetadata: name: php-apache labels: run: php-apachespec: ports: - port: 80 selector: run: php-apache 部署yaml 123$ k apply -f php-apache.yamldeployment.apps/php-apache createdservice/php-apache created 创建HPA 123456789101112131415161718192021222324252627# 创建了一个叫“php-apache”的 HPA，与 deployment 的名称相同，可以用 --name=&#x27;hpa-name&#x27; 指定hpa的名称# replicas 变动范围是最小 1，最大 10# 目标cpu利用率为 50%，上面我们设定 CPU request 值为 200m，所以当平均cpu值为 100m 时就会触发 autoscale# 这里说平均cpu，是指所有pod的cpu利用率的平均值$ k autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10horizontalpodautoscaler.autoscaling/php-apache autoscaled# 也可以通过yaml创建apiVersion: autoscaling/v2kind: HorizontalPodAutoscalermetadata: name: php-apache namespace: testspec: maxReplicas: 10 minReplicas: 1 metrics: - resource: name: cpu target: averageUtilization: 50 type: Utilization type: Resource scaleTargetRef: apiVersion: apps/v1 kind: Deployment name: php-apache 查看HPA 123$ k get hpaNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGEphp-apache Deployment/php-apache 0%/50% 1 10 1 29s 测试HPA 12345678910111213141516171819202122232425262728293031# 通过运行容器为 Web 服务器创建负载# 这里利用 busybox 镜像临时生成一个 pod，用 while 循环不停的访问 php-apache 的 service，而 php-apache 中的 hpa-example 镜像已经配置了进行消耗 CPU 的计算网页，所以 php-apache pod 的 CPU 负载会很快增长# 该命令会一直运行，直到 Ctrl+C$ kubectl run -i \\ --tty load-generator \\ --rm --image=busybox \\ --restart=Never \\ -- /bin/sh -c &quot;while sleep 0.01; do wget -q -O- http://php-apache; done&quot;# 上面的命令运行一会后再开一个终端查看hpa的情况，可以看到已经发生扩容了$ k get hpaNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGEphp-apache Deployment/php-apache 57%/50% 1 10 7 5m27s# 运行一段时间后发现hpa稳定在8个，说明此时pod的数量已经满足平均cpu使用率小于50%的目标$ k get hpaNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGEphp-apache Deployment/php-apache 43%/50% 1 10 8 20m# 查看pod的cpu使用情况，虽然此时也有个别的pod大于100m，但是8个pod的平均cpu是小于100m的，此时就不会再进行扩容了$ k top podNAME CPU(cores) MEMORY(bytes)php-apache-7495ff8f5b-2kjsc 98m 11Miphp-apache-7495ff8f5b-49vb9 85m 11Miphp-apache-7495ff8f5b-65r62 100m 11Miphp-apache-7495ff8f5b-7mn9l 79m 11Miphp-apache-7495ff8f5b-7njtt 74m 11Miphp-apache-7495ff8f5b-8n5t6 88m 11Miphp-apache-7495ff8f5b-spvnh 103m 11Miphp-apache-7495ff8f5b-w64f4 101m 11Mi 此时Ctrl+C中断测试容器，过一会查看hpa和pod的情况，可以看到平均 CPU 负载已经降到 0 了，但 REPLICAS 还是 8 个，不会立即降低，不要着急，大约5分钟左右 REPLICAS 最终变为 1 123456789101112131415161718$ k get hpaNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGEphp-apache Deployment/php-apache 0%/50% 1 10 8 26m$ k top podNAME CPU(cores) MEMORY(bytes)php-apache-7495ff8f5b-2kjsc 1m 11Miphp-apache-7495ff8f5b-49vb9 1m 11Miphp-apache-7495ff8f5b-65r62 1m 11Miphp-apache-7495ff8f5b-7mn9l 1m 11Miphp-apache-7495ff8f5b-7njtt 1m 11Miphp-apache-7495ff8f5b-8n5t6 1m 11Miphp-apache-7495ff8f5b-spvnh 1m 11Miphp-apache-7495ff8f5b-w64f4 1m 11Mi# 可以看到hpa的 AGE 在26m时还是8个，30m时就降为1个了$ k get hpaNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGEphp-apache Deployment/php-apache 0%/50% 1 10 1 30m 删除HPA 12$ k delete hpa php-apachehorizontalpodautoscaler.autoscaling &quot;php-apache&quot; deleted","summary":"摘要 本文介绍在EKS集群下创建HPA的方法 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-17T12:30:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/14/aws-eks16-servcieaccount/","url":"https://blog.hanqunfeng.com/2023/07/14/aws-eks16-servcieaccount/","title":"AWS-EKS-16--聊一聊ServiceAccount","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文聊一聊ServiceAccount</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"聊一聊ServiceAccount\">聊一聊ServiceAccount</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>网上关于ServiceAccount的介绍有很多，但大多都比较晦涩难懂，不好理解，这里我基于自己的理解聊一聊ServiceAccount。</p>\n</li>\n<li class=\"lvl-2\">\n<p>ServiceAccount是k8s中的用户，其被定义在namespace下，可以被关联到pod上，使其获得相应的权限。</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">ServiceAccount可以与k8s中的Role或者ClusterRole进行绑定，以使其具有访问k8s内部资源的权限，当pod关联ServiceAccount后也就获得了相应的权限。参考<a href=\"/2023/07/07/aws-eks12-dashboard/\" title=\"AWS-EKS-12--部署 Dashboard UI\">AWS-EKS-12--部署 Dashboard UI</a></li>\n</ul>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dashboard-adminuser.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cluster-admin</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">ServiceAccount也可以被关联到IAM Role，以使其具有访问AWS资源的权限。当pod关联ServiceAccount后就获得了访问AWS资源的权限。参考<a href=\"/2023/07/13/aws-eks15-auth-pod/\" title=\"AWS-EKS-15--EKS权限管理(下)Pod 是如何调用 AWS 资源的\">AWS-EKS-15--EKS权限管理(下)Pod 是如何调用 AWS 资源的</a></li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ eksctl create iamserviceaccount \\</span><br><span class=\"line\">--cluster=eks-lexing \\</span><br><span class=\"line\">--profile eks-us-west-2 \\</span><br><span class=\"line\">--namespace=kube-system \\</span><br><span class=\"line\">--name=aws-load-balancer-controller \\</span><br><span class=\"line\">--role-name AmazonEKSLoadBalancerControllerRole \\</span><br><span class=\"line\">--attach-policy-arn=arn:aws:iam::743263909644:policy/AWSLoadBalancerControllerIAMPolicy \\</span><br><span class=\"line\">--approve</span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>ServiceAccount default 在 Kubernetes 中是默认存在的，它通常与运行在 Pod 内的应用程序关联，用于与 Kubernetes API 服务器进行身份验证和授权。default ServiceAccount 是每个命名空间中的默认 ServiceAccount，如果没有为 Pod 显式指定 ServiceAccount，则会自动关联到 default ServiceAccount。</p>\n</li>\n<li class=\"lvl-2\">\n<p>default ServiceAccount的权限是由所分配的角色（Role）或集群角色（ClusterRole）定义的。在默认情况下，default ServiceAccount没有任何特权或访问权限。它只能访问其所在命名空间的一些基本资源，例如查看自身的 Pod、Service、Endpoints 等。</p>\n</li>\n</ul>\n<h3 id=\"创建SA\">创建SA</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1，使用kubectl命令行直接创建</span></span><br><span class=\"line\">$ kubectl create serviceaccount &lt;serviceaccount-name&gt; -n &lt;namespace&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2，基于yaml</span></span><br><span class=\"line\"><span class=\"comment\"># sa.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &lt;serviceaccount-name&gt;</span><br><span class=\"line\">  namespace: &lt;namespace&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl apply -f sa.yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询SA\">查询SA</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get sa -n kubernetes-dashboard</span><br><span class=\"line\">NAME                   SECRETS   AGE</span><br><span class=\"line\">admin-user             0         8d</span><br><span class=\"line\">default                0         8d</span><br><span class=\"line\">kubernetes-dashboard   0         8d</span><br></pre></td></tr></table></figure>\n<h3 id=\"SA与Role或者ClusterRole进行绑定\">SA与Role或者ClusterRole进行绑定</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>SA绑定Role</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service-account</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-role</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">test</span>                                <span class=\"comment\"># 与ClusterRole的区别就是Role要绑定到Namespace</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]                                <span class=\"comment\"># 限定API组，为空则为默认的 core API 组</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>, <span class=\"string\">&quot;services&quot;</span>, <span class=\"string\">&quot;configmaps&quot;</span>]  <span class=\"comment\"># 要访问的资源</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>]                <span class=\"comment\"># 开放的权限</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-role-binding</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service-account</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-role</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>SA绑定ClusterRole</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service-account</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-cluster-role</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>, <span class=\"string\">&quot;services&quot;</span>, <span class=\"string\">&quot;configmaps&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-cluster-role-binding</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service-account</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-cluster-role</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>API组</strong></em><br>\nKubernetes中有许多常见的API组，每个API组都包含一组相关的资源。以下是一些常见的API组：</p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\"><code>core</code>：该API组是Kubernetes中的默认API组，包含核心资源，如pods、services、configmaps、secrets等。</li>\n<li class=\"lvl-2\"><code>apps</code>：该API组包含应用程序相关的资源，如deployments、replicasets、daemonsets、statefulsets等。</li>\n<li class=\"lvl-2\"><code>batch</code>：该API组包含批处理作业相关的资源，如jobs、cronjobs等。</li>\n<li class=\"lvl-2\"><code>extensions</code>：这是Kubernetes早期版本中广泛使用的API组，现在已经被<code>apps</code>和<code>networking.k8s.io</code> API组所取代。它包含一些资源，如replicationcontrollers、ingresses等。</li>\n<li class=\"lvl-2\"><code>networking.k8s.io</code>：该API组包含与网络相关的资源，如ingresses、networkpolicies等。</li>\n<li class=\"lvl-2\"><code>storage.k8s.io</code>：该API组包含存储相关的资源，如storageclasses、persistentvolumes、persistentvolumeclaims等。</li>\n<li class=\"lvl-2\"><code>autoscaling</code>：该API组包含自动扩展相关的资源，如horizontalpodautoscalers。</li>\n<li class=\"lvl-2\"><code>rbac.authorization.k8s.io</code>：该API组包含与角色和访问控制相关的资源，如roles、rolebindings、clusterroles、clusterrolebindings等。<br>\n这只是一小部分常见的API组，实际上还有许多其他的API组，根据您的Kubernetes集群的版本和所使用的插件，可能会有其他自定义的API组。您可以使用<code>kubectl api-resources</code>命令查看集群中所有可用的API组和资源。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里 APIVERSION 中版本中斜线前面的就是 API组名称 ,没有斜线的就是默认的 core 组</span></span><br><span class=\"line\">$ kubectl api-resources</span><br><span class=\"line\">NAME                              SHORTNAMES   APIVERSION                             NAMESPACED   KIND</span><br><span class=\"line\">bindings                                       v1                                     <span class=\"literal\">true</span>         Binding</span><br><span class=\"line\">componentstatuses                 cs           v1                                     <span class=\"literal\">false</span>        ComponentStatus</span><br><span class=\"line\">configmaps                        cm           v1                                     <span class=\"literal\">true</span>         ConfigMap</span><br><span class=\"line\">endpoints                         ep           v1                                     <span class=\"literal\">true</span>         Endpoints</span><br><span class=\"line\">events                            ev           v1                                     <span class=\"literal\">true</span>         Event</span><br><span class=\"line\">limitranges                       limits       v1                                     <span class=\"literal\">true</span>         LimitRange</span><br><span class=\"line\">namespaces                        ns           v1                                     <span class=\"literal\">false</span>        Namespace</span><br><span class=\"line\">nodes                             no           v1                                     <span class=\"literal\">false</span>        Node</span><br><span class=\"line\">persistentvolumeclaims            pvc          v1                                     <span class=\"literal\">true</span>         PersistentVolumeClaim</span><br><span class=\"line\">persistentvolumes                 pv           v1                                     <span class=\"literal\">false</span>        PersistentVolume</span><br><span class=\"line\">pods                              po           v1                                     <span class=\"literal\">true</span>         Pod</span><br><span class=\"line\">podtemplates                                   v1                                     <span class=\"literal\">true</span>         PodTemplate</span><br><span class=\"line\">replicationcontrollers            rc           v1                                     <span class=\"literal\">true</span>         ReplicationController</span><br><span class=\"line\">resourcequotas                    quota        v1                                     <span class=\"literal\">true</span>         ResourceQuota</span><br><span class=\"line\">secrets                                        v1                                     <span class=\"literal\">true</span>         Secret</span><br><span class=\"line\">serviceaccounts                   sa           v1                                     <span class=\"literal\">true</span>         ServiceAccount</span><br><span class=\"line\">services                          svc          v1                                     <span class=\"literal\">true</span>         Service</span><br><span class=\"line\">mutatingwebhookconfigurations                  admissionregistration.k8s.io/v1        <span class=\"literal\">false</span>        MutatingWebhookConfiguration</span><br><span class=\"line\">validatingwebhookconfigurations                admissionregistration.k8s.io/v1        <span class=\"literal\">false</span>        ValidatingWebhookConfiguration</span><br><span class=\"line\">customresourcedefinitions         crd,crds     apiextensions.k8s.io/v1                <span class=\"literal\">false</span>        CustomResourceDefinition</span><br><span class=\"line\">apiservices                                    apiregistration.k8s.io/v1              <span class=\"literal\">false</span>        APIService</span><br><span class=\"line\">controllerrevisions                            apps/v1                                <span class=\"literal\">true</span>         ControllerRevision</span><br><span class=\"line\">daemonsets                        ds           apps/v1                                <span class=\"literal\">true</span>         DaemonSet</span><br><span class=\"line\">deployments                       deploy       apps/v1                                <span class=\"literal\">true</span>         Deployment</span><br><span class=\"line\">replicasets                       rs           apps/v1                                <span class=\"literal\">true</span>         ReplicaSet</span><br><span class=\"line\">statefulsets                      sts          apps/v1                                <span class=\"literal\">true</span>         StatefulSet</span><br><span class=\"line\">tokenreviews                                   authentication.k8s.io/v1               <span class=\"literal\">false</span>        TokenReview</span><br><span class=\"line\">localsubjectaccessreviews                      authorization.k8s.io/v1                <span class=\"literal\">true</span>         LocalSubjectAccessReview</span><br><span class=\"line\">selfsubjectaccessreviews                       authorization.k8s.io/v1                <span class=\"literal\">false</span>        SelfSubjectAccessReview</span><br><span class=\"line\">selfsubjectrulesreviews                        authorization.k8s.io/v1                <span class=\"literal\">false</span>        SelfSubjectRulesReview</span><br><span class=\"line\">subjectaccessreviews                           authorization.k8s.io/v1                <span class=\"literal\">false</span>        SubjectAccessReview</span><br><span class=\"line\">horizontalpodautoscalers          hpa          autoscaling/v2                         <span class=\"literal\">true</span>         HorizontalPodAutoscaler</span><br><span class=\"line\">cronjobs                          cj           batch/v1                               <span class=\"literal\">true</span>         CronJob</span><br><span class=\"line\"><span class=\"built_in\">jobs</span>                                           batch/v1                               <span class=\"literal\">true</span>         Job</span><br><span class=\"line\">certificatesigningrequests        csr          certificates.k8s.io/v1                 <span class=\"literal\">false</span>        CertificateSigningRequest</span><br><span class=\"line\">leases                                         coordination.k8s.io/v1                 <span class=\"literal\">true</span>         Lease</span><br><span class=\"line\">eniconfigs                                     crd.k8s.amazonaws.com/v1alpha1         <span class=\"literal\">false</span>        ENIConfig</span><br><span class=\"line\">endpointslices                                 discovery.k8s.io/v1                    <span class=\"literal\">true</span>         EndpointSlice</span><br><span class=\"line\">ingressclassparams                             elbv2.k8s.aws/v1beta1                  <span class=\"literal\">false</span>        IngressClassParams</span><br><span class=\"line\">targetgroupbindings                            elbv2.k8s.aws/v1beta1                  <span class=\"literal\">true</span>         TargetGroupBinding</span><br><span class=\"line\">events                            ev           events.k8s.io/v1                       <span class=\"literal\">true</span>         Event</span><br><span class=\"line\">flowschemas                                    flowcontrol.apiserver.k8s.io/v1beta3   <span class=\"literal\">false</span>        FlowSchema</span><br><span class=\"line\">prioritylevelconfigurations                    flowcontrol.apiserver.k8s.io/v1beta3   <span class=\"literal\">false</span>        PriorityLevelConfiguration</span><br><span class=\"line\">nodes                                          metrics.k8s.io/v1beta1                 <span class=\"literal\">false</span>        NodeMetrics</span><br><span class=\"line\">pods                                           metrics.k8s.io/v1beta1                 <span class=\"literal\">true</span>         PodMetrics</span><br><span class=\"line\">ingressclasses                                 networking.k8s.io/v1                   <span class=\"literal\">false</span>        IngressClass</span><br><span class=\"line\">ingresses                         ing          networking.k8s.io/v1                   <span class=\"literal\">true</span>         Ingress</span><br><span class=\"line\">networkpolicies                   netpol       networking.k8s.io/v1                   <span class=\"literal\">true</span>         NetworkPolicy</span><br><span class=\"line\">runtimeclasses                                 node.k8s.io/v1                         <span class=\"literal\">false</span>        RuntimeClass</span><br><span class=\"line\">poddisruptionbudgets              pdb          policy/v1                              <span class=\"literal\">true</span>         PodDisruptionBudget</span><br><span class=\"line\">clusterrolebindings                            rbac.authorization.k8s.io/v1           <span class=\"literal\">false</span>        ClusterRoleBinding</span><br><span class=\"line\">clusterroles                                   rbac.authorization.k8s.io/v1           <span class=\"literal\">false</span>        ClusterRole</span><br><span class=\"line\">rolebindings                                   rbac.authorization.k8s.io/v1           <span class=\"literal\">true</span>         RoleBinding</span><br><span class=\"line\">roles                                          rbac.authorization.k8s.io/v1           <span class=\"literal\">true</span>         Role</span><br><span class=\"line\">priorityclasses                   pc           scheduling.k8s.io/v1                   <span class=\"literal\">false</span>        PriorityClass</span><br><span class=\"line\">csidrivers                                     storage.k8s.io/v1                      <span class=\"literal\">false</span>        CSIDriver</span><br><span class=\"line\">csinodes                                       storage.k8s.io/v1                      <span class=\"literal\">false</span>        CSINode</span><br><span class=\"line\">csistoragecapacities                           storage.k8s.io/v1                      <span class=\"literal\">true</span>         CSIStorageCapacity</span><br><span class=\"line\">storageclasses                    sc           storage.k8s.io/v1                      <span class=\"literal\">false</span>        StorageClass</span><br><span class=\"line\">volumeattachments                              storage.k8s.io/v1                      <span class=\"literal\">false</span>        VolumeAttachment</span><br><span class=\"line\">securitygrouppolicies             sgp          vpcresources.k8s.aws/v1beta1           <span class=\"literal\">true</span>         SecurityGroupPolicy</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"SA与Deployment或者Pod关联\">SA与Deployment或者Pod关联</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>SA与Deployment关联</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">my-app</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">my-app</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">my-service-account</span>  <span class=\"comment\"># 指定sa名称</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">my-container</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">my-image</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>SA与Pod关联</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">my-service-account</span>     <span class=\"comment\"># 指定sa名称</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">my-container</span></span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">my-image</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">serviceAccount 和 serviceAccountName 是 Kubernetes YAML 配置中用于关联 Service Account 的两个属性，它们有一些区别：</li>\n<li class=\"lvl-2\">serviceAccountName：这是一个字符串属性，用于指定要与 Pod 或 Deployment 关联的 Service Account 的名称。它是最常用的属性，只需提供 Service Account 的名称即可。示例：serviceAccountName: my-service-account</li>\n<li class=\"lvl-2\">serviceAccount：这是一个对象属性，用于指定要与 Pod 或 Deployment 关联的 Service Account 的更详细信息。它可以提供 Service Account 的名称和命名空间。示例：</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">serviceAccount:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service-account</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">my-namespace</span></span><br></pre></td></tr></table></figure>\n<p>注意：namespace 字段是可选的，如果不指定，它将使用当前 Pod 或 Deployment 所在的命名空间。</p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">总结来说，serviceAccountName 是一种更简洁的方式，只需提供 Service Account 的名称。而 serviceAccount 则可以提供更多关于 Service Account 的详细信息，如名称和命名空间。在大多数情况下，使用 serviceAccountName 就足够了，除非需要更精细地控制 Service Account 的属性。</li>\n</ul>\n</div>\n<h3 id=\"查询指定的SA被绑定到哪些角色\">查询指定的SA被绑定到哪些角色</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get rolebindings,clusterrolebindings -A \\</span><br><span class=\"line\">-o <span class=\"string\">&#x27;custom-columns=KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,ROLE-KIND:.roleRef.kind,ROLE:.roleRef.name, SUBJECT-KIND:.subjects[*].kind,SUBJECT-NAMESPACE:.subjects[*].namespace,SUBJECT-NAME:.subjects[*].name&#x27;</span> \\</span><br><span class=\"line\">| (<span class=\"built_in\">head</span> -n 1 &amp;&amp; awk <span class=\"string\">&#x27;&#123;if ($8 == &quot;kubernetes-dashboard&quot;) print&#125;&#x27;</span>)</span><br><span class=\"line\">KIND                 NAMESPACE              NAME                                                           ROLE-KIND     ROLE                                                    SUBJECT-KIND         SUBJECT-NAMESPACE      SUBJECT-NAME</span><br><span class=\"line\">RoleBinding          kubernetes-dashboard   kubernetes-dashboard                                           Role          kubernetes-dashboard                                   ServiceAccount        kubernetes-dashboard   kubernetes-dashboard</span><br><span class=\"line\">ClusterRoleBinding   &lt;none&gt;                 kubernetes-dashboard                                           ClusterRole   kubernetes-dashboard                                   ServiceAccount        kubernetes-dashboard   kubernetes-dashboard</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询指定的SA被关联到哪些deploy\">查询指定的SA被关联到哪些deploy</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get deploy -A \\</span><br><span class=\"line\">-o <span class=\"string\">&#x27;custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,SERVICEACCOUNT:.spec.template.spec.serviceAccountName&#x27;</span> \\</span><br><span class=\"line\">| (<span class=\"built_in\">head</span> -n 1 &amp;&amp; awk <span class=\"string\">&#x27;&#123;if ($3 == &quot;kubernetes-dashboard&quot;) print&#125;&#x27;</span>)</span><br><span class=\"line\">NAMESPACE              NAME                           SERVICEACCOUNT</span><br><span class=\"line\">kubernetes-dashboard   dashboard-metrics-scraper      kubernetes-dashboard</span><br><span class=\"line\">kubernetes-dashboard   kubernetes-dashboard           kubernetes-dashboard</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询指定的SA被关联到哪些pod\">查询指定的SA被关联到哪些pod</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get pod -A \\</span><br><span class=\"line\">-o <span class=\"string\">&#x27;custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,SERVICEACCOUNT:.spec.serviceAccountName&#x27;</span> \\</span><br><span class=\"line\">| (<span class=\"built_in\">head</span> -n 1 &amp;&amp; awk <span class=\"string\">&#x27;&#123;if ($3 == &quot;kubernetes-dashboard&quot;) print&#125;&#x27;</span>)</span><br><span class=\"line\">NAMESPACE              NAME                                            SERVICEACCOUNT</span><br><span class=\"line\">kubernetes-dashboard   dashboard-metrics-scraper-7bc864c59-sqjq8       kubernetes-dashboard</span><br><span class=\"line\">kubernetes-dashboard   kubernetes-dashboard-6c7ccbcf87-zb2hb           kubernetes-dashboard</span><br></pre></td></tr></table></figure>\n<h3 id=\"编辑SA\">编辑SA</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>比如我们要为已经创建好的SA关联AWS IAM角色，需要编辑SA，将IAM角色添加到SA的注释中。</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">k</span> <span class=\"string\">edit</span> <span class=\"string\">sa</span> <span class=\"string\">-n</span> <span class=\"string\">kube-system</span> <span class=\"string\">aws-load-balancer-controller</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">eks.amazonaws.com/role-arn:</span> <span class=\"string\">arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControllerRole</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"string\">&quot;2023-07-04T09:20:41Z&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/managed-by:</span> <span class=\"string\">eksctl</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">aws-load-balancer-controller</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">resourceVersion:</span> <span class=\"string\">&quot;1707669&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">uid:</span> <span class=\"string\">857200a6-2e16-4939-bbbc-483dd579acbb</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>也可以直接通过命令行添加注解</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl annotate serviceaccount aws-load-balancer-controller \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  eks.amazonaws.com/role-arn=arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControll</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ServiceAccount被修改过后，关联的pod需要重新启动才能生效。</p>\n</li>\n</ul>\n","content_text":"摘要 本文聊一聊ServiceAccount 参考资料： Amazon EKS用户指南 Kubernetes 文档 聊一聊ServiceAccount 网上关于ServiceAccount的介绍有很多，但大多都比较晦涩难懂，不好理解，这里我基于自己的理解聊一聊ServiceAccount。 ServiceAccount是k8s中的用户，其被定义在namespace下，可以被关联到pod上，使其获得相应的权限。 ServiceAccount可以与k8s中的Role或者ClusterRole进行绑定，以使其具有访问k8s内部资源的权限，当pod关联ServiceAccount后也就获得了相应的权限。参考AWS-EKS-12--部署 Dashboard UI 12345678910111213141516171819# dashboard-adminuser.yamlapiVersion: v1kind: ServiceAccountmetadata: name: admin-user namespace: kubernetes-dashboard---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: admin-userroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: admin-user namespace: kubernetes-dashboard ServiceAccount也可以被关联到IAM Role，以使其具有访问AWS资源的权限。当pod关联ServiceAccount后就获得了访问AWS资源的权限。参考AWS-EKS-15--EKS权限管理(下)Pod 是如何调用 AWS 资源的 12345678$ eksctl create iamserviceaccount \\--cluster=eks-lexing \\--profile eks-us-west-2 \\--namespace=kube-system \\--name=aws-load-balancer-controller \\--role-name AmazonEKSLoadBalancerControllerRole \\--attach-policy-arn=arn:aws:iam::743263909644:policy/AWSLoadBalancerControllerIAMPolicy \\--approve ServiceAccount default 在 Kubernetes 中是默认存在的，它通常与运行在 Pod 内的应用程序关联，用于与 Kubernetes API 服务器进行身份验证和授权。default ServiceAccount 是每个命名空间中的默认 ServiceAccount，如果没有为 Pod 显式指定 ServiceAccount，则会自动关联到 default ServiceAccount。 default ServiceAccount的权限是由所分配的角色（Role）或集群角色（ClusterRole）定义的。在默认情况下，default ServiceAccount没有任何特权或访问权限。它只能访问其所在命名空间的一些基本资源，例如查看自身的 Pod、Service、Endpoints 等。 创建SA 123456789101112# 方式1，使用kubectl命令行直接创建$ kubectl create serviceaccount &lt;serviceaccount-name&gt; -n &lt;namespace&gt;# 方式2，基于yaml# sa.yamlapiVersion: v1kind: ServiceAccountmetadata: name: &lt;serviceaccount-name&gt; namespace: &lt;namespace&gt;$ kubectl apply -f sa.yaml 查询SA 12345$ k get sa -n kubernetes-dashboardNAME SECRETS AGEadmin-user 0 8ddefault 0 8dkubernetes-dashboard 0 8d SA与Role或者ClusterRole进行绑定 SA绑定Role 12345678910111213141516171819202122232425262728apiVersion: v1kind: ServiceAccountmetadata: name: my-service-account namespace: test---apiVersion: rbac.authorization.k8s.io/v1kind: Rolemetadata: name: my-role namespace: test # 与ClusterRole的区别就是Role要绑定到Namespacerules:- apiGroups: [&quot;&quot;] # 限定API组，为空则为默认的 core API 组 resources: [&quot;pods&quot;, &quot;services&quot;, &quot;configmaps&quot;] # 要访问的资源 verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;] # 开放的权限---apiVersion: rbac.authorization.k8s.io/v1kind: RoleBindingmetadata: name: my-role-bindingsubjects:- kind: ServiceAccount name: my-service-account namespace: testroleRef: kind: Role name: my-role apiGroup: rbac.authorization.k8s.io SA绑定ClusterRole 123456789101112131415161718192021222324252627apiVersion: v1kind: ServiceAccountmetadata: name: my-service-account namespace: test---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata: name: my-cluster-rolerules:- apiGroups: [&quot;&quot;] resources: [&quot;pods&quot;, &quot;services&quot;, &quot;configmaps&quot;] verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: my-cluster-role-bindingsubjects:- kind: ServiceAccount name: my-service-account namespace: testroleRef: kind: ClusterRole name: my-cluster-role apiGroup: rbac.authorization.k8s.io API组 Kubernetes中有许多常见的API组，每个API组都包含一组相关的资源。以下是一些常见的API组： core：该API组是Kubernetes中的默认API组，包含核心资源，如pods、services、configmaps、secrets等。 apps：该API组包含应用程序相关的资源，如deployments、replicasets、daemonsets、statefulsets等。 batch：该API组包含批处理作业相关的资源，如jobs、cronjobs等。 extensions：这是Kubernetes早期版本中广泛使用的API组，现在已经被apps和networking.k8s.io API组所取代。它包含一些资源，如replicationcontrollers、ingresses等。 networking.k8s.io：该API组包含与网络相关的资源，如ingresses、networkpolicies等。 storage.k8s.io：该API组包含存储相关的资源，如storageclasses、persistentvolumes、persistentvolumeclaims等。 autoscaling：该API组包含自动扩展相关的资源，如horizontalpodautoscalers。 rbac.authorization.k8s.io：该API组包含与角色和访问控制相关的资源，如roles、rolebindings、clusterroles、clusterrolebindings等。 这只是一小部分常见的API组，实际上还有许多其他的API组，根据您的Kubernetes集群的版本和所使用的插件，可能会有其他自定义的API组。您可以使用kubectl api-resources命令查看集群中所有可用的API组和资源。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364# 这里 APIVERSION 中版本中斜线前面的就是 API组名称 ,没有斜线的就是默认的 core 组$ kubectl api-resourcesNAME SHORTNAMES APIVERSION NAMESPACED KINDbindings v1 true Bindingcomponentstatuses cs v1 false ComponentStatusconfigmaps cm v1 true ConfigMapendpoints ep v1 true Endpointsevents ev v1 true Eventlimitranges limits v1 true LimitRangenamespaces ns v1 false Namespacenodes no v1 false Nodepersistentvolumeclaims pvc v1 true PersistentVolumeClaimpersistentvolumes pv v1 false PersistentVolumepods po v1 true Podpodtemplates v1 true PodTemplatereplicationcontrollers rc v1 true ReplicationControllerresourcequotas quota v1 true ResourceQuotasecrets v1 true Secretserviceaccounts sa v1 true ServiceAccountservices svc v1 true Servicemutatingwebhookconfigurations admissionregistration.k8s.io/v1 false MutatingWebhookConfigurationvalidatingwebhookconfigurations admissionregistration.k8s.io/v1 false ValidatingWebhookConfigurationcustomresourcedefinitions crd,crds apiextensions.k8s.io/v1 false CustomResourceDefinitionapiservices apiregistration.k8s.io/v1 false APIServicecontrollerrevisions apps/v1 true ControllerRevisiondaemonsets ds apps/v1 true DaemonSetdeployments deploy apps/v1 true Deploymentreplicasets rs apps/v1 true ReplicaSetstatefulsets sts apps/v1 true StatefulSettokenreviews authentication.k8s.io/v1 false TokenReviewlocalsubjectaccessreviews authorization.k8s.io/v1 true LocalSubjectAccessReviewselfsubjectaccessreviews authorization.k8s.io/v1 false SelfSubjectAccessReviewselfsubjectrulesreviews authorization.k8s.io/v1 false SelfSubjectRulesReviewsubjectaccessreviews authorization.k8s.io/v1 false SubjectAccessReviewhorizontalpodautoscalers hpa autoscaling/v2 true HorizontalPodAutoscalercronjobs cj batch/v1 true CronJobjobs batch/v1 true Jobcertificatesigningrequests csr certificates.k8s.io/v1 false CertificateSigningRequestleases coordination.k8s.io/v1 true Leaseeniconfigs crd.k8s.amazonaws.com/v1alpha1 false ENIConfigendpointslices discovery.k8s.io/v1 true EndpointSliceingressclassparams elbv2.k8s.aws/v1beta1 false IngressClassParamstargetgroupbindings elbv2.k8s.aws/v1beta1 true TargetGroupBindingevents ev events.k8s.io/v1 true Eventflowschemas flowcontrol.apiserver.k8s.io/v1beta3 false FlowSchemaprioritylevelconfigurations flowcontrol.apiserver.k8s.io/v1beta3 false PriorityLevelConfigurationnodes metrics.k8s.io/v1beta1 false NodeMetricspods metrics.k8s.io/v1beta1 true PodMetricsingressclasses networking.k8s.io/v1 false IngressClassingresses ing networking.k8s.io/v1 true Ingressnetworkpolicies netpol networking.k8s.io/v1 true NetworkPolicyruntimeclasses node.k8s.io/v1 false RuntimeClasspoddisruptionbudgets pdb policy/v1 true PodDisruptionBudgetclusterrolebindings rbac.authorization.k8s.io/v1 false ClusterRoleBindingclusterroles rbac.authorization.k8s.io/v1 false ClusterRolerolebindings rbac.authorization.k8s.io/v1 true RoleBindingroles rbac.authorization.k8s.io/v1 true Rolepriorityclasses pc scheduling.k8s.io/v1 false PriorityClasscsidrivers storage.k8s.io/v1 false CSIDrivercsinodes storage.k8s.io/v1 false CSINodecsistoragecapacities storage.k8s.io/v1 true CSIStorageCapacitystorageclasses sc storage.k8s.io/v1 false StorageClassvolumeattachments storage.k8s.io/v1 false VolumeAttachmentsecuritygrouppolicies sgp vpcresources.k8s.aws/v1beta1 true SecurityGroupPolicy SA与Deployment或者Pod关联 SA与Deployment关联 123456789101112131415161718apiVersion: apps/v1kind: Deploymentmetadata: name: my-deploymentspec: replicas: 3 selector: matchLabels: app: my-app template: metadata: labels: app: my-app spec: serviceAccountName: my-service-account # 指定sa名称 containers: - name: my-container image: my-image SA与Pod关联 123456789apiVersion: v1kind: Podmetadata: name: my-podspec: serviceAccountName: my-service-account # 指定sa名称 containers: - name: my-container image: my-image 小贴士 serviceAccount 和 serviceAccountName 是 Kubernetes YAML 配置中用于关联 Service Account 的两个属性，它们有一些区别： serviceAccountName：这是一个字符串属性，用于指定要与 Pod 或 Deployment 关联的 Service Account 的名称。它是最常用的属性，只需提供 Service Account 的名称即可。示例：serviceAccountName: my-service-account serviceAccount：这是一个对象属性，用于指定要与 Pod 或 Deployment 关联的 Service Account 的更详细信息。它可以提供 Service Account 的名称和命名空间。示例： 123serviceAccount: name: my-service-account namespace: my-namespace 注意：namespace 字段是可选的，如果不指定，它将使用当前 Pod 或 Deployment 所在的命名空间。 总结来说，serviceAccountName 是一种更简洁的方式，只需提供 Service Account 的名称。而 serviceAccount 则可以提供更多关于 Service Account 的详细信息，如名称和命名空间。在大多数情况下，使用 serviceAccountName 就足够了，除非需要更精细地控制 Service Account 的属性。 查询指定的SA被绑定到哪些角色 123456$ kubectl get rolebindings,clusterrolebindings -A \\-o &#x27;custom-columns=KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,ROLE-KIND:.roleRef.kind,ROLE:.roleRef.name, SUBJECT-KIND:.subjects[*].kind,SUBJECT-NAMESPACE:.subjects[*].namespace,SUBJECT-NAME:.subjects[*].name&#x27; \\| (head -n 1 &amp;&amp; awk &#x27;&#123;if ($8 == &quot;kubernetes-dashboard&quot;) print&#125;&#x27;)KIND NAMESPACE NAME ROLE-KIND ROLE SUBJECT-KIND SUBJECT-NAMESPACE SUBJECT-NAMERoleBinding kubernetes-dashboard kubernetes-dashboard Role kubernetes-dashboard ServiceAccount kubernetes-dashboard kubernetes-dashboardClusterRoleBinding &lt;none&gt; kubernetes-dashboard ClusterRole kubernetes-dashboard ServiceAccount kubernetes-dashboard kubernetes-dashboard 查询指定的SA被关联到哪些deploy 123456$ k get deploy -A \\-o &#x27;custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,SERVICEACCOUNT:.spec.template.spec.serviceAccountName&#x27; \\| (head -n 1 &amp;&amp; awk &#x27;&#123;if ($3 == &quot;kubernetes-dashboard&quot;) print&#125;&#x27;)NAMESPACE NAME SERVICEACCOUNTkubernetes-dashboard dashboard-metrics-scraper kubernetes-dashboardkubernetes-dashboard kubernetes-dashboard kubernetes-dashboard 查询指定的SA被关联到哪些pod 123456$ k get pod -A \\-o &#x27;custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,SERVICEACCOUNT:.spec.serviceAccountName&#x27; \\| (head -n 1 &amp;&amp; awk &#x27;&#123;if ($3 == &quot;kubernetes-dashboard&quot;) print&#125;&#x27;)NAMESPACE NAME SERVICEACCOUNTkubernetes-dashboard dashboard-metrics-scraper-7bc864c59-sqjq8 kubernetes-dashboardkubernetes-dashboard kubernetes-dashboard-6c7ccbcf87-zb2hb kubernetes-dashboard 编辑SA 比如我们要为已经创建好的SA关联AWS IAM角色，需要编辑SA，将IAM角色添加到SA的注释中。 12345678910111213$ k edit sa -n kube-system aws-load-balancer-controllerapiVersion: v1kind: ServiceAccountmetadata: annotations: eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControllerRole creationTimestamp: &quot;2023-07-04T09:20:41Z&quot; labels: app.kubernetes.io/managed-by: eksctl name: aws-load-balancer-controller namespace: kube-system resourceVersion: &quot;1707669&quot; uid: 857200a6-2e16-4939-bbbc-483dd579acbb 也可以直接通过命令行添加注解 123$ kubectl annotate serviceaccount aws-load-balancer-controller \\ -n kube-system \\ eks.amazonaws.com/role-arn=arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControll ServiceAccount被修改过后，关联的pod需要重新启动才能生效。","summary":"摘要 本文聊一聊ServiceAccount 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-14T12:30:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/13/aws-eks15-auth-pod/","url":"https://blog.hanqunfeng.com/2023/07/13/aws-eks15-auth-pod/","title":"AWS-EKS-15--EKS权限管理(下)Pod 是如何调用 AWS 资源的","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为EKS集群的 Pod 调用 AWS 资源的方法</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"原理解析\">原理解析</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在Pod中访问AWS资源，如获取S3中的文件，将ingress绑定到ELB，等等，这些操作都需要被授予相应的权限才可以正常访问。</p>\n</li>\n<li class=\"lvl-2\">\n<p>在AWS IAM中的Role可以被授权给基于OIDC身份提供商的外部用户，而在EKS集群中的pod对于AWS IAM来说就属于外部用户，AWS会通过IAM OIDC对这些外部用户的有效性进行校验。</p>\n</li>\n<li class=\"lvl-2\">\n<p>前文已经介绍过<a href=\"/2023/07/07/aws-eks03-oidc/\" title=\"AWS-EKS-03--创建 IAM OIDC 身份提供商\">如何为EKS创建 IAM OIDC 身份提供商</a>，在EKS(K8s)中，并不是直接对Pod进行权限校验，而是ServcieAccount，在 K8s 中，ServiceAccount 是一种用于身份验证和授权的机制，它为 Pod 提供了一个身份标识。每个 Pod 都与一个 ServiceAccount 相关联，并且可以使用该 ServiceAccount 获取与其关联的身份凭据。</p>\n</li>\n<li class=\"lvl-2\">\n<p>在EKS（K8s）中可以将ServcieAccount与AWS IAM Role进行绑定，同时将ServcieAccount与Pod进行关联，这样Pod也就具备了相应的IAM Role。</p>\n</li>\n<li class=\"lvl-2\">\n<p>EKS（K8s）的 ServcieAccount 通过 Idp（EKS OpenID Connect provider）获得 ID_token并将其发送给 IAM Identity providers ，IAM Identity providers负责获取OIDC的key并验证ID_token的有效性。</p>\n</li>\n<li class=\"lvl-2\">\n<p>当ServcieAccount通过IAM OIDC身份校验后，关联的Pod就可以使用相对应的Role获得访问AWS资源的权限。</p>\n</li>\n<li class=\"lvl-2\">\n<p>创建Pod时，如果没有为其指定关联的ServcieAccount，则默认使用Pod所在Namespace下的名称为<code>default</code>的ServcieAccount，创建Namespace时会自动为其创建该缺省的ServcieAccount，默认其没有绑定任何IAM Role，则缺省继承NodeGroup的IAM Role，NodeGroup的IAM Role是在创建EKS集群时自动创建的，其具有对ECR存储库的只读访问、允许Amazon EKS工作节点连接到Amazon EKS群集等权限。<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/fXD4pY.png\" alt=\"\" width=\"1200\" height=\"800\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>Amazon EKS Pod Identity Webhook 会查看与 service account 关联的 Pods，并向 Pod 提供下列环境变量</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">AWS_ROLE_ARN=arn:aws:iam::&lt;ACCOUNT_ID&gt;:role/&lt;IAM_ROLE_NAME&gt;</li>\n<li class=\"lvl-6\">AWS_WEB_IDENTITY_TOKEN_FILE=/var/run/secrets/eks.amazonaws.com/serviceaccount/token</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p><code>AWS_ROLE_ARN</code>就是绑定到ServiceAccount上的IAM Role，<code>AWS_WEB_IDENTITY_TOKEN_FILE</code>就是要发送给IAM Identity providers的ID_token。</p>\n</li>\n<li class=\"lvl-2\">\n<p>默认只有以 root 用户运行的容器才有权限访问 web identity token 文件，当以其它用户运行容器时，需要用 fsGroup 指定一个 groupID。在 Amazon EKS 中，可以将 fsGroup 设置为 65534。这是 Kubernetes 中的推荐做法，因为这个值对应于 nobody 用户和 nogroup 组的 ID。使用 fsGroup: 65534 将确保容器中的非 root 用户具有适当的权限来访问 Web Identity Token 文件。</p>\n</li>\n</ul>\n<h2 id=\"案例分析\">案例分析</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>前面在<a href=\"/2023/07/07/aws-eks07-loadbalancer/\" title=\"AWS-EKS-07--安装 AWS Load Balancer Controller 附加组件\">安装 AWS Load Balancer Controller 附加组件</a>时，通过如下方式进行授权</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用上一步中下载的策略创建一个 IAM policy</span></span><br><span class=\"line\">$ aws iam create-policy \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --policy-name AWSLoadBalancerControllerIAMPolicy \\</span><br><span class=\"line\">    --policy-document file://iam_policy.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 AWS Load Balancer Controller 的 kube-system 命名空间中创建名为 aws-load-balancer-controller 的 Kubernetes 服务账户，并使用 IAM 角色的名称注释 Kubernetes 服务账户。</span></span><br><span class=\"line\">$ eksctl create iamserviceaccount \\</span><br><span class=\"line\">  --cluster=eks-lexing \\</span><br><span class=\"line\">  --profile eks-us-west-2 \\</span><br><span class=\"line\">  --namespace=kube-system \\</span><br><span class=\"line\">  --name=aws-load-balancer-controller \\</span><br><span class=\"line\">  --role-name AmazonEKSLoadBalancerControllerRole \\</span><br><span class=\"line\">  --attach-policy-arn=arn:aws:iam::743263909644:policy/AWSLoadBalancerControllerIAMPolicy \\</span><br><span class=\"line\">  --approve</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>上面是先通过<code>aws iam create-policy</code>命令创建了一个策略，然后通过<code>eksctl create iamserviceaccount</code>命令为EKS(K8s)创建了一个ServiceAccount，同时创建了一个IAM Role与ServiceAccount绑定，并将该Role与上面创建的策略进行关联。</p>\n</li>\n<li class=\"lvl-2\">\n<p>所以实际上，上面的一个命令干了四件事</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">\n<p>1.创建了一个名称为<code>AmazonEKSLoadBalancerControllerRole</code>的IAM角色并关联新建的名称为<code>AWSLoadBalancerControllerIAMPolicy</code>的策略<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/xl0OSL.png\" alt=\"\" width=\"1200\" height=\"600\"></p>\n</li>\n<li class=\"lvl-6\">\n<p>2.在k8s的<code>kube-system</code>namespace下创建了一个名称为<code>aws-load-balancer-controller</code>的ServiceAccount</p>\n</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get sa -n kube-system aws-load-balancer-controller</span><br><span class=\"line\">NAME                           SECRETS   AGE</span><br><span class=\"line\">aws-load-balancer-controller   0         9d</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">3.在名称为<code>AmazonEKSLoadBalancerControllerRole</code>的IAM角色的信任关系中指定认证方式为OIDC，并且关联名称为<code>aws-load-balancer-controller</code>的ServiceAccount。</li>\n</ul>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/MkTXd5.png\" alt=\"\" width=\"1200\" height=\"500\"></p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">\n<p>4.在名称为<code>aws-load-balancer-controller</code>的ServiceAccount中关联上面的角色<code>AmazonEKSLoadBalancerControllerRole</code>，就是添加注释<code>eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControll</code>。</p>\n</li>\n</ul>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">k</span> <span class=\"string\">edit</span> <span class=\"string\">sa</span> <span class=\"string\">-n</span> <span class=\"string\">kube-system</span> <span class=\"string\">aws-load-balancer-controller</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">eks.amazonaws.com/role-arn:</span> <span class=\"string\">arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControll</span></span><br><span class=\"line\"><span class=\"attr\">creationTimestamp:</span> <span class=\"string\">&quot;2023-07-04T09:20:41Z&quot;</span></span><br><span class=\"line\"><span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/managed-by:</span> <span class=\"string\">eksctl</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">aws-load-balancer-controller</span></span><br><span class=\"line\"><span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">resourceVersion:</span> <span class=\"string\">&quot;1707669&quot;</span></span><br><span class=\"line\"><span class=\"attr\">uid:</span> <span class=\"string\">857200a6-2e16-4939-bbbc-483dd579acbb</span></span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>然后在创建Pod时，为Pod指定<code>serviceAccountName: aws-load-balancer-controller</code></p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">默认情况下，在 Kubernetes 中启动的 Pod 不会以 root 用户身份运行，所以在使用基于 OIDC 的身份认证时，当以非 root 用户运行容器时，可以使用 fsGroup 来指定一个组 ID（group ID），以便容器中的用户具有访问 Web Identity Token 文件的权限。在 Amazon EKS 中，可以将 fsGroup 设置为 65534。这是 Kubernetes 中的推荐做法，因为这个值对应于 nobody 用户和 nogroup 组的 ID。使用 fsGroup: 65534 将确保容器中的非 root 用户具有适当的权限来访问 Web Identity Token 文件，确保容器中的用户具有访问 <code>/var/run/secrets/eks.amazonaws.com/serviceaccount/token</code> 文件的权限。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl edit deployment -n kube-system aws-load-balancer-controller</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/rSKtJm.png\" alt=\"\"></p>\n<div class=\"tips\">\n<p><em><strong>使用aws命令创建角色并关联SA</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">创建Policy</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用上一步中下载的策略创建一个 IAM policy</span></span><br><span class=\"line\">$ aws iam create-policy \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --policy-name AWSLoadBalancerControllerIAMPolicy \\</span><br><span class=\"line\">    --policy-document file://iam_policy.json</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">创建<code>trust-policy.json</code>，用于描述IAM Role的信任关系</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2012-10-17&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Statement&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Effect&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Allow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Principal&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Federated&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Action&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sts:AssumeRoleWithWebIdentity&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Condition&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;StringEquals&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sts.amazonaws.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;system:serviceaccount:kube-system:aws-load-balancer-controller&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上述配置中的 “Condition” 部分是用于在 IAM 角色的信任策略中定义条件。该条件会限制什么样的令牌可以被信任并用于角色的身份验证和授权。<br>\n具体来说，“Condition” 对象中的 “StringEquals” 表示字符串相等的条件比较。它包含两个键值对，每个键值对都描述了一个条件。<br>\n“<a href=\"http://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud\">oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud</a>”: “<a href=\"http://sts.amazonaws.com\">sts.amazonaws.com</a>”：这个条件表示 OIDC 令牌中的 “aud”（受众）字段必须与 “<a href=\"http://sts.amazonaws.com\">sts.amazonaws.com</a>” 相等。也就是说，令牌的受众必须是 AWS Security Token Service (STS)。<br>\n“<a href=\"http://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub\">oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub</a>”: “system:serviceaccount:kube-system:aws-load-balancer-controller”：这个条件表示 OIDC 令牌中的 “sub”（主题）字段必须与 “system:serviceaccount:kube-system:aws-load-balancer-controller” 相等。也就是说，令牌的主题必须是 kube-system 命名空间下的 aws-load-balancer-controller Service Account。<br>\n这些条件的目的是确保只有满足这两个条件的 OIDC 令牌才能被信任，并被用于通过 OIDC 进行的身份验证和授权操作。这样可以限制对角色的访问，仅允许特定的 OIDC 令牌来获取访问权限。</p>\n</blockquote>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">创建 IAM Role</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws iam create-role \\</span><br><span class=\"line\">  --profile eks-us-west-2 \\</span><br><span class=\"line\">  --role-name AmazonEKSLoadBalancerControllerRole \\</span><br><span class=\"line\">  --assume-role-policy-document file://<span class=\"string\">&quot;trust-policy.json&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>为 Role 添加 Policy</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws iam attach-role-policy \\</span><br><span class=\"line\">  --profile eks-us-west-2 \\</span><br><span class=\"line\">  --policy-arn arn:aws:iam::743263909644:policy/AWSLoadBalancerControllerIAMPolicy \\</span><br><span class=\"line\">  --role-name AmazonEKSLoadBalancerControllerRole</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>创建SA</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create serviceaccount aws-load-balancer-controller -n kube-system</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>为SA绑定IAM Role</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl annotate serviceaccount aws-load-balancer-controller \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  eks.amazonaws.com/role-arn=arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControllerRole</span><br></pre></td></tr></table></figure>\n</div>\n<h2 id=\"动手实践\">动手实践</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>搞明白了上面的原理，我们只需要按照上面那的步骤做就可以了，接下来就以Pod访问S3为例进行说明。</p>\n</li>\n<li class=\"lvl-2\">\n<p>创建新的策略或使用现有策略，这里我们使用已有的策略<code>arn:aws:iam::aws:policy/AmazonS3FullAccess</code></p>\n</li>\n<li class=\"lvl-2\">\n<p>使用<code>eksctl create iamserviceaccount</code>创建Service和IAM Role，并将它们进行绑定关联</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ eksctl create iamserviceaccount \\</span><br><span class=\"line\">  --cluster=eks-lexing \\</span><br><span class=\"line\">  --namespace=<span class=\"built_in\">test</span> \\</span><br><span class=\"line\">  --name=test-s3-sa-new \\</span><br><span class=\"line\">  --role-name TestS3Role \\</span><br><span class=\"line\">  --attach-policy-arn=arn:aws:iam::aws:policy/AmazonS3FullAccess \\</span><br><span class=\"line\">  --approve</span><br><span class=\"line\">2023-07-13 19:59:18 [ℹ]  6 existing iamserviceaccount(s) (kube-system/aws-load-balancer-controller,kube-system/aws-node,kube-system/ebs-csi-controller-sa,kube-system/efs-csi-controller-sa,<span class=\"built_in\">test</span>/test-s3-sa,<span class=\"built_in\">test</span>/testS3SA) will be excluded</span><br><span class=\"line\">2023-07-13 19:59:18 [ℹ]  1 iamserviceaccount (<span class=\"built_in\">test</span>/test-s3-sa-new) was included (based on the include/exclude rules)</span><br><span class=\"line\">2023-07-13 19:59:18 [!]  serviceaccounts that exist <span class=\"keyword\">in</span> Kubernetes will be excluded, use --override-existing-serviceaccounts to override</span><br><span class=\"line\">2023-07-13 19:59:18 [ℹ]  1 task: &#123;</span><br><span class=\"line\">    2 sequential sub-tasks: &#123;</span><br><span class=\"line\">        create IAM role <span class=\"keyword\">for</span> serviceaccount <span class=\"string\">&quot;test/test-s3-sa-new&quot;</span>,</span><br><span class=\"line\">        create serviceaccount <span class=\"string\">&quot;test/test-s3-sa-new&quot;</span>,</span><br><span class=\"line\">    &#125; &#125;2023-07-13 19:59:18 [ℹ]  building iamserviceaccount stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;</span></span><br><span class=\"line\">2023-07-13 19:59:18 [ℹ]  deploying stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;</span></span><br><span class=\"line\">2023-07-13 19:59:19 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;</span></span><br><span class=\"line\">2023-07-13 19:59:50 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;</span></span><br><span class=\"line\">2023-07-13 19:59:51 [ℹ]  created serviceaccount <span class=\"string\">&quot;test/test-s3-sa-new&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看sa，确认是否已关联IAM Role</span></span><br><span class=\"line\">$ k describe sa test-s3-sa-new</span><br><span class=\"line\">Name:                test-s3-sa-new</span><br><span class=\"line\">Namespace:           <span class=\"built_in\">test</span></span><br><span class=\"line\">Labels:              app.kubernetes.io/managed-by=eksctl</span><br><span class=\"line\">Annotations:         eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/TestS3Role</span><br><span class=\"line\">Image pull secrets:  &lt;none&gt;</span><br><span class=\"line\">Mountable secrets:   &lt;none&gt;</span><br><span class=\"line\">Tokens:              &lt;none&gt;</span><br><span class=\"line\">Events:              &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/IOszUm.png\" alt=\"\" width=\"1200\" height=\"600\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/oQ6D30.png\" alt=\"\" width=\"1200\" height=\"400\"></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建一个已经安装过AWS CLI的Pod，这里镜像就使用<code>amazon/aws-cli</code>，注意要指定<code>serviceAccountName: test-s3-sa-new</code></p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">deployment-test-s3-sa</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">app-test-s3-sa</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">app-test-s3-sa</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">test-s3-sa-new</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">amazon/aws-cli</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">app-test-s3-sa</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">tail</span> <span class=\"string\">-f</span> <span class=\"string\">/dev/null</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署</span></span><br><span class=\"line\">$ k apply -f testS3SA.yaml</span><br><span class=\"line\">deployment.apps/deployment-test-s3-sa created</span><br><span class=\"line\"><span class=\"comment\"># 进入pod</span></span><br><span class=\"line\">$ k <span class=\"built_in\">exec</span> -it deployment-test-s3-sa-5bd985845d-mqjjp -- bash</span><br><span class=\"line\"><span class=\"comment\"># 查看当前的AWS用户信息，可以看到这里关联的是一个临时用户，但是从Arn中也能看出来其关联的角色 TestS3Role</span></span><br><span class=\"line\">bash-4.2<span class=\"comment\"># aws sts get-caller-identity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;UserId&quot;</span>: <span class=\"string\">&quot;AROA22DP3G4GNBLHPZBAM:botocore-session-1689250618&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Account&quot;</span>: <span class=\"string\">&quot;743263909644&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:sts::743263909644:assumed-role/TestS3Role/botocore-session-1689250618&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 查看s3存储桶列表，查询成功，说明当前pod已经具备的访问AWS S3资源的权限</span></span><br><span class=\"line\">bash-4.2<span class=\"comment\"># aws s3 ls</span></span><br><span class=\"line\">2023-07-10 09:34:45 lexing-helm-charts</span><br><span class=\"line\"><span class=\"comment\"># 查看环境变量</span></span><br><span class=\"line\">bash-4.2<span class=\"comment\"># echo $AWS_ROLE_ARN</span></span><br><span class=\"line\">arn:aws:iam::743263909644:role/TestS3Role</span><br><span class=\"line\">bash-4.2<span class=\"comment\"># echo $AWS_WEB_IDENTITY_TOKEN_FILE</span></span><br><span class=\"line\">/var/run/secrets/eks.amazonaws.com/serviceaccount/token</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍为EKS集群的 Pod 调用 AWS 资源的方法 参考资料： Amazon EKS用户指南 Kubernetes 文档 原理解析 在Pod中访问AWS资源，如获取S3中的文件，将ingress绑定到ELB，等等，这些操作都需要被授予相应的权限才可以正常访问。 在AWS IAM中的Role可以被授权给基于OIDC身份提供商的外部用户，而在EKS集群中的pod对于AWS IAM来说就属于外部用户，AWS会通过IAM OIDC对这些外部用户的有效性进行校验。 前文已经介绍过如何为EKS创建 IAM OIDC 身份提供商，在EKS(K8s)中，并不是直接对Pod进行权限校验，而是ServcieAccount，在 K8s 中，ServiceAccount 是一种用于身份验证和授权的机制，它为 Pod 提供了一个身份标识。每个 Pod 都与一个 ServiceAccount 相关联，并且可以使用该 ServiceAccount 获取与其关联的身份凭据。 在EKS（K8s）中可以将ServcieAccount与AWS IAM Role进行绑定，同时将ServcieAccount与Pod进行关联，这样Pod也就具备了相应的IAM Role。 EKS（K8s）的 ServcieAccount 通过 Idp（EKS OpenID Connect provider）获得 ID_token并将其发送给 IAM Identity providers ，IAM Identity providers负责获取OIDC的key并验证ID_token的有效性。 当ServcieAccount通过IAM OIDC身份校验后，关联的Pod就可以使用相对应的Role获得访问AWS资源的权限。 创建Pod时，如果没有为其指定关联的ServcieAccount，则默认使用Pod所在Namespace下的名称为default的ServcieAccount，创建Namespace时会自动为其创建该缺省的ServcieAccount，默认其没有绑定任何IAM Role，则缺省继承NodeGroup的IAM Role，NodeGroup的IAM Role是在创建EKS集群时自动创建的，其具有对ECR存储库的只读访问、允许Amazon EKS工作节点连接到Amazon EKS群集等权限。 Amazon EKS Pod Identity Webhook 会查看与 service account 关联的 Pods，并向 Pod 提供下列环境变量 AWS_ROLE_ARN=arn:aws:iam::&lt;ACCOUNT_ID&gt;:role/&lt;IAM_ROLE_NAME&gt; AWS_WEB_IDENTITY_TOKEN_FILE=/var/run/secrets/eks.amazonaws.com/serviceaccount/token AWS_ROLE_ARN就是绑定到ServiceAccount上的IAM Role，AWS_WEB_IDENTITY_TOKEN_FILE就是要发送给IAM Identity providers的ID_token。 默认只有以 root 用户运行的容器才有权限访问 web identity token 文件，当以其它用户运行容器时，需要用 fsGroup 指定一个 groupID。在 Amazon EKS 中，可以将 fsGroup 设置为 65534。这是 Kubernetes 中的推荐做法，因为这个值对应于 nobody 用户和 nogroup 组的 ID。使用 fsGroup: 65534 将确保容器中的非 root 用户具有适当的权限来访问 Web Identity Token 文件。 案例分析 前面在安装 AWS Load Balancer Controller 附加组件时，通过如下方式进行授权 1234567891011121314151617$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json# 使用上一步中下载的策略创建一个 IAM policy$ aws iam create-policy \\ --profile eks-us-west-2 \\ --policy-name AWSLoadBalancerControllerIAMPolicy \\ --policy-document file://iam_policy.json# 在 AWS Load Balancer Controller 的 kube-system 命名空间中创建名为 aws-load-balancer-controller 的 Kubernetes 服务账户，并使用 IAM 角色的名称注释 Kubernetes 服务账户。$ eksctl create iamserviceaccount \\ --cluster=eks-lexing \\ --profile eks-us-west-2 \\ --namespace=kube-system \\ --name=aws-load-balancer-controller \\ --role-name AmazonEKSLoadBalancerControllerRole \\ --attach-policy-arn=arn:aws:iam::743263909644:policy/AWSLoadBalancerControllerIAMPolicy \\ --approve 上面是先通过aws iam create-policy命令创建了一个策略，然后通过eksctl create iamserviceaccount命令为EKS(K8s)创建了一个ServiceAccount，同时创建了一个IAM Role与ServiceAccount绑定，并将该Role与上面创建的策略进行关联。 所以实际上，上面的一个命令干了四件事 1.创建了一个名称为AmazonEKSLoadBalancerControllerRole的IAM角色并关联新建的名称为AWSLoadBalancerControllerIAMPolicy的策略 2.在k8s的kube-systemnamespace下创建了一个名称为aws-load-balancer-controller的ServiceAccount 123$ k get sa -n kube-system aws-load-balancer-controllerNAME SECRETS AGEaws-load-balancer-controller 0 9d 3.在名称为AmazonEKSLoadBalancerControllerRole的IAM角色的信任关系中指定认证方式为OIDC，并且关联名称为aws-load-balancer-controller的ServiceAccount。 4.在名称为aws-load-balancer-controller的ServiceAccount中关联上面的角色AmazonEKSLoadBalancerControllerRole，就是添加注释eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControll。 12345678910111213$ k edit sa -n kube-system aws-load-balancer-controllerapiVersion: v1kind: ServiceAccountmetadata:annotations: eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControllcreationTimestamp: &quot;2023-07-04T09:20:41Z&quot;labels: app.kubernetes.io/managed-by: eksctlname: aws-load-balancer-controllernamespace: kube-systemresourceVersion: &quot;1707669&quot;uid: 857200a6-2e16-4939-bbbc-483dd579acbb 然后在创建Pod时，为Pod指定serviceAccountName: aws-load-balancer-controller 默认情况下，在 Kubernetes 中启动的 Pod 不会以 root 用户身份运行，所以在使用基于 OIDC 的身份认证时，当以非 root 用户运行容器时，可以使用 fsGroup 来指定一个组 ID（group ID），以便容器中的用户具有访问 Web Identity Token 文件的权限。在 Amazon EKS 中，可以将 fsGroup 设置为 65534。这是 Kubernetes 中的推荐做法，因为这个值对应于 nobody 用户和 nogroup 组的 ID。使用 fsGroup: 65534 将确保容器中的非 root 用户具有适当的权限来访问 Web Identity Token 文件，确保容器中的用户具有访问 /var/run/secrets/eks.amazonaws.com/serviceaccount/token 文件的权限。 1$ kubectl edit deployment -n kube-system aws-load-balancer-controller 使用aws命令创建角色并关联SA 创建Policy 1234567$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json# 使用上一步中下载的策略创建一个 IAM policy$ aws iam create-policy \\ --profile eks-us-west-2 \\ --policy-name AWSLoadBalancerControllerIAMPolicy \\ --policy-document file://iam_policy.json 创建trust-policy.json，用于描述IAM Role的信任关系 123456789101112131415161718&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Federated&quot;: &quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;, &quot;Condition&quot;: &#123; &quot;StringEquals&quot;: &#123; &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;: &quot;sts.amazonaws.com&quot;, &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;: &quot;system:serviceaccount:kube-system:aws-load-balancer-controller&quot; &#125; &#125; &#125; ]&#125; 上述配置中的 “Condition” 部分是用于在 IAM 角色的信任策略中定义条件。该条件会限制什么样的令牌可以被信任并用于角色的身份验证和授权。 具体来说，“Condition” 对象中的 “StringEquals” 表示字符串相等的条件比较。它包含两个键值对，每个键值对都描述了一个条件。 “oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud”: “sts.amazonaws.com”：这个条件表示 OIDC 令牌中的 “aud”（受众）字段必须与 “sts.amazonaws.com” 相等。也就是说，令牌的受众必须是 AWS Security Token Service (STS)。 “oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub”: “system:serviceaccount:kube-system:aws-load-balancer-controller”：这个条件表示 OIDC 令牌中的 “sub”（主题）字段必须与 “system:serviceaccount:kube-system:aws-load-balancer-controller” 相等。也就是说，令牌的主题必须是 kube-system 命名空间下的 aws-load-balancer-controller Service Account。 这些条件的目的是确保只有满足这两个条件的 OIDC 令牌才能被信任，并被用于通过 OIDC 进行的身份验证和授权操作。这样可以限制对角色的访问，仅允许特定的 OIDC 令牌来获取访问权限。 创建 IAM Role 1234$ aws iam create-role \\ --profile eks-us-west-2 \\ --role-name AmazonEKSLoadBalancerControllerRole \\ --assume-role-policy-document file://&quot;trust-policy.json&quot; 为 Role 添加 Policy 1234$ aws iam attach-role-policy \\ --profile eks-us-west-2 \\ --policy-arn arn:aws:iam::743263909644:policy/AWSLoadBalancerControllerIAMPolicy \\ --role-name AmazonEKSLoadBalancerControllerRole 创建SA 1$ kubectl create serviceaccount aws-load-balancer-controller -n kube-system 为SA绑定IAM Role 123$ kubectl annotate serviceaccount aws-load-balancer-controller \\ -n kube-system \\ eks.amazonaws.com/role-arn=arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControllerRole 动手实践 搞明白了上面的原理，我们只需要按照上面那的步骤做就可以了，接下来就以Pod访问S3为例进行说明。 创建新的策略或使用现有策略，这里我们使用已有的策略arn:aws:iam::aws:policy/AmazonS3FullAccess 使用eksctl create iamserviceaccount创建Service和IAM Role，并将它们进行绑定关联 123456789101112131415161718192021222324252627282930$ eksctl create iamserviceaccount \\ --cluster=eks-lexing \\ --namespace=test \\ --name=test-s3-sa-new \\ --role-name TestS3Role \\ --attach-policy-arn=arn:aws:iam::aws:policy/AmazonS3FullAccess \\ --approve2023-07-13 19:59:18 [ℹ] 6 existing iamserviceaccount(s) (kube-system/aws-load-balancer-controller,kube-system/aws-node,kube-system/ebs-csi-controller-sa,kube-system/efs-csi-controller-sa,test/test-s3-sa,test/testS3SA) will be excluded2023-07-13 19:59:18 [ℹ] 1 iamserviceaccount (test/test-s3-sa-new) was included (based on the include/exclude rules)2023-07-13 19:59:18 [!] serviceaccounts that exist in Kubernetes will be excluded, use --override-existing-serviceaccounts to override2023-07-13 19:59:18 [ℹ] 1 task: &#123; 2 sequential sub-tasks: &#123; create IAM role for serviceaccount &quot;test/test-s3-sa-new&quot;, create serviceaccount &quot;test/test-s3-sa-new&quot;, &#125; &#125;2023-07-13 19:59:18 [ℹ] building iamserviceaccount stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;2023-07-13 19:59:18 [ℹ] deploying stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;2023-07-13 19:59:19 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;2023-07-13 19:59:50 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;2023-07-13 19:59:51 [ℹ] created serviceaccount &quot;test/test-s3-sa-new&quot;# 查看sa，确认是否已关联IAM Role$ k describe sa test-s3-sa-newName: test-s3-sa-newNamespace: testLabels: app.kubernetes.io/managed-by=eksctlAnnotations: eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/TestS3RoleImage pull secrets: &lt;none&gt;Mountable secrets: &lt;none&gt;Tokens: &lt;none&gt;Events: &lt;none&gt; 创建一个已经安装过AWS CLI的Pod，这里镜像就使用amazon/aws-cli，注意要指定serviceAccountName: test-s3-sa-new 123456789101112131415161718192021222324apiVersion: apps/v1kind: Deploymentmetadata: name: deployment-test-s3-saspec: selector: matchLabels: app.kubernetes.io/name: app-test-s3-sa replicas: 1 template: metadata: labels: app.kubernetes.io/name: app-test-s3-sa spec: serviceAccountName: test-s3-sa-new containers: - image: amazon/aws-cli imagePullPolicy: Always name: app-test-s3-sa ports: - containerPort: 80 command: [&quot;/bin/sh&quot;, &quot;-c&quot;] args: - tail -f /dev/null 1234567891011121314151617181920# 部署$ k apply -f testS3SA.yamldeployment.apps/deployment-test-s3-sa created# 进入pod$ k exec -it deployment-test-s3-sa-5bd985845d-mqjjp -- bash# 查看当前的AWS用户信息，可以看到这里关联的是一个临时用户，但是从Arn中也能看出来其关联的角色 TestS3Rolebash-4.2# aws sts get-caller-identity&#123; &quot;UserId&quot;: &quot;AROA22DP3G4GNBLHPZBAM:botocore-session-1689250618&quot;, &quot;Account&quot;: &quot;743263909644&quot;, &quot;Arn&quot;: &quot;arn:aws:sts::743263909644:assumed-role/TestS3Role/botocore-session-1689250618&quot;&#125;# 查看s3存储桶列表，查询成功，说明当前pod已经具备的访问AWS S3资源的权限bash-4.2# aws s3 ls2023-07-10 09:34:45 lexing-helm-charts# 查看环境变量bash-4.2# echo $AWS_ROLE_ARNarn:aws:iam::743263909644:role/TestS3Rolebash-4.2# echo $AWS_WEB_IDENTITY_TOKEN_FILE/var/run/secrets/eks.amazonaws.com/serviceaccount/token","summary":"摘要 本文介绍为EKS集群的 Pod 调用 AWS 资源的方法 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-13T12:30:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/10/aws-eks14-helm/","url":"https://blog.hanqunfeng.com/2023/07/10/aws-eks14-helm/","title":"AWS-EKS-14--Helm","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为Helm的使用方法</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"Helm\">Helm</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://helm.sh/zh/docs/\">官网文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>Helm 是 Kubernetes 的包管理器，类似于 Linux 下的包管理工具如 yum、apt 等。可以方便的将之前打包好的 yaml 文件部署到 Kunernetes 上。</p>\n</li>\n</ul>\n<h3 id=\"为什么要引入-Helm\">为什么要引入 Helm</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在以往的应用部署过程当中，我们需要先编写一个 yaml 文件，然后该文件中包含 deployment、Service、Ingress 等等。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果说需要部署的是单一、少数服务的应用，那么完全可以使用 yaml 文件的方式，这样会很简单。但是在实际的项目当中，微服务的数量基本不可能是一个，可能是几十个，如果说再用 yaml 文件的部署方式，那就意味着需要编写几十个 yaml 文件，这就会导致 数量多、维护难 等诸多问题。</p>\n</li>\n<li class=\"lvl-2\">\n<p>针对上述问题，Helm 的引入使用则可以将所有的 yaml 文件进行一个整体的管理，而且它能够实现 yaml 文件的高效复用。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Helm 具备如下的能力：<br>\n简化部署 ：Helm允许使用单个命令轻松部署和管理应用程序，从而简化了整个部署过程；<br>\n高度可配置：Helm Charts提供了高度可配置的选项，可以轻松自定义和修改应用程序的部署配置；<br>\n版本控制 ：Helm允许管理应用程序的多个版本，从而轻松实现版本控制和回滚；<br>\n模板化：Helm Charts使用YAML模板来定义Kubernetes对象的配置，从而简化了配置过程，并提高了可重复性和可扩展性；<br>\n应用程序库：Helm具有应用程序库的概念，可以轻松地共享和重用Helm Charts，从而简化了多个应用程序的部署和管理；<br>\n插件系统：Helm拥有一个强大的插件系统，允许您扩展和定制Helm的功能，以满足特定的需求和要求。</p>\n</li>\n</ul>\n<h3 id=\"核心概念\">核心概念</h3>\n<table>\n<thead>\n<tr>\n<th>概念</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chart</td>\n<td>一个Helm包，其中包含了运行一个应用所需要的镜像、依赖和资源定义等，还可能包含Kubernetes集群中的服务定义，类似Homebrew中的formula、APT的dpkg或者Yum的rpm文件</td>\n</tr>\n<tr>\n<td>Repository</td>\n<td>存储Helm Charts的地方</td>\n</tr>\n<tr>\n<td>Release</td>\n<td>Chart在k8s上运行的Chart的一个实例，例如，如果一个MySQL Chart想在服务器上运行两个数据库，可以将这个Chart安装两次，并在每次安装中生成自己的Release以及Release名称。</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Helm Chart的参数，用于配置Kubernetes对象</td>\n</tr>\n<tr>\n<td>Template</td>\n<td>使用Go模板语言生成Kubernetes对象的定义文件</td>\n</tr>\n<tr>\n<td>Namespace</td>\n<td>Kubernetes中用于隔离资源的逻辑分区</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Helm的基本使用\">Helm的基本使用</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>当您已经安装好了Helm之后，您可以添加一个chart 仓库。从 <a href=\"https://artifacthub.io/packages/search?kind=0\">Artifact Hub</a> 中查找有效的Helm chart仓库。</p>\n</li>\n<li class=\"lvl-2\">\n<p>另外常用的仓库有<a href=\"https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts\">阿里云</a>、<a href=\"http://mirror.azure.cn/kubernetes/charts/\">微软</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加仓库</span></span><br><span class=\"line\"><span class=\"comment\"># 语法 ：helm repo add 仓库名称 仓库地址</span></span><br><span class=\"line\"><span class=\"comment\"># 添加 eks-charts 存储库</span></span><br><span class=\"line\">$ helm repo add eks https://aws.github.io/eks-charts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新指定仓库索引，以确保您拥有最新的图表</span></span><br><span class=\"line\">$ helm repo update eks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新全部仓库索引</span></span><br><span class=\"line\">$ helm repo update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看已经添加的仓库</span></span><br><span class=\"line\">$ helm repo list</span><br><span class=\"line\">NAME              \tURL</span><br><span class=\"line\">eks               \thttps://aws.github.io/eks-charts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索，默认展示最新的版本</span></span><br><span class=\"line\">$ helm search repo load-balancer</span><br><span class=\"line\">NAME                            \tCHART VERSION\tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.4        \tv2.5.3     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索全部版本</span></span><br><span class=\"line\">$ helm search repo load-balancer -l</span><br><span class=\"line\">NAME                            \tCHART VERSION\tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.4        \tv2.5.3     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.3        \tv2.5.2     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.2        \tv2.5.1     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.1        \tv2.5.1     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在全部版本中搜索大于等于指定版本</span></span><br><span class=\"line\">$ helm search repo load-balancer --version ^1.5.1 -l</span><br><span class=\"line\">NAME                            \tCHART VERSION\tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.4        \tv2.5.3     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.3        \tv2.5.2     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.2        \tv2.5.1     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.1        \tv2.5.1     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 AWS Load Balancer Controller 的最新版本，--set指定Values</span></span><br><span class=\"line\">$ helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> clusterName=eks-lexing \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.create=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.name=aws-load-balancer-controller</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 AWS Load Balancer Controller 的指定版本，--version 1.5.4</span></span><br><span class=\"line\">$ helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> clusterName=eks-lexing \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.create=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.name=aws-load-balancer-controller</span><br><span class=\"line\">  --version 1.5.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看全部命名空间下已经安装的包</span></span><br><span class=\"line\">$ helm list --all-namespaces</span><br><span class=\"line\">NAME                        \tNAMESPACE  \tREVISION\tUPDATED                             \tSTATUS  \tCHART                             \tAPP VERSION</span><br><span class=\"line\">aws-load-balancer-controller\tkube-system\t2       \t2023-07-04 17:31:37.839466 +0800 CST\tdeployed\taws-load-balancer-controller-1.5.4\tv2.5.3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定命名空间下已经安装的包</span></span><br><span class=\"line\">$ helm list -n kube-system</span><br><span class=\"line\"><span class=\"comment\"># 关键字过滤</span></span><br><span class=\"line\">$ helm list -n kube-system --filter load-balancer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取Values，用户指定的，即安装或升级时通过--set等方式设置的</span></span><br><span class=\"line\">$ helm get values aws-load-balancer-controller -n kube-system</span><br><span class=\"line\">USER-SUPPLIED VALUES:</span><br><span class=\"line\">clusterName: eks-lexing</span><br><span class=\"line\">serviceAccount:</span><br><span class=\"line\">  create: <span class=\"literal\">false</span></span><br><span class=\"line\">  name: aws-load-balancer-controller</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取Values，全部Values，都可以进行替换</span></span><br><span class=\"line\">$ helm get values aws-load-balancer-controller -n kube-system --all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 升级安装，升级时只需要指定要改变的部分</span></span><br><span class=\"line\">$ helm upgrade aws-load-balancer-controller eks/aws-load-balancer-controller \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> clusterName=eks-lexing \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.create=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.name=aws-load-balancer-controller</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看历史安装记录</span></span><br><span class=\"line\">$ helm <span class=\"built_in\">history</span> -n kube-system aws-load-balancer-controller</span><br><span class=\"line\">REVISION\tUPDATED                 \tSTATUS    \tCHART                             \tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">1       \tTue Jul  4 17:26:05 2023\tsuperseded\taws-load-balancer-controller-1.5.4\tv2.5.3     \tInstall complete</span><br><span class=\"line\">2       \tTue Jul  4 17:31:37 2023\tdeployed  \taws-load-balancer-controller-1.5.4\tv2.5.3     \tUpgrade complete</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回滚到指定修订号，修订号通过 helm history 查看</span></span><br><span class=\"line\">$ helm rollback -n kube-system aws-load-balancer-controller 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示已命名发布的状态</span></span><br><span class=\"line\">$ helm status -n kube-system aws-load-balancer-controller</span><br><span class=\"line\">NAME: aws-load-balancer-controller</span><br><span class=\"line\">LAST DEPLOYED: Tue Jul  4 17:31:37 2023</span><br><span class=\"line\">NAMESPACE: kube-system</span><br><span class=\"line\">STATUS: deployed</span><br><span class=\"line\">REVISION: 2</span><br><span class=\"line\">TEST SUITE: None</span><br><span class=\"line\">NOTES:</span><br><span class=\"line\">AWS Load Balancer controller installed!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">$ helm uninstall aws-load-balancer-controller -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除仓库</span></span><br><span class=\"line\">$ helm repo remove eks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看helm客户端环境信息</span></span><br><span class=\"line\">$ helm <span class=\"built_in\">env</span></span><br><span class=\"line\">HELM_BIN=<span class=\"string\">&quot;helm&quot;</span></span><br><span class=\"line\">HELM_BURST_LIMIT=<span class=\"string\">&quot;100&quot;</span></span><br><span class=\"line\">HELM_CACHE_HOME=<span class=\"string\">&quot;/Users/hanqf/Library/Caches/helm&quot;</span></span><br><span class=\"line\">HELM_CONFIG_HOME=<span class=\"string\">&quot;/Users/hanqf/Library/Preferences/helm&quot;</span></span><br><span class=\"line\">HELM_DATA_HOME=<span class=\"string\">&quot;/Users/hanqf/Library/helm&quot;</span></span><br><span class=\"line\">HELM_DEBUG=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">HELM_KUBEAPISERVER=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_KUBEASGROUPS=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_KUBEASUSER=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_KUBECAFILE=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_KUBECONTEXT=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_KUBEINSECURE_SKIP_TLS_VERIFY=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">HELM_KUBETLS_SERVER_NAME=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_KUBETOKEN=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_MAX_HISTORY=<span class=\"string\">&quot;10&quot;</span></span><br><span class=\"line\">HELM_NAMESPACE=<span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">HELM_PLUGINS=<span class=\"string\">&quot;/Users/hanqf/Library/helm/plugins&quot;</span></span><br><span class=\"line\">HELM_REGISTRY_CONFIG=<span class=\"string\">&quot;/Users/hanqf/Library/Preferences/helm/registry/config.json&quot;</span></span><br><span class=\"line\">HELM_REPOSITORY_CACHE=<span class=\"string\">&quot;/Users/hanqf/Library/Caches/helm/repository&quot;</span></span><br><span class=\"line\">HELM_REPOSITORY_CONFIG=<span class=\"string\">&quot;/Users/hanqf/Library/Preferences/helm/repositories.yaml&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 展示指定chart的全部信息 （values.yaml, Chart.yaml, README）</span></span><br><span class=\"line\">$ helm show all eks/aws-load-balancer-controller</span><br><span class=\"line\"><span class=\"comment\"># 只展示chart.yaml</span></span><br><span class=\"line\">$ helm show chart eks/aws-load-balancer-controller</span><br><span class=\"line\"><span class=\"comment\"># 只展示values.yaml</span></span><br><span class=\"line\">$ helm show values eks/aws-load-balancer-controller</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下载指定的包，这里会下载 aws-load-balancer-controller-1.5.4.tgz</span></span><br><span class=\"line\">$ helm pull eks/aws-load-balancer-controller</span><br><span class=\"line\"><span class=\"comment\"># 下载并解压到指定目录</span></span><br><span class=\"line\">$ helm pull eks/aws-load-balancer-controller --untar --untardir ./</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义-Chart-部署应用\">自定义 Chart 部署应用</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个chart</span></span><br><span class=\"line\">$ helm create mychart</span><br><span class=\"line\">Creating mychart</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">mychart</span><br><span class=\"line\"></span><br><span class=\"line\">$ exa -T mychart</span><br><span class=\"line\">mychart</span><br><span class=\"line\">├── Chart.yaml</span><br><span class=\"line\">├── charts</span><br><span class=\"line\">├── templates</span><br><span class=\"line\">│  ├── _helpers.tpl</span><br><span class=\"line\">│  ├── deployment.yaml</span><br><span class=\"line\">│  ├── hpa.yaml</span><br><span class=\"line\">│  ├── ingress.yaml</span><br><span class=\"line\">│  ├── NOTES.txt</span><br><span class=\"line\">│  ├── service.yaml</span><br><span class=\"line\">│  ├── serviceaccount.yaml</span><br><span class=\"line\">│  └── tests</span><br><span class=\"line\">│     └── test-connection.yaml</span><br><span class=\"line\">└── values.yaml</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>文件</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>charts</td>\n<td>一个普通的空文件，一般也不会写入内容</td>\n</tr>\n<tr>\n<td>Chart.yaml</td>\n<td>当前 chart 属性的配置信息</td>\n</tr>\n<tr>\n<td>templates</td>\n<td>自己定义的 yaml 文件存于此</td>\n</tr>\n<tr>\n<td>values.yaml</td>\n<td>定义 yaml 文件的全局配置</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Chart.yaml: 包含Chart的元数据和依赖项</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">chart</span> <span class=\"string\">API</span> <span class=\"string\">版本</span> <span class=\"string\">（必需）</span>  <span class=\"comment\">#必须有</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">chart名称</span> <span class=\"string\">（必需）</span>     <span class=\"comment\"># 必须有</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">指定</span> <span class=\"string\">chart</span> <span class=\"string\">版本（必需），打包时的版本号</span> <span class=\"comment\"># 必须有</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kubeVersion:</span> <span class=\"string\">兼容Kubernetes版本的语义化版本（可选）</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">一句话对这个项目的描述（可选）</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">chart类型</span> <span class=\"string\">（可选）</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">关于项目的一组关键字（可选）</span></span><br><span class=\"line\"><span class=\"attr\">home:</span> <span class=\"string\">项目home页面的URL</span> <span class=\"string\">（可选）</span></span><br><span class=\"line\"><span class=\"attr\">sources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">项目源码的URL列表（可选）</span></span><br><span class=\"line\"><span class=\"attr\">dependencies:</span> <span class=\"comment\"># chart 依赖列表 （可选）</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">chart名称</span> <span class=\"string\">(nginx)</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">chart版本</span> <span class=\"string\">(&quot;1.2.3&quot;)</span></span><br><span class=\"line\">    <span class=\"attr\">repository:</span> <span class=\"string\">（可选）仓库URL</span> <span class=\"string\">(&quot;https://example.com/charts&quot;)</span> <span class=\"string\">或别名</span> <span class=\"string\">(&quot;@repo-name&quot;)</span></span><br><span class=\"line\">    <span class=\"attr\">condition:</span> <span class=\"string\">（可选）</span> <span class=\"string\">解析为布尔值的yaml路径，用于启用/禁用chart</span> <span class=\"string\">(e.g.</span> <span class=\"string\">subchart1.enabled</span> <span class=\"string\">)</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"comment\"># （可选）</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">用于一次启用/禁用</span> <span class=\"string\">一组chart的tag</span></span><br><span class=\"line\">    <span class=\"attr\">import-values:</span> <span class=\"comment\"># （可选）</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ImportValue</span> <span class=\"string\">保存源值到导入父键的映射。每项可以是字符串或者一对子/父列表项</span></span><br><span class=\"line\">    <span class=\"attr\">alias:</span> <span class=\"string\">（可选）</span> <span class=\"string\">chart中使用的别名。当你要多次添加相同的chart时会很有用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">maintainers:</span> <span class=\"comment\"># （可选） # 可能用到</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">维护者名字</span> <span class=\"string\">（每个维护者都需要）</span></span><br><span class=\"line\">    <span class=\"attr\">email:</span> <span class=\"string\">维护者邮箱</span> <span class=\"string\">（每个维护者可选）</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">维护者URL</span> <span class=\"string\">（每个维护者可选）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">icon:</span> <span class=\"string\">用做icon的SVG或PNG图片URL</span> <span class=\"string\">（可选）</span></span><br><span class=\"line\"><span class=\"attr\">appVersion:</span> <span class=\"string\">包含的应用版本（可选）。不需要是语义化，建议使用引号</span></span><br><span class=\"line\"><span class=\"attr\">deprecated:</span> <span class=\"string\">不被推荐的chart</span> <span class=\"string\">（可选，布尔值）</span></span><br><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">  <span class=\"attr\">example:</span> <span class=\"string\">按名称输入的批注列表</span> <span class=\"string\">（可选）.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">mychart</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">A</span> <span class=\"string\">Helm</span> <span class=\"string\">chart</span> <span class=\"string\">for</span> <span class=\"string\">Kubernetes</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">0.1</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>values.yaml: 包含应用程序的默认配置值，如下示例：</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">tag:</span> <span class=\"string\">&#x27;1.19.8&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>templates: 模板文件，各种k8s资源yaml，在模板文件中可以通过 .Values对象访问到 values.yaml里的配置<br>\n示例：我们可以依据需要创建各种k8s资源的yaml文件，这里为了演示方便，删除templates下全部文件，然后创建deployment.yaml</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-helm-&#123;&#123;</span> <span class=\"string\">.Values.image.repository</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-helm</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-helm</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-helm</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> &#123;&#123; <span class=\"string\">.Values.image.repository</span> &#125;&#125;<span class=\"string\">:&#123;&#123;</span> <span class=\"string\">.Values.image.tag</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装自定义Chart</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm install mychart mychart</span><br><span class=\"line\">NAME: mychart</span><br><span class=\"line\">LAST DEPLOYED: Mon Jul 10 16:36:13 2023</span><br><span class=\"line\">NAMESPACE: <span class=\"built_in\">test</span></span><br><span class=\"line\">STATUS: deployed</span><br><span class=\"line\">REVISION: 1</span><br><span class=\"line\">TEST SUITE: None</span><br><span class=\"line\"></span><br><span class=\"line\">$ helm list</span><br><span class=\"line\">NAME   \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART        \tAPP VERSION</span><br><span class=\"line\">mychart\t<span class=\"built_in\">test</span>     \t1       \t2023-07-10 16:36:13.707877 +0800 CST\tdeployed\tmychart-0.1.0</span><br><span class=\"line\"></span><br><span class=\"line\">$ k get deploy</span><br><span class=\"line\">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">nginx-helm-nginx   1/1     1            1           94s</span><br><span class=\"line\"></span><br><span class=\"line\">$ k describe deploy nginx-helm-nginx | grep Image</span><br><span class=\"line\">    Image:        nginx:1.19.8</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>升级Chart<br>\n这里修改 values.yaml 中镜像的版本</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">tag:</span> <span class=\"string\">&#x27;1.20.2&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ upgrade mychart mychart</span><br><span class=\"line\">Release <span class=\"string\">&quot;mychart&quot;</span> has been upgraded. Happy Helming!</span><br><span class=\"line\">NAME: mychart</span><br><span class=\"line\">LAST DEPLOYED: Mon Jul 10 16:46:03 2023</span><br><span class=\"line\">NAMESPACE: <span class=\"built_in\">test</span></span><br><span class=\"line\">STATUS: deployed</span><br><span class=\"line\">REVISION: 2</span><br><span class=\"line\">TEST SUITE: None</span><br><span class=\"line\"></span><br><span class=\"line\">$ k describe deploy nginx-helm-nginx | grep Image</span><br><span class=\"line\">    Image:        nginx:1.20.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"发布Chart\">发布Chart</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>需要一个Chart仓库，可以使用harbor构建私有仓库，我这里使用aws，所以就用S3作为Chart仓库。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://aws.amazon.com/cn/blogs/china/build-helm-chart-warehouse-based-on-aws-ecr-or-s3/\">基于 AWS ECR 或 S3 搭建 Helm Chart 仓库</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装helm-S3插件</span></span><br><span class=\"line\">$ helm plugin install https://github.com/hypnoglow/helm-s3.git</span><br><span class=\"line\">Downloading and installing helm-s3 v0.14.0 ...</span><br><span class=\"line\">Checksum is valid.</span><br><span class=\"line\">Installed plugin: s3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定操作s3的profile，因为helm不支持指定profile，所以这里可以使用环境变量的方式</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> AWS_PROFILE=eks-us-west-2</span><br><span class=\"line\"><span class=\"comment\"># 初始化 S3 目录（假设名为 lexing-helm-charts 的S3存储桶已经存在）</span></span><br><span class=\"line\">$ helm s3 init s3://lexing-helm-charts/charts/</span><br><span class=\"line\">Initialized empty repository at s3://lexing-helm-charts/charts/</span><br><span class=\"line\"><span class=\"comment\"># 添加仓库到本地</span></span><br><span class=\"line\">$ helm repo add lexing-helm-charts s3://lexing-helm-charts/charts/</span><br><span class=\"line\"><span class=\"comment\"># 查看lexing-helm-charts repo是否已经添加到本地</span></span><br><span class=\"line\">$ helm repo list</span><br><span class=\"line\">NAME              \tURL</span><br><span class=\"line\">aws-efs-csi-driver\thttps://kubernetes-sigs.github.io/aws-efs-csi-driver/</span><br><span class=\"line\">eks               \thttps://aws.github.io/eks-charts</span><br><span class=\"line\">aliyun            \thttps://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class=\"line\">lexing-helm-charts\ts3://lexing-helm-charts/charts/</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>打包Chart</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm package mychart</span><br><span class=\"line\">Successfully packaged chart and saved it to: /Users/hanqf/Desktop/k8sDir/helm-chart/mychart-0.1.0.tgz</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>chart 上传到 S3</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定操作s3的profile，因为helm不支持指定profile，所以这里可以使用环境变量的方式</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> AWS_PROFILE=eks-us-west-2</span><br><span class=\"line\"><span class=\"comment\"># 推送my-nginx helm chart 到 S3</span></span><br><span class=\"line\">$ helm s3 push mychart-0.1.0.tgz lexing-helm-charts --force</span><br><span class=\"line\">Successfully uploaded the chart to the repository.</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>搜索chart并安装</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 搜索</span></span><br><span class=\"line\">$ helm search repo mychart</span><br><span class=\"line\">NAME                      \tCHART VERSION\tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">lexing-helm-charts/mychart\t0.1.0        \t           \tA Helm chart <span class=\"keyword\">for</span> Kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从Helm s3 repo 安装my-nginx chart到EKS/ Kubernetes集群</span></span><br><span class=\"line\">$ helm install mychart lexing-helm-charts/mychart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 升级安装</span></span><br><span class=\"line\">$ helm upgrade mychart lexing-helm-charts/mychart --<span class=\"built_in\">set</span> image.tag=1.20.2</span><br></pre></td></tr></table></figure>\n<h2 id=\"Helm的执行安装顺序\">Helm的执行安装顺序</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Namespace</span><br><span class=\"line\">NetworkPolicy</span><br><span class=\"line\">ResourceQuota</span><br><span class=\"line\">LimitRange</span><br><span class=\"line\">PodSecurityPolicy</span><br><span class=\"line\">PodDisruptionBudget</span><br><span class=\"line\">ServiceAccount</span><br><span class=\"line\">Secret</span><br><span class=\"line\">SecretList</span><br><span class=\"line\">ConfigMap</span><br><span class=\"line\">StorageClass</span><br><span class=\"line\">PersistentVolume</span><br><span class=\"line\">PersistentVolumeClaim</span><br><span class=\"line\">CustomResourceDefinition</span><br><span class=\"line\">ClusterRole</span><br><span class=\"line\">ClusterRoleList</span><br><span class=\"line\">ClusterRoleBinding</span><br><span class=\"line\">ClusterRoleBindingList</span><br><span class=\"line\">Role</span><br><span class=\"line\">RoleList</span><br><span class=\"line\">RoleBinding</span><br><span class=\"line\">RoleBindingList</span><br><span class=\"line\">Service</span><br><span class=\"line\">DaemonSet</span><br><span class=\"line\">Pod</span><br><span class=\"line\">ReplicationController</span><br><span class=\"line\">ReplicaSet</span><br><span class=\"line\">Deployment</span><br><span class=\"line\">HorizontalPodAutoscaler</span><br><span class=\"line\">StatefulSet</span><br><span class=\"line\">Job</span><br><span class=\"line\">CronJob</span><br><span class=\"line\">Ingress</span><br><span class=\"line\">APIService</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍为Helm的使用方法 参考资料： Amazon EKS用户指南 Kubernetes 文档 Helm 官网文档 Helm 是 Kubernetes 的包管理器，类似于 Linux 下的包管理工具如 yum、apt 等。可以方便的将之前打包好的 yaml 文件部署到 Kunernetes 上。 为什么要引入 Helm 在以往的应用部署过程当中，我们需要先编写一个 yaml 文件，然后该文件中包含 deployment、Service、Ingress 等等。 如果说需要部署的是单一、少数服务的应用，那么完全可以使用 yaml 文件的方式，这样会很简单。但是在实际的项目当中，微服务的数量基本不可能是一个，可能是几十个，如果说再用 yaml 文件的部署方式，那就意味着需要编写几十个 yaml 文件，这就会导致 数量多、维护难 等诸多问题。 针对上述问题，Helm 的引入使用则可以将所有的 yaml 文件进行一个整体的管理，而且它能够实现 yaml 文件的高效复用。 Helm 具备如下的能力： 简化部署 ：Helm允许使用单个命令轻松部署和管理应用程序，从而简化了整个部署过程； 高度可配置：Helm Charts提供了高度可配置的选项，可以轻松自定义和修改应用程序的部署配置； 版本控制 ：Helm允许管理应用程序的多个版本，从而轻松实现版本控制和回滚； 模板化：Helm Charts使用YAML模板来定义Kubernetes对象的配置，从而简化了配置过程，并提高了可重复性和可扩展性； 应用程序库：Helm具有应用程序库的概念，可以轻松地共享和重用Helm Charts，从而简化了多个应用程序的部署和管理； 插件系统：Helm拥有一个强大的插件系统，允许您扩展和定制Helm的功能，以满足特定的需求和要求。 核心概念 概念 描述 Chart 一个Helm包，其中包含了运行一个应用所需要的镜像、依赖和资源定义等，还可能包含Kubernetes集群中的服务定义，类似Homebrew中的formula、APT的dpkg或者Yum的rpm文件 Repository 存储Helm Charts的地方 Release Chart在k8s上运行的Chart的一个实例，例如，如果一个MySQL Chart想在服务器上运行两个数据库，可以将这个Chart安装两次，并在每次安装中生成自己的Release以及Release名称。 Value Helm Chart的参数，用于配置Kubernetes对象 Template 使用Go模板语言生成Kubernetes对象的定义文件 Namespace Kubernetes中用于隔离资源的逻辑分区 Helm的基本使用 当您已经安装好了Helm之后，您可以添加一个chart 仓库。从 Artifact Hub 中查找有效的Helm chart仓库。 另外常用的仓库有阿里云、微软 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142# 添加仓库# 语法 ：helm repo add 仓库名称 仓库地址# 添加 eks-charts 存储库$ helm repo add eks https://aws.github.io/eks-charts# 更新指定仓库索引，以确保您拥有最新的图表$ helm repo update eks# 更新全部仓库索引$ helm repo update# 查看已经添加的仓库$ helm repo listNAME URLeks https://aws.github.io/eks-charts# 搜索，默认展示最新的版本$ helm search repo load-balancerNAME CHART VERSION APP VERSION DESCRIPTIONeks/aws-load-balancer-controller 1.5.4 v2.5.3 AWS Load Balancer Controller Helm chart for Kub...# 搜索全部版本$ helm search repo load-balancer -lNAME CHART VERSION APP VERSION DESCRIPTIONeks/aws-load-balancer-controller 1.5.4 v2.5.3 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.3 v2.5.2 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.2 v2.5.1 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.1 v2.5.1 AWS Load Balancer Controller Helm chart for Kub...# 在全部版本中搜索大于等于指定版本$ helm search repo load-balancer --version ^1.5.1 -lNAME CHART VERSION APP VERSION DESCRIPTIONeks/aws-load-balancer-controller 1.5.4 v2.5.3 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.3 v2.5.2 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.2 v2.5.1 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.1 v2.5.1 AWS Load Balancer Controller Helm chart for Kub...# 安装 AWS Load Balancer Controller 的最新版本，--set指定Values$ helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\ -n kube-system \\ --set clusterName=eks-lexing \\ --set serviceAccount.create=false \\ --set serviceAccount.name=aws-load-balancer-controller# 安装 AWS Load Balancer Controller 的指定版本，--version 1.5.4$ helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\ -n kube-system \\ --set clusterName=eks-lexing \\ --set serviceAccount.create=false \\ --set serviceAccount.name=aws-load-balancer-controller --version 1.5.4# 查看全部命名空间下已经安装的包$ helm list --all-namespacesNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSIONaws-load-balancer-controller kube-system 2 2023-07-04 17:31:37.839466 +0800 CST deployed aws-load-balancer-controller-1.5.4 v2.5.3# 查看指定命名空间下已经安装的包$ helm list -n kube-system# 关键字过滤$ helm list -n kube-system --filter load-balancer# 获取Values，用户指定的，即安装或升级时通过--set等方式设置的$ helm get values aws-load-balancer-controller -n kube-systemUSER-SUPPLIED VALUES:clusterName: eks-lexingserviceAccount: create: false name: aws-load-balancer-controller# 获取Values，全部Values，都可以进行替换$ helm get values aws-load-balancer-controller -n kube-system --all# 升级安装，升级时只需要指定要改变的部分$ helm upgrade aws-load-balancer-controller eks/aws-load-balancer-controller \\ -n kube-system \\ --set clusterName=eks-lexing \\ --set serviceAccount.create=false \\ --set serviceAccount.name=aws-load-balancer-controller# 查看历史安装记录$ helm history -n kube-system aws-load-balancer-controllerREVISION UPDATED STATUS CHART APP VERSION DESCRIPTION1 Tue Jul 4 17:26:05 2023 superseded aws-load-balancer-controller-1.5.4 v2.5.3 Install complete2 Tue Jul 4 17:31:37 2023 deployed aws-load-balancer-controller-1.5.4 v2.5.3 Upgrade complete# 回滚到指定修订号，修订号通过 helm history 查看$ helm rollback -n kube-system aws-load-balancer-controller 1# 显示已命名发布的状态$ helm status -n kube-system aws-load-balancer-controllerNAME: aws-load-balancer-controllerLAST DEPLOYED: Tue Jul 4 17:31:37 2023NAMESPACE: kube-systemSTATUS: deployedREVISION: 2TEST SUITE: NoneNOTES:AWS Load Balancer controller installed!# 卸载$ helm uninstall aws-load-balancer-controller -n kube-system# 删除仓库$ helm repo remove eks# 查看helm客户端环境信息$ helm envHELM_BIN=&quot;helm&quot;HELM_BURST_LIMIT=&quot;100&quot;HELM_CACHE_HOME=&quot;/Users/hanqf/Library/Caches/helm&quot;HELM_CONFIG_HOME=&quot;/Users/hanqf/Library/Preferences/helm&quot;HELM_DATA_HOME=&quot;/Users/hanqf/Library/helm&quot;HELM_DEBUG=&quot;false&quot;HELM_KUBEAPISERVER=&quot;&quot;HELM_KUBEASGROUPS=&quot;&quot;HELM_KUBEASUSER=&quot;&quot;HELM_KUBECAFILE=&quot;&quot;HELM_KUBECONTEXT=&quot;&quot;HELM_KUBEINSECURE_SKIP_TLS_VERIFY=&quot;false&quot;HELM_KUBETLS_SERVER_NAME=&quot;&quot;HELM_KUBETOKEN=&quot;&quot;HELM_MAX_HISTORY=&quot;10&quot;HELM_NAMESPACE=&quot;test&quot;HELM_PLUGINS=&quot;/Users/hanqf/Library/helm/plugins&quot;HELM_REGISTRY_CONFIG=&quot;/Users/hanqf/Library/Preferences/helm/registry/config.json&quot;HELM_REPOSITORY_CACHE=&quot;/Users/hanqf/Library/Caches/helm/repository&quot;HELM_REPOSITORY_CONFIG=&quot;/Users/hanqf/Library/Preferences/helm/repositories.yaml&quot;# 展示指定chart的全部信息 （values.yaml, Chart.yaml, README）$ helm show all eks/aws-load-balancer-controller# 只展示chart.yaml$ helm show chart eks/aws-load-balancer-controller# 只展示values.yaml$ helm show values eks/aws-load-balancer-controller#下载指定的包，这里会下载 aws-load-balancer-controller-1.5.4.tgz$ helm pull eks/aws-load-balancer-controller# 下载并解压到指定目录$ helm pull eks/aws-load-balancer-controller --untar --untardir ./ 自定义 Chart 部署应用 12345678910111213141516171819202122# 创建一个chart$ helm create mychartCreating mychart$ lsmychart$ exa -T mychartmychart├── Chart.yaml├── charts├── templates│ ├── _helpers.tpl│ ├── deployment.yaml│ ├── hpa.yaml│ ├── ingress.yaml│ ├── NOTES.txt│ ├── service.yaml│ ├── serviceaccount.yaml│ └── tests│ └── test-connection.yaml└── values.yaml 文件 含义 charts 一个普通的空文件，一般也不会写入内容 Chart.yaml 当前 chart 属性的配置信息 templates 自己定义的 yaml 文件存于此 values.yaml 定义 yaml 文件的全局配置 Chart.yaml: 包含Chart的元数据和依赖项 12345678910111213141516171819202122232425262728293031323334apiVersion: chart API 版本 （必需） #必须有name: chart名称 （必需） # 必须有version: 指定 chart 版本（必需），打包时的版本号 # 必须有kubeVersion: 兼容Kubernetes版本的语义化版本（可选）description: 一句话对这个项目的描述（可选）type: chart类型 （可选）keywords: - 关于项目的一组关键字（可选）home: 项目home页面的URL （可选）sources: - 项目源码的URL列表（可选）dependencies: # chart 依赖列表 （可选） - name: chart名称 (nginx) version: chart版本 (&quot;1.2.3&quot;) repository: （可选）仓库URL (&quot;https://example.com/charts&quot;) 或别名 (&quot;@repo-name&quot;) condition: （可选） 解析为布尔值的yaml路径，用于启用/禁用chart (e.g. subchart1.enabled ) tags: # （可选） - 用于一次启用/禁用 一组chart的tag import-values: # （可选） - ImportValue 保存源值到导入父键的映射。每项可以是字符串或者一对子/父列表项 alias: （可选） chart中使用的别名。当你要多次添加相同的chart时会很有用maintainers: # （可选） # 可能用到 - name: 维护者名字 （每个维护者都需要） email: 维护者邮箱 （每个维护者可选） url: 维护者URL （每个维护者可选）icon: 用做icon的SVG或PNG图片URL （可选）appVersion: 包含的应用版本（可选）。不需要是语义化，建议使用引号deprecated: 不被推荐的chart （可选，布尔值）annotations: example: 按名称输入的批注列表 （可选）. 示例： 1234apiVersion: v2name: mychartdescription: A Helm chart for Kubernetesversion: 0.1.0 values.yaml: 包含应用程序的默认配置值，如下示例： 123image: repository: nginx tag: &#x27;1.19.8&#x27; templates: 模板文件，各种k8s资源yaml，在模板文件中可以通过 .Values对象访问到 values.yaml里的配置 示例：我们可以依据需要创建各种k8s资源的yaml文件，这里为了演示方便，删除templates下全部文件，然后创建deployment.yaml 12345678910111213141516171819202122# deployment.yamlapiVersion: apps/v1kind: Deploymentmetadata: name: nginx-helm-&#123;&#123; .Values.image.repository &#125;&#125;spec: replicas: 1 selector: matchLabels: app: nginx-helm template: metadata: labels: app: nginx-helm spec: containers: - name: nginx-helm image: &#123;&#123; .Values.image.repository &#125;&#125;:&#123;&#123; .Values.image.tag &#125;&#125; ports: - containerPort: 80 protocol: TCP 安装自定义Chart 123456789101112131415161718$ helm install mychart mychartNAME: mychartLAST DEPLOYED: Mon Jul 10 16:36:13 2023NAMESPACE: testSTATUS: deployedREVISION: 1TEST SUITE: None$ helm listNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSIONmychart test 1 2023-07-10 16:36:13.707877 +0800 CST deployed mychart-0.1.0$ k get deployNAME READY UP-TO-DATE AVAILABLE AGEnginx-helm-nginx 1/1 1 1 94s$ k describe deploy nginx-helm-nginx | grep Image Image: nginx:1.19.8 升级Chart 这里修改 values.yaml 中镜像的版本 123image: repository: nginx tag: &#x27;1.20.2&#x27; 1234567891011$ upgrade mychart mychartRelease &quot;mychart&quot; has been upgraded. Happy Helming!NAME: mychartLAST DEPLOYED: Mon Jul 10 16:46:03 2023NAMESPACE: testSTATUS: deployedREVISION: 2TEST SUITE: None$ k describe deploy nginx-helm-nginx | grep Image Image: nginx:1.20.2 发布Chart 需要一个Chart仓库，可以使用harbor构建私有仓库，我这里使用aws，所以就用S3作为Chart仓库。 基于 AWS ECR 或 S3 搭建 Helm Chart 仓库 1234567891011121314151617181920# 安装helm-S3插件$ helm plugin install https://github.com/hypnoglow/helm-s3.gitDownloading and installing helm-s3 v0.14.0 ...Checksum is valid.Installed plugin: s3# 指定操作s3的profile，因为helm不支持指定profile，所以这里可以使用环境变量的方式$ export AWS_PROFILE=eks-us-west-2# 初始化 S3 目录（假设名为 lexing-helm-charts 的S3存储桶已经存在）$ helm s3 init s3://lexing-helm-charts/charts/Initialized empty repository at s3://lexing-helm-charts/charts/# 添加仓库到本地$ helm repo add lexing-helm-charts s3://lexing-helm-charts/charts/# 查看lexing-helm-charts repo是否已经添加到本地$ helm repo listNAME URLaws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver/eks https://aws.github.io/eks-chartsaliyun https://kubernetes.oss-cn-hangzhou.aliyuncs.com/chartslexing-helm-charts s3://lexing-helm-charts/charts/ 打包Chart 12$ helm package mychartSuccessfully packaged chart and saved it to: /Users/hanqf/Desktop/k8sDir/helm-chart/mychart-0.1.0.tgz chart 上传到 S3 12345# 指定操作s3的profile，因为helm不支持指定profile，所以这里可以使用环境变量的方式$ export AWS_PROFILE=eks-us-west-2# 推送my-nginx helm chart 到 S3$ helm s3 push mychart-0.1.0.tgz lexing-helm-charts --forceSuccessfully uploaded the chart to the repository. 搜索chart并安装 12345678910# 搜索$ helm search repo mychartNAME CHART VERSION APP VERSION DESCRIPTIONlexing-helm-charts/mychart 0.1.0 A Helm chart for Kubernetes# 从Helm s3 repo 安装my-nginx chart到EKS/ Kubernetes集群$ helm install mychart lexing-helm-charts/mychart# 升级安装$ helm upgrade mychart lexing-helm-charts/mychart --set image.tag=1.20.2 Helm的执行安装顺序 12345678910111213141516171819202122232425262728293031323334NamespaceNetworkPolicyResourceQuotaLimitRangePodSecurityPolicyPodDisruptionBudgetServiceAccountSecretSecretListConfigMapStorageClassPersistentVolumePersistentVolumeClaimCustomResourceDefinitionClusterRoleClusterRoleListClusterRoleBindingClusterRoleBindingListRoleRoleListRoleBindingRoleBindingListServiceDaemonSetPodReplicationControllerReplicaSetDeploymentHorizontalPodAutoscalerStatefulSetJobCronJobIngressAPIService","summary":"摘要 本文介绍为Helm的使用方法 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-10T12:30:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks13-kubectl/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks13-kubectl/","title":"AWS-EKS-13--Kubectl","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍kubectl命令的使用方法</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"kubectl命令\">kubectl命令</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Kubernetes 提供 kubectl 是使用 Kubernetes API 与 Kubernetes 集群的控制面进行通信的命令行工具。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://kubernetes.io/zh-cn/docs/reference/kubectl/\">官网文档</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"built_in\">help</span></span><br><span class=\"line\">kubectl controls the Kubernetes cluster manager.</span><br><span class=\"line\"></span><br><span class=\"line\"> Find more information at: https://kubernetes.io/docs/reference/kubectl/</span><br><span class=\"line\"></span><br><span class=\"line\">Basic Commands (Beginner):</span><br><span class=\"line\">  create          Create a resource from a file or from stdin</span><br><span class=\"line\">  expose          Take a replication controller, service, deployment or pod and</span><br><span class=\"line\">expose it as a new Kubernetes service</span><br><span class=\"line\">  run             在集群上运行特定镜像</span><br><span class=\"line\">  <span class=\"built_in\">set</span>             为对象设置指定特性</span><br><span class=\"line\"></span><br><span class=\"line\">Basic Commands (Intermediate):</span><br><span class=\"line\">  explain         Get documentation <span class=\"keyword\">for</span> a resource</span><br><span class=\"line\">  get             显示一个或多个资源</span><br><span class=\"line\">  edit            编辑服务器上的资源</span><br><span class=\"line\">  delete          Delete resources by file names, stdin, resources and names, or</span><br><span class=\"line\">by resources and label selector</span><br><span class=\"line\"></span><br><span class=\"line\">Deploy Commands:</span><br><span class=\"line\">  rollout         Manage the rollout of a resource</span><br><span class=\"line\">  scale           Set a new size <span class=\"keyword\">for</span> a deployment, replica <span class=\"built_in\">set</span>, or replication</span><br><span class=\"line\">controller</span><br><span class=\"line\">  autoscale       Auto-scale a deployment, replica <span class=\"built_in\">set</span>, stateful <span class=\"built_in\">set</span>, or</span><br><span class=\"line\">replication controller</span><br><span class=\"line\"></span><br><span class=\"line\">Cluster Management Commands:</span><br><span class=\"line\">  certificate     修改证书资源。</span><br><span class=\"line\">  cluster-info    Display cluster information</span><br><span class=\"line\">  top             Display resource (CPU/memory) usage</span><br><span class=\"line\">  cordon          标记节点为不可调度</span><br><span class=\"line\">  uncordon        标记节点为可调度</span><br><span class=\"line\">  drain           清空节点以准备维护</span><br><span class=\"line\">  taint           更新一个或者多个节点上的污点</span><br><span class=\"line\"></span><br><span class=\"line\">Troubleshooting and Debugging Commands:</span><br><span class=\"line\">  describe        显示特定资源或资源组的详细信息</span><br><span class=\"line\">  logs            打印 Pod 中容器的日志</span><br><span class=\"line\">  attach          挂接到一个运行中的容器</span><br><span class=\"line\">  <span class=\"built_in\">exec</span>            在某个容器中执行一个命令</span><br><span class=\"line\">  port-forward    将一个或多个本地端口转发到某个 Pod</span><br><span class=\"line\">  proxy           运行一个指向 Kubernetes API 服务器的代理</span><br><span class=\"line\">  <span class=\"built_in\">cp</span>              Copy files and directories to and from containers</span><br><span class=\"line\">  auth            Inspect authorization</span><br><span class=\"line\">  debug           Create debugging sessions <span class=\"keyword\">for</span> troubleshooting workloads and nodes</span><br><span class=\"line\">  events          List events</span><br><span class=\"line\"></span><br><span class=\"line\">Advanced Commands:</span><br><span class=\"line\">  diff            Diff the live version against a would-be applied version</span><br><span class=\"line\">  apply           Apply a configuration to a resource by file name or stdin</span><br><span class=\"line\">  patch           Update fields of a resource</span><br><span class=\"line\">  replace         Replace a resource by file name or stdin</span><br><span class=\"line\">  <span class=\"built_in\">wait</span>            Experimental: Wait <span class=\"keyword\">for</span> a specific condition on one or many</span><br><span class=\"line\">resources</span><br><span class=\"line\">  kustomize       Build a kustomization target from a directory or URL.</span><br><span class=\"line\"></span><br><span class=\"line\">Settings Commands:</span><br><span class=\"line\">  label           更新某资源上的标签</span><br><span class=\"line\">  annotate        更新一个资源的注解</span><br><span class=\"line\">  completion      Output shell completion code <span class=\"keyword\">for</span> the specified shell (bash, zsh, fish, or powershell)</span><br><span class=\"line\"></span><br><span class=\"line\">Other Commands:</span><br><span class=\"line\">  alpha           Commands <span class=\"keyword\">for</span> features <span class=\"keyword\">in</span> alpha</span><br><span class=\"line\">  api-resources   Print the supported API resources on the server</span><br><span class=\"line\">  api-versions    Print the supported API versions on the server, <span class=\"keyword\">in</span> the form of <span class=\"string\">&quot;group/version&quot;</span></span><br><span class=\"line\">  config          修改 kubeconfig 文件</span><br><span class=\"line\">  plugin          Provides utilities <span class=\"keyword\">for</span> interacting with plugins</span><br><span class=\"line\">  version         输出客户端和服务端的版本信息</span><br></pre></td></tr></table></figure>\n<h2 id=\"context-集群-相关\">context[集群]相关</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看client和server版本，注意此时必须连上server端</span></span><br><span class=\"line\">k version</span><br><span class=\"line\">k version --output=yaml/json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只查看client版本</span></span><br><span class=\"line\">k version --client --short</span><br><span class=\"line\">k version --client --output=yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有资源信息，会显示name，shortname，版本，KIND等等</span></span><br><span class=\"line\">k api-resources</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看全部context配置，会显示所有context，当前context前面会用星号标识，同时显示其默认的namespace</span></span><br><span class=\"line\">k config get-contexts</span><br><span class=\"line\"><span class=\"comment\"># 查看当前context</span></span><br><span class=\"line\">k config current-context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定的context，后面跟上面命令查询出来的context的名称，同时修改k8s的配置文件，默认在~/.kube/config 文件</span></span><br><span class=\"line\">k config use-context eks-lexing</span><br><span class=\"line\"><span class=\"comment\"># 作用同上，都是切换上下文</span></span><br><span class=\"line\">k config <span class=\"built_in\">set</span> current-context ekstest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改当前context的名称</span></span><br><span class=\"line\">k config rename-context $(k config current-context) ty-hk-eks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看~/.kube/config 文件</span></span><br><span class=\"line\">k config view</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有插件文件路径</span></span><br><span class=\"line\">k plugin list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看集群信息</span></span><br><span class=\"line\">k cluster-info</span><br></pre></td></tr></table></figure>\n<h2 id=\"节点相关\">节点相关</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前集群下的node</span></span><br><span class=\"line\">k get nodes</span><br><span class=\"line\"><span class=\"comment\"># 显示更多信息，比如ip地址</span></span><br><span class=\"line\">k get nodes -o wide</span><br></pre></td></tr></table></figure>\n<h2 id=\"namespace–ns相关\">namespace–ns相关</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取当前集群下所有namespace</span></span><br><span class=\"line\">k get namespaces</span><br><span class=\"line\"><span class=\"comment\"># namespace可以简写为ns</span></span><br><span class=\"line\">k get ns</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前默认的namespace</span></span><br><span class=\"line\">k config get-contexts $(k config current-context)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置当前集群缺省的namespace，同时修改k8s的配置文件，默认在~/.kube/config 文件</span></span><br><span class=\"line\">k config set-context --current --namespace=default</span><br><span class=\"line\">k config set-context $(k config current-context) --namespace default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个新的namespace</span></span><br><span class=\"line\">k create namespace hanqf</span><br><span class=\"line\">k create ns hanqf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不创建，只生成yaml文件</span></span><br><span class=\"line\">k create ns hanqf --dry-run=client -o yaml &gt; namespace_hanqf.yaml</span><br><span class=\"line\"><span class=\"comment\"># 基于yaml创建namespace</span></span><br><span class=\"line\">k apply -f namespace_hanqf.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除namespace，删除的同时会删除namespace下的所有资源</span></span><br><span class=\"line\">k delete namespace hanqf</span><br></pre></td></tr></table></figure>\n<h2 id=\"pod–po相关\">pod–po相关</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取当前namespace下的pod</span></span><br><span class=\"line\">k get pods</span><br><span class=\"line\"><span class=\"comment\"># 显示更多信息，比如ip地址</span></span><br><span class=\"line\">k get pods -o wide</span><br><span class=\"line\"><span class=\"comment\"># 列出标签</span></span><br><span class=\"line\">k get pods --show-labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有namespace下的pod</span></span><br><span class=\"line\">k get pods -A</span><br><span class=\"line\"><span class=\"comment\"># 显示指定namespace下的pod</span></span><br><span class=\"line\">k get pods -n jx-git-operator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建pod</span></span><br><span class=\"line\">k run nginx --image=nginx:1.9 --port=80</span><br><span class=\"line\"><span class=\"comment\"># 生成yaml</span></span><br><span class=\"line\">k run nginx --image=nginx:1.9 --port=80 --dry-run=client -o yaml &gt; nginx.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod创建后的配置信息，可以使用k apply -f nginx2.yaml重新创建pod</span></span><br><span class=\"line\">k get pods nginx --output=yaml &gt; nginx2.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行yaml配置创建</span></span><br><span class=\"line\">k apply -f pod.yaml</span><br></pre></td></tr></table></figure>\n<h2 id=\"controller相关\">controller相关</h2>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/oYVIIm.jpg\" alt=\"\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/MyEcr0.jpg\" alt=\"\" width=\"1200\" height=\"400\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取当前namespace下的deployment</span></span><br><span class=\"line\">k get deployments</span><br><span class=\"line\"><span class=\"comment\"># 查看指定的deployment的配置信息</span></span><br><span class=\"line\">k describe deployments test-nginx</span><br><span class=\"line\"><span class=\"comment\"># 编辑指定的deployment</span></span><br><span class=\"line\">k edit deployments test-nginx</span><br><span class=\"line\"><span class=\"comment\"># 删除指定的deployment</span></span><br><span class=\"line\">k delete deployments test-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下同上</span></span><br><span class=\"line\"><span class=\"comment\"># 获取当前namespace下的statefulset，job,cronjob，daemonset</span></span><br><span class=\"line\">k get statefulsets</span><br><span class=\"line\">k get <span class=\"built_in\">jobs</span></span><br><span class=\"line\">k get cronjobs</span><br><span class=\"line\">k get daemonsets</span><br></pre></td></tr></table></figure>\n<h3 id=\"deployment–deploy\">deployment–deploy</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># deploy.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myngx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">myngx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">     <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">myngx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.7.9</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">myngx</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">8m</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命令行创建deploy</span></span><br><span class=\"line\">k create deployment test-nginx --image=nginx:1.9 --port=80 --replicas=2</span><br><span class=\"line\"><span class=\"comment\"># 创建yaml</span></span><br><span class=\"line\">k create deployment test-nginx --image=nginx:1.9 --port=80 --replicas=2 --dry-run=client -o yaml &gt; deploy_new.yaml</span><br><span class=\"line\"><span class=\"comment\"># 创建delpoyment</span></span><br><span class=\"line\">k apply -f deploy_new.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看deploy对应的rs信息，会显示升级历史</span></span><br><span class=\"line\">k get rs -owide -l app=test-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新启动deploy</span></span><br><span class=\"line\">kubectl rollout restart deployment test-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看全部deployment</span></span><br><span class=\"line\">k get deploy</span><br><span class=\"line\"><span class=\"comment\"># 将指定的deployment输出到yaml</span></span><br><span class=\"line\">k get deploy myngx -o yaml &gt; deploy_nginx.yaml</span><br><span class=\"line\"><span class=\"comment\"># 删除deployment</span></span><br><span class=\"line\">k delete deploy myngx</span><br><span class=\"line\"><span class=\"comment\"># 重新创建deployment</span></span><br><span class=\"line\">k apply -f deploy_nginx.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 扩缩容，pod不支持扩缩容，只有rs,deploy,sts等高级别controller才有扩缩容能力</span></span><br><span class=\"line\">k scale deploy myngx --replicas=4</span><br><span class=\"line\"><span class=\"comment\"># rs,deploy,sts等高级别controller都具有自愈能力，如果其下的pod被删除了，会自动重新创建新的pod</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改deploy</span></span><br><span class=\"line\"><span class=\"comment\"># 方式1：编辑配置，就是vim，保存后立即生效</span></span><br><span class=\"line\">k edit deploy test-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2: 命令行，比如修改过镜像版本</span></span><br><span class=\"line\"><span class=\"comment\"># k set image deployment deploy名称 镜像名称=镜像</span></span><br><span class=\"line\">k <span class=\"built_in\">set</span> image deployment test-nginx nginx=nginx:1.7.9</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看升级是否成功</span></span><br><span class=\"line\">k rollout status -w deployment test-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看deploy对应的rs信息，会显示升级历史</span></span><br><span class=\"line\">k get rs -owide -l app=test-nginx</span><br><span class=\"line\"><span class=\"comment\"># 查看历史版本记录，每行前有个版本号</span></span><br><span class=\"line\">k rollout <span class=\"built_in\">history</span> deploy test-nginx</span><br><span class=\"line\"><span class=\"comment\"># 查看指定历史版本号的详细信息</span></span><br><span class=\"line\">k rollout <span class=\"built_in\">history</span> deploy test-nginx --revision=2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回退到上一个版本</span></span><br><span class=\"line\">k rollout undo deploy test-nginx</span><br><span class=\"line\"><span class=\"comment\"># 回退到指定的版本</span></span><br><span class=\"line\">k rollout undo deploy test-nginx --to-revision=2</span><br></pre></td></tr></table></figure>\n<h3 id=\"daemonset–ds\">daemonset–ds</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>每个node都会创建一个pod，当有新的node加入进来时，pod会自动被daemonset调度到新的node上，同理删除node，该node上的pod也会被移除</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ds1.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ds1</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">fluentd-logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">mynginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">mynginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">tolerations:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">node-role.kubernetes.io/master</span></span><br><span class=\"line\">        <span class=\"attr\">effect:</span> <span class=\"string\">NoSchedule</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mynginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.7.9</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建ds</span></span><br><span class=\"line\">k apply -f ds1.yaml</span><br><span class=\"line\"><span class=\"comment\"># daemonset不支持使用create创建，但其格式与deployment差不多，可以先通过create创建deploy的yaml，然后对其进行修改，</span></span><br><span class=\"line\"><span class=\"comment\"># 如修改 apiVersion 和 kind，同时还要去掉replicas，另外需要加上tolerance的配置，保证其在master节点上也能部署</span></span><br><span class=\"line\">k run nginx --image=nginx:1.9 --dry-run -o yaml &gt; ds_new.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询ds</span></span><br><span class=\"line\">k get ds -n kube-system</span><br><span class=\"line\"><span class=\"comment\"># 删除</span></span><br><span class=\"line\">k delete ds -n kube-system ds1</span><br></pre></td></tr></table></figure>\n<h3 id=\"job\">job</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># job.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Job</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">job-demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">job-demo</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Never</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">counter</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;bin/sh&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i; done&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k apply -f job.yaml</span><br><span class=\"line\">k get <span class=\"built_in\">jobs</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"cronjob–cj\">cronjob–cj</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cronjob.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CronJob</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cronjob-demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span> <span class=\"string\">&quot;*/1 * * * *&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">jobTemplate:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">template:</span></span><br><span class=\"line\">        <span class=\"attr\">spec:</span></span><br><span class=\"line\">          <span class=\"attr\">restartPolicy:</span> <span class=\"string\">OnFailure</span></span><br><span class=\"line\">          <span class=\"attr\">containers:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">hello</span></span><br><span class=\"line\">            <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">            <span class=\"attr\">args:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;bin/sh&quot;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i; done&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k apply -f cronjob.yaml</span><br><span class=\"line\">k get cronjob -o wide</span><br><span class=\"line\">k get job</span><br></pre></td></tr></table></figure>\n<h3 id=\"statefulset–sts\">statefulset–sts</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>sts的特性<br>\n● 稳定的、唯一的网络标识。<br>\n● 稳定的、持久化的存储。<br>\n● 有序的、优雅的部署和扩展。<br>\n● 有序的、优雅的删除和停止。</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sts.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">&quot;nginx&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.9</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k apply -f sts.yaml</span><br><span class=\"line\">k get sts -owide</span><br></pre></td></tr></table></figure>\n<h2 id=\"label标签\">label标签</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>controller和service等都是基于标签选择器关联pod的，所以在指定label时一定要准确唯一</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以为任何资源设置标签</span></span><br><span class=\"line\"><span class=\"comment\"># k label 资源类型 资源名称 key=value</span></span><br><span class=\"line\">k label deploy myngx app=<span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 查看标签</span></span><br><span class=\"line\">k get deploy --show-labels</span><br><span class=\"line\"><span class=\"comment\"># 查看指定的标签值，标签会占用一列进行展示，多个标签使用逗号分隔，如果资源不存在该标签，则为空</span></span><br><span class=\"line\">k get pod -L app,run</span><br><span class=\"line\"><span class=\"comment\"># 只列出给定标签和值的资源</span></span><br><span class=\"line\">k get pod -l app=<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Configmap–cm\">Configmap–cm</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>用来存储配置文件的 kubernetes 资源对象，配置内容都存储在 etcd 中</p>\n</li>\n<li class=\"lvl-2\">\n<p>创建方法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过直接在命令行中指定 configmap 参数创建，即--from-literal</span></span><br><span class=\"line\">$ k create configmap config-map1 --from-literal=db.host=mysql.db --from-literal=db.port=<span class=\"string\">&#x27;3306&#x27;</span></span><br><span class=\"line\">$ k describe cm config-map1</span><br><span class=\"line\">Name:         config-map1</span><br><span class=\"line\">Namespace:    <span class=\"built_in\">test</span></span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">db.host:</span><br><span class=\"line\">----</span><br><span class=\"line\">mysql.db</span><br><span class=\"line\">db.port:</span><br><span class=\"line\">----</span><br><span class=\"line\">3306</span><br><span class=\"line\"></span><br><span class=\"line\">BinaryData</span><br><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">Events:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过指定文件创建，即将一个配置文件创建为一个 ConfigMap --from-file=&lt;文件&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果不指定key，则文件名称作为key</span></span><br><span class=\"line\">$ vi configs/app.properties</span><br><span class=\"line\">db.host mysql.db</span><br><span class=\"line\">db.port 3306</span><br><span class=\"line\"></span><br><span class=\"line\">$ k create configmap config-map2 --from-file=key1=./configs/app.properties</span><br><span class=\"line\">$ k describe cm config-map2</span><br><span class=\"line\">Name:         config-map2</span><br><span class=\"line\">Namespace:    <span class=\"built_in\">test</span></span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">key1:</span><br><span class=\"line\">----</span><br><span class=\"line\">db.host mysql.db</span><br><span class=\"line\">db.port 3306</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BinaryData</span><br><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">Events:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过指定目录创建，即将一个目录下的所有配置文件创建为一个 ConfigMap，--from-file=&lt;目录&gt;</span></span><br><span class=\"line\">$ k create configmap config-map3 --from-file=./configs</span><br><span class=\"line\">$ k describe cm config-map3</span><br><span class=\"line\">Name:         config-map3</span><br><span class=\"line\">Namespace:    <span class=\"built_in\">test</span></span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">app-copy.properties:</span><br><span class=\"line\">----</span><br><span class=\"line\">db.host mysql.db</span><br><span class=\"line\">db.port 3306</span><br><span class=\"line\"></span><br><span class=\"line\">app.properties:</span><br><span class=\"line\">----</span><br><span class=\"line\">db.host mysql.db</span><br><span class=\"line\">db.port 3306</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BinaryData</span><br><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">Events:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 事先写好标准的 configmap 的 yaml 文件，然后 kubectl create -f 创建</span></span><br><span class=\"line\">$ vim config-map4.yaml</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">data:</span><br><span class=\"line\">  db.host: mysql.db</span><br><span class=\"line\">  db.port: <span class=\"string\">&quot;3306&quot;</span> <span class=\"comment\"># 数字一定要用双引号括起来</span></span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: config-map4</span><br><span class=\"line\"></span><br><span class=\"line\">$ k apply -f config-map4.yaml</span><br><span class=\"line\">$ k describe cm config-map4</span><br><span class=\"line\">Name:         config-map4</span><br><span class=\"line\">Namespace:    <span class=\"built_in\">test</span></span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">db.host:</span><br><span class=\"line\">----</span><br><span class=\"line\">mysql.db</span><br><span class=\"line\">db.port:</span><br><span class=\"line\">----</span><br><span class=\"line\">3306</span><br><span class=\"line\"></span><br><span class=\"line\">BinaryData</span><br><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用方法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 通过环境变量使用</span></span><br><span class=\"line\"><span class=\"comment\"># 1.使用 valueFrom、configMapKeyRef、name、key 指定要用的 key:</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: app</span><br><span class=\"line\">    image: centos</span><br><span class=\"line\">    <span class=\"built_in\">env</span>:</span><br><span class=\"line\">    - name: DB_HOST  <span class=\"comment\"># 环境变量名称</span></span><br><span class=\"line\">      valueFrom:</span><br><span class=\"line\">        configMapKeyRef:</span><br><span class=\"line\">          name: config-map4 <span class=\"comment\"># cm名称</span></span><br><span class=\"line\">          key: db.host      <span class=\"comment\"># cm中的key</span></span><br><span class=\"line\"><span class=\"comment\"># 2.通过 envFrom、configMapRef、name 使得 configmap 中的所有 key/value 对都自动变成环境变量</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: app</span><br><span class=\"line\">    image: centos</span><br><span class=\"line\">    envFrom:</span><br><span class=\"line\">      configMapRef:</span><br><span class=\"line\">        name: config-map4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 在启动命令中引用</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: app</span><br><span class=\"line\">    image: centos</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: [<span class=\"string\">&quot;/bin/sh&quot;</span>]</span><br><span class=\"line\">    args: [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;while true; do echo <span class=\"subst\">$(DB_HOST)</span> <span class=\"subst\">$(DB_PORT)</span> &gt;&gt; /out.txt; sleep 5; done&quot;</span>]</span><br><span class=\"line\">    <span class=\"built_in\">env</span>:</span><br><span class=\"line\">    - name: DB_HOST</span><br><span class=\"line\">      valueFrom:</span><br><span class=\"line\">        configMapKeyRef:</span><br><span class=\"line\">          name: config-map4</span><br><span class=\"line\">          key: db.host</span><br><span class=\"line\">    - name: DB_PORT</span><br><span class=\"line\">      valueFrom:</span><br><span class=\"line\">        configMapKeyRef:</span><br><span class=\"line\">          name: config-map4</span><br><span class=\"line\">          key: db.port</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 作为 volume 挂载使用</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: app</span><br><span class=\"line\">    image: centos</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: [<span class=\"string\">&quot;/bin/sh&quot;</span>]</span><br><span class=\"line\">    args: [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;while true; do cat /tmp/config.properties &gt;&gt; /out.txt; sleep 5; done&quot;</span>]</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: config-map3</span><br><span class=\"line\">      mountPath: /tmp/config.properties <span class=\"comment\"># 挂载到的文件</span></span><br><span class=\"line\">      subPath: app.properties  <span class=\"comment\"># 被挂载的文件，即cm中的多个文件中的一个</span></span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">  - name: config-map3</span><br><span class=\"line\">    configMap:</span><br><span class=\"line\">      name: config-map3</span><br></pre></td></tr></table></figure>\n<h2 id=\"Secrets\">Secrets</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Secret 解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者 Pod Spec 中。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Secret 可以以 Volume 或者环境变量的方式使用。</p>\n</li>\n</ul>\n<h3 id=\"Secrets-类型\">Secrets 类型</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建 Secret 时，你可以使用 Secret 资源的 type 字段，或者与其等价的 kubectl 命令行参数（如果有的话）为其设置类型。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Kubernetes 提供若干种内置的类型，用于一些常见的使用场景。 针对这些类型，Kubernetes 所执行的合法性检查操作以及对其所实施的限制各不相同。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>内置类型</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Opaque</code></td>\n<td>用户定义的任意数据</td>\n</tr>\n<tr>\n<td><code>kubernetes.io/service-account-token</code></td>\n<td>服务账号令牌</td>\n</tr>\n<tr>\n<td><code>kubernetes.io/dockercfg</code></td>\n<td>~/.dockercfg 文件的序列化形式</td>\n</tr>\n<tr>\n<td><code>kubernetes.io/dockerconfigjson</code></td>\n<td>~/.docker/config.json 文件的序列化形式</td>\n</tr>\n<tr>\n<td><code>kubernetes.io/basic-auth</code></td>\n<td>用于基本身份认证的凭据</td>\n</tr>\n<tr>\n<td><code>kubernetes.io/ssh-auth</code></td>\n<td>用于 SSH 身份认证的凭据</td>\n</tr>\n<tr>\n<td><code>kubernetes.io/tls</code></td>\n<td>用于 TLS 客户端或者服务器端的数据</td>\n</tr>\n<tr>\n<td><code>bootstrap.kubernetes.io/token</code></td>\n<td>启动引导令牌数据</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通过为 Secret 对象的 type 字段设置一个非空的字符串值，你也可以定义并使用自己 Secret 类型（如果 type 值为空字符串，则被视为 Opaque 类型）。</p>\n</li>\n<li class=\"lvl-2\">\n<p>关于Secret类型的进一步说请查看<a href=\"https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/\">https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/</a>，以下示例仅对常用的<code>Opaque</code>进行说明。</p>\n</li>\n</ul>\n<h3 id=\"创建-Secret\">创建 Secret</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置文件创建</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> -n <span class=\"string\">&#x27;my-app&#x27;</span> | <span class=\"built_in\">base64</span></span><br><span class=\"line\">bXktYXBw</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> -n <span class=\"string\">&#x27;39528$vdg7Jb&#x27;</span> | <span class=\"built_in\">base64</span></span><br><span class=\"line\">Mzk1MjgkdmRnN0pi</span><br><span class=\"line\"><span class=\"comment\"># 配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># secret.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Secret</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: test-secret</span><br><span class=\"line\">data:</span><br><span class=\"line\">  username: bXktYXBw  <span class=\"comment\"># value必须是警告base64加密后的值</span></span><br><span class=\"line\">  password: Mzk1MjgkdmRnN0pi</span><br><span class=\"line\"></span><br><span class=\"line\">$ k apply -f secret.yaml</span><br><span class=\"line\">$ k describe secrets test-secret</span><br><span class=\"line\">Name:         test-secret</span><br><span class=\"line\">Namespace:    <span class=\"built_in\">test</span></span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  Opaque</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">username:  6 bytes</span><br><span class=\"line\">password:  12 bytes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令行创建，此时明文创建即可</span></span><br><span class=\"line\">$ kubectl create secret generic test-secret2 --from-literal=<span class=\"string\">&#x27;username=my-app&#x27;</span> --from-literal=<span class=\"string\">&#x27;password=39528$vdg7Jb&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件创建</span></span><br><span class=\"line\">$ kubectl create secret generic ssh-key-secret --from-file=ssh-privatekey=/path/to/.ssh/id_rsa --from-file=ssh-publickey=/path/to/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Secret\">使用 Secret</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建一个可以通过卷访问 Secret 数据的 Pod</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># secret-pod.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: secret-test-pod</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: test-container</span><br><span class=\"line\">      image: nginx</span><br><span class=\"line\">      volumeMounts:</span><br><span class=\"line\">        <span class=\"comment\"># name 必须与下面的卷名匹配</span></span><br><span class=\"line\">        - name: secret-volume</span><br><span class=\"line\">          mountPath: /etc/secret-volume</span><br><span class=\"line\">          readOnly: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Secret 数据通过一个卷暴露给该 Pod 中的容器</span></span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - name: secret-volume</span><br><span class=\"line\">      secret:</span><br><span class=\"line\">        secretName: test-secret</span><br><span class=\"line\"></span><br><span class=\"line\">$ k apply -f secret-pod.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出包含两个文件，每个对应一个 Secret 数据条目</span></span><br><span class=\"line\">$ kubectl <span class=\"built_in\">exec</span> -i -t secret-test-pod -- <span class=\"built_in\">ls</span> /etc/secret-volume</span><br><span class=\"line\">password  username</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>映射 Secret 键到特定文件路径</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">来自 mysecret 的键 username 可以在路径 /etc/foo/my-group/my-username 下供容器使用，而不是路径 /etc/foo/username</li>\n<li class=\"lvl-6\">来自该 Secret 的键 password 没有映射到任何路径</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: mypod</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: mypod</span><br><span class=\"line\">    image: redis</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: foo</span><br><span class=\"line\">      mountPath: <span class=\"string\">&quot;/etc/foo&quot;</span></span><br><span class=\"line\">      readOnly: <span class=\"literal\">true</span></span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">  - name: foo</span><br><span class=\"line\">    secret:</span><br><span class=\"line\">      secretName: mysecret</span><br><span class=\"line\">      items:</span><br><span class=\"line\">      - key: username</span><br><span class=\"line\">        path: my-group/my-username</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用来自 Secret 中的数据定义容器变量</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k create secret generic backend-user --from-literal=backend-username=<span class=\"string\">&#x27;backend-admin&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># pod-single-secret-env-variable.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">  kind: Pod</span><br><span class=\"line\">  metadata:</span><br><span class=\"line\">    name: env-single-secret</span><br><span class=\"line\">  spec:</span><br><span class=\"line\">    containers:</span><br><span class=\"line\">    - name: envars-test-container</span><br><span class=\"line\">      image: nginx</span><br><span class=\"line\">      <span class=\"built_in\">env</span>:</span><br><span class=\"line\">      - name: SECRET_USERNAME</span><br><span class=\"line\">        valueFrom:</span><br><span class=\"line\">          secretKeyRef:</span><br><span class=\"line\">            name: backend-user</span><br><span class=\"line\">            key: backend-username</span><br><span class=\"line\">$ k apply -f pod-single-secret-env-variable.yaml</span><br><span class=\"line\">$ k <span class=\"built_in\">exec</span> -i -t env-single-secret -- /bin/sh -c <span class=\"string\">&#x27;echo $SECRET_USERNAME&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将 Secret 中的所有键值偶对定义为环境变量</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k create secret generic test-secret --from-literal=username=<span class=\"string\">&#x27;my-app&#x27;</span> --from-literal=password=<span class=\"string\">&#x27;39528$vdg7Jb&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># pod-secret-envFrom.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">  kind: Pod</span><br><span class=\"line\">  metadata:</span><br><span class=\"line\">    name: envfrom-secret</span><br><span class=\"line\">  spec:</span><br><span class=\"line\">    containers:</span><br><span class=\"line\">    - name: envars-test-container</span><br><span class=\"line\">      image: nginx</span><br><span class=\"line\">      envFrom:</span><br><span class=\"line\">      - secretRef:</span><br><span class=\"line\">          name: test-secret</span><br><span class=\"line\">$ k apply -f pod-secret-envFrom.yaml</span><br><span class=\"line\">$ k <span class=\"built_in\">exec</span> -i -t envfrom-secret -- /bin/sh -c <span class=\"string\">&#x27;echo &quot;username: $username\\npassword: $password\\n&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"service–svc\">service–svc</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>svc负责解决端口映射的问题</p>\n</li>\n<li class=\"lvl-2\">\n<p>Kubernetes ServiceTypes 允许指定你所需要的 Service 类型。</p>\n</li>\n<li class=\"lvl-2\">\n<p>可用的 type 值及其行为有：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">ClusterIP<br>\n通过集群的内部 IP 暴露服务，选择该值时服务只能够在集群内部访问。 这也是你没有为服务显式指定 type 时使用的默认值。 你可以使用 Ingress 或者 Gateway API 向公众暴露服务。</li>\n<li class=\"lvl-6\">NodePort<br>\n通过每个节点上的 IP 和静态端口（NodePort）暴露服务。 为了让节点端口可用，Kubernetes 设置了集群 IP 地址，这等同于你请求 type: ClusterIP 的服务。</li>\n<li class=\"lvl-6\">LoadBalancer<br>\n使用云提供商的负载均衡器向外部暴露服务。 Kubernetes 不直接提供负载均衡组件；你必须提供一个，或者将你的 Kubernetes 集群与云提供商集成。</li>\n<li class=\"lvl-6\">ExternalName<br>\n将服务映射到 externalName 字段的内容（例如，映射到主机名 api.foo.bar.example）。 该映射将集群的 DNS 服务器配置为返回具有该外部主机名值的 CNAME 记录。 无需创建任何类型代理。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"NodePort\">NodePort</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>可以让 kubernetes 在其所在节点上保留一个端口（所有节点上都使用相同的端口号），然后将传入的连接转发给 pod</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># svc-nodeport.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">svc-nodeport</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">ports:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test-nginx</span></span><br><span class=\"line\">     <span class=\"attr\">port:</span> <span class=\"number\">3080</span></span><br><span class=\"line\">     <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">     <span class=\"attr\">nodePort:</span> <span class=\"number\">32115</span> <span class=\"comment\"># 此处指定具体的端口，不能重复，如果没有配置则随机创建</span></span><br><span class=\"line\">   <span class=\"attr\">selector:</span></span><br><span class=\"line\">     <span class=\"attr\">app:</span> <span class=\"string\">test-nginx</span></span><br><span class=\"line\">   <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ClusterIP\">ClusterIP</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>提供虚拟ip</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基于delpoyment创建service</span></span><br><span class=\"line\">k expose deployment test-nginx --name svc-cluster-ip --port=3280 --target-port=80 --<span class=\"built_in\">type</span>=ClusterIP</span><br><span class=\"line\"><span class=\"comment\"># 不创建，只生成yaml文件</span></span><br><span class=\"line\">k expose deployment test-nginx --name svc-cluster-ip --port=3280 --target-port=80 --<span class=\"built_in\">type</span>=ClusterIP --dry-run=client -o yaml &gt; svc-cluster-ip.yaml</span><br><span class=\"line\"><span class=\"comment\"># 基于yaml创建service</span></span><br><span class=\"line\">k apply -f svc-cluster-ip.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Headless service clusterIP：基于statefulset创建service</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">不提供虚拟ip，而是返回具体的pod地址，并且基于如下规则查找：<br>\n<code>$&#123;podName&#125;.$&#123;headlessServiceName即svcName&#125;.$&#123;namespace&#125;.$&#123;clusterDomainName&#125;</code>，<br>\n同一个namespace的pod访问时一般指定到${headlessServiceName}即可，跨namespace时需要指定到${namespace}</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># svc-sts-web.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span> <span class=\"comment\"># 这里必须设置为None</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"LoadBalancer\">LoadBalancer</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>相比 NodePort 方式可以通过任何节点的 指定 端口访问内部的 pod，LoadBalancer 方式拥有自己独一无二的可公开访问的 IP 地址；</p>\n</li>\n<li class=\"lvl-2\">\n<p>LoadBalance 其实是 NodePort 的一种扩展，使得服务可以通过一个专用的负载均衡器来访问。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果是自建k8s，Kubernetes 没 有 为 裸 机 集 群 提 供 网 络 负 载 平 衡 器 的 实 现，所以需要安装一个LoadBalancer，比如 MetaLb 负载均衡，这里不做赘述。</p>\n</li>\n<li class=\"lvl-2\">\n<p>EKS<a href=\"/2023/07/07/aws-eks07-loadbalancer/\" title=\"AWS-EKS-07--安装 AWS Load Balancer Controller 附加组件\">安装 AWS Load Balancer Controller 附加组件</a>后即可提供支持。</p>\n</li>\n</ul>\n<h3 id=\"可以基于pod直接创建svc\">可以基于pod直接创建svc</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动一个pod，默认的label是 run=nginx-app</span></span><br><span class=\"line\">kubectl run nginx-app --image=nginx --restart=Never --port=80</span><br><span class=\"line\"><span class=\"comment\"># 为pod添加标签</span></span><br><span class=\"line\">k label pod nginx-app app=nginx-app</span><br><span class=\"line\"><span class=\"comment\"># 创建一个svc的yaml文件，其selector为app: nginx-app，这里没有指定nodePort，创建时会随机分配一个端口</span></span><br><span class=\"line\"><span class=\"comment\"># 也可以修改生成的yaml文件，使其符合要求</span></span><br><span class=\"line\">kubectl create svc nodeport nginx-app --tcp=80:80 --dry-run -o yaml &gt; svc_pod.yaml</span><br><span class=\"line\">k apply -f svc_pod.yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看svc\">查看svc</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看svc，注意查看TYPE，CLUSTER-IP ，EXTERNAL-IP，PORT显示的不同之处</span></span><br><span class=\"line\">&gt; k get svc -o wide</span><br><span class=\"line\">NAME                    TYPE           CLUSTER-IP       EXTERNAL-IP                                                               PORT(S)          AGE    SELECTOR</span><br><span class=\"line\">nginx                   ClusterIP      None             &lt;none&gt;                                                                    80/TCP           130m   app=nginx</span><br><span class=\"line\">svc-loadbalance-nginx   LoadBalancer   172.20.57.83     aa39ab20daad5447da7ee7d283ab2a83-1210832584.ap-east-1.elb.amazonaws.com   3081:32116/TCP   10m    app=test-nginx</span><br><span class=\"line\">svc-test-nginx          NodePort       172.20.39.12     &lt;none&gt;                                                                    3080:32115/TCP   18h    app=test-nginx</span><br><span class=\"line\">test-loadbalancer-new   LoadBalancer   172.20.242.126   a2774e4dc02ad42cc97c54fc9968624b-882652598.ap-east-1.elb.amazonaws.com    3282:31212/TCP   10s    app=test-nginx</span><br><span class=\"line\">test-nginx-new          ClusterIP      172.20.144.96    &lt;none&gt;                                                                    3280/TCP         162m   app=test-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看endpoint--ep</span></span><br><span class=\"line\">k get endpoints</span><br><span class=\"line\">&gt; k get ep</span><br><span class=\"line\">NAME                    ENDPOINTS                                            AGE</span><br><span class=\"line\">nginx                   10.25.113.205:80,10.25.142.172:80,10.25.148.165:80   132m</span><br><span class=\"line\">svc-loadbalance-nginx   10.25.116.40:80,10.25.121.198:80,10.25.122.75:80     12m</span><br><span class=\"line\">svc-test-nginx          10.25.116.40:80,10.25.121.198:80,10.25.122.75:80     18h</span><br><span class=\"line\">test-loadbalancer-new   10.25.116.40:80,10.25.121.198:80,10.25.122.75:80     2m11s</span><br><span class=\"line\">test-nginx-new          10.25.116.40:80,10.25.121.198:80,10.25.122.75:80     164m</span><br></pre></td></tr></table></figure>\n<h2 id=\"Ingress\">Ingress</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ingress将来自集群外部的 HTTP 和 HTTPS 路由暴露给集群 内的服务。流量路由由 Ingress 资源上定义的规则控制。</p>\n</li>\n<li class=\"lvl-2\">\n<p>私有k8s不提供Ingress，需要自行安装。</p>\n</li>\n<li class=\"lvl-2\">\n<p>基于aws-eks等云服务通过<a href=\"/2023/07/07/aws-eks07-loadbalancer/\" title=\"AWS-EKS-07--安装 AWS Load Balancer Controller 附加组件\">安装 AWS Load Balancer Controller 附加组件</a>提供Ingress功能。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k get ing</span><br><span class=\"line\">k get ing -A</span><br><span class=\"line\">k get ing -n <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"HPA：Horizontal-Pod-Autoscaler-自动弹性伸缩\">HPA：Horizontal Pod Autoscaler 自动弹性伸缩</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>实现hpa的前提是k8s集群中<a href=\"/2023/07/07/aws-eks11-metrics/\" title=\"AWS-EKS-11--安装 Kubernetes Metrics Server\">部署 metrics-server</a>，其可对node和pod占用CPU、内存的情况进行监控。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基于deployment创建hpa</span></span><br><span class=\"line\">k autoscale deployment test-nginx --max=3 --min=1 --cpu-percent=60</span><br><span class=\"line\"><span class=\"comment\"># 最多3个pod，最少1个pod，基于cpu使用情况，超过60%时进行扩容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看hpa</span></span><br><span class=\"line\">k get hpa</span><br></pre></td></tr></table></figure>\n<h2 id=\"其它命令\">其它命令</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入pod</span></span><br><span class=\"line\">k <span class=\"built_in\">exec</span> podName -it -- sh</span><br><span class=\"line\">k <span class=\"built_in\">exec</span> podName -it -- /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监视变化 -w</span></span><br><span class=\"line\">k get deploy -w</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不显示标题头 --no-headers=true</span></span><br><span class=\"line\">k get pods --no-headers=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod的日志输出</span></span><br><span class=\"line\">k logs podName</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑一个资源，直接编辑已经部署的资源yaml</span></span><br><span class=\"line\">k edit deploy app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看一个资源的部署情况</span></span><br><span class=\"line\">k describe deploy app</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍kubectl命令的使用方法 参考资料： Amazon EKS用户指南 Kubernetes 文档 kubectl命令 Kubernetes 提供 kubectl 是使用 Kubernetes API 与 Kubernetes 集群的控制面进行通信的命令行工具。 官网文档 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768$ kubectl helpkubectl controls the Kubernetes cluster manager. Find more information at: https://kubernetes.io/docs/reference/kubectl/Basic Commands (Beginner): create Create a resource from a file or from stdin expose Take a replication controller, service, deployment or pod andexpose it as a new Kubernetes service run 在集群上运行特定镜像 set 为对象设置指定特性Basic Commands (Intermediate): explain Get documentation for a resource get 显示一个或多个资源 edit 编辑服务器上的资源 delete Delete resources by file names, stdin, resources and names, orby resources and label selectorDeploy Commands: rollout Manage the rollout of a resource scale Set a new size for a deployment, replica set, or replicationcontroller autoscale Auto-scale a deployment, replica set, stateful set, orreplication controllerCluster Management Commands: certificate 修改证书资源。 cluster-info Display cluster information top Display resource (CPU/memory) usage cordon 标记节点为不可调度 uncordon 标记节点为可调度 drain 清空节点以准备维护 taint 更新一个或者多个节点上的污点Troubleshooting and Debugging Commands: describe 显示特定资源或资源组的详细信息 logs 打印 Pod 中容器的日志 attach 挂接到一个运行中的容器 exec 在某个容器中执行一个命令 port-forward 将一个或多个本地端口转发到某个 Pod proxy 运行一个指向 Kubernetes API 服务器的代理 cp Copy files and directories to and from containers auth Inspect authorization debug Create debugging sessions for troubleshooting workloads and nodes events List eventsAdvanced Commands: diff Diff the live version against a would-be applied version apply Apply a configuration to a resource by file name or stdin patch Update fields of a resource replace Replace a resource by file name or stdin wait Experimental: Wait for a specific condition on one or manyresources kustomize Build a kustomization target from a directory or URL.Settings Commands: label 更新某资源上的标签 annotate 更新一个资源的注解 completion Output shell completion code for the specified shell (bash, zsh, fish, or powershell)Other Commands: alpha Commands for features in alpha api-resources Print the supported API resources on the server api-versions Print the supported API versions on the server, in the form of &quot;group/version&quot; config 修改 kubeconfig 文件 plugin Provides utilities for interacting with plugins version 输出客户端和服务端的版本信息 context[集群]相关 1234567891011121314151617181920212223242526272829303132# 查看client和server版本，注意此时必须连上server端k versionk version --output=yaml/json# 只查看client版本k version --client --shortk version --client --output=yaml# 查看所有资源信息，会显示name，shortname，版本，KIND等等k api-resources# 查看全部context配置，会显示所有context，当前context前面会用星号标识，同时显示其默认的namespacek config get-contexts# 查看当前contextk config current-context# 切换到指定的context，后面跟上面命令查询出来的context的名称，同时修改k8s的配置文件，默认在~/.kube/config 文件k config use-context eks-lexing# 作用同上，都是切换上下文k config set current-context ekstest# 修改当前context的名称k config rename-context $(k config current-context) ty-hk-eks# 查看~/.kube/config 文件k config view# 列出所有插件文件路径k plugin list# 查看集群信息k cluster-info 节点相关 1234# 查看当前集群下的nodek get nodes# 显示更多信息，比如ip地址k get nodes -o wide namespace–ns相关 1234567891011121314151617181920212223# 获取当前集群下所有namespacek get namespaces# namespace可以简写为nsk get ns# 查看当前默认的namespacek config get-contexts $(k config current-context)# 设置当前集群缺省的namespace，同时修改k8s的配置文件，默认在~/.kube/config 文件k config set-context --current --namespace=defaultk config set-context $(k config current-context) --namespace default# 创建一个新的namespacek create namespace hanqfk create ns hanqf# 不创建，只生成yaml文件k create ns hanqf --dry-run=client -o yaml &gt; namespace_hanqf.yaml# 基于yaml创建namespacek apply -f namespace_hanqf.yaml# 删除namespace，删除的同时会删除namespace下的所有资源k delete namespace hanqf pod–po相关 12345678910111213141516171819202122# 获取当前namespace下的podk get pods# 显示更多信息，比如ip地址k get pods -o wide# 列出标签k get pods --show-labels# 显示所有namespace下的podk get pods -A# 显示指定namespace下的podk get pods -n jx-git-operator# 创建podk run nginx --image=nginx:1.9 --port=80# 生成yamlk run nginx --image=nginx:1.9 --port=80 --dry-run=client -o yaml &gt; nginx.yaml# 查看pod创建后的配置信息，可以使用k apply -f nginx2.yaml重新创建podk get pods nginx --output=yaml &gt; nginx2.yaml# 执行yaml配置创建k apply -f pod.yaml controller相关 123456789101112131415# 获取当前namespace下的deploymentk get deployments# 查看指定的deployment的配置信息k describe deployments test-nginx# 编辑指定的deploymentk edit deployments test-nginx# 删除指定的deploymentk delete deployments test-nginx# 以下同上# 获取当前namespace下的statefulset，job,cronjob，daemonsetk get statefulsetsk get jobsk get cronjobsk get daemonsets deployment–deploy 1234567891011121314151617181920212223# deploy.yamlapiVersion: apps/v1kind: Deploymentmetadata: name: myngxspec: replicas: 3 selector: matchLabels: app: myngx template: metadata: labels: app: myngx spec: containers: - image: nginx:1.7.9 name: myngx ports: - containerPort: 80 resources: requests: cpu: 8m 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# 命令行创建deployk create deployment test-nginx --image=nginx:1.9 --port=80 --replicas=2# 创建yamlk create deployment test-nginx --image=nginx:1.9 --port=80 --replicas=2 --dry-run=client -o yaml &gt; deploy_new.yaml# 创建delpoymentk apply -f deploy_new.yaml# 查看deploy对应的rs信息，会显示升级历史k get rs -owide -l app=test-nginx# 重新启动deploykubectl rollout restart deployment test-nginx# 查看全部deploymentk get deploy# 将指定的deployment输出到yamlk get deploy myngx -o yaml &gt; deploy_nginx.yaml# 删除deploymentk delete deploy myngx# 重新创建deploymentk apply -f deploy_nginx.yaml# 扩缩容，pod不支持扩缩容，只有rs,deploy,sts等高级别controller才有扩缩容能力k scale deploy myngx --replicas=4# rs,deploy,sts等高级别controller都具有自愈能力，如果其下的pod被删除了，会自动重新创建新的pod# 修改deploy# 方式1：编辑配置，就是vim，保存后立即生效k edit deploy test-nginx# 方式2: 命令行，比如修改过镜像版本# k set image deployment deploy名称 镜像名称=镜像k set image deployment test-nginx nginx=nginx:1.7.9# 查看升级是否成功k rollout status -w deployment test-nginx# 查看deploy对应的rs信息，会显示升级历史k get rs -owide -l app=test-nginx# 查看历史版本记录，每行前有个版本号k rollout history deploy test-nginx# 查看指定历史版本号的详细信息k rollout history deploy test-nginx --revision=2# 回退到上一个版本k rollout undo deploy test-nginx# 回退到指定的版本k rollout undo deploy test-nginx --to-revision=2 daemonset–ds 每个node都会创建一个pod，当有新的node加入进来时，pod会自动被daemonset调度到新的node上，同理删除node，该node上的pod也会被移除 1234567891011121314151617181920212223242526272829# ds1.yamlapiVersion: apps/v1kind: DaemonSetmetadata: name: ds1 namespace: kube-system labels: k8s-app: fluentd-loggingspec: selector: matchLabels: name: mynginx template: metadata: labels: name: mynginx spec: tolerations: - key: node-role.kubernetes.io/master effect: NoSchedule containers: - name: mynginx image: nginx:1.7.9 resources: limits: memory: 200Mi requests: cpu: 100m memory: 200Mi 12345678910# 创建dsk apply -f ds1.yaml# daemonset不支持使用create创建，但其格式与deployment差不多，可以先通过create创建deploy的yaml，然后对其进行修改，# 如修改 apiVersion 和 kind，同时还要去掉replicas，另外需要加上tolerance的配置，保证其在master节点上也能部署k run nginx --image=nginx:1.9 --dry-run -o yaml &gt; ds_new.yaml# 查询dsk get ds -n kube-system# 删除k delete ds -n kube-system ds1 job 12345678910111213141516171819# job.yamlapiVersion: batch/v1kind: Jobmetadata: name: job-demospec: template: metadata: name: job-demo spec: restartPolicy: Never containers: - name: counter image: busybox command: - &quot;bin/sh&quot; - &quot;-c&quot; - &quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i; done&quot; imagePullPolicy: IfNotPresent 12k apply -f job.yamlk get jobs cronjob–cj 12345678910111213141516171819# cronjob.yamlapiVersion: batch/v1kind: CronJobmetadata: name: cronjob-demospec: schedule: &quot;*/1 * * * *&quot; jobTemplate: spec: template: spec: restartPolicy: OnFailure containers: - name: hello image: busybox args: - &quot;bin/sh&quot; - &quot;-c&quot; - &quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i; done&quot; 123k apply -f cronjob.yamlk get cronjob -o widek get job statefulset–sts sts的特性 ● 稳定的、唯一的网络标识。 ● 稳定的、持久化的存储。 ● 有序的、优雅的部署和扩展。 ● 有序的、优雅的删除和停止。 12345678910111213141516171819202122# sts.yamlapiVersion: apps/v1kind: StatefulSetmetadata: name: webspec: serviceName: &quot;nginx&quot; replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.9 ports: - containerPort: 80 name: web 12k apply -f sts.yamlk get sts -owide label标签 controller和service等都是基于标签选择器关联pod的，所以在指定label时一定要准确唯一 123456789# 可以为任何资源设置标签# k label 资源类型 资源名称 key=valuek label deploy myngx app=test# 查看标签k get deploy --show-labels# 查看指定的标签值，标签会占用一列进行展示，多个标签使用逗号分隔，如果资源不存在该标签，则为空k get pod -L app,run# 只列出给定标签和值的资源k get pod -l app=test Configmap–cm 用来存储配置文件的 kubernetes 资源对象，配置内容都存储在 etcd 中 创建方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104# 通过直接在命令行中指定 configmap 参数创建，即--from-literal$ k create configmap config-map1 --from-literal=db.host=mysql.db --from-literal=db.port=&#x27;3306&#x27;$ k describe cm config-map1Name: config-map1Namespace: testLabels: &lt;none&gt;Annotations: &lt;none&gt;Data====db.host:----mysql.dbdb.port:----3306BinaryData====Events: &lt;none&gt;# 通过指定文件创建，即将一个配置文件创建为一个 ConfigMap --from-file=&lt;文件&gt;# 如果不指定key，则文件名称作为key$ vi configs/app.propertiesdb.host mysql.dbdb.port 3306$ k create configmap config-map2 --from-file=key1=./configs/app.properties$ k describe cm config-map2Name: config-map2Namespace: testLabels: &lt;none&gt;Annotations: &lt;none&gt;Data====key1:----db.host mysql.dbdb.port 3306BinaryData====Events: &lt;none&gt;# 通过指定目录创建，即将一个目录下的所有配置文件创建为一个 ConfigMap，--from-file=&lt;目录&gt;$ k create configmap config-map3 --from-file=./configs$ k describe cm config-map3Name: config-map3Namespace: testLabels: &lt;none&gt;Annotations: &lt;none&gt;Data====app-copy.properties:----db.host mysql.dbdb.port 3306app.properties:----db.host mysql.dbdb.port 3306BinaryData====Events: &lt;none&gt;# 事先写好标准的 configmap 的 yaml 文件，然后 kubectl create -f 创建$ vim config-map4.yamlapiVersion: v1data: db.host: mysql.db db.port: &quot;3306&quot; # 数字一定要用双引号括起来kind: ConfigMapmetadata: name: config-map4$ k apply -f config-map4.yaml$ k describe cm config-map4Name: config-map4Namespace: testLabels: &lt;none&gt;Annotations: &lt;none&gt;Data====db.host:----mysql.dbdb.port:----3306BinaryData====Events: &lt;none&gt; 使用方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273## 通过环境变量使用# 1.使用 valueFrom、configMapKeyRef、name、key 指定要用的 key:apiVersion: v1kind: Podmetadata: name: appspec: containers: - name: app image: centos env: - name: DB_HOST # 环境变量名称 valueFrom: configMapKeyRef: name: config-map4 # cm名称 key: db.host # cm中的key# 2.通过 envFrom、configMapRef、name 使得 configmap 中的所有 key/value 对都自动变成环境变量apiVersion: v1kind: Podmetadata: name: appspec: containers: - name: app image: centos envFrom: configMapRef: name: config-map4## 在启动命令中引用apiVersion: v1kind: Podmetadata: name: appspec: containers: - name: app image: centos command: [&quot;/bin/sh&quot;] args: [&quot;-c&quot;, &quot;while true; do echo $(DB_HOST) $(DB_PORT) &gt;&gt; /out.txt; sleep 5; done&quot;] env: - name: DB_HOST valueFrom: configMapKeyRef: name: config-map4 key: db.host - name: DB_PORT valueFrom: configMapKeyRef: name: config-map4 key: db.port## 作为 volume 挂载使用apiVersion: v1kind: Podmetadata: name: appspec: containers: - name: app image: centos command: [&quot;/bin/sh&quot;] args: [&quot;-c&quot;, &quot;while true; do cat /tmp/config.properties &gt;&gt; /out.txt; sleep 5; done&quot;] volumeMounts: - name: config-map3 mountPath: /tmp/config.properties # 挂载到的文件 subPath: app.properties # 被挂载的文件，即cm中的多个文件中的一个 volumes: - name: config-map3 configMap: name: config-map3 Secrets Secret 解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者 Pod Spec 中。 Secret 可以以 Volume 或者环境变量的方式使用。 Secrets 类型 创建 Secret 时，你可以使用 Secret 资源的 type 字段，或者与其等价的 kubectl 命令行参数（如果有的话）为其设置类型。 Kubernetes 提供若干种内置的类型，用于一些常见的使用场景。 针对这些类型，Kubernetes 所执行的合法性检查操作以及对其所实施的限制各不相同。 内置类型 用法 Opaque 用户定义的任意数据 kubernetes.io/service-account-token 服务账号令牌 kubernetes.io/dockercfg ~/.dockercfg 文件的序列化形式 kubernetes.io/dockerconfigjson ~/.docker/config.json 文件的序列化形式 kubernetes.io/basic-auth 用于基本身份认证的凭据 kubernetes.io/ssh-auth 用于 SSH 身份认证的凭据 kubernetes.io/tls 用于 TLS 客户端或者服务器端的数据 bootstrap.kubernetes.io/token 启动引导令牌数据 通过为 Secret 对象的 type 字段设置一个非空的字符串值，你也可以定义并使用自己 Secret 类型（如果 type 值为空字符串，则被视为 Opaque 类型）。 关于Secret类型的进一步说请查看https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/，以下示例仅对常用的Opaque进行说明。 创建 Secret 12345678910111213141516171819202122232425262728293031323334# 配置文件创建$ echo -n &#x27;my-app&#x27; | base64bXktYXBw$ echo -n &#x27;39528$vdg7Jb&#x27; | base64Mzk1MjgkdmRnN0pi# 配置文件# secret.yamlapiVersion: v1kind: Secretmetadata: name: test-secretdata: username: bXktYXBw # value必须是警告base64加密后的值 password: Mzk1MjgkdmRnN0pi$ k apply -f secret.yaml$ k describe secrets test-secretName: test-secretNamespace: testLabels: &lt;none&gt;Annotations: &lt;none&gt;Type: OpaqueData====username: 6 bytespassword: 12 bytes# 命令行创建，此时明文创建即可$ kubectl create secret generic test-secret2 --from-literal=&#x27;username=my-app&#x27; --from-literal=&#x27;password=39528$vdg7Jb&#x27;# 文件创建$ kubectl create secret generic ssh-key-secret --from-file=ssh-privatekey=/path/to/.ssh/id_rsa --from-file=ssh-publickey=/path/to/.ssh/id_rsa.pub 使用 Secret 创建一个可以通过卷访问 Secret 数据的 Pod 12345678910111213141516171819202122232425# secret-pod.yamlapiVersion: v1kind: Podmetadata: name: secret-test-podspec: containers: - name: test-container image: nginx volumeMounts: # name 必须与下面的卷名匹配 - name: secret-volume mountPath: /etc/secret-volume readOnly: true # Secret 数据通过一个卷暴露给该 Pod 中的容器 volumes: - name: secret-volume secret: secretName: test-secret$ k apply -f secret-pod.yaml# 输出包含两个文件，每个对应一个 Secret 数据条目$ kubectl exec -i -t secret-test-pod -- ls /etc/secret-volumepassword username 映射 Secret 键到特定文件路径 来自 mysecret 的键 username 可以在路径 /etc/foo/my-group/my-username 下供容器使用，而不是路径 /etc/foo/username 来自该 Secret 的键 password 没有映射到任何路径 12345678910111213141516171819apiVersion: v1kind: Podmetadata: name: mypodspec: containers: - name: mypod image: redis volumeMounts: - name: foo mountPath: &quot;/etc/foo&quot; readOnly: true volumes: - name: foo secret: secretName: mysecret items: - key: username path: my-group/my-username 使用来自 Secret 中的数据定义容器变量 123456789101112131415161718$ k create secret generic backend-user --from-literal=backend-username=&#x27;backend-admin&#x27;# pod-single-secret-env-variable.yamlapiVersion: v1 kind: Pod metadata: name: env-single-secret spec: containers: - name: envars-test-container image: nginx env: - name: SECRET_USERNAME valueFrom: secretKeyRef: name: backend-user key: backend-username$ k apply -f pod-single-secret-env-variable.yaml$ k exec -i -t env-single-secret -- /bin/sh -c &#x27;echo $SECRET_USERNAME&#x27; 将 Secret 中的所有键值偶对定义为环境变量 123456789101112131415$ k create secret generic test-secret --from-literal=username=&#x27;my-app&#x27; --from-literal=password=&#x27;39528$vdg7Jb&#x27;# pod-secret-envFrom.yamlapiVersion: v1 kind: Pod metadata: name: envfrom-secret spec: containers: - name: envars-test-container image: nginx envFrom: - secretRef: name: test-secret$ k apply -f pod-secret-envFrom.yaml$ k exec -i -t envfrom-secret -- /bin/sh -c &#x27;echo &quot;username: $username\\npassword: $password\\n&quot;&#x27; service–svc svc负责解决端口映射的问题 Kubernetes ServiceTypes 允许指定你所需要的 Service 类型。 可用的 type 值及其行为有： ClusterIP 通过集群的内部 IP 暴露服务，选择该值时服务只能够在集群内部访问。 这也是你没有为服务显式指定 type 时使用的默认值。 你可以使用 Ingress 或者 Gateway API 向公众暴露服务。 NodePort 通过每个节点上的 IP 和静态端口（NodePort）暴露服务。 为了让节点端口可用，Kubernetes 设置了集群 IP 地址，这等同于你请求 type: ClusterIP 的服务。 LoadBalancer 使用云提供商的负载均衡器向外部暴露服务。 Kubernetes 不直接提供负载均衡组件；你必须提供一个，或者将你的 Kubernetes 集群与云提供商集成。 ExternalName 将服务映射到 externalName 字段的内容（例如，映射到主机名 api.foo.bar.example）。 该映射将集群的 DNS 服务器配置为返回具有该外部主机名值的 CNAME 记录。 无需创建任何类型代理。 NodePort 可以让 kubernetes 在其所在节点上保留一个端口（所有节点上都使用相同的端口号），然后将传入的连接转发给 pod 1234567891011121314# svc-nodeport.yamlapiVersion: v1kind: Servicemetadata: name: svc-nodeportspec: ports: - name: test-nginx port: 3080 targetPort: 80 nodePort: 32115 # 此处指定具体的端口，不能重复，如果没有配置则随机创建 selector: app: test-nginx type: NodePort ClusterIP 提供虚拟ip 123456# 基于delpoyment创建servicek expose deployment test-nginx --name svc-cluster-ip --port=3280 --target-port=80 --type=ClusterIP# 不创建，只生成yaml文件k expose deployment test-nginx --name svc-cluster-ip --port=3280 --target-port=80 --type=ClusterIP --dry-run=client -o yaml &gt; svc-cluster-ip.yaml# 基于yaml创建servicek apply -f svc-cluster-ip.yaml Headless service clusterIP：基于statefulset创建service 不提供虚拟ip，而是返回具体的pod地址，并且基于如下规则查找： $&#123;podName&#125;.$&#123;headlessServiceName即svcName&#125;.$&#123;namespace&#125;.$&#123;clusterDomainName&#125;， 同一个namespace的pod访问时一般指定到${headlessServiceName}即可，跨namespace时需要指定到${namespace} 1234567891011121314# svc-sts-web.yamlapiVersion: v1kind: Servicemetadata: name: nginx labels: app: nginxspec: ports: - port: 80 name: web clusterIP: None # 这里必须设置为None selector: app: nginx LoadBalancer 相比 NodePort 方式可以通过任何节点的 指定 端口访问内部的 pod，LoadBalancer 方式拥有自己独一无二的可公开访问的 IP 地址； LoadBalance 其实是 NodePort 的一种扩展，使得服务可以通过一个专用的负载均衡器来访问。 如果是自建k8s，Kubernetes 没 有 为 裸 机 集 群 提 供 网 络 负 载 平 衡 器 的 实 现，所以需要安装一个LoadBalancer，比如 MetaLb 负载均衡，这里不做赘述。 EKS安装 AWS Load Balancer Controller 附加组件后即可提供支持。 可以基于pod直接创建svc 12345678# 启动一个pod，默认的label是 run=nginx-appkubectl run nginx-app --image=nginx --restart=Never --port=80# 为pod添加标签k label pod nginx-app app=nginx-app# 创建一个svc的yaml文件，其selector为app: nginx-app，这里没有指定nodePort，创建时会随机分配一个端口# 也可以修改生成的yaml文件，使其符合要求kubectl create svc nodeport nginx-app --tcp=80:80 --dry-run -o yaml &gt; svc_pod.yamlk apply -f svc_pod.yaml 查看svc 123456789101112131415161718# 查看svc，注意查看TYPE，CLUSTER-IP ，EXTERNAL-IP，PORT显示的不同之处&gt; k get svc -o wideNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTORnginx ClusterIP None &lt;none&gt; 80/TCP 130m app=nginxsvc-loadbalance-nginx LoadBalancer 172.20.57.83 aa39ab20daad5447da7ee7d283ab2a83-1210832584.ap-east-1.elb.amazonaws.com 3081:32116/TCP 10m app=test-nginxsvc-test-nginx NodePort 172.20.39.12 &lt;none&gt; 3080:32115/TCP 18h app=test-nginxtest-loadbalancer-new LoadBalancer 172.20.242.126 a2774e4dc02ad42cc97c54fc9968624b-882652598.ap-east-1.elb.amazonaws.com 3282:31212/TCP 10s app=test-nginxtest-nginx-new ClusterIP 172.20.144.96 &lt;none&gt; 3280/TCP 162m app=test-nginx# 查看endpoint--epk get endpoints&gt; k get epNAME ENDPOINTS AGEnginx 10.25.113.205:80,10.25.142.172:80,10.25.148.165:80 132msvc-loadbalance-nginx 10.25.116.40:80,10.25.121.198:80,10.25.122.75:80 12msvc-test-nginx 10.25.116.40:80,10.25.121.198:80,10.25.122.75:80 18htest-loadbalancer-new 10.25.116.40:80,10.25.121.198:80,10.25.122.75:80 2m11stest-nginx-new 10.25.116.40:80,10.25.121.198:80,10.25.122.75:80 164m Ingress Ingress将来自集群外部的 HTTP 和 HTTPS 路由暴露给集群 内的服务。流量路由由 Ingress 资源上定义的规则控制。 私有k8s不提供Ingress，需要自行安装。 基于aws-eks等云服务通过安装 AWS Load Balancer Controller 附加组件提供Ingress功能。 123k get ingk get ing -Ak get ing -n test HPA：Horizontal Pod Autoscaler 自动弹性伸缩 实现hpa的前提是k8s集群中部署 metrics-server，其可对node和pod占用CPU、内存的情况进行监控。 123456# 基于deployment创建hpak autoscale deployment test-nginx --max=3 --min=1 --cpu-percent=60# 最多3个pod，最少1个pod，基于cpu使用情况，超过60%时进行扩容# 查看hpak get hpa 其它命令 123456789101112131415161718# 进入podk exec podName -it -- shk exec podName -it -- /bin/bash# 监视变化 -wk get deploy -w# 不显示标题头 --no-headers=truek get pods --no-headers=true# 查看pod的日志输出k logs podName# 编辑一个资源，直接编辑已经部署的资源yamlk edit deploy app# 查看一个资源的部署情况k describe deploy app","summary":"摘要 本文介绍kubectl命令的使用方法 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T15:50:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks12-dashboard/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks12-dashboard/","title":"AWS-EKS-12--部署 Dashboard UI","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为EKS集群部署 Dashboard UI</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"部署-Dashboard-UI\">部署 Dashboard UI</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/web-ui-dashboard/\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>部署服务</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建用户</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">Dashboard 支持使用 Bearer 令牌登录。</li>\n<li class=\"lvl-6\"><a href=\"https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md\">创建用户</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dashboard-adminuser.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cluster-admin</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>授权</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">这里创建一个 sa <code>admin-user</code>和 ClusterRoleBinding <code>admin-user</code>，利用 ClusterRoleBinding 赋予 sa 访问集群的 admin 权限</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 向dashboard的服务帐户授予管理员权限</span></span><br><span class=\"line\">$ k apply -f dashboard-adminuser.yaml</span><br><span class=\"line\">serviceaccount/admin-user created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/admin-user created</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>获取登录令牌<br>\n<em><strong>k8s-1.24后就不再为ServiceAccout提供默认的无到期时间的Secret了，而是需要获取有效期为3600秒的token</strong></em></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取登录令牌，这就是一个JWT，可以在 https://jwt.io 中查看解析后的内容</span></span><br><span class=\"line\">$ kubectl -n kubernetes-dashboard create token admin-user</span><br><span class=\"line\">eyJhbGciOiJSUzI1NiIsImtpZCI6IjgzMWNkMmM1YTE0YWYzZmYzZWU1MzQwYWIxZWRmNmRjN2Q3ZmI1NGQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTY4OTMwNjUyMSwiaWF0IjoxNjg5MzAyOTIxLCJpc3MiOiJodHRwczovL29pZGMuZWtzLnVzLXdlc3QtMi5hbCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiNDdiZGE0MmQtYTc3YS00NzUzLTg3NjItOTZmNmFmODA3ODI2In19LCJuYmYiOjE2ODkzMDI5MjEsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.fELZiBXQfh2Mn0h8EHbb6BjDSCvHvB2cUDPenbwgMuKIE2NY-pHJdWA0ydZZYGM1aGg2TN0CHZQSMCEAyD3xqXzJF12dThlgVIAXWUWB_PK5_OQ9FSEHJuY2pSvnS0yhtRirbhJFzovYuxymFZjnZWuAJiPlt9k4DCp7rSIIZu89TRzwAlKh_SEnjCMaV4Fvy_Eq7eAxaXHPtatYLrz7vO12vZSA</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 令牌有效期为3600秒，到期后需要重启获取令牌并重新登录。这点不是很方便。加上 -o yaml 即可看到过期时间</span></span><br><span class=\"line\">$ kubectl -n kubernetes-dashboard create token admin-user -o yaml</span><br><span class=\"line\">apiVersion: authentication.k8s.io/v1</span><br><span class=\"line\">kind: TokenRequest</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  creationTimestamp: <span class=\"string\">&quot;2023-07-07T02:48:41Z&quot;</span></span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  audiences:</span><br><span class=\"line\">  - https://kubernetes.default.svc</span><br><span class=\"line\">  boundObjectRef: null</span><br><span class=\"line\">  expirationSeconds: 3600</span><br><span class=\"line\">status:</span><br><span class=\"line\">  expirationTimestamp: <span class=\"string\">&quot;2023-07-07T03:48:41Z&quot;</span></span><br><span class=\"line\">  token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjgzMWNkMmM1YTE0YWYzZmYzZWU1MzQwYWIxZWRmNmRjN2Q3ZmI1NGQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTY4OTMwNjUyMSwiaWF0IjoxNjg5MzAyOTIxLCJpc3MiOiJodHRwczovL29pZGMuZWtzLnVzLXdlc3QtMi5hbCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiNDdiZGE0MmQtYTc3YS00NzUzLTg3NjItOTZmNmFmODA3ODI2In19LCJuYmYiOjE2ODkzMDI5MjEsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.fELZiBXQfh2Mn0h8EHbb6BjDSCvHvB2cUDPenbwgMuKIE2NY-pHJdWA0ydZZYGM1aGg2TN0CHZQSMCEAyD3xqXzJF12dThlgVIAXWUWB_PK5_OQ9FSEHJuY2pSvnS0yhtRirbhJFzovYuxymFZjnZWuAJiPlt9k4DCp7rSIIZu89TRzwAlKh_SEnjCMaV4Fvy_Eq7eAxaXHPtatYLrz7vO12vZSA</span><br></pre></td></tr></table></figure>\n<h2 id=\"访问Dashboard\">访问Dashboard</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看Dashboard 的 service，可以看到 Dashboard 的 Service 的类型都是 ClusterIP，所以我们是无法从外部访问到 Dashboard 的。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get svc -n kubernetes-dashboard</span><br><span class=\"line\">NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">dashboard-metrics-scraper   ClusterIP   10.100.76.198   &lt;none&gt;        8000/TCP   12m</span><br><span class=\"line\">kubernetes-dashboard        ClusterIP   10.100.171.79   &lt;none&gt;        443/TCP    12m</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这时我们有两种方法访问 Dashboard</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">把 Dashboard 映射到本地</li>\n<li class=\"lvl-4\">利用 ingress 和 ALB 把外部请求转发到 Dashboard</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"把-Dashboard-映射到本地\">把 Dashboard 映射到本地</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>我们可以用 kubectl proxy，也可以用 port-forward</p>\n</li>\n</ul>\n<h4 id=\"利用-kubectl-proxy\">利用 kubectl proxy</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>开启代理</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认8001端口</span></span><br><span class=\"line\">~ kubectl proxy</span><br><span class=\"line\">Starting to serve on 127.0.0.1:8001</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定端口</span></span><br><span class=\"line\">~ kubectl proxy --port 8888</span><br><span class=\"line\">Starting to serve on 127.0.0.1:8888</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭代理</span></span><br><span class=\"line\">Ctrl+C</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本地访问</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">可以通过 <a href=\"http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\">http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</a> 访问。</li>\n<li class=\"lvl-6\">登录时选择token登录，输入上面获取到的令牌即可，令牌有效期为3600秒，到期后需要重启获取令牌并重新登录。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/IDKZ0Z.jpg\" alt=\"\" width=\"1200\" height=\"700\"></p>\n<h4 id=\"利用-kubectl-port-forward\">利用 kubectl port-forward</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>上面利用 kubectl proxy的方法是把整个 apiserver 通过 proxy 映射到本地，下面我们只把 dashboard 的 deployment(Pod)映射到本地。</p>\n</li>\n<li class=\"lvl-2\">\n<p>首先，我们先要获得 Pod 的访问端口</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get ep -n kubernetes-dashboard</span><br><span class=\"line\">NAME                        ENDPOINTS             AGE</span><br><span class=\"line\">dashboard-metrics-scraper   192.168.10.200:8000   5d4h</span><br><span class=\"line\">kubernetes-dashboard        192.168.20.125:8443   5d4h</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>说明：kubernetes-dashboard 对应的 ENDPOINTS 就是pod的ip和端口，这里开启的就是pod的8443端口。</p>\n</li>\n</ul>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>运行以下命令获得 Dashboard deployment 的 name</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get deployment -n kubernetes-dashboard</span><br><span class=\"line\">NAME                        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">dashboard-metrics-scraper   1/1     1            1           5d4h</span><br><span class=\"line\">kubernetes-dashboard        1/1     1            1           5d4h</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>说明：kubernetes-dashboard 是 Deployment 的名称</p>\n</li>\n</ul>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>开启本地端口映射，这里映射到本地的8888端口</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl port-forward deployment/kubernetes-dashboard -n kubernetes-dashboard 8888:8443</span><br><span class=\"line\">Forwarding from 127.0.0.1:8888 -&gt; 8443</span><br><span class=\"line\">Forwarding from [::1]:8888 -&gt; 8443</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>可以通过 <a href=\"https://localhost:8888/#/login\">https://localhost:8888/#/login</a> 访问。</p>\n</li>\n<li class=\"lvl-4\">\n<p>登录时选择token登录，输入上面获取到的令牌即可，令牌有效期为3600秒，到期后需要重启获取令牌并重新登录。</p>\n</li>\n</ul>\n<h3 id=\"利用-ingress-和-ALB-把外部请求转发到-Dashboard\">利用 ingress 和 ALB 把外部请求转发到 Dashboard</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>proxy，port-forward 可以把 apiserver 或者某个 deployment 映射到本地，这对调试一些应用来说很有用处。</p>\n</li>\n<li class=\"lvl-2\">\n<p>不过，这两个都是前台命令，每次查看 Dashboard 都要先运行一下，使用起来确实不方便，下面介绍如何利用 ALB 访问 Dashboard。</p>\n</li>\n<li class=\"lvl-2\">\n<p>前面我们已经介绍过<a href=\"/2023/07/07/aws-eks09-service-ingress/\" title=\"AWS-EKS-09--创建基于LoadBalancer的service和ingress\">创建基于LoadBalancer的service和ingress</a>，接下来我们就在此基础上完成后续的步骤。</p>\n</li>\n</ul>\n<h4 id=\"创建ingress\">创建ingress</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dashboard-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">dashboard</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/actions.ssl-redirect:</span> <span class=\"string\">&#x27;&#123;&quot;Type&quot;: &quot;redirect&quot;, &quot;RedirectConfig&quot;:&#123; &quot;Protocol&quot;: &quot;HTTPS&quot;, &quot;Port&quot;: &quot;443&quot;, &quot;StatusCode&quot;: &quot;HTTP_301&quot;&#125;&#125;&#x27;</span>  <span class=\"comment\"># http重定向到https</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/certificate-arn:</span> <span class=\"string\">arn:aws:acm:us-west-2:743263909655:certificate/e2e3fa54-98ab-427a-9f09-4861122831323e</span> <span class=\"comment\"># https证书，就是上面创建的证书的arn</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/listen-ports:</span> <span class=\"string\">&#x27;[&#123;&quot;HTTP&quot;: 80&#125;, &#123;&quot;HTTPS&quot;:443&#125;]&#x27;</span> <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/scheme:</span> <span class=\"string\">internet-facing</span> <span class=\"comment\"># 开放外网访问</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/target-type:</span> <span class=\"string\">ip</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/backend-protocol:</span> <span class=\"string\">HTTPS</span> <span class=\"comment\"># 转发请求用的协议，默认是HTTP</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ingressClassName:</span> <span class=\"string\">alb</span> <span class=\"comment\"># 指定ingressclass类型，k8s-1.18及以后的版本推荐这种配置方式，旧版本需要在注释中加入 kubernetes.io/ingress.class: alb</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">dashboard.hanqunfeng.com</span> <span class=\"comment\"># 域名绑定，需要到域名服务商处进行域名解析，CNAME到当前生成的elb</span></span><br><span class=\"line\">      <span class=\"attr\">http:</span></span><br><span class=\"line\">        <span class=\"attr\">paths:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span> <span class=\"comment\"># 重定向配置，这里必须配置，否则不能实现重定向</span></span><br><span class=\"line\">          <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">          <span class=\"attr\">backend:</span></span><br><span class=\"line\">            <span class=\"attr\">service:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">ssl-redirect</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">use-annotation</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">          <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">          <span class=\"attr\">backend:</span></span><br><span class=\"line\">            <span class=\"attr\">service:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kubernetes-dashboard</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span></span><br><span class=\"line\">                <span class=\"attr\">number:</span> <span class=\"number\">443</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>这里要注意一点，一定要配置<code>alb.ingress.kubernetes.io/backend-protocol: HTTPS</code>，这是转发请求用的协议，默认是HTTP，但是Dashboard应用本身要求访问请求使用HTTPS，所以这里指定HTTPS。如果不指定，则在后面用浏览器访问Dashboard时会报下列错误</p>\n</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client sent an HTTP request to an HTTPS server.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署ingress</span></span><br><span class=\"line\">$ k apply -f dashboard-ingress.yaml</span><br><span class=\"line\">ingress.networking.k8s.io/dashboard created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看ingress状态</span></span><br><span class=\"line\">$ k describe ing -n kubernetes-dashboard dashboard</span><br><span class=\"line\">Name:             dashboard</span><br><span class=\"line\">Labels:           &lt;none&gt;</span><br><span class=\"line\">Namespace:        kubernetes-dashboard</span><br><span class=\"line\">Address:          k8s-kubernet-dashboar-043481379b-1952890389.us-west-2.elb.amazonaws.com</span><br><span class=\"line\">Ingress Class:    alb</span><br><span class=\"line\">Default backend:  &lt;default&gt;</span><br><span class=\"line\">Rules:</span><br><span class=\"line\">  Host                      Path  Backends</span><br><span class=\"line\">  ----                      ----  --------</span><br><span class=\"line\">  dashboard.hanqunfeng.com</span><br><span class=\"line\">                            /   ssl-redirect:use-annotation (&lt;error: endpoints <span class=\"string\">&quot;ssl-redirect&quot;</span> not found&gt;)</span><br><span class=\"line\">                            /   kubernetes-dashboard:443 (192.168.20.125:8443)</span><br><span class=\"line\">Annotations:                alb.ingress.kubernetes.io/actions.ssl-redirect:</span><br><span class=\"line\">                              &#123;<span class=\"string\">&quot;Type&quot;</span>: <span class=\"string\">&quot;redirect&quot;</span>, <span class=\"string\">&quot;RedirectConfig&quot;</span>:&#123; <span class=\"string\">&quot;Protocol&quot;</span>: <span class=\"string\">&quot;HTTPS&quot;</span>, <span class=\"string\">&quot;Port&quot;</span>: <span class=\"string\">&quot;443&quot;</span>, <span class=\"string\">&quot;StatusCode&quot;</span>: <span class=\"string\">&quot;HTTP_301&quot;</span>&#125;&#125;</span><br><span class=\"line\">                            alb.ingress.kubernetes.io/backend-protocol: HTTPS</span><br><span class=\"line\">                            alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:743263909655:certificate/e2e3fa54-98ab-427a-9f09-4861122831323e</span><br><span class=\"line\">                            alb.ingress.kubernetes.io/listen-ports: [&#123;<span class=\"string\">&quot;HTTP&quot;</span>: 80&#125;, &#123;<span class=\"string\">&quot;HTTPS&quot;</span>:443&#125;]</span><br><span class=\"line\">                            alb.ingress.kubernetes.io/scheme: internet-facing</span><br><span class=\"line\">                            alb.ingress.kubernetes.io/target-type: ip</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason                  Age    From     Message</span><br><span class=\"line\">  ----    ------                  ----   ----     -------</span><br><span class=\"line\">  Normal  SuccessfullyReconciled  9m16s  ingress  Successfully reconciled</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>完成域名解析后可以访问：<a href=\"https://dashboard.hanqunfeng.com\">https://dashboard.hanqunfeng.com</a></p>\n</li>\n</ul>\n<h2 id=\"清理帐号\">清理帐号</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除管理员ServiceAccount和ClusterRoleBinding</span></span><br><span class=\"line\">$ kubectl -n kubernetes-dashboard delete serviceaccount admin-user</span><br><span class=\"line\">$ kubectl -n kubernetes-dashboard delete clusterrolebinding admin-user</span><br></pre></td></tr></table></figure>\n<h2 id=\"后记\">后记</h2>\n<p>这玩意就是查看资源方便一些，创建资源还是需要精通yaml。</p>\n","content_text":"摘要 本文介绍为EKS集群部署 Dashboard UI 参考资料： Amazon EKS用户指南 Kubernetes 文档 部署 Dashboard UI 官方文档 部署服务 1$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml 创建用户 Dashboard 支持使用 Bearer 令牌登录。 创建用户 12345678910111213141516171819# dashboard-adminuser.yamlapiVersion: v1kind: ServiceAccountmetadata: name: admin-user namespace: kubernetes-dashboard---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: admin-userroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: admin-user namespace: kubernetes-dashboard 授权 这里创建一个 sa admin-user和 ClusterRoleBinding admin-user，利用 ClusterRoleBinding 赋予 sa 访问集群的 admin 权限 1234# 向dashboard的服务帐户授予管理员权限$ k apply -f dashboard-adminuser.yamlserviceaccount/admin-user createdclusterrolebinding.rbac.authorization.k8s.io/admin-user created 获取登录令牌 k8s-1.24后就不再为ServiceAccout提供默认的无到期时间的Secret了，而是需要获取有效期为3600秒的token 1234567891011121314151617181920# 获取登录令牌，这就是一个JWT，可以在 https://jwt.io 中查看解析后的内容$ kubectl -n kubernetes-dashboard create token admin-usereyJhbGciOiJSUzI1NiIsImtpZCI6IjgzMWNkMmM1YTE0YWYzZmYzZWU1MzQwYWIxZWRmNmRjN2Q3ZmI1NGQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTY4OTMwNjUyMSwiaWF0IjoxNjg5MzAyOTIxLCJpc3MiOiJodHRwczovL29pZGMuZWtzLnVzLXdlc3QtMi5hbCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiNDdiZGE0MmQtYTc3YS00NzUzLTg3NjItOTZmNmFmODA3ODI2In19LCJuYmYiOjE2ODkzMDI5MjEsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.fELZiBXQfh2Mn0h8EHbb6BjDSCvHvB2cUDPenbwgMuKIE2NY-pHJdWA0ydZZYGM1aGg2TN0CHZQSMCEAyD3xqXzJF12dThlgVIAXWUWB_PK5_OQ9FSEHJuY2pSvnS0yhtRirbhJFzovYuxymFZjnZWuAJiPlt9k4DCp7rSIIZu89TRzwAlKh_SEnjCMaV4Fvy_Eq7eAxaXHPtatYLrz7vO12vZSA# 令牌有效期为3600秒，到期后需要重启获取令牌并重新登录。这点不是很方便。加上 -o yaml 即可看到过期时间$ kubectl -n kubernetes-dashboard create token admin-user -o yamlapiVersion: authentication.k8s.io/v1kind: TokenRequestmetadata: creationTimestamp: &quot;2023-07-07T02:48:41Z&quot; name: admin-user namespace: kubernetes-dashboardspec: audiences: - https://kubernetes.default.svc boundObjectRef: null expirationSeconds: 3600status: expirationTimestamp: &quot;2023-07-07T03:48:41Z&quot; token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjgzMWNkMmM1YTE0YWYzZmYzZWU1MzQwYWIxZWRmNmRjN2Q3ZmI1NGQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTY4OTMwNjUyMSwiaWF0IjoxNjg5MzAyOTIxLCJpc3MiOiJodHRwczovL29pZGMuZWtzLnVzLXdlc3QtMi5hbCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiNDdiZGE0MmQtYTc3YS00NzUzLTg3NjItOTZmNmFmODA3ODI2In19LCJuYmYiOjE2ODkzMDI5MjEsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.fELZiBXQfh2Mn0h8EHbb6BjDSCvHvB2cUDPenbwgMuKIE2NY-pHJdWA0ydZZYGM1aGg2TN0CHZQSMCEAyD3xqXzJF12dThlgVIAXWUWB_PK5_OQ9FSEHJuY2pSvnS0yhtRirbhJFzovYuxymFZjnZWuAJiPlt9k4DCp7rSIIZu89TRzwAlKh_SEnjCMaV4Fvy_Eq7eAxaXHPtatYLrz7vO12vZSA 访问Dashboard 查看Dashboard 的 service，可以看到 Dashboard 的 Service 的类型都是 ClusterIP，所以我们是无法从外部访问到 Dashboard 的。 1234$ kubectl get svc -n kubernetes-dashboardNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEdashboard-metrics-scraper ClusterIP 10.100.76.198 &lt;none&gt; 8000/TCP 12mkubernetes-dashboard ClusterIP 10.100.171.79 &lt;none&gt; 443/TCP 12m 这时我们有两种方法访问 Dashboard 把 Dashboard 映射到本地 利用 ingress 和 ALB 把外部请求转发到 Dashboard 把 Dashboard 映射到本地 我们可以用 kubectl proxy，也可以用 port-forward 利用 kubectl proxy 开启代理 12345678910# 默认8001端口~ kubectl proxyStarting to serve on 127.0.0.1:8001# 指定端口~ kubectl proxy --port 8888Starting to serve on 127.0.0.1:8888# 关闭代理Ctrl+C 本地访问 可以通过 http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/ 访问。 登录时选择token登录，输入上面获取到的令牌即可，令牌有效期为3600秒，到期后需要重启获取令牌并重新登录。 利用 kubectl port-forward 上面利用 kubectl proxy的方法是把整个 apiserver 通过 proxy 映射到本地，下面我们只把 dashboard 的 deployment(Pod)映射到本地。 首先，我们先要获得 Pod 的访问端口 1234$ kubectl get ep -n kubernetes-dashboardNAME ENDPOINTS AGEdashboard-metrics-scraper 192.168.10.200:8000 5d4hkubernetes-dashboard 192.168.20.125:8443 5d4h 说明：kubernetes-dashboard 对应的 ENDPOINTS 就是pod的ip和端口，这里开启的就是pod的8443端口。 运行以下命令获得 Dashboard deployment 的 name 1234$ kubectl get deployment -n kubernetes-dashboardNAME READY UP-TO-DATE AVAILABLE AGEdashboard-metrics-scraper 1/1 1 1 5d4hkubernetes-dashboard 1/1 1 1 5d4h 说明：kubernetes-dashboard 是 Deployment 的名称 开启本地端口映射，这里映射到本地的8888端口 123$ kubectl port-forward deployment/kubernetes-dashboard -n kubernetes-dashboard 8888:8443Forwarding from 127.0.0.1:8888 -&gt; 8443Forwarding from [::1]:8888 -&gt; 8443 可以通过 https://localhost:8888/#/login 访问。 登录时选择token登录，输入上面获取到的令牌即可，令牌有效期为3600秒，到期后需要重启获取令牌并重新登录。 利用 ingress 和 ALB 把外部请求转发到 Dashboard proxy，port-forward 可以把 apiserver 或者某个 deployment 映射到本地，这对调试一些应用来说很有用处。 不过，这两个都是前台命令，每次查看 Dashboard 都要先运行一下，使用起来确实不方便，下面介绍如何利用 ALB 访问 Dashboard。 前面我们已经介绍过创建基于LoadBalancer的service和ingress，接下来我们就在此基础上完成后续的步骤。 创建ingress 12345678910111213141516171819202122232425262728293031323334# dashboard-ingress.yamlapiVersion: networking.k8s.io/v1kind: Ingressmetadata: namespace: kubernetes-dashboard name: dashboard annotations: alb.ingress.kubernetes.io/actions.ssl-redirect: &#x27;&#123;&quot;Type&quot;: &quot;redirect&quot;, &quot;RedirectConfig&quot;:&#123; &quot;Protocol&quot;: &quot;HTTPS&quot;, &quot;Port&quot;: &quot;443&quot;, &quot;StatusCode&quot;: &quot;HTTP_301&quot;&#125;&#125;&#x27; # http重定向到https alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:743263909655:certificate/e2e3fa54-98ab-427a-9f09-4861122831323e # https证书，就是上面创建的证书的arn alb.ingress.kubernetes.io/listen-ports: &#x27;[&#123;&quot;HTTP&quot;: 80&#125;, &#123;&quot;HTTPS&quot;:443&#125;]&#x27; # 监听端口 alb.ingress.kubernetes.io/scheme: internet-facing # 开放外网访问 alb.ingress.kubernetes.io/target-type: ip alb.ingress.kubernetes.io/backend-protocol: HTTPS # 转发请求用的协议，默认是HTTPspec: ingressClassName: alb # 指定ingressclass类型，k8s-1.18及以后的版本推荐这种配置方式，旧版本需要在注释中加入 kubernetes.io/ingress.class: alb rules: - host: dashboard.hanqunfeng.com # 域名绑定，需要到域名服务商处进行域名解析，CNAME到当前生成的elb http: paths: - path: / # 重定向配置，这里必须配置，否则不能实现重定向 pathType: Prefix backend: service: name: ssl-redirect port: name: use-annotation - path: / pathType: Prefix backend: service: name: kubernetes-dashboard port: number: 443 这里要注意一点，一定要配置alb.ingress.kubernetes.io/backend-protocol: HTTPS，这是转发请求用的协议，默认是HTTP，但是Dashboard应用本身要求访问请求使用HTTPS，所以这里指定HTTPS。如果不指定，则在后面用浏览器访问Dashboard时会报下列错误 1Client sent an HTTP request to an HTTPS server. 1234567891011121314151617181920212223242526272829# 部署ingress$ k apply -f dashboard-ingress.yamlingress.networking.k8s.io/dashboard created# 查看ingress状态$ k describe ing -n kubernetes-dashboard dashboardName: dashboardLabels: &lt;none&gt;Namespace: kubernetes-dashboardAddress: k8s-kubernet-dashboar-043481379b-1952890389.us-west-2.elb.amazonaws.comIngress Class: albDefault backend: &lt;default&gt;Rules: Host Path Backends ---- ---- -------- dashboard.hanqunfeng.com / ssl-redirect:use-annotation (&lt;error: endpoints &quot;ssl-redirect&quot; not found&gt;) / kubernetes-dashboard:443 (192.168.20.125:8443)Annotations: alb.ingress.kubernetes.io/actions.ssl-redirect: &#123;&quot;Type&quot;: &quot;redirect&quot;, &quot;RedirectConfig&quot;:&#123; &quot;Protocol&quot;: &quot;HTTPS&quot;, &quot;Port&quot;: &quot;443&quot;, &quot;StatusCode&quot;: &quot;HTTP_301&quot;&#125;&#125; alb.ingress.kubernetes.io/backend-protocol: HTTPS alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:743263909655:certificate/e2e3fa54-98ab-427a-9f09-4861122831323e alb.ingress.kubernetes.io/listen-ports: [&#123;&quot;HTTP&quot;: 80&#125;, &#123;&quot;HTTPS&quot;:443&#125;] alb.ingress.kubernetes.io/scheme: internet-facing alb.ingress.kubernetes.io/target-type: ipEvents: Type Reason Age From Message ---- ------ ---- ---- ------- Normal SuccessfullyReconciled 9m16s ingress Successfully reconciled 完成域名解析后可以访问：https://dashboard.hanqunfeng.com 清理帐号 123# 删除管理员ServiceAccount和ClusterRoleBinding$ kubectl -n kubernetes-dashboard delete serviceaccount admin-user$ kubectl -n kubernetes-dashboard delete clusterrolebinding admin-user 后记 这玩意就是查看资源方便一些，创建资源还是需要精通yaml。","summary":"摘要 本文介绍为EKS集群部署 Dashboard UI 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T15:30:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks11-metrics/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks11-metrics/","title":"AWS-EKS-11--安装 Kubernetes Metrics Server","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为EKS集群安装 Kubernetes Metrics Server</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"安装-Kubernetes-Metrics-Server\">安装 Kubernetes Metrics Server</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Metrics Server是Kubernetes内置自动缩放管道的可扩展、高效的容器资源指标来源。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Metrics Server从Kubelets收集资源指标，并通过Metrics API在Kubernetes apiserver中公开它们，供Horizontal Pod Autoscaler和Vertical Pod Autoscaler使用。</p>\n</li>\n<li class=\"lvl-2\">\n<p>指标API也可以通过kubectl top访问，从而更容易调试自动缩放管道。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用以下命令部署 Metrics Server</span></span><br><span class=\"line\">~ kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br><span class=\"line\"><span class=\"comment\"># 使用以下命令验证 metrics-server 部署是否运行所需数量的 Pods</span></span><br><span class=\"line\">~ kubectl get deployment metrics-server -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看metrics-server的资源</span></span><br><span class=\"line\">~ k get all -n kube-system -l k8s-app=metrics-server</span><br><span class=\"line\">NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/metrics-server-55c774cdbb-6qpz8   1/1     Running   0          14h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class=\"line\">service/metrics-server   ClusterIP   10.100.231.92   &lt;none&gt;        443/TCP   43h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                             READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/metrics-server   1/1     1            1           43h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                        DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/metrics-server-55c774cdbb   1         1         1       43h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自能查看node和pod的指标</span></span><br><span class=\"line\">~ k top node</span><br><span class=\"line\">NAME                                           CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   29m          1%     544Mi           7%</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    32m          1%     569Mi           8%</span><br><span class=\"line\"></span><br><span class=\"line\">~ k top pod</span><br><span class=\"line\">NAMESPACE     NAME                                  CPU(cores)   MEMORY(bytes)</span><br><span class=\"line\">kube-system   aws-node-fzh9v                        3m           36Mi</span><br><span class=\"line\">kube-system   aws-node-t62f8                        3m           36Mi</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍为EKS集群安装 Kubernetes Metrics Server 参考资料： Amazon EKS用户指南 Kubernetes 文档 安装 Kubernetes Metrics Server Metrics Server是Kubernetes内置自动缩放管道的可扩展、高效的容器资源指标来源。 Metrics Server从Kubelets收集资源指标，并通过Metrics API在Kubernetes apiserver中公开它们，供Horizontal Pod Autoscaler和Vertical Pod Autoscaler使用。 指标API也可以通过kubectl top访问，从而更容易调试自动缩放管道。 1234567891011121314151617181920212223242526272829# 使用以下命令部署 Metrics Server~ kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml# 使用以下命令验证 metrics-server 部署是否运行所需数量的 Pods~ kubectl get deployment metrics-server -n kube-system# 查看metrics-server的资源~ k get all -n kube-system -l k8s-app=metrics-serverNAME READY STATUS RESTARTS AGEpod/metrics-server-55c774cdbb-6qpz8 1/1 Running 0 14hNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEservice/metrics-server ClusterIP 10.100.231.92 &lt;none&gt; 443/TCP 43hNAME READY UP-TO-DATE AVAILABLE AGEdeployment.apps/metrics-server 1/1 1 1 43hNAME DESIRED CURRENT READY AGEreplicaset.apps/metrics-server-55c774cdbb 1 1 1 43h# 自能查看node和pod的指标~ k top nodeNAME CPU(cores) CPU% MEMORY(bytes) MEMORY%ip-192-168-16-155.us-west-2.compute.internal 29m 1% 544Mi 7%ip-192-168-48-14.us-west-2.compute.internal 32m 1% 569Mi 8%~ k top podNAMESPACE NAME CPU(cores) MEMORY(bytes)kube-system aws-node-fzh9v 3m 36Mikube-system aws-node-t62f8 3m 36Mi","summary":"摘要 本文介绍为EKS集群安装 Kubernetes Metrics Server 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T15:20:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks10-iam-share/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks10-iam-share/","title":"AWS-EKS-10--EKS权限管理(上)向其他 IAM 用户授予权限","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍EKS集群如何向其他 IAM 用户授予权限</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"EKS权限管理\">EKS权限管理</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建EKS集群后，默认只有创建集群的 IAM 主体可以访问并管理EKS集群，实际业务中，我们需要将EKS的全部或部分权限分配给指定的用户，就需要对该用户进行授权。</p>\n</li>\n<li class=\"lvl-2\">\n<p>对于 AWS EKS 的权限管理，主要有以下三个方面内容</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">IAM 用户、Role 或者 Account 访问 EKS 相关资源。这里的资源是指 EKS 集群本身的 AWS 资源。比如，EKS 集群信息配置，EC2 节点等等，这里不包括 K8s 中的资源。这部分直接在AWS IAM中进行授权即可。</li>\n<li class=\"lvl-6\">IAM 用户、Role 或者 Account 访问 EKS K8s 资源，这里的资源是指 K8s 内部的资源，比如，K8s 内部的 service account、deployment、service 等等。本章重点讲这部分内容。</li>\n<li class=\"lvl-6\">K8s 内部 Pod 调用 AWS 的资源。比如，通过创建 Ingress 来创建 AWS ALB。这部分在<a href=\"/2023/07/13/aws-eks15-auth-pod/\" title=\"AWS-EKS-15--EKS权限管理(下)Pod 是如何调用 AWS 资源的\">EKS权限管理(下)Pod 是如何调用 AWS 资源的</a>中介绍。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>与IAM用户授权相关的是头两条，即要使 IAM 用户能够访问 EKS 集群本身的 AWS 资源，又要能够访问 K8s 内部的资源。</p>\n</li>\n</ul>\n<h2 id=\"创建-IAM-用户并授权其访问EKS资源\">创建 IAM 用户并授权其访问EKS资源</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>关于如何在IAM中创建用户并授予相应的策略属于<a href=\"https://docs.aws.amazon.com/zh_cn/IAM/latest/UserGuide/introduction.html\">AWS IAM权限管理</a>的范畴，不是本文的重点，作者默认读者已掌握这些内容，重点理解用户、组、角色和策略之间的关系。读者也可以参考<a href=\"https://zhuanlan.zhihu.com/p/379235758\">一文搞懂 AWS IAM 权限 基础篇上 理论</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>在AWS控制台中创建一个用户<code>ekstest</code>，为了保证最小权限原则，这里只为其分配一个内联策略(只针对关联用户)，同时为其创建访问密钥。注意必须为用户至少分配如下策略，以保证IAM用户有权限查看 EKS 集群，否则使用密钥无法通过命令行连通EKS。</p>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;Version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2012-10-17&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;Statement&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;Sid&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;VisualEditor0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;Effect&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Allow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;Action&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eks:DescribeCluster&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;Resource&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;arn:aws:eks:us-west-2:743263909655:cluster/eks-lexing&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"向-IAM-用户授予访问K8s资源的权限\">向 IAM 用户授予访问K8s资源的权限</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建集群的 IAM 主体是唯一可以访问集群的主体。向其他 IAM 主体授予权限，以便它们可以访问您的集群。</p>\n</li>\n<li class=\"lvl-2\">\n<p>ConfigMap aws-auth 在我们向 EKS 添加 node 时就自动创建了，它的作用是允许 node 加入集群。</p>\n</li>\n<li class=\"lvl-2\">\n<p>aws-auth 的另一个作用是控制 AWS 用户或者 role 访问 K8s 内部的资源（准确的说是把外部 IAM 用户与 K8s 内部用户做映射）。</p>\n</li>\n<li class=\"lvl-2\">\n<p>现在 aws-auth 中只有一个 mapRoles，这里的 rolearn 就是我们之前创建EKS时自动创建的，为 EC2 提供权限。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过eksctl查看 ConfigMap 中的aws-auth映射</span></span><br><span class=\"line\">$ eksctl get iamidentitymapping --cluster eks-lexing --profile eks-us-west-2</span><br><span class=\"line\">ARN                                                USERNAME                GROUPS                    ACCOUNT</span><br><span class=\"line\">arn:aws:iam::743263909655:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y55EPJO9XYDG    system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;    system:bootstrappers,system:nodes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过kubectl查看configmap aws-auth</span></span><br><span class=\"line\">$ kubectl describe configmap -n kube-system aws-auth</span><br><span class=\"line\">Name:         aws-auth</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">mapRoles:</span><br><span class=\"line\">----</span><br><span class=\"line\">- <span class=\"built_in\">groups</span>:</span><br><span class=\"line\">  - system:bootstrappers</span><br><span class=\"line\">  - system:nodes</span><br><span class=\"line\">  rolearn: arn:aws:iam::743263909655:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y55EPJO9XYDG</span><br><span class=\"line\">  username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mapUsers:</span><br><span class=\"line\">----</span><br><span class=\"line\">[]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BinaryData</span><br><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>授权–1.角色与组绑定</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 所有命名空间中的 Kubernetes 资源，文件中的组名称为 eks-console-dashboard-full-access-group</span></span><br><span class=\"line\">$ curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/docs/eks-console-full-access.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 特定命名空间中的 Kubernetes 资源 - 此文件中的命名空间为 default，请依据需要修改命名空间名称。文件中的组名为 eks-console-dashboard-restricted-access-group</span></span><br><span class=\"line\">$ curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/docs/eks-console-restricted-access.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里以所有资源为例</span></span><br><span class=\"line\">$ kubectl apply -f eks-console-full-access.yaml</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/eks-console-dashboard-full-access-clusterrole created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/eks-console-dashboard-full-access-binding created</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看上面的yaml文件，可以看到里面定义了<code>ClusterRole</code>和<code>ClusterRoleBinding</code>以及<code>Role</code>和<code>RoleBinding</code>，这是K8s中的 <code>RBAC(Role-based access control )</code> 授权模块中的4个对象:</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><code>Role</code>：设置对 K8s 资源访问的具体权限，与某个 namesapce 相关联</li>\n<li class=\"lvl-6\"><code>ClusterRole</code>：与 <code>Role</code> 类似，区别是不与某个 namepsace 相关联，针对整个 Cluster</li>\n<li class=\"lvl-6\"><code>RoleBinding</code>：把<code>User|Group|ServiceAccount</code>和 <code>Role</code> 绑定，使其获得具体权限</li>\n<li class=\"lvl-6\"><code>ClusterRoleBinding</code>：与 <code>RoleBinding</code> 类似，把<code>User|Group|ServiceAccount</code>和<code>ClusterRole</code>绑定，区别是不与某个 namepsace 相关联</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看集群角色及其绑定</span></span><br><span class=\"line\">k get ClusterRole</span><br><span class=\"line\">k get ClusterRoleBinding</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看角色及其绑定</span></span><br><span class=\"line\">k get Role -A</span><br><span class=\"line\">k get RoleBinding -A</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>授权–2.用户与组绑定</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 为用户添加映射，这里为用户 ekstest 添加权限策略</span></span><br><span class=\"line\">$ eksctl create iamidentitymapping \\</span><br><span class=\"line\">    --cluster eks-lexing --profile eks-us-west-2 \\</span><br><span class=\"line\">    --arn arn:aws:iam::743263909655:user/ekstest \\</span><br><span class=\"line\">    --group eks-console-dashboard-full-access-group \\</span><br><span class=\"line\">    --no-duplicate-arns</span><br><span class=\"line\">2023-07-05 16:28:51 [ℹ]  checking arn arn:aws:iam::743263909655:user/ekstest against entries <span class=\"keyword\">in</span> the auth ConfigMap</span><br><span class=\"line\">2023-07-05 16:28:51 [ℹ]  adding identity <span class=\"string\">&quot;arn:aws:iam::743263909655:user/ekstest&quot;</span> to auth ConfigMap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次通过eksctl查看 ConfigMap 中的aws-auth映射</span></span><br><span class=\"line\">$ eksctl get iamidentitymapping --cluster eks-lexing --profile eks-us-west-2</span><br><span class=\"line\">ARN                                                USERNAME                GROUPS                    ACCOUNT</span><br><span class=\"line\">arn:aws:iam::743263909655:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y55EPJO9XYDG    system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;    system:bootstrappers,system:nodes</span><br><span class=\"line\">arn:aws:iam::743263909655:user/ekstest                                                    eks-console-dashboard-full-access-group</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过kubectl再次查看configmap aws-auth</span></span><br><span class=\"line\"><span class=\"comment\"># 实际上直接编辑也可以: kubectl edit configmap -n kube-system aws-auth</span></span><br><span class=\"line\">$ kubectl describe configmap -n kube-system aws-auth</span><br><span class=\"line\">Name:         aws-auth</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">mapRoles:</span><br><span class=\"line\">----</span><br><span class=\"line\">- <span class=\"built_in\">groups</span>:</span><br><span class=\"line\">  - system:bootstrappers</span><br><span class=\"line\">  - system:nodes</span><br><span class=\"line\">  rolearn: arn:aws:iam::743263909655:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y55EPJO9XYDG</span><br><span class=\"line\">  username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mapUsers:</span><br><span class=\"line\">----</span><br><span class=\"line\">- <span class=\"built_in\">groups</span>:</span><br><span class=\"line\">  - eks-console-dashboard-full-access-group</span><br><span class=\"line\">  userarn: arn:aws:iam::743263909655:user/ekstest</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BinaryData</span><br><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时使用 ekstest 的访问密钥就可以通过命令行访问eks了</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置aws访问密钥</span></span><br><span class=\"line\">$ aws configure --profile ekstest</span><br><span class=\"line\">AWS Access Key ID [None]: AKIA22DP3</span><br><span class=\"line\">AWS Secret Access Key [None]: 9ajQeyy/AiaAC0n1</span><br><span class=\"line\">Default region name [None]: us-west-2</span><br><span class=\"line\">Default output format [None]: json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新 ~/.kube/config</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> AWS_PROFILE=ekstest</span><br><span class=\"line\">$ aws eks update-kubeconfig --name eks-lexing</span><br><span class=\"line\">Added new context arn:aws:eks:us-west-2:743263909655:cluster/eks-lexing to /Users/hanqf/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试命令</span></span><br><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   13d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   13d   v1.26.4-eks-0a21954</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时 ekstest 还不能通过aws控制台中访问eks资源，还需要为其在IAM中授予必要的EKS策略，下面的策略是授予IAM用户对EKS的完全访问权限。</p>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2012-10-17&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Statement&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Sid&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;VisualEditor0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Effect&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Allow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Action&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eks:*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Resource&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"取消授权\">取消授权</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ eksctl delete iamidentitymapping \\</span><br><span class=\"line\">    --cluster eks-lexing --profile eks-us-west-2 \\</span><br><span class=\"line\">    --arn arn:aws:iam::743263909655:user/ekstest</span><br><span class=\"line\">2023-07-05 09:12:29 [ℹ]  removing identity <span class=\"string\">&quot;arn:aws:iam::743263909655:user/ekstest&quot;</span> from auth ConfigMap (username = <span class=\"string\">&quot;&quot;</span>, <span class=\"built_in\">groups</span> = [<span class=\"string\">&quot;eks-console-dashboard-full-access-group&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">$ eksctl get iamidentitymapping --cluster eks-lexing --profile eks-ty-old</span><br><span class=\"line\">ARN                                                USERNAME                GROUPS                    ACCOUNT</span><br><span class=\"line\">arn:aws:iam::743263909655:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y55EPJO9XYDG    system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;    system:bootstrappers,system:nodes</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍EKS集群如何向其他 IAM 用户授予权限 参考资料： Amazon EKS用户指南 Kubernetes 文档 EKS权限管理 创建EKS集群后，默认只有创建集群的 IAM 主体可以访问并管理EKS集群，实际业务中，我们需要将EKS的全部或部分权限分配给指定的用户，就需要对该用户进行授权。 对于 AWS EKS 的权限管理，主要有以下三个方面内容 IAM 用户、Role 或者 Account 访问 EKS 相关资源。这里的资源是指 EKS 集群本身的 AWS 资源。比如，EKS 集群信息配置，EC2 节点等等，这里不包括 K8s 中的资源。这部分直接在AWS IAM中进行授权即可。 IAM 用户、Role 或者 Account 访问 EKS K8s 资源，这里的资源是指 K8s 内部的资源，比如，K8s 内部的 service account、deployment、service 等等。本章重点讲这部分内容。 K8s 内部 Pod 调用 AWS 的资源。比如，通过创建 Ingress 来创建 AWS ALB。这部分在EKS权限管理(下)Pod 是如何调用 AWS 资源的中介绍。 与IAM用户授权相关的是头两条，即要使 IAM 用户能够访问 EKS 集群本身的 AWS 资源，又要能够访问 K8s 内部的资源。 创建 IAM 用户并授权其访问EKS资源 关于如何在IAM中创建用户并授予相应的策略属于AWS IAM权限管理的范畴，不是本文的重点，作者默认读者已掌握这些内容，重点理解用户、组、角色和策略之间的关系。读者也可以参考一文搞懂 AWS IAM 权限 基础篇上 理论 在AWS控制台中创建一个用户ekstest，为了保证最小权限原则，这里只为其分配一个内联策略(只针对关联用户)，同时为其创建访问密钥。注意必须为用户至少分配如下策略，以保证IAM用户有权限查看 EKS 集群，否则使用密钥无法通过命令行连通EKS。 1234567891011&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Sid&quot;: &quot;VisualEditor0&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: &quot;eks:DescribeCluster&quot;, &quot;Resource&quot;: &quot;arn:aws:eks:us-west-2:743263909655:cluster/eks-lexing&quot; &#125; ]&#125; 向 IAM 用户授予访问K8s资源的权限 创建集群的 IAM 主体是唯一可以访问集群的主体。向其他 IAM 主体授予权限，以便它们可以访问您的集群。 ConfigMap aws-auth 在我们向 EKS 添加 node 时就自动创建了，它的作用是允许 node 加入集群。 aws-auth 的另一个作用是控制 AWS 用户或者 role 访问 K8s 内部的资源（准确的说是把外部 IAM 用户与 K8s 内部用户做映射）。 现在 aws-auth 中只有一个 mapRoles，这里的 rolearn 就是我们之前创建EKS时自动创建的，为 EC2 提供权限。 12345678910111213141516171819202122232425262728293031# 通过eksctl查看 ConfigMap 中的aws-auth映射$ eksctl get iamidentitymapping --cluster eks-lexing --profile eks-us-west-2ARN USERNAME GROUPS ACCOUNTarn:aws:iam::743263909655:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y55EPJO9XYDG system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; system:bootstrappers,system:nodes# 也可以通过kubectl查看configmap aws-auth$ kubectl describe configmap -n kube-system aws-authName: aws-authNamespace: kube-systemLabels: &lt;none&gt;Annotations: &lt;none&gt;Data====mapRoles:----- groups: - system:bootstrappers - system:nodes rolearn: arn:aws:iam::743263909655:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y55EPJO9XYDG username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;mapUsers:----[]BinaryData====Events: &lt;none&gt; 授权–1.角色与组绑定 12345678910# 所有命名空间中的 Kubernetes 资源，文件中的组名称为 eks-console-dashboard-full-access-group$ curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/docs/eks-console-full-access.yaml# 特定命名空间中的 Kubernetes 资源 - 此文件中的命名空间为 default，请依据需要修改命名空间名称。文件中的组名为 eks-console-dashboard-restricted-access-group$ curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/docs/eks-console-restricted-access.yaml# 这里以所有资源为例$ kubectl apply -f eks-console-full-access.yamlclusterrole.rbac.authorization.k8s.io/eks-console-dashboard-full-access-clusterrole createdclusterrolebinding.rbac.authorization.k8s.io/eks-console-dashboard-full-access-binding created 查看上面的yaml文件，可以看到里面定义了ClusterRole和ClusterRoleBinding以及Role和RoleBinding，这是K8s中的 RBAC(Role-based access control ) 授权模块中的4个对象: Role：设置对 K8s 资源访问的具体权限，与某个 namesapce 相关联 ClusterRole：与 Role 类似，区别是不与某个 namepsace 相关联，针对整个 Cluster RoleBinding：把User|Group|ServiceAccount和 Role 绑定，使其获得具体权限 ClusterRoleBinding：与 RoleBinding 类似，把User|Group|ServiceAccount和ClusterRole绑定，区别是不与某个 namepsace 相关联 1234567# 查看集群角色及其绑定k get ClusterRolek get ClusterRoleBinding# 查看角色及其绑定k get Role -Ak get RoleBinding -A 授权–2.用户与组绑定 1234567891011121314151617181920212223242526272829303132333435363738394041424344# 为用户添加映射，这里为用户 ekstest 添加权限策略$ eksctl create iamidentitymapping \\ --cluster eks-lexing --profile eks-us-west-2 \\ --arn arn:aws:iam::743263909655:user/ekstest \\ --group eks-console-dashboard-full-access-group \\ --no-duplicate-arns2023-07-05 16:28:51 [ℹ] checking arn arn:aws:iam::743263909655:user/ekstest against entries in the auth ConfigMap2023-07-05 16:28:51 [ℹ] adding identity &quot;arn:aws:iam::743263909655:user/ekstest&quot; to auth ConfigMap# 再次通过eksctl查看 ConfigMap 中的aws-auth映射$ eksctl get iamidentitymapping --cluster eks-lexing --profile eks-us-west-2ARN USERNAME GROUPS ACCOUNTarn:aws:iam::743263909655:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y55EPJO9XYDG system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; system:bootstrappers,system:nodesarn:aws:iam::743263909655:user/ekstest eks-console-dashboard-full-access-group# 也可以通过kubectl再次查看configmap aws-auth# 实际上直接编辑也可以: kubectl edit configmap -n kube-system aws-auth$ kubectl describe configmap -n kube-system aws-authName: aws-authNamespace: kube-systemLabels: &lt;none&gt;Annotations: &lt;none&gt;Data====mapRoles:----- groups: - system:bootstrappers - system:nodes rolearn: arn:aws:iam::743263909655:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y55EPJO9XYDG username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;mapUsers:----- groups: - eks-console-dashboard-full-access-group userarn: arn:aws:iam::743263909655:user/ekstestBinaryData====Events: &lt;none&gt; 此时使用 ekstest 的访问密钥就可以通过命令行访问eks了 123456789101112131415161718# 配置aws访问密钥$ aws configure --profile ekstestAWS Access Key ID [None]: AKIA22DP3AWS Secret Access Key [None]: 9ajQeyy/AiaAC0n1Default region name [None]: us-west-2Default output format [None]: json# 更新 ~/.kube/config$ export AWS_PROFILE=ekstest$ aws eks update-kubeconfig --name eks-lexingAdded new context arn:aws:eks:us-west-2:743263909655:cluster/eks-lexing to /Users/hanqf/.kube/config# 测试命令$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 13d v1.26.4-eks-0a21954ip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 13d v1.26.4-eks-0a21954 此时 ekstest 还不能通过aws控制台中访问eks资源，还需要为其在IAM中授予必要的EKS策略，下面的策略是授予IAM用户对EKS的完全访问权限。 1234567891011&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Sid&quot;: &quot;VisualEditor0&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: &quot;eks:*&quot;, &quot;Resource&quot;: &quot;*&quot; &#125; ]&#125; 取消授权 12345678$ eksctl delete iamidentitymapping \\ --cluster eks-lexing --profile eks-us-west-2 \\ --arn arn:aws:iam::743263909655:user/ekstest2023-07-05 09:12:29 [ℹ] removing identity &quot;arn:aws:iam::743263909655:user/ekstest&quot; from auth ConfigMap (username = &quot;&quot;, groups = [&quot;eks-console-dashboard-full-access-group&quot;])$ eksctl get iamidentitymapping --cluster eks-lexing --profile eks-ty-oldARN USERNAME GROUPS ACCOUNTarn:aws:iam::743263909655:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y55EPJO9XYDG system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; system:bootstrappers,system:nodes","summary":"摘要 本文介绍EKS集群如何向其他 IAM 用户授予权限 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T15:10:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks09-service-ingress/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks09-service-ingress/","title":"AWS-EKS-09--创建基于LoadBalancer的service和ingress","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为EKS集群创建基于LoadBalancer的service和ingress</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<p>前置条件：<a href=\"/2023/07/07/aws-eks07-loadbalancer/\" title=\"AWS-EKS-07--安装 AWS Load Balancer Controller 附加组件\">安装 AWS Load Balancer Controller 附加组件</a></p>\n<h2 id=\"Service\">Service</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>service与elb的绑定关系是通过注释实现的。这里service必须设置为LoadBalancer，一个service就对应一个elb。</p>\n</li>\n<li class=\"lvl-2\">\n<p>创建服务后，请勿编辑注释。如果需要对其进行修改，请删除相应服务对象，然后使用此注释的所需值重新创建它。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing</code> 表示允许外网访问，如果只允许集群内部访问，则去掉该注释即可。</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># eks-loadbalancer-service.yaml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nlb-sample-app</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nlb-sample-app</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">nlb-sample-app</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">public.ecr.aws/nginx/nginx:1.21</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\">              <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nlb-sample-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">nlb-sample-app</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">service.beta.kubernetes.io/aws-load-balancer-type:</span> <span class=\"string\">external</span></span><br><span class=\"line\">    <span class=\"attr\">service.beta.kubernetes.io/aws-load-balancer-nlb-target-type:</span> <span class=\"string\">ip</span></span><br><span class=\"line\">    <span class=\"attr\">service.beta.kubernetes.io/aws-load-balancer-scheme:</span> <span class=\"string\">internet-facing</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">LoadBalancer</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k apply -f eks-loadbalancer-service.yaml</span><br><span class=\"line\">$ k get svc -n nlb-sample-app</span><br><span class=\"line\">NAME                 TYPE           CLUSTER-IP       EXTERNAL-IP                                                                     PORT(S)        AGE</span><br><span class=\"line\">nlb-sample-service   LoadBalancer   10.100.176.186   k8s-nlbsampl-nlbsampl-f492eca1e5-b4b9dd61dd8724e6.elb.us-west-2.amazonaws.com   80:31743/TCP   6m11s</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/3mCM0b.jpg\" alt=\"\" width=\"1200\" height=\"600\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/1sPJve.jpg\" alt=\"\" width=\"800\" height=\"400\"></p>\n<h2 id=\"Ingress\">Ingress</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ingress与elb的绑定关系也是通过注释实现的，一个ingress绑定一个elb，可以同时对多个service提供映射。</p>\n</li>\n<li class=\"lvl-2\">\n<p>为了支持https，需要先创建证书，我这里有一个域名<code>hanqunfeng.com</code>，通过<code>AWS Certificate Manager</code>创建证书</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">我这里使用的是根证书，注意这里一定要添加一个 <code>*.hanqunfeng.com</code> 的域名，否则使用子域名时会提示证书不匹配<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/AWgUqD.jpg\" alt=\"\" width=\"1200\" height=\"800\"></li>\n<li class=\"lvl-6\">去域名服务商处进行域名解析，配制好后等待证书颁发，耗时10分钟左右吧<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/myJkbW.jpg\" alt=\"\" width=\"1200\" height=\"800\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/uuAGn7.jpg\" alt=\"\" width=\"1200\" height=\"150\"></li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>测试用的service.yaml</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">game-2048</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">game-2048</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">deployment-2048</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">app-2048</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">app-2048</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">public.ecr.aws/l6m2t8p7/docker-2048:latest</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">app-2048</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">game-2048</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-2048</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span>   <span class=\"comment\"># 也可以配置为 NodePort 或者 LoadBalancer</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">app-2048</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k apply -f service.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>测试用的ingress.yaml</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">这里为了演示，host都指向了同一个service</li>\n<li class=\"lvl-6\">ingress是通过注释实现与elb的绑定，包括监听端口、80重定向到443、https证书等等</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">game-2048</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-2048</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/actions.ssl-redirect:</span> <span class=\"string\">&#x27;&#123;&quot;Type&quot;: &quot;redirect&quot;, &quot;RedirectConfig&quot;:&#123; &quot;Protocol&quot;: &quot;HTTPS&quot;, &quot;Port&quot;: &quot;443&quot;, &quot;StatusCode&quot;: &quot;HTTP_301&quot;&#125;&#125;&#x27;</span>  <span class=\"comment\"># http重定向到https</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/certificate-arn:</span> <span class=\"string\">arn:aws:acm:us-west-2:743263909655:certificate/e2e3fa54-98ab-427a-9f09-486a9831323e</span> <span class=\"comment\"># https证书，就是上面创建的证书的arn</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/listen-ports:</span> <span class=\"string\">&#x27;[&#123;&quot;HTTP&quot;: 80&#125;, &#123;&quot;HTTPS&quot;:443&#125;]&#x27;</span> <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/scheme:</span> <span class=\"string\">internet-facing</span> <span class=\"comment\"># 开放外网访问</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/target-type:</span> <span class=\"string\">ip</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ingressClassName:</span> <span class=\"string\">alb</span> <span class=\"comment\"># 指定ingressclass类型，k8s-1.18及以后的版本推荐这种配置方式，旧版本需要在注释中加入 kubernetes.io/ingress.class: alb</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">eks.hanqunfeng.com</span> <span class=\"comment\"># 域名绑定，需要到域名服务商处进行域名解析，CNAME到当前生成的elb</span></span><br><span class=\"line\">      <span class=\"attr\">http:</span></span><br><span class=\"line\">        <span class=\"attr\">paths:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span> <span class=\"comment\"># 重定向配置，这里必须配置，否则不能实现重定向</span></span><br><span class=\"line\">          <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">          <span class=\"attr\">backend:</span></span><br><span class=\"line\">            <span class=\"attr\">service:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">ssl-redirect</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">use-annotation</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">          <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">          <span class=\"attr\">backend:</span></span><br><span class=\"line\">            <span class=\"attr\">service:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">service-2048</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span></span><br><span class=\"line\">                <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">aws.hanqunfeng.com</span></span><br><span class=\"line\">      <span class=\"attr\">http:</span></span><br><span class=\"line\">        <span class=\"attr\">paths:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/*</span></span><br><span class=\"line\">          <span class=\"attr\">pathType:</span> <span class=\"string\">ImplementationSpecific</span></span><br><span class=\"line\">          <span class=\"attr\">backend:</span></span><br><span class=\"line\">            <span class=\"attr\">service:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">ssl-redirect</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">use-annotation</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/*</span></span><br><span class=\"line\">          <span class=\"attr\">pathType:</span> <span class=\"string\">ImplementationSpecific</span></span><br><span class=\"line\">          <span class=\"attr\">backend:</span></span><br><span class=\"line\">            <span class=\"attr\">service:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">service-2048</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span></span><br><span class=\"line\">                <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署ingress</span></span><br><span class=\"line\">$ k apply -f ingress.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看ingress</span></span><br><span class=\"line\">$ k describe ing -n game-2048 ingress-2048</span><br><span class=\"line\">Name:             ingress-2048</span><br><span class=\"line\">Labels:           &lt;none&gt;</span><br><span class=\"line\">Namespace:        game-2048</span><br><span class=\"line\">Address:          k8s-game2048-ingress2-1ca4fafb1f-272829398.us-west-2.elb.amazonaws.com</span><br><span class=\"line\">Ingress Class:    alb</span><br><span class=\"line\">Default backend:  &lt;default&gt;</span><br><span class=\"line\">Rules:</span><br><span class=\"line\">  Host                Path  Backends</span><br><span class=\"line\">  ----                ----  --------</span><br><span class=\"line\">  eks.hanqunfeng.com</span><br><span class=\"line\">                      /   ssl-redirect:use-annotation (&lt;error: endpoints <span class=\"string\">&quot;ssl-redirect&quot;</span> not found&gt;)</span><br><span class=\"line\">                      /   service-2048:80 (192.168.0.196:80,192.168.20.125:80,192.168.22.188:80 + 2 more...)</span><br><span class=\"line\">  aws.hanqunfeng.com</span><br><span class=\"line\">                      /*   ssl-redirect:use-annotation (&lt;error: endpoints <span class=\"string\">&quot;ssl-redirect&quot;</span> not found&gt;)</span><br><span class=\"line\">                      /*   service-2048:80 (192.168.0.196:80,192.168.20.125:80,192.168.22.188:80 + 2 more...)</span><br><span class=\"line\">Annotations:          alb.ingress.kubernetes.io/actions.ssl-redirect:</span><br><span class=\"line\">                        &#123;<span class=\"string\">&quot;Type&quot;</span>: <span class=\"string\">&quot;redirect&quot;</span>, <span class=\"string\">&quot;RedirectConfig&quot;</span>:&#123; <span class=\"string\">&quot;Protocol&quot;</span>: <span class=\"string\">&quot;HTTPS&quot;</span>, <span class=\"string\">&quot;Port&quot;</span>: <span class=\"string\">&quot;443&quot;</span>, <span class=\"string\">&quot;StatusCode&quot;</span>: <span class=\"string\">&quot;HTTP_301&quot;</span>&#125;&#125;</span><br><span class=\"line\">                      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:743263909655:certificate/e2e3fa54-98ab-427a-9f09-486a9831323e</span><br><span class=\"line\">                      alb.ingress.kubernetes.io/listen-ports: [&#123;<span class=\"string\">&quot;HTTP&quot;</span>: 80&#125;, &#123;<span class=\"string\">&quot;HTTPS&quot;</span>:443&#125;]</span><br><span class=\"line\">                      alb.ingress.kubernetes.io/scheme: internet-facing</span><br><span class=\"line\">                      alb.ingress.kubernetes.io/target-type: ip</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason                  Age   From     Message</span><br><span class=\"line\">  ----    ------                  ----  ----     -------</span><br><span class=\"line\">  Normal  SuccessfullyReconciled  2s    ingress  Successfully reconciled</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>在 Kubernetes Ingress 规则中，pathType 有三种可能的取值</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">Exact: 使用 Exact 类型时，请求的路径必须与规则中指定的路径完全匹配，包括大小写。这是最精确的匹配方式。</li>\n<li class=\"lvl-2\">Prefix: 使用 Prefix 类型时，请求的路径只需以规则中指定的路径为前缀即可匹配。这种方式可以处理以指定路径为前缀的所有请求。</li>\n<li class=\"lvl-2\">ImplementationSpecific: 使用 ImplementationSpecific 类型时，路径匹配的行为由 Ingress 控制器的具体实现决定。这种类型的路径匹配方式在不同的 Ingress 控制器中可能会有所差异，因此具体行为可能会因实现而异。在 AWS ALB Ingress Controller 中，pathType 的 ImplementationSpecific 类型可以与多个 AWS Load Balancer 的功能集成，包括 Application Load Balancer (ALB)、Network Load Balancer (NLB) 和 Classic Load Balancer (CLB)。我们这里使用的是ALB。</li>\n</ul>\n</div>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ingress创建的elb<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/X1v4p4.jpg\" alt=\"\" width=\"1200\" height=\"800\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/36bhEE.jpg\" alt=\"\" width=\"1200\" height=\"500\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/UilkuJ.jpg\" alt=\"\" width=\"1200\" height=\"500\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>域名解析配置<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/AcPHl2.jpg\" alt=\"\" width=\"1200\" height=\"300\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/DSZBrG.jpg\" alt=\"\" width=\"800\" height=\"800\"></p>\n</li>\n</ul>\n","content_text":"摘要 本文介绍为EKS集群创建基于LoadBalancer的service和ingress 参考资料： Amazon EKS用户指南 Kubernetes 文档 前置条件：安装 AWS Load Balancer Controller 附加组件 Service service与elb的绑定关系是通过注释实现的。这里service必须设置为LoadBalancer，一个service就对应一个elb。 创建服务后，请勿编辑注释。如果需要对其进行修改，请删除相应服务对象，然后使用此注释的所需值重新创建它。 service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing 表示允许外网访问，如果只允许集群内部访问，则去掉该注释即可。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# eks-loadbalancer-service.yaml---apiVersion: v1kind: Namespacemetadata: name: nlb-sample-app---apiVersion: apps/v1kind: Deploymentmetadata: name: nlb-sample-app namespace: nlb-sample-appspec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: public.ecr.aws/nginx/nginx:1.21 ports: - name: tcp containerPort: 80---apiVersion: v1kind: Servicemetadata: name: nlb-sample-service namespace: nlb-sample-app annotations: service.beta.kubernetes.io/aws-load-balancer-type: external service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facingspec: ports: - port: 80 targetPort: 80 protocol: TCP type: LoadBalancer selector: app: nginx 1234$ k apply -f eks-loadbalancer-service.yaml$ k get svc -n nlb-sample-appNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEnlb-sample-service LoadBalancer 10.100.176.186 k8s-nlbsampl-nlbsampl-f492eca1e5-b4b9dd61dd8724e6.elb.us-west-2.amazonaws.com 80:31743/TCP 6m11s Ingress ingress与elb的绑定关系也是通过注释实现的，一个ingress绑定一个elb，可以同时对多个service提供映射。 为了支持https，需要先创建证书，我这里有一个域名hanqunfeng.com，通过AWS Certificate Manager创建证书 我这里使用的是根证书，注意这里一定要添加一个 *.hanqunfeng.com 的域名，否则使用子域名时会提示证书不匹配 去域名服务商处进行域名解析，配制好后等待证书颁发，耗时10分钟左右吧 测试用的service.yaml 12345678910111213141516171819202122232425262728293031323334353637383940apiVersion: v1kind: Namespacemetadata: name: game-2048---apiVersion: apps/v1kind: Deploymentmetadata: namespace: game-2048 name: deployment-2048spec: selector: matchLabels: app.kubernetes.io/name: app-2048 replicas: 5 template: metadata: labels: app.kubernetes.io/name: app-2048 spec: containers: - image: public.ecr.aws/l6m2t8p7/docker-2048:latest imagePullPolicy: Always name: app-2048 ports: - containerPort: 80---apiVersion: v1kind: Servicemetadata: namespace: game-2048 name: service-2048spec: ports: - port: 80 targetPort: 80 protocol: TCP type: ClusterIP # 也可以配置为 NodePort 或者 LoadBalancer selector: app.kubernetes.io/name: app-2048 1$ k apply -f service.yaml 测试用的ingress.yaml 这里为了演示，host都指向了同一个service ingress是通过注释实现与elb的绑定，包括监听端口、80重定向到443、https证书等等 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748apiVersion: networking.k8s.io/v1kind: Ingressmetadata: namespace: game-2048 name: ingress-2048 annotations: alb.ingress.kubernetes.io/actions.ssl-redirect: &#x27;&#123;&quot;Type&quot;: &quot;redirect&quot;, &quot;RedirectConfig&quot;:&#123; &quot;Protocol&quot;: &quot;HTTPS&quot;, &quot;Port&quot;: &quot;443&quot;, &quot;StatusCode&quot;: &quot;HTTP_301&quot;&#125;&#125;&#x27; # http重定向到https alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:743263909655:certificate/e2e3fa54-98ab-427a-9f09-486a9831323e # https证书，就是上面创建的证书的arn alb.ingress.kubernetes.io/listen-ports: &#x27;[&#123;&quot;HTTP&quot;: 80&#125;, &#123;&quot;HTTPS&quot;:443&#125;]&#x27; # 监听端口 alb.ingress.kubernetes.io/scheme: internet-facing # 开放外网访问 alb.ingress.kubernetes.io/target-type: ipspec: ingressClassName: alb # 指定ingressclass类型，k8s-1.18及以后的版本推荐这种配置方式，旧版本需要在注释中加入 kubernetes.io/ingress.class: alb rules: - host: eks.hanqunfeng.com # 域名绑定，需要到域名服务商处进行域名解析，CNAME到当前生成的elb http: paths: - path: / # 重定向配置，这里必须配置，否则不能实现重定向 pathType: Prefix backend: service: name: ssl-redirect port: name: use-annotation - path: / pathType: Prefix backend: service: name: service-2048 port: number: 80 - host: aws.hanqunfeng.com http: paths: - path: /* pathType: ImplementationSpecific backend: service: name: ssl-redirect port: name: use-annotation - path: /* pathType: ImplementationSpecific backend: service: name: service-2048 port: number: 80 123456789101112131415161718192021222324252627282930# 部署ingress$ k apply -f ingress.yaml# 查看ingress$ k describe ing -n game-2048 ingress-2048Name: ingress-2048Labels: &lt;none&gt;Namespace: game-2048Address: k8s-game2048-ingress2-1ca4fafb1f-272829398.us-west-2.elb.amazonaws.comIngress Class: albDefault backend: &lt;default&gt;Rules: Host Path Backends ---- ---- -------- eks.hanqunfeng.com / ssl-redirect:use-annotation (&lt;error: endpoints &quot;ssl-redirect&quot; not found&gt;) / service-2048:80 (192.168.0.196:80,192.168.20.125:80,192.168.22.188:80 + 2 more...) aws.hanqunfeng.com /* ssl-redirect:use-annotation (&lt;error: endpoints &quot;ssl-redirect&quot; not found&gt;) /* service-2048:80 (192.168.0.196:80,192.168.20.125:80,192.168.22.188:80 + 2 more...)Annotations: alb.ingress.kubernetes.io/actions.ssl-redirect: &#123;&quot;Type&quot;: &quot;redirect&quot;, &quot;RedirectConfig&quot;:&#123; &quot;Protocol&quot;: &quot;HTTPS&quot;, &quot;Port&quot;: &quot;443&quot;, &quot;StatusCode&quot;: &quot;HTTP_301&quot;&#125;&#125; alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:743263909655:certificate/e2e3fa54-98ab-427a-9f09-486a9831323e alb.ingress.kubernetes.io/listen-ports: [&#123;&quot;HTTP&quot;: 80&#125;, &#123;&quot;HTTPS&quot;:443&#125;] alb.ingress.kubernetes.io/scheme: internet-facing alb.ingress.kubernetes.io/target-type: ipEvents: Type Reason Age From Message ---- ------ ---- ---- ------- Normal SuccessfullyReconciled 2s ingress Successfully reconciled 在 Kubernetes Ingress 规则中，pathType 有三种可能的取值 Exact: 使用 Exact 类型时，请求的路径必须与规则中指定的路径完全匹配，包括大小写。这是最精确的匹配方式。 Prefix: 使用 Prefix 类型时，请求的路径只需以规则中指定的路径为前缀即可匹配。这种方式可以处理以指定路径为前缀的所有请求。 ImplementationSpecific: 使用 ImplementationSpecific 类型时，路径匹配的行为由 Ingress 控制器的具体实现决定。这种类型的路径匹配方式在不同的 Ingress 控制器中可能会有所差异，因此具体行为可能会因实现而异。在 AWS ALB Ingress Controller 中，pathType 的 ImplementationSpecific 类型可以与多个 AWS Load Balancer 的功能集成，包括 Application Load Balancer (ALB)、Network Load Balancer (NLB) 和 Classic Load Balancer (CLB)。我们这里使用的是ALB。 ingress创建的elb 域名解析配置","summary":"摘要 本文介绍为EKS集群创建基于LoadBalancer的service和ingress 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T14:50:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks08-upgrade-eks/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks08-upgrade-eks/","title":"AWS-EKS-08--升级集群与删除集群","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为EKS集群升级和集群删除的方法</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"升级集群\">升级集群</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>eks升级分为server端升级，工作节点升级，客户端kubectl升级</p>\n</li>\n<li class=\"lvl-2\">\n<p>可以通过aws控制台升级集群，页面上点点按钮就可以了，这里给出的是通过命令行升级集群的方式</p>\n</li>\n<li class=\"lvl-2\">\n<p>每次升级只能升级一个次要版本</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每次升级只能升级一个次要版本，先查看当前版本，当前server端是1.25，client端是1.24，最好也升级一下本地的kubectl client</span></span><br><span class=\"line\">$ kubectl version --short</span><br><span class=\"line\"></span><br><span class=\"line\">Flag --short has been deprecated, and will be removed <span class=\"keyword\">in</span> the future. The --short output will become the default.</span><br><span class=\"line\">Client Version: v1.24.2</span><br><span class=\"line\">Kustomize Version: v4.5.4</span><br><span class=\"line\">Server Version: v1.25.10-eks-c12679a</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将集群升级到1.26</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ eksctl upgrade cluster --name eks-lexing --profile eks-us-west-2 --version 1.26 --approve</span><br><span class=\"line\">2023-06-29 19:03:35 [ℹ]  will upgrade cluster <span class=\"string\">&quot;eks-lexing&quot;</span> control plane from current version <span class=\"string\">&quot;1.25&quot;</span> to <span class=\"string\">&quot;1.26&quot;</span></span><br><span class=\"line\">2023-06-29 19:11:27 [✔]  cluster <span class=\"string\">&quot;eks-lexing&quot;</span> control plane has been upgraded to version <span class=\"string\">&quot;1.26&quot;</span></span><br><span class=\"line\">2023-06-29 19:11:27 [ℹ]  you will need to follow the upgrade procedure <span class=\"keyword\">for</span> all of nodegroups and add-ons</span><br><span class=\"line\">2023-06-29 19:11:29 [ℹ]  re-building cluster stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-29 19:11:29 [✔]  all resources <span class=\"keyword\">in</span> cluster stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span> are up-to-date</span><br><span class=\"line\">2023-06-29 19:11:30 [ℹ]  checking security group configuration <span class=\"keyword\">for</span> all nodegroups</span><br><span class=\"line\">2023-06-29 19:11:30 [ℹ]  all nodegroups have up-to-date cloudformation templates</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看server版本</span></span><br><span class=\"line\">$ kubectl version --short</span><br><span class=\"line\">Flag --short has been deprecated, and will be removed <span class=\"keyword\">in</span> the future. The --short output will become the default.</span><br><span class=\"line\">Client Version: v1.24.2</span><br><span class=\"line\">Kustomize Version: v4.5.4</span><br><span class=\"line\">Server Version: v1.26.6-eks-a5565ad</span><br><span class=\"line\">WARNING: version difference between client (1.24) and server (1.26) exceeds the supported minor version skew of +/-1</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>升级kubectl: 参看<a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/install-kubectl.html\">安装或更新 kubectl</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入到kubectl命令所在目录</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/local/bin</span><br><span class=\"line\"><span class=\"comment\"># 备份原命令</span></span><br><span class=\"line\">$ <span class=\"built_in\">mv</span> kubectl kubectl.back</span><br><span class=\"line\"><span class=\"comment\"># 下载指定版本</span></span><br><span class=\"line\">$ curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.4/2023-05-11/bin/darwin/amd64/kubectl</span><br><span class=\"line\"><span class=\"comment\"># 授予执行权限</span></span><br><span class=\"line\">$ <span class=\"built_in\">chmod</span> +x kubectl</span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">$ k version --short</span><br><span class=\"line\">Flag --short has been deprecated, and will be removed <span class=\"keyword\">in</span> the future. The --short output will become the default.</span><br><span class=\"line\">Client Version: v1.26.4-eks-0a21954</span><br><span class=\"line\">Kustomize Version: v4.5.7</span><br><span class=\"line\">Server Version: v1.26.6-eks-a5565ad</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>升级work节点机版本</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看节点组信息，看到type为managed，表示被托管的节点组，这里要注意，托管和非托管升级方式是不一样的</span></span><br><span class=\"line\">$ eksctl get nodegroup --cluster eks-lexing --profile eks-us-west-2</span><br><span class=\"line\">CLUSTER        NODEGROUP    STATUS    CREATED            MIN SIZE    MAX SIZE    DESIRED CAPACITY    INSTANCE TYPE    IMAGE ID    ASG NAME                    TYPE</span><br><span class=\"line\">eks-lexing    ng-4d9024eb    ACTIVE    2023-06-28T06:30:03Z    2        2        m5.large    AL2_x86_64    eks-ng-4d9024eb-20c48058-e974-c6ec-786a-516c31131604    managed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点组上的k8s版本信息，实际上节点组信息可以通过控制台查看--&gt; EKS-集群--计算</span></span><br><span class=\"line\">$ aws eks describe-nodegroup --cluster-name eks-lexing --profile eks-us-west-2 --nodegroup-name ng-4d9024eb --query <span class=\"string\">&#x27;nodegroup.version&#x27;</span> --output text</span><br><span class=\"line\">1.25</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点信息，这里也会显示k8s的版本，可以看到是v1.25.9</span></span><br><span class=\"line\">$ k get node -owide</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION               INTERNAL-IP      EXTERNAL-IP     OS-IMAGE         KERNEL-VERSION                  CONTAINER-RUNTIME</span><br><span class=\"line\">ip-192-168-25-29.us-west-2.compute.internal    Ready    &lt;none&gt;   28h   v1.25.9-eks-0a21954   192.168.25.29    35.87.26.4      Amazon Linux 2   5.10.179-168.710.amzn2.x86_64   containerd://1.6.19</span><br><span class=\"line\">ip-192-168-47-168.us-west-2.compute.internal   Ready    &lt;none&gt;   28h   v1.25.9-eks-0a21954   192.168.47.168   54.185.178.28   Amazon Linux 2   5.10.179-168.710.amzn2.x86_64   containerd://1.6.19</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 升级节点组，每次也只升级一个次要版本，2个node就用时20多分钟，还是比较慢的</span></span><br><span class=\"line\">$ eksctl upgrade nodegroup --name=ng-4d9024eb --cluster=eks-lexing --profile=eks-us-west-2 --kubernetes-version=1.26</span><br><span class=\"line\">2023-06-29 19:31:24 [ℹ]  setting ForceUpdateEnabled value to <span class=\"literal\">false</span></span><br><span class=\"line\">2023-06-29 19:31:24 [ℹ]  updating nodegroup stack</span><br><span class=\"line\">2023-06-29 19:31:26 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation changeset <span class=\"string\">&quot;eksctl-update-nodegroup-1688038284&quot;</span> <span class=\"keyword\">for</span> stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:31:57 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation changeset <span class=\"string\">&quot;eksctl-update-nodegroup-1688038284&quot;</span> <span class=\"keyword\">for</span> stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:31:58 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:32:29 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:32:30 [ℹ]  upgrading nodegroup version</span><br><span class=\"line\">2023-06-29 19:32:30 [ℹ]  updating nodegroup stack</span><br><span class=\"line\">2023-06-29 19:32:31 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation changeset <span class=\"string\">&quot;eksctl-update-nodegroup-1688038350&quot;</span> <span class=\"keyword\">for</span> stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:33:03 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation changeset <span class=\"string\">&quot;eksctl-update-nodegroup-1688038350&quot;</span> <span class=\"keyword\">for</span> stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:33:04 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:33:35 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:34:33 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:36:24 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:38:11 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:39:11 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:39:58 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:41:28 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:43:27 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:44:26 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:45:48 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:47:06 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:48:35 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:50:04 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:50:44 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:51:57 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:53:36 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-29 19:53:36 [ℹ]  nodegroup successfully upgraded</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次查看版本</span></span><br><span class=\"line\">$ aws eks describe-nodegroup --cluster-name eks-lexing --profile eks-us-west-2 --nodegroup-name ng-4d9024eb --query <span class=\"string\">&#x27;nodegroup.version&#x27;</span> --output text</span><br><span class=\"line\">1.26</span><br><span class=\"line\"></span><br><span class=\"line\">$ k get node -owide</span><br><span class=\"line\">NAME                                          STATUS   ROLES    AGE   VERSION               INTERNAL-IP     EXTERNAL-IP      OS-IMAGE         KERNEL-VERSION                  CONTAINER-RUNTIME</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal   Ready    &lt;none&gt;   20m   v1.26.4-eks-0a21954   192.168.48.14   54.212.74.15     Amazon Linux 2   5.10.179-168.710.amzn2.x86_64   containerd://1.6.19</span><br><span class=\"line\">ip-192-168-69-81.us-west-2.compute.internal   Ready    &lt;none&gt;   21m   v1.26.4-eks-0a21954   192.168.69.81   44.242.163.187   Amazon Linux 2   5.10.179-168.710.amzn2.x86_64   containerd://1.6.19</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>升级之后可以登录aws控制台查看一下相关插件是否需要升级，如果需要直接在页面上点击升级即可。</p>\n</li>\n</ul>\n<h2 id=\"删除集群\">删除集群</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>从<a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/delete-cluster.html\">官方文档</a>中可以看到可以使用 eksctl、AWS Management Console 或 AWS CLI 删除集群，这里以eksctl为例说明。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果集群中具有与负载均衡器关联的有效服务，则必须先删除这些服务，然后再删除集群，以便正确删除负载均衡器。否则，VPC 中可能有阻止您删除 VPC 的孤立资源。</p>\n</li>\n<li class=\"lvl-2\">\n<p>列出集群中运行的所有服务</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get svc --all-namespaces</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除具有关联的 EXTERNAL-IP 值的任何服务。这些服务的前面配置了一个 Elastic Load Balancing 负载均衡器，您必须从 Kubernetes 中将其删除才能释放负载均衡器和关联资源</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl delete svc `service-name`</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除集群</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 运行时间基于当前集群所使用的资源规模，超过10分钟</span></span><br><span class=\"line\">$ eksctl delete cluster --name eks-lexing  --profile myProfile</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除完成后检查一下对应的ec2,负载均衡器,目标群组,vpc,安全组,弹性ip,卷,net网关以及CloudFormation<br>\n是否都已经删除，如果有遗漏需要手工删除。</p>\n</li>\n</ul>\n","content_text":"摘要 本文介绍为EKS集群升级和集群删除的方法 参考资料： Amazon EKS用户指南 Kubernetes 文档 升级集群 eks升级分为server端升级，工作节点升级，客户端kubectl升级 可以通过aws控制台升级集群，页面上点点按钮就可以了，这里给出的是通过命令行升级集群的方式 每次升级只能升级一个次要版本 1234567# 每次升级只能升级一个次要版本，先查看当前版本，当前server端是1.25，client端是1.24，最好也升级一下本地的kubectl client$ kubectl version --shortFlag --short has been deprecated, and will be removed in the future. The --short output will become the default.Client Version: v1.24.2Kustomize Version: v4.5.4Server Version: v1.25.10-eks-c12679a 将集群升级到1.26 12345678910111213141516$ eksctl upgrade cluster --name eks-lexing --profile eks-us-west-2 --version 1.26 --approve2023-06-29 19:03:35 [ℹ] will upgrade cluster &quot;eks-lexing&quot; control plane from current version &quot;1.25&quot; to &quot;1.26&quot;2023-06-29 19:11:27 [✔] cluster &quot;eks-lexing&quot; control plane has been upgraded to version &quot;1.26&quot;2023-06-29 19:11:27 [ℹ] you will need to follow the upgrade procedure for all of nodegroups and add-ons2023-06-29 19:11:29 [ℹ] re-building cluster stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-29 19:11:29 [✔] all resources in cluster stack &quot;eksctl-eks-lexing-cluster&quot; are up-to-date2023-06-29 19:11:30 [ℹ] checking security group configuration for all nodegroups2023-06-29 19:11:30 [ℹ] all nodegroups have up-to-date cloudformation templates# 查看server版本$ kubectl version --shortFlag --short has been deprecated, and will be removed in the future. The --short output will become the default.Client Version: v1.24.2Kustomize Version: v4.5.4Server Version: v1.26.6-eks-a5565adWARNING: version difference between client (1.24) and server (1.26) exceeds the supported minor version skew of +/-1 升级kubectl: 参看安装或更新 kubectl 1234567891011121314# 进入到kubectl命令所在目录$ cd /usr/local/bin# 备份原命令$ mv kubectl kubectl.back# 下载指定版本$ curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.4/2023-05-11/bin/darwin/amd64/kubectl# 授予执行权限$ chmod +x kubectl# 查看版本$ k version --shortFlag --short has been deprecated, and will be removed in the future. The --short output will become the default.Client Version: v1.26.4-eks-0a21954Kustomize Version: v4.5.7Server Version: v1.26.6-eks-a5565ad 升级work节点机版本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# 查看节点组信息，看到type为managed，表示被托管的节点组，这里要注意，托管和非托管升级方式是不一样的$ eksctl get nodegroup --cluster eks-lexing --profile eks-us-west-2CLUSTER NODEGROUP STATUS CREATED MIN SIZE MAX SIZE DESIRED CAPACITY INSTANCE TYPE IMAGE ID ASG NAME TYPEeks-lexing ng-4d9024eb ACTIVE 2023-06-28T06:30:03Z 2 2 m5.large AL2_x86_64 eks-ng-4d9024eb-20c48058-e974-c6ec-786a-516c31131604 managed# 查看节点组上的k8s版本信息，实际上节点组信息可以通过控制台查看--&gt; EKS-集群--计算$ aws eks describe-nodegroup --cluster-name eks-lexing --profile eks-us-west-2 --nodegroup-name ng-4d9024eb --query &#x27;nodegroup.version&#x27; --output text1.25# 查看节点信息，这里也会显示k8s的版本，可以看到是v1.25.9$ k get node -owideNAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIMEip-192-168-25-29.us-west-2.compute.internal Ready &lt;none&gt; 28h v1.25.9-eks-0a21954 192.168.25.29 35.87.26.4 Amazon Linux 2 5.10.179-168.710.amzn2.x86_64 containerd://1.6.19ip-192-168-47-168.us-west-2.compute.internal Ready &lt;none&gt; 28h v1.25.9-eks-0a21954 192.168.47.168 54.185.178.28 Amazon Linux 2 5.10.179-168.710.amzn2.x86_64 containerd://1.6.19# 升级节点组，每次也只升级一个次要版本，2个node就用时20多分钟，还是比较慢的$ eksctl upgrade nodegroup --name=ng-4d9024eb --cluster=eks-lexing --profile=eks-us-west-2 --kubernetes-version=1.262023-06-29 19:31:24 [ℹ] setting ForceUpdateEnabled value to false2023-06-29 19:31:24 [ℹ] updating nodegroup stack2023-06-29 19:31:26 [ℹ] waiting for CloudFormation changeset &quot;eksctl-update-nodegroup-1688038284&quot; for stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:31:57 [ℹ] waiting for CloudFormation changeset &quot;eksctl-update-nodegroup-1688038284&quot; for stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:31:58 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:32:29 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:32:30 [ℹ] upgrading nodegroup version2023-06-29 19:32:30 [ℹ] updating nodegroup stack2023-06-29 19:32:31 [ℹ] waiting for CloudFormation changeset &quot;eksctl-update-nodegroup-1688038350&quot; for stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:33:03 [ℹ] waiting for CloudFormation changeset &quot;eksctl-update-nodegroup-1688038350&quot; for stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:33:04 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:33:35 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:34:33 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:36:24 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:38:11 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:39:11 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:39:58 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:41:28 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:43:27 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:44:26 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:45:48 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:47:06 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:48:35 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:50:04 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:50:44 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:51:57 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:53:36 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-29 19:53:36 [ℹ] nodegroup successfully upgraded# 再次查看版本$ aws eks describe-nodegroup --cluster-name eks-lexing --profile eks-us-west-2 --nodegroup-name ng-4d9024eb --query &#x27;nodegroup.version&#x27; --output text1.26$ k get node -owideNAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIMEip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 20m v1.26.4-eks-0a21954 192.168.48.14 54.212.74.15 Amazon Linux 2 5.10.179-168.710.amzn2.x86_64 containerd://1.6.19ip-192-168-69-81.us-west-2.compute.internal Ready &lt;none&gt; 21m v1.26.4-eks-0a21954 192.168.69.81 44.242.163.187 Amazon Linux 2 5.10.179-168.710.amzn2.x86_64 containerd://1.6.19 升级之后可以登录aws控制台查看一下相关插件是否需要升级，如果需要直接在页面上点击升级即可。 删除集群 从官方文档中可以看到可以使用 eksctl、AWS Management Console 或 AWS CLI 删除集群，这里以eksctl为例说明。 如果集群中具有与负载均衡器关联的有效服务，则必须先删除这些服务，然后再删除集群，以便正确删除负载均衡器。否则，VPC 中可能有阻止您删除 VPC 的孤立资源。 列出集群中运行的所有服务 1$ kubectl get svc --all-namespaces 删除具有关联的 EXTERNAL-IP 值的任何服务。这些服务的前面配置了一个 Elastic Load Balancing 负载均衡器，您必须从 Kubernetes 中将其删除才能释放负载均衡器和关联资源 1$ kubectl delete svc `service-name` 删除集群 12# 运行时间基于当前集群所使用的资源规模，超过10分钟$ eksctl delete cluster --name eks-lexing --profile myProfile 删除完成后检查一下对应的ec2,负载均衡器,目标群组,vpc,安全组,弹性ip,卷,net网关以及CloudFormation 是否都已经删除，如果有遗漏需要手工删除。","summary":"摘要 本文介绍为EKS集群升级和集群删除的方法 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T14:40:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks07-loadbalancer/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks07-loadbalancer/","title":"AWS-EKS-07--安装 AWS Load Balancer Controller 附加组件","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为EKS集群安装 AWS Load Balancer Controller 附加组件</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"安装-AWS-Load-Balancer-Controller-附加组件\">安装 AWS Load Balancer Controller 附加组件</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>AWS Load Balancer Controller 管理适用于 Kubernetes 集群的 AWS 弹性负载均衡器。此控制器预置以下资源：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">当您创建 Kubernetes Ingress 时的 AWS 应用程序负载均衡器 (ALB, Application Load Balancer)。</li>\n<li class=\"lvl-6\">当您创建 LoadBalancer 类型的 Kubernetes 服务时的 AWS 网络负载均衡器（NLB）。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>关于如何创建ingress和service，后面会介绍。</p>\n</li>\n</ul>\n<h3 id=\"创建一个-IAM-policy\">创建一个 IAM policy</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载 AWS Load Balancer Controller 的 IAM policy，该策略允许负载均衡器代表您调用 AWS API。</span></span><br><span class=\"line\">$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用上一步中下载的策略创建一个 IAM policy</span></span><br><span class=\"line\">$ aws iam create-policy \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --policy-name AWSLoadBalancerControllerIAMPolicy \\</span><br><span class=\"line\">    --policy-document file://iam_policy.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Policy&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;PolicyName&quot;</span>: <span class=\"string\">&quot;AWSLoadBalancerControllerIAMPolicy&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;PolicyId&quot;</span>: <span class=\"string\">&quot;ANPA22DP3G4GO5O54MRRX&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909655:policy/AWSLoadBalancerControllerIAMPolicy&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Path&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;DefaultVersionId&quot;</span>: <span class=\"string\">&quot;v1&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;AttachmentCount&quot;</span>: 0,</span><br><span class=\"line\">        <span class=\"string\">&quot;PermissionsBoundaryUsageCount&quot;</span>: 0,</span><br><span class=\"line\">        <span class=\"string\">&quot;IsAttachable&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreateDate&quot;</span>: <span class=\"string\">&quot;2023-07-04T09:15:56+00:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;UpdateDate&quot;</span>: <span class=\"string\">&quot;2023-07-04T09:15:56+00:00&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建一个-IAM-角色\">创建一个 IAM 角色</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 AWS Load Balancer Controller 的 kube-system 命名空间中创建名为 aws-load-balancer-controller 的 Kubernetes 服务账户，并使用 IAM 角色的名称注释 Kubernetes 服务账户。</span></span><br><span class=\"line\">$ eksctl create iamserviceaccount \\</span><br><span class=\"line\">  --cluster=eks-lexing \\</span><br><span class=\"line\">  --profile eks-us-west-2 \\</span><br><span class=\"line\">  --namespace=kube-system \\</span><br><span class=\"line\">  --name=aws-load-balancer-controller \\</span><br><span class=\"line\">  --role-name AmazonEKSLoadBalancerControllerRole \\</span><br><span class=\"line\">  --attach-policy-arn=arn:aws:iam::743263909655:policy/AWSLoadBalancerControllerIAMPolicy \\</span><br><span class=\"line\">  --approve</span><br><span class=\"line\">2023-07-04 17:20:08 [ℹ]  3 existing iamserviceaccount(s) (kube-system/aws-node,kube-system/ebs-csi-controller-sa,kube-system/efs-csi-controller-sa) will be excluded</span><br><span class=\"line\">2023-07-04 17:20:08 [ℹ]  1 iamserviceaccount (kube-system/aws-load-balancer-controller) was included (based on the include/exclude rules)</span><br><span class=\"line\">2023-07-04 17:20:08 [!]  serviceaccounts that exist <span class=\"keyword\">in</span> Kubernetes will be excluded, use --override-existing-serviceaccounts to override</span><br><span class=\"line\">2023-07-04 17:20:08 [ℹ]  1 task: &#123;</span><br><span class=\"line\">    2 sequential sub-tasks: &#123;</span><br><span class=\"line\">        create IAM role <span class=\"keyword\">for</span> serviceaccount <span class=\"string\">&quot;kube-system/aws-load-balancer-controller&quot;</span>,</span><br><span class=\"line\">        create serviceaccount <span class=\"string\">&quot;kube-system/aws-load-balancer-controller&quot;</span>,</span><br><span class=\"line\">    &#125; &#125;2023-07-04 17:20:08 [ℹ]  building iamserviceaccount stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-load-balancer-controller&quot;</span></span><br><span class=\"line\">2023-07-04 17:20:09 [ℹ]  deploying stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-load-balancer-controller&quot;</span></span><br><span class=\"line\">2023-07-04 17:20:09 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-load-balancer-controller&quot;</span></span><br><span class=\"line\">2023-07-04 17:20:40 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-load-balancer-controller&quot;</span></span><br><span class=\"line\">2023-07-04 17:20:41 [ℹ]  created serviceaccount <span class=\"string\">&quot;kube-system/aws-load-balancer-controller&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Helm-V3来安装-AWS-Load-Balancer-Controller\">使用 Helm V3来安装 AWS Load Balancer Controller</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加 eks-charts 存储库</span></span><br><span class=\"line\">$ helm repo add eks https://aws.github.io/eks-charts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新您的本地存储库，以确保您拥有最新的图表</span></span><br><span class=\"line\">$ helm repo update eks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 AWS Load Balancer Controller</span></span><br><span class=\"line\">$ helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> clusterName=eks-lexing \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.create=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.name=aws-load-balancer-controller</span><br><span class=\"line\">NAME: aws-load-balancer-controller</span><br><span class=\"line\">LAST DEPLOYED: Tue Jul  4 17:26:05 2023</span><br><span class=\"line\">NAMESPACE: kube-system</span><br><span class=\"line\">STATUS: deployed</span><br><span class=\"line\">REVISION: 1</span><br><span class=\"line\">TEST SUITE: None</span><br><span class=\"line\">NOTES:</span><br><span class=\"line\">AWS Load Balancer controller installed!</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证控制器是否已经安装\">验证控制器是否已经安装</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看deployment</span></span><br><span class=\"line\">$ kubectl get deployment -n kube-system aws-load-balancer-controller</span><br><span class=\"line\">NAME                           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">aws-load-balancer-controller   2/2     2            2           21s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看ingressclasses</span></span><br><span class=\"line\">$ k get ingressclasses</span><br><span class=\"line\">NAME   CONTROLLER            PARAMETERS   AGE</span><br><span class=\"line\">alb    ingress.k8s.aws/alb   &lt;none&gt;       21s</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新AWS-Load-Balancer-Controller\">更新AWS Load Balancer Controller</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>已部署的图表不会自动接收安全更新。当新图表可用时，您需要手动升级到新图表。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新AWS Load Balancer Controller</span></span><br><span class=\"line\">$ kubectl apply -k <span class=\"string\">&quot;github.com/aws/eks-charts/stable/aws-load-balancer-controller/crds?ref=master&quot;</span></span><br><span class=\"line\">Warning: resource customresourcedefinitions/ingressclassparams.elbv2.k8s.aws is missing the kubectl.kubernetes.io/last-applied-configuration annotation <span class=\"built_in\">which</span> is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/ingressclassparams.elbv2.k8s.aws configured</span><br><span class=\"line\">Warning: resource customresourcedefinitions/targetgroupbindings.elbv2.k8s.aws is missing the kubectl.kubernetes.io/last-applied-configuration annotation <span class=\"built_in\">which</span> is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/targetgroupbindings.elbv2.k8s.aws configured</span><br><span class=\"line\"></span><br><span class=\"line\">$ helm upgrade aws-load-balancer-controller eks/aws-load-balancer-controller \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> clusterName=eks-lexing \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.create=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.name=aws-load-balancer-controller</span><br><span class=\"line\">Release <span class=\"string\">&quot;aws-load-balancer-controller&quot;</span> has been upgraded. Happy Helming!</span><br><span class=\"line\">NAME: aws-load-balancer-controller</span><br><span class=\"line\">LAST DEPLOYED: Tue Jul  4 17:31:37 2023</span><br><span class=\"line\">NAMESPACE: kube-system</span><br><span class=\"line\">STATUS: deployed</span><br><span class=\"line\">REVISION: 2</span><br><span class=\"line\">TEST SUITE: None</span><br><span class=\"line\">NOTES:</span><br><span class=\"line\">AWS Load Balancer controller installed!</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>可以先查看是否有可用更新</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看通过helm已经安装了哪些发布包及其版本</span></span><br><span class=\"line\">$ helm list --all-namespaces</span><br><span class=\"line\">NAME                        \tNAMESPACE  \tREVISION\tUPDATED                             \tSTATUS  \tCHART                             \tAPP VERSION</span><br><span class=\"line\">aws-efs-csi-driver          \tkube-system\t3       \t2023-07-03 16:08:38.481521 +0800 CST\tdeployed\taws-efs-csi-driver-2.4.6          \t1.5.7</span><br><span class=\"line\">aws-load-balancer-controller\tkube-system\t2       \t2023-07-04 17:31:37.839466 +0800 CST\tdeployed\taws-load-balancer-controller-1.5.4\tv2.5.3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新仓库最新的索引</span></span><br><span class=\"line\">$ helm repo update</span><br><span class=\"line\">Hang tight <span class=\"keyword\">while</span> we grab the latest from your chart repositories...</span><br><span class=\"line\">...Successfully got an update from the <span class=\"string\">&quot;aws-efs-csi-driver&quot;</span> chart repository</span><br><span class=\"line\">...Successfully got an update from the <span class=\"string\">&quot;eks&quot;</span> chart repository</span><br><span class=\"line\">Update Complete. ⎈Happy Helming!⎈</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看可用的最新版本</span></span><br><span class=\"line\">$ helm search repo load-balancer</span><br><span class=\"line\">NAME                            \tCHART VERSION\tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.4        \tv2.5.3     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有版本</span></span><br><span class=\"line\">$ helm search repo load-balancer -l</span><br><span class=\"line\">NAME                            \tCHART VERSION\tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.4        \tv2.5.3     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.3        \tv2.5.2     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.2        \tv2.5.1     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.1        \tv2.5.1     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.0        \tv2.5.0     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.4.8        \tv2.4.7     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.4.7        \tv2.4.6     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍为EKS集群安装 AWS Load Balancer Controller 附加组件 参考资料： Amazon EKS用户指南 Kubernetes 文档 安装 AWS Load Balancer Controller 附加组件 AWS Load Balancer Controller 管理适用于 Kubernetes 集群的 AWS 弹性负载均衡器。此控制器预置以下资源： 当您创建 Kubernetes Ingress 时的 AWS 应用程序负载均衡器 (ALB, Application Load Balancer)。 当您创建 LoadBalancer 类型的 Kubernetes 服务时的 AWS 网络负载均衡器（NLB）。 关于如何创建ingress和service，后面会介绍。 创建一个 IAM policy 12345678910111213141516171819202122# 下载 AWS Load Balancer Controller 的 IAM policy，该策略允许负载均衡器代表您调用 AWS API。$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json# 使用上一步中下载的策略创建一个 IAM policy$ aws iam create-policy \\ --profile eks-us-west-2 \\ --policy-name AWSLoadBalancerControllerIAMPolicy \\ --policy-document file://iam_policy.json&#123; &quot;Policy&quot;: &#123; &quot;PolicyName&quot;: &quot;AWSLoadBalancerControllerIAMPolicy&quot;, &quot;PolicyId&quot;: &quot;ANPA22DP3G4GO5O54MRRX&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909655:policy/AWSLoadBalancerControllerIAMPolicy&quot;, &quot;Path&quot;: &quot;/&quot;, &quot;DefaultVersionId&quot;: &quot;v1&quot;, &quot;AttachmentCount&quot;: 0, &quot;PermissionsBoundaryUsageCount&quot;: 0, &quot;IsAttachable&quot;: true, &quot;CreateDate&quot;: &quot;2023-07-04T09:15:56+00:00&quot;, &quot;UpdateDate&quot;: &quot;2023-07-04T09:15:56+00:00&quot; &#125;&#125; 创建一个 IAM 角色 123456789101112131415161718192021# 在 AWS Load Balancer Controller 的 kube-system 命名空间中创建名为 aws-load-balancer-controller 的 Kubernetes 服务账户，并使用 IAM 角色的名称注释 Kubernetes 服务账户。$ eksctl create iamserviceaccount \\ --cluster=eks-lexing \\ --profile eks-us-west-2 \\ --namespace=kube-system \\ --name=aws-load-balancer-controller \\ --role-name AmazonEKSLoadBalancerControllerRole \\ --attach-policy-arn=arn:aws:iam::743263909655:policy/AWSLoadBalancerControllerIAMPolicy \\ --approve2023-07-04 17:20:08 [ℹ] 3 existing iamserviceaccount(s) (kube-system/aws-node,kube-system/ebs-csi-controller-sa,kube-system/efs-csi-controller-sa) will be excluded2023-07-04 17:20:08 [ℹ] 1 iamserviceaccount (kube-system/aws-load-balancer-controller) was included (based on the include/exclude rules)2023-07-04 17:20:08 [!] serviceaccounts that exist in Kubernetes will be excluded, use --override-existing-serviceaccounts to override2023-07-04 17:20:08 [ℹ] 1 task: &#123; 2 sequential sub-tasks: &#123; create IAM role for serviceaccount &quot;kube-system/aws-load-balancer-controller&quot;, create serviceaccount &quot;kube-system/aws-load-balancer-controller&quot;, &#125; &#125;2023-07-04 17:20:08 [ℹ] building iamserviceaccount stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-load-balancer-controller&quot;2023-07-04 17:20:09 [ℹ] deploying stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-load-balancer-controller&quot;2023-07-04 17:20:09 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-load-balancer-controller&quot;2023-07-04 17:20:40 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-load-balancer-controller&quot;2023-07-04 17:20:41 [ℹ] created serviceaccount &quot;kube-system/aws-load-balancer-controller&quot; 使用 Helm V3来安装 AWS Load Balancer Controller 1234567891011121314151617181920# 添加 eks-charts 存储库$ helm repo add eks https://aws.github.io/eks-charts# 更新您的本地存储库，以确保您拥有最新的图表$ helm repo update eks# 安装 AWS Load Balancer Controller$ helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\ -n kube-system \\ --set clusterName=eks-lexing \\ --set serviceAccount.create=false \\ --set serviceAccount.name=aws-load-balancer-controllerNAME: aws-load-balancer-controllerLAST DEPLOYED: Tue Jul 4 17:26:05 2023NAMESPACE: kube-systemSTATUS: deployedREVISION: 1TEST SUITE: NoneNOTES:AWS Load Balancer controller installed! 验证控制器是否已经安装 123456789# 查看deployment$ kubectl get deployment -n kube-system aws-load-balancer-controllerNAME READY UP-TO-DATE AVAILABLE AGEaws-load-balancer-controller 2/2 2 2 21s# 查看ingressclasses$ k get ingressclassesNAME CONTROLLER PARAMETERS AGEalb ingress.k8s.aws/alb &lt;none&gt; 21s 更新AWS Load Balancer Controller 已部署的图表不会自动接收安全更新。当新图表可用时，您需要手动升级到新图表。 123456789101112131415161718192021# 更新AWS Load Balancer Controller$ kubectl apply -k &quot;github.com/aws/eks-charts/stable/aws-load-balancer-controller/crds?ref=master&quot;Warning: resource customresourcedefinitions/ingressclassparams.elbv2.k8s.aws is missing the kubectl.kubernetes.io/last-applied-configuration annotation which is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.customresourcedefinition.apiextensions.k8s.io/ingressclassparams.elbv2.k8s.aws configuredWarning: resource customresourcedefinitions/targetgroupbindings.elbv2.k8s.aws is missing the kubectl.kubernetes.io/last-applied-configuration annotation which is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.customresourcedefinition.apiextensions.k8s.io/targetgroupbindings.elbv2.k8s.aws configured$ helm upgrade aws-load-balancer-controller eks/aws-load-balancer-controller \\ -n kube-system \\ --set clusterName=eks-lexing \\ --set serviceAccount.create=false \\ --set serviceAccount.name=aws-load-balancer-controllerRelease &quot;aws-load-balancer-controller&quot; has been upgraded. Happy Helming!NAME: aws-load-balancer-controllerLAST DEPLOYED: Tue Jul 4 17:31:37 2023NAMESPACE: kube-systemSTATUS: deployedREVISION: 2TEST SUITE: NoneNOTES:AWS Load Balancer controller installed! 可以先查看是否有可用更新 1234567891011121314151617181920212223242526272829# 查看通过helm已经安装了哪些发布包及其版本$ helm list --all-namespacesNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSIONaws-efs-csi-driver kube-system 3 2023-07-03 16:08:38.481521 +0800 CST deployed aws-efs-csi-driver-2.4.6 1.5.7aws-load-balancer-controller kube-system 2 2023-07-04 17:31:37.839466 +0800 CST deployed aws-load-balancer-controller-1.5.4 v2.5.3# 更新仓库最新的索引$ helm repo updateHang tight while we grab the latest from your chart repositories......Successfully got an update from the &quot;aws-efs-csi-driver&quot; chart repository...Successfully got an update from the &quot;eks&quot; chart repositoryUpdate Complete. ⎈Happy Helming!⎈# 查看可用的最新版本$ helm search repo load-balancerNAME CHART VERSION APP VERSION DESCRIPTIONeks/aws-load-balancer-controller 1.5.4 v2.5.3 AWS Load Balancer Controller Helm chart for Kub...# 查看所有版本$ helm search repo load-balancer -lNAME CHART VERSION APP VERSION DESCRIPTIONeks/aws-load-balancer-controller 1.5.4 v2.5.3 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.3 v2.5.2 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.2 v2.5.1 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.1 v2.5.1 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.0 v2.5.0 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.4.8 v2.4.7 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.4.7 v2.4.6 AWS Load Balancer Controller Helm chart for Kub...","summary":"摘要 本文介绍为EKS集群安装 AWS Load Balancer Controller 附加组件 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T14:33:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks06-efs-csi/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks06-efs-csi/","title":"AWS-EKS-06--安装 Amazon EFS CSI 驱动程序","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为EKS集群安装 Amazon EFS CSI 驱动程序</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"EFS和EBS的选择？\">EFS和EBS的选择？</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>如果是同一个Pod内的多个容器之间的存储共享，您可以考虑使用EBS卷。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果是不同的Pod之间的存储共享，此时由于可能跨可用区，您可以考虑使用EFS文件系统。</p>\n</li>\n</ul>\n<h2 id=\"安装-Amazon-EFS-CSI-驱动程序\">安装 Amazon EFS CSI 驱动程序</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建 IAM policy和角色</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从 GitHub 下载 IAM policy 文档</span></span><br><span class=\"line\">$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-efs-csi-driver/master/docs/iam-policy-example.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建策略</span></span><br><span class=\"line\">$ aws iam create-policy --profile eks-us-west-2 \\</span><br><span class=\"line\">    --policy-name AmazonEKS_EFS_CSI_Driver_Policy \\</span><br><span class=\"line\">    --policy-document file://iam-policy-example.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Policy&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;PolicyName&quot;</span>: <span class=\"string\">&quot;AmazonEKS_EFS_CSI_Driver_Policy&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;PolicyId&quot;</span>: <span class=\"string\">&quot;ANPA22DP3G4GHPABMGFXG&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909655:policy/AmazonEKS_EFS_CSI_Driver_Policy&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Path&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;DefaultVersionId&quot;</span>: <span class=\"string\">&quot;v1&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;AttachmentCount&quot;</span>: 0,</span><br><span class=\"line\">        <span class=\"string\">&quot;PermissionsBoundaryUsageCount&quot;</span>: 0,</span><br><span class=\"line\">        <span class=\"string\">&quot;IsAttachable&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreateDate&quot;</span>: <span class=\"string\">&quot;2023-07-03T07:35:31+00:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;UpdateDate&quot;</span>: <span class=\"string\">&quot;2023-07-03T07:35:31+00:00&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 创建 IAM 角色并向其附加此 IAM policy</span></span><br><span class=\"line\"><span class=\"comment\"># 注意这里并没有指定角色名称，所以会自动生成一个角色名称并绑定到SA上</span></span><br><span class=\"line\">$ eksctl create iamserviceaccount \\</span><br><span class=\"line\">    --cluster eks-lexing \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --namespace kube-system \\</span><br><span class=\"line\">    --name efs-csi-controller-sa \\</span><br><span class=\"line\">    --attach-policy-arn arn:aws:iam::743263909655:policy/AmazonEKS_EFS_CSI_Driver_Policy \\</span><br><span class=\"line\">    --approve</span><br><span class=\"line\">2023-07-03 15:38:07 [ℹ]  2 existing iamserviceaccount(s) (kube-system/aws-node,kube-system/ebs-csi-controller-sa) will be excluded</span><br><span class=\"line\">2023-07-03 15:38:07 [ℹ]  1 iamserviceaccount (kube-system/efs-csi-controller-sa) was included (based on the include/exclude rules)</span><br><span class=\"line\">2023-07-03 15:38:07 [!]  serviceaccounts that exist <span class=\"keyword\">in</span> Kubernetes will be excluded, use --override-existing-serviceaccounts to override</span><br><span class=\"line\">2023-07-03 15:38:07 [ℹ]  1 task: &#123;</span><br><span class=\"line\">    2 sequential sub-tasks: &#123;</span><br><span class=\"line\">        create IAM role <span class=\"keyword\">for</span> serviceaccount <span class=\"string\">&quot;kube-system/efs-csi-controller-sa&quot;</span>,</span><br><span class=\"line\">        create serviceaccount <span class=\"string\">&quot;kube-system/efs-csi-controller-sa&quot;</span>,</span><br><span class=\"line\">    &#125; &#125;2023-07-03 15:38:07 [ℹ]  building iamserviceaccount stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-efs-csi-controller-sa&quot;</span></span><br><span class=\"line\">2023-07-03 15:38:08 [ℹ]  deploying stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-efs-csi-controller-sa&quot;</span></span><br><span class=\"line\">2023-07-03 15:38:08 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-efs-csi-controller-sa&quot;</span></span><br><span class=\"line\">2023-07-03 15:38:39 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-efs-csi-controller-sa&quot;</span></span><br><span class=\"line\">2023-07-03 15:38:40 [ℹ]  created serviceaccount <span class=\"string\">&quot;kube-system/efs-csi-controller-sa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看创建后的SA，这里可以看到自动创建的角色名称</span></span><br><span class=\"line\">$ k describe sa efs-csi-controller-sa</span><br><span class=\"line\">Name:                efs-csi-controller-sa</span><br><span class=\"line\">Namespace:           kube-system</span><br><span class=\"line\">Labels:              app.kubernetes.io/managed-by=eksctl</span><br><span class=\"line\">Annotations:         eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/eksctl-eks-lexing-addon-iamserviceaccount-ku-Role1-BOQ7WRWAQDOY</span><br><span class=\"line\">Image pull secrets:  &lt;none&gt;</span><br><span class=\"line\">Mountable secrets:   &lt;none&gt;</span><br><span class=\"line\">Tokens:              &lt;none&gt;</span><br><span class=\"line\">Events:              &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装 Amazon EFS 驱动程序</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加 Helm 存储库。</span></span><br><span class=\"line\">$ helm repo add aws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver/</span><br><span class=\"line\"><span class=\"comment\"># 更新存储库</span></span><br><span class=\"line\">$ helm repo update aws-efs-csi-driver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 Helm Chart 安装驱动程序的版本。</span></span><br><span class=\"line\"><span class=\"comment\"># 请将存储库地址替换为集群的容器镜像地址:https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/add-ons-images.html</span></span><br><span class=\"line\">$ helm upgrade -i aws-efs-csi-driver aws-efs-csi-driver/aws-efs-csi-driver \\</span><br><span class=\"line\">    --namespace kube-system \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> image.repository=602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/aws-efs-csi-driver \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> controller.serviceAccount.create=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> controller.serviceAccount.name=efs-csi-controller-sa</span><br><span class=\"line\">Release <span class=\"string\">&quot;aws-efs-csi-driver&quot;</span> has been upgraded. Happy Helming!</span><br><span class=\"line\">NAME: aws-efs-csi-driver</span><br><span class=\"line\">LAST DEPLOYED: Mon Jul  3 16:08:38 2023</span><br><span class=\"line\">NAMESPACE: kube-system</span><br><span class=\"line\">STATUS: deployed</span><br><span class=\"line\">REVISION: 1</span><br><span class=\"line\">TEST SUITE: None</span><br><span class=\"line\">NOTES:</span><br><span class=\"line\">To verify that aws-efs-csi-driver has started, run:</span><br><span class=\"line\"></span><br><span class=\"line\">    kubectl get pod -n kube-system -l <span class=\"string\">&quot;app.kubernetes.io/name=aws-efs-csi-driver,app.kubernetes.io/instance=aws-efs-csi-driver&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod启动情况</span></span><br><span class=\"line\">$ kubectl get pod -n kube-system -l <span class=\"string\">&quot;app.kubernetes.io/name=aws-efs-csi-driver,app.kubernetes.io/instance=aws-efs-csi-driver&quot;</span></span><br><span class=\"line\">NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">efs-csi-controller-5c86cf4947-77dxh   3/3     Running   0          23s</span><br><span class=\"line\">efs-csi-controller-5c86cf4947-w6s6m   3/3     Running   0          23s</span><br><span class=\"line\">efs-csi-node-22mbf                    3/3     Running   0          7m41s</span><br><span class=\"line\">efs-csi-node-swc6t                    3/3     Running   0          7m40s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  如果pod启动失败，可能是镜像下载的问题，可以先删除deploy后重新执行 helm upgrade ...</span></span><br><span class=\"line\">$ k delete deploy -n kube-system efs-csi-controller</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建-Amazon-EFS-文件系统\">创建 Amazon EFS 文件系统</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建安全组</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检索您的集群所在的 VPC ID，并将其存储在变量中，以便在后续步骤中使用。</span></span><br><span class=\"line\">$ vpc_id=$(aws eks describe-cluster \\</span><br><span class=\"line\">    --name eks-lexing \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --query <span class=\"string\">&quot;cluster.resourcesVpcConfig.vpcId&quot;</span> \\</span><br><span class=\"line\">    --output text)</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$vpc_id</span></span><br><span class=\"line\">vpc-088a65d5af782c20a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检索您的集群的 VPC 的 CIDR 范围，并将其存储在变量中，以便在后续步骤中使用</span></span><br><span class=\"line\">$ cidr_range=$(aws ec2 describe-vpcs \\</span><br><span class=\"line\">    --vpc-ids <span class=\"variable\">$vpc_id</span> \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --query <span class=\"string\">&quot;Vpcs[].CidrBlock&quot;</span> \\</span><br><span class=\"line\">    --output text)</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$cidr_range</span></span><br><span class=\"line\">192.168.0.0/16</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个安全组，该安全组包含一条允许您的 Amazon EFS 挂载点的入站 NFS 流量的入站规则</span></span><br><span class=\"line\">$ security_group_id=$(aws ec2 create-security-group \\</span><br><span class=\"line\">    --group-name MyEfsSecurityGroup \\</span><br><span class=\"line\">    --description <span class=\"string\">&quot;My EFS security group&quot;</span> \\</span><br><span class=\"line\">    --vpc-id <span class=\"variable\">$vpc_id</span> \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --output text)</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$security_group_id</span></span><br><span class=\"line\">sg-0d77e111b519834be</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一条入站规则，该入站规则允许来自您的集群 VPC 的 CIDR 的入站 NFS 流量。</span></span><br><span class=\"line\">$ aws ec2 authorize-security-group-ingress \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --group-id <span class=\"variable\">$security_group_id</span> \\</span><br><span class=\"line\">    --protocol tcp \\</span><br><span class=\"line\">    --port 2049 \\</span><br><span class=\"line\">    --cidr <span class=\"variable\">$cidr_range</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Return&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;SecurityGroupRules&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;SecurityGroupRuleId&quot;</span>: <span class=\"string\">&quot;sgr-09e1d9d2ec6d9bbe9&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;GroupId&quot;</span>: <span class=\"string\">&quot;sg-0d77e111b519834be&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;GroupOwnerId&quot;</span>: <span class=\"string\">&quot;743263909644&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;IsEgress&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;IpProtocol&quot;</span>: <span class=\"string\">&quot;tcp&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;FromPort&quot;</span>: 2049,</span><br><span class=\"line\">            <span class=\"string\">&quot;ToPort&quot;</span>: 2049,</span><br><span class=\"line\">            <span class=\"string\">&quot;CidrIpv4&quot;</span>: <span class=\"string\">&quot;192.168.0.0/16&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/mgMVfF.jpg\" alt=\"\" width=\"1200\" height=\"600\"></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建EFS</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建文件系统</span></span><br><span class=\"line\">$ file_system_id=$(aws efs create-file-system \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --performance-mode generalPurpose \\</span><br><span class=\"line\">    --query <span class=\"string\">&#x27;FileSystemId&#x27;</span> \\</span><br><span class=\"line\">    --output text)</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$file_system_id</span></span><br><span class=\"line\">fs-09447193939058538</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/pt4Y4d.jpg\" alt=\"\" width=\"1200\" height=\"300\"></p>\n<h2 id=\"EFS挂载目标和安全组（网络配置）\">EFS挂载目标和安全组（网络配置）</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>确定集群中节点所在的子网的 ID 以及子网所在的可用区</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建挂载目标</span></span><br><span class=\"line\"><span class=\"comment\"># 确定您的集群节点的 IP 地址</span></span><br><span class=\"line\">$ kubectl get nodes</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE     VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   3d20h   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   3d21h   v1.26.4-eks-0a21954</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确定 VPC 中子网的 ID 以及子网所在的可用区</span></span><br><span class=\"line\">$ aws ec2 describe-subnets \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --filters <span class=\"string\">&quot;Name=vpc-id,Values=<span class=\"variable\">$vpc_id</span>&quot;</span> \\</span><br><span class=\"line\">    --query <span class=\"string\">&#x27;Subnets[*].&#123;SubnetId: SubnetId,AvailabilityZone: AvailabilityZone,CidrBlock: CidrBlock&#125;&#x27;</span> \\</span><br><span class=\"line\">    --output table</span><br><span class=\"line\">----------------------------------------------------------------------</span><br><span class=\"line\">|                           DescribeSubnets                          |</span><br><span class=\"line\">+------------------+--------------------+----------------------------+</span><br><span class=\"line\">| AvailabilityZone |     CidrBlock      |         SubnetId           |</span><br><span class=\"line\">+------------------+--------------------+----------------------------+</span><br><span class=\"line\">|  us-west-2b      |  192.168.128.0/19  |  subnet-0e3290a40a483710d  |</span><br><span class=\"line\">|  us-west-2a      |  192.168.96.0/19   |  subnet-0f6ec8eb7dafcccc0  |</span><br><span class=\"line\">|  us-west-2b      |  192.168.32.0/19   |  subnet-035d3e96d37614fc4  |</span><br><span class=\"line\">|  us-west-2d      |  192.168.64.0/19   |  subnet-0ca60ec494d31c2cb  |</span><br><span class=\"line\">|  us-west-2a      |  192.168.0.0/19    |  subnet-04c4cbdbfdfd8d0d5  |</span><br><span class=\"line\">|  us-west-2d      |  192.168.160.0/19  |  subnet-026f4c6fd339f0dbd  |</span><br><span class=\"line\">+------------------+--------------------+----------------------------+</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算node节点的网络地址</span></span><br><span class=\"line\"><span class=\"comment\"># 如下为linux下使用ipcalc命令的方式</span></span><br><span class=\"line\">$ ipcalc -n 192.168.16.155/19</span><br><span class=\"line\">NETWORK=192.168.0.0</span><br><span class=\"line\">$ ipcalc -n 192.168.48.14/19</span><br><span class=\"line\">NETWORK=192.168.32.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># mac下使用ipcalc命令，安装 ： brew install ipcalc</span></span><br><span class=\"line\">$ ipcalc -b 192.168.16.155/19 | grep Network</span><br><span class=\"line\">Network:   192.168.0.0/19</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 192-168-16-155 节点的ip地址是属于 |  us-west-2a      |  192.168.0.0/19    |  subnet-04c4cbdbfdfd8d0d5  |</span></span><br><span class=\"line\"><span class=\"comment\"># 192-168-48-14  节点的ip地址是属于 |  us-west-2b      |  192.168.32.0/19   |  subnet-035d3e96d37614fc4  |</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>为节点所在的子网添加挂载目标</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 为每个 AZ 中有节点的子网运行一次挂载命令，注意替换相应的子网 ID，所以这里两个节点都要创建挂载目标</span></span><br><span class=\"line\">$ aws efs create-mount-target \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --file-system-id <span class=\"variable\">$file_system_id</span> \\</span><br><span class=\"line\">    --subnet-id subnet-04c4cbdbfdfd8d0d5 \\</span><br><span class=\"line\">    --security-groups <span class=\"variable\">$security_group_id</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;OwnerId&quot;</span>: <span class=\"string\">&quot;743263909644&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;MountTargetId&quot;</span>: <span class=\"string\">&quot;fsmt-0368ff60b5e4c39ed&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;FileSystemId&quot;</span>: <span class=\"string\">&quot;fs-09447193939058538&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;SubnetId&quot;</span>: <span class=\"string\">&quot;subnet-04c4cbdbfdfd8d0d5&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LifeCycleState&quot;</span>: <span class=\"string\">&quot;creating&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;IpAddress&quot;</span>: <span class=\"string\">&quot;192.168.4.196&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;NetworkInterfaceId&quot;</span>: <span class=\"string\">&quot;eni-03068e2d0265fe8e8&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;AvailabilityZoneId&quot;</span>: <span class=\"string\">&quot;usw2-az1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;AvailabilityZoneName&quot;</span>: <span class=\"string\">&quot;us-west-2a&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;VpcId&quot;</span>: <span class=\"string\">&quot;vpc-088a65d5af782c20a&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ aws efs create-mount-target \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --file-system-id <span class=\"variable\">$file_system_id</span> \\</span><br><span class=\"line\">    --subnet-id subnet-035d3e96d37614fc4 \\</span><br><span class=\"line\">    --security-groups <span class=\"variable\">$security_group_id</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;OwnerId&quot;</span>: <span class=\"string\">&quot;743263909644&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;MountTargetId&quot;</span>: <span class=\"string\">&quot;fsmt-0612899b2439161c7&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;FileSystemId&quot;</span>: <span class=\"string\">&quot;fs-09447193939058538&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;SubnetId&quot;</span>: <span class=\"string\">&quot;subnet-035d3e96d37614fc4&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LifeCycleState&quot;</span>: <span class=\"string\">&quot;creating&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;IpAddress&quot;</span>: <span class=\"string\">&quot;192.168.62.58&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;NetworkInterfaceId&quot;</span>: <span class=\"string\">&quot;eni-051bfd62c82bc0b51&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;AvailabilityZoneId&quot;</span>: <span class=\"string\">&quot;usw2-az2&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;AvailabilityZoneName&quot;</span>: <span class=\"string\">&quot;us-west-2b&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;VpcId&quot;</span>: <span class=\"string\">&quot;vpc-088a65d5af782c20a&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检索文件系统的装载目标列表</span></span><br><span class=\"line\">$ aws efs describe-mount-targets --file-system-id <span class=\"variable\">$file_system_id</span> --profile eks-us-west-2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;MountTargets&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;OwnerId&quot;</span>: <span class=\"string\">&quot;743263909644&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;MountTargetId&quot;</span>: <span class=\"string\">&quot;fsmt-0368ff60b5e4c39ed&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;FileSystemId&quot;</span>: <span class=\"string\">&quot;fs-09447193939058538&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;SubnetId&quot;</span>: <span class=\"string\">&quot;subnet-04c4cbdbfdfd8d0d5&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;LifeCycleState&quot;</span>: <span class=\"string\">&quot;available&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;IpAddress&quot;</span>: <span class=\"string\">&quot;192.168.4.196&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;NetworkInterfaceId&quot;</span>: <span class=\"string\">&quot;eni-03068e2d0265fe8e8&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;AvailabilityZoneId&quot;</span>: <span class=\"string\">&quot;usw2-az1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;AvailabilityZoneName&quot;</span>: <span class=\"string\">&quot;us-west-2a&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;VpcId&quot;</span>: <span class=\"string\">&quot;vpc-088a65d5af782c20a&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;OwnerId&quot;</span>: <span class=\"string\">&quot;743263909644&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;MountTargetId&quot;</span>: <span class=\"string\">&quot;fsmt-0612899b2439161c7&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;FileSystemId&quot;</span>: <span class=\"string\">&quot;fs-09447193939058538&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;SubnetId&quot;</span>: <span class=\"string\">&quot;subnet-035d3e96d37614fc4&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;LifeCycleState&quot;</span>: <span class=\"string\">&quot;available&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;IpAddress&quot;</span>: <span class=\"string\">&quot;192.168.62.58&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;NetworkInterfaceId&quot;</span>: <span class=\"string\">&quot;eni-051bfd62c82bc0b51&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;AvailabilityZoneId&quot;</span>: <span class=\"string\">&quot;usw2-az2&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;AvailabilityZoneName&quot;</span>: <span class=\"string\">&quot;us-west-2b&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;VpcId&quot;</span>: <span class=\"string\">&quot;vpc-088a65d5af782c20a&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除EFS\">删除EFS</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在使用AWS CLI命令删除文件系统之前，必须先删除为文件系统创建的所有装载目标和接入点。</p>\n</li>\n<li class=\"lvl-2\">\n<p>删除现有的挂载目标</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意要替换 --mount-target-id fsmt-0368ff60b5e4c39ed，要删除几个挂载目标就执行几次命令</span></span><br><span class=\"line\">$ aws efs delete-mount-target \\</span><br><span class=\"line\">    --mount-target-id fsmt-0368ff60b5e4c39ed \\</span><br><span class=\"line\">    --profile eks-us-west-2</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除efs</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 控制台也可以删除</span></span><br><span class=\"line\">$ aws efs delete-file-system \\</span><br><span class=\"line\">    --file-system-id <span class=\"variable\">$file_system_id</span>  \\</span><br><span class=\"line\">    --profile eks-us-west-2</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\">测试</h2>\n<h3 id=\"Dynamic-demo\">Dynamic-demo</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>检索您的 Amazon EFS 文件系统 ID。您可以在 Amazon EFS 控制台中查找此信息，或者使用以下 AWS CLI 命令。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检索您的 Amazon EFS 文件系统 ID</span></span><br><span class=\"line\">$ aws efs describe-file-systems --profile eks-us-west-2 --query <span class=\"string\">&quot;FileSystems[*].FileSystemId&quot;</span> --output text</span><br><span class=\"line\">fs-09447193939058538</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建storageclass</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># storageclass.yaml，fileSystemId: fs-09447193939058538</span></span><br><span class=\"line\">kind: StorageClass</span><br><span class=\"line\">apiVersion: storage.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: efs-sc</span><br><span class=\"line\">provisioner: efs.csi.aws.com <span class=\"comment\"># 指定用于动态卷分配的 CSI 驱动程序</span></span><br><span class=\"line\">parameters:</span><br><span class=\"line\">  provisioningMode: efs-ap <span class=\"comment\"># 指定 EFS 文件系统的挂载模式为 &quot;efs-ap&quot;。这表示 EFS 将以 AccessPoint 的形式挂载到 Kubernetes Pod 中</span></span><br><span class=\"line\">  fileSystemId: fs-09447193939058538 <span class=\"comment\"># 指定用于动态卷分配的 EFS 文件系统的 ID</span></span><br><span class=\"line\">  directoryPerms: <span class=\"string\">&quot;700&quot;</span> <span class=\"comment\"># 指定新创建的目录的权限模式。这里的 &quot;700&quot; 表示目录的权限为 rwx------。</span></span><br><span class=\"line\">  gidRangeStart: <span class=\"string\">&quot;1000&quot;</span> <span class=\"comment\"># 可选参数，指定新创建的目录的 GID 范围的起始值。</span></span><br><span class=\"line\">  gidRangeEnd: <span class=\"string\">&quot;2000&quot;</span> <span class=\"comment\"># 可选参数，指定新创建的目录的 GID 范围的结束值。</span></span><br><span class=\"line\">  basePath: <span class=\"string\">&quot;/dynamic_provisioning&quot;</span> <span class=\"comment\"># 可选参数，指定新创建的目录的基本路径。这里的 &quot;/dynamic_provisioning&quot; 是一个示例路径，你可以根据需要设置合适的基本路径。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># provisioningMode 可以设置以下值：</span></span><br><span class=\"line\"><span class=\"comment\"># efs-ap: 使用 Access Point（访问点）模式挂载 EFS 文件系统。在此模式下，每个挂载点都会创建一个唯一的访问点，并授予 Pod 对该访问点的访问权限。每个访问点都可以独立设置权限和配额，从而实现更好的隔离和控制。</span></span><br><span class=\"line\"><span class=\"comment\"># efs-csi: 使用传统的 EFS CSI 挂载模式。在此模式下，使用文件系统 ID 直接挂载整个 EFS 文件系统，而不是使用访问点。这种模式下的挂载是共享的，所有使用该存储类的 Pod 都将共享相同的文件系统和权限。</span></span><br><span class=\"line\"><span class=\"comment\"># provisioningMode 的默认值是 efs-csi。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署</span></span><br><span class=\"line\">$ k apply -f storageclass.yaml</span><br><span class=\"line\">storageclass.storage.k8s.io/efs-sc created</span><br><span class=\"line\"><span class=\"comment\"># 查看sc</span></span><br><span class=\"line\">$ k get sc</span><br><span class=\"line\">NAME            PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE</span><br><span class=\"line\">efs-sc          efs.csi.aws.com         Delete          Immediate              <span class=\"literal\">false</span>                  7s</span><br><span class=\"line\">gp2 (default)   kubernetes.io/aws-ebs   Delete          WaitForFirstConsumer   <span class=\"literal\">false</span>                  5d3h</span><br><span class=\"line\">gp3             ebs.csi.aws.com         Delete          WaitForFirstConsumer   <span class=\"literal\">true</span>                   5d</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建pvc，指定 storageClassName: efs-sc</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pvc.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: efs-claim</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  storageClassName: efs-sc</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 5Gi</span><br><span class=\"line\"><span class=\"comment\"># 部署pvc</span></span><br><span class=\"line\">$ k apply -f pvc.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建pod</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pod.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: efs-app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: app</span><br><span class=\"line\">      image: centos</span><br><span class=\"line\">      <span class=\"built_in\">command</span>: [<span class=\"string\">&quot;/bin/sh&quot;</span>]</span><br><span class=\"line\">      args: [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;while true; do echo <span class=\"subst\">$(date -u)</span> &gt;&gt; /data/out; sleep 5; done&quot;</span>]</span><br><span class=\"line\">      volumeMounts:</span><br><span class=\"line\">        - name: persistent-storage</span><br><span class=\"line\">          mountPath: /data</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - name: persistent-storage</span><br><span class=\"line\">      persistentVolumeClaim:</span><br><span class=\"line\">        claimName: efs-claim</span><br><span class=\"line\"><span class=\"comment\"># 部署pod</span></span><br><span class=\"line\">$ k apply -f pod.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看pv</span></span><br><span class=\"line\">$ k get pv</span><br><span class=\"line\">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                STORAGECLASS   REASON   AGE</span><br><span class=\"line\">pvc-edc00435-ef8e-49c6-9e3d-9697735e7108   5Gi        RWX            Delete           Bound    <span class=\"built_in\">test</span>/efs-claim       efs-sc                  62s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pvc</span></span><br><span class=\"line\">$ k get pvc</span><br><span class=\"line\">NAME            STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">efs-claim       Bound    pvc-edc00435-ef8e-49c6-9e3d-9697735e7108   5Gi        RWX            efs-sc         72s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">$ k get pods -o wide</span><br><span class=\"line\">NAME                  READY   STATUS    RESTARTS   AGE     IP               NODE                                           NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">efs-app               1/1     Running   0          2m41s   192.168.34.220   ip-192-168-48-14.us-west-2.compute.internal    &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看输出</span></span><br><span class=\"line\">$ k <span class=\"built_in\">exec</span> -it efs-app -- bash -c <span class=\"string\">&quot;cat data/out&quot;</span></span><br><span class=\"line\">Mon Jul 3 09:39:49 UTC 2023</span><br><span class=\"line\">Mon Jul 3 09:39:54 UTC 2023</span><br><span class=\"line\">Mon Jul 3 09:39:59 UTC 2023</span><br><span class=\"line\">Mon Jul 3 09:40:04 UTC 2023</span><br><span class=\"line\">Mon Jul 3 09:40:09 UTC 2023</span><br><span class=\"line\">…………………………………………………………………………</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看挂载</span></span><br><span class=\"line\">$ k <span class=\"built_in\">exec</span> -it efs-app -- bash -c <span class=\"string\">&quot;df -h&quot;</span></span><br><span class=\"line\">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class=\"line\">overlay          80G  4.2G   76G   6% /</span><br><span class=\"line\">tmpfs            64M     0   64M   0% /dev</span><br><span class=\"line\">tmpfs           3.8G     0  3.8G   0% /sys/fs/cgroup</span><br><span class=\"line\">127.0.0.1:/     8.0E     0  8.0E   0% /data</span><br><span class=\"line\">/dev/nvme0n1p1   80G  4.2G   76G   6% /etc/hosts</span><br><span class=\"line\">shm              64M     0   64M   0% /dev/shm</span><br><span class=\"line\">tmpfs           6.9G   12K  6.9G   1% /run/secrets/kubernetes.io/serviceaccount</span><br><span class=\"line\">tmpfs           3.8G     0  3.8G   0% /proc/acpi</span><br><span class=\"line\">tmpfs           3.8G     0  3.8G   0% /sys/firmware</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时只删除pod并重新创建pod，则之前的磁盘数据还在。如果删除pvc并重建pvc，则原先的数据就没有了。</p>\n</li>\n<li class=\"lvl-2\">\n<p>删除测试用例</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k delete -f pod.yaml</span><br><span class=\"line\">$ k delete -f pvc.yaml</span><br><span class=\"line\">$ k delete -f storageclass.yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"Static-demo\">Static-demo</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例项目</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/kubernetes-sigs/aws-efs-csi-driver.git</span><br><span class=\"line\"><span class=\"comment\"># 这个目录下有很多示例</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> aws-efs-csi-driver/examples/kubernetes/</span><br><span class=\"line\"><span class=\"comment\"># 比如这里以 multiple_pods 为例说明，两个pod挂载同一个efs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># storageclass.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># provisioningMode 的默认值是 efs-csi</span></span><br><span class=\"line\">kind: StorageClass</span><br><span class=\"line\">apiVersion: storage.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: efs-sc</span><br><span class=\"line\">provisioner: efs.csi.aws.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pv.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: efs-pv</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 5Gi  <span class=\"comment\"># efs会忽略，efs是没有大小限制的，但是为了符合k8s创建pv的语法规则，这里随便写一个值</span></span><br><span class=\"line\">  volumeMode: Filesystem</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany  <span class=\"comment\"># 支持多个pod同时读写</span></span><br><span class=\"line\">  persistentVolumeReclaimPolicy: Retain</span><br><span class=\"line\">  storageClassName: efs-sc</span><br><span class=\"line\">  csi:</span><br><span class=\"line\">    driver: efs.csi.aws.com</span><br><span class=\"line\">    volumeHandle: fs-09447193939058538</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># claim.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: efs-claim</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany  <span class=\"comment\"># 支持多个pod同时读写</span></span><br><span class=\"line\">  storageClassName: efs-sc</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 5Gi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pod1.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: app1</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: app1</span><br><span class=\"line\">    image: busybox</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: [<span class=\"string\">&quot;/bin/sh&quot;</span>]</span><br><span class=\"line\">    args: [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;while true; do echo <span class=\"subst\">$(date -u)</span> &gt;&gt; /data/out1.txt; sleep 5; done&quot;</span>]</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: persistent-storage</span><br><span class=\"line\">      mountPath: /data</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">  - name: persistent-storage</span><br><span class=\"line\">    persistentVolumeClaim:</span><br><span class=\"line\">      claimName: efs-claim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pod2.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: app2</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: app2</span><br><span class=\"line\">    image: busybox</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: [<span class=\"string\">&quot;/bin/sh&quot;</span>]</span><br><span class=\"line\">    args: [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;while true; do echo <span class=\"subst\">$(date -u)</span> &gt;&gt; /data2/out2.txt; sleep 5; done&quot;</span>]</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: persistent-storage</span><br><span class=\"line\">      mountPath: /data2</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">  - name: persistent-storage</span><br><span class=\"line\">    persistentVolumeClaim:</span><br><span class=\"line\">      claimName: efs-claim</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑 specs/pv.yaml 文件并将 volumeHandle 值替换为您的 Amazon EFS 文件系统 ID</span></span><br><span class=\"line\">$ k apply -f specs/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pv</span></span><br><span class=\"line\">$ k get pv</span><br><span class=\"line\">NAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM            STORAGECLASS   REASON   AGE</span><br><span class=\"line\">efs-pv   5Gi        RWX            Retain           Bound    <span class=\"built_in\">test</span>/efs-claim   efs-sc                  9m11s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pvc</span></span><br><span class=\"line\">$ k get pvc</span><br><span class=\"line\">NAME        STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">efs-claim   Bound    efs-pv   5Gi        RWX            efs-sc         9m16s~</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">$ k get pod</span><br><span class=\"line\">NAME   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">app1   1/1     Running   0          9m20s</span><br><span class=\"line\">app2   1/1     Running   0          9m19s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 两个pod挂载的是同一个efs，所以两个pod内部会看到对方的文件</span></span><br><span class=\"line\">$ k <span class=\"built_in\">exec</span> -it app1 -- <span class=\"built_in\">ls</span> /data</span><br><span class=\"line\">dynamic_provisioning  out1.txt              out2.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ k <span class=\"built_in\">exec</span> -it app2 -- <span class=\"built_in\">ls</span> /data2</span><br><span class=\"line\">dynamic_provisioning  out1.txt              out2.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除测试内容</span></span><br><span class=\"line\">$ k delete -f specs/</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍为EKS集群安装 Amazon EFS CSI 驱动程序 参考资料： Amazon EKS用户指南 Kubernetes 文档 EFS和EBS的选择？ 如果是同一个Pod内的多个容器之间的存储共享，您可以考虑使用EBS卷。 如果是不同的Pod之间的存储共享，此时由于可能跨可用区，您可以考虑使用EFS文件系统。 安装 Amazon EFS CSI 驱动程序 创建 IAM policy和角色 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# 从 GitHub 下载 IAM policy 文档$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-efs-csi-driver/master/docs/iam-policy-example.json# 创建策略$ aws iam create-policy --profile eks-us-west-2 \\ --policy-name AmazonEKS_EFS_CSI_Driver_Policy \\ --policy-document file://iam-policy-example.json&#123; &quot;Policy&quot;: &#123; &quot;PolicyName&quot;: &quot;AmazonEKS_EFS_CSI_Driver_Policy&quot;, &quot;PolicyId&quot;: &quot;ANPA22DP3G4GHPABMGFXG&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909655:policy/AmazonEKS_EFS_CSI_Driver_Policy&quot;, &quot;Path&quot;: &quot;/&quot;, &quot;DefaultVersionId&quot;: &quot;v1&quot;, &quot;AttachmentCount&quot;: 0, &quot;PermissionsBoundaryUsageCount&quot;: 0, &quot;IsAttachable&quot;: true, &quot;CreateDate&quot;: &quot;2023-07-03T07:35:31+00:00&quot;, &quot;UpdateDate&quot;: &quot;2023-07-03T07:35:31+00:00&quot; &#125;&#125;# 创建 IAM 角色并向其附加此 IAM policy# 注意这里并没有指定角色名称，所以会自动生成一个角色名称并绑定到SA上$ eksctl create iamserviceaccount \\ --cluster eks-lexing \\ --profile eks-us-west-2 \\ --namespace kube-system \\ --name efs-csi-controller-sa \\ --attach-policy-arn arn:aws:iam::743263909655:policy/AmazonEKS_EFS_CSI_Driver_Policy \\ --approve2023-07-03 15:38:07 [ℹ] 2 existing iamserviceaccount(s) (kube-system/aws-node,kube-system/ebs-csi-controller-sa) will be excluded2023-07-03 15:38:07 [ℹ] 1 iamserviceaccount (kube-system/efs-csi-controller-sa) was included (based on the include/exclude rules)2023-07-03 15:38:07 [!] serviceaccounts that exist in Kubernetes will be excluded, use --override-existing-serviceaccounts to override2023-07-03 15:38:07 [ℹ] 1 task: &#123; 2 sequential sub-tasks: &#123; create IAM role for serviceaccount &quot;kube-system/efs-csi-controller-sa&quot;, create serviceaccount &quot;kube-system/efs-csi-controller-sa&quot;, &#125; &#125;2023-07-03 15:38:07 [ℹ] building iamserviceaccount stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-efs-csi-controller-sa&quot;2023-07-03 15:38:08 [ℹ] deploying stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-efs-csi-controller-sa&quot;2023-07-03 15:38:08 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-efs-csi-controller-sa&quot;2023-07-03 15:38:39 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-efs-csi-controller-sa&quot;2023-07-03 15:38:40 [ℹ] created serviceaccount &quot;kube-system/efs-csi-controller-sa&quot;# 查看创建后的SA，这里可以看到自动创建的角色名称$ k describe sa efs-csi-controller-saName: efs-csi-controller-saNamespace: kube-systemLabels: app.kubernetes.io/managed-by=eksctlAnnotations: eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/eksctl-eks-lexing-addon-iamserviceaccount-ku-Role1-BOQ7WRWAQDOYImage pull secrets: &lt;none&gt;Mountable secrets: &lt;none&gt;Tokens: &lt;none&gt;Events: &lt;none&gt; 安装 Amazon EFS 驱动程序 12345678910111213141516171819202122232425262728293031323334# 添加 Helm 存储库。$ helm repo add aws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver/# 更新存储库$ helm repo update aws-efs-csi-driver# 使用 Helm Chart 安装驱动程序的版本。# 请将存储库地址替换为集群的容器镜像地址:https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/add-ons-images.html$ helm upgrade -i aws-efs-csi-driver aws-efs-csi-driver/aws-efs-csi-driver \\ --namespace kube-system \\ --set image.repository=602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/aws-efs-csi-driver \\ --set controller.serviceAccount.create=false \\ --set controller.serviceAccount.name=efs-csi-controller-saRelease &quot;aws-efs-csi-driver&quot; has been upgraded. Happy Helming!NAME: aws-efs-csi-driverLAST DEPLOYED: Mon Jul 3 16:08:38 2023NAMESPACE: kube-systemSTATUS: deployedREVISION: 1TEST SUITE: NoneNOTES:To verify that aws-efs-csi-driver has started, run: kubectl get pod -n kube-system -l &quot;app.kubernetes.io/name=aws-efs-csi-driver,app.kubernetes.io/instance=aws-efs-csi-driver&quot;# 查看pod启动情况$ kubectl get pod -n kube-system -l &quot;app.kubernetes.io/name=aws-efs-csi-driver,app.kubernetes.io/instance=aws-efs-csi-driver&quot;NAME READY STATUS RESTARTS AGEefs-csi-controller-5c86cf4947-77dxh 3/3 Running 0 23sefs-csi-controller-5c86cf4947-w6s6m 3/3 Running 0 23sefs-csi-node-22mbf 3/3 Running 0 7m41sefs-csi-node-swc6t 3/3 Running 0 7m40s# 如果pod启动失败，可能是镜像下载的问题，可以先删除deploy后重新执行 helm upgrade ...$ k delete deploy -n kube-system efs-csi-controller 创建 Amazon EFS 文件系统 创建安全组 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# 检索您的集群所在的 VPC ID，并将其存储在变量中，以便在后续步骤中使用。$ vpc_id=$(aws eks describe-cluster \\ --name eks-lexing \\ --profile eks-us-west-2 \\ --query &quot;cluster.resourcesVpcConfig.vpcId&quot; \\ --output text)$ echo $vpc_idvpc-088a65d5af782c20a# 检索您的集群的 VPC 的 CIDR 范围，并将其存储在变量中，以便在后续步骤中使用$ cidr_range=$(aws ec2 describe-vpcs \\ --vpc-ids $vpc_id \\ --profile eks-us-west-2 \\ --query &quot;Vpcs[].CidrBlock&quot; \\ --output text)$ echo $cidr_range192.168.0.0/16# 创建一个安全组，该安全组包含一条允许您的 Amazon EFS 挂载点的入站 NFS 流量的入站规则$ security_group_id=$(aws ec2 create-security-group \\ --group-name MyEfsSecurityGroup \\ --description &quot;My EFS security group&quot; \\ --vpc-id $vpc_id \\ --profile eks-us-west-2 \\ --output text)$ echo $security_group_idsg-0d77e111b519834be# 创建一条入站规则，该入站规则允许来自您的集群 VPC 的 CIDR 的入站 NFS 流量。$ aws ec2 authorize-security-group-ingress \\ --profile eks-us-west-2 \\ --group-id $security_group_id \\ --protocol tcp \\ --port 2049 \\ --cidr $cidr_range&#123; &quot;Return&quot;: true, &quot;SecurityGroupRules&quot;: [ &#123; &quot;SecurityGroupRuleId&quot;: &quot;sgr-09e1d9d2ec6d9bbe9&quot;, &quot;GroupId&quot;: &quot;sg-0d77e111b519834be&quot;, &quot;GroupOwnerId&quot;: &quot;743263909644&quot;, &quot;IsEgress&quot;: false, &quot;IpProtocol&quot;: &quot;tcp&quot;, &quot;FromPort&quot;: 2049, &quot;ToPort&quot;: 2049, &quot;CidrIpv4&quot;: &quot;192.168.0.0/16&quot; &#125; ]&#125; 创建EFS 12345678# 创建文件系统$ file_system_id=$(aws efs create-file-system \\ --profile eks-us-west-2 \\ --performance-mode generalPurpose \\ --query &#x27;FileSystemId&#x27; \\ --output text)$ echo $file_system_idfs-09447193939058538 EFS挂载目标和安全组（网络配置） 确定集群中节点所在的子网的 ID 以及子网所在的可用区 123456789101112131415161718192021222324252627282930313233343536373839# 创建挂载目标# 确定您的集群节点的 IP 地址$ kubectl get nodesNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 3d20h v1.26.4-eks-0a21954ip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 3d21h v1.26.4-eks-0a21954# 确定 VPC 中子网的 ID 以及子网所在的可用区$ aws ec2 describe-subnets \\ --profile eks-us-west-2 \\ --filters &quot;Name=vpc-id,Values=$vpc_id&quot; \\ --query &#x27;Subnets[*].&#123;SubnetId: SubnetId,AvailabilityZone: AvailabilityZone,CidrBlock: CidrBlock&#125;&#x27; \\ --output table----------------------------------------------------------------------| DescribeSubnets |+------------------+--------------------+----------------------------+| AvailabilityZone | CidrBlock | SubnetId |+------------------+--------------------+----------------------------+| us-west-2b | 192.168.128.0/19 | subnet-0e3290a40a483710d || us-west-2a | 192.168.96.0/19 | subnet-0f6ec8eb7dafcccc0 || us-west-2b | 192.168.32.0/19 | subnet-035d3e96d37614fc4 || us-west-2d | 192.168.64.0/19 | subnet-0ca60ec494d31c2cb || us-west-2a | 192.168.0.0/19 | subnet-04c4cbdbfdfd8d0d5 || us-west-2d | 192.168.160.0/19 | subnet-026f4c6fd339f0dbd |+------------------+--------------------+----------------------------+# 计算node节点的网络地址# 如下为linux下使用ipcalc命令的方式$ ipcalc -n 192.168.16.155/19NETWORK=192.168.0.0$ ipcalc -n 192.168.48.14/19NETWORK=192.168.32.0# mac下使用ipcalc命令，安装 ： brew install ipcalc$ ipcalc -b 192.168.16.155/19 | grep NetworkNetwork: 192.168.0.0/19# 192-168-16-155 节点的ip地址是属于 | us-west-2a | 192.168.0.0/19 | subnet-04c4cbdbfdfd8d0d5 |# 192-168-48-14 节点的ip地址是属于 | us-west-2b | 192.168.32.0/19 | subnet-035d3e96d37614fc4 | 为节点所在的子网添加挂载目标 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# 为每个 AZ 中有节点的子网运行一次挂载命令，注意替换相应的子网 ID，所以这里两个节点都要创建挂载目标$ aws efs create-mount-target \\ --profile eks-us-west-2 \\ --file-system-id $file_system_id \\ --subnet-id subnet-04c4cbdbfdfd8d0d5 \\ --security-groups $security_group_id&#123; &quot;OwnerId&quot;: &quot;743263909644&quot;, &quot;MountTargetId&quot;: &quot;fsmt-0368ff60b5e4c39ed&quot;, &quot;FileSystemId&quot;: &quot;fs-09447193939058538&quot;, &quot;SubnetId&quot;: &quot;subnet-04c4cbdbfdfd8d0d5&quot;, &quot;LifeCycleState&quot;: &quot;creating&quot;, &quot;IpAddress&quot;: &quot;192.168.4.196&quot;, &quot;NetworkInterfaceId&quot;: &quot;eni-03068e2d0265fe8e8&quot;, &quot;AvailabilityZoneId&quot;: &quot;usw2-az1&quot;, &quot;AvailabilityZoneName&quot;: &quot;us-west-2a&quot;, &quot;VpcId&quot;: &quot;vpc-088a65d5af782c20a&quot;&#125;$ aws efs create-mount-target \\ --profile eks-us-west-2 \\ --file-system-id $file_system_id \\ --subnet-id subnet-035d3e96d37614fc4 \\ --security-groups $security_group_id&#123; &quot;OwnerId&quot;: &quot;743263909644&quot;, &quot;MountTargetId&quot;: &quot;fsmt-0612899b2439161c7&quot;, &quot;FileSystemId&quot;: &quot;fs-09447193939058538&quot;, &quot;SubnetId&quot;: &quot;subnet-035d3e96d37614fc4&quot;, &quot;LifeCycleState&quot;: &quot;creating&quot;, &quot;IpAddress&quot;: &quot;192.168.62.58&quot;, &quot;NetworkInterfaceId&quot;: &quot;eni-051bfd62c82bc0b51&quot;, &quot;AvailabilityZoneId&quot;: &quot;usw2-az2&quot;, &quot;AvailabilityZoneName&quot;: &quot;us-west-2b&quot;, &quot;VpcId&quot;: &quot;vpc-088a65d5af782c20a&quot;&#125;# 检索文件系统的装载目标列表$ aws efs describe-mount-targets --file-system-id $file_system_id --profile eks-us-west-2&#123; &quot;MountTargets&quot;: [ &#123; &quot;OwnerId&quot;: &quot;743263909644&quot;, &quot;MountTargetId&quot;: &quot;fsmt-0368ff60b5e4c39ed&quot;, &quot;FileSystemId&quot;: &quot;fs-09447193939058538&quot;, &quot;SubnetId&quot;: &quot;subnet-04c4cbdbfdfd8d0d5&quot;, &quot;LifeCycleState&quot;: &quot;available&quot;, &quot;IpAddress&quot;: &quot;192.168.4.196&quot;, &quot;NetworkInterfaceId&quot;: &quot;eni-03068e2d0265fe8e8&quot;, &quot;AvailabilityZoneId&quot;: &quot;usw2-az1&quot;, &quot;AvailabilityZoneName&quot;: &quot;us-west-2a&quot;, &quot;VpcId&quot;: &quot;vpc-088a65d5af782c20a&quot; &#125;, &#123; &quot;OwnerId&quot;: &quot;743263909644&quot;, &quot;MountTargetId&quot;: &quot;fsmt-0612899b2439161c7&quot;, &quot;FileSystemId&quot;: &quot;fs-09447193939058538&quot;, &quot;SubnetId&quot;: &quot;subnet-035d3e96d37614fc4&quot;, &quot;LifeCycleState&quot;: &quot;available&quot;, &quot;IpAddress&quot;: &quot;192.168.62.58&quot;, &quot;NetworkInterfaceId&quot;: &quot;eni-051bfd62c82bc0b51&quot;, &quot;AvailabilityZoneId&quot;: &quot;usw2-az2&quot;, &quot;AvailabilityZoneName&quot;: &quot;us-west-2b&quot;, &quot;VpcId&quot;: &quot;vpc-088a65d5af782c20a&quot; &#125; ]&#125; 删除EFS 在使用AWS CLI命令删除文件系统之前，必须先删除为文件系统创建的所有装载目标和接入点。 删除现有的挂载目标 1234# 注意要替换 --mount-target-id fsmt-0368ff60b5e4c39ed，要删除几个挂载目标就执行几次命令$ aws efs delete-mount-target \\ --mount-target-id fsmt-0368ff60b5e4c39ed \\ --profile eks-us-west-2 删除efs 1234# 控制台也可以删除$ aws efs delete-file-system \\ --file-system-id $file_system_id \\ --profile eks-us-west-2 测试 Dynamic-demo 检索您的 Amazon EFS 文件系统 ID。您可以在 Amazon EFS 控制台中查找此信息，或者使用以下 AWS CLI 命令。 123# 检索您的 Amazon EFS 文件系统 ID$ aws efs describe-file-systems --profile eks-us-west-2 --query &quot;FileSystems[*].FileSystemId&quot; --output textfs-09447193939058538 创建storageclass 12345678910111213141516171819202122232425262728# storageclass.yaml，fileSystemId: fs-09447193939058538kind: StorageClassapiVersion: storage.k8s.io/v1metadata: name: efs-scprovisioner: efs.csi.aws.com # 指定用于动态卷分配的 CSI 驱动程序parameters: provisioningMode: efs-ap # 指定 EFS 文件系统的挂载模式为 &quot;efs-ap&quot;。这表示 EFS 将以 AccessPoint 的形式挂载到 Kubernetes Pod 中 fileSystemId: fs-09447193939058538 # 指定用于动态卷分配的 EFS 文件系统的 ID directoryPerms: &quot;700&quot; # 指定新创建的目录的权限模式。这里的 &quot;700&quot; 表示目录的权限为 rwx------。 gidRangeStart: &quot;1000&quot; # 可选参数，指定新创建的目录的 GID 范围的起始值。 gidRangeEnd: &quot;2000&quot; # 可选参数，指定新创建的目录的 GID 范围的结束值。 basePath: &quot;/dynamic_provisioning&quot; # 可选参数，指定新创建的目录的基本路径。这里的 &quot;/dynamic_provisioning&quot; 是一个示例路径，你可以根据需要设置合适的基本路径。# provisioningMode 可以设置以下值：# efs-ap: 使用 Access Point（访问点）模式挂载 EFS 文件系统。在此模式下，每个挂载点都会创建一个唯一的访问点，并授予 Pod 对该访问点的访问权限。每个访问点都可以独立设置权限和配额，从而实现更好的隔离和控制。# efs-csi: 使用传统的 EFS CSI 挂载模式。在此模式下，使用文件系统 ID 直接挂载整个 EFS 文件系统，而不是使用访问点。这种模式下的挂载是共享的，所有使用该存储类的 Pod 都将共享相同的文件系统和权限。# provisioningMode 的默认值是 efs-csi。# 部署$ k apply -f storageclass.yamlstorageclass.storage.k8s.io/efs-sc created# 查看sc$ k get scNAME PROVISIONER RECLAIMPOLICY VOLUMEBINDINGMODE ALLOWVOLUMEEXPANSION AGEefs-sc efs.csi.aws.com Delete Immediate false 7sgp2 (default) kubernetes.io/aws-ebs Delete WaitForFirstConsumer false 5d3hgp3 ebs.csi.aws.com Delete WaitForFirstConsumer true 5d 创建pvc，指定 storageClassName: efs-sc 1234567891011121314# pvc.yamlapiVersion: v1kind: PersistentVolumeClaimmetadata: name: efs-claimspec: accessModes: - ReadWriteMany storageClassName: efs-sc resources: requests: storage: 5Gi# 部署pvc$ k apply -f pvc.yaml 创建pod 1234567891011121314151617181920# pod.yamlapiVersion: v1kind: Podmetadata: name: efs-appspec: containers: - name: app image: centos command: [&quot;/bin/sh&quot;] args: [&quot;-c&quot;, &quot;while true; do echo $(date -u) &gt;&gt; /data/out; sleep 5; done&quot;] volumeMounts: - name: persistent-storage mountPath: /data volumes: - name: persistent-storage persistentVolumeClaim: claimName: efs-claim# 部署pod$ k apply -f pod.yaml 查看 123456789101112131415161718192021222324252627282930313233343536# 查看pv$ k get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpvc-edc00435-ef8e-49c6-9e3d-9697735e7108 5Gi RWX Delete Bound test/efs-claim efs-sc 62s# 查看pvc$ k get pvcNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEefs-claim Bound pvc-edc00435-ef8e-49c6-9e3d-9697735e7108 5Gi RWX efs-sc 72s# 查看pod$ k get pods -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATESefs-app 1/1 Running 0 2m41s 192.168.34.220 ip-192-168-48-14.us-west-2.compute.internal &lt;none&gt; &lt;none&gt;# 查看输出$ k exec -it efs-app -- bash -c &quot;cat data/out&quot;Mon Jul 3 09:39:49 UTC 2023Mon Jul 3 09:39:54 UTC 2023Mon Jul 3 09:39:59 UTC 2023Mon Jul 3 09:40:04 UTC 2023Mon Jul 3 09:40:09 UTC 2023…………………………………………………………………………# 查看挂载$ k exec -it efs-app -- bash -c &quot;df -h&quot;Filesystem Size Used Avail Use% Mounted onoverlay 80G 4.2G 76G 6% /tmpfs 64M 0 64M 0% /devtmpfs 3.8G 0 3.8G 0% /sys/fs/cgroup127.0.0.1:/ 8.0E 0 8.0E 0% /data/dev/nvme0n1p1 80G 4.2G 76G 6% /etc/hostsshm 64M 0 64M 0% /dev/shmtmpfs 6.9G 12K 6.9G 1% /run/secrets/kubernetes.io/serviceaccounttmpfs 3.8G 0 3.8G 0% /proc/acpitmpfs 3.8G 0 3.8G 0% /sys/firmware 此时只删除pod并重新创建pod，则之前的磁盘数据还在。如果删除pvc并重建pvc，则原先的数据就没有了。 删除测试用例 123$ k delete -f pod.yaml$ k delete -f pvc.yaml$ k delete -f storageclass.yaml Static-demo 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111# 示例项目$ git clone https://github.com/kubernetes-sigs/aws-efs-csi-driver.git# 这个目录下有很多示例$ cd aws-efs-csi-driver/examples/kubernetes/# 比如这里以 multiple_pods 为例说明，两个pod挂载同一个efs# storageclass.yaml# provisioningMode 的默认值是 efs-csikind: StorageClassapiVersion: storage.k8s.io/v1metadata: name: efs-scprovisioner: efs.csi.aws.com# pv.yamlapiVersion: v1kind: PersistentVolumemetadata: name: efs-pvspec: capacity: storage: 5Gi # efs会忽略，efs是没有大小限制的，但是为了符合k8s创建pv的语法规则，这里随便写一个值 volumeMode: Filesystem accessModes: - ReadWriteMany # 支持多个pod同时读写 persistentVolumeReclaimPolicy: Retain storageClassName: efs-sc csi: driver: efs.csi.aws.com volumeHandle: fs-09447193939058538# claim.yamlapiVersion: v1kind: PersistentVolumeClaimmetadata: name: efs-claimspec: accessModes: - ReadWriteMany # 支持多个pod同时读写 storageClassName: efs-sc resources: requests: storage: 5Gi# pod1.yamlapiVersion: v1kind: Podmetadata: name: app1spec: containers: - name: app1 image: busybox command: [&quot;/bin/sh&quot;] args: [&quot;-c&quot;, &quot;while true; do echo $(date -u) &gt;&gt; /data/out1.txt; sleep 5; done&quot;] volumeMounts: - name: persistent-storage mountPath: /data volumes: - name: persistent-storage persistentVolumeClaim: claimName: efs-claim# pod2.yamlapiVersion: v1kind: Podmetadata: name: app2spec: containers: - name: app2 image: busybox command: [&quot;/bin/sh&quot;] args: [&quot;-c&quot;, &quot;while true; do echo $(date -u) &gt;&gt; /data2/out2.txt; sleep 5; done&quot;] volumeMounts: - name: persistent-storage mountPath: /data2 volumes: - name: persistent-storage persistentVolumeClaim: claimName: efs-claim# 编辑 specs/pv.yaml 文件并将 volumeHandle 值替换为您的 Amazon EFS 文件系统 ID$ k apply -f specs/# 查看pv$ k get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEefs-pv 5Gi RWX Retain Bound test/efs-claim efs-sc 9m11s# 查看pvc$ k get pvcNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEefs-claim Bound efs-pv 5Gi RWX efs-sc 9m16s~# 查看pod$ k get podNAME READY STATUS RESTARTS AGEapp1 1/1 Running 0 9m20sapp2 1/1 Running 0 9m19s# 两个pod挂载的是同一个efs，所以两个pod内部会看到对方的文件$ k exec -it app1 -- ls /datadynamic_provisioning out1.txt out2.txt$ k exec -it app2 -- ls /data2dynamic_provisioning out1.txt out2.txt# 清除测试内容$ k delete -f specs/","summary":"摘要 本文介绍为EKS集群安装 Amazon EFS CSI 驱动程序 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T14:31:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks05-ebs-csi/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks05-ebs-csi/","title":"AWS-EKS-05--安装 Amazon EBS CSI 驱动程序","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍在EKS集群中安装 Amazon EBS CSI 驱动程序过程</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"安装-Amazon-EBS-CSI-驱动程序\">安装 Amazon EBS CSI 驱动程序</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>如果您计划将工作负载部署到使用 Amazon EBS 卷的集群，并且您创建了 1.23 或更高版本的集群，则在部署工作负载之前，您必须将 Amazon EBS CSI 驱动程序 安装到您的集群。</p>\n</li>\n<li class=\"lvl-2\">\n<p>使用 eksctl 创建 Amazon EBS CSI 驱动程序 IAM 角色</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用以下命令创建 IAM 角色并附加所需的 AWS 托管策略。此命令将部署 AWS CloudFormation 堆栈，该堆栈将创建 IAM 角色，并会将 IAM policy 附加到该堆栈。如果您的集群位于 AWS GovCloud（美国东部）或 AWS GovCloud（美国西部）AWS 区域，则将 arn:aws: 替换为 arn:aws-us-gov:。</span></span><br><span class=\"line\"><span class=\"comment\"># 注意这里附加的策略是AWS托管策略</span></span><br><span class=\"line\">$ eksctl create iamserviceaccount \\</span><br><span class=\"line\">    --name ebs-csi-controller-sa \\</span><br><span class=\"line\">    --namespace kube-system \\</span><br><span class=\"line\">    --cluster eks-lexing \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --role-name AmazonEKS_EBS_CSI_DriverRole \\</span><br><span class=\"line\">    --role-only \\</span><br><span class=\"line\">    --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \\</span><br><span class=\"line\">    --approve</span><br><span class=\"line\">2023-06-28 16:16:05 [ℹ]  1 iamserviceaccount (kube-system/ebs-csi-controller-sa) was included (based on the include/exclude rules)</span><br><span class=\"line\">2023-06-28 16:16:05 [!]  serviceaccounts <span class=\"keyword\">in</span> Kubernetes will not be created or modified, since the option --role-only is used</span><br><span class=\"line\">2023-06-28 16:16:05 [ℹ]  1 task: &#123; create IAM role <span class=\"keyword\">for</span> serviceaccount <span class=\"string\">&quot;kube-system/ebs-csi-controller-sa&quot;</span> &#125;</span><br><span class=\"line\">2023-06-28 16:16:05 [ℹ]  building iamserviceaccount stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-ebs-csi-controller-sa&quot;</span></span><br><span class=\"line\">2023-06-28 16:16:06 [ℹ]  deploying stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-ebs-csi-controller-sa&quot;</span></span><br><span class=\"line\">2023-06-28 16:16:06 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-ebs-csi-controller-sa&quot;</span></span><br><span class=\"line\">2023-06-28 16:16:37 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-ebs-csi-controller-sa&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将Amazon EBS CSI 驱动程序添加到集群</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 运行以下命令。如果您的集群位于 AWS GovCloud（美国东部）或 AWS GovCloud（美国西部）AWS 区域，则将 arn:aws: 替换为 arn:aws-us-gov:。</span></span><br><span class=\"line\">$ eksctl create addon --name aws-ebs-csi-driver --cluster eks-lexing --profile eks-us-west-2 --service-account-role-arn arn:aws:iam::743263909655:role/AmazonEKS_EBS_CSI_DriverRole --force</span><br><span class=\"line\">2023-06-28 16:23:59 [ℹ]  Kubernetes version <span class=\"string\">&quot;1.25&quot;</span> <span class=\"keyword\">in</span> use by cluster <span class=\"string\">&quot;eks-lexing&quot;</span></span><br><span class=\"line\">2023-06-28 16:24:00 [ℹ]  using provided ServiceAccountRoleARN <span class=\"string\">&quot;arn:aws:iam::743263909655:role/AmazonEKS_EBS_CSI_DriverRole&quot;</span></span><br><span class=\"line\">2023-06-28 16:24:00 [ℹ]  creating addon</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>检查 Amazon EBS CSI 驱动程序的当前版本，注意这里如果有可用更新，UPDATE AVAILABLE会显示，默认安装是最新版本</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ eksctl get addon --name aws-ebs-csi-driver --cluster eks-lexing --profile eks-us-west-2</span><br><span class=\"line\">2023-06-28 16:24:08 [ℹ]  Kubernetes version <span class=\"string\">&quot;1.25&quot;</span> <span class=\"keyword\">in</span> use by cluster <span class=\"string\">&quot;eks-lexing&quot;</span></span><br><span class=\"line\">2023-06-28 16:24:09 [ℹ]  to see issues <span class=\"keyword\">for</span> an addon run `eksctl get addon --name &lt;addon-name&gt; --cluster &lt;cluster-name&gt;`</span><br><span class=\"line\">NAME            VERSION            STATUS        ISSUES    IAMROLE            UPDATE AVAILABLE    CONFIGURATION VALUES</span><br><span class=\"line\">aws-ebs-csi-driver    v1.19.0-eksbuild.2    CREATING    0    arn:aws:iam::743263909655:role/AmazonEKS_EBS_CSI_DriverRole</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>插件安装完成后可以查看已经安装的资源，Name中含有 ebs-csi</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ k get all -n kube-system -l app.kubernetes.io/component=csi-driver</span><br><span class=\"line\">NAME                                      READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/ebs-csi-controller-5f945bbdfc-m2smb   6/6     Running   0          10m</span><br><span class=\"line\">pod/ebs-csi-controller-5f945bbdfc-nfl97   6/6     Running   0          10m</span><br><span class=\"line\">pod/ebs-csi-node-kmtv9                    3/3     Running   0          10m</span><br><span class=\"line\">pod/ebs-csi-node-tdw7m                    3/3     Running   0          10m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                  DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR              AGE</span><br><span class=\"line\">daemonset.apps/ebs-csi-node           2         2         2       2            2           kubernetes.io/os=linux     42h</span><br><span class=\"line\">daemonset.apps/ebs-csi-node-windows   0         0         0       0            0           kubernetes.io/os=windows   42h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/ebs-csi-controller   2/2     2            2           42h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                            DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/ebs-csi-controller-57ff9dc5fc   0         0         0       42h</span><br><span class=\"line\">replicaset.apps/ebs-csi-controller-5f945bbdfc   2         2         2       10m</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时可以通过aws控制台对eks的Amazon EBS CSI 驱动程序进行管理，后续升级可以直接在控制台进行<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/hTiCSv.png\" alt=\"\" width=\"1200\" height=\"600\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>查看Amazon EBS CSI 驱动程序的所有可用版本号</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws eks describe-addon-versions --addon-name aws-ebs-csi-driver --profile eks-us-west-2</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>更新 Amazon EBS CSI 驱动程序 ，–force 表示强制更新</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看是否有更新，可以看到UPDATE下有个可用更新版本 v1.20.0-eksbuild.1</span></span><br><span class=\"line\">$ eksctl get addon --name aws-ebs-csi-driver --cluster eks-lexing --profile eks-us-west-2</span><br><span class=\"line\">2023-06-30 10:21:31 [ℹ]  Kubernetes version <span class=\"string\">&quot;1.26&quot;</span> <span class=\"keyword\">in</span> use by cluster <span class=\"string\">&quot;eks-lexing&quot;</span></span><br><span class=\"line\">2023-06-30 10:21:32 [ℹ]  to see issues <span class=\"keyword\">for</span> an addon run `eksctl get addon --name &lt;addon-name&gt; --cluster &lt;cluster-name&gt;`</span><br><span class=\"line\">NAME            VERSION            STATUS    ISSUES    IAMROLE                                UPDATE AVAILABLE    CONFIGURATION VALUES</span><br><span class=\"line\">aws-ebs-csi-driver    v1.19.0-eksbuild.2    ACTIVE    0    arn:aws:iam::743263909644:role/AmazonEKS_EBS_CSI_DriverRole    v1.20.0-eksbuild.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新到v1.20.0-eksbuild.1</span></span><br><span class=\"line\">$ eksctl update addon --name aws-ebs-csi-driver --version v1.20.0-eksbuild.1 --cluster eks-lexing --profile eks-us-west-2 --force</span><br><span class=\"line\">2023-06-30 10:22:23 [ℹ]  Kubernetes version <span class=\"string\">&quot;1.26&quot;</span> <span class=\"keyword\">in</span> use by cluster <span class=\"string\">&quot;eks-lexing&quot;</span></span><br><span class=\"line\">2023-06-30 10:22:24 [ℹ]  new version provided v1.20.0-eksbuild.1</span><br><span class=\"line\">2023-06-30 10:22:24 [ℹ]  updating addon</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除 Amazon EBS CSI 驱动程序</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ eksctl delete addon --cluster eks-lexing --profile eks-us-west-2 --name aws-ebs-csi-driver --preserve</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>默认eks为我们创建好了一个sc:gp2</strong></em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认的gp2配置yaml,其被设置为默认存储类</span></span><br><span class=\"line\">kind: StorageClass</span><br><span class=\"line\">apiVersion: storage.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: gp2</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    storageclass.kubernetes.io/is-default-class: <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">provisioner: kubernetes.io/aws-ebs</span><br><span class=\"line\">parameters:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: gp2</span><br><span class=\"line\">  fsType: ext4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># storageclass.kubernetes.io/is-default-class: &quot;true&quot; 这个注释表示其是默认存储类</span></span><br></pre></td></tr></table></figure>\n<p><em><strong>关于默认存储类的说明</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">在 AWS 的 Amazon EKS（Elastic Kubernetes Service）中，将一个 StorageClass（SC）设置为默认存储类具有以下作用：\n<ul class=\"lvl-3\">\n<li class=\"lvl-6\">自动分配: 当没有显式指定 StorageClass 的情况下，如果某个 Persistent Volume Claim（PVC）没有指定所需的 StorageClass，则默认会选择设置为默认存储类的 StorageClass 进行 PVC 的动态分配。</li>\n<li class=\"lvl-6\">简化配置: 默认存储类可以简化 PVC 的配置，因为您不需要为每个 PVC 显式指定 StorageClass。只需创建 PVC，并且它将自动使用默认存储类进行分配。</li>\n<li class=\"lvl-6\">默认设置: 默认存储类是集群级别的默认设置，适用于没有显式指定 StorageClass 的 PVC。这样可以确保在没有特定要求的情况下，PVC 可以使用预定义的默认存储类。</li>\n<li class=\"lvl-6\">在 AWS EKS 中，只能有一个 StorageClass 被设置为默认存储类。这是因为默认存储类是集群范围的全局设置，它用于满足未显式指定 StorageClass 的 PVC 的需求。如果有多个 StorageClass 被设置为默认，会导致混乱和不确定性，因为 Kubernetes 将无法确定使用哪个默认存储类。</li>\n<li class=\"lvl-6\">如果需要为不同的 PVC 使用不同的默认存储类，可以通过为每个 PVC 显式指定所需的 StorageClass 来实现，而不是依赖默认存储类。</li>\n<li class=\"lvl-6\">总结来说，通过设置默认存储类，您可以简化 PVC 的配置并定义集群范围的默认设置。但是，在 AWS EKS 中，只能有一个默认存储类。</li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"使用说明\">使用说明</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建StorageClass</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建基于gp3的sc</span></span><br><span class=\"line\"><span class=\"comment\"># create-sc-gp3.yaml</span></span><br><span class=\"line\">apiVersion: storage.k8s.io/v1</span><br><span class=\"line\">kind: StorageClass</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: gp3</span><br><span class=\"line\">provisioner: ebs.csi.aws.com</span><br><span class=\"line\">volumeBindingMode: WaitForFirstConsumer</span><br><span class=\"line\">parameters:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: gp3</span><br><span class=\"line\">allowVolumeExpansion: <span class=\"literal\">true</span></span><br><span class=\"line\">reclaimPolicy: Delete</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署</span></span><br><span class=\"line\">$ k apply -f create-sc-gp3.yaml</span><br><span class=\"line\"><span class=\"comment\"># 查看sc</span></span><br><span class=\"line\">$ k get sc</span><br><span class=\"line\">NAME            PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE</span><br><span class=\"line\">gp2 (default)   kubernetes.io/aws-ebs   Delete          WaitForFirstConsumer   <span class=\"literal\">false</span>                  175m</span><br><span class=\"line\">gp3             ebs.csi.aws.com         Delete          WaitForFirstConsumer   <span class=\"literal\">true</span>                   6s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 虽然创建sc时没有为其指定默认存储类，我们可以通过如下命令将指定的sc设置为默认存储类</span></span><br><span class=\"line\">$ k annotate storageclass gp3 storageclass.kubernetes.io/is-default-class=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 此时原gp2的默认存储类不会被去掉</span></span><br><span class=\"line\">$ k get sc</span><br><span class=\"line\">NAME            PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE</span><br><span class=\"line\">gp2 (default)   kubernetes.io/aws-ebs   Delete          WaitForFirstConsumer   <span class=\"literal\">false</span>                  20h</span><br><span class=\"line\">gp3 (default)   ebs.csi.aws.com         Delete          WaitForFirstConsumer   <span class=\"literal\">true</span>                   17h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取消指定的sc为默认存储类</span></span><br><span class=\"line\">$ k annotate storageclass --overwrite=<span class=\"literal\">true</span> gp3 storageclass.kubernetes.io/is-default-class=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>配置说明</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">provisioner</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># provisioner 定义了用于动态分配 PV 的存储插件或存储后端。它指定了负责创建和管理 PV 的控制器。</span><br><span class=\"line\"># provisioner 的值通常是存储提供商或存储插件的名称，例如</span><br><span class=\"line\"># kubernetes.io/aws-ebs（用于 Amazon EBS）、</span><br><span class=\"line\"># kubernetes.io/gce-pd（用于 Google Compute Engine PD）等。</span><br><span class=\"line\"># 不同的存储插件或存储后端可能具有不同的特性和配置选项。</span><br><span class=\"line\"># 这里的ebs.csi.aws.com就是我们安装的Amazon EBS CSI 附加组件。</span><br><span class=\"line\"></span><br><span class=\"line\"># 在 AWS 的 Amazon EKS（Elastic Kubernetes Service）中，创建 StorageClass（SC）时，支持以下一些常见的 provisioner（供应商）选项：</span><br><span class=\"line\"># kubernetes.io/aws-ebs: 这是用于 Amazon EBS（Elastic Block Store）的默认 provisioner。它允许在 EKS 集群上动态分配和管理基于 Amazon EBS 的持久卷（PV）。</span><br><span class=\"line\"># kubernetes.io/aws-s3: 这是用于 Amazon S3（Simple Storage Service）的 provisioner。它允许在 EKS 集群中创建和管理基于 Amazon S3 的持久卷。</span><br><span class=\"line\"># kubernetes.io/azure-disk: 这是用于 Azure Disk 的 provisioner。它允许在 EKS 集群上动态分配和管理基于 Azure Disk 的持久卷。</span><br><span class=\"line\"># kubernetes.io/azure-file: 这是用于 Azure File 的 provisioner。它允许在 EKS 集群中创建和管理基于 Azure File 的持久卷。</span><br><span class=\"line\"># 这些是一些常见的 provisioner，但实际上，您还可以使用其他存储插件或自定义 provisioner，以满足您特定的存储需求。不同的存储插件和供应商可能会支持不同的 provisioner，具体取决于您所使用的存储插件和存储后端。</span><br><span class=\"line\"># 在创建 StorageClass 时，您需要指定适当的 provisioner 标识符，以便 Kubernetes 和 EKS 能够根据指定的 provisioner 来分配和管理持久卷。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">allowVolumeExpansion</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># allowVolumeExpansion 是一个布尔值参数，用于指定是否允许 PVC 的大小在运行时进行扩展。</span><br><span class=\"line\"># 如果将其设置为 true，则表示 PVC 可以动态扩展其大小以满足需求。</span><br><span class=\"line\"># 如果将其设置为 false，则 PVC 的大小将在创建时被固定，并且不能在后续进行扩展。</span><br><span class=\"line\"># 这取决于存储后端是否支持 PVC 大小的动态调整。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>volumeBindingMode</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在创建 StorageClass 时，可以指定 volumeBindingMode 来定义持久卷（Persistent Volume，PV）与 Persistent Volume Claim（PVC）之间的绑定行为。volumeBindingMode 可以具有以下几种选项：</span><br><span class=\"line\"># Immediate: 当使用 Immediate 绑定模式时，Kubernetes 立即绑定 PVC 和 PV。这意味着在创建 PVC 时，Kubernetes 将立即选择并绑定一个可用的 PV。这种模式适用于那些支持动态供应的存储后端。</span><br><span class=\"line\"># WaitForFirstConsumer: 使用 WaitForFirstConsumer 绑定模式时，PV 不会立即绑定到 PVC。PV 只有在第一个 Pod 试图使用 PVC 时才会绑定。这种模式适用于那些需要在 Pod 实际使用 PVC 之前进行一些准备工作的存储后端。例如，如果需要在创建 PV 后手动配置外部存储系统。</span><br><span class=\"line\"># Delayed: Delayed 绑定模式类似于 WaitForFirstConsumer，但不支持多个 Pod 使用同一个 PVC。只有当 Pod 被调度到节点并使用 PVC 时，PV 才会绑定。这种模式适用于那些只支持单个 Pod 使用 PVC 的存储后端。与 WaitForFirstConsumer 模式相比，Delayed 模式对 PV 和 PVC 之间的绑定更加延迟。</span><br><span class=\"line\"># Unknown: 如果未指定 volumeBindingMode，则默认为 Unknown。这意味着 Kubernetes 控制器或存储系统将决定如何绑定 PV 和 PVC。这种情况下，存储系统或云提供商的默认行为将适用。</span><br><span class=\"line\"></span><br><span class=\"line\">Amazon EBS CSI 只支持 Immediate 和 WaitForFirstConsumer，默认是Immediate。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>reclaimPolicy</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在 Kubernetes 中，reclaimPolicy 是指定持久卷（Persistent Volume，PV）的回收策略。reclaimPolicy 可以具有以下几种选项：</span><br><span class=\"line\"># Retain: 使用 Retain 回收策略时，PV 的数据将被保留，而不会被自动删除。当 PV 和其对应的 Persistent Volume Claim（PVC）之间的关系解除时，PV 不会被回收或删除。管理员需要手动处理 PV 的回收或重新使用。</span><br><span class=\"line\"># Delete: Delete 回收策略表示在 PV 和 PVC 之间的关系解除时，PV 将被自动删除和回收。PV 中存储的数据将被清除，且无法恢复。这是最常见的回收策略，适用于临时数据或不需要长期保留的情况。</span><br><span class=\"line\"># Recycle: Recycle 回收策略是 Kubernetes 早期版本中使用的一种策略，但在 Kubernetes v1.7 版本之后已被弃用。该策略在解除 PV 和 PVC 之间的关系后，会尝试清除 PV 中的数据，使其可以被其他 PVC 重新使用。但这个清除过程仅限于删除 PV 上的文件，而不会对 PV 进行格式化或重建。</span><br><span class=\"line\"># External: External 回收策略表示在 PV 和 PVC 之间的关系解除时，PV 的回收和删除操作由外部的存储管理系统或管理员处理。Kubernetes 不会主动回收或删除 PV，而是委托给外部系统进行处理。</span><br><span class=\"line\"></span><br><span class=\"line\">Amazon EBS CSI 只支持 Retain 和 Delete，默认是Delete。</span><br></pre></td></tr></table></figure>\n</div>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建PVC</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create-pvc.yaml</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ebs-gp3-claim</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteOnce</span><br><span class=\"line\">  storageClassName: gp3</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 4Gi</span><br><span class=\"line\"></span><br><span class=\"line\">$ k apply -f create-pvc.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pvc指定的sc中的volumeBindingMode是WaitForFirstConsumer，只有被使用到时才会去真正申请资源，所以此时看到的状态一直都会是Pending</span></span><br><span class=\"line\">$ k get pvc</span><br><span class=\"line\">NAME            STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">ebs-gp3-claim   Pending                                      gp3            2m51s</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>配置说明</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">accessModes</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在 Kubernetes 中，PVC 是用于声明性地请求持久化存储资源的对象。它定义了 Pod 对持久卷（Persistent Volume，PV）的访问要求。PVC 可以指定不同的 accessModes，以确定 Pod 如何访问与之绑定的 PV。以下是 PVC 可能的 accessModes：</span><br><span class=\"line\"># ReadWriteOnce (RWO): 此模式表示 PVC 可以被一个单个 Pod 以读写的方式挂载。这意味着 PVC 只能被一个 Pod 使用，而且可以同时读取和写入数据。这是许多常见应用程序的默认模式，例如关系型数据库。</span><br><span class=\"line\"># ReadOnlyMany (ROX): 此模式表示 PVC 可以被多个 Pod 以只读的方式挂载。这意味着多个 Pod 可以同时读取数据，但不能写入。通常用于需要共享只读数据的场景，例如日志收集或静态内容的共享。</span><br><span class=\"line\"># ReadWriteMany (RWX): 此模式表示 PVC 可以被多个 Pod 以读写的方式挂载。这意味着多个 Pod 可以同时读取和写入数据。然而，不是所有的存储插件都支持此模式，因此需要确保所使用的存储后端能够满足该要求。这是最具挑战性的模式，因为需要提供多个 Pod 之间的数据同步和一致性。</span><br><span class=\"line\"></span><br><span class=\"line\">需要注意的是，Amazon EBS CSI 目前只支持 ReadWriteOnce 访问模式，即每个卷只能被单个 Pod 以读写方式挂载。ReadOnlyMany 和 ReadWriteMany 访问模式在 Amazon EBS CSI 中尚未支持。</span><br><span class=\"line\"></span><br><span class=\"line\">如果您需要多个 Pod 可以同时以只读方式访问卷，您可以考虑使用 Amazon EFS（Elastic File System），它提供了 ReadWriteMany 访问模式，以满足多个 Pod 的同时只读访问需求。</span><br></pre></td></tr></table></figure>\n</div>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>申请ebs资源</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以创建一个pod绑定这个pvc就可以看到资源被申请了</span></span><br><span class=\"line\"><span class=\"comment\"># create-pod.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: app</span><br><span class=\"line\">    image: centos</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: [<span class=\"string\">&quot;/bin/sh&quot;</span>]</span><br><span class=\"line\">    args: [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;while true; do echo <span class=\"subst\">$(date -u)</span> &gt;&gt; /data/out.txt; sleep 5; done&quot;</span>]</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: persistent-storage</span><br><span class=\"line\">      mountPath: /data</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">  - name: persistent-storage</span><br><span class=\"line\">    persistentVolumeClaim:</span><br><span class=\"line\">      claimName: ebs-gp3-claim</span><br><span class=\"line\"></span><br><span class=\"line\">$ k apply -f create-pod.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pv和pvc</span></span><br><span class=\"line\">$  k get pv</span><br><span class=\"line\">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                STORAGECLASS   REASON   AGE</span><br><span class=\"line\">pvc-02700260-b5e0-40bf-8c72-c1afad9e103e   4Gi        RWO            Delete           Bound    <span class=\"built_in\">test</span>/ebs-gp3-claim   gp3                     4m34s</span><br><span class=\"line\">$ k get pvc</span><br><span class=\"line\">NAME            STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">ebs-gp3-claim   Bound    pvc-02700260-b5e0-40bf-8c72-c1afad9e103e   4Gi        RWO            gp3            9m27s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VolumeHandle:      vol-0362860fb03d9d618 就是实际的EBS卷ID</span></span><br><span class=\"line\">$ k describe pv pvc-02700260-b5e0-40bf-8c72-c1afad9e103e</span><br><span class=\"line\">Name:              pvc-02700260-b5e0-40bf-8c72-c1afad9e103e</span><br><span class=\"line\">Labels:            &lt;none&gt;</span><br><span class=\"line\">Annotations:       pv.kubernetes.io/provisioned-by: ebs.csi.aws.com</span><br><span class=\"line\">                   volume.kubernetes.io/provisioner-deletion-secret-name:</span><br><span class=\"line\">                   volume.kubernetes.io/provisioner-deletion-secret-namespace:</span><br><span class=\"line\">Finalizers:        [kubernetes.io/pv-protection external-attacher/ebs-csi-aws-com]</span><br><span class=\"line\">StorageClass:      gp3</span><br><span class=\"line\">Status:            Bound</span><br><span class=\"line\">Claim:             <span class=\"built_in\">test</span>/ebs-gp3-claim</span><br><span class=\"line\">Reclaim Policy:    Delete</span><br><span class=\"line\">Access Modes:      RWO</span><br><span class=\"line\">VolumeMode:        Filesystem</span><br><span class=\"line\">Capacity:          4Gi</span><br><span class=\"line\">Node Affinity:</span><br><span class=\"line\">  Required Terms:</span><br><span class=\"line\">    Term 0:        topology.ebs.csi.aws.com/zone <span class=\"keyword\">in</span> [us-west-2b]</span><br><span class=\"line\">Message:</span><br><span class=\"line\">Source:</span><br><span class=\"line\">    Type:              CSI (a Container Storage Interface (CSI) volume <span class=\"built_in\">source</span>)</span><br><span class=\"line\">    Driver:            ebs.csi.aws.com</span><br><span class=\"line\">    FSType:            ext4</span><br><span class=\"line\">    VolumeHandle:      vol-0362860fb03d9d618</span><br><span class=\"line\">    ReadOnly:          <span class=\"literal\">false</span></span><br><span class=\"line\">    VolumeAttributes:      storage.kubernetes.io/csiProvisionerIdentity=1687940646992-1017-ebs.csi.aws.com</span><br><span class=\"line\">Events:                &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Used By 中展示的就是当前正在使用pvc的pod</span></span><br><span class=\"line\">$ k describe pvc ebs-gp3-claim</span><br><span class=\"line\">Name:          ebs-gp3-claim</span><br><span class=\"line\">Namespace:     <span class=\"built_in\">test</span></span><br><span class=\"line\">StorageClass:  gp3</span><br><span class=\"line\">Status:        Bound</span><br><span class=\"line\">Volume:        pvc-02700260-b5e0-40bf-8c72-c1afad9e103e</span><br><span class=\"line\">Labels:        &lt;none&gt;</span><br><span class=\"line\">Annotations:   pv.kubernetes.io/bind-completed: <span class=\"built_in\">yes</span></span><br><span class=\"line\">               pv.kubernetes.io/bound-by-controller: <span class=\"built_in\">yes</span></span><br><span class=\"line\">               volume.beta.kubernetes.io/storage-provisioner: ebs.csi.aws.com</span><br><span class=\"line\">               volume.kubernetes.io/selected-node: ip-192-168-48-14.us-west-2.compute.internal</span><br><span class=\"line\">               volume.kubernetes.io/storage-provisioner: ebs.csi.aws.com</span><br><span class=\"line\">Finalizers:    [kubernetes.io/pvc-protection]</span><br><span class=\"line\">Capacity:      4Gi</span><br><span class=\"line\">Access Modes:  RWO</span><br><span class=\"line\">VolumeMode:    Filesystem</span><br><span class=\"line\">Used By:       app-56df75755d-2phz4</span><br><span class=\"line\">               app-56df75755d-cvjvc</span><br><span class=\"line\">               app-56df75755d-xx9gh</span><br><span class=\"line\">Events:        &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此时如果删除pod，则其对应的pvc并不会被删除，之前申请到的ebs也不会被清除</span></span><br><span class=\"line\">$ k delete -f create-pod.yaml</span><br><span class=\"line\">$ k get pod</span><br><span class=\"line\">No resources found <span class=\"keyword\">in</span> <span class=\"built_in\">test</span> namespace.</span><br><span class=\"line\"></span><br><span class=\"line\">$ k get pv</span><br><span class=\"line\">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                STORAGECLASS   REASON   AGE</span><br><span class=\"line\">pvc-02700260-b5e0-40bf-8c72-c1afad9e103e   4Gi        RWO            Delete           Bound    <span class=\"built_in\">test</span>/ebs-gp3-claim   gp3                     9m47s</span><br><span class=\"line\">$ k get pvc</span><br><span class=\"line\">NAME            STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">ebs-gp3-claim   Bound    pvc-02700260-b5e0-40bf-8c72-c1afad9e103e   4Gi        RWO            gp3            14m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此时如果重新创建pod并关联该pvc，则磁盘依旧有效，并且是不会被清空的</span></span><br><span class=\"line\">$ k apply -f create-pod.yaml</span><br><span class=\"line\"><span class=\"comment\"># 查看pod的输出，可以看到中间有个超过5秒的间隔，这就是pod被删除然后又重建的间隔时间，说明磁盘没有被清空重建</span></span><br><span class=\"line\">$ k <span class=\"built_in\">exec</span> -it app -- <span class=\"built_in\">tail</span> -f /data/out.txt</span><br><span class=\"line\">Thu Jun 29 01:51:31 UTC 2023</span><br><span class=\"line\">Thu Jun 29 01:51:36 UTC 2023</span><br><span class=\"line\">Thu Jun 29 01:51:41 UTC 2023</span><br><span class=\"line\">Thu Jun 29 01:53:25 UTC 2023</span><br><span class=\"line\">Thu Jun 29 01:53:30 UTC 2023</span><br><span class=\"line\">Thu Jun 29 01:53:35 UTC 2023</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果要彻底删除磁盘，需要删除pvc，sc中的reclaimPolicy是Delete才会被删除</span></span><br><span class=\"line\">$ k delete -f create-pvc.yaml</span><br><span class=\"line\">persistentvolumeclaim <span class=\"string\">&quot;ebs-gp3-claim&quot;</span> deleted</span><br><span class=\"line\">$ k get pvc</span><br><span class=\"line\">No resources found <span class=\"keyword\">in</span> <span class=\"built_in\">test</span> namespace.</span><br><span class=\"line\">$ k get pv</span><br><span class=\"line\">No resources found</span><br></pre></td></tr></table></figure>\n<h2 id=\"一个deployment并挂载ebs的示例\">一个deployment并挂载ebs的示例</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># deployment-volume.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ebs-gp3-claim</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteOnce</span><br><span class=\"line\">  storageClassName: gp3</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 4Gi</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 3</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: app</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">     labels:</span><br><span class=\"line\">        app: app</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: app</span><br><span class=\"line\">        image: centos</span><br><span class=\"line\">        <span class=\"built_in\">command</span>: [<span class=\"string\">&quot;/bin/sh&quot;</span>]</span><br><span class=\"line\">        args: [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;while true; do echo <span class=\"subst\">$(date -u)</span> &gt;&gt; /data/out.txt; sleep 5; done&quot;</span>]</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: persistent-storage</span><br><span class=\"line\">          mountPath: /data</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: persistent-storage</span><br><span class=\"line\">        persistentVolumeClaim:</span><br><span class=\"line\">          claimName: ebs-gp3-claim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署</span></span><br><span class=\"line\">~ k deploy -f deployment-volume.yaml</span><br><span class=\"line\"><span class=\"comment\"># 查看deploy</span></span><br><span class=\"line\">~ k get deploy</span><br><span class=\"line\">NAME   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">app    3/3     3            3           85s</span><br><span class=\"line\"></span><br><span class=\"line\">~ k get pod</span><br><span class=\"line\">NAME                  READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">app-699cf8fdd-fk8vs   0/1     Running             0          90s</span><br><span class=\"line\">app-699cf8fdd-gpk7m   0/1     Running             0          90s</span><br><span class=\"line\">app-699cf8fdd-h5mbr   0/1     Running             0          90s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以看到3个pod在同时写入一个文件</span></span><br><span class=\"line\">~ k <span class=\"built_in\">exec</span> -it app-699cf8fdd-fk8vs -- <span class=\"built_in\">head</span> /data/out.txt</span><br><span class=\"line\">Fri Jul 7 09:55:21 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:21 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:21 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:26 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:26 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:26 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:31 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:31 UTC 2023</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启deploy</span></span><br><span class=\"line\">~ k rollout restart deployment app</span><br><span class=\"line\">deployment.apps/app restarted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以看到重新启动了3个pod，并且终止了原先启动的3个pod</span></span><br><span class=\"line\">~ k get pod</span><br><span class=\"line\">NAME                   READY   STATUS        RESTARTS   AGE</span><br><span class=\"line\">app-667968b659-62dpl   1/1     Running       0          6s</span><br><span class=\"line\">app-667968b659-7x6wj   1/1     Running       0          4s</span><br><span class=\"line\">app-667968b659-n2rvz   1/1     Running       0          2s</span><br><span class=\"line\">app-699cf8fdd-fk8vs    1/1     Terminating   0          287s</span><br><span class=\"line\">app-699cf8fdd-gpk7m    1/1     Terminating   0          287s</span><br><span class=\"line\">app-699cf8fdd-h5mbr    1/1     Terminating   0          287s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以看到重启deploy后，文件内容依旧存在</span></span><br><span class=\"line\">~ k <span class=\"built_in\">exec</span> -it app-667968b659-62dpl -- <span class=\"built_in\">head</span> /data/out.txt</span><br><span class=\"line\">Fri Jul 7 09:55:21 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:21 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:21 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:26 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:26 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:26 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:31 UTC 2023</span><br><span class=\"line\">Fri Jul 7 09:55:31 UTC 2023</span><br></pre></td></tr></table></figure>\n<h3 id=\"讨论\">讨论</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这里注意一下，k8s-1.23版本创建时会成功，但是重启不成功，只会重新启动成功一个pod，另外两个pod会失败，提示pvc已经被一个pod关联了，但是1.25版就可以创建和重启时都可以成功，不确定是否和Amazon EBS CSI 版本有关系。</p>\n</li>\n</ul>\n<h2 id=\"后记\">后记</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这里要注意一个问题，如果pv被pvc绑定，此时是无法删除pv的，同理pvc被其它资源关联，也是不能被删除的，需要先删除对应的资源才可以。</p>\n</li>\n<li class=\"lvl-2\">\n<p>EBS不能跨可用区，如果pod部署在不同的可用区，则不能使用ebs作为存储，此时可以使用EFS。</p>\n</li>\n</ul>\n","content_text":"摘要 本文介绍在EKS集群中安装 Amazon EBS CSI 驱动程序过程 参考资料： Amazon EKS用户指南 Kubernetes 文档 安装 Amazon EBS CSI 驱动程序 如果您计划将工作负载部署到使用 Amazon EBS 卷的集群，并且您创建了 1.23 或更高版本的集群，则在部署工作负载之前，您必须将 Amazon EBS CSI 驱动程序 安装到您的集群。 使用 eksctl 创建 Amazon EBS CSI 驱动程序 IAM 角色 123456789101112131415161718# 使用以下命令创建 IAM 角色并附加所需的 AWS 托管策略。此命令将部署 AWS CloudFormation 堆栈，该堆栈将创建 IAM 角色，并会将 IAM policy 附加到该堆栈。如果您的集群位于 AWS GovCloud（美国东部）或 AWS GovCloud（美国西部）AWS 区域，则将 arn:aws: 替换为 arn:aws-us-gov:。# 注意这里附加的策略是AWS托管策略$ eksctl create iamserviceaccount \\ --name ebs-csi-controller-sa \\ --namespace kube-system \\ --cluster eks-lexing \\ --profile eks-us-west-2 \\ --role-name AmazonEKS_EBS_CSI_DriverRole \\ --role-only \\ --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \\ --approve2023-06-28 16:16:05 [ℹ] 1 iamserviceaccount (kube-system/ebs-csi-controller-sa) was included (based on the include/exclude rules)2023-06-28 16:16:05 [!] serviceaccounts in Kubernetes will not be created or modified, since the option --role-only is used2023-06-28 16:16:05 [ℹ] 1 task: &#123; create IAM role for serviceaccount &quot;kube-system/ebs-csi-controller-sa&quot; &#125;2023-06-28 16:16:05 [ℹ] building iamserviceaccount stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-ebs-csi-controller-sa&quot;2023-06-28 16:16:06 [ℹ] deploying stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-ebs-csi-controller-sa&quot;2023-06-28 16:16:06 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-ebs-csi-controller-sa&quot;2023-06-28 16:16:37 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-ebs-csi-controller-sa&quot; 将Amazon EBS CSI 驱动程序添加到集群 12345# 运行以下命令。如果您的集群位于 AWS GovCloud（美国东部）或 AWS GovCloud（美国西部）AWS 区域，则将 arn:aws: 替换为 arn:aws-us-gov:。$ eksctl create addon --name aws-ebs-csi-driver --cluster eks-lexing --profile eks-us-west-2 --service-account-role-arn arn:aws:iam::743263909655:role/AmazonEKS_EBS_CSI_DriverRole --force2023-06-28 16:23:59 [ℹ] Kubernetes version &quot;1.25&quot; in use by cluster &quot;eks-lexing&quot;2023-06-28 16:24:00 [ℹ] using provided ServiceAccountRoleARN &quot;arn:aws:iam::743263909655:role/AmazonEKS_EBS_CSI_DriverRole&quot;2023-06-28 16:24:00 [ℹ] creating addon 检查 Amazon EBS CSI 驱动程序的当前版本，注意这里如果有可用更新，UPDATE AVAILABLE会显示，默认安装是最新版本 12345$ eksctl get addon --name aws-ebs-csi-driver --cluster eks-lexing --profile eks-us-west-22023-06-28 16:24:08 [ℹ] Kubernetes version &quot;1.25&quot; in use by cluster &quot;eks-lexing&quot;2023-06-28 16:24:09 [ℹ] to see issues for an addon run `eksctl get addon --name &lt;addon-name&gt; --cluster &lt;cluster-name&gt;`NAME VERSION STATUS ISSUES IAMROLE UPDATE AVAILABLE CONFIGURATION VALUESaws-ebs-csi-driver v1.19.0-eksbuild.2 CREATING 0 arn:aws:iam::743263909655:role/AmazonEKS_EBS_CSI_DriverRole 插件安装完成后可以查看已经安装的资源，Name中含有 ebs-csi 1234567891011121314151617~ k get all -n kube-system -l app.kubernetes.io/component=csi-driverNAME READY STATUS RESTARTS AGEpod/ebs-csi-controller-5f945bbdfc-m2smb 6/6 Running 0 10mpod/ebs-csi-controller-5f945bbdfc-nfl97 6/6 Running 0 10mpod/ebs-csi-node-kmtv9 3/3 Running 0 10mpod/ebs-csi-node-tdw7m 3/3 Running 0 10mNAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGEdaemonset.apps/ebs-csi-node 2 2 2 2 2 kubernetes.io/os=linux 42hdaemonset.apps/ebs-csi-node-windows 0 0 0 0 0 kubernetes.io/os=windows 42hNAME READY UP-TO-DATE AVAILABLE AGEdeployment.apps/ebs-csi-controller 2/2 2 2 42hNAME DESIRED CURRENT READY AGEreplicaset.apps/ebs-csi-controller-57ff9dc5fc 0 0 0 42hreplicaset.apps/ebs-csi-controller-5f945bbdfc 2 2 2 10m 此时可以通过aws控制台对eks的Amazon EBS CSI 驱动程序进行管理，后续升级可以直接在控制台进行 查看Amazon EBS CSI 驱动程序的所有可用版本号 1$ aws eks describe-addon-versions --addon-name aws-ebs-csi-driver --profile eks-us-west-2 更新 Amazon EBS CSI 驱动程序 ，–force 表示强制更新 123456789101112# 查看是否有更新，可以看到UPDATE下有个可用更新版本 v1.20.0-eksbuild.1$ eksctl get addon --name aws-ebs-csi-driver --cluster eks-lexing --profile eks-us-west-22023-06-30 10:21:31 [ℹ] Kubernetes version &quot;1.26&quot; in use by cluster &quot;eks-lexing&quot;2023-06-30 10:21:32 [ℹ] to see issues for an addon run `eksctl get addon --name &lt;addon-name&gt; --cluster &lt;cluster-name&gt;`NAME VERSION STATUS ISSUES IAMROLE UPDATE AVAILABLE CONFIGURATION VALUESaws-ebs-csi-driver v1.19.0-eksbuild.2 ACTIVE 0 arn:aws:iam::743263909644:role/AmazonEKS_EBS_CSI_DriverRole v1.20.0-eksbuild.1# 更新到v1.20.0-eksbuild.1$ eksctl update addon --name aws-ebs-csi-driver --version v1.20.0-eksbuild.1 --cluster eks-lexing --profile eks-us-west-2 --force2023-06-30 10:22:23 [ℹ] Kubernetes version &quot;1.26&quot; in use by cluster &quot;eks-lexing&quot;2023-06-30 10:22:24 [ℹ] new version provided v1.20.0-eksbuild.12023-06-30 10:22:24 [ℹ] updating addon 删除 Amazon EBS CSI 驱动程序 1$ eksctl delete addon --cluster eks-lexing --profile eks-us-west-2 --name aws-ebs-csi-driver --preserve 默认eks为我们创建好了一个sc:gp2 12345678910111213# 默认的gp2配置yaml,其被设置为默认存储类kind: StorageClassapiVersion: storage.k8s.io/v1metadata: name: gp2 annotations: storageclass.kubernetes.io/is-default-class: &quot;true&quot;provisioner: kubernetes.io/aws-ebsparameters: type: gp2 fsType: ext4# storageclass.kubernetes.io/is-default-class: &quot;true&quot; 这个注释表示其是默认存储类 关于默认存储类的说明 在 AWS 的 Amazon EKS（Elastic Kubernetes Service）中，将一个 StorageClass（SC）设置为默认存储类具有以下作用： 自动分配: 当没有显式指定 StorageClass 的情况下，如果某个 Persistent Volume Claim（PVC）没有指定所需的 StorageClass，则默认会选择设置为默认存储类的 StorageClass 进行 PVC 的动态分配。 简化配置: 默认存储类可以简化 PVC 的配置，因为您不需要为每个 PVC 显式指定 StorageClass。只需创建 PVC，并且它将自动使用默认存储类进行分配。 默认设置: 默认存储类是集群级别的默认设置，适用于没有显式指定 StorageClass 的 PVC。这样可以确保在没有特定要求的情况下，PVC 可以使用预定义的默认存储类。 在 AWS EKS 中，只能有一个 StorageClass 被设置为默认存储类。这是因为默认存储类是集群范围的全局设置，它用于满足未显式指定 StorageClass 的 PVC 的需求。如果有多个 StorageClass 被设置为默认，会导致混乱和不确定性，因为 Kubernetes 将无法确定使用哪个默认存储类。 如果需要为不同的 PVC 使用不同的默认存储类，可以通过为每个 PVC 显式指定所需的 StorageClass 来实现，而不是依赖默认存储类。 总结来说，通过设置默认存储类，您可以简化 PVC 的配置并定义集群范围的默认设置。但是，在 AWS EKS 中，只能有一个默认存储类。 使用说明 创建StorageClass 12345678910111213141516171819202122232425262728293031# 创建基于gp3的sc# create-sc-gp3.yamlapiVersion: storage.k8s.io/v1kind: StorageClassmetadata: name: gp3provisioner: ebs.csi.aws.comvolumeBindingMode: WaitForFirstConsumerparameters: type: gp3allowVolumeExpansion: truereclaimPolicy: Delete# 部署$ k apply -f create-sc-gp3.yaml# 查看sc$ k get scNAME PROVISIONER RECLAIMPOLICY VOLUMEBINDINGMODE ALLOWVOLUMEEXPANSION AGEgp2 (default) kubernetes.io/aws-ebs Delete WaitForFirstConsumer false 175mgp3 ebs.csi.aws.com Delete WaitForFirstConsumer true 6s# 虽然创建sc时没有为其指定默认存储类，我们可以通过如下命令将指定的sc设置为默认存储类$ k annotate storageclass gp3 storageclass.kubernetes.io/is-default-class=true# 此时原gp2的默认存储类不会被去掉$ k get scNAME PROVISIONER RECLAIMPOLICY VOLUMEBINDINGMODE ALLOWVOLUMEEXPANSION AGEgp2 (default) kubernetes.io/aws-ebs Delete WaitForFirstConsumer false 20hgp3 (default) ebs.csi.aws.com Delete WaitForFirstConsumer true 17h# 取消指定的sc为默认存储类$ k annotate storageclass --overwrite=true gp3 storageclass.kubernetes.io/is-default-class=false 配置说明 provisioner 1234567891011121314# provisioner 定义了用于动态分配 PV 的存储插件或存储后端。它指定了负责创建和管理 PV 的控制器。# provisioner 的值通常是存储提供商或存储插件的名称，例如# kubernetes.io/aws-ebs（用于 Amazon EBS）、# kubernetes.io/gce-pd（用于 Google Compute Engine PD）等。# 不同的存储插件或存储后端可能具有不同的特性和配置选项。# 这里的ebs.csi.aws.com就是我们安装的Amazon EBS CSI 附加组件。# 在 AWS 的 Amazon EKS（Elastic Kubernetes Service）中，创建 StorageClass（SC）时，支持以下一些常见的 provisioner（供应商）选项：# kubernetes.io/aws-ebs: 这是用于 Amazon EBS（Elastic Block Store）的默认 provisioner。它允许在 EKS 集群上动态分配和管理基于 Amazon EBS 的持久卷（PV）。# kubernetes.io/aws-s3: 这是用于 Amazon S3（Simple Storage Service）的 provisioner。它允许在 EKS 集群中创建和管理基于 Amazon S3 的持久卷。# kubernetes.io/azure-disk: 这是用于 Azure Disk 的 provisioner。它允许在 EKS 集群上动态分配和管理基于 Azure Disk 的持久卷。# kubernetes.io/azure-file: 这是用于 Azure File 的 provisioner。它允许在 EKS 集群中创建和管理基于 Azure File 的持久卷。# 这些是一些常见的 provisioner，但实际上，您还可以使用其他存储插件或自定义 provisioner，以满足您特定的存储需求。不同的存储插件和供应商可能会支持不同的 provisioner，具体取决于您所使用的存储插件和存储后端。# 在创建 StorageClass 时，您需要指定适当的 provisioner 标识符，以便 Kubernetes 和 EKS 能够根据指定的 provisioner 来分配和管理持久卷。 allowVolumeExpansion 1234# allowVolumeExpansion 是一个布尔值参数，用于指定是否允许 PVC 的大小在运行时进行扩展。# 如果将其设置为 true，则表示 PVC 可以动态扩展其大小以满足需求。# 如果将其设置为 false，则 PVC 的大小将在创建时被固定，并且不能在后续进行扩展。# 这取决于存储后端是否支持 PVC 大小的动态调整。 volumeBindingMode 1234567# 在创建 StorageClass 时，可以指定 volumeBindingMode 来定义持久卷（Persistent Volume，PV）与 Persistent Volume Claim（PVC）之间的绑定行为。volumeBindingMode 可以具有以下几种选项：# Immediate: 当使用 Immediate 绑定模式时，Kubernetes 立即绑定 PVC 和 PV。这意味着在创建 PVC 时，Kubernetes 将立即选择并绑定一个可用的 PV。这种模式适用于那些支持动态供应的存储后端。# WaitForFirstConsumer: 使用 WaitForFirstConsumer 绑定模式时，PV 不会立即绑定到 PVC。PV 只有在第一个 Pod 试图使用 PVC 时才会绑定。这种模式适用于那些需要在 Pod 实际使用 PVC 之前进行一些准备工作的存储后端。例如，如果需要在创建 PV 后手动配置外部存储系统。# Delayed: Delayed 绑定模式类似于 WaitForFirstConsumer，但不支持多个 Pod 使用同一个 PVC。只有当 Pod 被调度到节点并使用 PVC 时，PV 才会绑定。这种模式适用于那些只支持单个 Pod 使用 PVC 的存储后端。与 WaitForFirstConsumer 模式相比，Delayed 模式对 PV 和 PVC 之间的绑定更加延迟。# Unknown: 如果未指定 volumeBindingMode，则默认为 Unknown。这意味着 Kubernetes 控制器或存储系统将决定如何绑定 PV 和 PVC。这种情况下，存储系统或云提供商的默认行为将适用。Amazon EBS CSI 只支持 Immediate 和 WaitForFirstConsumer，默认是Immediate。 reclaimPolicy 1234567# 在 Kubernetes 中，reclaimPolicy 是指定持久卷（Persistent Volume，PV）的回收策略。reclaimPolicy 可以具有以下几种选项：# Retain: 使用 Retain 回收策略时，PV 的数据将被保留，而不会被自动删除。当 PV 和其对应的 Persistent Volume Claim（PVC）之间的关系解除时，PV 不会被回收或删除。管理员需要手动处理 PV 的回收或重新使用。# Delete: Delete 回收策略表示在 PV 和 PVC 之间的关系解除时，PV 将被自动删除和回收。PV 中存储的数据将被清除，且无法恢复。这是最常见的回收策略，适用于临时数据或不需要长期保留的情况。# Recycle: Recycle 回收策略是 Kubernetes 早期版本中使用的一种策略，但在 Kubernetes v1.7 版本之后已被弃用。该策略在解除 PV 和 PVC 之间的关系后，会尝试清除 PV 中的数据，使其可以被其他 PVC 重新使用。但这个清除过程仅限于删除 PV 上的文件，而不会对 PV 进行格式化或重建。# External: External 回收策略表示在 PV 和 PVC 之间的关系解除时，PV 的回收和删除操作由外部的存储管理系统或管理员处理。Kubernetes 不会主动回收或删除 PV，而是委托给外部系统进行处理。Amazon EBS CSI 只支持 Retain 和 Delete，默认是Delete。 创建PVC 12345678910111213141516171819create-pvc.yamlapiVersion: v1kind: PersistentVolumeClaimmetadata: name: ebs-gp3-claimspec: accessModes: - ReadWriteOnce storageClassName: gp3 resources: requests: storage: 4Gi$ k apply -f create-pvc.yaml# pvc指定的sc中的volumeBindingMode是WaitForFirstConsumer，只有被使用到时才会去真正申请资源，所以此时看到的状态一直都会是Pending$ k get pvcNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEebs-gp3-claim Pending gp3 2m51s 配置说明 accessModes 12345678# 在 Kubernetes 中，PVC 是用于声明性地请求持久化存储资源的对象。它定义了 Pod 对持久卷（Persistent Volume，PV）的访问要求。PVC 可以指定不同的 accessModes，以确定 Pod 如何访问与之绑定的 PV。以下是 PVC 可能的 accessModes：# ReadWriteOnce (RWO): 此模式表示 PVC 可以被一个单个 Pod 以读写的方式挂载。这意味着 PVC 只能被一个 Pod 使用，而且可以同时读取和写入数据。这是许多常见应用程序的默认模式，例如关系型数据库。# ReadOnlyMany (ROX): 此模式表示 PVC 可以被多个 Pod 以只读的方式挂载。这意味着多个 Pod 可以同时读取数据，但不能写入。通常用于需要共享只读数据的场景，例如日志收集或静态内容的共享。# ReadWriteMany (RWX): 此模式表示 PVC 可以被多个 Pod 以读写的方式挂载。这意味着多个 Pod 可以同时读取和写入数据。然而，不是所有的存储插件都支持此模式，因此需要确保所使用的存储后端能够满足该要求。这是最具挑战性的模式，因为需要提供多个 Pod 之间的数据同步和一致性。需要注意的是，Amazon EBS CSI 目前只支持 ReadWriteOnce 访问模式，即每个卷只能被单个 Pod 以读写方式挂载。ReadOnlyMany 和 ReadWriteMany 访问模式在 Amazon EBS CSI 中尚未支持。如果您需要多个 Pod 可以同时以只读方式访问卷，您可以考虑使用 Amazon EFS（Elastic File System），它提供了 ReadWriteMany 访问模式，以满足多个 Pod 的同时只读访问需求。 申请ebs资源 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110# 可以创建一个pod绑定这个pvc就可以看到资源被申请了# create-pod.yamlapiVersion: v1kind: Podmetadata: name: appspec: containers: - name: app image: centos command: [&quot;/bin/sh&quot;] args: [&quot;-c&quot;, &quot;while true; do echo $(date -u) &gt;&gt; /data/out.txt; sleep 5; done&quot;] volumeMounts: - name: persistent-storage mountPath: /data volumes: - name: persistent-storage persistentVolumeClaim: claimName: ebs-gp3-claim$ k apply -f create-pod.yaml# 查看pv和pvc$ k get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpvc-02700260-b5e0-40bf-8c72-c1afad9e103e 4Gi RWO Delete Bound test/ebs-gp3-claim gp3 4m34s$ k get pvcNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEebs-gp3-claim Bound pvc-02700260-b5e0-40bf-8c72-c1afad9e103e 4Gi RWO gp3 9m27s# VolumeHandle: vol-0362860fb03d9d618 就是实际的EBS卷ID$ k describe pv pvc-02700260-b5e0-40bf-8c72-c1afad9e103eName: pvc-02700260-b5e0-40bf-8c72-c1afad9e103eLabels: &lt;none&gt;Annotations: pv.kubernetes.io/provisioned-by: ebs.csi.aws.com volume.kubernetes.io/provisioner-deletion-secret-name: volume.kubernetes.io/provisioner-deletion-secret-namespace:Finalizers: [kubernetes.io/pv-protection external-attacher/ebs-csi-aws-com]StorageClass: gp3Status: BoundClaim: test/ebs-gp3-claimReclaim Policy: DeleteAccess Modes: RWOVolumeMode: FilesystemCapacity: 4GiNode Affinity: Required Terms: Term 0: topology.ebs.csi.aws.com/zone in [us-west-2b]Message:Source: Type: CSI (a Container Storage Interface (CSI) volume source) Driver: ebs.csi.aws.com FSType: ext4 VolumeHandle: vol-0362860fb03d9d618 ReadOnly: false VolumeAttributes: storage.kubernetes.io/csiProvisionerIdentity=1687940646992-1017-ebs.csi.aws.comEvents: &lt;none&gt;# Used By 中展示的就是当前正在使用pvc的pod$ k describe pvc ebs-gp3-claimName: ebs-gp3-claimNamespace: testStorageClass: gp3Status: BoundVolume: pvc-02700260-b5e0-40bf-8c72-c1afad9e103eLabels: &lt;none&gt;Annotations: pv.kubernetes.io/bind-completed: yes pv.kubernetes.io/bound-by-controller: yes volume.beta.kubernetes.io/storage-provisioner: ebs.csi.aws.com volume.kubernetes.io/selected-node: ip-192-168-48-14.us-west-2.compute.internal volume.kubernetes.io/storage-provisioner: ebs.csi.aws.comFinalizers: [kubernetes.io/pvc-protection]Capacity: 4GiAccess Modes: RWOVolumeMode: FilesystemUsed By: app-56df75755d-2phz4 app-56df75755d-cvjvc app-56df75755d-xx9ghEvents: &lt;none&gt;# 此时如果删除pod，则其对应的pvc并不会被删除，之前申请到的ebs也不会被清除$ k delete -f create-pod.yaml$ k get podNo resources found in test namespace.$ k get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpvc-02700260-b5e0-40bf-8c72-c1afad9e103e 4Gi RWO Delete Bound test/ebs-gp3-claim gp3 9m47s$ k get pvcNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEebs-gp3-claim Bound pvc-02700260-b5e0-40bf-8c72-c1afad9e103e 4Gi RWO gp3 14m# 此时如果重新创建pod并关联该pvc，则磁盘依旧有效，并且是不会被清空的$ k apply -f create-pod.yaml# 查看pod的输出，可以看到中间有个超过5秒的间隔，这就是pod被删除然后又重建的间隔时间，说明磁盘没有被清空重建$ k exec -it app -- tail -f /data/out.txtThu Jun 29 01:51:31 UTC 2023Thu Jun 29 01:51:36 UTC 2023Thu Jun 29 01:51:41 UTC 2023Thu Jun 29 01:53:25 UTC 2023Thu Jun 29 01:53:30 UTC 2023Thu Jun 29 01:53:35 UTC 2023# 如果要彻底删除磁盘，需要删除pvc，sc中的reclaimPolicy是Delete才会被删除$ k delete -f create-pvc.yamlpersistentvolumeclaim &quot;ebs-gp3-claim&quot; deleted$ k get pvcNo resources found in test namespace.$ k get pvNo resources found 一个deployment并挂载ebs的示例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889# deployment-volume.yamlapiVersion: v1kind: PersistentVolumeClaimmetadata: name: ebs-gp3-claimspec: accessModes: - ReadWriteOnce storageClassName: gp3 resources: requests: storage: 4Gi---apiVersion: apps/v1kind: Deploymentmetadata: name: appspec: replicas: 3 selector: matchLabels: app: app template: metadata: labels: app: app spec: containers: - name: app image: centos command: [&quot;/bin/sh&quot;] args: [&quot;-c&quot;, &quot;while true; do echo $(date -u) &gt;&gt; /data/out.txt; sleep 5; done&quot;] volumeMounts: - name: persistent-storage mountPath: /data volumes: - name: persistent-storage persistentVolumeClaim: claimName: ebs-gp3-claim# 部署~ k deploy -f deployment-volume.yaml# 查看deploy~ k get deployNAME READY UP-TO-DATE AVAILABLE AGEapp 3/3 3 3 85s~ k get podNAME READY STATUS RESTARTS AGEapp-699cf8fdd-fk8vs 0/1 Running 0 90sapp-699cf8fdd-gpk7m 0/1 Running 0 90sapp-699cf8fdd-h5mbr 0/1 Running 0 90s# 可以看到3个pod在同时写入一个文件~ k exec -it app-699cf8fdd-fk8vs -- head /data/out.txtFri Jul 7 09:55:21 UTC 2023Fri Jul 7 09:55:21 UTC 2023Fri Jul 7 09:55:21 UTC 2023Fri Jul 7 09:55:26 UTC 2023Fri Jul 7 09:55:26 UTC 2023Fri Jul 7 09:55:26 UTC 2023Fri Jul 7 09:55:31 UTC 2023Fri Jul 7 09:55:31 UTC 2023# 重启deploy~ k rollout restart deployment appdeployment.apps/app restarted# 可以看到重新启动了3个pod，并且终止了原先启动的3个pod~ k get podNAME READY STATUS RESTARTS AGEapp-667968b659-62dpl 1/1 Running 0 6sapp-667968b659-7x6wj 1/1 Running 0 4sapp-667968b659-n2rvz 1/1 Running 0 2sapp-699cf8fdd-fk8vs 1/1 Terminating 0 287sapp-699cf8fdd-gpk7m 1/1 Terminating 0 287sapp-699cf8fdd-h5mbr 1/1 Terminating 0 287s# 可以看到重启deploy后，文件内容依旧存在~ k exec -it app-667968b659-62dpl -- head /data/out.txtFri Jul 7 09:55:21 UTC 2023Fri Jul 7 09:55:21 UTC 2023Fri Jul 7 09:55:21 UTC 2023Fri Jul 7 09:55:26 UTC 2023Fri Jul 7 09:55:26 UTC 2023Fri Jul 7 09:55:26 UTC 2023Fri Jul 7 09:55:31 UTC 2023Fri Jul 7 09:55:31 UTC 2023 讨论 这里注意一下，k8s-1.23版本创建时会成功，但是重启不成功，只会重新启动成功一个pod，另外两个pod会失败，提示pvc已经被一个pod关联了，但是1.25版就可以创建和重启时都可以成功，不确定是否和Amazon EBS CSI 版本有关系。 后记 这里要注意一个问题，如果pv被pvc绑定，此时是无法删除pv的，同理pvc被其它资源关联，也是不能被删除的，需要先删除对应的资源才可以。 EBS不能跨可用区，如果pod部署在不同的可用区，则不能使用ebs作为存储，此时可以使用EFS。","summary":"摘要 本文介绍在EKS集群中安装 Amazon EBS CSI 驱动程序过程 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T14:30:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks04-vpc-cni/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks04-vpc-cni/","title":"AWS-EKS-04--安装 Amazon VPC CNI","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍在EKS集群中安装 Amazon VPC CNI的过程</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"安装Amazon-VPC-CNI-plugin-for-Kubernetes\">安装Amazon VPC CNI plugin for Kubernetes</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Amazon VPC CNI plugin for Kubernetes 是 Amazon EKS 集群中用于 Pod 联网的联网插件。该插件负责向 Kubernetes 节点分配 VPC IP 地址并为每个节点上的 Pods 配置所需网络。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果您使用 AWS Management Console 部署了集群，则可以跳过此步骤。AWS Management Console在默认情况下会部署 Amazon VPC CNI plugin for Kubernetes、CoreDNS、kube-proxy Amazon EKS 附加组件。<br>\n如果您使用 eksctl 或 AWS CLI 部署集群，则 Amazon VPC CNI plugin for Kubernetes、CoreDNS 和 kube-proxy 自行管理的附加组件将会被部署。您可以将使用您的集群部署的 Amazon VPC CNI plugin for Kubernetes、CoreDNS 和 kube-proxy 自行管理的附加组件迁移到 Amazon EKS 附加组件中。为了遵循最小特权原则，AWS建议我们将<code>AmazonEKS_CNI_Policy</code>策略附加到专门用于Amazon VPC CNI附加组件的单独角色。</p>\n</li>\n<li class=\"lvl-2\">\n<p>创建 IAM 角色</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 确定您的集群的 IP 系列</span></span><br><span class=\"line\">$ aws eks describe-cluster --name eks-lexing  --profile eks-us-west-2 | grep ipFamily</span><br><span class=\"line\">            <span class=\"string\">&quot;ipFamily&quot;</span>: <span class=\"string\">&quot;ipv4&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 使用与您的集群的 IP 系列匹配的命令创建 IAM 角色并将 IAM policy 附加到该角色。此命令创建并部署一个创建 IAM 角色的 AWS CloudFormation 堆栈，向其附加您指定的策略，并使用所创建 IAM 角色的 ARN 对现有 aws-node Kubernetes 服务账户添加注释。</span></span><br><span class=\"line\">$ eksctl create iamserviceaccount --name aws-node --namespace kube-system \\</span><br><span class=\"line\">    --cluster eks-lexing --profile eks-us-west-2 \\</span><br><span class=\"line\">    --role-name AmazonEKSVPCCNIRole \\</span><br><span class=\"line\">    --attach-policy-arn arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy \\</span><br><span class=\"line\">    --override-existing-serviceaccounts \\</span><br><span class=\"line\">    --approve</span><br><span class=\"line\"> 2023-06-30 16:38:30 [ℹ]  1 existing iamserviceaccount(s) (kube-system/ebs-csi-controller-sa) will be excluded</span><br><span class=\"line\">2023-06-30 16:38:30 [ℹ]  1 iamserviceaccount (kube-system/aws-node) was included (based on the include/exclude rules)</span><br><span class=\"line\">2023-06-30 16:38:30 [!]  metadata of serviceaccounts that exist <span class=\"keyword\">in</span> Kubernetes will be updated, as --override-existing-serviceaccounts was <span class=\"built_in\">set</span></span><br><span class=\"line\">2023-06-30 16:38:30 [ℹ]  1 task: &#123;</span><br><span class=\"line\">    2 sequential sub-tasks: &#123;</span><br><span class=\"line\">        create IAM role <span class=\"keyword\">for</span> serviceaccount <span class=\"string\">&quot;kube-system/aws-node&quot;</span>,</span><br><span class=\"line\">        create serviceaccount <span class=\"string\">&quot;kube-system/aws-node&quot;</span>,</span><br><span class=\"line\">    &#125; &#125;2023-06-30 16:38:30 [ℹ]  building iamserviceaccount stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-node&quot;</span></span><br><span class=\"line\">2023-06-30 16:38:31 [ℹ]  deploying stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-node&quot;</span></span><br><span class=\"line\">2023-06-30 16:38:31 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-node&quot;</span></span><br><span class=\"line\">2023-06-30 16:39:02 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-node&quot;</span></span><br><span class=\"line\">2023-06-30 16:39:04 [ℹ]  serviceaccount <span class=\"string\">&quot;kube-system/aws-node&quot;</span> already exists</span><br><span class=\"line\">2023-06-30 16:39:04 [ℹ]  updated serviceaccount <span class=\"string\">&quot;kube-system/aws-node&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新部署 Amazon VPC CNI plugin for KubernetesPods</span></span><br><span class=\"line\"><span class=\"comment\"># 删除并重新创建任何与服务账户关联的现有 Pods，以应用凭证环境变量。注释未应用于目前在没有注释的情况下运行的 Pods。以下命令删除现有的 aws-node DaemonSet Pods 并使用服务账户注释部署它们。</span></span><br><span class=\"line\">$ kubectl delete Pods -n kube-system -l k8s-app=aws-node</span><br><span class=\"line\">pod <span class=\"string\">&quot;aws-node-fzh9v&quot;</span> deleted</span><br><span class=\"line\">pod <span class=\"string\">&quot;aws-node-t62f8&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确认 Pods 已全部重新启动</span></span><br><span class=\"line\">$ kubectl get pods -n kube-system -l k8s-app=aws-node</span><br><span class=\"line\">NAME             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">aws-node-q2zfb   1/1     Running   0          11s</span><br><span class=\"line\">aws-node-rmfbk   1/1     Running   0          11s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 描述 Pods 之一并确保 AWS_WEB_IDENTITY_TOKEN_FILE 和 AWS_ROLE_ARN 环境变量存在。</span></span><br><span class=\"line\">$ kubectl describe pod -n kube-system aws-node-q2zfb | grep <span class=\"string\">&#x27;AWS_ROLE_ARN:\\|AWS_WEB_IDENTITY_TOKEN_FILE:&#x27;</span></span><br><span class=\"line\">      AWS_ROLE_ARN:                 arn:aws:iam::743263909655:role/AmazonEKSVPCCNIRole</span><br><span class=\"line\">      AWS_WEB_IDENTITY_TOKEN_FILE:  /var/run/secrets/eks.amazonaws.com/serviceaccount/token</span><br><span class=\"line\">      AWS_ROLE_ARN:                           arn:aws:iam::743263909655:role/AmazonEKSVPCCNIRole</span><br><span class=\"line\">      AWS_WEB_IDENTITY_TOKEN_FILE:            /var/run/secrets/eks.amazonaws.com/serviceaccount/token</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>配置好上面的IAM角色后，要从节点 IAM 角色中删除 CNI 策略</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">在角色列表中搜索 eksNodeRole、AmazonEKSNodeRole 或 NodeInstanceRole，应该存在一个，我这里就是存在 NodeInstanceRole，如果一个都不存在就先参照上文创建一个新的IAM角色<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/Dih0XN.png\" alt=\"\" width=\"900\" height=\"300\"></li>\n<li class=\"lvl-6\">删除策略 AmazonEKS_CNI_Policy<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/VX6Ro8.png\" alt=\"\" width=\"900\" height=\"600\"></li>\n<li class=\"lvl-6\">也可以通过命令行删除角色中的策略</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aws iam detach-role-policy --profile eks-us-west-2 --role-name eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y28EPJO9XYDG --policy-arn arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy</span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>安装Amazon VPC CNI plugin for Kubernetes</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看集群上当前安装的附加组件版本</span></span><br><span class=\"line\">$ kubectl describe daemonset aws-node --namespace kube-system | grep amazon-k8s-cni: | <span class=\"built_in\">cut</span> -d : -f 3</span><br><span class=\"line\">v1.12.2-eksbuild.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看集群上当前安装的附加组件类型。根据您创建集群时使用的工具，您的集群上目前可能没有安装 Amazon EKS 附加组件类型</span></span><br><span class=\"line\">$ aws eks describe-addon --cluster-name eks-lexing --profile eks-us-west-2 --addon-name vpc-cni --query addon.addonVersion --output text</span><br><span class=\"line\"></span><br><span class=\"line\">An error occurred (ResourceNotFoundException) when calling the DescribeAddon operation: No addon: vpc-cni found <span class=\"keyword\">in</span> cluster: eks-lexing</span><br><span class=\"line\"><span class=\"comment\"># 如果返回版本号，则表明您的集群上安装有 Amazon EKS 附加组件类型，且您不需要完成此过程的其余步骤。如果返回错误，则表明您的集群上安装有 Amazon EKS 类型的附加组件。完成此过程的其余步骤以进行安装。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 AWS CLI 创建附加组件，注意这里--addon-version的版本号要与https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/managing-vpc-cni.html中的k8s版本相对应</span></span><br><span class=\"line\"><span class=\"comment\"># AmazonEKSVPCCNIRole就是上面创建的角色的名称</span></span><br><span class=\"line\">$ aws eks create-addon --cluster-name eks-lexing --profile eks-us-west-2 \\</span><br><span class=\"line\">    --addon-name vpc-cni \\</span><br><span class=\"line\">    --addon-version v1.12.6-eksbuild.2 \\</span><br><span class=\"line\">    --resolve-conflicts OVERWRITE \\</span><br><span class=\"line\">    --service-account-role-arn arn:aws:iam::743263909655:role/AmazonEKSVPCCNIRole</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;addon&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;addonName&quot;</span>: <span class=\"string\">&quot;vpc-cni&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;clusterName&quot;</span>: <span class=\"string\">&quot;eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;CREATING&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;addonVersion&quot;</span>: <span class=\"string\">&quot;v1.12.6-eksbuild.2&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;health&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;issues&quot;</span>: []</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;addonArn&quot;</span>: <span class=\"string\">&quot;arn:aws:eks:us-west-2:743263909655:addon/eks-lexing/vpc-cni/bcc485cc-cf4c-f8c6-84da-55c66044e0ff&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;createdAt&quot;</span>: <span class=\"string\">&quot;2023-06-30T17:19:24.457000+08:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;modifiedAt&quot;</span>: <span class=\"string\">&quot;2023-06-30T17:19:24.475000+08:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;serviceAccountRoleArn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909655:role/AmazonEKSVPCCNIRole&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;tags&quot;</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确认您的集群的 Kubernetes 版本的附加组件最新版本已添加到您的集群</span></span><br><span class=\"line\">$ aws eks describe-addon --cluster-name eks-lexing --profile eks-us-west-2 --addon-name vpc-cni --query addon.addonVersion --output text</span><br><span class=\"line\">v1.12.6-eksbuild.2</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl describe daemonset aws-node --namespace kube-system | grep amazon-k8s-cni: | <span class=\"built_in\">cut</span> -d : -f 3</span><br><span class=\"line\">v1.12.6-eksbuild.2</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时可以通过aws控制台对eks的 Amazon VPC CNI 插件进行管理，后续升级可以直接在控制台进行<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/53TeZU.png\" alt=\"\" width=\"1200\" height=\"600\"></p>\n</li>\n</ul>\n<h2 id=\"查看eks的所有可用组件\">查看eks的所有可用组件</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看都有哪些组件</span></span><br><span class=\"line\">$ eksctl utils describe-addon-versions --kubernetes-version 1.26 --profile eks-us-west-2 | grep AddonName</span><br><span class=\"line\">            <span class=\"string\">&quot;AddonName&quot;</span>: <span class=\"string\">&quot;kube-proxy&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;AddonName&quot;</span>: <span class=\"string\">&quot;adot&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;AddonName&quot;</span>: <span class=\"string\">&quot;aws-guardduty-agent&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;AddonName&quot;</span>: <span class=\"string\">&quot;vpc-cni&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;AddonName&quot;</span>: <span class=\"string\">&quot;kubecost_kubecost&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;AddonName&quot;</span>: <span class=\"string\">&quot;coredns&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;AddonName&quot;</span>: <span class=\"string\">&quot;aws-ebs-csi-driver&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个组件有哪些版本</span></span><br><span class=\"line\">$ eksctl utils describe-addon-versions --kubernetes-version 1.26 --name vpc-cni --profile eks-us-west-2 | grep AddonVersion</span><br><span class=\"line\">            <span class=\"string\">&quot;AddonVersions&quot;</span>: [</span><br><span class=\"line\">                    <span class=\"string\">&quot;AddonVersion&quot;</span>: <span class=\"string\">&quot;v1.13.2-eksbuild.1&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;AddonVersion&quot;</span>: <span class=\"string\">&quot;v1.13.0-eksbuild.1&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;AddonVersion&quot;</span>: <span class=\"string\">&quot;v1.12.6-eksbuild.2&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;AddonVersion&quot;</span>: <span class=\"string\">&quot;v1.12.6-eksbuild.1&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;AddonVersion&quot;</span>: <span class=\"string\">&quot;v1.12.5-eksbuild.2&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;AddonVersion&quot;</span>: <span class=\"string\">&quot;v1.12.0-eksbuild.2&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确定您要创建的附加组件是 Amazon EKS 还是 AWS Marketplace 附加组件，如果未返回输出，则该附加组件是 Amazon EKS。如果返回输出，则该附加组件是 AWS Marketplace 附加组件。</span></span><br><span class=\"line\">$ eksctl utils describe-addon-versions --kubernetes-version 1.26 --name vpc-cni --profile eks-us-west-2 | grep ProductUrl</span><br><span class=\"line\"></span><br><span class=\"line\">$ eksctl utils describe-addon-versions --kubernetes-version 1.26 --name kubecost_kubecost --profile  eks-us-west-2 | grep ProductUrl</span><br><span class=\"line\">                <span class=\"string\">&quot;ProductUrl&quot;</span>: <span class=\"string\">&quot;https://aws.amazon.com/marketplace/pp?sku=753cea16-f450-4cfa-93eb-f55dcde11e91&quot;</span></span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍在EKS集群中安装 Amazon VPC CNI的过程 参考资料： Amazon EKS用户指南 Kubernetes 文档 安装Amazon VPC CNI plugin for Kubernetes Amazon VPC CNI plugin for Kubernetes 是 Amazon EKS 集群中用于 Pod 联网的联网插件。该插件负责向 Kubernetes 节点分配 VPC IP 地址并为每个节点上的 Pods 配置所需网络。 如果您使用 AWS Management Console 部署了集群，则可以跳过此步骤。AWS Management Console在默认情况下会部署 Amazon VPC CNI plugin for Kubernetes、CoreDNS、kube-proxy Amazon EKS 附加组件。 如果您使用 eksctl 或 AWS CLI 部署集群，则 Amazon VPC CNI plugin for Kubernetes、CoreDNS 和 kube-proxy 自行管理的附加组件将会被部署。您可以将使用您的集群部署的 Amazon VPC CNI plugin for Kubernetes、CoreDNS 和 kube-proxy 自行管理的附加组件迁移到 Amazon EKS 附加组件中。为了遵循最小特权原则，AWS建议我们将AmazonEKS_CNI_Policy策略附加到专门用于Amazon VPC CNI附加组件的单独角色。 创建 IAM 角色 123456789101112131415161718192021222324252627282930313233343536373839404142# 确定您的集群的 IP 系列$ aws eks describe-cluster --name eks-lexing --profile eks-us-west-2 | grep ipFamily &quot;ipFamily&quot;: &quot;ipv4&quot;# 使用与您的集群的 IP 系列匹配的命令创建 IAM 角色并将 IAM policy 附加到该角色。此命令创建并部署一个创建 IAM 角色的 AWS CloudFormation 堆栈，向其附加您指定的策略，并使用所创建 IAM 角色的 ARN 对现有 aws-node Kubernetes 服务账户添加注释。$ eksctl create iamserviceaccount --name aws-node --namespace kube-system \\ --cluster eks-lexing --profile eks-us-west-2 \\ --role-name AmazonEKSVPCCNIRole \\ --attach-policy-arn arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy \\ --override-existing-serviceaccounts \\ --approve 2023-06-30 16:38:30 [ℹ] 1 existing iamserviceaccount(s) (kube-system/ebs-csi-controller-sa) will be excluded2023-06-30 16:38:30 [ℹ] 1 iamserviceaccount (kube-system/aws-node) was included (based on the include/exclude rules)2023-06-30 16:38:30 [!] metadata of serviceaccounts that exist in Kubernetes will be updated, as --override-existing-serviceaccounts was set2023-06-30 16:38:30 [ℹ] 1 task: &#123; 2 sequential sub-tasks: &#123; create IAM role for serviceaccount &quot;kube-system/aws-node&quot;, create serviceaccount &quot;kube-system/aws-node&quot;, &#125; &#125;2023-06-30 16:38:30 [ℹ] building iamserviceaccount stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-node&quot;2023-06-30 16:38:31 [ℹ] deploying stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-node&quot;2023-06-30 16:38:31 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-node&quot;2023-06-30 16:39:02 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-kube-system-aws-node&quot;2023-06-30 16:39:04 [ℹ] serviceaccount &quot;kube-system/aws-node&quot; already exists2023-06-30 16:39:04 [ℹ] updated serviceaccount &quot;kube-system/aws-node&quot;# 重新部署 Amazon VPC CNI plugin for KubernetesPods# 删除并重新创建任何与服务账户关联的现有 Pods，以应用凭证环境变量。注释未应用于目前在没有注释的情况下运行的 Pods。以下命令删除现有的 aws-node DaemonSet Pods 并使用服务账户注释部署它们。$ kubectl delete Pods -n kube-system -l k8s-app=aws-nodepod &quot;aws-node-fzh9v&quot; deletedpod &quot;aws-node-t62f8&quot; deleted# 确认 Pods 已全部重新启动$ kubectl get pods -n kube-system -l k8s-app=aws-nodeNAME READY STATUS RESTARTS AGEaws-node-q2zfb 1/1 Running 0 11saws-node-rmfbk 1/1 Running 0 11s# 描述 Pods 之一并确保 AWS_WEB_IDENTITY_TOKEN_FILE 和 AWS_ROLE_ARN 环境变量存在。$ kubectl describe pod -n kube-system aws-node-q2zfb | grep &#x27;AWS_ROLE_ARN:\\|AWS_WEB_IDENTITY_TOKEN_FILE:&#x27; AWS_ROLE_ARN: arn:aws:iam::743263909655:role/AmazonEKSVPCCNIRole AWS_WEB_IDENTITY_TOKEN_FILE: /var/run/secrets/eks.amazonaws.com/serviceaccount/token AWS_ROLE_ARN: arn:aws:iam::743263909655:role/AmazonEKSVPCCNIRole AWS_WEB_IDENTITY_TOKEN_FILE: /var/run/secrets/eks.amazonaws.com/serviceaccount/token 配置好上面的IAM角色后，要从节点 IAM 角色中删除 CNI 策略 在角色列表中搜索 eksNodeRole、AmazonEKSNodeRole 或 NodeInstanceRole，应该存在一个，我这里就是存在 NodeInstanceRole，如果一个都不存在就先参照上文创建一个新的IAM角色 删除策略 AmazonEKS_CNI_Policy 也可以通过命令行删除角色中的策略 1aws iam detach-role-policy --profile eks-us-west-2 --role-name eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y28EPJO9XYDG --policy-arn arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy 安装Amazon VPC CNI plugin for Kubernetes 12345678910111213141516171819202122232425262728293031323334353637383940# 查看集群上当前安装的附加组件版本$ kubectl describe daemonset aws-node --namespace kube-system | grep amazon-k8s-cni: | cut -d : -f 3v1.12.2-eksbuild.1# 查看集群上当前安装的附加组件类型。根据您创建集群时使用的工具，您的集群上目前可能没有安装 Amazon EKS 附加组件类型$ aws eks describe-addon --cluster-name eks-lexing --profile eks-us-west-2 --addon-name vpc-cni --query addon.addonVersion --output textAn error occurred (ResourceNotFoundException) when calling the DescribeAddon operation: No addon: vpc-cni found in cluster: eks-lexing# 如果返回版本号，则表明您的集群上安装有 Amazon EKS 附加组件类型，且您不需要完成此过程的其余步骤。如果返回错误，则表明您的集群上安装有 Amazon EKS 类型的附加组件。完成此过程的其余步骤以进行安装。# 使用 AWS CLI 创建附加组件，注意这里--addon-version的版本号要与https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/managing-vpc-cni.html中的k8s版本相对应# AmazonEKSVPCCNIRole就是上面创建的角色的名称$ aws eks create-addon --cluster-name eks-lexing --profile eks-us-west-2 \\ --addon-name vpc-cni \\ --addon-version v1.12.6-eksbuild.2 \\ --resolve-conflicts OVERWRITE \\ --service-account-role-arn arn:aws:iam::743263909655:role/AmazonEKSVPCCNIRole&#123; &quot;addon&quot;: &#123; &quot;addonName&quot;: &quot;vpc-cni&quot;, &quot;clusterName&quot;: &quot;eks-lexing&quot;, &quot;status&quot;: &quot;CREATING&quot;, &quot;addonVersion&quot;: &quot;v1.12.6-eksbuild.2&quot;, &quot;health&quot;: &#123; &quot;issues&quot;: [] &#125;, &quot;addonArn&quot;: &quot;arn:aws:eks:us-west-2:743263909655:addon/eks-lexing/vpc-cni/bcc485cc-cf4c-f8c6-84da-55c66044e0ff&quot;, &quot;createdAt&quot;: &quot;2023-06-30T17:19:24.457000+08:00&quot;, &quot;modifiedAt&quot;: &quot;2023-06-30T17:19:24.475000+08:00&quot;, &quot;serviceAccountRoleArn&quot;: &quot;arn:aws:iam::743263909655:role/AmazonEKSVPCCNIRole&quot;, &quot;tags&quot;: &#123;&#125; &#125;&#125;# 确认您的集群的 Kubernetes 版本的附加组件最新版本已添加到您的集群$ aws eks describe-addon --cluster-name eks-lexing --profile eks-us-west-2 --addon-name vpc-cni --query addon.addonVersion --output textv1.12.6-eksbuild.2$ kubectl describe daemonset aws-node --namespace kube-system | grep amazon-k8s-cni: | cut -d : -f 3v1.12.6-eksbuild.2 此时可以通过aws控制台对eks的 Amazon VPC CNI 插件进行管理，后续升级可以直接在控制台进行 查看eks的所有可用组件 12345678910111213141516171819202122232425# 查看都有哪些组件$ eksctl utils describe-addon-versions --kubernetes-version 1.26 --profile eks-us-west-2 | grep AddonName &quot;AddonName&quot;: &quot;kube-proxy&quot;, &quot;AddonName&quot;: &quot;adot&quot;, &quot;AddonName&quot;: &quot;aws-guardduty-agent&quot;, &quot;AddonName&quot;: &quot;vpc-cni&quot;, &quot;AddonName&quot;: &quot;kubecost_kubecost&quot;, &quot;AddonName&quot;: &quot;coredns&quot;, &quot;AddonName&quot;: &quot;aws-ebs-csi-driver&quot;,# 查看某个组件有哪些版本$ eksctl utils describe-addon-versions --kubernetes-version 1.26 --name vpc-cni --profile eks-us-west-2 | grep AddonVersion &quot;AddonVersions&quot;: [ &quot;AddonVersion&quot;: &quot;v1.13.2-eksbuild.1&quot;, &quot;AddonVersion&quot;: &quot;v1.13.0-eksbuild.1&quot;, &quot;AddonVersion&quot;: &quot;v1.12.6-eksbuild.2&quot;, &quot;AddonVersion&quot;: &quot;v1.12.6-eksbuild.1&quot;, &quot;AddonVersion&quot;: &quot;v1.12.5-eksbuild.2&quot;, &quot;AddonVersion&quot;: &quot;v1.12.0-eksbuild.2&quot;,# 确定您要创建的附加组件是 Amazon EKS 还是 AWS Marketplace 附加组件，如果未返回输出，则该附加组件是 Amazon EKS。如果返回输出，则该附加组件是 AWS Marketplace 附加组件。$ eksctl utils describe-addon-versions --kubernetes-version 1.26 --name vpc-cni --profile eks-us-west-2 | grep ProductUrl$ eksctl utils describe-addon-versions --kubernetes-version 1.26 --name kubecost_kubecost --profile eks-us-west-2 | grep ProductUrl &quot;ProductUrl&quot;: &quot;https://aws.amazon.com/marketplace/pp?sku=753cea16-f450-4cfa-93eb-f55dcde11e91&quot;","summary":"摘要 本文介绍在EKS集群中安装 Amazon VPC CNI的过程 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T13:30:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks03-oidc/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks03-oidc/","title":"AWS-EKS-03--创建 IAM OIDC 身份提供商","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为EKS集群创建 IAM OIDC 身份提供商</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"为集群创建-IAM-OIDC-身份提供商\">为集群创建 IAM OIDC 身份提供商</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>要使用某些 Amazon EKS 附加组件，或启用个别 Kubernetes 工作负载以具有特定 AWS Identity and Access Management（IAM）权限，请为集群创建 IAM OpenID Connect（OIDC）提供商。</p>\n</li>\n<li class=\"lvl-2\">\n<p>只需为集群创建一次 IAM OIDC 提供商。</p>\n</li>\n<li class=\"lvl-2\">\n<p>确定您的账户中是否已存在具有您的集群 ID 的 IAM OIDC 提供商</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 确定集群是否拥有现有 IAM OIDC 提供商。检索集群的 OIDC 提供商 ID 并将其存储在变量中</span></span><br><span class=\"line\">$ oidc_id=$(aws eks describe-cluster --name eks-lexing --profile eks-us-west-2 --query <span class=\"string\">&quot;cluster.identity.oidc.issuer&quot;</span> --output text | <span class=\"built_in\">cut</span> -d <span class=\"string\">&#x27;/&#x27;</span> -f 5)</span><br><span class=\"line\"><span class=\"comment\"># 如果下面的命令返回了输出，则表示您的集群已经有 IAM OIDC 提供商，您可以跳过下一步。如果没有返回输出，则您必须为集群创建 IAM OIDC 提供商。</span></span><br><span class=\"line\">$ aws iam --profile eks-us-west-2 list-open-id-connect-providers | grep <span class=\"variable\">$oidc_id</span> | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot;/&quot;</span> -f4</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用以下命令为您的集群创建 IAM OIDC 身份提供商</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ eksctl utils associate-iam-oidc-provider --cluster eks-lexing --profile eks-us-west-2 --approve</span><br><span class=\"line\">2023-06-28 15:38:20 [ℹ]  will create IAM Open ID Connect provider <span class=\"keyword\">for</span> cluster <span class=\"string\">&quot;eks-lexing&quot;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;us-west-2&quot;</span></span><br><span class=\"line\">2023-06-28 15:38:21 [✔]  created IAM Open ID Connect provider <span class=\"keyword\">for</span> cluster <span class=\"string\">&quot;eks-lexing&quot;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;us-west-2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看集群的 OIDC 提供商 URL，如果该命令返回为空，则说明尚未创建IAM OIDC 身份提供商</span></span><br><span class=\"line\">$ aws eks describe-cluster --name eks-lexing --query <span class=\"string\">&quot;cluster.identity.oidc.issuer&quot;</span> --output text --profile eks-us-west-2</span><br><span class=\"line\">https://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB8725555A1CC65D44191A56</span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam --profile eks-us-west-2 list-open-id-connect-providers | grep <span class=\"variable\">$oidc_id</span> | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot;/&quot;</span> -f4</span><br><span class=\"line\">1029FF88CB8725555A1CC65D44191A56<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看OIDC元数据\">查看OIDC元数据</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在集群的 OIDC 提供商 URL后面加上<code>/.well-known/openid-configuration</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB8725555A1CC65D44191A56/.well-known/openid-configuration -s| python -m json.tool</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;authorization_endpoint&quot;</span>: <span class=\"string\">&quot;urn:kubernetes:programmatic_authorization&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;claims_supported&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;sub&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;iss&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;id_token_signing_alg_values_supported&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;RS256&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;issuer&quot;</span>: <span class=\"string\">&quot;https://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB8725555A1CC65D44191A56&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;jwks_uri&quot;</span>: <span class=\"string\">&quot;https://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB8725555A1CC65D44191A56/keys&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;response_types_supported&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;id_token&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;subject_types_supported&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;public&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>然后查看<code>jwks_uri</code>中的url，这里的keys就是 IAM 用来验证 EKS service account 发送过来的 ID_token 是否有效的。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB8725555A1CC65D44191A56/keys -s | python -m json.tool</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;keys&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;alg&quot;</span>: <span class=\"string\">&quot;RS256&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;e&quot;</span>: <span class=\"string\">&quot;AQAB&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;kid&quot;</span>: <span class=\"string\">&quot;4e49f2d2c6c8550c55556b01637a93a8a4f941e5&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;kty&quot;</span>: <span class=\"string\">&quot;RSA&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;n&quot;</span>: <span class=\"string\">&quot;rEKprAR5nRAHfulQyyI9unXUNpczPCKZO8hXVuTiKrwlzdI7pETs6g0hWQaKe96n4p-KERF-dc-KajboMqrCfsff7boVJdnA9k8CljwKvt-5ILyXe07ASZQkkbDgpY30GNvMB7tbhiwkaNjuBzrLsO2Ipom5rzlK3i6rjHxp3O94BgMbMMt4trvWtJ9vmhWILihkl_e8--5JOOzjjeNcrNoK_o5LxbHSetaALoGAk-XbCmUeFDWvLQ&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;use&quot;</span>: <span class=\"string\">&quot;sig&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;alg&quot;</span>: <span class=\"string\">&quot;RS256&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;e&quot;</span>: <span class=\"string\">&quot;AQAB&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;kid&quot;</span>: <span class=\"string\">&quot;831cd2c5a14af3ff3ee5555ab1edf6dc7d7fb54d&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;kty&quot;</span>: <span class=\"string\">&quot;RSA&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;n&quot;</span>: <span class=\"string\">&quot;xdlnMmc1lUGyVlt58621Arf-2Ytxxe5HCiBguYe1Y4DYvfxTzknH3x07Q1sMQLNGHV_4d-bT29ufhAnht6AaLcuxtxaonEcMArh95bnuau6-GFMe06XaBYlMDoTcf_czTGdI4On7veJtMpSsNlHNj507Jn6mcH8TGHIl6qRwj9NZSaoADrkDO87O-w71l1c2a3m0us1vWir0QJdZ3J2al4k1Qm7KZT-dN9rs2LquQS0s6MTX-VdQLFb&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;use&quot;</span>: <span class=\"string\">&quot;sig&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;alg&quot;</span>: <span class=\"string\">&quot;RS256&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;e&quot;</span>: <span class=\"string\">&quot;AQAB&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;kid&quot;</span>: <span class=\"string\">&quot;eba5269e0fedd9431af2755550dd09f85bec7ad0&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;kty&quot;</span>: <span class=\"string\">&quot;RSA&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;n&quot;</span>: <span class=\"string\">&quot;qzfrIdEsOebdO243KkkGOl8r1rXiErQXwjK0RspvrX6roV6uJg6gBT0qBN7nM1J92WNVNte-3UhcBfm_hdBHRfib8zN_AvMNZ04Yc76hri7xTqa1iHFLl8823YEBnP_FSM97rdzsz_wCNkBM8bzsD-Cg4KMqrrY_qzFFymBRHPklBLyJudJN1zv8_dCXbDzBKtQo8UklM3MuSLsIf1TZGDbpemEpvNO-mu9UDVEccw0oeMPPKx6K_br&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;use&quot;</span>: <span class=\"string\">&quot;sig&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍为EKS集群创建 IAM OIDC 身份提供商 参考资料： Amazon EKS用户指南 Kubernetes 文档 为集群创建 IAM OIDC 身份提供商 要使用某些 Amazon EKS 附加组件，或启用个别 Kubernetes 工作负载以具有特定 AWS Identity and Access Management（IAM）权限，请为集群创建 IAM OpenID Connect（OIDC）提供商。 只需为集群创建一次 IAM OIDC 提供商。 确定您的账户中是否已存在具有您的集群 ID 的 IAM OIDC 提供商 1234# 确定集群是否拥有现有 IAM OIDC 提供商。检索集群的 OIDC 提供商 ID 并将其存储在变量中$ oidc_id=$(aws eks describe-cluster --name eks-lexing --profile eks-us-west-2 --query &quot;cluster.identity.oidc.issuer&quot; --output text | cut -d &#x27;/&#x27; -f 5)# 如果下面的命令返回了输出，则表示您的集群已经有 IAM OIDC 提供商，您可以跳过下一步。如果没有返回输出，则您必须为集群创建 IAM OIDC 提供商。$ aws iam --profile eks-us-west-2 list-open-id-connect-providers | grep $oidc_id | cut -d &quot;/&quot; -f4 使用以下命令为您的集群创建 IAM OIDC 身份提供商 12345678910$ eksctl utils associate-iam-oidc-provider --cluster eks-lexing --profile eks-us-west-2 --approve2023-06-28 15:38:20 [ℹ] will create IAM Open ID Connect provider for cluster &quot;eks-lexing&quot; in &quot;us-west-2&quot;2023-06-28 15:38:21 [✔] created IAM Open ID Connect provider for cluster &quot;eks-lexing&quot; in &quot;us-west-2&quot;# 查看集群的 OIDC 提供商 URL，如果该命令返回为空，则说明尚未创建IAM OIDC 身份提供商$ aws eks describe-cluster --name eks-lexing --query &quot;cluster.identity.oidc.issuer&quot; --output text --profile eks-us-west-2https://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB8725555A1CC65D44191A56$ aws iam --profile eks-us-west-2 list-open-id-connect-providers | grep $oidc_id | cut -d &quot;/&quot; -f41029FF88CB8725555A1CC65D44191A56&quot; 查看OIDC元数据 在集群的 OIDC 提供商 URL后面加上/.well-known/openid-configuration 12345678910111213141516171819$ curl https://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB8725555A1CC65D44191A56/.well-known/openid-configuration -s| python -m json.tool&#123; &quot;authorization_endpoint&quot;: &quot;urn:kubernetes:programmatic_authorization&quot;, &quot;claims_supported&quot;: [ &quot;sub&quot;, &quot;iss&quot; ], &quot;id_token_signing_alg_values_supported&quot;: [ &quot;RS256&quot; ], &quot;issuer&quot;: &quot;https://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB8725555A1CC65D44191A56&quot;, &quot;jwks_uri&quot;: &quot;https://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB8725555A1CC65D44191A56/keys&quot;, &quot;response_types_supported&quot;: [ &quot;id_token&quot; ], &quot;subject_types_supported&quot;: [ &quot;public&quot; ]&#125; 然后查看jwks_uri中的url，这里的keys就是 IAM 用来验证 EKS service account 发送过来的 ID_token 是否有效的。 1234567891011121314151617181920212223242526272829curl https://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB8725555A1CC65D44191A56/keys -s | python -m json.tool&#123; &quot;keys&quot;: [ &#123; &quot;alg&quot;: &quot;RS256&quot;, &quot;e&quot;: &quot;AQAB&quot;, &quot;kid&quot;: &quot;4e49f2d2c6c8550c55556b01637a93a8a4f941e5&quot;, &quot;kty&quot;: &quot;RSA&quot;, &quot;n&quot;: &quot;rEKprAR5nRAHfulQyyI9unXUNpczPCKZO8hXVuTiKrwlzdI7pETs6g0hWQaKe96n4p-KERF-dc-KajboMqrCfsff7boVJdnA9k8CljwKvt-5ILyXe07ASZQkkbDgpY30GNvMB7tbhiwkaNjuBzrLsO2Ipom5rzlK3i6rjHxp3O94BgMbMMt4trvWtJ9vmhWILihkl_e8--5JOOzjjeNcrNoK_o5LxbHSetaALoGAk-XbCmUeFDWvLQ&quot;, &quot;use&quot;: &quot;sig&quot; &#125;, &#123; &quot;alg&quot;: &quot;RS256&quot;, &quot;e&quot;: &quot;AQAB&quot;, &quot;kid&quot;: &quot;831cd2c5a14af3ff3ee5555ab1edf6dc7d7fb54d&quot;, &quot;kty&quot;: &quot;RSA&quot;, &quot;n&quot;: &quot;xdlnMmc1lUGyVlt58621Arf-2Ytxxe5HCiBguYe1Y4DYvfxTzknH3x07Q1sMQLNGHV_4d-bT29ufhAnht6AaLcuxtxaonEcMArh95bnuau6-GFMe06XaBYlMDoTcf_czTGdI4On7veJtMpSsNlHNj507Jn6mcH8TGHIl6qRwj9NZSaoADrkDO87O-w71l1c2a3m0us1vWir0QJdZ3J2al4k1Qm7KZT-dN9rs2LquQS0s6MTX-VdQLFb&quot;, &quot;use&quot;: &quot;sig&quot; &#125;, &#123; &quot;alg&quot;: &quot;RS256&quot;, &quot;e&quot;: &quot;AQAB&quot;, &quot;kid&quot;: &quot;eba5269e0fedd9431af2755550dd09f85bec7ad0&quot;, &quot;kty&quot;: &quot;RSA&quot;, &quot;n&quot;: &quot;qzfrIdEsOebdO243KkkGOl8r1rXiErQXwjK0RspvrX6roV6uJg6gBT0qBN7nM1J92WNVNte-3UhcBfm_hdBHRfib8zN_AvMNZ04Yc76hri7xTqa1iHFLl8823YEBnP_FSM97rdzsz_wCNkBM8bzsD-Cg4KMqrrY_qzFFymBRHPklBLyJudJN1zv8_dCXbDzBKtQo8UklM3MuSLsIf1TZGDbpemEpvNO-mu9UDVEccw0oeMPPKx6K_br&quot;, &quot;use&quot;: &quot;sig&quot; &#125; ]&#125;","summary":"摘要 本文介绍为EKS集群创建 IAM OIDC 身份提供商 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T12:30:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/06/aws-eks02-create-eks/","url":"https://blog.hanqunfeng.com/2023/07/06/aws-eks02-create-eks/","title":"AWS-EKS-02--创建集群","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍在AWS中创建EKS集群的过程</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"创建eks集群\">创建eks集群</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用<code>eksctl</code><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/create-cluster.html\">创建集群</a>，当前默认安装k8s-1.25，如果要安装其它<a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/kubernetes-versions.html\">EKS支持的k8s版本</a>，比如要安装1.26，则需要加上<code>--version 1.26</code></p>\n</li>\n<li class=\"lvl-2\">\n<p>如下命令会创建新的VPC，并基于该VPC创建一个新的eks集群，默认创建2个工作节点</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前默认是安装k8s-1.25，安装过程大约15分钟，</span></span><br><span class=\"line\">$ eksctl create cluster --name eks-lexing  --profile eks-us-west-2</span><br><span class=\"line\">2023-06-27 16:49:07 [ℹ]  eksctl version 0.146.0</span><br><span class=\"line\">2023-06-27 16:49:07 [ℹ]  using region us-west-2</span><br><span class=\"line\">2023-06-27 16:49:07 [ℹ]  setting availability zones to [us-west-2a us-west-2b us-west-2d]</span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]  subnets <span class=\"keyword\">for</span> us-west-2a - public:192.168.0.0/19 private:192.168.96.0/19</span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]  subnets <span class=\"keyword\">for</span> us-west-2b - public:192.168.32.0/19 private:192.168.128.0/19</span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]  subnets <span class=\"keyword\">for</span> us-west-2d - public:192.168.64.0/19 private:192.168.160.0/19</span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]  nodegroup <span class=\"string\">&quot;ng-4d9024eb&quot;</span> will use <span class=\"string\">&quot;&quot;</span> [AmazonLinux2/1.25]</span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]  using Kubernetes version 1.25</span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]  creating EKS cluster <span class=\"string\">&quot;eks-lexing&quot;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;us-west-2&quot;</span> region with managed nodes</span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]  will create 2 separate CloudFormation stacks <span class=\"keyword\">for</span> cluster itself and the initial managed nodegroup</span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]  <span class=\"keyword\">if</span> you encounter any issues, check CloudFormation console or try <span class=\"string\">&#x27;eksctl utils describe-stacks --region=us-west-2 --cluster=eks-lexing&#x27;</span></span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]  Kubernetes API endpoint access will use default of &#123;publicAccess=<span class=\"literal\">true</span>, privateAccess=<span class=\"literal\">false</span>&#125; <span class=\"keyword\">for</span> cluster <span class=\"string\">&quot;eks-lexing&quot;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;us-west-2&quot;</span></span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]  CloudWatch logging will not be enabled <span class=\"keyword\">for</span> cluster <span class=\"string\">&quot;eks-lexing&quot;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;us-west-2&quot;</span></span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]  you can <span class=\"built_in\">enable</span> it with <span class=\"string\">&#x27;eksctl utils update-cluster-logging --enable-types=&#123;SPECIFY-YOUR-LOG-TYPES-HERE (e.g. all)&#125; --region=us-west-2 --cluster=eks-lexing&#x27;</span></span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]</span><br><span class=\"line\">2 sequential tasks: &#123; create cluster control plane <span class=\"string\">&quot;eks-lexing&quot;</span>,</span><br><span class=\"line\">    2 sequential sub-tasks: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">wait</span> <span class=\"keyword\">for</span> control plane to become ready,</span><br><span class=\"line\">        create managed nodegroup <span class=\"string\">&quot;ng-4d9024eb&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">2023-06-27 16:49:08 [ℹ]  building cluster stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-27 16:49:09 [ℹ]  deploying stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-27 16:49:39 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-27 16:50:09 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-27 16:51:09 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-27 16:52:09 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-27 16:53:09 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-27 16:54:09 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-27 16:55:09 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-27 16:56:10 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-27 16:57:10 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-27 16:58:10 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-cluster&quot;</span></span><br><span class=\"line\">2023-06-27 17:00:15 [ℹ]  building managed nodegroup stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-27 17:00:16 [ℹ]  deploying stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-27 17:00:16 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-27 17:00:46 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-27 17:01:25 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-27 17:03:16 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-27 17:03:16 [ℹ]  waiting <span class=\"keyword\">for</span> the control plane to become ready</span><br><span class=\"line\">2023-06-27 17:03:16 [✔]  saved kubeconfig as <span class=\"string\">&quot;/Users/hanqf/.kube/config&quot;</span></span><br><span class=\"line\">2023-06-27 17:03:16 [ℹ]  no tasks</span><br><span class=\"line\">2023-06-27 17:03:16 [✔]  all EKS cluster resources <span class=\"keyword\">for</span> <span class=\"string\">&quot;eks-lexing&quot;</span> have been created</span><br><span class=\"line\">2023-06-27 17:03:17 [ℹ]  nodegroup <span class=\"string\">&quot;ng-4d9024eb&quot;</span> has 2 node(s)</span><br><span class=\"line\">2023-06-27 17:03:17 [ℹ]  node <span class=\"string\">&quot;ip-192-168-16-155.us-west-2.compute.internal&quot;</span> is ready</span><br><span class=\"line\">2023-06-27 17:03:17 [ℹ]  node <span class=\"string\">&quot;ip-192-168-48-14.us-west-2.compute.internal&quot;</span> is ready</span><br><span class=\"line\">2023-06-27 17:03:17 [ℹ]  waiting <span class=\"keyword\">for</span> at least 2 node(s) to become ready <span class=\"keyword\">in</span> <span class=\"string\">&quot;ng-4d9024eb&quot;</span></span><br><span class=\"line\">2023-06-27 17:03:17 [ℹ]  nodegroup <span class=\"string\">&quot;ng-4d9024eb&quot;</span> has 2 node(s)</span><br><span class=\"line\">2023-06-27 17:03:17 [ℹ]  node <span class=\"string\">&quot;ip-192-168-16-155.us-west-2.compute.internal&quot;</span> is ready</span><br><span class=\"line\">2023-06-27 17:03:17 [ℹ]  node <span class=\"string\">&quot;ip-192-168-48-14.us-west-2.compute.internal&quot;</span> is ready</span><br><span class=\"line\">2023-06-27 17:03:19 [ℹ]  kubectl <span class=\"built_in\">command</span> should work with <span class=\"string\">&quot;/Users/hanqf/.kube/config&quot;</span>, try <span class=\"string\">&#x27;kubectl get nodes&#x27;</span></span><br><span class=\"line\">2023-06-27 17:03:19 [✔]  EKS cluster <span class=\"string\">&quot;eks-lexing&quot;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;us-west-2&quot;</span> region is ready</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>eks集群创建成功后会在<code>~/.kube/config</code>文件中自动加上集群的配置信息</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJek1EWXlPREEyTWpNeU1Wb1hEVE16TURZeU5UQTJNak15TVZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTXJVCk94RHJUTHR1lKeWUzUkQxQXFpeTdnUCtROApGdGNOSkNaUzJHSkV3d1hYcmZEK25YL0F1dFo2NVh0ZVR0KzdNZmdnQW1UVWNSaTM0cEhJcVhmN0R0eHY2VnhJCnVBUk9rbzhQRWIyNUpsYVRDRU9GWkRHeXJPdjlDMjE0ZEdudzJFRFV2QVJMR0E1bW5PN0EwanZlRG1zQWcrTzgKZGx3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br><span class=\"line\">    server: https://1029FF88CB872B655555565D44191A56.gr7.us-west-2.eks.amazonaws.com</span><br><span class=\"line\">  name: eks-lexing.us-west-2.eksctl.io</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: eks-lexing.us-west-2.eksctl.io</span><br><span class=\"line\">    user: hanqunfeng@eks-lexing.us-west-2.eksctl.io</span><br><span class=\"line\">  name: hanqunfeng@eks-lexing.us-west-2.eksctl.io</span><br><span class=\"line\">current-context: hanqunfeng@eks-lexing.us-west-2.eksctl.io</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">users</span>:</span><br><span class=\"line\">- name: hanqunfeng@eks-lexing.us-west-2.eksctl.io</span><br><span class=\"line\">  user:</span><br><span class=\"line\">    <span class=\"built_in\">exec</span>:</span><br><span class=\"line\">      apiVersion: client.authentication.k8s.io/v1beta1</span><br><span class=\"line\">      args:</span><br><span class=\"line\">      - eks</span><br><span class=\"line\">      - get-token</span><br><span class=\"line\">      - --output</span><br><span class=\"line\">      - json</span><br><span class=\"line\">      - --cluster-name</span><br><span class=\"line\">      - eks-lexing</span><br><span class=\"line\">      - --region</span><br><span class=\"line\">      - us-west-2</span><br><span class=\"line\">      <span class=\"built_in\">command</span>: aws</span><br><span class=\"line\">      <span class=\"built_in\">env</span>:</span><br><span class=\"line\">      - name: AWS_STS_REGIONAL_ENDPOINTS</span><br><span class=\"line\">        value: regional</span><br><span class=\"line\">      - name: AWS_PROFILE</span><br><span class=\"line\">        value: eks-us-west-2</span><br><span class=\"line\">      interactiveMode: IfAvailable</span><br><span class=\"line\">      provideClusterInfo: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>~/.kube/config</code>文件说明</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><code>clusters</code> : 集群基本信息，可以配置多个，其包含<code>certificate-authority-data</code>–证书和<code>server</code>–API 服务器终端节点，这部分内容可以在aws控制台&quot;EKS–集群–eks-lexing&quot;中查看到。</li>\n<li class=\"lvl-6\"><code>users</code> : 用户认证信息，可以配置多个，这里可以看到是基于<code>aws</code>命令进行认证的。</li>\n<li class=\"lvl-6\"><code>contexts</code> : 上下文环境信息，这部分会将<code>clusters</code>与<code>users</code>进行一对一关联。</li>\n<li class=\"lvl-6\"><code>current-context</code> : 当前默认的集群上下文。</li>\n<li class=\"lvl-6\">文件内容编辑后立即生效。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>如果要在<code>~/.kube/config</code>中加入已经创建好的集群，可以通过如下命令实现，当然，手工编辑文件也可以。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws eks update-kubeconfig --name eks-lexing  --profile eks-us-west-2</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> AWS_PROFILE=eks-us-west-2</span><br><span class=\"line\">$ aws eks update-kubeconfig --name eks-lexing</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通过当前IAM帐号创建的eks，则只有该帐号有权限管理和查看，如果希望其它帐号也有权限，则需要进行授权，这个后面会介绍。</p>\n</li>\n<li class=\"lvl-2\">\n<p>验证是否可以访问集群</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看节点组信息</span></span><br><span class=\"line\">$ eksctl get nodegroup --cluster eks-lexing --profile eks-us-west-2</span><br><span class=\"line\">CLUSTER\t\tNODEGROUP\tSTATUS\tCREATED\t\t\tMIN SIZE\tMAX SIZE\tDESIRED CAPACITY\tINSTANCE TYPE\tIMAGE ID\tASG NAME\t\t\t\tTYPE</span><br><span class=\"line\">eks-lexing\tng-4d9024eb\tACTIVE\t2023-06-28T06:30:03Z\t2\t\t5\t\t2\t\t\tm5.large\tAL2_x86_64\teks-ng-4d9024eb-20c48058-e974-c6ec-786a-516c31131604\tmanaged</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看集群的命名空间，这里使用了kubectl的别名k</span></span><br><span class=\"line\">$ k get ns</span><br><span class=\"line\">NAME              STATUS   AGE</span><br><span class=\"line\">default           Active   11m</span><br><span class=\"line\">kube-node-lease   Active   11m</span><br><span class=\"line\">kube-public       Active   11m</span><br><span class=\"line\">kube-system       Active   11m</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>登录aws控制台，查看<code>us-west-2</code>下的<code>EC2</code>,<code>VPC</code>,<code>CloudFormation</code>,<code>EKS</code>等等，可以看到相应的资源已经创建完成。<br>\nEC2实例: 工作节点实例<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/eENw5L.png\" alt=\"\" width=\"1200\" height=\"300\"><br>\nEBS: 工作节点挂载的卷<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/MQx1yO.png\" alt=\"\" width=\"1200\" height=\"300\"><br>\nAuto Scaling 组: 节点组<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/KOusMS.png\" alt=\"\" width=\"900\" height=\"300\"><br>\n弹性IP:<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/EdMBgh.png\" alt=\"\" width=\"1200\" height=\"300\"><br>\n安全组：<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/N77sRk.png\" alt=\"\" width=\"1200\" height=\"400\"><br>\nVPC:<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/ucZYmM.png\" alt=\"\" width=\"1200\" height=\"800\"><br>\nEKS: 这里eks升级到1.26了，升级eks后面会介绍<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/pGZpve.png\" alt=\"\" width=\"1200\" height=\"800\"></p>\n</li>\n</ul>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em><br>\n不要手工修改<code>EC2</code>下关于eks的Auto Scaling 组，如果要修改弹性伸缩，需要在<code>EKS</code>的工作节点组的配置中进行修改<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/PDOeyT.png\" alt=\"\" width=\"400\" height=\"400\"></p>\n</div>\n<h2 id=\"后续\">后续</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>上面我们就完成了通过命令行在新的VPC下创建全新eks集群的过程，其它创建方式详见<a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/create-cluster.html\">AWS帮助文档</a>，但是这还没完，为了更好的使用aws为我们提供的资源和服务，我们还需要为这个eks集群做一些必要操作：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">\n<a href=\"/2023/07/07/aws-eks03-oidc/\" title=\"AWS-EKS-03--创建 IAM OIDC 身份提供商\">创建 IAM OIDC 身份提供商</a>\n</li>\n<li class=\"lvl-6\">\n<a href=\"/2023/07/07/aws-eks04-vpc-cni/\" title=\"AWS-EKS-04--安装 Amazon VPC CNI\">配置 Amazon VPC CNI plugin for Kubernetes 将 IAM 角色用于服务账户</a>\n</li>\n<li class=\"lvl-6\">\n<a href=\"/2023/07/07/aws-eks05-ebs-csi/\" title=\"AWS-EKS-05--安装 Amazon EBS CSI 驱动程序\">安装 Amazon EBS CSI 驱动程序</a>\n</li>\n<li class=\"lvl-6\">\n<a href=\"/2023/07/07/aws-eks06-efs-csi/\" title=\"AWS-EKS-06--安装 Amazon EFS CSI 驱动程序\">安装 Amazon EFS CSI 驱动程序</a>\n</li>\n<li class=\"lvl-6\">\n<a href=\"/2023/07/07/aws-eks07-loadbalancer/\" title=\"AWS-EKS-07--安装 AWS Load Balancer Controller 附加组件\">安装 AWS Load Balancer Controller 附加组件</a>\n</li>\n<li class=\"lvl-6\">\n<a href=\"/2023/07/07/aws-eks11-metrics/\" title=\"AWS-EKS-11--安装 Kubernetes Metrics Server\">安装 Kubernetes Metrics Server</a>\n</li>\n<li class=\"lvl-6\">\n<a href=\"/2023/07/18/aws-eks18-autoscaler-cas/\" title=\"AWS-EKS-18--Autoscaling 之 Cluster Autoscaler(CAS)\">安装 Autoscaling 之 Cluster Autoscaler(CAS)</a>\n</li>\n</ul>\n</li>\n</ul>\n","content_text":"摘要 本文介绍在AWS中创建EKS集群的过程 参考资料： Amazon EKS用户指南 Kubernetes 文档 创建eks集群 使用eksctl创建集群，当前默认安装k8s-1.25，如果要安装其它EKS支持的k8s版本，比如要安装1.26，则需要加上--version 1.26 如下命令会创建新的VPC，并基于该VPC创建一个新的eks集群，默认创建2个工作节点 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# 当前默认是安装k8s-1.25，安装过程大约15分钟，$ eksctl create cluster --name eks-lexing --profile eks-us-west-22023-06-27 16:49:07 [ℹ] eksctl version 0.146.02023-06-27 16:49:07 [ℹ] using region us-west-22023-06-27 16:49:07 [ℹ] setting availability zones to [us-west-2a us-west-2b us-west-2d]2023-06-27 16:49:08 [ℹ] subnets for us-west-2a - public:192.168.0.0/19 private:192.168.96.0/192023-06-27 16:49:08 [ℹ] subnets for us-west-2b - public:192.168.32.0/19 private:192.168.128.0/192023-06-27 16:49:08 [ℹ] subnets for us-west-2d - public:192.168.64.0/19 private:192.168.160.0/192023-06-27 16:49:08 [ℹ] nodegroup &quot;ng-4d9024eb&quot; will use &quot;&quot; [AmazonLinux2/1.25]2023-06-27 16:49:08 [ℹ] using Kubernetes version 1.252023-06-27 16:49:08 [ℹ] creating EKS cluster &quot;eks-lexing&quot; in &quot;us-west-2&quot; region with managed nodes2023-06-27 16:49:08 [ℹ] will create 2 separate CloudFormation stacks for cluster itself and the initial managed nodegroup2023-06-27 16:49:08 [ℹ] if you encounter any issues, check CloudFormation console or try &#x27;eksctl utils describe-stacks --region=us-west-2 --cluster=eks-lexing&#x27;2023-06-27 16:49:08 [ℹ] Kubernetes API endpoint access will use default of &#123;publicAccess=true, privateAccess=false&#125; for cluster &quot;eks-lexing&quot; in &quot;us-west-2&quot;2023-06-27 16:49:08 [ℹ] CloudWatch logging will not be enabled for cluster &quot;eks-lexing&quot; in &quot;us-west-2&quot;2023-06-27 16:49:08 [ℹ] you can enable it with &#x27;eksctl utils update-cluster-logging --enable-types=&#123;SPECIFY-YOUR-LOG-TYPES-HERE (e.g. all)&#125; --region=us-west-2 --cluster=eks-lexing&#x27;2023-06-27 16:49:08 [ℹ]2 sequential tasks: &#123; create cluster control plane &quot;eks-lexing&quot;, 2 sequential sub-tasks: &#123; wait for control plane to become ready, create managed nodegroup &quot;ng-4d9024eb&quot;, &#125;&#125;2023-06-27 16:49:08 [ℹ] building cluster stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-27 16:49:09 [ℹ] deploying stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-27 16:49:39 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-27 16:50:09 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-27 16:51:09 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-27 16:52:09 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-27 16:53:09 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-27 16:54:09 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-27 16:55:09 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-27 16:56:10 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-27 16:57:10 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-27 16:58:10 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-cluster&quot;2023-06-27 17:00:15 [ℹ] building managed nodegroup stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-27 17:00:16 [ℹ] deploying stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-27 17:00:16 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-27 17:00:46 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-27 17:01:25 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-27 17:03:16 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-nodegroup-ng-4d9024eb&quot;2023-06-27 17:03:16 [ℹ] waiting for the control plane to become ready2023-06-27 17:03:16 [✔] saved kubeconfig as &quot;/Users/hanqf/.kube/config&quot;2023-06-27 17:03:16 [ℹ] no tasks2023-06-27 17:03:16 [✔] all EKS cluster resources for &quot;eks-lexing&quot; have been created2023-06-27 17:03:17 [ℹ] nodegroup &quot;ng-4d9024eb&quot; has 2 node(s)2023-06-27 17:03:17 [ℹ] node &quot;ip-192-168-16-155.us-west-2.compute.internal&quot; is ready2023-06-27 17:03:17 [ℹ] node &quot;ip-192-168-48-14.us-west-2.compute.internal&quot; is ready2023-06-27 17:03:17 [ℹ] waiting for at least 2 node(s) to become ready in &quot;ng-4d9024eb&quot;2023-06-27 17:03:17 [ℹ] nodegroup &quot;ng-4d9024eb&quot; has 2 node(s)2023-06-27 17:03:17 [ℹ] node &quot;ip-192-168-16-155.us-west-2.compute.internal&quot; is ready2023-06-27 17:03:17 [ℹ] node &quot;ip-192-168-48-14.us-west-2.compute.internal&quot; is ready2023-06-27 17:03:19 [ℹ] kubectl command should work with &quot;/Users/hanqf/.kube/config&quot;, try &#x27;kubectl get nodes&#x27;2023-06-27 17:03:19 [✔] EKS cluster &quot;eks-lexing&quot; in &quot;us-west-2&quot; region is ready eks集群创建成功后会在~/.kube/config文件中自动加上集群的配置信息 123456789101112131415161718192021222324252627282930313233343536apiVersion: v1clusters:- cluster: certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJek1EWXlPREEyTWpNeU1Wb1hEVE16TURZeU5UQTJNak15TVZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTXJVCk94RHJUTHR1lKeWUzUkQxQXFpeTdnUCtROApGdGNOSkNaUzJHSkV3d1hYcmZEK25YL0F1dFo2NVh0ZVR0KzdNZmdnQW1UVWNSaTM0cEhJcVhmN0R0eHY2VnhJCnVBUk9rbzhQRWIyNUpsYVRDRU9GWkRHeXJPdjlDMjE0ZEdudzJFRFV2QVJMR0E1bW5PN0EwanZlRG1zQWcrTzgKZGx3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg== server: https://1029FF88CB872B655555565D44191A56.gr7.us-west-2.eks.amazonaws.com name: eks-lexing.us-west-2.eksctl.iocontexts:- context: cluster: eks-lexing.us-west-2.eksctl.io user: hanqunfeng@eks-lexing.us-west-2.eksctl.io name: hanqunfeng@eks-lexing.us-west-2.eksctl.iocurrent-context: hanqunfeng@eks-lexing.us-west-2.eksctl.iokind: Configpreferences: &#123;&#125;users:- name: hanqunfeng@eks-lexing.us-west-2.eksctl.io user: exec: apiVersion: client.authentication.k8s.io/v1beta1 args: - eks - get-token - --output - json - --cluster-name - eks-lexing - --region - us-west-2 command: aws env: - name: AWS_STS_REGIONAL_ENDPOINTS value: regional - name: AWS_PROFILE value: eks-us-west-2 interactiveMode: IfAvailable provideClusterInfo: false ~/.kube/config文件说明 clusters : 集群基本信息，可以配置多个，其包含certificate-authority-data–证书和server–API 服务器终端节点，这部分内容可以在aws控制台&quot;EKS–集群–eks-lexing&quot;中查看到。 users : 用户认证信息，可以配置多个，这里可以看到是基于aws命令进行认证的。 contexts : 上下文环境信息，这部分会将clusters与users进行一对一关联。 current-context : 当前默认的集群上下文。 文件内容编辑后立即生效。 如果要在~/.kube/config中加入已经创建好的集群，可以通过如下命令实现，当然，手工编辑文件也可以。 1234$ aws eks update-kubeconfig --name eks-lexing --profile eks-us-west-2# 或者$ export AWS_PROFILE=eks-us-west-2$ aws eks update-kubeconfig --name eks-lexing 通过当前IAM帐号创建的eks，则只有该帐号有权限管理和查看，如果希望其它帐号也有权限，则需要进行授权，这个后面会介绍。 验证是否可以访问集群 123456789101112# 查看节点组信息$ eksctl get nodegroup --cluster eks-lexing --profile eks-us-west-2CLUSTER NODEGROUP STATUS CREATED MIN SIZE MAX SIZE DESIRED CAPACITY INSTANCE TYPE IMAGE ID ASG NAME TYPEeks-lexing ng-4d9024eb ACTIVE 2023-06-28T06:30:03Z 2 5 2 m5.large AL2_x86_64 eks-ng-4d9024eb-20c48058-e974-c6ec-786a-516c31131604 managed# 查看集群的命名空间，这里使用了kubectl的别名k$ k get nsNAME STATUS AGEdefault Active 11mkube-node-lease Active 11mkube-public Active 11mkube-system Active 11m 登录aws控制台，查看us-west-2下的EC2,VPC,CloudFormation,EKS等等，可以看到相应的资源已经创建完成。 EC2实例: 工作节点实例 EBS: 工作节点挂载的卷 Auto Scaling 组: 节点组 弹性IP: 安全组： VPC: EKS: 这里eks升级到1.26了，升级eks后面会介绍 小贴士 不要手工修改EC2下关于eks的Auto Scaling 组，如果要修改弹性伸缩，需要在EKS的工作节点组的配置中进行修改 后续 上面我们就完成了通过命令行在新的VPC下创建全新eks集群的过程，其它创建方式详见AWS帮助文档，但是这还没完，为了更好的使用aws为我们提供的资源和服务，我们还需要为这个eks集群做一些必要操作： 创建 IAM OIDC 身份提供商 配置 Amazon VPC CNI plugin for Kubernetes 将 IAM 角色用于服务账户 安装 Amazon EBS CSI 驱动程序 安装 Amazon EFS CSI 驱动程序 安装 AWS Load Balancer Controller 附加组件 安装 Kubernetes Metrics Server 安装 Autoscaling 之 Cluster Autoscaler(CAS)","summary":"摘要 本文介绍在AWS中创建EKS集群的过程 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-06T15:30:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/06/aws-eks01-install-tool/","url":"https://blog.hanqunfeng.com/2023/07/06/aws-eks01-install-tool/","title":"AWS-EKS-01--命令行工具","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍在AWS中创建EKS集群的过程中会使用到的命令行工具的安装方法</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"安装命令行工具\">安装命令行工具</h2>\n<h3 id=\"AWS-CLI\">AWS CLI</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-welcome.html\">AWS Command Line Interface (AWS CLI)</a> 是一种开源工具，让您能够在命令行 Shell 中使用命令与 AWS 服务进行交互。</p>\n</li>\n<li class=\"lvl-2\">\n<p>要使用 AWS CLI 访问 AWS 服务，您需要 AWS 账户 和 IAM 凭证。运行 AWS CLI 命令时，AWS CLI 需要有权访问这些 AWS 凭证。为了提高 AWS 账户的安全性，建议您不要使用根账户凭证。您应创建一个具有最低权限的用户来为将在 AWS 中运行的任务提供访问凭证。</p>\n</li>\n<li class=\"lvl-2\">\n<p>登录AWS控制台，在IAM里创建一个用户，为了方便对资源进行管理可以授予其管理员访问权限(AdministratorAccess)，并在其安全凭证中创建一个新的访问密钥。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/getting-started-install.html\">安装AWS CLI</a>，这里以mac为例</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl <span class=\"string\">&quot;https://awscli.amazonaws.com/AWSCLIV2.pkg&quot;</span> -o <span class=\"string\">&quot;AWSCLIV2.pkg&quot;</span></span><br><span class=\"line\">$ sudo installer -pkg AWSCLIV2.pkg -target /</span><br><span class=\"line\">$ <span class=\"built_in\">which</span> aws</span><br><span class=\"line\">/usr/local/bin/aws</span><br><span class=\"line\">$ aws --version</span><br><span class=\"line\">aws-cli/2.12.3 Python/3.11.4 Darwin/21.6.0 exe/x86_64 prompt/off</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>升级时重新执行上面的的安装过程即可</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-completion.html\">命令提示补全</a>，以zsh为例，在<code>~/.zshrc</code>中添加如下内容，为了立即生效可以执行<code>source ~/.zshrc</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">autoload</span> bashcompinit &amp;&amp; bashcompinit</span><br><span class=\"line\"><span class=\"built_in\">autoload</span> -Uz compinit &amp;&amp; compinit</span><br><span class=\"line\">complete -C <span class=\"string\">&#x27;/usr/local/bin/aws_completer&#x27;</span> aws</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>配置文件在<code>~/.aws</code>目录下，分为 <code>config</code> 和 <code>credentials</code>，可以设置多份凭证，设置时可以直接编辑对应的配置文件，也可以通过如下命令设置</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认default，这里配置上用户的访问密钥</span></span><br><span class=\"line\">$ aws configure</span><br><span class=\"line\">AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE</span><br><span class=\"line\">AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</span><br><span class=\"line\">Default region name [None]: us-west-1</span><br><span class=\"line\">Default output format [None]: json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定profile，后面所有命令中涉及到凭证的部分都使用该profile</span></span><br><span class=\"line\">$ aws configure --profile eks-us-west-2</span><br><span class=\"line\">AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE</span><br><span class=\"line\">AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</span><br><span class=\"line\">Default region name [None]: us-west-2</span><br><span class=\"line\">Default output format [None]: json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看配置</span></span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> ~/.aws/config</span><br><span class=\"line\">[default]</span><br><span class=\"line\">region = us-west-1</span><br><span class=\"line\">output = json</span><br><span class=\"line\">[profile eks-us-west-2]</span><br><span class=\"line\">region = us-west-2</span><br><span class=\"line\">output = json</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> ~/.aws/credentials</span><br><span class=\"line\">[default]</span><br><span class=\"line\">aws_access_key_id = AKIAIOSFODNN7EXAMPLE</span><br><span class=\"line\">aws_secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</span><br><span class=\"line\">[eks-us-west-2]</span><br><span class=\"line\">aws_access_key_id = AKIAIOSFODNN7EXAMPLE</span><br><span class=\"line\">aws_secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有profile</span></span><br><span class=\"line\">$ aws configure list-profiles</span><br><span class=\"line\">default</span><br><span class=\"line\">eks-us-west-2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定的profile的信息</span></span><br><span class=\"line\">$ aws configure list --profile eks-us-west-2</span><br><span class=\"line\">      Name                    Value             Type    Location</span><br><span class=\"line\">      ----                    -----             ----    --------</span><br><span class=\"line\">   profile               eks-us-west-2           manual    --profile</span><br><span class=\"line\">access_key     ****************IP6L shared-credentials-file</span><br><span class=\"line\">secret_key     ****************OIQU shared-credentials-file</span><br><span class=\"line\">    region                us-west-2      config-file    ~/.aws/config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看与profile对应的用户信息</span></span><br><span class=\"line\">$ aws sts get-caller-identity --profile eks-us-west-2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;UserId&quot;</span>: <span class=\"string\">&quot;AIDA55DP3G4GIDWF2GNIR&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Account&quot;</span>: <span class=\"string\">&quot;743263909655&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909655:user/hanqunfeng&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用aws命令时，如果不指定<code>--profile</code>，则默认使用<code>default</code>对应的认证信息，也可以通过环境变量指定要使用的profile</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> AWS_PROFILE=eks-us-west-2</span><br></pre></td></tr></table></figure>\n<h3 id=\"kubectl\">kubectl</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Kubectl 是一个命令行工具，用于与 Kubernetes API 服务器进行通信。这个命令非常重要，后面会有一节专门介绍。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/install-kubectl.html\">安装或更新 kubectl</a>，这里以mac为例</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从 Amazon S3 为集群的 Kubernetes 版本下载二进制文件</span></span><br><span class=\"line\"><span class=\"comment\"># 这里下载Kubernetes 1.26</span></span><br><span class=\"line\">$ curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.4/2023-05-11/bin/darwin/amd64/kubectl</span><br><span class=\"line\"><span class=\"comment\"># 授予执行权限</span></span><br><span class=\"line\">$ <span class=\"built_in\">chmod</span> +x ./kubectl</span><br><span class=\"line\"><span class=\"comment\"># 将命令复制到 $PATH 中</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">mv</span> ./kubectl /usr/local/bin/kubectl</span><br><span class=\"line\"><span class=\"comment\"># 查看kubectl版本，由于此时还没有配置k8s的server端，所以这里只查看client的的信息</span></span><br><span class=\"line\">$ kubectl version --client -o yaml</span><br><span class=\"line\"></span><br><span class=\"line\">clientVersion:</span><br><span class=\"line\">  buildDate: <span class=\"string\">&quot;2023-04-15T00:36:29Z&quot;</span></span><br><span class=\"line\">  compiler: gc</span><br><span class=\"line\">  gitCommit: 4a3479673cb6d9b63f1c69a67b57de30a4d9b781</span><br><span class=\"line\">  gitTreeState: clean</span><br><span class=\"line\">  gitVersion: v1.26.4-eks-0a21954</span><br><span class=\"line\">  goVersion: go1.19.8</span><br><span class=\"line\">  major: <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">  minor: 26+</span><br><span class=\"line\">  platform: darwin/amd64</span><br><span class=\"line\">kustomizeVersion: v4.5.7</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>升级时重新执行上面的的安装过程即可</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-macos/\">命令提示补全和别名设置</a>，以zsh为例，在<code>~/.zshrc</code>中添加如下内容，为了立即生效可以执行<code>source ~/.zshrc</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># k8s client kubectl</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> &lt;(kubectl completion zsh)</span><br><span class=\"line\"><span class=\"built_in\">alias</span> k=kubectl</span><br><span class=\"line\"><span class=\"comment\"># change namespace</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> kn=<span class=\"string\">&quot;k config set-context --current --namespace&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Delete Now</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> kdp=<span class=\"string\">&quot;k delete pod --grace-period=0 --force&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># View current context</span></span><br><span class=\"line\"><span class=\"comment\"># 直接设置别名的方式不行，因为在设置alias时，$(k config current-context)就会被执行了，所以不会根据当时情况进行替换，可以使用函数来实现</span></span><br><span class=\"line\"><span class=\"comment\"># alias kcc=&quot;k config get-contexts $(k config current-context)&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 注意这里函数不能使用字母 k 开头，会报错 &quot;defining function based on alias `k&#x27;&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">cc</span></span>() &#123;</span><br><span class=\"line\">   k config get-contexts $(k config current-context)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 然后再将函数设置别名即可实现</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> kcc=cc</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>kubectl的配置文件为<code>~/.kube/config</code>，在创建eks集群时会进一步介绍。</p>\n</li>\n</ul>\n<h3 id=\"eksctl\">eksctl</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>eksctl 是一款简单的命令行工具，用于在 Amazon EKS 上创建和管理 Kubernetes 集群。eksctl 提供使用 Amazon EKS 节点创建新集群的最快、最简单的方式。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>eksctl</code>与<code>AWS CLI</code>共用认证信息，即<code>~/.aws</code>下的配置</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://github.com/weaveworks/eksctl/blob/main/README.md#installation\">安装或更新 eksctl</a>，这里以mac为例</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`</span></span><br><span class=\"line\">$ ARCH=amd64</span><br><span class=\"line\">$ PLATFORM=$(<span class=\"built_in\">uname</span> -s)_<span class=\"variable\">$ARCH</span></span><br><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">$ curl -sLO <span class=\"string\">&quot;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_<span class=\"variable\">$PLATFORM</span>.tar.gz&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (Optional) Verify checksum</span></span><br><span class=\"line\">$ curl -sL <span class=\"string\">&quot;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_checksums.txt&quot;</span> | grep <span class=\"variable\">$PLATFORM</span> | <span class=\"built_in\">sha256sum</span> --check</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">$ tar -xzf eksctl_<span class=\"variable\">$PLATFORM</span>.tar.gz -C /tmp &amp;&amp; <span class=\"built_in\">rm</span> eksctl_<span class=\"variable\">$PLATFORM</span>.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 移动到$PATH</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">mv</span> /tmp/eksctl /usr/local/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">$ eksctl version</span><br><span class=\"line\"></span><br><span class=\"line\">0.146.0</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>升级时重新执行上面的的安装过程即可</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://eksctl.io/introduction/#shell-completion\">代码补全</a>，以zsh为例</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> -p ~/.zsh/completion/</span><br><span class=\"line\">$ eksctl completion zsh &gt; ~/.zsh/completion/_eksctl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 并将以下内容放入~/.zshrc中：</span></span><br><span class=\"line\">fpath=(<span class=\"variable\">$fpath</span> ~/.zsh/completion)</span><br><span class=\"line\"><span class=\"built_in\">autoload</span> -U compinit</span><br><span class=\"line\">compinit</span><br></pre></td></tr></table></figure>\n<h3 id=\"helm\">helm</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://helm.sh/zh/docs/\">Helm</a> 是 Kubernetes 的包管理器</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://helm.sh/zh/docs/intro/install/\">安装或更新 Helm</a>，在<a href=\"https://github.com/helm/helm/releases\">Helm 版本</a>中下载对应的版本，以mac为例</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">$ curl -O https://get.helm.sh/helm-v3.12.1-darwin-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">$ tar -zxvf helm-v3.12.1-darwin-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 移动到$PATH</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">mv</span> darwin-amd64/helm /usr/local/bin/helm</span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">$ helm version --short</span><br><span class=\"line\"></span><br><span class=\"line\">v3.12.1+gf32a527</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>升级时重新执行上面的的安装过程即可</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://helm.sh/zh/docs/helm/helm_completion_zsh/\">命令提示补全</a>，以zsh为例，在<code>~/.zshrc</code>中添加如下内容，为了立即生效可以执行<code>source ~/.zshrc</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> &lt;(helm completion zsh)</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍在AWS中创建EKS集群的过程中会使用到的命令行工具的安装方法 参考资料： Amazon EKS用户指南 Kubernetes 文档 安装命令行工具 AWS CLI AWS Command Line Interface (AWS CLI) 是一种开源工具，让您能够在命令行 Shell 中使用命令与 AWS 服务进行交互。 要使用 AWS CLI 访问 AWS 服务，您需要 AWS 账户 和 IAM 凭证。运行 AWS CLI 命令时，AWS CLI 需要有权访问这些 AWS 凭证。为了提高 AWS 账户的安全性，建议您不要使用根账户凭证。您应创建一个具有最低权限的用户来为将在 AWS 中运行的任务提供访问凭证。 登录AWS控制台，在IAM里创建一个用户，为了方便对资源进行管理可以授予其管理员访问权限(AdministratorAccess)，并在其安全凭证中创建一个新的访问密钥。 安装AWS CLI，这里以mac为例 123456$ curl &quot;https://awscli.amazonaws.com/AWSCLIV2.pkg&quot; -o &quot;AWSCLIV2.pkg&quot;$ sudo installer -pkg AWSCLIV2.pkg -target /$ which aws/usr/local/bin/aws$ aws --versionaws-cli/2.12.3 Python/3.11.4 Darwin/21.6.0 exe/x86_64 prompt/off 升级时重新执行上面的的安装过程即可 命令提示补全，以zsh为例，在~/.zshrc中添加如下内容，为了立即生效可以执行source ~/.zshrc 123autoload bashcompinit &amp;&amp; bashcompinitautoload -Uz compinit &amp;&amp; compinitcomplete -C &#x27;/usr/local/bin/aws_completer&#x27; aws 配置文件在~/.aws目录下，分为 config 和 credentials，可以设置多份凭证，设置时可以直接编辑对应的配置文件，也可以通过如下命令设置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# 默认default，这里配置上用户的访问密钥$ aws configureAWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLEAWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEYDefault region name [None]: us-west-1Default output format [None]: json# 指定profile，后面所有命令中涉及到凭证的部分都使用该profile$ aws configure --profile eks-us-west-2AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLEAWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEYDefault region name [None]: us-west-2Default output format [None]: json# 查看配置$ cat ~/.aws/config[default]region = us-west-1output = json[profile eks-us-west-2]region = us-west-2output = json$ cat ~/.aws/credentials[default]aws_access_key_id = AKIAIOSFODNN7EXAMPLEaws_secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY[eks-us-west-2]aws_access_key_id = AKIAIOSFODNN7EXAMPLEaws_secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY# 查看所有profile$ aws configure list-profilesdefaulteks-us-west-2# 查看指定的profile的信息$ aws configure list --profile eks-us-west-2 Name Value Type Location ---- ----- ---- -------- profile eks-us-west-2 manual --profileaccess_key ****************IP6L shared-credentials-filesecret_key ****************OIQU shared-credentials-file region us-west-2 config-file ~/.aws/config# 查看与profile对应的用户信息$ aws sts get-caller-identity --profile eks-us-west-2&#123; &quot;UserId&quot;: &quot;AIDA55DP3G4GIDWF2GNIR&quot;, &quot;Account&quot;: &quot;743263909655&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909655:user/hanqunfeng&quot;&#125; 使用aws命令时，如果不指定--profile，则默认使用default对应的认证信息，也可以通过环境变量指定要使用的profile 1$ export AWS_PROFILE=eks-us-west-2 kubectl Kubectl 是一个命令行工具，用于与 Kubernetes API 服务器进行通信。这个命令非常重要，后面会有一节专门介绍。 安装或更新 kubectl，这里以mac为例 123456789101112131415161718192021# 从 Amazon S3 为集群的 Kubernetes 版本下载二进制文件# 这里下载Kubernetes 1.26$ curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.4/2023-05-11/bin/darwin/amd64/kubectl# 授予执行权限$ chmod +x ./kubectl# 将命令复制到 $PATH 中$ sudo mv ./kubectl /usr/local/bin/kubectl# 查看kubectl版本，由于此时还没有配置k8s的server端，所以这里只查看client的的信息$ kubectl version --client -o yamlclientVersion: buildDate: &quot;2023-04-15T00:36:29Z&quot; compiler: gc gitCommit: 4a3479673cb6d9b63f1c69a67b57de30a4d9b781 gitTreeState: clean gitVersion: v1.26.4-eks-0a21954 goVersion: go1.19.8 major: &quot;1&quot; minor: 26+ platform: darwin/amd64kustomizeVersion: v4.5.7 升级时重新执行上面的的安装过程即可 命令提示补全和别名设置，以zsh为例，在~/.zshrc中添加如下内容，为了立即生效可以执行source ~/.zshrc 123456789101112131415161718# k8s client kubectlsource &lt;(kubectl completion zsh)alias k=kubectl# change namespacealias kn=&quot;k config set-context --current --namespace&quot;# Delete Nowalias kdp=&quot;k delete pod --grace-period=0 --force&quot;# View current context# 直接设置别名的方式不行，因为在设置alias时，$(k config current-context)就会被执行了，所以不会根据当时情况进行替换，可以使用函数来实现# alias kcc=&quot;k config get-contexts $(k config current-context)&quot;# 注意这里函数不能使用字母 k 开头，会报错 &quot;defining function based on alias `k&#x27;&quot;cc() &#123; k config get-contexts $(k config current-context)&#125;# 然后再将函数设置别名即可实现alias kcc=cc kubectl的配置文件为~/.kube/config，在创建eks集群时会进一步介绍。 eksctl eksctl 是一款简单的命令行工具，用于在 Amazon EKS 上创建和管理 Kubernetes 集群。eksctl 提供使用 Amazon EKS 节点创建新集群的最快、最简单的方式。 eksctl与AWS CLI共用认证信息，即~/.aws下的配置 安装或更新 eksctl，这里以mac为例 1234567891011121314151617# for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`$ ARCH=amd64$ PLATFORM=$(uname -s)_$ARCH# 下载$ curl -sLO &quot;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz&quot;# (Optional) Verify checksum$ curl -sL &quot;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_checksums.txt&quot; | grep $PLATFORM | sha256sum --check# 解压$ tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp &amp;&amp; rm eksctl_$PLATFORM.tar.gz# 移动到$PATH$ sudo mv /tmp/eksctl /usr/local/bin# 查看版本$ eksctl version0.146.0 升级时重新执行上面的的安装过程即可 代码补全，以zsh为例 1234567$ mkdir -p ~/.zsh/completion/$ eksctl completion zsh &gt; ~/.zsh/completion/_eksctl# 并将以下内容放入~/.zshrc中：fpath=($fpath ~/.zsh/completion)autoload -U compinitcompinit helm Helm 是 Kubernetes 的包管理器 安装或更新 Helm，在Helm 版本中下载对应的版本，以mac为例 12345678910# 下载$ curl -O https://get.helm.sh/helm-v3.12.1-darwin-amd64.tar.gz# 解压$ tar -zxvf helm-v3.12.1-darwin-amd64.tar.gz# 移动到$PATH$ sudo mv darwin-amd64/helm /usr/local/bin/helm# 查看版本$ helm version --shortv3.12.1+gf32a527 升级时重新执行上面的的安装过程即可 命令提示补全，以zsh为例，在~/.zshrc中添加如下内容，为了立即生效可以执行source ~/.zshrc 1source &lt;(helm completion zsh)","summary":"摘要 本文介绍在AWS中创建EKS集群的过程中会使用到的命令行工具的安装方法 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-06T14:30:05.000Z","tags":["技术","aws","eks","java"]},{"id":"https://blog.hanqunfeng.com/2023/05/29/java-concurrency12-ForkJoinPool/","url":"https://blog.hanqunfeng.com/2023/05/29/java-concurrency12-ForkJoinPool/","title":"Java并发编程--线程池之ForkJoinPool","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍线程池ForkJoinPool相关技术</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>jdk1.8</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"Fork-Join框架介绍\">Fork/Join框架介绍</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>Fork/Join</code>是一个是一个并行计算的框架，主要就是用来支持分治任务模型的，这个计算框架里的 <code>Fork</code>对应的是分治任务模型里的任务分解，<code>Join</code> 对应的是结果合并。</p>\n</li>\n<li class=\"lvl-2\">\n<p>它的核心思想是将一个大任务分成许多小任务，然后并行执行这些小任务，最终将它们的结果合并成一个大的结果。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>Fork/Join</code>模式是实现任务并行性的一种常用模式，它将大任务递归地分解成小任务，然后利用多线程并行执行这些小任务。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>Fork/Join</code>框架的主要组成部分是<code>ForkJoinPool</code>、<code>ForkJoinTask</code>。<code>ForkJoinPool</code>是一个线程池，它用于管理<code>Fork/Join</code>任务的执行。<code>ForkJoinTask</code>是一个抽象类，用于表示可以被分割成更小部分的任务。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>Fork/Join</code>框架更适合执行CPU密集型任务，同时需要避免在<code>ForkJoinPool</code>中提交大量的阻塞型任务，以免影响整个线程池的性能。</p>\n</li>\n</ul>\n<h3 id=\"应用场景\">应用场景</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>1.递归分解型任务<br>\n<code>Fork/Join</code>框架特别适用于递归分解型的任务，例如排序、归并、遍历等。这些任务通常可以将大的任务分解成若干个子任务，每个子任务可以独立执行，并且可以通过归并操作将子任务的结果合并成一个有序的结果。</p>\n</li>\n<li class=\"lvl-2\">\n<p>2.数组处理<br>\n<code>Fork/Join</code>框架还可以用于数组的处理，例如数组的排序、查找、统计等。在处理大型数组时，<code>Fork/Join</code>框架可以将数组分成若干个子数组，并行地处理每个子数组，最后将处理后的子数组合并成一个有序的大数组。</p>\n</li>\n<li class=\"lvl-2\">\n<p>3.并行化算法<br>\n<code>Fork/Join</code>框架还可以用于并行化算法的实现，例如并行化的图像处理算法、并行化的机器学习算法等。在这些算法中，可以将问题分解成若干个子问题，并行地解决每个子问题，然后将子问题的结果合并起来得到最终的解决方案。</p>\n</li>\n<li class=\"lvl-2\">\n<p>4.大数据处理<br>\n<code>Fork/Join</code>框架还可以用于大数据处理，例如大型日志文件的处理、大型数据库的查询等。在处理大数据时，可以将数据分成若干个分片，并行地处理每个分片，最后将处理后的分片合并成一个完整的结果</p>\n</li>\n</ul>\n<h2 id=\"ForkJoinPool介绍\">ForkJoinPool介绍</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>ForkJoinPool</code>是<code>Fork/Join</code>框架中的线程池类，它用于管理<code>Fork/Join</code>任务的线程，基于工作窃取算法（work-stealing）来实现任务的分配和执行。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>ForkJoinPool</code>类包括一些重要的方法，例如<code>submit()</code>、<code>invoke()</code>、<code>shutdown()</code>、<code>awaitTermination()</code>等，用于提交任务、执行任务、关闭线程池和等待任务的执行结果。<code>ForkJoinPool</code>类中还包括一些参数，例如线程池的大小、工作线程的优先级、任务队列的容量等，可以根据具体的应用场景进行设置。</p>\n</li>\n<li class=\"lvl-2\">\n<p>常用API</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>API/方法</th>\n<th>返回值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ForkJoinPool(int parallelism)</code></td>\n<td>无</td>\n<td>使用指定的并行度创建一个新的ForkJoinPool。</td>\n</tr>\n<tr>\n<td><code>invoke(ForkJoinTask&lt;T&gt; task)</code></td>\n<td>T</td>\n<td>同步执行给定的任务，并返回结果。</td>\n</tr>\n<tr>\n<td><code>submit(ForkJoinTask&lt;T&gt; task)</code></td>\n<td><code>Future&lt;T&gt;</code></td>\n<td>异步执行给定的任务，并返回一个<code>Future</code>对象，可以用于获取任务的执行结果。</td>\n</tr>\n<tr>\n<td><code>execute(ForkJoinTask&lt;?&gt; task)</code></td>\n<td>无</td>\n<td>异步执行给定的任务，没有返回值。</td>\n</tr>\n<tr>\n<td><code>awaitTermination(long timeout, TimeUnit unit)</code></td>\n<td><code>boolean</code></td>\n<td>阻塞当前线程，直到所有任务执行完成或超过指定的超时时间，并返回是否成功终止。</td>\n</tr>\n<tr>\n<td><code>isShutdown()</code></td>\n<td><code>boolean</code></td>\n<td>判断ForkJoinPool是否已经关闭。</td>\n</tr>\n<tr>\n<td><code>isTerminated()</code></td>\n<td><code>boolean</code></td>\n<td>判断ForkJoinPool中的所有任务是否已经执行完成。</td>\n</tr>\n<tr>\n<td><code>shutdown()</code></td>\n<td>无</td>\n<td>优雅地关闭ForkJoinPool，不再接受新的任务，并等待已提交的任务执行完成。</td>\n</tr>\n<tr>\n<td><code>shutdownNow()</code></td>\n<td><code>List&lt;Runnable&gt;</code></td>\n<td>强制关闭ForkJoinPool，尝试取消所有正在执行的任务，并返回等待执行的任务列表。</td>\n</tr>\n<tr>\n<td><code>getParallelism()</code></td>\n<td><code>int</code></td>\n<td>获取ForkJoinPool的并行度，即同时执行任务的线程数。</td>\n</tr>\n<tr>\n<td><code>getPoolSize()</code></td>\n<td><code>int</code></td>\n<td>获取ForkJoinPool中当前的工作线程数。</td>\n</tr>\n<tr>\n<td><code>getActiveThreadCount()</code></td>\n<td><code>int</code></td>\n<td>获取ForkJoinPool中当前活动的线程数。</td>\n</tr>\n<tr>\n<td><code>getQueuedTaskCount()</code></td>\n<td><code>long</code></td>\n<td>获取ForkJoinPool中当前等待执行的任务数。</td>\n</tr>\n<tr>\n<td><code>getRunningThreadCount()</code></td>\n<td><code>int</code></td>\n<td>获取ForkJoinPool中当前正在执行任务的线程数。</td>\n</tr>\n<tr>\n<td><code>getStealCount()</code></td>\n<td><code>long</code></td>\n<td>获取ForkJoinPool中总共发生的工作窃取次数。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ForkJoinPool的创建\">ForkJoinPool的创建</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ForkJoinPool中有四个核心参数，用于控制线程池的并行数、工作线程的创建、异常处理和模式指定等。各参数解释如下：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><code>int parallelism</code>：指定并行级别（parallelism level）。<br>\nForkJoinPool将根据这个设定，决定工作线程的数量。如果未设置的话，将使用<code>Runtime.getRuntime().availableProcessors()</code>来设置并行级别；  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ForkJoinPool</span><span class=\"params\">(<span class=\"type\">int</span> parallelism)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>(parallelism, defaultForkJoinWorkerThreadFactory, <span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-6\"><code>ForkJoinWorkerThreadFactory factory</code>：ForkJoinPool在创建线程时，会通过factory来创建。<br>\n注意，这里需要实现的是<code>ForkJoinWorkerThreadFactory</code>，而不是<code>ThreadFactory</code>。如果你不指定<code>factory</code>，那么将由默认的<code>DefaultForkJoinWorkerThreadFactory</code>负责线程的创建工作；</li>\n<li class=\"lvl-6\"><code>UncaughtExceptionHandler handler</code>：指定异常处理器<br>\n当任务在运行中出错时，将由设定的处理器处理；</li>\n<li class=\"lvl-6\"><code>boolean asyncMode</code>：设置队列的工作模式。<br>\n当<code>asyncMode</code>为<code>true</code>时，将使用先进先出队列，而为<code>false</code>时则使用后进先出的模式。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ForkJoinPool</span><span class=\"params\">(<span class=\"type\">int</span> parallelism,</span></span><br><span class=\"line\"><span class=\"params\">                ForkJoinWorkerThreadFactory factory,</span></span><br><span class=\"line\"><span class=\"params\">                UncaughtExceptionHandler handler,</span></span><br><span class=\"line\"><span class=\"params\">                <span class=\"type\">boolean</span> asyncMode)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>(checkParallelism(parallelism),</span><br><span class=\"line\">        checkFactory(factory),</span><br><span class=\"line\">        handler,</span><br><span class=\"line\">        asyncMode ? FIFO_QUEUE : LIFO_QUEUE,</span><br><span class=\"line\">        <span class=\"string\">&quot;ForkJoinPool-&quot;</span> + nextPoolId() + <span class=\"string\">&quot;-worker-&quot;</span>);</span><br><span class=\"line\">    checkPermission();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取处理器数量</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">processors</span> <span class=\"operator\">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\"><span class=\"comment\">//构建forkjoin线程池</span></span><br><span class=\"line\"><span class=\"type\">ForkJoinPool</span> <span class=\"variable\">forkJoinPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ForkJoinPool</span>(processors);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//此时等同于无参创建</span></span><br><span class=\"line\"><span class=\"type\">ForkJoinPool</span> <span class=\"variable\">forkJoinPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ForkJoinPool</span>();</span><br></pre></td></tr></table></figure>\n<h2 id=\"ForkJoinTask介绍\">ForkJoinTask介绍</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>ForkJoinTask</code>是<code>Fork/Join</code>框架中的抽象类，它定义了执行任务的基本接口。用户可以通过继承<code>ForkJoinTask</code>类来实现自己的任务类，并重写其中的<code>compute()</code>方法来定义任务的执行逻辑。</p>\n</li>\n<li class=\"lvl-2\">\n<p>通常情况下我们不需要直接继承<code>ForkJoinTask</code>类，而只需要继承它的子类，<code>Fork/Join</code>框架提供了以下三个子类：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><code>RecursiveAction</code>：用于递归执行但不需要返回结果的任务。</li>\n<li class=\"lvl-6\"><code>RecursiveTask</code> ：用于递归执行需要返回结果的任务。</li>\n<li class=\"lvl-6\"><code>CountedCompleter&lt;T&gt;</code> ：在任务完成执行后会触发执行一个自定义的钩子函数</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p><code>ForkJoinTask</code> 最核心的是 <code>fork()</code> 方法和 <code>join()</code>方法，承载着主要的任务协调作用，一个用于任务提交，一个用于结果获取。</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><code>fork()</code>–提交任务<br>\n<code>fork()</code>方法用于向当前任务所运行的线程池中提交任务。如果当前线程是<code>ForkJoinWorkerThread</code>类型，将会放入该线程的工作队列，否则放入<code>common</code>线程池的工作队列中。</li>\n<li class=\"lvl-6\"><code>join()</code>–获取任务执行结果<br>\n<code>join()</code>方法用于获取任务的执行结果。调用<code>join()</code>时，将阻塞当前线程直到对应的子任务完成运行并返回结果</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ForkJoinPool-与-ForkJoinTask-使用示例\">ForkJoinPool 与 ForkJoinTask 使用示例</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>利用<code>fork-join</code>实现数组归并排序算法</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.RecursiveTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 利用fork-join实现数组归并排序算法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MergeSortRecursiveTask</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RecursiveTask</span>&lt;<span class=\"type\">int</span>[]&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> threshold; <span class=\"comment\">//拆分的阈值，低于此阈值就不再进行拆分</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>[] arrayToSort; <span class=\"comment\">//要排序的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MergeSortRecursiveTask</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">int</span>[] arrayToSort, <span class=\"keyword\">final</span> <span class=\"type\">int</span> threshold)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.arrayToSort = arrayToSort;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.threshold = threshold;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">int</span>[] compute() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//拆分后的数组长度小于阈值，直接进行排序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arrayToSort.length &lt;= threshold) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 调用jdk提供的排序方法</span></span><br><span class=\"line\">            Arrays.sort(arrayToSort);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arrayToSort;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 对数组进行拆分</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">midpoint</span> <span class=\"operator\">=</span> arrayToSort.length / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] leftArray = Arrays.copyOfRange(arrayToSort, <span class=\"number\">0</span>, midpoint);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] rightArray = Arrays.copyOfRange(arrayToSort, midpoint, arrayToSort.length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MergeSortRecursiveTask</span> <span class=\"variable\">leftTask</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MergeSortRecursiveTask</span>(leftArray, threshold);</span><br><span class=\"line\">        <span class=\"type\">MergeSortRecursiveTask</span> <span class=\"variable\">rightTask</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MergeSortRecursiveTask</span>(rightArray, threshold);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用任务,阻塞当前线程，直到所有子任务执行完成</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用invokeAll()方法同时提交多个任务，以提高任务的并行度，相当于同时fork并join</span></span><br><span class=\"line\">        invokeAll(leftTask, rightTask);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//提交任务，多个任务同时提交时，推荐使用invokeAll()</span></span><br><span class=\"line\">        <span class=\"comment\">// leftTask.fork();</span></span><br><span class=\"line\">        <span class=\"comment\">// rightTask.fork();</span></span><br><span class=\"line\">        <span class=\"comment\">//合并结果</span></span><br><span class=\"line\">        <span class=\"comment\">// leftTask.join();</span></span><br><span class=\"line\">        <span class=\"comment\">// rightTask.join();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 合并排序结果</span></span><br><span class=\"line\">        arrayToSort = merge(leftTask.getSortedArray(), rightTask.getSortedArray());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayToSort;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>[] getSortedArray() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayToSort;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并两个有序数组，并返回合并后的有序数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>[] merge(<span class=\"keyword\">final</span> <span class=\"type\">int</span>[] leftArray, <span class=\"keyword\">final</span> <span class=\"type\">int</span>[] rightArray) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义用于合并结果的数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] mergedArray = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[leftArray.length + rightArray.length];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mergedArrayPos</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 利用双指针进行两个数的比较</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">leftArrayPos</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rightArrayPos</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (leftArrayPos &lt; leftArray.length &amp;&amp; rightArrayPos &lt; rightArray.length) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 比较左右数组中的元素大小，并将较小的元素放入合并结果数组中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (leftArray[leftArrayPos] &lt;= rightArray[rightArrayPos]) &#123;</span><br><span class=\"line\">                mergedArray[mergedArrayPos] = leftArray[leftArrayPos];</span><br><span class=\"line\">                leftArrayPos++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                mergedArray[mergedArrayPos] = rightArray[rightArrayPos];</span><br><span class=\"line\">                rightArrayPos++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mergedArrayPos++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将剩余的左数组元素放入合并结果数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (leftArrayPos &lt; leftArray.length) &#123;</span><br><span class=\"line\">            mergedArray[mergedArrayPos] = leftArray[leftArrayPos];</span><br><span class=\"line\">            leftArrayPos++;</span><br><span class=\"line\">            mergedArrayPos++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将剩余的右数组元素放入合并结果数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rightArrayPos &lt; rightArray.length) &#123;</span><br><span class=\"line\">            mergedArray[mergedArrayPos] = rightArray[rightArrayPos];</span><br><span class=\"line\">            rightArrayPos++;</span><br><span class=\"line\">            mergedArrayPos++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回合并后的有序数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mergedArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机生成数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> size 数组的大小</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] buildRandomIntArray(<span class=\"keyword\">final</span> <span class=\"type\">int</span> size) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arrayToCalculateSumOf = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[size];</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">generator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arrayToCalculateSumOf.length; i++) &#123;</span><br><span class=\"line\">            arrayToCalculateSumOf[i] = generator.nextInt(<span class=\"number\">10000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayToCalculateSumOf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//拆分的阈值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">threshold</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arrayToSortByMergeSort = buildRandomIntArray(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;排序前: &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> element : arrayToSortByMergeSort) &#123;</span><br><span class=\"line\">            System.out.print(element + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"comment\">//利用forkjoin排序</span></span><br><span class=\"line\">        <span class=\"type\">MergeSortRecursiveTask</span> <span class=\"variable\">mergeSortRecursiveTask</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MergeSortRecursiveTask</span>(arrayToSortByMergeSort, threshold);</span><br><span class=\"line\">        <span class=\"comment\">//构建forkjoin线程池</span></span><br><span class=\"line\">        <span class=\"type\">ForkJoinPool</span> <span class=\"variable\">forkJoinPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ForkJoinPool</span>();</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">startTime</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">        <span class=\"comment\">//执行排序任务</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span>[] mergeSortArray = forkJoinPool.invoke(mergeSortRecursiveTask);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;排序后: &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> element : mergeSortArray) &#123;</span><br><span class=\"line\">            System.out.print(element + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">duration</span> <span class=\"operator\">=</span> System.nanoTime() - startTime;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;forkjoin排序时间: &quot;</span> + (duration / (<span class=\"number\">1000f</span> * <span class=\"number\">1000f</span>)) + <span class=\"string\">&quot;毫秒&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ForkJoinPool工作原理\">ForkJoinPool工作原理</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>ForkJoinPool</code> 内部有多个任务队列，当我们通过 <code>ForkJoinPool</code> 的 <code>invoke()</code> 或者 <code>submit()</code> 方法提交任务时，<code>ForkJoinPool</code> 根据一定的路由规则把任务提交到一个任务队列中，如果任务在执行过程中会创建出子任务，那么子任务会提交到工作线程对应的任务队列中。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果工作线程对应的任务队列空了，是不是就没活儿干了呢？不是的，<code>ForkJoinPool</code> 支持一种叫做<code>任务窃取</code>的机制，如果工作线程空闲了，那它可以<code>窃取</code>其他工作任务队列里的任务。如此一来，所有的工作线程都不会闲下来了。</p>\n</li>\n</ul>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<h2 id=\"工作窃取\">工作窃取</h2>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">工作窃取，就是允许空闲线程从繁忙线程的双端队列中窃取任务。</li>\n<li class=\"lvl-2\">默认情况下，工作线程从它自己的双端队列的头部获取任务。但是，当自己的任务为空时，线程会从其他繁忙线程双端队列的尾部中获取任务。这种方法，最大限度地减少了线程竞争任务的可能性。</li>\n</ul>\n</div>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>ForkJoinPool</code>执行流程<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/1bBSl8.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"总结\">总结</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>Fork/Join</code>是一种基于分治思想的模型，在并发处理计算型任务时有着显著的优势。其效率的提升主要得益于两个方面：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">任务切分：将大的任务分割成更小粒度的小任务，让更多的线程参与执行；</li>\n<li class=\"lvl-6\">任务窃取：通过任务窃取，充分地利用空闲线程，并减少竞争。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>在使用<code>ForkJoinPool</code>时，需要特别注意任务的类型是否为纯函数计算类型，也就是这些任务不应该关心状态或者外界的变化，这样才是最安全的做法。如果是阻塞类型任务，那么你需要谨慎评估技术方案。虽然ForkJoinPool也能处理阻塞类型任务，但可能会带来复杂的管理成本。</p>\n</li>\n</ul>\n","content_text":"摘要 本文介绍线程池ForkJoinPool相关技术 本文基于jdk1.8 Fork/Join框架介绍 Fork/Join是一个是一个并行计算的框架，主要就是用来支持分治任务模型的，这个计算框架里的 Fork对应的是分治任务模型里的任务分解，Join 对应的是结果合并。 它的核心思想是将一个大任务分成许多小任务，然后并行执行这些小任务，最终将它们的结果合并成一个大的结果。 Fork/Join模式是实现任务并行性的一种常用模式，它将大任务递归地分解成小任务，然后利用多线程并行执行这些小任务。 Fork/Join框架的主要组成部分是ForkJoinPool、ForkJoinTask。ForkJoinPool是一个线程池，它用于管理Fork/Join任务的执行。ForkJoinTask是一个抽象类，用于表示可以被分割成更小部分的任务。 Fork/Join框架更适合执行CPU密集型任务，同时需要避免在ForkJoinPool中提交大量的阻塞型任务，以免影响整个线程池的性能。 应用场景 1.递归分解型任务 Fork/Join框架特别适用于递归分解型的任务，例如排序、归并、遍历等。这些任务通常可以将大的任务分解成若干个子任务，每个子任务可以独立执行，并且可以通过归并操作将子任务的结果合并成一个有序的结果。 2.数组处理 Fork/Join框架还可以用于数组的处理，例如数组的排序、查找、统计等。在处理大型数组时，Fork/Join框架可以将数组分成若干个子数组，并行地处理每个子数组，最后将处理后的子数组合并成一个有序的大数组。 3.并行化算法 Fork/Join框架还可以用于并行化算法的实现，例如并行化的图像处理算法、并行化的机器学习算法等。在这些算法中，可以将问题分解成若干个子问题，并行地解决每个子问题，然后将子问题的结果合并起来得到最终的解决方案。 4.大数据处理 Fork/Join框架还可以用于大数据处理，例如大型日志文件的处理、大型数据库的查询等。在处理大数据时，可以将数据分成若干个分片，并行地处理每个分片，最后将处理后的分片合并成一个完整的结果 ForkJoinPool介绍 ForkJoinPool是Fork/Join框架中的线程池类，它用于管理Fork/Join任务的线程，基于工作窃取算法（work-stealing）来实现任务的分配和执行。 ForkJoinPool类包括一些重要的方法，例如submit()、invoke()、shutdown()、awaitTermination()等，用于提交任务、执行任务、关闭线程池和等待任务的执行结果。ForkJoinPool类中还包括一些参数，例如线程池的大小、工作线程的优先级、任务队列的容量等，可以根据具体的应用场景进行设置。 常用API API/方法 返回值 描述 ForkJoinPool(int parallelism) 无 使用指定的并行度创建一个新的ForkJoinPool。 invoke(ForkJoinTask&lt;T&gt; task) T 同步执行给定的任务，并返回结果。 submit(ForkJoinTask&lt;T&gt; task) Future&lt;T&gt; 异步执行给定的任务，并返回一个Future对象，可以用于获取任务的执行结果。 execute(ForkJoinTask&lt;?&gt; task) 无 异步执行给定的任务，没有返回值。 awaitTermination(long timeout, TimeUnit unit) boolean 阻塞当前线程，直到所有任务执行完成或超过指定的超时时间，并返回是否成功终止。 isShutdown() boolean 判断ForkJoinPool是否已经关闭。 isTerminated() boolean 判断ForkJoinPool中的所有任务是否已经执行完成。 shutdown() 无 优雅地关闭ForkJoinPool，不再接受新的任务，并等待已提交的任务执行完成。 shutdownNow() List&lt;Runnable&gt; 强制关闭ForkJoinPool，尝试取消所有正在执行的任务，并返回等待执行的任务列表。 getParallelism() int 获取ForkJoinPool的并行度，即同时执行任务的线程数。 getPoolSize() int 获取ForkJoinPool中当前的工作线程数。 getActiveThreadCount() int 获取ForkJoinPool中当前活动的线程数。 getQueuedTaskCount() long 获取ForkJoinPool中当前等待执行的任务数。 getRunningThreadCount() int 获取ForkJoinPool中当前正在执行任务的线程数。 getStealCount() long 获取ForkJoinPool中总共发生的工作窃取次数。 ForkJoinPool的创建 ForkJoinPool中有四个核心参数，用于控制线程池的并行数、工作线程的创建、异常处理和模式指定等。各参数解释如下： int parallelism：指定并行级别（parallelism level）。 ForkJoinPool将根据这个设定，决定工作线程的数量。如果未设置的话，将使用Runtime.getRuntime().availableProcessors()来设置并行级别； 123public ForkJoinPool(int parallelism) &#123; this(parallelism, defaultForkJoinWorkerThreadFactory, null, false);&#125; ForkJoinWorkerThreadFactory factory：ForkJoinPool在创建线程时，会通过factory来创建。 注意，这里需要实现的是ForkJoinWorkerThreadFactory，而不是ThreadFactory。如果你不指定factory，那么将由默认的DefaultForkJoinWorkerThreadFactory负责线程的创建工作； UncaughtExceptionHandler handler：指定异常处理器 当任务在运行中出错时，将由设定的处理器处理； boolean asyncMode：设置队列的工作模式。 当asyncMode为true时，将使用先进先出队列，而为false时则使用后进先出的模式。 1234567891011public ForkJoinPool(int parallelism, ForkJoinWorkerThreadFactory factory, UncaughtExceptionHandler handler, boolean asyncMode) &#123; this(checkParallelism(parallelism), checkFactory(factory), handler, asyncMode ? FIFO_QUEUE : LIFO_QUEUE, &quot;ForkJoinPool-&quot; + nextPoolId() + &quot;-worker-&quot;); checkPermission();&#125; 1234567//获取处理器数量int processors = Runtime.getRuntime().availableProcessors();//构建forkjoin线程池ForkJoinPool forkJoinPool = new ForkJoinPool(processors);//此时等同于无参创建ForkJoinPool forkJoinPool = new ForkJoinPool(); ForkJoinTask介绍 ForkJoinTask是Fork/Join框架中的抽象类，它定义了执行任务的基本接口。用户可以通过继承ForkJoinTask类来实现自己的任务类，并重写其中的compute()方法来定义任务的执行逻辑。 通常情况下我们不需要直接继承ForkJoinTask类，而只需要继承它的子类，Fork/Join框架提供了以下三个子类： RecursiveAction：用于递归执行但不需要返回结果的任务。 RecursiveTask ：用于递归执行需要返回结果的任务。 CountedCompleter&lt;T&gt; ：在任务完成执行后会触发执行一个自定义的钩子函数 ForkJoinTask 最核心的是 fork() 方法和 join()方法，承载着主要的任务协调作用，一个用于任务提交，一个用于结果获取。 fork()–提交任务 fork()方法用于向当前任务所运行的线程池中提交任务。如果当前线程是ForkJoinWorkerThread类型，将会放入该线程的工作队列，否则放入common线程池的工作队列中。 join()–获取任务执行结果 join()方法用于获取任务的执行结果。调用join()时，将阻塞当前线程直到对应的子任务完成运行并返回结果 ForkJoinPool 与 ForkJoinTask 使用示例 利用fork-join实现数组归并排序算法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135import java.util.Arrays;import java.util.Random;import java.util.concurrent.ForkJoinPool;import java.util.concurrent.RecursiveTask;/** * 利用fork-join实现数组归并排序算法 */public class MergeSortRecursiveTask extends RecursiveTask&lt;int[]&gt; &#123; private final int threshold; //拆分的阈值，低于此阈值就不再进行拆分 private int[] arrayToSort; //要排序的数组 public MergeSortRecursiveTask(final int[] arrayToSort, final int threshold) &#123; this.arrayToSort = arrayToSort; this.threshold = threshold; &#125; @Override protected int[] compute() &#123; //拆分后的数组长度小于阈值，直接进行排序 if (arrayToSort.length &lt;= threshold) &#123; // 调用jdk提供的排序方法 Arrays.sort(arrayToSort); return arrayToSort; &#125; // 对数组进行拆分 int midpoint = arrayToSort.length / 2; int[] leftArray = Arrays.copyOfRange(arrayToSort, 0, midpoint); int[] rightArray = Arrays.copyOfRange(arrayToSort, midpoint, arrayToSort.length); MergeSortRecursiveTask leftTask = new MergeSortRecursiveTask(leftArray, threshold); MergeSortRecursiveTask rightTask = new MergeSortRecursiveTask(rightArray, threshold); // 调用任务,阻塞当前线程，直到所有子任务执行完成 // 使用invokeAll()方法同时提交多个任务，以提高任务的并行度，相当于同时fork并join invokeAll(leftTask, rightTask); //提交任务，多个任务同时提交时，推荐使用invokeAll() // leftTask.fork(); // rightTask.fork(); //合并结果 // leftTask.join(); // rightTask.join(); // 合并排序结果 arrayToSort = merge(leftTask.getSortedArray(), rightTask.getSortedArray()); return arrayToSort; &#125; private int[] getSortedArray() &#123; return arrayToSort; &#125; /** * 合并两个有序数组，并返回合并后的有序数组 */ private int[] merge(final int[] leftArray, final int[] rightArray) &#123; // 定义用于合并结果的数组 int[] mergedArray = new int[leftArray.length + rightArray.length]; int mergedArrayPos = 0; // 利用双指针进行两个数的比较 int leftArrayPos = 0; int rightArrayPos = 0; while (leftArrayPos &lt; leftArray.length &amp;&amp; rightArrayPos &lt; rightArray.length) &#123; // 比较左右数组中的元素大小，并将较小的元素放入合并结果数组中 if (leftArray[leftArrayPos] &lt;= rightArray[rightArrayPos]) &#123; mergedArray[mergedArrayPos] = leftArray[leftArrayPos]; leftArrayPos++; &#125; else &#123; mergedArray[mergedArrayPos] = rightArray[rightArrayPos]; rightArrayPos++; &#125; mergedArrayPos++; &#125; // 将剩余的左数组元素放入合并结果数组中 while (leftArrayPos &lt; leftArray.length) &#123; mergedArray[mergedArrayPos] = leftArray[leftArrayPos]; leftArrayPos++; mergedArrayPos++; &#125; // 将剩余的右数组元素放入合并结果数组中 while (rightArrayPos &lt; rightArray.length) &#123; mergedArray[mergedArrayPos] = rightArray[rightArrayPos]; rightArrayPos++; mergedArrayPos++; &#125; // 返回合并后的有序数组 return mergedArray; &#125; /** * 随机生成数组 * @param size 数组的大小 */ private static int[] buildRandomIntArray(final int size) &#123; int[] arrayToCalculateSumOf = new int[size]; Random generator = new Random(); for (int i = 0; i &lt; arrayToCalculateSumOf.length; i++) &#123; arrayToCalculateSumOf[i] = generator.nextInt(10000); &#125; return arrayToCalculateSumOf; &#125; public static void main(String[] args) &#123; //拆分的阈值 int threshold = 20; int[] arrayToSortByMergeSort = buildRandomIntArray(2000); System.out.print(&quot;排序前: &quot;); for (int element : arrayToSortByMergeSort) &#123; System.out.print(element + &quot; &quot;); &#125; System.out.println(); //利用forkjoin排序 MergeSortRecursiveTask mergeSortRecursiveTask = new MergeSortRecursiveTask(arrayToSortByMergeSort, threshold); //构建forkjoin线程池 ForkJoinPool forkJoinPool = new ForkJoinPool(); long startTime = System.nanoTime(); //执行排序任务 final int[] mergeSortArray = forkJoinPool.invoke(mergeSortRecursiveTask); System.out.print(&quot;排序后: &quot;); for (int element : mergeSortArray) &#123; System.out.print(element + &quot; &quot;); &#125; System.out.println(); long duration = System.nanoTime() - startTime; System.out.println(&quot;forkjoin排序时间: &quot; + (duration / (1000f * 1000f)) + &quot;毫秒&quot;); &#125;&#125; ForkJoinPool工作原理 ForkJoinPool 内部有多个任务队列，当我们通过 ForkJoinPool 的 invoke() 或者 submit() 方法提交任务时，ForkJoinPool 根据一定的路由规则把任务提交到一个任务队列中，如果任务在执行过程中会创建出子任务，那么子任务会提交到工作线程对应的任务队列中。 如果工作线程对应的任务队列空了，是不是就没活儿干了呢？不是的，ForkJoinPool 支持一种叫做任务窃取的机制，如果工作线程空闲了，那它可以窃取其他工作任务队列里的任务。如此一来，所有的工作线程都不会闲下来了。 小贴士 工作窃取 工作窃取，就是允许空闲线程从繁忙线程的双端队列中窃取任务。 默认情况下，工作线程从它自己的双端队列的头部获取任务。但是，当自己的任务为空时，线程会从其他繁忙线程双端队列的尾部中获取任务。这种方法，最大限度地减少了线程竞争任务的可能性。 ForkJoinPool执行流程 总结 Fork/Join是一种基于分治思想的模型，在并发处理计算型任务时有着显著的优势。其效率的提升主要得益于两个方面： 任务切分：将大的任务分割成更小粒度的小任务，让更多的线程参与执行； 任务窃取：通过任务窃取，充分地利用空闲线程，并减少竞争。 在使用ForkJoinPool时，需要特别注意任务的类型是否为纯函数计算类型，也就是这些任务不应该关心状态或者外界的变化，这样才是最安全的做法。如果是阻塞类型任务，那么你需要谨慎评估技术方案。虽然ForkJoinPool也能处理阻塞类型任务，但可能会带来复杂的管理成本。","summary":"摘要 本文介绍线程池ForkJoinPool相关技术 本文基于jdk1.8","date_published":"2023-05-29T14:34:05.000Z","tags":["技术","java","java多线程","java"]},{"id":"https://blog.hanqunfeng.com/2023/05/25/java-concurrency11-ThreadPoolExecutor/","url":"https://blog.hanqunfeng.com/2023/05/25/java-concurrency11-ThreadPoolExecutor/","title":"Java并发编程--线程池之ThreadPoolExecutor","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍线程池 ThreadPoolExecutor 相关技术</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>jdk1.8</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"线程池介绍\">线程池介绍</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>线程池是一种用于管理和复用线程的机制，它可以有效地控制并发线程的数量，减少线程创建和销毁的开销，并提高应用程序的性能和资源利用率。</p>\n</li>\n</ul>\n<h2 id=\"Java内置的线程池\">Java内置的线程池</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>FixedThreadPool（固定线程池）：该线程池包含固定数量的线程，提交的任务会在这些线程中执行。如果所有线程都正在忙于执行任务，新任务将会在任务队列中等待。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// nThreads是线程池中线程的数量，核心线程数和最大线程数一样</span></span><br><span class=\"line\"><span class=\"type\">ExecutorService</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"type\">int</span> nThreads);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Executors中的newFixedThreadPool方法实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newFixedThreadPool</span><span class=\"params\">(<span class=\"type\">int</span> nThreads)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(nThreads, nThreads,<span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,<span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>- 优点：具有固定数量的线程，可确保线程数始终保持在指定的数量上。适用于需要控制并发线程数的场景，可以避免线程数量过多导致系统资源耗尽。\n- 缺点：任务队列无界限制，如果任务提交速度超过线程处理速度，可能导致队列积压过多任务，最终可能导致内存溢出。不适合处理大量长时间运行的任务。\n</code></pre>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>CachedThreadPool（缓存线程池）：该线程池不固定线程数量，可以根据需要自动创建新线程，也会自动回收闲置的线程。适用于执行大量短期的任务。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ExecutorService</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> Executors.newCachedThreadPool();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Executors中的newCachedThreadPool方法实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newCachedThreadPool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">0</span>, Integer.MAX_VALUE, <span class=\"number\">60L</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>- 优点：线程数量不固定，根据任务的提交情况动态创建和回收线程。适用于短期、异步的任务处理，能够灵活调配线程资源。\n- 缺点：由于线程数量不受限制，如果任务提交速度过快，可能导致创建过多的线程，进而消耗过多的系统资源，甚至导致系统崩溃。\n</code></pre>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>SingleThreadExecutor（单线程池）：该线程池只包含一个线程，用于顺序执行任务。如果该线程因异常而终止，会创建一个新的线程来替代。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ExecutorService</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> Executors.newSingleThreadExecutor();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Executors中的newSingleThreadExecutor方法实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newSingleThreadExecutor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalizableDelegatedExecutorService</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS, <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>- 优点：只有一个工作线程，保证任务按照指定顺序执行。适用于需要顺序执行任务的场景，例如需要按照任务的提交顺序进行处理。\n- 缺点：由于只有一个线程，如果该线程因为异常而终止，线程池将会创建一个新线程代替，可能会带来额外的开销。不适合处理大量耗时的任务。\n</code></pre>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ScheduledThreadPool（调度线程池）：该线程池用于定时或周期性执行任务。可以指定任务的延迟时间或执行周期。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// corePoolSize是线程池中核心线程的数量</span></span><br><span class=\"line\"><span class=\"type\">ScheduledExecutorService</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> Executors.newScheduledThreadPool(<span class=\"type\">int</span> corePoolSize);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // Executors中的newScheduledThreadPool方法实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title function_\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(corePoolSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ScheduledThreadPoolExecutor是ThreadPoolExecutor的子类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(corePoolSize, Integer.MAX_VALUE, <span class=\"number\">0</span>, NANOSECONDS, <span class=\"keyword\">new</span> <span class=\"title class_\">DelayedWorkQueue</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>- 优点：用于定时或周期性执行任务，可以指定任务的延迟时间或执行周期。适用于需要定时执行任务的场景。\n- 缺点：线程数量固定，如果任务过多或任务执行时间过长，可能会导致任务堆积，影响调度的准确性。\n</code></pre>\n<h3 id=\"为什么不推荐使用这些内置线程池？\">为什么不推荐使用这些内置线程池？</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>任务队列没有限制：内置线程池的任务队列默认是无界的，如果任务提交速度过快，可能会导致队列积压过多任务，最终导致内存溢出或系统资源耗尽。</p>\n</li>\n<li class=\"lvl-2\">\n<p>默认的线程拒绝策略：内置线程池的默认线程拒绝策略是抛出RejectedExecutionException，当任务提交超过线程池的处理能力时，会导致任务被拒绝执行。这可能会导致任务丢失或需要手动处理拒绝的任务。</p>\n</li>\n<li class=\"lvl-2\">\n<p>配置限制有限：内置线程池提供了一些参数来配置线程池的行为，例如核心线程数、最大线程数、任务队列等。然而，这些参数可能不足以满足复杂的业务需求。对于更复杂的场景，可能需要更高级的线程池实现或手动创建自定义线程池。</p>\n</li>\n<li class=\"lvl-2\">\n<p>缺乏监控和扩展功能：内置线程池的功能相对简单，缺乏对线程池的监控和扩展能力。在一些需要对线程池进行监控、统计或动态调整的场景下，内置线程池可能无法满足需求。</p>\n</li>\n<li class=\"lvl-2\">\n<p>鉴于上述原因，对于复杂的应用程序和具有特定需求的场景，建议使用更高级的线程池实现，例如ThreadPoolExecutor类，它提供了更多的配置选项和灵活性，以满足各种需求。此外，还可以考虑使用第三方的线程池库，如Guava或Apache Commons等，它们提供了更多功能和扩展性。自定义线程池能够更好地适应特定的业务需求，并提供更好的控制和可扩展性。</p>\n</li>\n</ul>\n<h2 id=\"ThreadPoolExecutor介绍\">ThreadPoolExecutor介绍</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ThreadPoolExecutor是Java中的一个灵活且强大的线程池实现，它提供了很多配置选项，你可以将任务提交给线程池执行，并根据需要动态调整线程池的大小和配置。它是并发编程中常用的工具，适用于各种需要处理异步任务的场景，如服务器端应用程序、多线程数据处理和并行计算等。</p>\n</li>\n<li class=\"lvl-2\">\n<p>ThreadPoolExecutor的一些关键特点：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">1.线程池大小控制：你可以通过设置核心线程池大小（corePoolSize）和最大线程池大小（maximumPoolSize）来控制线程池中的线程数量。核心线程池大小是线程池中一直保持活动的线程数，而最大线程池大小是线程池中允许存在的最大线程数。</li>\n<li class=\"lvl-6\">2.任务排队：ThreadPoolExecutor提供了多种任务排队策略，例如无界队列（Unbounded Queue）、有界队列（Bounded Queue）和同步移交（Synchronous Transfer）。你可以根据需要选择适合的任务排队策略，以控制任务的提交和执行。</li>\n<li class=\"lvl-6\">3.线程生命周期管理：ThreadPoolExecutor负责管理线程的生命周期，包括线程的创建、执行任务和销毁。它会根据线程池的配置自动创建和回收线程，以及处理线程的异常和空闲状态。</li>\n<li class=\"lvl-6\">4.拒绝策略：当线程池无法接受新的任务时，ThreadPoolExecutor提供了多种拒绝策略来处理这种情况。例如，你可以选择丢弃任务、抛出异常或在调用者线程中执行任务。</li>\n<li class=\"lvl-6\">5.统计和监控：ThreadPoolExecutor提供了一些方法来获取线程池的状态和统计信息，比如活动线程数、已完成任务数、任务队列大小等。这些信息可以帮助你监控和调优线程池的性能。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ThreadPoolExecutor类的一些常用API\">ThreadPoolExecutor类的一些常用API</h2>\n<table>\n<thead>\n<tr>\n<th>方法签名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void execute(Runnable command)</code></td>\n<td>提交一个Runnable任务给线程池执行</td>\n</tr>\n<tr>\n<td><code>Future&lt;?&gt; submit(Runnable task)</code></td>\n<td>提交一个Runnable任务给线程池执行，并返回一个表示任务结果的Future对象</td>\n</tr>\n<tr>\n<td><code>Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code></td>\n<td>提交一个Callable任务给线程池执行，并返回一个表示任务结果的Future对象</td>\n</tr>\n<tr>\n<td><code>void shutdown()</code></td>\n<td>顺序关闭线程池，不再接受新的任务</td>\n</tr>\n<tr>\n<td><code>List&lt;Runnable&gt; shutdownNow()</code></td>\n<td>立即关闭线程池，并尝试终止所有正在执行的任务，返回的是尚未开始处理的任务列表，以及已经开始但尚未完成的任务列表。</td>\n</tr>\n<tr>\n<td><code>boolean isShutdown()</code></td>\n<td>判断线程池是否已经关闭</td>\n</tr>\n<tr>\n<td><code>boolean isTerminated()</code></td>\n<td>判断线程池是否已经终止，已经终止返回true</td>\n</tr>\n<tr>\n<td><code>boolean awaitTermination(long timeout, TimeUnit unit)</code></td>\n<td>等待线程池终止，最多等待指定的时间 ，超时后仍未终止返回false</td>\n</tr>\n<tr>\n<td><code>void setCorePoolSize(int corePoolSize)</code></td>\n<td>设置核心线程池大小</td>\n</tr>\n<tr>\n<td><code>int getCorePoolSize()</code></td>\n<td>获取核心线程池大小</td>\n</tr>\n<tr>\n<td><code>void setMaximumPoolSize(int maximumPoolSize)</code></td>\n<td>设置最大线程池大小</td>\n</tr>\n<tr>\n<td><code>int getMaximumPoolSize()</code></td>\n<td>获取最大线程池大小</td>\n</tr>\n<tr>\n<td><code>void setKeepAliveTime(long time, TimeUnit unit)</code></td>\n<td>设置非核心线程的空闲时间</td>\n</tr>\n<tr>\n<td><code>long getKeepAliveTime(TimeUnit unit)</code></td>\n<td>获取非核心线程的空闲时间</td>\n</tr>\n<tr>\n<td><code>BlockingQueue&lt;Runnable&gt; getQueue()</code></td>\n<td>获取任务队列</td>\n</tr>\n<tr>\n<td><code>void setRejectedExecutionHandler(RejectedExecutionHandler handler)</code></td>\n<td>设置拒绝策略</td>\n</tr>\n<tr>\n<td><code>RejectedExecutionHandler getRejectedExecutionHandler()</code></td>\n<td>获取拒绝策略</td>\n</tr>\n<tr>\n<td><code>int getActiveCount()</code></td>\n<td>获取活动线程数</td>\n</tr>\n<tr>\n<td><code>long getCompletedTaskCount()</code></td>\n<td>获取已完成的任务数</td>\n</tr>\n<tr>\n<td><code>long getTaskCount()</code></td>\n<td>获取总任务数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ThreadPoolExecutor的创建与配置\">ThreadPoolExecutor的创建与配置</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">corePoolSize</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>; <span class=\"comment\">// 核心线程池大小</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">maxPoolSize</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 最大线程池大小</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">keepAliveTime</span> <span class=\"operator\">=</span> <span class=\"number\">5000</span>; <span class=\"comment\">// 非核心线程的空闲时间</span></span><br><span class=\"line\"><span class=\"type\">TimeUnit</span> <span class=\"variable\">unit</span> <span class=\"operator\">=</span> TimeUnit.MILLISECONDS; <span class=\"comment\">// 空闲时间的单位</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ThreadPoolExecutor使用任务队列来存储待执行的任务。你可以选择使用不同类型的BlockingQueue实现，比如LinkedBlockingQueue、ArrayBlockingQueue等。</span></span><br><span class=\"line\">BlockingQueue&lt;Runnable&gt; taskQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">1000</span>); <span class=\"comment\">// 任务队列</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化ThreadPoolExecutor类</span></span><br><span class=\"line\"><span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(corePoolSize, maxPoolSize, keepAliveTime, unit, taskQueue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置拒绝策略，ThreadPoolExecutor提供了四种内置的拒绝策略:</span></span><br><span class=\"line\"><span class=\"comment\">// 1.AbortPolicy，默认策略，即当线程池无法接受新任务时，会抛出RejectedExecutionException。</span></span><br><span class=\"line\"><span class=\"comment\">// 2.CallerRunsPolicy，即当线程池无法接受新任务时，会在调用者线程中执行该任务。</span></span><br><span class=\"line\"><span class=\"comment\">// 3.DiscardPolicy，即当线程池无法接受新任务时，新任务会被直接丢弃，不会抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\">// 4.DiscardOldestPolicy，会丢弃线程池中最早提交的一个任务，然后尝试重新提交被拒绝的任务。</span></span><br><span class=\"line\">executor.setRejectedExecutionHandler(<span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br></pre></td></tr></table></figure>\n<h2 id=\"ThreadPoolExecutor的调用\">ThreadPoolExecutor的调用</h2>\n<h3 id=\"没有返回值\">没有返回值</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过调用execute()方法，将任务提交给ThreadPoolExecutor执行，这里的MyTask是实现了Runnable接口的自定义任务类。</span></span><br><span class=\"line\">executor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">MyTask</span>());</span><br></pre></td></tr></table></figure>\n<h3 id=\"有返回值\">有返回值</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过调用submit()方法，将任务提交给ThreadPoolExecutor执行，并返回了一个Future对象，用于获取任务的执行结果。</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的CallableTask是实现了Runnable接口或者Callable&lt;T&gt;接口的自定义任务类。</span></span><br><span class=\"line\">Future&lt;String&gt; future = executor.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">CallableTask</span>());</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>需要注意的是，submit()方法可以接受不同类型的任务（Runnable或Callable），并返回一个Future对象。对于Runnable类型的任务，submit()方法返回的Future对象的get()方法将始终返回null。</p>\n</li>\n</ul>\n<h3 id=\"执行流程图\">执行流程图</h3>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/UmhNjp.png\" alt=\"\" width=\"900\" height=\"600\"></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>提交一个Runnable时，不管当前线程池中的线程是否空闲，只要数量小于核心线程数就会创建新线程。</p>\n</li>\n<li class=\"lvl-2\">\n<p>ThreadPoolExecutor是非公平的，比如队列满了之后提交的Runnable可能会比正在排队的Runnable先执行。</p>\n</li>\n</ul>\n<h2 id=\"ThreadPoolExecutor的关闭\">ThreadPoolExecutor的关闭</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不再接受新的任务，但是正在处理的任务和队列中尚未处理的任务会继续执行完毕</span></span><br><span class=\"line\">executor.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不再接受新的任务，也不再执行队列中的任务，并且会中断正在处理的任务</span></span><br><span class=\"line\"><span class=\"comment\">// 线程池会尽力停止正在执行的任务，但无法保证任务会立即停止。因此，在调用shutdownNow()后，你可以通过检查返回的任务列表来获取所有尚未处理完成的任务，并根据需要进行处理。</span></span><br><span class=\"line\">List&lt;Runnable&gt; list = executor.shutdownNow();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>调用<code>shutdownNow()</code>也并不意味着线程池立刻就关闭了，可以通过如下方式判断线程池是否已经终止</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法签名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean isTerminated()</code></td>\n<td>判断线程池是否已经终止，已经终止返回true</td>\n</tr>\n<tr>\n<td><code>boolean awaitTermination(long timeout, TimeUnit unit)</code></td>\n<td>等待线程池终止，最多等待指定的时间 ，超时后仍未终止返回false</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ThreadPoolExecutor线程池的五种状态\">ThreadPoolExecutor线程池的五种状态</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>RUNNING：会接收新任务并且会处理队列中的任务</p>\n</li>\n<li class=\"lvl-2\">\n<p>SHUTDOWN：不会接收新任务并且会处理队列中的任务</p>\n</li>\n<li class=\"lvl-2\">\n<p>STOP：不会接收新任务并且不会处理队列中的任务，并且会中断在处理的任务</p>\n</li>\n<li class=\"lvl-2\">\n<p>TIDYING：所有任务都终止了，线程池中也没有线程了，这样线程池的状态就会转为TIDYING，一旦达到此状态，就会调用线程池的terminated()</p>\n</li>\n<li class=\"lvl-2\">\n<p>TERMINATED：terminated()执行完之后就会转变为TERMINATED</p>\n</li>\n</ul>\n<p><em><strong>这五种状态并不能任意转换，只会有以下几种转换情况：</strong></em></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>RUNNING</code> -&gt; <code>SHUTDOWN</code>：手动调用<code>shutdown()</code>触发，或者线程池对象GC时会调用<code>finalize()</code>从而调用<code>shutdown()</code></p>\n</li>\n<li class=\"lvl-2\">\n<p><code>(RUNNING or SHUTDOWN)</code> -&gt; <code>STOP</code>：调用<code>shutdownNow()</code>触发，如果先调<code>shutdown()</code>紧着调<code>shutdownNow()</code>，就会发生<code>SHUTDOWN</code> -&gt; <code>STOP</code></p>\n</li>\n<li class=\"lvl-2\">\n<p><code>SHUTDOWN</code> -&gt; <code>TIDYING</code>：队列为空并且线程池中没有线程时自动转换</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>STOP</code> -&gt; <code>TIDYING</code>：线程池中没有线程时自动转换（队列中可能还有任务，但是永远不会被执行）</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>TIDYING</code> -&gt; <code>TERMINATED</code>：<code>terminated()</code>执行完后就会自动转换</p>\n</li>\n</ul>\n<h2 id=\"线程池为什么一定得是阻塞队列？\">线程池为什么一定得是阻塞队列？</h2>\n<p>线程池中的线程在运行过程中，执行完创建线程时绑定的第一个任务后，就会不断的从队列中获取任务并执行，那么如果队列中没有任务了，线程为了不自然消亡，就会阻塞在获取队列任务时，等着队列中有任务过来就会拿到任务从而去执行任务。通过这种方法能最终确保，线程池中能保留指定个数的核心线程数。</p>\n<h2 id=\"线程发生异常，会被移出线程池吗？\">线程发生异常，会被移出线程池吗？</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>会。但为了保证维持住固定的核心线程数，会再创建一个新的线程。</p>\n</li>\n<li class=\"lvl-2\">\n<p>单个任务的异常情况，不会直接影响线程池中的其他线程，线程池会继续执行其他任务，除非遇到无法处理的异常，例如线程池被关闭或发生了无法恢复的错误。</p>\n</li>\n<li class=\"lvl-2\">\n<p>然而，如果某个任务的异常没有被正确处理，可能会导致整个线程池无法正常工作。例如，如果异常被忽略或没有适当的错误日志记录，可能会导致问题的隐患积累或任务无法正确完成。</p>\n</li>\n<li class=\"lvl-2\">\n<p>因此，在使用线程池时，建议为任务提供适当的异常处理逻辑，以确保及时捕获和处理异常，以及记录错误信息。这有助于提高线程池的可靠性和稳定性。</p>\n</li>\n<li class=\"lvl-2\">\n<p>也可以为线程池配置全局异常处理逻辑，如果线程执行过程中发生了未捕获的异常，可以通过下面的方式处理异常：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">10</span>, <span class=\"number\">500</span>, <span class=\"number\">30</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">200</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ThreadFactory</span> <span class=\"variable\">threadFactory</span> <span class=\"operator\">=</span> runnable -&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(runnable);</span><br><span class=\"line\">    t.setUncaughtExceptionHandler((thread, error) -&gt; System.out.println(thread.getName() + <span class=\"string\">&quot;:错误信息:&quot;</span> + error.getMessage()));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">executor.setThreadFactory(threadFactory);</span><br></pre></td></tr></table></figure>\n<h2 id=\"线程池的核心线程数、最大线程数该如何设置？\">线程池的核心线程数、最大线程数该如何设置？</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>线程池中的核心线程数计算方法：</p>\n</li>\n</ul>\n<div class=\"tips\">\n<p><em><strong>名词解释</strong></em><br>\nCPU核心数[逻辑核] = Runtime.getRuntime().availableProcessors();<br>\n线程等待时间[阻塞时间]：指的就是线程没有使用CPU的时间，比如阻塞在了IO<br>\n线程运行总时间：指的是线程执行完某个任务的总时间<br>\n阻塞系数 = 线程等待时间[阻塞时间] / 线程运行总时间</p>\n<p>PS: 可以在压测时使用JVM提供的<code>jvisualvm</code>得到对应线程运行的<code>总时间</code>和<code>总时间(CPU)</code>，通过计算得到：<br>\n线程等待时间 = <code>总时间</code> - <code>总时间(CPU)</code><br>\n线程运行总时间 = <code>总时间</code></p>\n</div>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>1.计算密集型：内存运算，尽可能避免发生线程上下文切换<br>\n核心线程数 = CPU核心数 + 1</p>\n</li>\n<li class=\"lvl-2\">\n<p>2.IO密集型：一般文件读写、数据库读写、网络接口调用等都属于IO密集型</p>\n<blockquote>\n<p>方法1：<br>\n- 核心线程数 = CPU核心数 * (1 + 阻塞系数)<br>\n- 该方法下，通常设置为 CPU核心数 * 2，所以: 4C服务器，线程数为8个左右</p>\n</blockquote>\n<blockquote>\n<p>方法2 [推荐]：<br>\n- 核心线程数 = CPU核心数 / (1 - 阻塞系数)<br>\n- 该方法下，经验上一般阻塞系数取值为0.8~0.9，所以: 4C服务器，线程数为20 ~ 40个为宜</p>\n</blockquote>\n</li>\n</ul>\n<p><span style=\"color:red;\">PS: 经验上来讲，方法2更为准确，但以上只是理论，实际工作中情况会更复杂，比如一个应用中，可能有多个线程池，除开线程池中的线程可能还有很多其他线程，或者除开这个应用还是一些其他应用也在运行，所以实际工作中如果要确定准确的线程数，最好是压测。</span></p>\n<p><em><strong>总结</strong></em></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>CPU密集型任务：CPU核心数+1，这样既能充分利用CPU，也不至于有太多的上下文切换成本</p>\n</li>\n<li class=\"lvl-2\">\n<p>IO密集型任务：建议压测，或者先用公式计算出一个理论值（理论值通常都比较小）</p>\n</li>\n<li class=\"lvl-2\">\n<p>对于核心业务（访问频率高），可以把核心线程数设置为我们压测出来的结果，最大线程数可以等于核心线程数，或者大一点点，比如我们压测时可能会发现500个线程最佳，但是600个线程时也还行，此时600就可以为最大线程数</p>\n</li>\n<li class=\"lvl-2\">\n<p>对于非核心业务（访问频率不高），核心线程数可以比较小，避免操作系统去维护不必要的线程，最大线程数可以设置为我们计算或压测出来的结果。</p>\n</li>\n</ul>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<h2 id=\"Tomcat中的线程池ThreadPoolExecutor\">Tomcat中的线程池<code>ThreadPoolExecutor</code></h2>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">Tomcat中有一个与JUC包下同名的<code>ThreadPoolExecutor</code>，即<code>org.apache.tomcat.util.threads.ThreadPoolExecutor</code>，它扩展了Java标准库中的<code>java.util.concurrent.ThreadPoolExecutor</code>，具有一些特定的功能和行为：\n<ul class=\"lvl-3\">\n<li class=\"lvl-6\">入队时，如果线程池的线程个数等于最大线程池数才入队，如果线程池的线程个数小于最大线程池数，会返回false，表示入队失败</li>\n<li class=\"lvl-6\">提交任务时，会先判断线程个数是否小于核心线程数，如果小于则创建线程，如果等于核心线程数，会入队，但是线程个数小于最大线程数会入队失败，从而会去创建线程</li>\n<li class=\"lvl-6\">随着任务的提交，会优先创建线程，直到线程个数等于最大线程数才会入队</li>\n<li class=\"lvl-6\">另外，提交任务时，如果正在处理的任务数小于线程池中的线程个数，那么也会直接入队，而不会去创建线程</li>\n</ul>\n</li>\n</ul>\n</div>\n","content_text":"摘要 本文介绍线程池 ThreadPoolExecutor 相关技术 本文基于jdk1.8 线程池介绍 线程池是一种用于管理和复用线程的机制，它可以有效地控制并发线程的数量，减少线程创建和销毁的开销，并提高应用程序的性能和资源利用率。 Java内置的线程池 FixedThreadPool（固定线程池）：该线程池包含固定数量的线程，提交的任务会在这些线程中执行。如果所有线程都正在忙于执行任务，新任务将会在任务队列中等待。 1234567// nThreads是线程池中线程的数量，核心线程数和最大线程数一样ExecutorService executor = Executors.newFixedThreadPool(int nThreads);// Executors中的newFixedThreadPool方法实现public static ExecutorService newFixedThreadPool(int nThreads) &#123; return new ThreadPoolExecutor(nThreads, nThreads,0L, TimeUnit.MILLISECONDS,new LinkedBlockingQueue&lt;Runnable&gt;());&#125; - 优点：具有固定数量的线程，可确保线程数始终保持在指定的数量上。适用于需要控制并发线程数的场景，可以避免线程数量过多导致系统资源耗尽。 - 缺点：任务队列无界限制，如果任务提交速度超过线程处理速度，可能导致队列积压过多任务，最终可能导致内存溢出。不适合处理大量长时间运行的任务。 CachedThreadPool（缓存线程池）：该线程池不固定线程数量，可以根据需要自动创建新线程，也会自动回收闲置的线程。适用于执行大量短期的任务。 1234567ExecutorService executor = Executors.newCachedThreadPool();// Executors中的newCachedThreadPool方法实现public static ExecutorService newCachedThreadPool() &#123; return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;());&#125; - 优点：线程数量不固定，根据任务的提交情况动态创建和回收线程。适用于短期、异步的任务处理，能够灵活调配线程资源。 - 缺点：由于线程数量不受限制，如果任务提交速度过快，可能导致创建过多的线程，进而消耗过多的系统资源，甚至导致系统崩溃。 SingleThreadExecutor（单线程池）：该线程池只包含一个线程，用于顺序执行任务。如果该线程因异常而终止，会创建一个新的线程来替代。 123456ExecutorService executor = Executors.newSingleThreadExecutor();// Executors中的newSingleThreadExecutor方法实现public static ExecutorService newSingleThreadExecutor() &#123; return new FinalizableDelegatedExecutorService(new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;()));&#125; - 优点：只有一个工作线程，保证任务按照指定顺序执行。适用于需要顺序执行任务的场景，例如需要按照任务的提交顺序进行处理。 - 缺点：由于只有一个线程，如果该线程因为异常而终止，线程池将会创建一个新线程代替，可能会带来额外的开销。不适合处理大量耗时的任务。 ScheduledThreadPool（调度线程池）：该线程池用于定时或周期性执行任务。可以指定任务的延迟时间或执行周期。 123456789101112// corePoolSize是线程池中核心线程的数量ScheduledExecutorService executor = Executors.newScheduledThreadPool(int corePoolSize);// // Executors中的newScheduledThreadPool方法实现public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) &#123; return new ScheduledThreadPoolExecutor(corePoolSize);&#125;// ScheduledThreadPoolExecutor是ThreadPoolExecutor的子类public ScheduledThreadPoolExecutor(int corePoolSize) &#123; super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, new DelayedWorkQueue());&#125; - 优点：用于定时或周期性执行任务，可以指定任务的延迟时间或执行周期。适用于需要定时执行任务的场景。 - 缺点：线程数量固定，如果任务过多或任务执行时间过长，可能会导致任务堆积，影响调度的准确性。 为什么不推荐使用这些内置线程池？ 任务队列没有限制：内置线程池的任务队列默认是无界的，如果任务提交速度过快，可能会导致队列积压过多任务，最终导致内存溢出或系统资源耗尽。 默认的线程拒绝策略：内置线程池的默认线程拒绝策略是抛出RejectedExecutionException，当任务提交超过线程池的处理能力时，会导致任务被拒绝执行。这可能会导致任务丢失或需要手动处理拒绝的任务。 配置限制有限：内置线程池提供了一些参数来配置线程池的行为，例如核心线程数、最大线程数、任务队列等。然而，这些参数可能不足以满足复杂的业务需求。对于更复杂的场景，可能需要更高级的线程池实现或手动创建自定义线程池。 缺乏监控和扩展功能：内置线程池的功能相对简单，缺乏对线程池的监控和扩展能力。在一些需要对线程池进行监控、统计或动态调整的场景下，内置线程池可能无法满足需求。 鉴于上述原因，对于复杂的应用程序和具有特定需求的场景，建议使用更高级的线程池实现，例如ThreadPoolExecutor类，它提供了更多的配置选项和灵活性，以满足各种需求。此外，还可以考虑使用第三方的线程池库，如Guava或Apache Commons等，它们提供了更多功能和扩展性。自定义线程池能够更好地适应特定的业务需求，并提供更好的控制和可扩展性。 ThreadPoolExecutor介绍 ThreadPoolExecutor是Java中的一个灵活且强大的线程池实现，它提供了很多配置选项，你可以将任务提交给线程池执行，并根据需要动态调整线程池的大小和配置。它是并发编程中常用的工具，适用于各种需要处理异步任务的场景，如服务器端应用程序、多线程数据处理和并行计算等。 ThreadPoolExecutor的一些关键特点： 1.线程池大小控制：你可以通过设置核心线程池大小（corePoolSize）和最大线程池大小（maximumPoolSize）来控制线程池中的线程数量。核心线程池大小是线程池中一直保持活动的线程数，而最大线程池大小是线程池中允许存在的最大线程数。 2.任务排队：ThreadPoolExecutor提供了多种任务排队策略，例如无界队列（Unbounded Queue）、有界队列（Bounded Queue）和同步移交（Synchronous Transfer）。你可以根据需要选择适合的任务排队策略，以控制任务的提交和执行。 3.线程生命周期管理：ThreadPoolExecutor负责管理线程的生命周期，包括线程的创建、执行任务和销毁。它会根据线程池的配置自动创建和回收线程，以及处理线程的异常和空闲状态。 4.拒绝策略：当线程池无法接受新的任务时，ThreadPoolExecutor提供了多种拒绝策略来处理这种情况。例如，你可以选择丢弃任务、抛出异常或在调用者线程中执行任务。 5.统计和监控：ThreadPoolExecutor提供了一些方法来获取线程池的状态和统计信息，比如活动线程数、已完成任务数、任务队列大小等。这些信息可以帮助你监控和调优线程池的性能。 ThreadPoolExecutor类的一些常用API 方法签名 描述 void execute(Runnable command) 提交一个Runnable任务给线程池执行 Future&lt;?&gt; submit(Runnable task) 提交一个Runnable任务给线程池执行，并返回一个表示任务结果的Future对象 Future&lt;T&gt; submit(Callable&lt;T&gt; task) 提交一个Callable任务给线程池执行，并返回一个表示任务结果的Future对象 void shutdown() 顺序关闭线程池，不再接受新的任务 List&lt;Runnable&gt; shutdownNow() 立即关闭线程池，并尝试终止所有正在执行的任务，返回的是尚未开始处理的任务列表，以及已经开始但尚未完成的任务列表。 boolean isShutdown() 判断线程池是否已经关闭 boolean isTerminated() 判断线程池是否已经终止，已经终止返回true boolean awaitTermination(long timeout, TimeUnit unit) 等待线程池终止，最多等待指定的时间 ，超时后仍未终止返回false void setCorePoolSize(int corePoolSize) 设置核心线程池大小 int getCorePoolSize() 获取核心线程池大小 void setMaximumPoolSize(int maximumPoolSize) 设置最大线程池大小 int getMaximumPoolSize() 获取最大线程池大小 void setKeepAliveTime(long time, TimeUnit unit) 设置非核心线程的空闲时间 long getKeepAliveTime(TimeUnit unit) 获取非核心线程的空闲时间 BlockingQueue&lt;Runnable&gt; getQueue() 获取任务队列 void setRejectedExecutionHandler(RejectedExecutionHandler handler) 设置拒绝策略 RejectedExecutionHandler getRejectedExecutionHandler() 获取拒绝策略 int getActiveCount() 获取活动线程数 long getCompletedTaskCount() 获取已完成的任务数 long getTaskCount() 获取总任务数 ThreadPoolExecutor的创建与配置 1234567891011121314151617int corePoolSize = 5; // 核心线程池大小int maxPoolSize = 10; // 最大线程池大小long keepAliveTime = 5000; // 非核心线程的空闲时间TimeUnit unit = TimeUnit.MILLISECONDS; // 空闲时间的单位// ThreadPoolExecutor使用任务队列来存储待执行的任务。你可以选择使用不同类型的BlockingQueue实现，比如LinkedBlockingQueue、ArrayBlockingQueue等。BlockingQueue&lt;Runnable&gt; taskQueue = new ArrayBlockingQueue&lt;&gt;(1000); // 任务队列// 实例化ThreadPoolExecutor类ThreadPoolExecutor executor = new ThreadPoolExecutor(corePoolSize, maxPoolSize, keepAliveTime, unit, taskQueue);// 设置拒绝策略，ThreadPoolExecutor提供了四种内置的拒绝策略:// 1.AbortPolicy，默认策略，即当线程池无法接受新任务时，会抛出RejectedExecutionException。// 2.CallerRunsPolicy，即当线程池无法接受新任务时，会在调用者线程中执行该任务。// 3.DiscardPolicy，即当线程池无法接受新任务时，新任务会被直接丢弃，不会抛出异常。// 4.DiscardOldestPolicy，会丢弃线程池中最早提交的一个任务，然后尝试重新提交被拒绝的任务。executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy()); ThreadPoolExecutor的调用 没有返回值 12// 通过调用execute()方法，将任务提交给ThreadPoolExecutor执行，这里的MyTask是实现了Runnable接口的自定义任务类。executor.execute(new MyTask()); 有返回值 123// 通过调用submit()方法，将任务提交给ThreadPoolExecutor执行，并返回了一个Future对象，用于获取任务的执行结果。// 这里的CallableTask是实现了Runnable接口或者Callable&lt;T&gt;接口的自定义任务类。Future&lt;String&gt; future = executor.submit(new CallableTask()); 需要注意的是，submit()方法可以接受不同类型的任务（Runnable或Callable），并返回一个Future对象。对于Runnable类型的任务，submit()方法返回的Future对象的get()方法将始终返回null。 执行流程图 提交一个Runnable时，不管当前线程池中的线程是否空闲，只要数量小于核心线程数就会创建新线程。 ThreadPoolExecutor是非公平的，比如队列满了之后提交的Runnable可能会比正在排队的Runnable先执行。 ThreadPoolExecutor的关闭 123456// 不再接受新的任务，但是正在处理的任务和队列中尚未处理的任务会继续执行完毕executor.shutdown();// 不再接受新的任务，也不再执行队列中的任务，并且会中断正在处理的任务// 线程池会尽力停止正在执行的任务，但无法保证任务会立即停止。因此，在调用shutdownNow()后，你可以通过检查返回的任务列表来获取所有尚未处理完成的任务，并根据需要进行处理。List&lt;Runnable&gt; list = executor.shutdownNow(); 调用shutdownNow()也并不意味着线程池立刻就关闭了，可以通过如下方式判断线程池是否已经终止 方法签名 描述 boolean isTerminated() 判断线程池是否已经终止，已经终止返回true boolean awaitTermination(long timeout, TimeUnit unit) 等待线程池终止，最多等待指定的时间 ，超时后仍未终止返回false ThreadPoolExecutor线程池的五种状态 RUNNING：会接收新任务并且会处理队列中的任务 SHUTDOWN：不会接收新任务并且会处理队列中的任务 STOP：不会接收新任务并且不会处理队列中的任务，并且会中断在处理的任务 TIDYING：所有任务都终止了，线程池中也没有线程了，这样线程池的状态就会转为TIDYING，一旦达到此状态，就会调用线程池的terminated() TERMINATED：terminated()执行完之后就会转变为TERMINATED 这五种状态并不能任意转换，只会有以下几种转换情况： RUNNING -&gt; SHUTDOWN：手动调用shutdown()触发，或者线程池对象GC时会调用finalize()从而调用shutdown() (RUNNING or SHUTDOWN) -&gt; STOP：调用shutdownNow()触发，如果先调shutdown()紧着调shutdownNow()，就会发生SHUTDOWN -&gt; STOP SHUTDOWN -&gt; TIDYING：队列为空并且线程池中没有线程时自动转换 STOP -&gt; TIDYING：线程池中没有线程时自动转换（队列中可能还有任务，但是永远不会被执行） TIDYING -&gt; TERMINATED：terminated()执行完后就会自动转换 线程池为什么一定得是阻塞队列？ 线程池中的线程在运行过程中，执行完创建线程时绑定的第一个任务后，就会不断的从队列中获取任务并执行，那么如果队列中没有任务了，线程为了不自然消亡，就会阻塞在获取队列任务时，等着队列中有任务过来就会拿到任务从而去执行任务。通过这种方法能最终确保，线程池中能保留指定个数的核心线程数。 线程发生异常，会被移出线程池吗？ 会。但为了保证维持住固定的核心线程数，会再创建一个新的线程。 单个任务的异常情况，不会直接影响线程池中的其他线程，线程池会继续执行其他任务，除非遇到无法处理的异常，例如线程池被关闭或发生了无法恢复的错误。 然而，如果某个任务的异常没有被正确处理，可能会导致整个线程池无法正常工作。例如，如果异常被忽略或没有适当的错误日志记录，可能会导致问题的隐患积累或任务无法正确完成。 因此，在使用线程池时，建议为任务提供适当的异常处理逻辑，以确保及时捕获和处理异常，以及记录错误信息。这有助于提高线程池的可靠性和稳定性。 也可以为线程池配置全局异常处理逻辑，如果线程执行过程中发生了未捕获的异常，可以通过下面的方式处理异常： 123456789ThreadPoolExecutor executor = new ThreadPoolExecutor(10, 500, 30, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;&gt;(200));ThreadFactory threadFactory = runnable -&gt; &#123; Thread t = new Thread(runnable); t.setUncaughtExceptionHandler((thread, error) -&gt; System.out.println(thread.getName() + &quot;:错误信息:&quot; + error.getMessage())); return t;&#125;;executor.setThreadFactory(threadFactory); 线程池的核心线程数、最大线程数该如何设置？ 线程池中的核心线程数计算方法： 名词解释 CPU核心数[逻辑核] = Runtime.getRuntime().availableProcessors(); 线程等待时间[阻塞时间]：指的就是线程没有使用CPU的时间，比如阻塞在了IO 线程运行总时间：指的是线程执行完某个任务的总时间 阻塞系数 = 线程等待时间[阻塞时间] / 线程运行总时间 PS: 可以在压测时使用JVM提供的jvisualvm得到对应线程运行的总时间和总时间(CPU)，通过计算得到： 线程等待时间 = 总时间 - 总时间(CPU) 线程运行总时间 = 总时间 1.计算密集型：内存运算，尽可能避免发生线程上下文切换 核心线程数 = CPU核心数 + 1 2.IO密集型：一般文件读写、数据库读写、网络接口调用等都属于IO密集型 方法1： - 核心线程数 = CPU核心数 * (1 + 阻塞系数) - 该方法下，通常设置为 CPU核心数 * 2，所以: 4C服务器，线程数为8个左右 方法2 [推荐]： - 核心线程数 = CPU核心数 / (1 - 阻塞系数) - 该方法下，经验上一般阻塞系数取值为0.8~0.9，所以: 4C服务器，线程数为20 ~ 40个为宜 PS: 经验上来讲，方法2更为准确，但以上只是理论，实际工作中情况会更复杂，比如一个应用中，可能有多个线程池，除开线程池中的线程可能还有很多其他线程，或者除开这个应用还是一些其他应用也在运行，所以实际工作中如果要确定准确的线程数，最好是压测。 总结 CPU密集型任务：CPU核心数+1，这样既能充分利用CPU，也不至于有太多的上下文切换成本 IO密集型任务：建议压测，或者先用公式计算出一个理论值（理论值通常都比较小） 对于核心业务（访问频率高），可以把核心线程数设置为我们压测出来的结果，最大线程数可以等于核心线程数，或者大一点点，比如我们压测时可能会发现500个线程最佳，但是600个线程时也还行，此时600就可以为最大线程数 对于非核心业务（访问频率不高），核心线程数可以比较小，避免操作系统去维护不必要的线程，最大线程数可以设置为我们计算或压测出来的结果。 小贴士 Tomcat中的线程池ThreadPoolExecutor Tomcat中有一个与JUC包下同名的ThreadPoolExecutor，即org.apache.tomcat.util.threads.ThreadPoolExecutor，它扩展了Java标准库中的java.util.concurrent.ThreadPoolExecutor，具有一些特定的功能和行为： 入队时，如果线程池的线程个数等于最大线程池数才入队，如果线程池的线程个数小于最大线程池数，会返回false，表示入队失败 提交任务时，会先判断线程个数是否小于核心线程数，如果小于则创建线程，如果等于核心线程数，会入队，但是线程个数小于最大线程数会入队失败，从而会去创建线程 随着任务的提交，会优先创建线程，直到线程个数等于最大线程数才会入队 另外，提交任务时，如果正在处理的任务数小于线程池中的线程个数，那么也会直接入队，而不会去创建线程","summary":"摘要 本文介绍线程池 ThreadPoolExecutor 相关技术 本文基于jdk1.8","date_published":"2023-05-25T15:34:05.000Z","tags":["技术","java","java多线程","java"]},{"id":"https://blog.hanqunfeng.com/2023/05/25/java-concurrency10-BlockingQueue/","url":"https://blog.hanqunfeng.com/2023/05/25/java-concurrency10-BlockingQueue/","title":"Java并发编程--BlockingQueue","content_html":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"f6d7b54603bea4e66ca7bcbe400d35e330bc18c7dd479491902bc306e2a09346\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">你好, 请输入密码。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","content_text":" 你好, 请输入密码。","summary":"本文介绍并发容器BlockingQueue相关技术","date_published":"2023-05-25T14:34:05.000Z","tags":["技术","java","java多线程","java"]},{"id":"https://blog.hanqunfeng.com/2023/05/24/java-concurrency09-container/","url":"https://blog.hanqunfeng.com/2023/05/24/java-concurrency09-container/","title":"Java并发编程--JUC并发容器","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍并发容器相关技术</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>jdk1.8</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"并发容器\">并发容器</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Java的集合容器框架中，主要有四大类别：<code>List</code>、<code>Set</code>、<code>Queue</code>、<code>Map</code>，大家熟知的这些集合类<code>ArrayList</code>、<code>LinkedList</code>、<code>HashMap</code>等这些容器都是非线程安全的。</p>\n</li>\n<li class=\"lvl-2\">\n<p>为了保证线程安全，所以java提供了<code>同步容器</code>，可以简单地理解为通过<code>synchronized</code>来实现同步的容器，比如<code>Vector</code>、<code>Hashtable</code>以及<code>SynchronizedList</code>等容器，这样做的代价是削弱了并发性，当多个线程共同竞争容器级的锁时，吞吐量就会降低。</p>\n</li>\n<li class=\"lvl-2\">\n<p>因此为了解决同步容器的性能问题，所以才有了<code>并发容器</code>，<code>java.util.concurrent</code>包中提供了多种并发类容器：<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/Y7os2P.jpg\" alt=\"\" width=\"600\" height=\"600\"></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>并发容器</th>\n<th>对应的非并发容器</th>\n<th>代替的同步容器</th>\n<th>实现原理</th>\n<th>应用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CopyOnWriteArrayList</td>\n<td>ArrayList</td>\n<td>Vector、synchronizedList</td>\n<td>CopyOnWriteArrayList 内部使用了一种称为“写时复制”的机制。当需要进行写操作时，它会创建一个新的数组，并将原始数组的内容复制到新数组中，然后进行写操作。一旦修改完成，新的副本会替代原始数组，成为新的数据源。<br>因此，读操作不会被写操作阻塞，读操作返回的结果可能不是最新的，但是对于许多应用场景来说，这是可以接受的。此外，由于读操作不需要加锁，因此它可以支持更高的并发度。<br><span style=\"color:red;\">需要注意的是，虽然副本会替代原始数组，但是这个替代并不是立即发生的。在修改操作期间，读操作仍然可能会访问原始数组。只有当修改完成后，才会将新的副本设置为源数组。</span></td>\n<td>1. 读多写少的场景由于 CopyOnWriteArrayList 的读操作不需要加锁，因此它非常适合在读多写少的场景中使用。例如，一个读取频率比写入频率高得多的缓存，使用 CopyOnWriteArrayList 可以提高读取性能，并减少锁竞争的开销。<br>2. 不需要实时更新的数据由于 CopyOnWriteArrayList 读取的数据可能不是最新的，因此它适合于不需要实时更新的数据。例如，在日志应用中，为了保证应用的性能，日志记录的操作可能被缓冲，并不是实时写入文件系统，而是在某个时刻批量写入。这种情况下，使用 CopyOnWriteArrayList 可以避免多个线程之间的竞争，提高应用的性能。<br><span style=\"color:red;\">注意：由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致 young gc 或者full gc，谨慎使用</span></td>\n</tr>\n<tr>\n<td>CopyOnWriteArraySet</td>\n<td>HashSet</td>\n<td>synchronizedSet</td>\n<td>基于CopyOnWriteArrayList实现，其唯一的不同是在add时调用的是CopyOnWriteArrayList的addIfAbsent方法，其遍历当前Object数组，如Object数组中已有了当前元素，则直接返回，如果没有则放入Object数组的尾部，并返回。</td>\n<td>同CopyOnWriteArrayList</td>\n</tr>\n<tr>\n<td>ConcurrentHashMap</td>\n<td>HashMap</td>\n<td>Hashtable、synchronizedMap</td>\n<td>在JDK1.8之前，ConcurrentHashMap使用分段锁以在保证线程安全的同时获得更大的效率。<br>JDK1.8开始舍弃了分段锁，使用自旋+CAS+synchronized关键字来实现同步。<br>这样做的好处：<br>1.节省内存空间 ，分段锁需要更多的内存空间，而大多数情况下，并发粒度达不到设置的粒度，竞争概率较小，反而导致更新的长时间等待（因为锁定一段后整个段就无法更新了）<br>2.提高GC效率。</td>\n<td>1.共享数据的线程安全：在多线程编程中，如果需要进行共享数据的读写，可以使用 ConcurrentHashMap 保证线程安全。<br>2. 缓存：ConcurrentHashMap 的高并发性能和线程安全能力，使其成为一种很好的缓存实现方案。在多线程环境下，使用 ConcurrentHashMap 作为缓存的数据结构，能够提高程序的并发性能，同时保证数据的一致性。</td>\n</tr>\n<tr>\n<td>ConcurrentSkipListMap</td>\n<td>TreeMap</td>\n<td>synchronizedSortedMap(TreeMap)</td>\n<td>基于Skip list（跳表）实现的有序映射（Map）数据结构，是一种可以代替平衡树的数据结构，默认是按照Key值升序的。</td>\n<td>ConcurrentSkipListMap适用于需要高并发性能、支持有序性和区间查询的场景，能够有效地提高系统的性能和可扩展性。</td>\n</tr>\n<tr>\n<td>ConcurrentLinkedQueue</td>\n<td>LinkedList</td>\n<td>LinkedBlockingQueue</td>\n<td>ConcurrentLinkedQueue 基于无锁算法和乐观并发策略，旨在提供高效的并发操作。它使用一个单向链表数据结构来存储元素，并且保持了先进先出（FIFO）的顺序。<br>ConcurrentLinkedQueue 是一个无界队列，它没有固定的容量限制。可以根据需要动态地增长或缩小链表的长度。<br><span style=\"color:red;\">需要注意的是，ConcurrentLinkedQueue 并不适合在迭代过程中进行修改操作，因为它的结构在并发情况下可能会发生变化。</span></td>\n<td>1.高并发环境：ConcurrentLinkedQueue 适用于需要高并发性能和线程安全的场景。由于它采用无锁算法和乐观并发策略，可以在高并发环境下提供较高的吞吐量。<br>2.生产者-消费者模式：ConcurrentLinkedQueue 在实现生产者-消费者模式时非常有用。生产者线程可以将元素添加到队列的尾部，而消费者线程可以从队列的头部获取元素，实现了解耦和并发处理。<br>3.任务调度：ConcurrentLinkedQueue 可以作为任务调度的数据结构，用于存储待执行的任务。多个线程可以从队列中获取任务并执行，从而实现任务的并发处理。</td>\n</tr>\n<tr>\n<td>ConcurrentLinkedDeque</td>\n<td>LinkedList</td>\n<td>无</td>\n<td>与ConcurrentLinkedQueue 相比 ConcurrentLinkedDeque 是基于双向链表实现的并发双端队列。它支持在队头和队尾进行插入和移除操作，保持了元素的先进先出顺序。</td>\n<td>ConcurrentLinkedDeque 适用于需要双端操作的并发场景，例如生产者-消费者模式中的多线程同时插入和移除元素的场景。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CopyOnWriteArrayList\">CopyOnWriteArrayList</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int size()</code></td>\n<td>返回列表中的元素数量。</td>\n</tr>\n<tr>\n<td><code>boolean isEmpty()</code></td>\n<td>检查列表是否为空。</td>\n</tr>\n<tr>\n<td><code>boolean contains(Object o)</code></td>\n<td>检查列表是否包含指定元素。</td>\n</tr>\n<tr>\n<td><code>Iterator&lt;E&gt; iterator()</code></td>\n<td>返回一个迭代器，用于遍历列表中的元素。</td>\n</tr>\n<tr>\n<td><code>boolean add(E e)</code></td>\n<td>将元素添加到列表末尾。</td>\n</tr>\n<tr>\n<td><code>boolean remove(Object o)</code></td>\n<td>从列表中移除指定元素的第一个匹配项。</td>\n</tr>\n<tr>\n<td><code>boolean containsAll(Collection&lt;?&gt; c)</code></td>\n<td>检查列表是否包含指定集合中的所有元素。</td>\n</tr>\n<tr>\n<td><code>boolean addAll(Collection&lt;? extends E&gt; c)</code></td>\n<td>将指定集合中的所有元素添加到列表末尾。</td>\n</tr>\n<tr>\n<td><code>boolean addAll(int index, Collection&lt;? extends E&gt; c)</code></td>\n<td>将指定集合中的所有元素插入到列表的指定位置。</td>\n</tr>\n<tr>\n<td><code>boolean removeAll(Collection&lt;?&gt; c)</code></td>\n<td>移除列表中与指定集合中的元素相匹配的所有元素。</td>\n</tr>\n<tr>\n<td><code>boolean retainAll(Collection&lt;?&gt; c)</code></td>\n<td>仅保留列表中与指定集合中的元素相匹配的元素，移除其他元素。</td>\n</tr>\n<tr>\n<td><code>void clear()</code></td>\n<td>清空列表中的所有元素。</td>\n</tr>\n<tr>\n<td><code>E get(int index)</code></td>\n<td>返回列表中指定位置的元素。</td>\n</tr>\n<tr>\n<td><code>E set(int index, E element)</code></td>\n<td>用指定元素替换列表中指定位置的元素，并返回原来的元素。</td>\n</tr>\n<tr>\n<td><code>void add(int index, E element)</code></td>\n<td>在列表的指定位置插入指定元素。</td>\n</tr>\n<tr>\n<td><code>E remove(int index)</code></td>\n<td>移除列表中指定位置的元素，并返回被移除的元素。</td>\n</tr>\n<tr>\n<td><code>int indexOf(Object o)</code></td>\n<td>返回指定元素在列表中首次出现的位置索引，如果不存在，则返回 -1。</td>\n</tr>\n<tr>\n<td><code>int lastIndexOf(Object o)</code></td>\n<td>返回指定元素在列表中最后一次出现的位置索引，如果不存在，则返回 -1。</td>\n</tr>\n</tbody>\n</table>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<h2 id=\"迭代器的-fail-fast-与-fail-safe-机制\">迭代器的 fail-fast 与 fail-safe 机制</h2>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">在 Java 中，迭代器（Iterator）在迭代的过程中，如果底层的集合被修改（添加或删除元素），不同的迭代器对此的表现行为是不一样的，可分为两类：Fail-Fast（快速失败）和 Fail-Safe（安全失败）。</li>\n</ul>\n<h3 id=\"fail-fast-机制\">fail-fast 机制</h3>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生 fail-fast 事件。例如：当某一个线程A通过 iterator 去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，产生 fail-fast 事件。</li>\n<li class=\"lvl-2\">在 java.util 包中的集合，如 ArrayList、HashMap 等，它们的迭代器默认都是采用 Fail-Fast 机制。</li>\n<li class=\"lvl-2\">fail-fast解决方案\n<ul class=\"lvl-3\">\n<li class=\"lvl-6\">方案一：在遍历过程中所有涉及到改变modCount 值的地方全部加上synchronized 或者直接使用Collection#synchronizedList，这样就可以解决问题，但是不推荐，因为增删造成的同步锁可能会阻塞遍历操作。</li>\n<li class=\"lvl-6\">方案二：使用CopyOnWriteArrayList 替换 ArrayList，推荐使用该方案（即fail-safe）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"fail-safe机制\">fail-safe机制</h3>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">任何对集合结构的修改都会在一个复制的集合上进行，因此不会抛出ConcurrentModificationException。在 java.util.concurrent 包中的集合，如CopyOnWriteArrayList、ConcurrentHashMap 等，它们的迭代器一般都是采用 Fail-Safe 机制。</li>\n<li class=\"lvl-2\">缺点：\n<ul class=\"lvl-3\">\n<li class=\"lvl-6\">采用 Fail-Safe 机制的集合类都是线程安全的，但是它们无法保证数据的实时一致性，它们只能保证数据的最终一致性。在迭代过程中，如果集合被修改了，可能读取到的仍然是旧的数据。</li>\n<li class=\"lvl-6\">Fail-Safe 机制还存在另外一个问题，就是内存占用。由于这类集合一般都是通过复制来实现读写分离的，因此它们会创建出更多的对象，导致占用更多的内存，甚至可能引起频繁的垃圾回收，严重影响性能</li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"CopyOnWriteArraySet\">CopyOnWriteArraySet</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int size()</code></td>\n<td>返回集合中的元素数量。</td>\n</tr>\n<tr>\n<td><code>boolean isEmpty()</code></td>\n<td>检查集合是否为空。</td>\n</tr>\n<tr>\n<td><code>boolean contains(Object o)</code></td>\n<td>检查集合是否包含指定的元素。</td>\n</tr>\n<tr>\n<td><code>boolean add(E e)</code></td>\n<td>将指定元素添加到集合中。</td>\n</tr>\n<tr>\n<td><code>boolean remove(Object o)</code></td>\n<td>从集合中移除指定元素。</td>\n</tr>\n<tr>\n<td><code>void clear()</code></td>\n<td>清空集合中的所有元素。</td>\n</tr>\n<tr>\n<td><code>Iterator&lt;E&gt; iterator()</code></td>\n<td>返回在集合上进行迭代的迭代器。</td>\n</tr>\n<tr>\n<td><code>boolean containsAll(Collection&lt;?&gt; c)</code></td>\n<td>检查集合是否包含指定集合中的所有元素。</td>\n</tr>\n<tr>\n<td><code>boolean addAll(Collection&lt;? extends E&gt; c)</code></td>\n<td>将指定集合中的所有元素添加到集合中。</td>\n</tr>\n<tr>\n<td><code>boolean removeAll(Collection&lt;?&gt; c)</code></td>\n<td>从集合中移除指定集合中包含的所有元素。</td>\n</tr>\n<tr>\n<td><code>boolean retainAll(Collection&lt;?&gt; c)</code></td>\n<td>仅保留集合中包含在指定集合中的元素，移除其他元素。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"CopyOnWriteArraySet与CopyOnWriteArrayList的区别\">CopyOnWriteArraySet与CopyOnWriteArrayList的区别</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>数据结构类型：CopyOnWriteArraySet 是一个基于数组的集合，而 CopyOnWriteArrayList 是一个基于数组的列表。</p>\n</li>\n<li class=\"lvl-2\">\n<p>元素的唯一性：CopyOnWriteArraySet 保证集合中的元素是唯一的，不允许重复元素的存在。而 CopyOnWriteArrayList 允许列表中存在重复元素。</p>\n</li>\n<li class=\"lvl-2\">\n<p>集合与列表的特性：CopyOnWriteArraySet 实现了 Set 接口，它是一个无序的集合，不保留插入顺序。CopyOnWriteArrayList 实现了 List 接口，它是一个有序的列表，保留插入顺序。</p>\n</li>\n</ul>\n<h3 id=\"代码示例\">代码示例</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 CopyOnWriteArraySet 实例</span></span><br><span class=\"line\">CopyOnWriteArraySet&lt;String&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加元素</span></span><br><span class=\"line\">set.add(<span class=\"string\">&quot;Apple&quot;</span>);</span><br><span class=\"line\">set.add(<span class=\"string\">&quot;Banana&quot;</span>);</span><br><span class=\"line\">set.add(<span class=\"string\">&quot;Orange&quot;</span>);</span><br><span class=\"line\">set.add(<span class=\"string\">&quot;Grapes&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印集合元素，可能得到的输出：[Apple, Banana, Grapes, Orange]</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;集合元素: &quot;</span> + set);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 CopyOnWriteArrayList 实例</span></span><br><span class=\"line\">CopyOnWriteArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加元素</span></span><br><span class=\"line\">list.add(<span class=\"string\">&quot;Apple&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;Banana&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;Orange&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;Grapes&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印列表元素，得到的输出：[Apple, Banana, Orange, Grapes]</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;列表元素: &quot;</span> + list);</span><br></pre></td></tr></table></figure>\n<h2 id=\"ConcurrentHashMap\">ConcurrentHashMap</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int size()</code></td>\n<td>返回映射中的键值对数量。</td>\n</tr>\n<tr>\n<td><code>boolean isEmpty()</code></td>\n<td>检查映射是否为空。</td>\n</tr>\n<tr>\n<td><code>boolean containsKey(Object key)</code></td>\n<td>检查映射是否包含指定的键。</td>\n</tr>\n<tr>\n<td><code>boolean containsValue(Object value)</code></td>\n<td>检查映射是否包含指定的值。</td>\n</tr>\n<tr>\n<td><code>V get(Object key)</code></td>\n<td>获取与指定键关联的值。</td>\n</tr>\n<tr>\n<td><code>V put(K key, V value)</code></td>\n<td>将指定的键值对添加到映射中。</td>\n</tr>\n<tr>\n<td><code>V remove(Object key)</code></td>\n<td>从映射中移除指定键的映射关系，并返回对应的值。</td>\n</tr>\n<tr>\n<td><code>void clear()</code></td>\n<td>清空映射中的所有键值对。</td>\n</tr>\n<tr>\n<td><code>Set&lt;K&gt; keySet()</code></td>\n<td>返回映射中所有键的集合。</td>\n</tr>\n<tr>\n<td><code>Collection&lt;V&gt; values()</code></td>\n<td>返回映射中所有值的集合。</td>\n</tr>\n<tr>\n<td><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code></td>\n<td>返回映射中所有键值对的集合。</td>\n</tr>\n<tr>\n<td><code>V putIfAbsent(K key, V value)</code></td>\n<td>当指定的键尚未映射到值时，将指定的键值对添加到映射中。</td>\n</tr>\n<tr>\n<td><code>boolean remove(Object key, Object value)</code></td>\n<td>从映射中移除指定键值对。</td>\n</tr>\n<tr>\n<td><code>boolean replace(K key, V oldValue, V newValue)</code></td>\n<td>用新的值替换指定键的旧值，仅当当前值与指定的旧值相等时才替换。</td>\n</tr>\n<tr>\n<td><code>V replace(K key, V value)</code></td>\n<td>用指定值替换指定键的值。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"JDK1-7-中的ConcurrentHashMap\">JDK1.7 中的ConcurrentHashMap</h3>\n<p>在jdk1.7及其以下的版本中，结构是用Segments数组 + HashEntry数组 + 链表实现的</p>\n<h3 id=\"JDK1-8中的ConcurrentHashMap\">JDK1.8中的ConcurrentHashMap</h3>\n<p>jdk1.8抛弃了Segments分段锁的方案，而是改用了和HashMap一样的结构操作，也就是数组 + 链表+ 红黑树结构，比jdk1.7中的ConcurrentHashMap提高了效率，在并发方面，使用了<code>cas +synchronized</code>的方式保证数据的一致性</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>链表转化为红黑树需要满足2个条件:</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">1.链表的节点数量大于等于树化阈值8</li>\n<li class=\"lvl-6\">2.Node数组的长度大于等于最小树化容量值64</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码示例-2\">代码示例</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConcurrentHashMapExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建 ConcurrentHashMap 实例</span></span><br><span class=\"line\">        ConcurrentHashMap&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加键值对</span></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;Apple&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;Orange&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;Grapes&quot;</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打印映射内容，映射内容: &#123;Banana=1, Grapes=4, Orange=2, Apple=3&#125;</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;映射内容: &quot;</span> + map);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取键值对数量</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;键值对数量: &quot;</span> + map.size());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查是否包含指定键</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;是否包含键 &#x27;Orange&#x27;: &quot;</span> + map.containsKey(<span class=\"string\">&quot;Orange&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取指定键对应的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;键 &#x27;Apple&#x27; 对应的值: &quot;</span> + map.get(<span class=\"string\">&quot;Apple&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 移除指定键的映射关系</span></span><br><span class=\"line\">        map.remove(<span class=\"string\">&quot;Banana&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打印映射内容</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;移除键 &#x27;Banana&#x27; 后的映射内容: &quot;</span> + map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ConcurrentSkipListMap\">ConcurrentSkipListMap</h2>\n<h3 id=\"ConcurrentSkipListMap-和-ConcurrentHashMap-是-Java-中用于并发访问的映射数据结构，它们之间有一些区别\">ConcurrentSkipListMap 和 ConcurrentHashMap 是 Java 中用于并发访问的映射数据结构，它们之间有一些区别</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>数据结构：ConcurrentSkipListMap 是基于跳表（Skip List）的数据结构实现，而 ConcurrentHashMap 是基于<code>数组 + 链表+ 红黑树</code>的数据结构实现。</p>\n</li>\n<li class=\"lvl-2\">\n<p>排序性：ConcurrentSkipListMap 是有序映射，按照键的自然顺序或自定义的比较器对键进行排序。而 ConcurrentHashMap 是无序映射，不保证键值对的顺序。</p>\n</li>\n<li class=\"lvl-2\">\n<p>并发访问性能：在高度并发的情况下，ConcurrentSkipListMap 在读取方面的性能较好，因为它支持并发读取操作，并且有序结构使得读取更高效。而 ConcurrentHashMap 在写入方面的性能较好，因为它使用<code>cas +synchronized</code>来支持并发写入操作。</p>\n</li>\n<li class=\"lvl-2\">\n<p>内存占用：通常情况下，ConcurrentSkipListMap 的内存占用比 ConcurrentHashMap 更高，因为它需要额外的存储空间来维护跳表结构。</p>\n</li>\n<li class=\"lvl-2\">\n<p>功能特性：由于有序性的特点，ConcurrentSkipListMap 提供了一些与顺序相关的方法，如 <code>firstKey()</code>、<code>lastKey()</code>、<code>subMap()</code> 等。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>K firstKey()</code></td>\n<td>返回映射中的第一个键。</td>\n</tr>\n<tr>\n<td><code>K lastKey()</code></td>\n<td>返回映射中的最后一个键。</td>\n</tr>\n<tr>\n<td><code>ConcurrentNavigableMap&lt;K, V&gt; subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)</code></td>\n<td>返回一个视图，该视图包含映射中键的子范围。</td>\n</tr>\n<tr>\n<td><code>ConcurrentNavigableMap&lt;K, V&gt; headMap(K toKey, boolean inclusive)</code></td>\n<td>返回一个视图，该视图包含映射中小于（或小于等于）给定键的部分。</td>\n</tr>\n<tr>\n<td><code>ConcurrentNavigableMap&lt;K, V&gt; tailMap(K fromKey, boolean inclusive)</code></td>\n<td>返回一个视图，该视图包含映射中大于（或大于等于）给定键的部分。</td>\n</tr>\n<tr>\n<td><code>ConcurrentNavigableMap&lt;K, V&gt; descendingMap()</code></td>\n<td>返回与此映射相反的顺序的视图。</td>\n</tr>\n<tr>\n<td><code>ConcurrentNavigableSet&lt;K&gt; navigableKeySet()</code></td>\n<td>返回包含映射中所有键的并发可导航集合。</td>\n</tr>\n<tr>\n<td><code>ConcurrentNavigableSet&lt;K&gt; descendingKeySet()</code></td>\n<td>返回与此映射中的键相反顺序对应的并发可导航集合。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码示例-3\">代码示例</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentSkipListMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConcurrentSkipListMapExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建 ConcurrentSkipListMap 实例</span></span><br><span class=\"line\">        ConcurrentSkipListMap&lt;Integer, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentSkipListMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加键值对</span></span><br><span class=\"line\">        map.put(<span class=\"number\">3</span>, <span class=\"string\">&quot;Apple&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"number\">1</span>, <span class=\"string\">&quot;Banana&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"number\">2</span>, <span class=\"string\">&quot;Orange&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"number\">4</span>, <span class=\"string\">&quot;Grapes&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打印映射内容，映射内容: &#123;1=Banana, 2=Orange, 3=Apple, 4=Grapes&#125;</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;映射内容: &quot;</span> + map);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取键值对数量</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;键值对数量: &quot;</span> + map.size());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查是否包含指定键</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;是否包含键 2: &quot;</span> + map.containsKey(<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取指定键对应的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;键 3 对应的值: &quot;</span> + map.get(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 移除指定键的映射关系</span></span><br><span class=\"line\">        map.remove(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打印映射内容</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;移除键 1 后的映射内容: &quot;</span> + map);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取最小的键</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小的键: &quot;</span> + map.firstKey());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取最大的键</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大的键: &quot;</span> + map.lastKey());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取键小于等于 3 的子映射</span></span><br><span class=\"line\">        ConcurrentSkipListMap&lt;Integer, String&gt; subMap = map.headMap(<span class=\"number\">3</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;键小于等于 3 的子映射: &quot;</span> + subMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<h2 id=\"跳表\">跳表</h2>\n<p>跳表（Skip List）是一种用于实现有序集合的数据结构，它的设计灵感来自于平衡树。跳表通过使用多层链表结构，每一层链表按照升序排列，并且每一层链表都是前一层链表的子集。这样的结构允许在搜索、插入和删除元素时具有较高的效率。</p>\n<p>跳表的核心思想是通过建立索引层来加快搜索的速度。最底层是原始链表，每个节点都包含一个元素。而上层的链表是通过原始链表中的一部分节点创建的。在每一层中，节点以一定的概率被提升到更高层，从而形成了跨越多个层级的链接。</p>\n<p>跳表的主要优点是在具有合理的设计和维护下，可以在平均情况下以 O(log n) 的时间复杂度执行搜索、插入和删除操作。这是因为每一层的节点数量是下一层的节点数量的一半，从而形成了一种对数级别的分布。</p>\n<p>以下是跳表的主要操作：</p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>搜索：从顶层开始，沿着每一层的链表进行比较，如果目标元素大于当前节点的值，则在当前层继续向右移动；如果目标元素小于当前节点的值，则退回到下一层继续比较。直到找到目标元素或者无法再继续向右或下移动。</p>\n</li>\n<li class=\"lvl-2\">\n<p>插入：通过搜索找到插入位置后，在每一层链表中插入新节点，并更新相应的索引层。</p>\n</li>\n<li class=\"lvl-2\">\n<p>删除：通过搜索找到要删除的节点位置后，在每一层链表中删除节点，并更新相应的索引层。</p>\n</li>\n</ul>\n<p>跳表的实现相对简单，它提供了在有序集合中进行快速搜索和更新的高效方式。然而，它的空间复杂度相对于平衡树较高，因为需要维护额外的索引层。跳表在并发环境下也需要考虑同步的问题，以确保数据的一致性和线程安全性。</p>\n<p>总结而言，跳表通过建立多层索引结构，在有序集合中实现了较快的搜索、插入和删除操作。它是一种简单而高效的数据结构，在一些场景中可以作为替代平衡树的选择。<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/Mffk0p.png\" alt=\"\" width=\"600\" height=\"400\"></p>\n</div>\n<h2 id=\"ConcurrentLinkedQueue\">ConcurrentLinkedQueue</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean add(E e)</code></td>\n<td>将指定元素添加到队列的尾部。</td>\n</tr>\n<tr>\n<td><code>boolean offer(E e)</code></td>\n<td>将指定元素添加到队列的尾部。</td>\n</tr>\n<tr>\n<td><code>E poll()</code></td>\n<td>获取并移除队列的头部元素。</td>\n</tr>\n<tr>\n<td><code>E peek()</code></td>\n<td>获取队列的头部元素，但不移除。</td>\n</tr>\n<tr>\n<td><code>int size()</code></td>\n<td>返回队列中的元素数量。</td>\n</tr>\n<tr>\n<td><code>boolean isEmpty()</code></td>\n<td>检查队列是否为空。</td>\n</tr>\n<tr>\n<td><code>boolean contains(Object o)</code></td>\n<td>检查队列是否包含指定元素。</td>\n</tr>\n<tr>\n<td><code>boolean remove(Object o)</code></td>\n<td>从队列中移除指定元素的第一个匹配项。</td>\n</tr>\n<tr>\n<td><code>void clear()</code></td>\n<td>移除队列中的所有元素。</td>\n</tr>\n<tr>\n<td><code>boolean containsAll(Collection&lt;?&gt; c)</code></td>\n<td>检查队列是否包含指定集合中的所有元素。</td>\n</tr>\n<tr>\n<td><code>boolean addAll(Collection&lt;? extends E&gt; c)</code></td>\n<td>将指定集合中的所有元素添加到队列的尾部。</td>\n</tr>\n<tr>\n<td><code>boolean removeAll(Collection&lt;?&gt; c)</code></td>\n<td>从队列中移除包含在指定集合中的所有元素。</td>\n</tr>\n<tr>\n<td><code>boolean retainAll(Collection&lt;?&gt; c)</code></td>\n<td>仅保留队列中包含在指定集合中的元素，移除其他元素。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码示例-4\">代码示例</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConcurrentLinkedQueueExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建 ConcurrentLinkedQueue 实例</span></span><br><span class=\"line\">        ConcurrentLinkedQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentLinkedQueue</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加元素到队列</span></span><br><span class=\"line\">        queue.add(<span class=\"string\">&quot;Apple&quot;</span>);</span><br><span class=\"line\">        queue.add(<span class=\"string\">&quot;Banana&quot;</span>);</span><br><span class=\"line\">        queue.add(<span class=\"string\">&quot;Orange&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取队列元素数量</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;队列元素数量: &quot;</span> + queue.size());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查队列是否为空</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;队列是否为空: &quot;</span> + queue.isEmpty());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取并移除队列头部元素</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> queue.poll();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;移除的队列头部元素: &quot;</span> + head);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取队列头部元素</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">newHead</span> <span class=\"operator\">=</span> queue.peek();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;新的队列头部元素: &quot;</span> + newHead);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打印队列元素</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;队列元素: &quot;</span> + queue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ConcurrentLinkedDeque\">ConcurrentLinkedDeque</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void addFirst(E e)</code></td>\n<td>将指定元素插入到双端队列的开头。</td>\n</tr>\n<tr>\n<td><code>void addLast(E e)</code></td>\n<td>将指定元素插入到双端队列的末尾。</td>\n</tr>\n<tr>\n<td><code>boolean offerFirst(E e)</code></td>\n<td>将指定元素插入到双端队列的开头。如果成功则返回 <code>true</code>，否则返回 <code>false</code>。</td>\n</tr>\n<tr>\n<td><code>boolean offerLast(E e)</code></td>\n<td>将指定元素插入到双端队列的末尾。如果成功则返回 <code>true</code>，否则返回 <code>false</code>。</td>\n</tr>\n<tr>\n<td><code>E pollFirst()</code></td>\n<td>获取并移除双端队列的开头元素。</td>\n</tr>\n<tr>\n<td><code>E pollLast()</code></td>\n<td>获取并移除双端队列的末尾元素。</td>\n</tr>\n<tr>\n<td><code>E peekFirst()</code></td>\n<td>获取双端队列的开头元素，但不移除。</td>\n</tr>\n<tr>\n<td><code>E peekLast()</code></td>\n<td>获取双端队列的末尾元素，但不移除。</td>\n</tr>\n<tr>\n<td><code>boolean removeFirstOccurrence(Object o)</code></td>\n<td>从双端队列中移除首次出现的指定元素。</td>\n</tr>\n<tr>\n<td><code>boolean removeLastOccurrence(Object o)</code></td>\n<td>从双端队列中移除最后一次出现的指定元素。</td>\n</tr>\n<tr>\n<td><code>void push(E e)</code></td>\n<td>将元素推入双端队列的开头。</td>\n</tr>\n<tr>\n<td><code>E pop()</code></td>\n<td>从双端队列的开头弹出一个元素。</td>\n</tr>\n<tr>\n<td><code>boolean remove(Object o)</code></td>\n<td>从双端队列中移除指定元素的第一个匹配项。</td>\n</tr>\n<tr>\n<td><code>boolean contains(Object o)</code></td>\n<td>检查双端队列是否包含指定元素。</td>\n</tr>\n<tr>\n<td><code>int size()</code></td>\n<td>返回双端队列中的元素数量。</td>\n</tr>\n<tr>\n<td><code>boolean isEmpty()</code></td>\n<td>检查双端队列是否为空。</td>\n</tr>\n<tr>\n<td><code>void clear()</code></td>\n<td>移除双端队列中的所有元素。</td>\n</tr>\n<tr>\n<td><code>boolean containsAll(Collection&lt;?&gt; c)</code></td>\n<td>检查双端队列是否包含指定集合中的所有元素。</td>\n</tr>\n<tr>\n<td><code>boolean addAll(Collection&lt;? extends E&gt; c)</code></td>\n<td>将指定集合中的所有元素添加到双端队列的末尾。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"代码示例-5\">代码示例</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentLinkedDeque;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConcurrentLinkedDequeExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建 ConcurrentLinkedDeque 实例</span></span><br><span class=\"line\">        ConcurrentLinkedDeque&lt;String&gt; deque = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentLinkedDeque</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加元素到双端队列</span></span><br><span class=\"line\">        deque.addFirst(<span class=\"string\">&quot;Apple&quot;</span>);</span><br><span class=\"line\">        deque.addLast(<span class=\"string\">&quot;Banana&quot;</span>);</span><br><span class=\"line\">        deque.addLast(<span class=\"string\">&quot;Orange&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取双端队列元素数量</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;双端队列元素数量: &quot;</span> + deque.size());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查双端队列是否为空</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;双端队列是否为空: &quot;</span> + deque.isEmpty());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取并移除双端队列头部元素</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> deque.pollFirst();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;移除的双端队列头部元素: &quot;</span> + head);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取双端队列头部元素</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">newHead</span> <span class=\"operator\">=</span> deque.peekFirst();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;新的双端队列头部元素: &quot;</span> + newHead);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取双端队列尾部元素</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">tail</span> <span class=\"operator\">=</span> deque.peekLast();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;双端队列尾部元素: &quot;</span> + tail);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打印双端队列元素</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;双端队列元素: &quot;</span> + deque);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍并发容器相关技术 本文基于jdk1.8 并发容器 Java的集合容器框架中，主要有四大类别：List、Set、Queue、Map，大家熟知的这些集合类ArrayList、LinkedList、HashMap等这些容器都是非线程安全的。 为了保证线程安全，所以java提供了同步容器，可以简单地理解为通过synchronized来实现同步的容器，比如Vector、Hashtable以及SynchronizedList等容器，这样做的代价是削弱了并发性，当多个线程共同竞争容器级的锁时，吞吐量就会降低。 因此为了解决同步容器的性能问题，所以才有了并发容器，java.util.concurrent包中提供了多种并发类容器： 并发容器 对应的非并发容器 代替的同步容器 实现原理 应用场景 CopyOnWriteArrayList ArrayList Vector、synchronizedList CopyOnWriteArrayList 内部使用了一种称为“写时复制”的机制。当需要进行写操作时，它会创建一个新的数组，并将原始数组的内容复制到新数组中，然后进行写操作。一旦修改完成，新的副本会替代原始数组，成为新的数据源。因此，读操作不会被写操作阻塞，读操作返回的结果可能不是最新的，但是对于许多应用场景来说，这是可以接受的。此外，由于读操作不需要加锁，因此它可以支持更高的并发度。需要注意的是，虽然副本会替代原始数组，但是这个替代并不是立即发生的。在修改操作期间，读操作仍然可能会访问原始数组。只有当修改完成后，才会将新的副本设置为源数组。 1. 读多写少的场景由于 CopyOnWriteArrayList 的读操作不需要加锁，因此它非常适合在读多写少的场景中使用。例如，一个读取频率比写入频率高得多的缓存，使用 CopyOnWriteArrayList 可以提高读取性能，并减少锁竞争的开销。2. 不需要实时更新的数据由于 CopyOnWriteArrayList 读取的数据可能不是最新的，因此它适合于不需要实时更新的数据。例如，在日志应用中，为了保证应用的性能，日志记录的操作可能被缓冲，并不是实时写入文件系统，而是在某个时刻批量写入。这种情况下，使用 CopyOnWriteArrayList 可以避免多个线程之间的竞争，提高应用的性能。注意：由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致 young gc 或者full gc，谨慎使用 CopyOnWriteArraySet HashSet synchronizedSet 基于CopyOnWriteArrayList实现，其唯一的不同是在add时调用的是CopyOnWriteArrayList的addIfAbsent方法，其遍历当前Object数组，如Object数组中已有了当前元素，则直接返回，如果没有则放入Object数组的尾部，并返回。 同CopyOnWriteArrayList ConcurrentHashMap HashMap Hashtable、synchronizedMap 在JDK1.8之前，ConcurrentHashMap使用分段锁以在保证线程安全的同时获得更大的效率。JDK1.8开始舍弃了分段锁，使用自旋+CAS+synchronized关键字来实现同步。这样做的好处：1.节省内存空间 ，分段锁需要更多的内存空间，而大多数情况下，并发粒度达不到设置的粒度，竞争概率较小，反而导致更新的长时间等待（因为锁定一段后整个段就无法更新了）2.提高GC效率。 1.共享数据的线程安全：在多线程编程中，如果需要进行共享数据的读写，可以使用 ConcurrentHashMap 保证线程安全。2. 缓存：ConcurrentHashMap 的高并发性能和线程安全能力，使其成为一种很好的缓存实现方案。在多线程环境下，使用 ConcurrentHashMap 作为缓存的数据结构，能够提高程序的并发性能，同时保证数据的一致性。 ConcurrentSkipListMap TreeMap synchronizedSortedMap(TreeMap) 基于Skip list（跳表）实现的有序映射（Map）数据结构，是一种可以代替平衡树的数据结构，默认是按照Key值升序的。 ConcurrentSkipListMap适用于需要高并发性能、支持有序性和区间查询的场景，能够有效地提高系统的性能和可扩展性。 ConcurrentLinkedQueue LinkedList LinkedBlockingQueue ConcurrentLinkedQueue 基于无锁算法和乐观并发策略，旨在提供高效的并发操作。它使用一个单向链表数据结构来存储元素，并且保持了先进先出（FIFO）的顺序。ConcurrentLinkedQueue 是一个无界队列，它没有固定的容量限制。可以根据需要动态地增长或缩小链表的长度。需要注意的是，ConcurrentLinkedQueue 并不适合在迭代过程中进行修改操作，因为它的结构在并发情况下可能会发生变化。 1.高并发环境：ConcurrentLinkedQueue 适用于需要高并发性能和线程安全的场景。由于它采用无锁算法和乐观并发策略，可以在高并发环境下提供较高的吞吐量。2.生产者-消费者模式：ConcurrentLinkedQueue 在实现生产者-消费者模式时非常有用。生产者线程可以将元素添加到队列的尾部，而消费者线程可以从队列的头部获取元素，实现了解耦和并发处理。3.任务调度：ConcurrentLinkedQueue 可以作为任务调度的数据结构，用于存储待执行的任务。多个线程可以从队列中获取任务并执行，从而实现任务的并发处理。 ConcurrentLinkedDeque LinkedList 无 与ConcurrentLinkedQueue 相比 ConcurrentLinkedDeque 是基于双向链表实现的并发双端队列。它支持在队头和队尾进行插入和移除操作，保持了元素的先进先出顺序。 ConcurrentLinkedDeque 适用于需要双端操作的并发场景，例如生产者-消费者模式中的多线程同时插入和移除元素的场景。 CopyOnWriteArrayList 方法 描述 int size() 返回列表中的元素数量。 boolean isEmpty() 检查列表是否为空。 boolean contains(Object o) 检查列表是否包含指定元素。 Iterator&lt;E&gt; iterator() 返回一个迭代器，用于遍历列表中的元素。 boolean add(E e) 将元素添加到列表末尾。 boolean remove(Object o) 从列表中移除指定元素的第一个匹配项。 boolean containsAll(Collection&lt;?&gt; c) 检查列表是否包含指定集合中的所有元素。 boolean addAll(Collection&lt;? extends E&gt; c) 将指定集合中的所有元素添加到列表末尾。 boolean addAll(int index, Collection&lt;? extends E&gt; c) 将指定集合中的所有元素插入到列表的指定位置。 boolean removeAll(Collection&lt;?&gt; c) 移除列表中与指定集合中的元素相匹配的所有元素。 boolean retainAll(Collection&lt;?&gt; c) 仅保留列表中与指定集合中的元素相匹配的元素，移除其他元素。 void clear() 清空列表中的所有元素。 E get(int index) 返回列表中指定位置的元素。 E set(int index, E element) 用指定元素替换列表中指定位置的元素，并返回原来的元素。 void add(int index, E element) 在列表的指定位置插入指定元素。 E remove(int index) 移除列表中指定位置的元素，并返回被移除的元素。 int indexOf(Object o) 返回指定元素在列表中首次出现的位置索引，如果不存在，则返回 -1。 int lastIndexOf(Object o) 返回指定元素在列表中最后一次出现的位置索引，如果不存在，则返回 -1。 小贴士 迭代器的 fail-fast 与 fail-safe 机制 在 Java 中，迭代器（Iterator）在迭代的过程中，如果底层的集合被修改（添加或删除元素），不同的迭代器对此的表现行为是不一样的，可分为两类：Fail-Fast（快速失败）和 Fail-Safe（安全失败）。 fail-fast 机制 fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生 fail-fast 事件。例如：当某一个线程A通过 iterator 去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，产生 fail-fast 事件。 在 java.util 包中的集合，如 ArrayList、HashMap 等，它们的迭代器默认都是采用 Fail-Fast 机制。 fail-fast解决方案 方案一：在遍历过程中所有涉及到改变modCount 值的地方全部加上synchronized 或者直接使用Collection#synchronizedList，这样就可以解决问题，但是不推荐，因为增删造成的同步锁可能会阻塞遍历操作。 方案二：使用CopyOnWriteArrayList 替换 ArrayList，推荐使用该方案（即fail-safe）。 fail-safe机制 任何对集合结构的修改都会在一个复制的集合上进行，因此不会抛出ConcurrentModificationException。在 java.util.concurrent 包中的集合，如CopyOnWriteArrayList、ConcurrentHashMap 等，它们的迭代器一般都是采用 Fail-Safe 机制。 缺点： 采用 Fail-Safe 机制的集合类都是线程安全的，但是它们无法保证数据的实时一致性，它们只能保证数据的最终一致性。在迭代过程中，如果集合被修改了，可能读取到的仍然是旧的数据。 Fail-Safe 机制还存在另外一个问题，就是内存占用。由于这类集合一般都是通过复制来实现读写分离的，因此它们会创建出更多的对象，导致占用更多的内存，甚至可能引起频繁的垃圾回收，严重影响性能 CopyOnWriteArraySet 方法 描述 int size() 返回集合中的元素数量。 boolean isEmpty() 检查集合是否为空。 boolean contains(Object o) 检查集合是否包含指定的元素。 boolean add(E e) 将指定元素添加到集合中。 boolean remove(Object o) 从集合中移除指定元素。 void clear() 清空集合中的所有元素。 Iterator&lt;E&gt; iterator() 返回在集合上进行迭代的迭代器。 boolean containsAll(Collection&lt;?&gt; c) 检查集合是否包含指定集合中的所有元素。 boolean addAll(Collection&lt;? extends E&gt; c) 将指定集合中的所有元素添加到集合中。 boolean removeAll(Collection&lt;?&gt; c) 从集合中移除指定集合中包含的所有元素。 boolean retainAll(Collection&lt;?&gt; c) 仅保留集合中包含在指定集合中的元素，移除其他元素。 CopyOnWriteArraySet与CopyOnWriteArrayList的区别 数据结构类型：CopyOnWriteArraySet 是一个基于数组的集合，而 CopyOnWriteArrayList 是一个基于数组的列表。 元素的唯一性：CopyOnWriteArraySet 保证集合中的元素是唯一的，不允许重复元素的存在。而 CopyOnWriteArrayList 允许列表中存在重复元素。 集合与列表的特性：CopyOnWriteArraySet 实现了 Set 接口，它是一个无序的集合，不保留插入顺序。CopyOnWriteArrayList 实现了 List 接口，它是一个有序的列表，保留插入顺序。 代码示例 1234567891011121314151617181920212223// 创建 CopyOnWriteArraySet 实例CopyOnWriteArraySet&lt;String&gt; set = new CopyOnWriteArraySet&lt;&gt;();// 添加元素set.add(&quot;Apple&quot;);set.add(&quot;Banana&quot;);set.add(&quot;Orange&quot;);set.add(&quot;Grapes&quot;);// 打印集合元素，可能得到的输出：[Apple, Banana, Grapes, Orange]System.out.println(&quot;集合元素: &quot; + set);// 创建 CopyOnWriteArrayList 实例CopyOnWriteArrayList&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();// 添加元素list.add(&quot;Apple&quot;);list.add(&quot;Banana&quot;);list.add(&quot;Orange&quot;);list.add(&quot;Grapes&quot;);// 打印列表元素，得到的输出：[Apple, Banana, Orange, Grapes]System.out.println(&quot;列表元素: &quot; + list); ConcurrentHashMap 方法 描述 int size() 返回映射中的键值对数量。 boolean isEmpty() 检查映射是否为空。 boolean containsKey(Object key) 检查映射是否包含指定的键。 boolean containsValue(Object value) 检查映射是否包含指定的值。 V get(Object key) 获取与指定键关联的值。 V put(K key, V value) 将指定的键值对添加到映射中。 V remove(Object key) 从映射中移除指定键的映射关系，并返回对应的值。 void clear() 清空映射中的所有键值对。 Set&lt;K&gt; keySet() 返回映射中所有键的集合。 Collection&lt;V&gt; values() 返回映射中所有值的集合。 Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet() 返回映射中所有键值对的集合。 V putIfAbsent(K key, V value) 当指定的键尚未映射到值时，将指定的键值对添加到映射中。 boolean remove(Object key, Object value) 从映射中移除指定键值对。 boolean replace(K key, V oldValue, V newValue) 用新的值替换指定键的旧值，仅当当前值与指定的旧值相等时才替换。 V replace(K key, V value) 用指定值替换指定键的值。 JDK1.7 中的ConcurrentHashMap 在jdk1.7及其以下的版本中，结构是用Segments数组 + HashEntry数组 + 链表实现的 JDK1.8中的ConcurrentHashMap jdk1.8抛弃了Segments分段锁的方案，而是改用了和HashMap一样的结构操作，也就是数组 + 链表+ 红黑树结构，比jdk1.7中的ConcurrentHashMap提高了效率，在并发方面，使用了cas +synchronized的方式保证数据的一致性 链表转化为红黑树需要满足2个条件: 1.链表的节点数量大于等于树化阈值8 2.Node数组的长度大于等于最小树化容量值64 代码示例 1234567891011121314151617181920212223242526272829303132import java.util.concurrent.ConcurrentHashMap;public class ConcurrentHashMapExample &#123; public static void main(String[] args) &#123; // 创建 ConcurrentHashMap 实例 ConcurrentHashMap&lt;String, Integer&gt; map = new ConcurrentHashMap&lt;&gt;(); // 添加键值对 map.put(&quot;Apple&quot;, 3); map.put(&quot;Banana&quot;, 1); map.put(&quot;Orange&quot;, 2); map.put(&quot;Grapes&quot;, 4); // 打印映射内容，映射内容: &#123;Banana=1, Grapes=4, Orange=2, Apple=3&#125; System.out.println(&quot;映射内容: &quot; + map); // 获取键值对数量 System.out.println(&quot;键值对数量: &quot; + map.size()); // 检查是否包含指定键 System.out.println(&quot;是否包含键 &#x27;Orange&#x27;: &quot; + map.containsKey(&quot;Orange&quot;)); // 获取指定键对应的值 System.out.println(&quot;键 &#x27;Apple&#x27; 对应的值: &quot; + map.get(&quot;Apple&quot;)); // 移除指定键的映射关系 map.remove(&quot;Banana&quot;); // 打印映射内容 System.out.println(&quot;移除键 &#x27;Banana&#x27; 后的映射内容: &quot; + map); &#125;&#125; ConcurrentSkipListMap ConcurrentSkipListMap 和 ConcurrentHashMap 是 Java 中用于并发访问的映射数据结构，它们之间有一些区别 数据结构：ConcurrentSkipListMap 是基于跳表（Skip List）的数据结构实现，而 ConcurrentHashMap 是基于数组 + 链表+ 红黑树的数据结构实现。 排序性：ConcurrentSkipListMap 是有序映射，按照键的自然顺序或自定义的比较器对键进行排序。而 ConcurrentHashMap 是无序映射，不保证键值对的顺序。 并发访问性能：在高度并发的情况下，ConcurrentSkipListMap 在读取方面的性能较好，因为它支持并发读取操作，并且有序结构使得读取更高效。而 ConcurrentHashMap 在写入方面的性能较好，因为它使用cas +synchronized来支持并发写入操作。 内存占用：通常情况下，ConcurrentSkipListMap 的内存占用比 ConcurrentHashMap 更高，因为它需要额外的存储空间来维护跳表结构。 功能特性：由于有序性的特点，ConcurrentSkipListMap 提供了一些与顺序相关的方法，如 firstKey()、lastKey()、subMap() 等。 方法 描述 K firstKey() 返回映射中的第一个键。 K lastKey() 返回映射中的最后一个键。 ConcurrentNavigableMap&lt;K, V&gt; subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) 返回一个视图，该视图包含映射中键的子范围。 ConcurrentNavigableMap&lt;K, V&gt; headMap(K toKey, boolean inclusive) 返回一个视图，该视图包含映射中小于（或小于等于）给定键的部分。 ConcurrentNavigableMap&lt;K, V&gt; tailMap(K fromKey, boolean inclusive) 返回一个视图，该视图包含映射中大于（或大于等于）给定键的部分。 ConcurrentNavigableMap&lt;K, V&gt; descendingMap() 返回与此映射相反的顺序的视图。 ConcurrentNavigableSet&lt;K&gt; navigableKeySet() 返回包含映射中所有键的并发可导航集合。 ConcurrentNavigableSet&lt;K&gt; descendingKeySet() 返回与此映射中的键相反顺序对应的并发可导航集合。 代码示例 123456789101112131415161718192021222324252627282930313233343536373839404142import java.util.concurrent.ConcurrentSkipListMap;public class ConcurrentSkipListMapExample &#123; public static void main(String[] args) &#123; // 创建 ConcurrentSkipListMap 实例 ConcurrentSkipListMap&lt;Integer, String&gt; map = new ConcurrentSkipListMap&lt;&gt;(); // 添加键值对 map.put(3, &quot;Apple&quot;); map.put(1, &quot;Banana&quot;); map.put(2, &quot;Orange&quot;); map.put(4, &quot;Grapes&quot;); // 打印映射内容，映射内容: &#123;1=Banana, 2=Orange, 3=Apple, 4=Grapes&#125; System.out.println(&quot;映射内容: &quot; + map); // 获取键值对数量 System.out.println(&quot;键值对数量: &quot; + map.size()); // 检查是否包含指定键 System.out.println(&quot;是否包含键 2: &quot; + map.containsKey(2)); // 获取指定键对应的值 System.out.println(&quot;键 3 对应的值: &quot; + map.get(3)); // 移除指定键的映射关系 map.remove(1); // 打印映射内容 System.out.println(&quot;移除键 1 后的映射内容: &quot; + map); // 获取最小的键 System.out.println(&quot;最小的键: &quot; + map.firstKey()); // 获取最大的键 System.out.println(&quot;最大的键: &quot; + map.lastKey()); // 获取键小于等于 3 的子映射 ConcurrentSkipListMap&lt;Integer, String&gt; subMap = map.headMap(3, true); System.out.println(&quot;键小于等于 3 的子映射: &quot; + subMap); &#125;&#125; 小贴士 跳表 跳表（Skip List）是一种用于实现有序集合的数据结构，它的设计灵感来自于平衡树。跳表通过使用多层链表结构，每一层链表按照升序排列，并且每一层链表都是前一层链表的子集。这样的结构允许在搜索、插入和删除元素时具有较高的效率。 跳表的核心思想是通过建立索引层来加快搜索的速度。最底层是原始链表，每个节点都包含一个元素。而上层的链表是通过原始链表中的一部分节点创建的。在每一层中，节点以一定的概率被提升到更高层，从而形成了跨越多个层级的链接。 跳表的主要优点是在具有合理的设计和维护下，可以在平均情况下以 O(log n) 的时间复杂度执行搜索、插入和删除操作。这是因为每一层的节点数量是下一层的节点数量的一半，从而形成了一种对数级别的分布。 以下是跳表的主要操作： 搜索：从顶层开始，沿着每一层的链表进行比较，如果目标元素大于当前节点的值，则在当前层继续向右移动；如果目标元素小于当前节点的值，则退回到下一层继续比较。直到找到目标元素或者无法再继续向右或下移动。 插入：通过搜索找到插入位置后，在每一层链表中插入新节点，并更新相应的索引层。 删除：通过搜索找到要删除的节点位置后，在每一层链表中删除节点，并更新相应的索引层。 跳表的实现相对简单，它提供了在有序集合中进行快速搜索和更新的高效方式。然而，它的空间复杂度相对于平衡树较高，因为需要维护额外的索引层。跳表在并发环境下也需要考虑同步的问题，以确保数据的一致性和线程安全性。 总结而言，跳表通过建立多层索引结构，在有序集合中实现了较快的搜索、插入和删除操作。它是一种简单而高效的数据结构，在一些场景中可以作为替代平衡树的选择。 ConcurrentLinkedQueue 方法 描述 boolean add(E e) 将指定元素添加到队列的尾部。 boolean offer(E e) 将指定元素添加到队列的尾部。 E poll() 获取并移除队列的头部元素。 E peek() 获取队列的头部元素，但不移除。 int size() 返回队列中的元素数量。 boolean isEmpty() 检查队列是否为空。 boolean contains(Object o) 检查队列是否包含指定元素。 boolean remove(Object o) 从队列中移除指定元素的第一个匹配项。 void clear() 移除队列中的所有元素。 boolean containsAll(Collection&lt;?&gt; c) 检查队列是否包含指定集合中的所有元素。 boolean addAll(Collection&lt;? extends E&gt; c) 将指定集合中的所有元素添加到队列的尾部。 boolean removeAll(Collection&lt;?&gt; c) 从队列中移除包含在指定集合中的所有元素。 boolean retainAll(Collection&lt;?&gt; c) 仅保留队列中包含在指定集合中的元素，移除其他元素。 代码示例 123456789101112131415161718192021222324252627282930import java.util.concurrent.ConcurrentLinkedQueue;public class ConcurrentLinkedQueueExample &#123; public static void main(String[] args) &#123; // 创建 ConcurrentLinkedQueue 实例 ConcurrentLinkedQueue&lt;String&gt; queue = new ConcurrentLinkedQueue&lt;&gt;(); // 添加元素到队列 queue.add(&quot;Apple&quot;); queue.add(&quot;Banana&quot;); queue.add(&quot;Orange&quot;); // 获取队列元素数量 System.out.println(&quot;队列元素数量: &quot; + queue.size()); // 检查队列是否为空 System.out.println(&quot;队列是否为空: &quot; + queue.isEmpty()); // 获取并移除队列头部元素 String head = queue.poll(); System.out.println(&quot;移除的队列头部元素: &quot; + head); // 获取队列头部元素 String newHead = queue.peek(); System.out.println(&quot;新的队列头部元素: &quot; + newHead); // 打印队列元素 System.out.println(&quot;队列元素: &quot; + queue); &#125;&#125; ConcurrentLinkedDeque 方法 描述 void addFirst(E e) 将指定元素插入到双端队列的开头。 void addLast(E e) 将指定元素插入到双端队列的末尾。 boolean offerFirst(E e) 将指定元素插入到双端队列的开头。如果成功则返回 true，否则返回 false。 boolean offerLast(E e) 将指定元素插入到双端队列的末尾。如果成功则返回 true，否则返回 false。 E pollFirst() 获取并移除双端队列的开头元素。 E pollLast() 获取并移除双端队列的末尾元素。 E peekFirst() 获取双端队列的开头元素，但不移除。 E peekLast() 获取双端队列的末尾元素，但不移除。 boolean removeFirstOccurrence(Object o) 从双端队列中移除首次出现的指定元素。 boolean removeLastOccurrence(Object o) 从双端队列中移除最后一次出现的指定元素。 void push(E e) 将元素推入双端队列的开头。 E pop() 从双端队列的开头弹出一个元素。 boolean remove(Object o) 从双端队列中移除指定元素的第一个匹配项。 boolean contains(Object o) 检查双端队列是否包含指定元素。 int size() 返回双端队列中的元素数量。 boolean isEmpty() 检查双端队列是否为空。 void clear() 移除双端队列中的所有元素。 boolean containsAll(Collection&lt;?&gt; c) 检查双端队列是否包含指定集合中的所有元素。 boolean addAll(Collection&lt;? extends E&gt; c) 将指定集合中的所有元素添加到双端队列的末尾。 代码示例 12345678910111213141516171819202122232425262728293031323334import java.util.concurrent.ConcurrentLinkedDeque;public class ConcurrentLinkedDequeExample &#123; public static void main(String[] args) &#123; // 创建 ConcurrentLinkedDeque 实例 ConcurrentLinkedDeque&lt;String&gt; deque = new ConcurrentLinkedDeque&lt;&gt;(); // 添加元素到双端队列 deque.addFirst(&quot;Apple&quot;); deque.addLast(&quot;Banana&quot;); deque.addLast(&quot;Orange&quot;); // 获取双端队列元素数量 System.out.println(&quot;双端队列元素数量: &quot; + deque.size()); // 检查双端队列是否为空 System.out.println(&quot;双端队列是否为空: &quot; + deque.isEmpty()); // 获取并移除双端队列头部元素 String head = deque.pollFirst(); System.out.println(&quot;移除的双端队列头部元素: &quot; + head); // 获取双端队列头部元素 String newHead = deque.peekFirst(); System.out.println(&quot;新的双端队列头部元素: &quot; + newHead); // 获取双端队列尾部元素 String tail = deque.peekLast(); System.out.println(&quot;双端队列尾部元素: &quot; + tail); // 打印双端队列元素 System.out.println(&quot;双端队列元素: &quot; + deque); &#125;&#125;","summary":"摘要 本文介绍并发容器相关技术 本文基于jdk1.8","date_published":"2023-05-24T14:34:05.000Z","tags":["技术","java","java多线程","java"]},{"id":"https://blog.hanqunfeng.com/2023/05/23/java-concurrency08-LockSupport/","url":"https://blog.hanqunfeng.com/2023/05/23/java-concurrency08-LockSupport/","title":"Java并发编程--JUC并发工具类之LockSupport","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍LockSupport相关技术</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>jdk1.8</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"LockSupport介绍\">LockSupport介绍</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>LockSupport</code>是Java并发工具类中的一个重要成员。它提供了一种基于线程的阻塞和唤醒机制，使得线程可以在特定条件下暂停和继续执行。</p>\n</li>\n<li class=\"lvl-2\">\n<p>与传统的<code>wait()</code>和<code>notify()</code>方法相比，<code>LockSupport</code>具有以下优势：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">精准的线程阻塞和唤醒：<br>\n<code>LockSupport</code>提供了精确控制线程阻塞和唤醒的能力。通过调用<code>LockSupport</code>类的<code>park()</code>方法，线程可以主动进入阻塞状态，直到其他线程调用了相应线程的<code>unpark()</code>方法才能被唤醒。相比之下，<code>wait()</code>和<code>notify()</code>方法的使用需要依赖于对象的监视器（monitor），并且无法指定特定的线程进行唤醒。</li>\n<li class=\"lvl-6\">不依赖于对象的监视器：<br>\n传统的<code>wait()</code>和<code>notify()</code>方法需要依赖于对象的监视器（monitor），即在synchronized块中调用。这种依赖关系可能导致代码结构上的限制，而<code>LockSupport</code>则不依赖于特定的对象，可以在任何位置进行线程的阻塞和唤醒操作。</li>\n<li class=\"lvl-6\">避免死锁问题：<br>\n在使用<code>wait()</code>和<code>notify()</code>方法时，由于需要依赖于对象的监视器，可能会出现死锁问题，例如线程A等待线程B的通知，而线程B也在等待线程A的通知，导致双方无法继续执行。<code>LockSupport</code>通过给每个线程关联一个许可（<code>permit</code>）来避免死锁问题，即使在<code>park()</code>和<code>unpark()</code>方法的调用顺序上没有特定的要求。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>总体而言，<code>LockSupport</code>是一种强大而灵活的线程阻塞和唤醒机制，能够满足并发编程中的各种需求。它的设计理念与传统的<code>wait()</code>和<code>notify()</code>方法有所不同，提供了更加直观和可控的线程调度方式。然而，在使用<code>LockSupport</code>时，仍需谨慎处理线程的阻塞和唤醒逻辑，以避免潜在的并发问题。</p>\n</li>\n</ul>\n<h2 id=\"LockSupport-API说明\">LockSupport API说明</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void park()</code></td>\n<td>阻塞当前线程，直到被唤醒</td>\n</tr>\n<tr>\n<td><code>void park(Object blocker)</code></td>\n<td>阻塞当前线程，并关联一个阻塞对象</td>\n</tr>\n<tr>\n<td><code>void parkNanos(long nanos)</code></td>\n<td>阻塞当前线程，最多等待指定纳秒时间</td>\n</tr>\n<tr>\n<td><code>void parkNanos(Object blocker, long nanos)</code></td>\n<td>阻塞当前线程，并关联一个阻塞对象，最多等待指定纳秒时间</td>\n</tr>\n<tr>\n<td><code>void parkUntil(long deadline)</code></td>\n<td>阻塞当前线程，直到指定的绝对时间点</td>\n</tr>\n<tr>\n<td><code>void parkUntil(Object blocker, long deadline)</code></td>\n<td>阻塞当前线程，并关联一个阻塞对象，直到指定的绝对时间点</td>\n</tr>\n<tr>\n<td><code>void unpark(Thread thread)</code></td>\n<td>唤醒指定的线程</td>\n</tr>\n<tr>\n<td><code>Object getBlocker(Thread thread)</code></td>\n<td>获取指定线程关联的阻塞对象</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>其中，<code>park()</code>和<code>unpark()</code>是最常用的方法，用于线程的阻塞和唤醒操作。</p>\n</li>\n<li class=\"lvl-2\">\n<p>其他方法提供了更多灵活的线程阻塞和唤醒方式，如指定阻塞对象、等待一定时间等。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>getBlocker()</code>方法可以获取指定线程关联的阻塞对象，以便进行进一步的操作或分析。</p>\n</li>\n<li class=\"lvl-2\">\n<p>在<code>LockSupport</code>的内部实现中，会使用底层的<code>CAS</code>操作来控制线程的阻塞和唤醒。当线程调用<code>park()</code>方法时，会将线程置于等待队列，并将线程的许可状态设置为负数。当调用<code>unpark()</code>方法时，会将线程的许可状态设置为非负数，从而唤醒等待的线程。</p>\n</li>\n</ul>\n<h2 id=\"代码示例\">代码示例</h2>\n<h3 id=\"示例1–park-和unpark\">示例1–<code>park()</code>和<code>unpark()</code></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CASParkUnparkExample</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"type\">boolean</span> <span class=\"variable\">condition</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">waiterThread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!condition) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 阻塞当前线程</span></span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Condition is true. Thread is awake.&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">notifierThread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 模拟一些耗时操作</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            condition = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 唤醒等待的线程</span></span><br><span class=\"line\">            LockSupport.unpark(waiterThread);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        waiterThread.start();</span><br><span class=\"line\">        notifierThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在上面的示例中，<code>waiterThread</code>线程通过调用<code>LockSupport.park()</code>进入阻塞状态，直到<code>condition</code>变为<code>true</code>。<code>notifierThread</code>线程在经过一些耗时操作后，将<code>condition</code>设置为<code>true</code>，然后调用<code>LockSupport.unpark(waiterThread)</code>唤醒<code>waiterThread</code>线程。</p>\n</li>\n</ul>\n<h3 id=\"示例2–park-Object-blocker-和getBlocker-Thread-thread\">示例2–<code>park(Object blocker)</code>和<code>getBlocker(Thread thread)</code></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParkBlockerExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">blocker</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(); <span class=\"comment\">// 创建一个阻塞对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread is parking...&quot;</span>);</span><br><span class=\"line\">            LockSupport.park(blocker); <span class=\"comment\">// 阻塞当前线程，并关联阻塞对象</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread is unparked&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取并输出关联的阻塞对象</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">associatedBlocker</span> <span class=\"operator\">=</span> LockSupport.getBlocker(thread);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Associated blocker: &quot;</span> + associatedBlocker);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 唤醒线程</span></span><br><span class=\"line\">        LockSupport.unpark(thread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在上述示例中，我们创建了一个阻塞对象<code>blocker</code>。在thread线程中，我们调用<code>LockSupport.park(blocker)</code>方法阻塞当前线程，并将阻塞对象与线程关联。</p>\n</li>\n<li class=\"lvl-2\">\n<p>在主线程中，我们使用<code>LockSupport.getBlocker(thread)</code>方法获取与线程关联的阻塞对象，并输出它。</p>\n</li>\n</ul>\n<h3 id=\"park方法中阻塞对象的作用\">park方法中阻塞对象的作用</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>当调用<code>LockSupport的park()</code>方法时，线程将被阻塞，等待被唤醒。<code>park(Object blocker)</code>方法是<code>park()</code>方法的一个重载形式，它允许您将一个阻塞对象与当前线程相关联。绑定阻塞对象的作用在于更好地识别和监控线程的阻塞原因。</p>\n</li>\n<li class=\"lvl-2\">\n<p>当线程被阻塞时，可以通过调用<code>getBlocker(Thread thread)</code>方法来获取与该线程相关联的阻塞对象。这样，您可以在代码中根据阻塞对象进行更精确的条件判断、监控或其他操作。</p>\n</li>\n<li class=\"lvl-2\">\n<p>以下是一些使用场景的例子，说明绑定阻塞对象的作用：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">调试和诊断：当多个线程被阻塞时，可以使用阻塞对象来确定具体是哪个线程被阻塞，以及被阻塞的原因。通过获取阻塞对象，您可以在调试过程中定位问题，并根据阻塞对象的不同采取相应的调试措施。</li>\n<li class=\"lvl-6\">更精确的控制和唤醒：通过关联特定的阻塞对象，您可以在需要唤醒线程时，只选择唤醒与该阻塞对象相关联的线程。这种精确的唤醒机制可以避免不必要的线程唤醒，提高系统的性能和效率。</li>\n<li class=\"lvl-6\">条件等待：在某些情况下，您可能希望线程在特定条件下被阻塞，直到满足某个条件后才被唤醒。通过绑定阻塞对象，您可以根据不同的条件选择不同的阻塞对象，从而实现对不同条件的精确等待和唤醒。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>绑定阻塞对象的作用是提供更多的上下文信息，帮助您更好地理解和控制线程的阻塞状态。它可以作为一种辅助手段，用于更精确地调试、监控和控制线程的行为。</p>\n</li>\n</ul>\n<h2 id=\"ReentrantLock的阻塞唤醒机制是基于LockSupport实现的\">ReentrantLock的阻塞唤醒机制是基于LockSupport实现的</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>ReentrantLock</code>是Java中提供的可重入锁的实现，它使用了内部类<code>Sync</code>来管理锁的状态和线程的阻塞与唤醒。<code>Sync</code>类内部使用了<code>LockSupport</code>工具类来实现线程的阻塞和唤醒操作。</p>\n</li>\n<li class=\"lvl-2\">\n<p>当一个线程无法获取到<code>ReentrantLock</code>的锁时，它会被阻塞，并且进入等待状态，在这种情况下，<code>ReentrantLock</code>内部会调用<code>LockSupport.park()</code>方法阻塞当前线程。</p>\n</li>\n<li class=\"lvl-2\">\n<p>当其他线程释放了锁或者调用了<code>ReentrantLock</code>的<code>unlock()</code>方法时，被阻塞的线程将会被唤醒，此时<code>ReentrantLock</code>会通过调用<code>LockSupport.unpark()</code>方法来唤醒被阻塞的线程。</p>\n</li>\n</ul>\n","content_text":"摘要 本文介绍LockSupport相关技术 本文基于jdk1.8 LockSupport介绍 LockSupport是Java并发工具类中的一个重要成员。它提供了一种基于线程的阻塞和唤醒机制，使得线程可以在特定条件下暂停和继续执行。 与传统的wait()和notify()方法相比，LockSupport具有以下优势： 精准的线程阻塞和唤醒： LockSupport提供了精确控制线程阻塞和唤醒的能力。通过调用LockSupport类的park()方法，线程可以主动进入阻塞状态，直到其他线程调用了相应线程的unpark()方法才能被唤醒。相比之下，wait()和notify()方法的使用需要依赖于对象的监视器（monitor），并且无法指定特定的线程进行唤醒。 不依赖于对象的监视器： 传统的wait()和notify()方法需要依赖于对象的监视器（monitor），即在synchronized块中调用。这种依赖关系可能导致代码结构上的限制，而LockSupport则不依赖于特定的对象，可以在任何位置进行线程的阻塞和唤醒操作。 避免死锁问题： 在使用wait()和notify()方法时，由于需要依赖于对象的监视器，可能会出现死锁问题，例如线程A等待线程B的通知，而线程B也在等待线程A的通知，导致双方无法继续执行。LockSupport通过给每个线程关联一个许可（permit）来避免死锁问题，即使在park()和unpark()方法的调用顺序上没有特定的要求。 总体而言，LockSupport是一种强大而灵活的线程阻塞和唤醒机制，能够满足并发编程中的各种需求。它的设计理念与传统的wait()和notify()方法有所不同，提供了更加直观和可控的线程调度方式。然而，在使用LockSupport时，仍需谨慎处理线程的阻塞和唤醒逻辑，以避免潜在的并发问题。 LockSupport API说明 方法 描述 void park() 阻塞当前线程，直到被唤醒 void park(Object blocker) 阻塞当前线程，并关联一个阻塞对象 void parkNanos(long nanos) 阻塞当前线程，最多等待指定纳秒时间 void parkNanos(Object blocker, long nanos) 阻塞当前线程，并关联一个阻塞对象，最多等待指定纳秒时间 void parkUntil(long deadline) 阻塞当前线程，直到指定的绝对时间点 void parkUntil(Object blocker, long deadline) 阻塞当前线程，并关联一个阻塞对象，直到指定的绝对时间点 void unpark(Thread thread) 唤醒指定的线程 Object getBlocker(Thread thread) 获取指定线程关联的阻塞对象 其中，park()和unpark()是最常用的方法，用于线程的阻塞和唤醒操作。 其他方法提供了更多灵活的线程阻塞和唤醒方式，如指定阻塞对象、等待一定时间等。 getBlocker()方法可以获取指定线程关联的阻塞对象，以便进行进一步的操作或分析。 在LockSupport的内部实现中，会使用底层的CAS操作来控制线程的阻塞和唤醒。当线程调用park()方法时，会将线程置于等待队列，并将线程的许可状态设置为负数。当调用unpark()方法时，会将线程的许可状态设置为非负数，从而唤醒等待的线程。 代码示例 示例1–park()和unpark() 12345678910111213141516171819202122232425262728293031import java.util.concurrent.locks.LockSupport;public class CASParkUnparkExample &#123; // private static volatile boolean condition = false; public static void main(String[] args) &#123; Thread waiterThread = new Thread(() -&gt; &#123; while (!condition) &#123; // 阻塞当前线程 LockSupport.park(); &#125; System.out.println(&quot;Condition is true. Thread is awake.&quot;); &#125;); Thread notifierThread = new Thread(() -&gt; &#123; // 模拟一些耗时操作 try &#123; Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; condition = true; // 唤醒等待的线程 LockSupport.unpark(waiterThread); &#125;); waiterThread.start(); notifierThread.start(); &#125;&#125; 在上面的示例中，waiterThread线程通过调用LockSupport.park()进入阻塞状态，直到condition变为true。notifierThread线程在经过一些耗时操作后，将condition设置为true，然后调用LockSupport.unpark(waiterThread)唤醒waiterThread线程。 示例2–park(Object blocker)和getBlocker(Thread thread) 123456789101112131415161718192021222324import java.util.concurrent.locks.LockSupport;public class ParkBlockerExample &#123; public static void main(String[] args) throws InterruptedException &#123; Object blocker = new Object(); // 创建一个阻塞对象 Thread thread = new Thread(() -&gt; &#123; System.out.println(&quot;Thread is parking...&quot;); LockSupport.park(blocker); // 阻塞当前线程，并关联阻塞对象 System.out.println(&quot;Thread is unparked&quot;); &#125;); thread.start(); Thread.sleep(2000); // 获取并输出关联的阻塞对象 Object associatedBlocker = LockSupport.getBlocker(thread); System.out.println(&quot;Associated blocker: &quot; + associatedBlocker); // 唤醒线程 LockSupport.unpark(thread); &#125;&#125; 在上述示例中，我们创建了一个阻塞对象blocker。在thread线程中，我们调用LockSupport.park(blocker)方法阻塞当前线程，并将阻塞对象与线程关联。 在主线程中，我们使用LockSupport.getBlocker(thread)方法获取与线程关联的阻塞对象，并输出它。 park方法中阻塞对象的作用 当调用LockSupport的park()方法时，线程将被阻塞，等待被唤醒。park(Object blocker)方法是park()方法的一个重载形式，它允许您将一个阻塞对象与当前线程相关联。绑定阻塞对象的作用在于更好地识别和监控线程的阻塞原因。 当线程被阻塞时，可以通过调用getBlocker(Thread thread)方法来获取与该线程相关联的阻塞对象。这样，您可以在代码中根据阻塞对象进行更精确的条件判断、监控或其他操作。 以下是一些使用场景的例子，说明绑定阻塞对象的作用： 调试和诊断：当多个线程被阻塞时，可以使用阻塞对象来确定具体是哪个线程被阻塞，以及被阻塞的原因。通过获取阻塞对象，您可以在调试过程中定位问题，并根据阻塞对象的不同采取相应的调试措施。 更精确的控制和唤醒：通过关联特定的阻塞对象，您可以在需要唤醒线程时，只选择唤醒与该阻塞对象相关联的线程。这种精确的唤醒机制可以避免不必要的线程唤醒，提高系统的性能和效率。 条件等待：在某些情况下，您可能希望线程在特定条件下被阻塞，直到满足某个条件后才被唤醒。通过绑定阻塞对象，您可以根据不同的条件选择不同的阻塞对象，从而实现对不同条件的精确等待和唤醒。 绑定阻塞对象的作用是提供更多的上下文信息，帮助您更好地理解和控制线程的阻塞状态。它可以作为一种辅助手段，用于更精确地调试、监控和控制线程的行为。 ReentrantLock的阻塞唤醒机制是基于LockSupport实现的 ReentrantLock是Java中提供的可重入锁的实现，它使用了内部类Sync来管理锁的状态和线程的阻塞与唤醒。Sync类内部使用了LockSupport工具类来实现线程的阻塞和唤醒操作。 当一个线程无法获取到ReentrantLock的锁时，它会被阻塞，并且进入等待状态，在这种情况下，ReentrantLock内部会调用LockSupport.park()方法阻塞当前线程。 当其他线程释放了锁或者调用了ReentrantLock的unlock()方法时，被阻塞的线程将会被唤醒，此时ReentrantLock会通过调用LockSupport.unpark()方法来唤醒被阻塞的线程。","summary":"摘要 本文介绍LockSupport相关技术 本文基于jdk1.8","date_published":"2023-05-23T14:34:05.000Z","tags":["技术","java","java多线程","java"]}]}