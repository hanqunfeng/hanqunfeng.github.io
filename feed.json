{"version":"https://jsonfeed.org/version/1","name":"飘逸峰的博客","home_page_url":"https://blog.hanqunfeng.com","feed_url":"https://blog.hanqunfeng.com/feed.json","author":{"name":"飘逸峰"},"items":[{"id":"https://blog.hanqunfeng.com/2024/09/05/linux-zabbix_vfs_fs_inode/","url":"https://blog.hanqunfeng.com/2024/09/05/linux-zabbix_vfs_fs_inode/","title":"zabbix监控告警--vfs.fs.inode不足5%的解决过程","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>解决Linux索引节点(inode)用满导致故障的方法</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"zabbix告警\">zabbix告警</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vfs.fs.inode[/,pfree]):5 %</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决过程\">解决过程</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>登录linux系统后查看inode使用情况和磁盘使用情况</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">inode 不足了</span></span><br><span class=\"line\">df -hi</span><br><span class=\"line\">文件系统\t      Inode  已用(I)  可用(I) 已用(I)%% 挂载点</span><br><span class=\"line\">/dev/xvda1              1.9M    1.8M     96K   96% /</span><br><span class=\"line\">tmpfs                   251K       1    251K    1% /dev/shm</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">disk 充足</span></span><br><span class=\"line\">df -hT</span><br><span class=\"line\">文件系统    类型      容量  已用  可用 已用%% 挂载点</span><br><span class=\"line\">/dev/xvda1    ext4     30G   18G   12G  61% /</span><br><span class=\"line\">tmpfs        tmpfs   1003M     0 1003M   0% /dev/shm</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>根据上面的查询结果初步判断是系统产生了大量的临时文件导致inode用尽了</p>\n</li>\n<li class=\"lvl-2\">\n<p>排查到底哪个目录下的文件数过多</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过下面的命令统计文件数量前十名，这里发现是/var目录中文件异常的多</span></span><br><span class=\"line\">for i in /*; do echo &quot;$(find $i |wc -l):$i&quot;; done | sort -nr | head -n 10</span><br><span class=\"line\">1815728:/var</span><br><span class=\"line\">52498:/usr</span><br><span class=\"line\">18804:/proc</span><br><span class=\"line\">7333:/sys</span><br><span class=\"line\">1834:/lib</span><br><span class=\"line\">1447:/opt</span><br><span class=\"line\">1047:/etc</span><br><span class=\"line\">457:/dev</span><br><span class=\"line\">411:/lib64</span><br><span class=\"line\">245:/sbin</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">接着查看/var中的文件数量</span></span><br><span class=\"line\">for i in /var/*; do echo &quot;$(find $i |wc -l):$i&quot;; done | sort -nr | head -n 10</span><br><span class=\"line\">1813442:/var/spool</span><br><span class=\"line\">2033:/var/lib</span><br><span class=\"line\">85:/var/cache</span><br><span class=\"line\">82:/var/log</span><br><span class=\"line\">39:/var/run</span><br><span class=\"line\">24:/var/lock</span><br><span class=\"line\">7:/var/db</span><br><span class=\"line\">3:/var/yp</span><br><span class=\"line\">2:/var/empty</span><br><span class=\"line\">2:/var/account</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">接着查看/var/spool中的文件数量，这里基本定位到是/var/spool/clientmqueue目录</span></span><br><span class=\"line\">for i in /var/spool/*; do echo &quot;$(find $i |wc -l):$i&quot;; done | sort -nr | head -n 10</span><br><span class=\"line\">1812413:/var/spool/clientmqueue</span><br><span class=\"line\">7:/var/spool/mail</span><br><span class=\"line\">4:/var/spool/anacron</span><br><span class=\"line\">3:/var/spool/at</span><br><span class=\"line\">2:/var/spool/cron</span><br><span class=\"line\">1:/var/spool/mqueue</span><br><span class=\"line\">1:/var/spool/lpd</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>百度一下<code>/var/spool/clientmqueue</code>目录的作用</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">‌Linux文件目录 /var/spool/clientmqueue/ 下的文件主要是由cron任务产生的输出文件。‌ 当cron任务中有输出内容时，如果服务器上没有配置sendmail服务，这些输出内容就会被保存到 /var/spool/clientmqueue/ 目录内。这是因为cron任务中的命令如果有输出（比如错误信息或者正常的输出信息），默认会通过sendmail发送，但如果服务器上没有配置sendmail服务，这些输出内容就会被保存到 /var/spool/clientmqueue/ 目录中。因此，这个目录下主要包含的是由cron任务产生的输出文件，这些文件记录了cron任务执行过程中的输出信息。</span><br><span class=\"line\"></span><br><span class=\"line\">如果需要处理这些文件，可以通过修改crontab配置来实现。具体来说，可以在每个cron任务命令的末尾添加重定向操作，将输出内容抛弃，例如使用命令 &gt;/dev/null 2&gt;&amp;1。这样，无论标准输出还是错误输出都会被重定向到 /dev/null，即被抛弃，从而避免在 /var/spool/clientmqueue/ 目录下产生不必要的文件。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>上面的解释说明<code>/var/spool/clientmqueue</code>目录下的文件可以被删除，所以直接删了就可以解决该问题了</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文件数量过多，不能这么删除</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">rm</span> -rf /var/spool/clientmqueue/*</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">正确方法</span></span><br><span class=\"line\">find /var/spool/clientmqueue -name &quot;*&quot; -type f | xargs rm -rf</span><br></pre></td></tr></table></figure>\n<h2 id=\"详解inode\">详解inode</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>inode是文件系统内一个重要的数据结构，它用来描述一个文件，包括文件名、文件类型、权限、所有者、创建时间、修改时间等。在Linux系统中，每个文件都有一个唯一的inode号，这个inode号是分配给该文件的，并且不能被改变。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看当前目录的inode号</span></span><br><span class=\"line\">ls -li</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>操作系统打开文件时会按如下步骤执行：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">查找文件名称对应的inode号</li>\n<li class=\"lvl-6\">根据inode号获取inode信息</li>\n<li class=\"lvl-6\">根据inode信息找到文件对应的数据块，读出数据</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>inode的大小是有限制的，通常取决于文件系统和操作系统。在大多数Linux文件系统中，inode大小通常是128字节或256字节。这是由文件系统在格式化时决定的，并且格式化后不能更改。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看inode大小</span></span><br><span class=\"line\">dumpe2fs /dev/xvda1 | grep &quot;Inode size&quot;</span><br><span class=\"line\">dumpe2fs 1.43.5 (04-Aug-2017)</span><br><span class=\"line\">Inode size:\t          256</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看文件系统的inode总数</p>\n</li>\n</ul>\n<blockquote>\n<p>一个inode只对应一个实际文件，所以inodes最大数量就是文件的最大数量。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有挂载磁盘</span></span><br><span class=\"line\">df -i</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定磁盘</span></span><br><span class=\"line\">df -i /dev/xvda1</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>不同的文件系统默认的inode数量不同，以<code>1G</code>磁盘空间为例，<code>ext4</code>文件系统默认为<code>65536</code>，<code>xfs</code>文件系统默认为<code>52万</code>(每2k设置一个inode)，并且<code>xfs</code>会动态扩容inode数量。</p>\n</li>\n</ul>\n","content_text":"摘要 解决Linux索引节点(inode)用满导致故障的方法 zabbix告警 1vfs.fs.inode[/,pfree]):5 % 解决过程 登录linux系统后查看inode使用情况和磁盘使用情况 1234567891011# inode 不足了df -hi文件系统 Inode 已用(I) 可用(I) 已用(I)%% 挂载点/dev/xvda1 1.9M 1.8M 96K 96% /tmpfs 251K 1 251K 1% /dev/shm# disk 充足df -hT文件系统 类型 容量 已用 可用 已用%% 挂载点/dev/xvda1 ext4 30G 18G 12G 61% /tmpfs tmpfs 1003M 0 1003M 0% /dev/shm 根据上面的查询结果初步判断是系统产生了大量的临时文件导致inode用尽了 排查到底哪个目录下的文件数过多 1234567891011121314151617181920212223242526272829303132333435# 通过下面的命令统计文件数量前十名，这里发现是/var目录中文件异常的多for i in /*; do echo &quot;$(find $i |wc -l):$i&quot;; done | sort -nr | head -n 101815728:/var52498:/usr18804:/proc7333:/sys1834:/lib1447:/opt1047:/etc457:/dev411:/lib64245:/sbin# 接着查看/var中的文件数量for i in /var/*; do echo &quot;$(find $i |wc -l):$i&quot;; done | sort -nr | head -n 101813442:/var/spool2033:/var/lib85:/var/cache82:/var/log39:/var/run24:/var/lock7:/var/db3:/var/yp2:/var/empty2:/var/account# 接着查看/var/spool中的文件数量，这里基本定位到是/var/spool/clientmqueue目录for i in /var/spool/*; do echo &quot;$(find $i |wc -l):$i&quot;; done | sort -nr | head -n 101812413:/var/spool/clientmqueue7:/var/spool/mail4:/var/spool/anacron3:/var/spool/at2:/var/spool/cron1:/var/spool/mqueue1:/var/spool/lpd 百度一下/var/spool/clientmqueue目录的作用 123‌Linux文件目录 /var/spool/clientmqueue/ 下的文件主要是由cron任务产生的输出文件。‌ 当cron任务中有输出内容时，如果服务器上没有配置sendmail服务，这些输出内容就会被保存到 /var/spool/clientmqueue/ 目录内。这是因为cron任务中的命令如果有输出（比如错误信息或者正常的输出信息），默认会通过sendmail发送，但如果服务器上没有配置sendmail服务，这些输出内容就会被保存到 /var/spool/clientmqueue/ 目录中。因此，这个目录下主要包含的是由cron任务产生的输出文件，这些文件记录了cron任务执行过程中的输出信息。如果需要处理这些文件，可以通过修改crontab配置来实现。具体来说，可以在每个cron任务命令的末尾添加重定向操作，将输出内容抛弃，例如使用命令 &gt;/dev/null 2&gt;&amp;1。这样，无论标准输出还是错误输出都会被重定向到 /dev/null，即被抛弃，从而避免在 /var/spool/clientmqueue/ 目录下产生不必要的文件。 上面的解释说明/var/spool/clientmqueue目录下的文件可以被删除，所以直接删了就可以解决该问题了 12345# 文件数量过多，不能这么删除# rm -rf /var/spool/clientmqueue/*# 正确方法find /var/spool/clientmqueue -name &quot;*&quot; -type f | xargs rm -rf 详解inode inode是文件系统内一个重要的数据结构，它用来描述一个文件，包括文件名、文件类型、权限、所有者、创建时间、修改时间等。在Linux系统中，每个文件都有一个唯一的inode号，这个inode号是分配给该文件的，并且不能被改变。 12# 查看当前目录的inode号ls -li 操作系统打开文件时会按如下步骤执行： 查找文件名称对应的inode号 根据inode号获取inode信息 根据inode信息找到文件对应的数据块，读出数据 inode的大小是有限制的，通常取决于文件系统和操作系统。在大多数Linux文件系统中，inode大小通常是128字节或256字节。这是由文件系统在格式化时决定的，并且格式化后不能更改。 1234# 查看inode大小dumpe2fs /dev/xvda1 | grep &quot;Inode size&quot;dumpe2fs 1.43.5 (04-Aug-2017)Inode size: 256 查看文件系统的inode总数 一个inode只对应一个实际文件，所以inodes最大数量就是文件的最大数量。 12345# 查看所有挂载磁盘df -i# 查看指定磁盘df -i /dev/xvda1 不同的文件系统默认的inode数量不同，以1G磁盘空间为例，ext4文件系统默认为65536，xfs文件系统默认为52万(每2k设置一个inode)，并且xfs会动态扩容inode数量。","summary":"摘要 解决Linux索引节点(inode)用满导致故障的方法","date_published":"2024-09-05T14:30:05.000Z","tags":["技术","linux","zabbix","linux","zabbix"]},{"id":"https://blog.hanqunfeng.com/2024/08/02/gradle-depoly-maven-center-repository-new/","url":"https://blog.hanqunfeng.com/2024/08/02/gradle-depoly-maven-center-repository-new/","title":"发布Jar到Maven中央仓库--Gradle版(最新方式)","content_html":"<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\"><a href=\"https://oss.sonatype.org\">https://oss.sonatype.org</a>已经不再支持新用户注册，新的注册地址为<a href=\"https://central.sonatype.com\">https://central.sonatype.com</a></li>\n<li class=\"lvl-2\">通过本文，你将知道如何将Gradle构建的项目发布到Maven中央仓库</li>\n<li class=\"lvl-2\">Maven构建方式请看 <a href=\"/2024/08/01/mvn-depoly-maven-center-repository-new/\" title=\"发布Jar到Maven中央仓库--Maven版(最新方式)\">发布Jar到Maven中央仓库--Maven版(最新方式)</a> 。</li>\n<li class=\"lvl-2\">前三个步骤与 <a href=\"/2024/08/01/mvn-depoly-maven-center-repository-new/\" title=\"发布Jar到Maven中央仓库--Maven版(最新方式)\">发布Jar到Maven中央仓库--Maven版(最新方式)</a> 相同，不在赘述。</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"一、将项目推送到远程仓库，如-Github或者Gitee\">一、将项目推送到远程仓库，如 <code>Github</code>或者<code>Gitee</code></h2>\n<h2 id=\"二、注册-Sonatype-账户\">二、注册 <code>Sonatype</code> 账户</h2>\n<h2 id=\"三、登录-Sonatype-创建Namespace\">三、登录 Sonatype 创建<code>Namespace</code></h2>\n<p>前三个步骤与 <a href=\"/2024/08/01/mvn-depoly-maven-center-repository-new/\" title=\"发布Jar到Maven中央仓库--Maven版(最新方式)\">发布Jar到Maven中央仓库--Maven版(最新方式)</a> 相同，不在赘述。</p>\n<h2 id=\"四、发布\">四、发布</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>签名<br>\n我是mac电脑，于是签名工具使用的是<a href=\"https://gpgtools.org\">https://gpgtools.org</a>，gradle签名时需要使用到<code>.gpg</code>证书文件，这个工具不支持直接导出<code>.gpg</code>，其导出的证书文件是<code>.asc</code>格式的，<code>asc</code>其实就是<code>字符串</code>，可以用记事本打开查看。</p>\n<p>使用如下命令导出<code>.gpg</code>格式的证书：</p>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出当前全部证书</span></span><br><span class=\"line\">gpg -k</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导出私钥，qunfeng_han@126.com是创建证书时使用的邮箱，会要求你输入创建证书时的密码</span></span><br><span class=\"line\">gpg --output private.pgp --armor --export-secret-key qunfeng_han@126.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导出公钥</span></span><br><span class=\"line\">gpg --output public.pgp --armor --<span class=\"built_in\">export</span> qunfeng_han@126.com</span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>build.gradle<br>\n官方没有出gradle发布插件，但是<a href=\"https://central.sonatype.org/publish/publish-portal-gradle/\">官网</a>推荐使用第三方的<a href=\"https://jreleaser.org/guide/latest/examples/maven/maven-central.html#_gradle\">jreleaser</a>插件。</p>\n</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\"><span class=\"comment\">//    id &#x27;io.spring.dependency-management&#x27; version &#x27;1.0.10.RELEASE&#x27;</span></span><br><span class=\"line\">    id <span class=\"string\">&#x27;io.spring.dependency-management&#x27;</span> version <span class=\"string\">&#x27;1.1.6&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//此处必须是java-library，如果是java则api方法不可用，api可以理解为就是compile，支持传递依赖</span></span><br><span class=\"line\">    id <span class=\"string\">&#x27;java-library&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//发布插件</span></span><br><span class=\"line\">    id <span class=\"string\">&#x27;maven-publish&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//自动发布到maven中央仓库插件</span></span><br><span class=\"line\">    <span class=\"comment\">//https://jreleaser.org/guide/latest/examples/maven/maven-central.html#_gradle</span></span><br><span class=\"line\">    id <span class=\"string\">&#x27;org.jreleaser&#x27;</span> version <span class=\"string\">&#x27;1.13.1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> = <span class=\"string\">&#x27;io.github.hanqunfeng&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//version = &#x27;1.0.0-SNAPSHOT&#x27;</span></span><br><span class=\"line\">version = <span class=\"string\">&#x27;1.0.1&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">sourceCompatibility</span> = <span class=\"string\">&#x27;1.8&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">java &#123;</span><br><span class=\"line\">    withJavadocJar()</span><br><span class=\"line\">    withSourcesJar()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">    maven &#123; url <span class=\"string\">&#x27;https://maven.aliyun.com/repository/public/&#x27;</span> &#125;</span><br><span class=\"line\">    mavenLocal()</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencyManagement &#123;</span><br><span class=\"line\">    imports &#123; mavenBom(<span class=\"string\">&quot;software.amazon.awssdk:bom:2.23.10&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//lombok</span></span><br><span class=\"line\">    compileOnly <span class=\"string\">&#x27;org.projectlombok:lombok:1.18.32&#x27;</span></span><br><span class=\"line\">    annotationProcessor <span class=\"string\">&#x27;org.projectlombok:lombok:1.18.32&#x27;</span></span><br><span class=\"line\">    api <span class=\"string\">&#x27;software.amazon.awssdk:s3&#x27;</span></span><br><span class=\"line\">    api <span class=\"string\">&#x27;software.amazon.awssdk:apache-client&#x27;</span></span><br><span class=\"line\">    api <span class=\"string\">&#x27;software.amazon.awssdk:s3-transfer-manager&#x27;</span></span><br><span class=\"line\">    api <span class=\"string\">&#x27;software.amazon.awssdk:aws-crt-client&#x27;</span></span><br><span class=\"line\">    api <span class=\"string\">&#x27;org.springframework:spring-core:5.3.29&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// java编译的时候缺省状态下会因为中文字符而失败</span></span><br><span class=\"line\">[compileJava, compileTestJava]*.<span class=\"keyword\">options</span>*.encoding = <span class=\"string\">&#x27;UTF-8&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发布插件</span></span><br><span class=\"line\"><span class=\"comment\"> * 参考：https://docs.gradle.org/6.6.1/userguide/publishing_maven.html#publishing_maven:resolved_dependencies</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 发布为bom，参考：https://zhuanlan.zhihu.com/p/195678201</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意：java-platform不能与java和java-library同时存在</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">publishing &#123;</span><br><span class=\"line\">    publications &#123;</span><br><span class=\"line\">        maven(MavenPublication) &#123;</span><br><span class=\"line\">            groupId = <span class=\"keyword\">project</span>.<span class=\"keyword\">group</span></span><br><span class=\"line\">            artifactId = <span class=\"keyword\">project</span>.name</span><br><span class=\"line\">            version = <span class=\"keyword\">project</span>.version</span><br><span class=\"line\">            <span class=\"comment\">//如果不定义，则会按照以上默认值执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">from</span> components.java</span><br><span class=\"line\"></span><br><span class=\"line\">            pom &#123;</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;aws-s3-v2-tools-gradle&#x27;</span></span><br><span class=\"line\">                <span class=\"keyword\">description</span> = <span class=\"string\">&#x27;AWS S3 Tools.&#x27;</span></span><br><span class=\"line\">                url = <span class=\"string\">&#x27;https://blog.hanqunfeng.com&#x27;</span></span><br><span class=\"line\">                licenses &#123;</span><br><span class=\"line\">                    license &#123;</span><br><span class=\"line\">                        name = <span class=\"string\">&#x27;The Apache License, Version 2.0&#x27;</span></span><br><span class=\"line\">                        url = <span class=\"string\">&#x27;http://www.apache.org/licenses/LICENSE-2.0.txt&#x27;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                developers &#123;</span><br><span class=\"line\">                    developer &#123;</span><br><span class=\"line\">                        id = <span class=\"string\">&#x27;hanqf&#x27;</span></span><br><span class=\"line\">                        name = <span class=\"string\">&#x27;han qunfeng&#x27;</span></span><br><span class=\"line\">                        email = <span class=\"string\">&#x27;qunfeng_han@126.com&#x27;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                scm &#123;</span><br><span class=\"line\">                    connection = <span class=\"string\">&#x27;scm:git:https://github.com/hanqunfeng/aws-s3-v2-tools-gradle.git&#x27;</span></span><br><span class=\"line\">                    developerConnection = <span class=\"string\">&#x27;scm:git:https://github.com:hanqunfeng/aws-s3-v2-tools-gradle.git&#x27;</span></span><br><span class=\"line\">                    url = <span class=\"string\">&#x27;https://github.com/hanqunfeng/aws-s3-v2-tools-gradle&#x27;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            versionMapping &#123;</span><br><span class=\"line\">                usage(<span class=\"string\">&#x27;java-api&#x27;</span>) &#123;</span><br><span class=\"line\">                    fromResolutionOf(<span class=\"string\">&#x27;runtimeClasspath&#x27;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                usage(<span class=\"string\">&#x27;java-runtime&#x27;</span>) &#123;</span><br><span class=\"line\">                    fromResolutionResult()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url = layout.buildDirectory.dir(<span class=\"string\">&#x27;staging-deploy&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tasks.withType(JavaCompile) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">options</span>.encoding = <span class=\"string\">&#x27;UTF-8&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//javadoc，如果用jdk11，默认就支持中文</span></span><br><span class=\"line\"><span class=\"comment\">//查看可以配置的属性：https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html</span></span><br><span class=\"line\">tasks.withType(Javadoc) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">options</span>.version = <span class=\"keyword\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">options</span>.author = <span class=\"keyword\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">options</span>.encoding = <span class=\"string\">&quot;UTF-8&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">options</span>.charSet = <span class=\"string\">&quot;UTF-8&quot;</span>  <span class=\"comment\">//解决中文乱码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">javadoc &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JavaVersion.current().isJava9Compatible()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">options</span>.addBooleanOption(<span class=\"string\">&#x27;html5&#x27;</span>, <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JavaVersion.current().isJava8Compatible()) &#123;</span><br><span class=\"line\">        tasks.withType(Javadoc) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// disable the crazy super-strict doclint tool in Java 8</span></span><br><span class=\"line\">            <span class=\"comment\">// noinspection SpellCheckingInspection</span></span><br><span class=\"line\">            <span class=\"keyword\">options</span>.addStringOption(<span class=\"string\">&#x27;Xdoclint:none&#x27;</span>, <span class=\"string\">&#x27;-quiet&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jreleaser配置文件：~/.jreleaser/config.toml</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">JRELEASER_MAVENCENTRAL_USERNAME = &quot;&lt;your-publisher-portal-username&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">JRELEASER_MAVENCENTRAL_PASSWORD = &quot;&lt;your-publisher-portal-password&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">JRELEASER_NEXUS2_USERNAME = &quot;&lt;your-sonatype-account-username&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">JRELEASER_NEXUS2_PASSWORD = &quot;&lt;your-sonatype-account-password&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">JRELEASER_GPG_PASSPHRASE = &quot;&lt;your-pgp-passphrase&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">JRELEASER_GITHUB_TOKEN = &quot;&lt;your-github-token&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">jreleaser &#123;</span><br><span class=\"line\">    signing &#123;</span><br><span class=\"line\">        active = <span class=\"string\">&#x27;ALWAYS&#x27;</span></span><br><span class=\"line\">        armored = <span class=\"keyword\">true</span></span><br><span class=\"line\">        mode = <span class=\"string\">&#x27;FILE&#x27;</span></span><br><span class=\"line\">        publicKey = <span class=\"string\">&#x27;/Users/hanqf/develop_soft/gpg_key/hanqf/public.pgp&#x27;</span></span><br><span class=\"line\">        secretKey = <span class=\"string\">&#x27;/Users/hanqf/develop_soft/gpg_key/hanqf/private.pgp&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deploy &#123;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* Portal Publisher API */</span></span><br><span class=\"line\">            mavenCentral &#123;</span><br><span class=\"line\">                sonatype &#123;</span><br><span class=\"line\">                    active = <span class=\"string\">&#x27;ALWAYS&#x27;</span></span><br><span class=\"line\">                    url = <span class=\"string\">&#x27;https://central.sonatype.com/api/v1/publisher&#x27;</span></span><br><span class=\"line\">                    stagingRepository(<span class=\"string\">&#x27;build/staging-deploy&#x27;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>~/.jreleaser/config.toml ：配置相关认证信息</p>\n</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://central.sonatype.com 的认证信息</span></span><br><span class=\"line\"><span class=\"attr\">JRELEASER_MAVENCENTRAL_USERNAME</span> = <span class=\"string\">&quot;&lt;your-publisher-portal-username&gt;&quot;</span></span><br><span class=\"line\"><span class=\"attr\">JRELEASER_MAVENCENTRAL_PASSWORD</span> = <span class=\"string\">&quot;&lt;your-publisher-portal-password&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># https://oss.sonatype.org 的认证信息，这里没有用到，可以不进行配置</span></span><br><span class=\"line\"><span class=\"attr\">JRELEASER_NEXUS2_USERNAME</span> = <span class=\"string\">&quot;&lt;your-sonatype-account-username&gt;&quot;</span></span><br><span class=\"line\"><span class=\"attr\">JRELEASER_NEXUS2_PASSWORD</span> = <span class=\"string\">&quot;&lt;your-sonatype-account-password&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 创建 pgp 密钥时的密码</span></span><br><span class=\"line\"><span class=\"attr\">JRELEASER_GPG_PASSPHRASE</span> = <span class=\"string\">&quot;&lt;your-pgp-passphrase&gt;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># github token</span></span><br><span class=\"line\"><span class=\"attr\">JRELEASER_GITHUB_TOKEN</span> = <span class=\"string\">&quot;&lt;your-github-token&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>执行命令</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew jreleaserConfig <span class=\"comment\"># 验证配置文件是否正确</span></span><br><span class=\"line\">./gradlew clean publish <span class=\"comment\"># 发布到本地 build/staging-deploy</span></span><br><span class=\"line\">./gradlew jreleaserFullRelease <span class=\"comment\"># 发布到远程Maven中央仓库</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>更新部署<br>\n与 <a href=\"/2024/08/01/mvn-depoly-maven-center-repository-new/\" title=\"发布Jar到Maven中央仓库--Maven版(最新方式)\">发布Jar到Maven中央仓库--Maven版(最新方式)</a> 中的描述类似，只需要修改<code>build.gradle</code>中对应的版本号后重新执行上面的发布命令即可，发布的jar包可以在<a href=\"https://central.sonatype.com\">https://central.sonatype.com</a>中检索。</p>\n</li>\n</ul>\n","content_text":"摘要 https://oss.sonatype.org已经不再支持新用户注册，新的注册地址为https://central.sonatype.com 通过本文，你将知道如何将Gradle构建的项目发布到Maven中央仓库 Maven构建方式请看 发布Jar到Maven中央仓库--Maven版(最新方式) 。 前三个步骤与 发布Jar到Maven中央仓库--Maven版(最新方式) 相同，不在赘述。 一、将项目推送到远程仓库，如 Github或者Gitee 二、注册 Sonatype 账户 三、登录 Sonatype 创建Namespace 前三个步骤与 发布Jar到Maven中央仓库--Maven版(最新方式) 相同，不在赘述。 四、发布 签名 我是mac电脑，于是签名工具使用的是https://gpgtools.org，gradle签名时需要使用到.gpg证书文件，这个工具不支持直接导出.gpg，其导出的证书文件是.asc格式的，asc其实就是字符串，可以用记事本打开查看。 使用如下命令导出.gpg格式的证书： 12345678# 列出当前全部证书gpg -k# 导出私钥，qunfeng_han@126.com是创建证书时使用的邮箱，会要求你输入创建证书时的密码gpg --output private.pgp --armor --export-secret-key qunfeng_han@126.com# 导出公钥gpg --output public.pgp --armor --export qunfeng_han@126.com build.gradle 官方没有出gradle发布插件，但是官网推荐使用第三方的jreleaser插件。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170plugins &#123;// id &#x27;io.spring.dependency-management&#x27; version &#x27;1.0.10.RELEASE&#x27; id &#x27;io.spring.dependency-management&#x27; version &#x27;1.1.6&#x27; //此处必须是java-library，如果是java则api方法不可用，api可以理解为就是compile，支持传递依赖 id &#x27;java-library&#x27; //发布插件 id &#x27;maven-publish&#x27; //自动发布到maven中央仓库插件 //https://jreleaser.org/guide/latest/examples/maven/maven-central.html#_gradle id &#x27;org.jreleaser&#x27; version &#x27;1.13.1&#x27;&#125;group = &#x27;io.github.hanqunfeng&#x27;//version = &#x27;1.0.0-SNAPSHOT&#x27;version = &#x27;1.0.1&#x27;sourceCompatibility = &#x27;1.8&#x27;java &#123; withJavadocJar() withSourcesJar()&#125;repositories &#123; maven &#123; url &#x27;https://maven.aliyun.com/repository/public/&#x27; &#125; mavenLocal() mavenCentral()&#125;dependencyManagement &#123; imports &#123; mavenBom(&quot;software.amazon.awssdk:bom:2.23.10&quot;) &#125;&#125;dependencies &#123; //lombok compileOnly &#x27;org.projectlombok:lombok:1.18.32&#x27; annotationProcessor &#x27;org.projectlombok:lombok:1.18.32&#x27; api &#x27;software.amazon.awssdk:s3&#x27; api &#x27;software.amazon.awssdk:apache-client&#x27; api &#x27;software.amazon.awssdk:s3-transfer-manager&#x27; api &#x27;software.amazon.awssdk:aws-crt-client&#x27; api &#x27;org.springframework:spring-core:5.3.29&#x27;&#125;// java编译的时候缺省状态下会因为中文字符而失败[compileJava, compileTestJava]*.options*.encoding = &#x27;UTF-8&#x27;/** * 发布插件 * 参考：https://docs.gradle.org/6.6.1/userguide/publishing_maven.html#publishing_maven:resolved_dependencies * * 发布为bom，参考：https://zhuanlan.zhihu.com/p/195678201 * 注意：java-platform不能与java和java-library同时存在 */publishing &#123; publications &#123; maven(MavenPublication) &#123; groupId = project.group artifactId = project.name version = project.version //如果不定义，则会按照以上默认值执行 from components.java pom &#123; name = &#x27;aws-s3-v2-tools-gradle&#x27; description = &#x27;AWS S3 Tools.&#x27; url = &#x27;https://blog.hanqunfeng.com&#x27; licenses &#123; license &#123; name = &#x27;The Apache License, Version 2.0&#x27; url = &#x27;http://www.apache.org/licenses/LICENSE-2.0.txt&#x27; &#125; &#125; developers &#123; developer &#123; id = &#x27;hanqf&#x27; name = &#x27;han qunfeng&#x27; email = &#x27;qunfeng_han@126.com&#x27; &#125; &#125; scm &#123; connection = &#x27;scm:git:https://github.com/hanqunfeng/aws-s3-v2-tools-gradle.git&#x27; developerConnection = &#x27;scm:git:https://github.com:hanqunfeng/aws-s3-v2-tools-gradle.git&#x27; url = &#x27;https://github.com/hanqunfeng/aws-s3-v2-tools-gradle&#x27; &#125; &#125; versionMapping &#123; usage(&#x27;java-api&#x27;) &#123; fromResolutionOf(&#x27;runtimeClasspath&#x27;) &#125; usage(&#x27;java-runtime&#x27;) &#123; fromResolutionResult() &#125; &#125; &#125; &#125; repositories &#123; maven &#123; url = layout.buildDirectory.dir(&#x27;staging-deploy&#x27;) &#125; &#125;&#125;tasks.withType(JavaCompile) &#123; options.encoding = &#x27;UTF-8&#x27;&#125;//javadoc，如果用jdk11，默认就支持中文//查看可以配置的属性：https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.htmltasks.withType(Javadoc) &#123; options.version = true options.author = true options.encoding = &quot;UTF-8&quot; options.charSet = &quot;UTF-8&quot; //解决中文乱码&#125;javadoc &#123; if (JavaVersion.current().isJava9Compatible()) &#123; options.addBooleanOption(&#x27;html5&#x27;, true) &#125; if (JavaVersion.current().isJava8Compatible()) &#123; tasks.withType(Javadoc) &#123; // disable the crazy super-strict doclint tool in Java 8 // noinspection SpellCheckingInspection options.addStringOption(&#x27;Xdoclint:none&#x27;, &#x27;-quiet&#x27;) &#125; &#125;&#125;// jreleaser配置文件：~/.jreleaser/config.toml/*JRELEASER_MAVENCENTRAL_USERNAME = &quot;&lt;your-publisher-portal-username&gt;&quot;JRELEASER_MAVENCENTRAL_PASSWORD = &quot;&lt;your-publisher-portal-password&gt;&quot;JRELEASER_NEXUS2_USERNAME = &quot;&lt;your-sonatype-account-username&gt;&quot;JRELEASER_NEXUS2_PASSWORD = &quot;&lt;your-sonatype-account-password&gt;&quot;JRELEASER_GPG_PASSPHRASE = &quot;&lt;your-pgp-passphrase&gt;&quot;JRELEASER_GITHUB_TOKEN = &quot;&lt;your-github-token&quot; */jreleaser &#123; signing &#123; active = &#x27;ALWAYS&#x27; armored = true mode = &#x27;FILE&#x27; publicKey = &#x27;/Users/hanqf/develop_soft/gpg_key/hanqf/public.pgp&#x27; secretKey = &#x27;/Users/hanqf/develop_soft/gpg_key/hanqf/private.pgp&#x27; &#125; deploy &#123; maven &#123; /* Portal Publisher API */ mavenCentral &#123; sonatype &#123; active = &#x27;ALWAYS&#x27; url = &#x27;https://central.sonatype.com/api/v1/publisher&#x27; stagingRepository(&#x27;build/staging-deploy&#x27;) &#125; &#125; &#125; &#125;&#125; ~/.jreleaser/config.toml ：配置相关认证信息 12345678910# https://central.sonatype.com 的认证信息JRELEASER_MAVENCENTRAL_USERNAME = &quot;&lt;your-publisher-portal-username&gt;&quot;JRELEASER_MAVENCENTRAL_PASSWORD = &quot;&lt;your-publisher-portal-password&gt;&quot;# https://oss.sonatype.org 的认证信息，这里没有用到，可以不进行配置JRELEASER_NEXUS2_USERNAME = &quot;&lt;your-sonatype-account-username&gt;&quot;JRELEASER_NEXUS2_PASSWORD = &quot;&lt;your-sonatype-account-password&gt;&quot;# 创建 pgp 密钥时的密码JRELEASER_GPG_PASSPHRASE = &quot;&lt;your-pgp-passphrase&gt;&quot;# github tokenJRELEASER_GITHUB_TOKEN = &quot;&lt;your-github-token&quot; 执行命令 123./gradlew jreleaserConfig # 验证配置文件是否正确./gradlew clean publish # 发布到本地 build/staging-deploy./gradlew jreleaserFullRelease # 发布到远程Maven中央仓库 更新部署 与 发布Jar到Maven中央仓库--Maven版(最新方式) 中的描述类似，只需要修改build.gradle中对应的版本号后重新执行上面的发布命令即可，发布的jar包可以在https://central.sonatype.com中检索。","summary":"摘要 https://oss.sonatype.org已经不再支持新用户注册，新的注册地址为https://central.sonatype.com 通过本文，你将知道如何将Gradle构建的项目发布到Maven中央仓库 Maven构建方式请看 发布Jar到Maven中央仓库--Maven版(最新方式) 。 前三个步骤与 发布Jar到Maven中央仓库--Maven版(最新方式) 相同，不在赘述。","date_published":"2024-08-02T13:30:05.000Z","tags":["技术","maven","gradle"]},{"id":"https://blog.hanqunfeng.com/2024/08/01/mvn-depoly-maven-center-repository-new/","url":"https://blog.hanqunfeng.com/2024/08/01/mvn-depoly-maven-center-repository-new/","title":"发布Jar到Maven中央仓库--Maven版(最新方式)","content_html":"<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\"><a href=\"https://oss.sonatype.org\">https://oss.sonatype.org</a>已经不再支持新用户注册，新的注册地址为<a href=\"https://central.sonatype.com\">https://central.sonatype.com</a></li>\n<li class=\"lvl-2\">通过本文，你将知道如何将Maven构建的项目发布到Maven中央仓库</li>\n<li class=\"lvl-2\">Gradle构建方式请看 <a href=\"/2024/08/02/gradle-depoly-maven-center-repository-new/\" title=\"发布Jar到Maven中央仓库--Gradle版(最新方式)\">发布Jar到Maven中央仓库--Gradle版(最新方式)</a> 。</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"一、将项目推送到远程仓库，如-Github或者Gitee\">一、将项目推送到远程仓库，如 <code>Github</code>或者<code>Gitee</code></h2>\n<h2 id=\"二、注册-Sonatype-账户\">二、注册 <code>Sonatype</code> 账户</h2>\n<p>进入 <a href=\"https://central.sonatype.com\">https://central.sonatype.com</a> 注册一个账号，邮箱要真实。</p>\n<h2 id=\"三、登录-Sonatype-创建Namespace\">三、登录 Sonatype 创建<code>Namespace</code></h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>进入 Namespace 模块，然后点击 Add Namespace 按钮，Namespace 具有唯一性</p>\n</li>\n<li class=\"lvl-2\">\n<p>发布前一定要创建<code>Namespace</code>，实际上就是项目的<code>Group Id</code>，因为要进行验证，所以这里不能随便填写，你可以配置为你拥有的域名，比如我的域名是<code>hanqunfeng.com</code>，这里就填写<code>com.hanqunfeng</code>。域名的验证方法是配置DNS TXT记录。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果你没有域名，也可以使用Github的域名，比如我的Github用户名是<code>hanqunfeng</code>，则这里可以配置为<code>io.github.hanqunfeng</code>。Github的验证方式是根据给定个名称创建一个public repository。</p>\n</li>\n</ul>\n<h2 id=\"四、发布\">四、发布</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>1.准备签名</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">可以使用工具创建密钥对<br>\n需要下载一个签名工具，我是mac电脑，下载的是<a href=\"https://gpgtools.org\">https://gpgtools.org</a>。<br>\n安装后点击新建，按照提示创建一个密钥对即可，注意高级选项里有个过期时间，默认是<code>3年</code>。创建好后会主动提示你是否将公钥发布到<code>key server</code>，点击<code>Upload Public key</code>即可。也可以在创建后的证书列表页面邮件选择<code>证书</code>–&gt;<code>Send Public Key To Key Server</code>。</li>\n</ul>\n<p>导出证书时，勾选密码并设置密码就是私钥和公钥证书，不勾选密码就是公钥，看生成文件的名称就可以，公开就是公钥，私密就是私钥，格式都是<code>asc</code>，其实就是<code>字符串</code>，可以用记事本打开查看。</p>\n<p>如果windows系统，可以下载<a href=\"https://www.gpg4win.org/\">https://www.gpg4win.org/</a> ，使用方式差不多，最后点击“将公钥上传的目录服务”。</p>\n<p>公钥发布到<code>key server</code>后要稍微等一会，大约<code>10分钟</code>吧，因为<code>key server</code>有多个，同步需要一些时间。<br>\n记住你创建密钥对时的密码，发布项目时要使用。</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">\n<p>也可以使用命令行创建密钥对，版本<code>[gpg (GnuPG/MacGPG2) 2.2.24]</code></p>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建密钥对，按提示输入用户名称和邮箱地址</span></span><br><span class=\"line\">gpg --generate-key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出密钥，hanqunfeng就是创建密钥对是的用户名，此处也可以使用邮箱</span></span><br><span class=\"line\"><span class=\"comment\"># 结果中第二行一长串的后8位就是keyId，比如：30FF8D58，gradle构建时会用到</span></span><br><span class=\"line\">gpg --list-keys hanqunfeng</span><br><span class=\"line\"><span class=\"comment\"># 也可以直接通过id查询</span></span><br><span class=\"line\">gpg --list-keys 30FF8D58</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传公钥到server key，默认上传到hkps://keys.openpgp.org，但是提示上传失败</span></span><br><span class=\"line\"><span class=\"comment\"># 看到网上的示例可以通过--keyserver指定上传的服务器地址，但是我这个版本[gpg (GnuPG/MacGPG2) 2.2.24]没有这个参数</span></span><br><span class=\"line\"><span class=\"comment\"># 使用 https://gpgtools.org 上传公钥就会成功</span></span><br><span class=\"line\">gpg --send-keys 30FF8D58</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指纹</span></span><br><span class=\"line\">gpg --fingerprint 30FF8D58</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除私钥，这里也可以使用用户名称或者邮箱，如果唯一的话</span></span><br><span class=\"line\">gpg --delete-secret-keys 30FF8D58</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除公钥</span></span><br><span class=\"line\">gpg --delete-keys 30FF8D58</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>2.settings.xml<br>\n配置 <code>maven</code> 的 <code>settings.xml</code> 文件，设置一个 <code>server</code>，里面添加 <code>User Token</code>。</p>\n</li>\n</ul>\n<blockquote>\n<p>登录<a href=\"https://central.sonatype.com\">https://central.sonatype.com</a>后点击右上角的用户名称–&gt; View Account --&gt; Generate User Token</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">    [...]</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">       [...]</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven-central<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>username<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>token<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>3.pom.xml，重点是后面几个plugin<br>\n这里重点说一下<code>central-publishing-maven-plugin</code>这个插件，该插件会将jar包推送到<code>Maven Central</code>仓库，如果插件没有配置参数<code>autoPublish</code>为<code>true</code>，则但此时发布的jar会处于<code>VALIDATED</code>状态，需要登录<a href=\"https://central.sonatype.com\">https://central.sonatype.com</a>后切换到Deployment，找到我们刚刚上传的包名，然后点击右侧的<code>Publish</code>按钮，如果一切顺利，大于10分钟后其状态变为<code>PUBLISHED</code>，表示发布成功。如果发布失败，其状态会变更为<code>FAILED</code>，可以在<code>Component Summary</code>中查看失败原因，重新发布即可。</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.hanqunfeng<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aws-s3-v2-tools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aws-s3-v2-tools<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">        AWS S3 Tools.</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://blog.hanqunfeng.com<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">licenses</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>The Apache License, Version 2.0<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">licenses</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">developers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">developer</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>hanqf<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hanqunfeng<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">email</span>&gt;</span>qunfeng_han@126.com<span class=\"tag\">&lt;/<span class=\"name\">email</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">developer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">developers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scm</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">connection</span>&gt;</span>scm:git:https://github.com/hanqunfeng/aws-s3-v2-tools.git</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">connection</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">developerConnection</span>&gt;</span></span><br><span class=\"line\">            scm:git:https://github.com:hanqunfeng/aws-s3-v2-tools.git</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">developerConnection</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://github.com/hanqunfeng/aws-s3-v2-tools<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">scm</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>software.amazon.awssdk<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>bom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.23.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>software.amazon.awssdk<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>s3<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 为避免Potential Conflicts，你应该将commons-logging.jar从classpath中删除。你可以尝试从项目依赖中排除commons-logging，这样你的应用程序就会被强制使用Spring JCL而不是Commons Logging。 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 问题：Standard Commons Logging discovery in action with spring-jcl: please remove commons-logging.jar from classpath in order to avoid potential conflicts --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>software.amazon.awssdk<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>apache-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>software.amazon.awssdk<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>s3-transfer-manager<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>software.amazon.awssdk<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aws-crt-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.29<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>$&#123;java.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>$&#123;java.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>attach-source<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>verify<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"comment\">&lt;!--生成源代码的jar --&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-javadoc-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>attach-javadoc<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>verify<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"comment\">&lt;!--生成javadoc的jar --&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"comment\">&lt;!--生成javadoc的html --&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>javadoc<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"comment\">&lt;!--不显示javadoc警告--&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">additionalOptions</span>&gt;</span>-Xdoclint:none<span class=\"tag\">&lt;/<span class=\"name\">additionalOptions</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">additionalJOption</span>&gt;</span>-Xdoclint:none<span class=\"tag\">&lt;/<span class=\"name\">additionalJOption</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- gpg plugin,用于签名认证 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-gpg-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>sign-artifacts<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>verify<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>sign<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 发布到私服时需要注释掉下面两个插件 --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--staging puglin,用于自动执行发布阶段(免手动)--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.sonatype.central<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>central-publishing-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">extensions</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">extensions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 这里的publishingServerId是在settings.xml中配置的server认证信息 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">publishingServerId</span>&gt;</span>maven-central<span class=\"tag\">&lt;/<span class=\"name\">publishingServerId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 这里的autoPublish是自动发布，而不是手动发布 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">autoPublish</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">autoPublish</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 这里的waitUntil配置为published是等待发布完成，因为发布完成的时间比较长，所以可以不加这个参数 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">waitUntil</span>&gt;</span>published<span class=\"tag\">&lt;/<span class=\"name\">waitUntil</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 这里的deploymentName是发布到中央仓库的名称 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">deploymentName</span>&gt;</span>$&#123;project.groupId&#125;:$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">deploymentName</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- release plugin,用于发布到release仓库部署插件 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-release-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">distributionManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--        &lt;repository&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--            &lt;id&gt;maven-releases&lt;/id&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--            &lt;name&gt;Nexus Release Repository&lt;/name&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--            &lt;url&gt;http://nexus.cxzh.ltd:8081/repository/maven-releases/&lt;/url&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--        &lt;/repository&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--        &lt;snapshotRepository&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--            &lt;id&gt;maven-snapshots&lt;/id&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--            &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--            &lt;url&gt;http://nexus.cxzh.ltd:8081/repository/maven-snapshots/&lt;/url&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--        &lt;/snapshotRepository&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">distributionManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>4.执行命令</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package # 完成打包和测试</span><br><span class=\"line\">mvn clean verify  # 完成源码打包和javadoc打包，同时完成签名</span><br><span class=\"line\">mvn clean deploy  # 完成本地部署和maven中央仓库部署</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>4.1 执行过程中会提示你输入创建密钥对时的密码，如果不想人工参与，也可以使用如下方式（参考：<a href=\"http://maven.apache.org/plugins/maven-gpg-plugin/usage.html%EF%BC%89\">http://maven.apache.org/plugins/maven-gpg-plugin/usage.html）</a></p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>a.在执行命令时指定密码：</p>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean deploy -Dgpg.passphrase=thephrase</span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>b.setting.xml中创建一个server</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">[...]</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">    [...]</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>gpg.passphrase<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">passphrase</span>&gt;</span>clear or encrypted text<span class=\"tag\">&lt;/<span class=\"name\">passphrase</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>6.更新部署<br>\n修改<code>pom.xml</code>中的版本号，重新执行<code>mvn clean deploy</code>即可。发布的jar包可以在<a href=\"https://central.sonatype.com\">https://central.sonatype.com</a>中检索。</p>\n</li>\n</ul>\n","content_text":"摘要 https://oss.sonatype.org已经不再支持新用户注册，新的注册地址为https://central.sonatype.com 通过本文，你将知道如何将Maven构建的项目发布到Maven中央仓库 Gradle构建方式请看 发布Jar到Maven中央仓库--Gradle版(最新方式) 。 一、将项目推送到远程仓库，如 Github或者Gitee 二、注册 Sonatype 账户 进入 https://central.sonatype.com 注册一个账号，邮箱要真实。 三、登录 Sonatype 创建Namespace 进入 Namespace 模块，然后点击 Add Namespace 按钮，Namespace 具有唯一性 发布前一定要创建Namespace，实际上就是项目的Group Id，因为要进行验证，所以这里不能随便填写，你可以配置为你拥有的域名，比如我的域名是hanqunfeng.com，这里就填写com.hanqunfeng。域名的验证方法是配置DNS TXT记录。 如果你没有域名，也可以使用Github的域名，比如我的Github用户名是hanqunfeng，则这里可以配置为io.github.hanqunfeng。Github的验证方式是根据给定个名称创建一个public repository。 四、发布 1.准备签名 可以使用工具创建密钥对 需要下载一个签名工具，我是mac电脑，下载的是https://gpgtools.org。 安装后点击新建，按照提示创建一个密钥对即可，注意高级选项里有个过期时间，默认是3年。创建好后会主动提示你是否将公钥发布到key server，点击Upload Public key即可。也可以在创建后的证书列表页面邮件选择证书–&gt;Send Public Key To Key Server。 导出证书时，勾选密码并设置密码就是私钥和公钥证书，不勾选密码就是公钥，看生成文件的名称就可以，公开就是公钥，私密就是私钥，格式都是asc，其实就是字符串，可以用记事本打开查看。 如果windows系统，可以下载https://www.gpg4win.org/ ，使用方式差不多，最后点击“将公钥上传的目录服务”。 公钥发布到key server后要稍微等一会，大约10分钟吧，因为key server有多个，同步需要一些时间。 记住你创建密钥对时的密码，发布项目时要使用。 也可以使用命令行创建密钥对，版本[gpg (GnuPG/MacGPG2) 2.2.24] 12345678910111213141516171819202122# 创建密钥对，按提示输入用户名称和邮箱地址gpg --generate-key# 列出密钥，hanqunfeng就是创建密钥对是的用户名，此处也可以使用邮箱# 结果中第二行一长串的后8位就是keyId，比如：30FF8D58，gradle构建时会用到gpg --list-keys hanqunfeng# 也可以直接通过id查询gpg --list-keys 30FF8D58# 上传公钥到server key，默认上传到hkps://keys.openpgp.org，但是提示上传失败# 看到网上的示例可以通过--keyserver指定上传的服务器地址，但是我这个版本[gpg (GnuPG/MacGPG2) 2.2.24]没有这个参数# 使用 https://gpgtools.org 上传公钥就会成功gpg --send-keys 30FF8D58# 查看指纹gpg --fingerprint 30FF8D58# 删除私钥，这里也可以使用用户名称或者邮箱，如果唯一的话gpg --delete-secret-keys 30FF8D58# 删除公钥gpg --delete-keys 30FF8D58 2.settings.xml 配置 maven 的 settings.xml 文件，设置一个 server，里面添加 User Token。 登录https://central.sonatype.com后点击右上角的用户名称–&gt; View Account --&gt; Generate User Token 1234567891011&lt;settings&gt; [...] &lt;servers&gt; [...] &lt;server&gt; &lt;id&gt;maven-central&lt;/id&gt; &lt;username&gt;username&lt;/username&gt; &lt;password&gt;token&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt;&lt;/settings&gt; 3.pom.xml，重点是后面几个plugin 这里重点说一下central-publishing-maven-plugin这个插件，该插件会将jar包推送到Maven Central仓库，如果插件没有配置参数autoPublish为true，则但此时发布的jar会处于VALIDATED状态，需要登录https://central.sonatype.com后切换到Deployment，找到我们刚刚上传的包名，然后点击右侧的Publish按钮，如果一切顺利，大于10分钟后其状态变为PUBLISHED，表示发布成功。如果发布失败，其状态会变更为FAILED，可以在Component Summary中查看失败原因，重新发布即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;io.github.hanqunfeng&lt;/groupId&gt; &lt;artifactId&gt;aws-s3-v2-tools&lt;/artifactId&gt; &lt;version&gt;1.0.1&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;aws-s3-v2-tools&lt;/name&gt; &lt;description&gt; AWS S3 Tools. &lt;/description&gt; &lt;url&gt;https://blog.hanqunfeng.com&lt;/url&gt; &lt;licenses&gt; &lt;license&gt; &lt;name&gt;The Apache License, Version 2.0&lt;/name&gt; &lt;url&gt;http://www.apache.org/licenses/LICENSE-2.0.txt&lt;/url&gt; &lt;/license&gt; &lt;/licenses&gt; &lt;developers&gt; &lt;developer&gt; &lt;id&gt;hanqf&lt;/id&gt; &lt;name&gt;hanqunfeng&lt;/name&gt; &lt;email&gt;qunfeng_han@126.com&lt;/email&gt; &lt;/developer&gt; &lt;/developers&gt; &lt;scm&gt; &lt;connection&gt;scm:git:https://github.com/hanqunfeng/aws-s3-v2-tools.git &lt;/connection&gt; &lt;developerConnection&gt; scm:git:https://github.com:hanqunfeng/aws-s3-v2-tools.git &lt;/developerConnection&gt; &lt;url&gt;https://github.com/hanqunfeng/aws-s3-v2-tools&lt;/url&gt; &lt;/scm&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;/properties&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt; &lt;artifactId&gt;bom&lt;/artifactId&gt; &lt;version&gt;2.23.10&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt; &lt;artifactId&gt;s3&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 为避免Potential Conflicts，你应该将commons-logging.jar从classpath中删除。你可以尝试从项目依赖中排除commons-logging，这样你的应用程序就会被强制使用Spring JCL而不是Commons Logging。 --&gt; &lt;!-- 问题：Standard Commons Logging discovery in action with spring-jcl: please remove commons-logging.jar from classpath in order to avoid potential conflicts --&gt; &lt;dependency&gt; &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt; &lt;artifactId&gt;apache-client&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt; &lt;artifactId&gt;s3-transfer-manager&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt; &lt;artifactId&gt;aws-crt-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;version&gt;1.18.32&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;5.3.29&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;$&#123;java.version&#125;&lt;/source&gt; &lt;target&gt;$&#123;java.version&#125;&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt; &lt;version&gt;3.2.1&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;attach-source&lt;/id&gt; &lt;phase&gt;verify&lt;/phase&gt; &lt;goals&gt; &lt;!--生成源代码的jar --&gt; &lt;goal&gt;jar&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt; &lt;version&gt;3.2.0&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;attach-javadoc&lt;/id&gt; &lt;phase&gt;verify&lt;/phase&gt; &lt;goals&gt; &lt;!--生成javadoc的jar --&gt; &lt;goal&gt;jar&lt;/goal&gt; &lt;!--生成javadoc的html --&gt; &lt;goal&gt;javadoc&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;!--不显示javadoc警告--&gt; &lt;additionalOptions&gt;-Xdoclint:none&lt;/additionalOptions&gt; &lt;additionalJOption&gt;-Xdoclint:none&lt;/additionalJOption&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;!-- gpg plugin,用于签名认证 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt; &lt;version&gt;1.6&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;sign-artifacts&lt;/id&gt; &lt;phase&gt;verify&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;sign&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;!-- 发布到私服时需要注释掉下面两个插件 --&gt; &lt;!--staging puglin,用于自动执行发布阶段(免手动)--&gt; &lt;plugin&gt; &lt;groupId&gt;org.sonatype.central&lt;/groupId&gt; &lt;artifactId&gt;central-publishing-maven-plugin&lt;/artifactId&gt; &lt;version&gt;0.5.0&lt;/version&gt; &lt;extensions&gt;true&lt;/extensions&gt; &lt;configuration&gt; &lt;!-- 这里的publishingServerId是在settings.xml中配置的server认证信息 --&gt; &lt;publishingServerId&gt;maven-central&lt;/publishingServerId&gt; &lt;!-- 这里的autoPublish是自动发布，而不是手动发布 --&gt; &lt;autoPublish&gt;true&lt;/autoPublish&gt; &lt;!-- 这里的waitUntil配置为published是等待发布完成，因为发布完成的时间比较长，所以可以不加这个参数 --&gt; &lt;waitUntil&gt;published&lt;/waitUntil&gt; &lt;!-- 这里的deploymentName是发布到中央仓库的名称 --&gt; &lt;deploymentName&gt;$&#123;project.groupId&#125;:$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/deploymentName&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- release plugin,用于发布到release仓库部署插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.3&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;distributionManagement&gt; &lt;!-- &lt;repository&gt;--&gt; &lt;!-- &lt;id&gt;maven-releases&lt;/id&gt;--&gt; &lt;!-- &lt;name&gt;Nexus Release Repository&lt;/name&gt;--&gt; &lt;!-- &lt;url&gt;http://nexus.cxzh.ltd:8081/repository/maven-releases/&lt;/url&gt;--&gt; &lt;!-- &lt;/repository&gt;--&gt; &lt;!-- &lt;snapshotRepository&gt;--&gt; &lt;!-- &lt;id&gt;maven-snapshots&lt;/id&gt;--&gt; &lt;!-- &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt;--&gt; &lt;!-- &lt;url&gt;http://nexus.cxzh.ltd:8081/repository/maven-snapshots/&lt;/url&gt;--&gt; &lt;!-- &lt;/snapshotRepository&gt;--&gt; &lt;/distributionManagement&gt;&lt;/project&gt; 4.执行命令 123mvn clean package # 完成打包和测试mvn clean verify # 完成源码打包和javadoc打包，同时完成签名mvn clean deploy # 完成本地部署和maven中央仓库部署 4.1 执行过程中会提示你输入创建密钥对时的密码，如果不想人工参与，也可以使用如下方式（参考：http://maven.apache.org/plugins/maven-gpg-plugin/usage.html） a.在执行命令时指定密码： 1mvn clean deploy -Dgpg.passphrase=thephrase b.setting.xml中创建一个server 12345678910&lt;settings&gt;[...]&lt;servers&gt; [...] &lt;server&gt; &lt;id&gt;gpg.passphrase&lt;/id&gt; &lt;passphrase&gt;clear or encrypted text&lt;/passphrase&gt; &lt;/server&gt;&lt;/servers&gt;&lt;/settings&gt; 6.更新部署 修改pom.xml中的版本号，重新执行mvn clean deploy即可。发布的jar包可以在https://central.sonatype.com中检索。","summary":"摘要 https://oss.sonatype.org已经不再支持新用户注册，新的注册地址为https://central.sonatype.com 通过本文，你将知道如何将Maven构建的项目发布到Maven中央仓库 Gradle构建方式请看 发布Jar到Maven中央仓库--Gradle版(最新方式) 。","date_published":"2024-08-01T13:30:05.000Z","tags":["技术","maven","maven"]},{"id":"https://blog.hanqunfeng.com/2024/05/08/mysql8-upgrade/","url":"https://blog.hanqunfeng.com/2024/05/08/mysql8-upgrade/","title":"MySql--从Mysql5.7升级到Mysql8","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>MySql知识点介绍:从Mysql5.7升级到Mysql8</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>mysql-8.0.30</code>，<a href=\"https://dev.mysql.com/doc/refman/8.0/en/\">https://dev.mysql.com/doc/refman/8.0/en/</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>2024-04-30，<a href=\"https://dev.mysql.com/doc/relnotes/mysql/8.4/en/news-8-4-0.html\">mysql-8.4.0 LTS</a>版本发布，本文在将mysql从5.7.44升级到8.0.30的基础上，升级到8.4.0 LTS版本。<a href=\"https://dev.mysql.com/doc/refman/8.4/en/\">mysql-8.4.0 LTS官方文档</a></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"从Mysql5-7升级到Mysql8\">从Mysql5.7升级到Mysql8</h2>\n<p><em><strong>升级前，请先备份数据库，防止升级失败</strong></em></p>\n<h3 id=\"mysqlsh\">mysqlsh</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在mysql8以前，升级mysql还是比较麻烦的，除了要处理不兼容的参数和语法外，而且不支持跨版本的升级，比如5.5必须先升级到5.6，然后再升级到5.7。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>mysqlsh</code>是mysql官方提供的一个命令行工具，是MySQL的高级客户端和代码编辑器。其不仅可以像使用<code>mysql</code>命令一样执行sql，而且还支持js脚本、python脚本，等等，具体可以查看<a href=\"https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-shell-commands.html\">官网</a>。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>mysqlsh</code>的众多功能之一就是可以检测当前版本是否可以升级到与当前<code>mysqlsh</code>相同的版本。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果你当前的版本是5.6，你甚至都不需要先将数据库升级到5.7就可以直接升级到8.0，因为mysql8.0支持mysql5.5到mysql8.0的升级。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://dev.mysql.com/doc/mysql-shell/8.0/en/\">mysqlsh官方文档</a></p>\n</li>\n</ul>\n<h4 id=\"安装mysqlsh\">安装mysqlsh</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://dev.mysql.com/downloads/shell/\">官网下载地址</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>选择需要的版本进行下载，我这里选择下载的版本是<a href=\"https://downloads.mysql.com/archives/get/p/43/file/mysql-shell-8.0.30-linux-glibc2.12-x86-64bit.tar.gz\">linux的8.0.30版本</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>下载后解压即可</p>\n</li>\n</ul>\n<h4 id=\"检查是否可以升级\">检查是否可以升级</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-shell-utilities-upgrade.html\">官网说明</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mysqlsh8.4以前可以使用如下方法，因为其默认就是执行js代码</span></span><br><span class=\"line\">./mysqlsh username:password@host -e <span class=\"string\">&quot;util.checkForServerUpgrade()&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># mysqlsh8.4后默认执行的是sql代码，所以要先登录，切换到js环境后再运行上面的代码</span></span><br><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\">./mysqlsh username:password@host</span><br><span class=\"line\"> MySQL  localhost  SQL  &gt; \\js</span><br><span class=\"line\">Switching to JavaScript mode...</span><br><span class=\"line\"> MySQL  localhost  JS  &gt; util.checkForServerUpgrade()</span><br><span class=\"line\"> ……………………………………………………</span><br><span class=\"line\"> <span class=\"comment\"># 退出</span></span><br><span class=\"line\"> MySQL  localhost  JS &gt; \\q</span><br><span class=\"line\">Bye!</span><br></pre></td></tr></table></figure>\n<h4 id=\"检查输出信息说明\">检查输出信息说明</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARNING: Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\">The MySQL server at</span><br><span class=\"line\">localhost:3306, version</span><br><span class=\"line\">5.7.44-<span class=\"built_in\">log</span> - Please upgrade to 8.0 or opt-in to the paid RDS Extended Support</span><br><span class=\"line\">service before 5.7 reaches end of standard support on 29 February, 2024:</span><br><span class=\"line\">https://a.co/hQqiIn0, will now be checked <span class=\"keyword\">for</span> compatibility issues <span class=\"keyword\">for</span> upgrade</span><br><span class=\"line\">to MySQL 8.0.30...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 旧时间类型的使用</span></span><br><span class=\"line\">1) Usage of old temporal <span class=\"built_in\">type</span></span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用与新保留关键字冲突的数据库对象名称</span></span><br><span class=\"line\">2) Usage of db objects with names conflicting with new reserved keywords</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用utf8mb3字符集</span></span><br><span class=\"line\">3) Usage of utf8mb3 charset</span><br><span class=\"line\">  Warning: The following objects use the utf8mb3 character <span class=\"built_in\">set</span>. It is</span><br><span class=\"line\">    recommended to convert them to use utf8mb4 instead, <span class=\"keyword\">for</span> improved Unicode</span><br><span class=\"line\">    support.</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-utf8mb3.html</span><br><span class=\"line\"></span><br><span class=\"line\">  mydb - schema<span class=\"string\">&#x27;s default character set: utf8</span></span><br><span class=\"line\"><span class=\"string\">  mysql - schema&#x27;</span>s default character <span class=\"built_in\">set</span>: utf8</span><br><span class=\"line\">  mydb.tbl_info_i.a_product - column<span class=\"string\">&#x27;s default character set: utf8</span></span><br><span class=\"line\"><span class=\"string\">  mydb.tbl_info_i.a_country - column&#x27;</span>s default character <span class=\"built_in\">set</span>: utf8</span><br><span class=\"line\">  mydb.tbl_info_i.a_version - column<span class=\"string\">&#x27;s default character set: utf8</span></span><br><span class=\"line\"><span class=\"string\">  mydb.tbl_info_i.a_placement - column&#x27;</span>s default character <span class=\"built_in\">set</span>: utf8</span><br><span class=\"line\">………………………………………………………………………………………………………………………………</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># MySQL模式中的表名与8.0中的新表冲突</span></span><br><span class=\"line\">4) Table names <span class=\"keyword\">in</span> the mysql schema conflicting with new tables <span class=\"keyword\">in</span> 8.0</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用非本机分区引擎的分区表</span></span><br><span class=\"line\">5) Partitioned tables using engines with non native partitioning</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 外键约束名称超过64个字符</span></span><br><span class=\"line\">6) Foreign key constraint names longer than 64 characters</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用过时的MAXDB sql_mode标志</span></span><br><span class=\"line\">7) Usage of obsolete MAXDB sql_mode flag</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用过时的sql_mode标志</span></span><br><span class=\"line\">8) Usage of obsolete sql_mode flags</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ENUM/SET列定义包含超过255个字符的元素</span></span><br><span class=\"line\">9) ENUM/SET column definitions containing elements longer than 255 characters</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在共享表空间中使用分区表</span></span><br><span class=\"line\">10) Usage of partitioned tables <span class=\"keyword\">in</span> shared tablespaces</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 表空间数据文件路径中的循环目录引用</span></span><br><span class=\"line\">11) Circular directory references <span class=\"keyword\">in</span> tablespace data file paths</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用已删除的函数</span></span><br><span class=\"line\">12) Usage of removed <span class=\"built_in\">functions</span></span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用已删除的GROUP BY ASC/DESC语法</span></span><br><span class=\"line\">13) Usage of removed GROUP BY ASC/DESC syntax</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 已删除的用于错误日志记录到系统日志配置的系统变量</span></span><br><span class=\"line\">14) Removed system variables <span class=\"keyword\">for</span> error logging to the system <span class=\"built_in\">log</span> configuration</span><br><span class=\"line\">  To run this check requires full path to MySQL server configuration file to be specified at <span class=\"string\">&#x27;configPath&#x27;</span> key of options dictionary</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-13.html<span class=\"comment\">#mysqld-8-0-13-logging</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 已删除的系统变量</span></span><br><span class=\"line\">15) Removed system variables</span><br><span class=\"line\">  To run this check requires full path to MySQL server configuration file to be specified at <span class=\"string\">&#x27;configPath&#x27;</span> key of options dictionary</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/doc/refman/8.0/en/added-deprecated-removed.html<span class=\"comment\">#optvars-removed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 具有新默认值的系统变量</span></span><br><span class=\"line\">16) System variables with new default values</span><br><span class=\"line\">  To run this check requires full path to MySQL server configuration file to be specified at <span class=\"string\">&#x27;configPath&#x27;</span> key of options dictionary</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://mysqlserverteam.com/new-defaults-in-mysql-8-0/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 零日期、日期时间和时间戳值</span></span><br><span class=\"line\">17) Zero Date, Datetime, and Timestamp values</span><br><span class=\"line\">  Warning: By default zero <span class=\"built_in\">date</span>/datetime/timestamp values are no longer allowed</span><br><span class=\"line\">    <span class=\"keyword\">in</span> MySQL, as of 5.7.8 NO_ZERO_IN_DATE and NO_ZERO_DATE are included <span class=\"keyword\">in</span></span><br><span class=\"line\">    SQL_MODE by default. These modes should be used with strict mode as they will</span><br><span class=\"line\">    be merged with strict mode <span class=\"keyword\">in</span> a future release. If you <span class=\"keyword\">do</span> not include these</span><br><span class=\"line\">    modes <span class=\"keyword\">in</span> your SQL_MODE setting, you are able to insert</span><br><span class=\"line\">    <span class=\"built_in\">date</span>/datetime/timestamp values that contain zeros. It is strongly advised to</span><br><span class=\"line\">    replace zero values with valid ones, as they may not work correctly <span class=\"keyword\">in</span> the</span><br><span class=\"line\">    future.</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://lefred.be/content/mysql-8-0-and-wrong-dates/</span><br><span class=\"line\"></span><br><span class=\"line\">  global.sql_mode - does not contain either NO_ZERO_DATE or NO_ZERO_IN_DATE</span><br><span class=\"line\">    <span class=\"built_in\">which</span> allows insertion of zero dates</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由文件删除或损坏导致的模式不一致</span></span><br><span class=\"line\">18) Schema inconsistencies resulting from file removal or corruption</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 被InnoDB识别但属于不同引擎的表</span></span><br><span class=\"line\">19) Tables recognized by InnoDB that belong to a different engine</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#x27;check table x for upgrade&#x27;命令报告的问题</span></span><br><span class=\"line\">20) Issues reported by <span class=\"string\">&#x27;check table x for upgrade&#x27;</span> <span class=\"built_in\">command</span></span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新的默认认证插件考虑</span></span><br><span class=\"line\">21) New default authentication plugin considerations</span><br><span class=\"line\">  Warning: The new default authentication plugin <span class=\"string\">&#x27;caching_sha2_password&#x27;</span> offers</span><br><span class=\"line\">    more secure password hashing than previously used <span class=\"string\">&#x27;mysql_native_password&#x27;</span></span><br><span class=\"line\">    (and consequent improved client connection authentication). However, it also</span><br><span class=\"line\">    has compatibility implications that may affect existing MySQL installations.</span><br><span class=\"line\">    If your MySQL installation must serve pre-8.0 clients and you encounter</span><br><span class=\"line\">    compatibility issues after upgrading, the simplest way to address those</span><br><span class=\"line\">    issues is to reconfigure the server to revert to the previous default</span><br><span class=\"line\">    authentication plugin (mysql_native_password). For example, use these lines</span><br><span class=\"line\">    <span class=\"keyword\">in</span> the server option file:</span><br><span class=\"line\"></span><br><span class=\"line\">    [mysqld]</span><br><span class=\"line\">    default_authentication_plugin=mysql_native_password</span><br><span class=\"line\"></span><br><span class=\"line\">    However, the setting should be viewed as temporary, not as a long term or</span><br><span class=\"line\">    permanent solution, because it causes new accounts created with the setting</span><br><span class=\"line\">    <span class=\"keyword\">in</span> effect to forego the improved authentication security.</span><br><span class=\"line\">    If you are using replication please take time to understand how the</span><br><span class=\"line\">    authentication plugin changes may impact you.</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html<span class=\"comment\">#upgrade-caching-sha2-password-compatibility-issues</span></span><br><span class=\"line\">    https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html<span class=\"comment\">#upgrade-caching-sha2-password-replication</span></span><br><span class=\"line\"></span><br><span class=\"line\">Errors:   0</span><br><span class=\"line\">Warnings: 98</span><br><span class=\"line\">Notices:  0</span><br><span class=\"line\"></span><br><span class=\"line\">NOTE: No fatal errors were found that would prevent an upgrade, but some potential issues were detected. Please ensure that the reported issues are not significant before upgrading.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>可以看到，其检查的数据库版本是5.7.44，其检查是否可以升级到8.0.30</p>\n</li>\n<li class=\"lvl-2\">\n<p>检测项共有21个，其中警告有98个，错误有0个，注意，如果有错误，则不能直接升级，需要解决错误问题，否则升级会失败。至于警告暂时可以不处理。</p>\n</li>\n<li class=\"lvl-2\">\n<p>警告集中体现在字符集上，5.7.44的字符集是utf8(实际就是utf8mb3)，而mysql8以后的默认字符集是utf8mb4，这个警告不影响升级，可以忽略。如果需要修改字符集到utf8mb4，需要注意原来的字段字符串长度是否符合要求，因为utf8mb4是4字节，而utf8mb3是3字节。另外如果使用了存储过程也要注意参数的长度是否符合要求。</p>\n</li>\n<li class=\"lvl-2\">\n<p>这里说一下<code>default_authentication_plugin</code>，mysql8.0.13开始，默认的认证插件是<code>caching_sha2_password</code>，而之前是<code>mysql_native_password</code>，这个警告虽然可以忽略，但是升级后建议尽快将认证插件修改为<code>caching_sha2_password</code>，因为<code>mysql_native_password</code>的认证方式存在安全漏洞，可以参考<a href=\"https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password-compatibility-issues\">官方文档</a>。另外，从mysql8.4.0开始，不再支持<code>default_authentication_plugin</code>，若要使其支持<code>mysql_native_password</code>插件，8.4.0开始为我们增加了一个新的配置项<code>mysql-native-password</code>，在[mysqld]中配置<code>mysql-native-password=ON</code>即可开启支持，默认为<code>OFF</code>。</p>\n</li>\n<li class=\"lvl-2\">\n<p>另外还要注意<code>关键词</code>和<code>保留词</code>的问题，mysql8.0以后，又增加了很多个<code>关键词</code>和<code>保留词</code>，如果检查到则需要修改一下，不然升级会失败。即便表和字段里没有使用这些保留字，也要检查一下业务代码中是否有使用。关于<code>关键词</code>和<code>保留词</code>可以查看官网<a href=\"https://dev.mysql.com/doc/refman/8.0/en/keywords.html\">Keywords and Reserved Words</a>，相比于MySQL 5.7，增加了大约130个，同时也减少了6个。</p>\n<blockquote>\n<p>这里建议设置表名称和字段名称时，可以为其设置前缀，比如：表名称为：t_user、字段名称为：f_user_id</p>\n</blockquote>\n</li>\n<li class=\"lvl-2\">\n<p>还有一点需要注意，Mysql8修改了很多参数的默认值，具体可以查看<a href=\"https://dev.mysql.com/blog-archive/new-defaults-in-mysql-8-0/\">官方网站的说明</a>，如果你不希望使用默认值，则需要将其配置到配置文件中，这里强调一下，重点关注 <code>character_set_server</code> 和 <code>collation_server</code> 这两个参数。所有的参数配置参考<a href=\"https://dev.mysql.com/doc/refman/8.0/en/programs.html\">官方文档</a></p>\n</li>\n</ul>\n<div class=\"tips\">\n<p><em><strong>关于字符集还想多说两句</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">mysql8的<code>character_set_server</code>默认是<code>utf8mb4</code>，<code>collation_server</code>默认是<code>utf8mb4_0900_ai_ci</code></li>\n<li class=\"lvl-2\">如果创建数据库或者表的时候没有指定字符集，则默认使用<code>character_set_server</code>和<code>collation_server</code>的默认值</li>\n<li class=\"lvl-2\">此时新创建的表就有可能与旧表字符集不一致，关联查询时就有可能导致错误或因为需要进行字符集转换导致查询性能下降。</li>\n<li class=\"lvl-2\">最好的方式是创建数据库或表时明确指定字符集，或者在<code>my.cnf</code>配置文件中配置<code>character_set_server</code>和<code>collation_server</code>的值。</li>\n</ul>\n</div>\n<h3 id=\"升级数据库的过程\">升级数据库的过程</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>因为我们要升级到mysql8.0.30，所以需要先下载并安装mysql8.0.30</p>\n</li>\n<li class=\"lvl-2\">\n<p>关闭mysql5.7的数据库</p>\n</li>\n<li class=\"lvl-2\">\n<p>备份数据目录(一定要做好备份，升级后不能降级的)</p>\n</li>\n<li class=\"lvl-2\">\n<p>根据检查提示修改<code>my.cnf</code>配置文件中的配置(主要是不兼容的配置，如果检查提示没有则不需要修改)</p>\n</li>\n<li class=\"lvl-2\">\n<p>非常重要的一步，就是修改<code>my.cnf</code>配置文件中的<code>basedir</code>，将其指向mysql8.0.30的安装目录</p>\n</li>\n<li class=\"lvl-2\">\n<p>直接使用mysql8.0.30的命令启动数据库，启动过程中就会完成数据库的升级，可以通过mysql的日志文件(log-error)查看升级情况</p>\n</li>\n<li class=\"lvl-2\">\n<p>升级完成后尽快使用新的密码认证插件修改密码，注意要修改所有用户的密码，包括root用户</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">WITH</span> caching_sha2_password <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">mysql8.4.0相比于之前的版本变化比较大，具体可以查看<a href=\"https://dev.mysql.com/doc/refman/8.4/en/mysql-nutshell.html\">官网文档</a></li>\n<li class=\"lvl-2\">mysql5.7不要直接升级到8.4.0及以后的版本，可以先升级到8.0.30，然后再升级到8.4.0</li>\n<li class=\"lvl-2\">升级到8.4.0前依旧要先使用<code>mysqlsh</code>检查是否可以升级，注意要下载对应的<code>mysqlsh</code>版本</li>\n<li class=\"lvl-2\">升级前要先检查是否所有用户的密码插件都是<code>caching_sha2_password</code>，如果没有则需要修改</li>\n<li class=\"lvl-2\">升级前要先检查<code>my.cnf</code>中是否配置了default_authentication_plugin，如果有则删除，如果必须要配置<code>mysql_native_password</code>认证插件，则需要配置<code>mysql-native-password=ON</code></li>\n<li class=\"lvl-2\">修改<code>my.cnf</code>中的<code>basedir</code>使其指向8.4.0的安装目录</li>\n<li class=\"lvl-2\">使用8.4.0的命令启动mysql，检查日志是否有错误。</li>\n</ul>\n</div>\n<h2 id=\"mysql5-7-44升级到8-0-30，再升级到8-4-0的完整过程\">mysql5.7.44升级到8.0.30，再升级到8.4.0的完整过程</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>准备好各个版本的mysql和mysqlsh</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 目录结构</span></span><br><span class=\"line\">mysql5 <span class=\"comment\"># 5.7.44安装目录</span></span><br><span class=\"line\">mysql8.0.30 <span class=\"comment\"># 8.0.30安装目录</span></span><br><span class=\"line\">mysql8.4.0 <span class=\"comment\"># 8.4.0安装目录</span></span><br><span class=\"line\">mysqlsh8.0.30 <span class=\"comment\"># 8.0.30的mysqlsh安装目录</span></span><br><span class=\"line\">mysqlsh8.4.0 <span class=\"comment\"># 8.4.0的mysqlsh安装目录</span></span><br><span class=\"line\">datas/mysql <span class=\"comment\"># 存放数据目录</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>mysql5/my.cnf</code>配置</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8mb4</span><br><span class=\"line\">local_infile=ON</span><br><span class=\"line\"></span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8mb4</span><br><span class=\"line\">port       = 3306</span><br><span class=\"line\">socket     = /tmp/mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\">secure_file_priv=&quot;&quot;</span><br><span class=\"line\">local_infile=ON</span><br><span class=\"line\"></span><br><span class=\"line\">default_authentication_plugin=mysql_native_password</span><br><span class=\"line\"></span><br><span class=\"line\">port       = 3306</span><br><span class=\"line\">server-id  = 1001</span><br><span class=\"line\">user       = mysql</span><br><span class=\"line\">socket     = /tmp/mysql.sock</span><br><span class=\"line\">basedir    = /usr/local/soft/mysql5</span><br><span class=\"line\">datadir    = /usr/local/soft/datas/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">log-bin    = mysql-bin</span><br><span class=\"line\">binlog-format = ROW</span><br><span class=\"line\"></span><br><span class=\"line\">expire-logs-days=10</span><br><span class=\"line\"></span><br><span class=\"line\">sync-binlog=0</span><br><span class=\"line\">innodb_data_home_dir      =./</span><br><span class=\"line\">innodb_log_group_home_dir =./</span><br><span class=\"line\">log-error =mysql.log</span><br><span class=\"line\">pid-file  =mysql.pid</span><br><span class=\"line\">character-set-server=utf8mb4</span><br><span class=\"line\">lower_case_table_names=1</span><br><span class=\"line\">autocommit =1</span><br><span class=\"line\">slow_query_log=1</span><br><span class=\"line\">slow_query_log_file=db_slow.log</span><br><span class=\"line\">long_query_time=5</span><br><span class=\"line\">log_output=FILE</span><br><span class=\"line\">log_queries_not_using_indexes=1</span><br><span class=\"line\">skip-external-locking</span><br><span class=\"line\">key_buffer_size = 256M</span><br><span class=\"line\">max_allowed_packet = 64M</span><br><span class=\"line\">table_open_cache = 1024</span><br><span class=\"line\">sort_buffer_size = 4M</span><br><span class=\"line\">net_buffer_length = 8K</span><br><span class=\"line\">read_buffer_size = 4M</span><br><span class=\"line\">read_rnd_buffer_size = 512K</span><br><span class=\"line\">myisam_sort_buffer_size = 64M</span><br><span class=\"line\">thread_cache_size = 64</span><br><span class=\"line\">tmp_table_size = 128M</span><br><span class=\"line\">explicit_defaults_for_timestamp = true</span><br><span class=\"line\">max_connections = 500</span><br><span class=\"line\">max_connect_errors = 100</span><br><span class=\"line\">open_files_limit = 65535</span><br><span class=\"line\">default_storage_engine = InnoDB</span><br><span class=\"line\">innodb_data_file_path = ibdata1:10M:autoextend</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-7-44升级到8-0-30\">5.7.44升级到8.0.30</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>升级检查</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 升级检查</span></span><br><span class=\"line\">./mysqlsh8.0.30/bin/mysqlsh --uri root:123456@localhost  -e <span class=\"string\">&quot;util.checkForServerUpgrade()&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">WARNING: Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\">The MySQL server at /tmp%2Fmysql.sock, version 5.7.44-<span class=\"built_in\">log</span> - MySQL Community</span><br><span class=\"line\">Server (GPL), will now be checked <span class=\"keyword\">for</span> compatibility issues <span class=\"keyword\">for</span> upgrade to MySQL</span><br><span class=\"line\">8.0.30...</span><br><span class=\"line\"></span><br><span class=\"line\">1) Usage of old temporal <span class=\"built_in\">type</span></span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">2) Usage of db objects with names conflicting with new reserved keywords</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">3) Usage of utf8mb3 charset</span><br><span class=\"line\">  Warning: The following objects use the utf8mb3 character <span class=\"built_in\">set</span>. It is</span><br><span class=\"line\">    recommended to convert them to use utf8mb4 instead, <span class=\"keyword\">for</span> improved Unicode</span><br><span class=\"line\">    support.</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-utf8mb3.html</span><br><span class=\"line\"></span><br><span class=\"line\">  mydb - schema<span class=\"string\">&#x27;s default character set: utf8</span></span><br><span class=\"line\"><span class=\"string\">  mysql - schema&#x27;</span>s default character <span class=\"built_in\">set</span>: utf8</span><br><span class=\"line\">  mydb.tbl_info_i.a_product - column<span class=\"string\">&#x27;s default character set: utf8</span></span><br><span class=\"line\"><span class=\"string\">  mydb.tbl_info_i.a_country - column&#x27;</span>s default character <span class=\"built_in\">set</span>: utf8</span><br><span class=\"line\">  mydb.tbl_info_i.a_version - column<span class=\"string\">&#x27;s default character set: utf8</span></span><br><span class=\"line\"><span class=\"string\">  mydb.tbl_info_i.a_placement - column&#x27;</span>s default character <span class=\"built_in\">set</span>: utf8</span><br><span class=\"line\"> …………………………………………………………………………………………</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4) Table names <span class=\"keyword\">in</span> the mysql schema conflicting with new tables <span class=\"keyword\">in</span> 8.0</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">5) Partitioned tables using engines with non native partitioning</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">6) Foreign key constraint names longer than 64 characters</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">7) Usage of obsolete MAXDB sql_mode flag</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">8) Usage of obsolete sql_mode flags</span><br><span class=\"line\">  Notice: The following DB objects have obsolete options persisted <span class=\"keyword\">for</span></span><br><span class=\"line\">    sql_mode, <span class=\"built_in\">which</span> will be cleared during upgrade to 8.0.</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html<span class=\"comment\">#mysql-nutshell-removals</span></span><br><span class=\"line\"></span><br><span class=\"line\">  global system variable sql_mode - defined using obsolete NO_AUTO_CREATE_USER</span><br><span class=\"line\">    option</span><br><span class=\"line\"></span><br><span class=\"line\">9) ENUM/SET column definitions containing elements longer than 255 characters</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">10) Usage of partitioned tables <span class=\"keyword\">in</span> shared tablespaces</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">11) Circular directory references <span class=\"keyword\">in</span> tablespace data file paths</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">12) Usage of removed <span class=\"built_in\">functions</span></span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">13) Usage of removed GROUP BY ASC/DESC syntax</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">14) Removed system variables <span class=\"keyword\">for</span> error logging to the system <span class=\"built_in\">log</span> configuration</span><br><span class=\"line\">  To run this check requires full path to MySQL server configuration file to be specified at <span class=\"string\">&#x27;configPath&#x27;</span> key of options dictionary</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-13.html<span class=\"comment\">#mysqld-8-0-13-logging</span></span><br><span class=\"line\"></span><br><span class=\"line\">15) Removed system variables</span><br><span class=\"line\">  To run this check requires full path to MySQL server configuration file to be specified at <span class=\"string\">&#x27;configPath&#x27;</span> key of options dictionary</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/doc/refman/8.0/en/added-deprecated-removed.html<span class=\"comment\">#optvars-removed</span></span><br><span class=\"line\"></span><br><span class=\"line\">16) System variables with new default values</span><br><span class=\"line\">  To run this check requires full path to MySQL server configuration file to be specified at <span class=\"string\">&#x27;configPath&#x27;</span> key of options dictionary</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://mysqlserverteam.com/new-defaults-in-mysql-8-0/</span><br><span class=\"line\"></span><br><span class=\"line\">17) Zero Date, Datetime, and Timestamp values</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">18) Schema inconsistencies resulting from file removal or corruption</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">19) Tables recognized by InnoDB that belong to a different engine</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">20) Issues reported by <span class=\"string\">&#x27;check table x for upgrade&#x27;</span> <span class=\"built_in\">command</span></span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">21) New default authentication plugin considerations</span><br><span class=\"line\">  Warning: The new default authentication plugin <span class=\"string\">&#x27;caching_sha2_password&#x27;</span> offers</span><br><span class=\"line\">    more secure password hashing than previously used <span class=\"string\">&#x27;mysql_native_password&#x27;</span></span><br><span class=\"line\">    (and consequent improved client connection authentication). However, it also</span><br><span class=\"line\">    has compatibility implications that may affect existing MySQL installations.</span><br><span class=\"line\">    If your MySQL installation must serve pre-8.0 clients and you encounter</span><br><span class=\"line\">    compatibility issues after upgrading, the simplest way to address those</span><br><span class=\"line\">    issues is to reconfigure the server to revert to the previous default</span><br><span class=\"line\">    authentication plugin (mysql_native_password). For example, use these lines</span><br><span class=\"line\">    <span class=\"keyword\">in</span> the server option file:</span><br><span class=\"line\"></span><br><span class=\"line\">    [mysqld]</span><br><span class=\"line\">    default_authentication_plugin=mysql_native_password</span><br><span class=\"line\"></span><br><span class=\"line\">    However, the setting should be viewed as temporary, not as a long term or</span><br><span class=\"line\">    permanent solution, because it causes new accounts created with the setting</span><br><span class=\"line\">    <span class=\"keyword\">in</span> effect to forego the improved authentication security.</span><br><span class=\"line\">    If you are using replication please take time to understand how the</span><br><span class=\"line\">    authentication plugin changes may impact you.</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html<span class=\"comment\">#upgrade-caching-sha2-password-compatibility-issues</span></span><br><span class=\"line\">    https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html<span class=\"comment\">#upgrade-caching-sha2-password-replication</span></span><br><span class=\"line\"></span><br><span class=\"line\">Errors:   0</span><br><span class=\"line\">Warnings: 98</span><br><span class=\"line\">Notices:  1</span><br><span class=\"line\"></span><br><span class=\"line\">NOTE: No fatal errors were found that would prevent an upgrade, but some potential issues were detected. Please ensure that the reported issues are not significant before upgrading.</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>看到没有error，开始升级</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭数据库</span></span><br><span class=\"line\">./mysql5/bin/mysqladmin --defaults-file=./mysql5/my.cnf -uroot -p123456 shutdown</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制mysql配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> ./mysql5/my.cnf ./mysql8.0.30/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改新的配置文件中的basedir，使其指向8.0.30的安装路径</span></span><br><span class=\"line\">basedir    = /usr/local/soft/mysql8.0.30</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用8.0.30启动</span></span><br><span class=\"line\">./mysql8.0.30/bin/mysqld_safe --defaults-file=./mysql8.0.30/my.cnf &amp;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看启动日志，没有错误说明升级成功</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2024-05-09T06:48:50.524705Z 0 [Warning] [MY-011068] [Server] The syntax <span class=\"string\">&#x27;expire-logs-days&#x27;</span> is deprecated and will be removed <span class=\"keyword\">in</span> a future release. Please use binlog_expire_logs_seconds instead.</span><br><span class=\"line\">2024-05-09T06:48:50.524819Z 0 [Warning] [MY-010097] [Server] Insecure configuration <span class=\"keyword\">for</span> --secure-file-priv: Current value does not restrict location of generated files. Consider setting it to a valid, non-empty path.</span><br><span class=\"line\">2024-05-09T06:48:50.524917Z 0 [Warning] [MY-010918] [Server] <span class=\"string\">&#x27;default_authentication_plugin&#x27;</span> is deprecated and will be removed <span class=\"keyword\">in</span> a future release. Please use authentication_policy instead.</span><br><span class=\"line\">2024-05-09T06:48:50.524983Z 0 [System] [MY-010116] [Server] /usr/local/soft/mysql8.0.30/bin/mysqld (mysqld 8.0.30) starting as process 26696</span><br><span class=\"line\">2024-05-09T06:48:50.563366Z 1 [System] [MY-011012] [Server] Starting upgrade of data directory.</span><br><span class=\"line\">2024-05-09T06:48:50.563414Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class=\"line\">2024-05-09T06:48:51.260298Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class=\"line\">2024-05-09T06:48:53.614398Z 2 [System] [MY-011003] [Server] Finished populating Data Dictionary tables with data.</span><br><span class=\"line\">2024-05-09T06:48:55.055320Z 5 [System] [MY-013381] [Server] Server upgrade from <span class=\"string\">&#x27;50700&#x27;</span> to <span class=\"string\">&#x27;80030&#x27;</span> started.</span><br><span class=\"line\">2024-05-09T06:49:02.063990Z 5 [System] [MY-013381] [Server] Server upgrade from <span class=\"string\">&#x27;50700&#x27;</span> to <span class=\"string\">&#x27;80030&#x27;</span> completed.</span><br><span class=\"line\">2024-05-09T06:49:02.237992Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.</span><br><span class=\"line\">2024-05-09T06:49:02.238048Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported <span class=\"keyword\">for</span> this channel.</span><br><span class=\"line\">2024-05-09T06:49:02.267583Z 0 [System] [MY-011323] [Server] X Plugin ready <span class=\"keyword\">for</span> connections. Bind-address: <span class=\"string\">&#x27;::&#x27;</span> port: 33060, socket: /tmp/mysqlx.sock</span><br><span class=\"line\">2024-05-09T06:49:02.267648Z 0 [System] [MY-010931] [Server] /usr/local/soft/mysql8.0.30/bin/mysqld: ready <span class=\"keyword\">for</span> connections. Version: <span class=\"string\">&#x27;8.0.30&#x27;</span>  socket: <span class=\"string\">&#x27;/tmp/mysql.sock&#x27;</span>  port: 3306  MySQL Community Server - GPL.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>根据日志提示我们应该修改两个配置参数，未来将不可用了，不过这里暂且先不去管它，等检查通不过了再进行处理就可以。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.The syntax &#x27;expire-logs-days&#x27; is deprecated and will be removed in a future release. Please use binlog_expire_logs_seconds instead.</span><br><span class=\"line\">2.&#x27;default_authentication_plugin&#x27; is deprecated and will be removed in a future release. Please use authentication_policy instead.</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>修改密码插件，这个步骤很重要</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\">./mysql8.0.30/bin/mysql -uroot -p123456</span><br><span class=\"line\"><span class=\"comment\"># 升级完成后使用新的密码认证插件修改密码，8.4不再推荐mysql_native_password认证插，所以升级到8.4以前一定要先修改密码插件，如果忘记了也没关系，文末有重置密码的方法</span></span><br><span class=\"line\">mysql&gt; ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED WITH caching_sha2_password BY <span class=\"string\">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-0-30升级到8-4-0\">8.0.30升级到8.4.0</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>同样先用8.4.0的mysqlsh检查一下</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 升级检查</span></span><br><span class=\"line\">./mysqlsh8.4.0/bin/mysqlsh --uri root:123456@localhost</span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">MySQL Shell 8.4.0</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2016, 2024, Oracle and/or its affiliates.</span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its affiliates.</span><br><span class=\"line\">Other names may be trademarks of their respective owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type <span class=\"string\">&#x27;\\help&#x27;</span> or <span class=\"string\">&#x27;\\?&#x27;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>; <span class=\"string\">&#x27;\\quit&#x27;</span> to <span class=\"built_in\">exit</span>.</span><br><span class=\"line\">WARNING: Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\">Creating a Classic session to <span class=\"string\">&#x27;root@/tmp%2Fmysql.sock&#x27;</span></span><br><span class=\"line\">Fetching global names <span class=\"keyword\">for</span> auto-completion... Press ^C to stop.</span><br><span class=\"line\">Your MySQL connection <span class=\"built_in\">id</span> is 15</span><br><span class=\"line\">Server version: 8.0.30 MySQL Community Server - GPL</span><br><span class=\"line\">No default schema selected; <span class=\"built_in\">type</span> \\use &lt;schema&gt; to <span class=\"built_in\">set</span> one.</span><br><span class=\"line\"> MySQL  localhost  SQL &gt; \\js</span><br><span class=\"line\">Switching to JavaScript mode...</span><br><span class=\"line\"> MySQL  localhost  JS &gt; util.checkForServerUpgrade()</span><br><span class=\"line\">The MySQL server at /tmp%2Fmysql.sock, version 8.0.30 - MySQL Community Server</span><br><span class=\"line\">- GPL, will now be checked <span class=\"keyword\">for</span> compatibility issues <span class=\"keyword\">for</span> upgrade to MySQL 8.4.0.</span><br><span class=\"line\">To check <span class=\"keyword\">for</span> a different target server version, use the targetVersion option.</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: Upgrading MySQL Server from version 8.0.30 to 8.4.0 is not supported.</span><br><span class=\"line\">Please consider running the check using the following option: targetVersion=8.0</span><br><span class=\"line\"></span><br><span class=\"line\">1) Usage of db objects with names conflicting with new reserved keywords</span><br><span class=\"line\">(reservedKeywords)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">2) Removed system variables (removedSysVars)</span><br><span class=\"line\">  Error: Following system variables that were detected as being used will be</span><br><span class=\"line\">    removed. Please update your system to not rely on them before the upgrade.</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/doc/refman/8.0/en/added-deprecated-removed.html<span class=\"comment\">#optvars-removed</span></span><br><span class=\"line\"></span><br><span class=\"line\">  expire_logs_days - Error: The system variable <span class=\"string\">&#x27;expire_logs_days&#x27;</span> is <span class=\"built_in\">set</span> to 10</span><br><span class=\"line\">    (EXPLICIT) and will be removed.</span><br><span class=\"line\"></span><br><span class=\"line\">3) System variables with new default values (sysVarsNewDefaults)</span><br><span class=\"line\">  Warning: Following system variables that are not defined <span class=\"keyword\">in</span> your</span><br><span class=\"line\">    configuration file will have new default values. Please review <span class=\"keyword\">if</span> you rely on</span><br><span class=\"line\">    their current values and <span class=\"keyword\">if</span> so define them before performing upgrade.</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/blog-archive/new-defaults-in-mysql-8-0/</span><br><span class=\"line\"></span><br><span class=\"line\">  binlog_transaction_dependency_tracking - default value will change from</span><br><span class=\"line\">    COMMIT_ORDER to WRITESET.</span><br><span class=\"line\">  group_replication_consistency - default value will change from EVENTUAL to</span><br><span class=\"line\">    BEFORE_ON_PRIMARY_FAILOVER.</span><br><span class=\"line\">  group_replication_exit_state_action - default value will change from</span><br><span class=\"line\">    READ_ONLY to OFFLINE_MODE.</span><br><span class=\"line\">  innodb_adaptive_hash_index - default value will change from ON to OFF.</span><br><span class=\"line\">  innodb_buffer_pool_in_core_file - default value will change from ON to OFF.</span><br><span class=\"line\">  innodb_buffer_pool_instances - default value will change from 8 (or 1 <span class=\"keyword\">if</span></span><br><span class=\"line\">    innodb_buffer_pool_size &lt; 1GB) to MAX(1, <span class=\"comment\">#vcpu/4).</span></span><br><span class=\"line\">  innodb_change_buffering - default value will change from all to none.</span><br><span class=\"line\">  innodb_doublewrite_files - default value will change from</span><br><span class=\"line\">    innodb_buffer_pool_instances * 2 to 2.</span><br><span class=\"line\">  innodb_doublewrite_pages - default value will change from</span><br><span class=\"line\">    innodb_write_io_threads to 128.</span><br><span class=\"line\">  innodb_flush_method - default value will change from fsynch (unix) or</span><br><span class=\"line\">    unbuffered (windows) to O_DIRECT.</span><br><span class=\"line\">  innodb_io_capacity - default value will change from 200 to 10000.</span><br><span class=\"line\">  innodb_io_capacity_max - default value will change from 200 to 2 x</span><br><span class=\"line\">    innodb_io_capacity.</span><br><span class=\"line\">  innodb_log_buffer_size - default value will change from 16777216 (16MB) to</span><br><span class=\"line\">    67108864 (64MB).</span><br><span class=\"line\">  innodb_log_writer_threads - default value will change from ON to OFF ( <span class=\"keyword\">if</span></span><br><span class=\"line\">    <span class=\"comment\">#vcpu &lt;= 32 ).</span></span><br><span class=\"line\">  innodb_numa_interleave - default value will change from OFF to ON.</span><br><span class=\"line\">  innodb_page_cleaners - default value will change from 4 to</span><br><span class=\"line\">    innodb_buffer_pool_instances.</span><br><span class=\"line\">  innodb_parallel_read_threads - default value will change from 4 to</span><br><span class=\"line\">    MAX(<span class=\"comment\">#vcpu/8, 4).</span></span><br><span class=\"line\">  innodb_purge_threads - default value will change from 4 to 1 ( <span class=\"keyword\">if</span> <span class=\"comment\">#vcpu &lt;= 16</span></span><br><span class=\"line\">    ).</span><br><span class=\"line\">  innodb_read_io_threads - default value will change from 4 to MAX(<span class=\"comment\">#vcpu/2, 4).</span></span><br><span class=\"line\">  innodb_redo_log_capacity - default value will change from 104857600 (100MB)</span><br><span class=\"line\">    to MIN ( <span class=\"comment\">#vcpu/2, 16 )GB.</span></span><br><span class=\"line\"></span><br><span class=\"line\">4) Issues reported by <span class=\"string\">&#x27;check table x for upgrade&#x27;</span> <span class=\"built_in\">command</span> (checkTableCommand)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">5) Check <span class=\"keyword\">for</span> deprecated usage of single dollar signs <span class=\"keyword\">in</span> object names</span><br><span class=\"line\">(dollarSignName)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">6) Check <span class=\"keyword\">for</span> deprecated or invalid user authentication methods.</span><br><span class=\"line\">(authMethodUsage)</span><br><span class=\"line\">  Warning: The following <span class=\"built_in\">users</span> are using the <span class=\"string\">&#x27;mysql_native_password&#x27;</span></span><br><span class=\"line\">  authentication method <span class=\"built_in\">which</span> is deprecated as of MySQL 8.0.0 and will be</span><br><span class=\"line\">  removed <span class=\"keyword\">in</span> a future release.</span><br><span class=\"line\">  Consider switching the <span class=\"built_in\">users</span> to a different authentication method (i.e.</span><br><span class=\"line\">  caching_sha2_password).</span><br><span class=\"line\"></span><br><span class=\"line\">  - mydb@%</span><br><span class=\"line\">  - mysql.session@localhost</span><br><span class=\"line\">  - mysql.sys@localhost</span><br><span class=\"line\">  - root@localhost</span><br><span class=\"line\"></span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">7) Check <span class=\"keyword\">for</span> deprecated or removed plugin usage. (pluginUsage)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">8) Check <span class=\"keyword\">for</span> deprecated or invalid default authentication methods <span class=\"keyword\">in</span> system</span><br><span class=\"line\">variables. (deprecatedDefaultAuth)</span><br><span class=\"line\">  The following variables have problems with their <span class=\"built_in\">set</span> authentication method:</span><br><span class=\"line\"></span><br><span class=\"line\">  Error: default_authentication_plugin - mysql_native_password authentication</span><br><span class=\"line\">    method was removed and it must be corrected before upgrading to 8.4.0 release.</span><br><span class=\"line\"></span><br><span class=\"line\">9) Check <span class=\"keyword\">for</span> deprecated or invalid authentication methods <span class=\"keyword\">in</span> use by MySQL</span><br><span class=\"line\">Router internal accounts. (deprecatedRouterAuthMethod)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">10) Checks <span class=\"keyword\">for</span> errors <span class=\"keyword\">in</span> column definitions (columnDefinition)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">11) Check <span class=\"keyword\">for</span> allowed values <span class=\"keyword\">in</span> System Variables. (sysvarAllowedValues)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">12) Checks <span class=\"keyword\">for</span> user privileges that will be removed (invalidPrivileges)</span><br><span class=\"line\">  Verifies <span class=\"keyword\">for</span> <span class=\"built_in\">users</span> containing grants to be removed, since privileges are</span><br><span class=\"line\">    removed as part of the upgrade, raises a NOTICE to inform the user about</span><br><span class=\"line\">    <span class=\"built_in\">users</span> that will be losing invalid privileges</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">&#x27;mysql.session&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> - The user <span class=\"string\">&#x27;mysql.session&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> has the</span><br><span class=\"line\">    following privileges that will be removed as part of the upgrade process:</span><br><span class=\"line\">    SET_USER_ID</span><br><span class=\"line\">  <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> - The user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> has the following privileges</span><br><span class=\"line\">    that will be removed as part of the upgrade process: SET_USER_ID</span><br><span class=\"line\"></span><br><span class=\"line\">13) Checks <span class=\"keyword\">for</span> partitions by key using columns with prefix key indexes</span><br><span class=\"line\">(partitionsWithPrefixKeys)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">Errors:   2</span><br><span class=\"line\">Warnings: 24</span><br><span class=\"line\">Notices:  2</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR: 2 errors were found. Please correct these issues before upgrading to avoid compatibility issues.</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>看到了两处错误，就是我们上面说的那两个参数需要修改，修改<code>./mysql8.0.30/my.cnf</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># binlog日志过期时间，单位秒，过期的binlog日志会被删除，保证磁盘空间，这里设置为10天，mysql8以前的版本这个参数是expire-logs-days，单位是天</span></span><br><span class=\"line\">binlog_expire_logs_seconds =864000</span><br><span class=\"line\"><span class=\"comment\">#expire-logs-days=10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#default_authentication_plugin=mysql_native_password</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>修改后要重启数据库</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭数据库</span></span><br><span class=\"line\"> ./mysql8.0.30/bin/mysqladmin --defaults-file=./mysql8.0.30/my.cnf -uroot -p123456 shutdown</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># 使用8.0.30启动</span></span><br><span class=\"line\"> ./mysql8.0.30/bin/mysqld_safe --defaults-file=./mysql8.0.30/my.cnf &amp;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>再次进程升级检查</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 升级检查</span></span><br><span class=\"line\">./mysqlsh8.4.0/bin/mysqlsh --uri root:123456@localhost</span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">MySQL Shell 8.4.0</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2016, 2024, Oracle and/or its affiliates.</span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its affiliates.</span><br><span class=\"line\">Other names may be trademarks of their respective owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type <span class=\"string\">&#x27;\\help&#x27;</span> or <span class=\"string\">&#x27;\\?&#x27;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>; <span class=\"string\">&#x27;\\quit&#x27;</span> to <span class=\"built_in\">exit</span>.</span><br><span class=\"line\">WARNING: Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span><br><span class=\"line\">Creating a Classic session to <span class=\"string\">&#x27;root@/tmp%2Fmysql.sock&#x27;</span></span><br><span class=\"line\">Fetching global names <span class=\"keyword\">for</span> auto-completion... Press ^C to stop.</span><br><span class=\"line\">Your MySQL connection <span class=\"built_in\">id</span> is 8</span><br><span class=\"line\">Server version: 8.0.30 MySQL Community Server - GPL</span><br><span class=\"line\">No default schema selected; <span class=\"built_in\">type</span> \\use &lt;schema&gt; to <span class=\"built_in\">set</span> one.</span><br><span class=\"line\"> MySQL  localhost  SQL &gt; \\js</span><br><span class=\"line\">Switching to JavaScript mode...</span><br><span class=\"line\"> MySQL  localhost  JS &gt; util.checkForServerUpgrade()</span><br><span class=\"line\">The MySQL server at /tmp%2Fmysql.sock, version 8.0.30 - MySQL Community Server</span><br><span class=\"line\">- GPL, will now be checked <span class=\"keyword\">for</span> compatibility issues <span class=\"keyword\">for</span> upgrade to MySQL 8.4.0.</span><br><span class=\"line\">To check <span class=\"keyword\">for</span> a different target server version, use the targetVersion option.</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: Upgrading MySQL Server from version 8.0.30 to 8.4.0 is not supported.</span><br><span class=\"line\">Please consider running the check using the following option: targetVersion=8.0</span><br><span class=\"line\"></span><br><span class=\"line\">1) Usage of db objects with names conflicting with new reserved keywords</span><br><span class=\"line\">(reservedKeywords)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">2) Removed system variables (removedSysVars)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">3) System variables with new default values (sysVarsNewDefaults)</span><br><span class=\"line\">  Warning: Following system variables that are not defined <span class=\"keyword\">in</span> your</span><br><span class=\"line\">    configuration file will have new default values. Please review <span class=\"keyword\">if</span> you rely on</span><br><span class=\"line\">    their current values and <span class=\"keyword\">if</span> so define them before performing upgrade.</span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/blog-archive/new-defaults-in-mysql-8-0/</span><br><span class=\"line\"></span><br><span class=\"line\">  binlog_transaction_dependency_tracking - default value will change from</span><br><span class=\"line\">    COMMIT_ORDER to WRITESET.</span><br><span class=\"line\">  group_replication_consistency - default value will change from EVENTUAL to</span><br><span class=\"line\">    BEFORE_ON_PRIMARY_FAILOVER.</span><br><span class=\"line\">  group_replication_exit_state_action - default value will change from</span><br><span class=\"line\">    READ_ONLY to OFFLINE_MODE.</span><br><span class=\"line\">  innodb_adaptive_hash_index - default value will change from ON to OFF.</span><br><span class=\"line\">  innodb_buffer_pool_in_core_file - default value will change from ON to OFF.</span><br><span class=\"line\">  innodb_buffer_pool_instances - default value will change from 8 (or 1 <span class=\"keyword\">if</span></span><br><span class=\"line\">    innodb_buffer_pool_size &lt; 1GB) to MAX(1, <span class=\"comment\">#vcpu/4).</span></span><br><span class=\"line\">  innodb_change_buffering - default value will change from all to none.</span><br><span class=\"line\">  innodb_doublewrite_files - default value will change from</span><br><span class=\"line\">    innodb_buffer_pool_instances * 2 to 2.</span><br><span class=\"line\">  innodb_doublewrite_pages - default value will change from</span><br><span class=\"line\">    innodb_write_io_threads to 128.</span><br><span class=\"line\">  innodb_flush_method - default value will change from fsynch (unix) or</span><br><span class=\"line\">    unbuffered (windows) to O_DIRECT.</span><br><span class=\"line\">  innodb_io_capacity - default value will change from 200 to 10000.</span><br><span class=\"line\">  innodb_io_capacity_max - default value will change from 200 to 2 x</span><br><span class=\"line\">    innodb_io_capacity.</span><br><span class=\"line\">  innodb_log_buffer_size - default value will change from 16777216 (16MB) to</span><br><span class=\"line\">    67108864 (64MB).</span><br><span class=\"line\">  innodb_log_writer_threads - default value will change from ON to OFF ( <span class=\"keyword\">if</span></span><br><span class=\"line\">    <span class=\"comment\">#vcpu &lt;= 32 ).</span></span><br><span class=\"line\">  innodb_numa_interleave - default value will change from OFF to ON.</span><br><span class=\"line\">  innodb_page_cleaners - default value will change from 4 to</span><br><span class=\"line\">    innodb_buffer_pool_instances.</span><br><span class=\"line\">  innodb_parallel_read_threads - default value will change from 4 to</span><br><span class=\"line\">    MAX(<span class=\"comment\">#vcpu/8, 4).</span></span><br><span class=\"line\">  innodb_purge_threads - default value will change from 4 to 1 ( <span class=\"keyword\">if</span> <span class=\"comment\">#vcpu &lt;= 16</span></span><br><span class=\"line\">    ).</span><br><span class=\"line\">  innodb_read_io_threads - default value will change from 4 to MAX(<span class=\"comment\">#vcpu/2, 4).</span></span><br><span class=\"line\">  innodb_redo_log_capacity - default value will change from 104857600 (100MB)</span><br><span class=\"line\">    to MIN ( <span class=\"comment\">#vcpu/2, 16 )GB.</span></span><br><span class=\"line\"></span><br><span class=\"line\">4) Issues reported by <span class=\"string\">&#x27;check table x for upgrade&#x27;</span> <span class=\"built_in\">command</span> (checkTableCommand)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">5) Check <span class=\"keyword\">for</span> deprecated usage of single dollar signs <span class=\"keyword\">in</span> object names</span><br><span class=\"line\">(dollarSignName)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">6) Check <span class=\"keyword\">for</span> deprecated or invalid user authentication methods.</span><br><span class=\"line\">(authMethodUsage)</span><br><span class=\"line\">  Warning: The following <span class=\"built_in\">users</span> are using the <span class=\"string\">&#x27;mysql_native_password&#x27;</span></span><br><span class=\"line\">  authentication method <span class=\"built_in\">which</span> is deprecated as of MySQL 8.0.0 and will be</span><br><span class=\"line\">  removed <span class=\"keyword\">in</span> a future release.</span><br><span class=\"line\">  Consider switching the <span class=\"built_in\">users</span> to a different authentication method (i.e.</span><br><span class=\"line\">  caching_sha2_password).</span><br><span class=\"line\"></span><br><span class=\"line\">  - mydb@%</span><br><span class=\"line\">  - mysql.session@localhost</span><br><span class=\"line\">  - mysql.sys@localhost</span><br><span class=\"line\">  - root@localhost</span><br><span class=\"line\"></span><br><span class=\"line\">  More information:</span><br><span class=\"line\">    https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">7) Check <span class=\"keyword\">for</span> deprecated or removed plugin usage. (pluginUsage)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">8) Check <span class=\"keyword\">for</span> deprecated or invalid default authentication methods <span class=\"keyword\">in</span> system</span><br><span class=\"line\">variables. (deprecatedDefaultAuth)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">9) Check <span class=\"keyword\">for</span> deprecated or invalid authentication methods <span class=\"keyword\">in</span> use by MySQL</span><br><span class=\"line\">Router internal accounts. (deprecatedRouterAuthMethod)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">10) Checks <span class=\"keyword\">for</span> errors <span class=\"keyword\">in</span> column definitions (columnDefinition)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">11) Check <span class=\"keyword\">for</span> allowed values <span class=\"keyword\">in</span> System Variables. (sysvarAllowedValues)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">12) Checks <span class=\"keyword\">for</span> user privileges that will be removed (invalidPrivileges)</span><br><span class=\"line\">  Verifies <span class=\"keyword\">for</span> <span class=\"built_in\">users</span> containing grants to be removed, since privileges are</span><br><span class=\"line\">    removed as part of the upgrade, raises a NOTICE to inform the user about</span><br><span class=\"line\">    <span class=\"built_in\">users</span> that will be losing invalid privileges</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">&#x27;mysql.session&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> - The user <span class=\"string\">&#x27;mysql.session&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> has the</span><br><span class=\"line\">    following privileges that will be removed as part of the upgrade process:</span><br><span class=\"line\">    SET_USER_ID</span><br><span class=\"line\">  <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> - The user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> has the following privileges</span><br><span class=\"line\">    that will be removed as part of the upgrade process: SET_USER_ID</span><br><span class=\"line\"></span><br><span class=\"line\">13) Checks <span class=\"keyword\">for</span> partitions by key using columns with prefix key indexes</span><br><span class=\"line\">(partitionsWithPrefixKeys)</span><br><span class=\"line\">  No issues found</span><br><span class=\"line\"></span><br><span class=\"line\">Errors:   0</span><br><span class=\"line\">Warnings: 24</span><br><span class=\"line\">Notices:  2</span><br><span class=\"line\"></span><br><span class=\"line\">NOTE: No fatal errors were found that would prevent an upgrade, but some potential issues were detected. Please ensure that the reported issues are not significant before upgrading.</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时看到通过检查，关闭数据库直接升级吧</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭数据库</span></span><br><span class=\"line\">./mysql8.0.30/bin/mysqladmin --defaults-file=./mysql8.0.30/my.cnf -uroot -p123456 shutdown</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制mysql配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> ./mysql8.0.30/my.cnf ./mysql8.4.0/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改新的配置文件中的basedir，使其指向8.4.0的安装路径</span></span><br><span class=\"line\">basedir    = /usr/local/soft/mysql8.4.0</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># 使用8.4.0启动</span></span><br><span class=\"line\">./mysql8.4.0/bin/mysqld_safe --defaults-file=./mysql8.4.0/my.cnf &amp;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看日志，依旧是没有错误，升级很顺利</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2024-05-09T07:21:55.325669Z 0 [System] [MY-015015] [Server] MySQL Server - start.</span><br><span class=\"line\">2024-05-09T07:21:55.740435Z 0 [Warning] [MY-011070] [Server] &#x27;binlog_format&#x27; is deprecated and will be removed in a future release.</span><br><span class=\"line\">2024-05-09T07:21:55.740549Z 0 [Warning] [MY-010097] [Server] Insecure configuration for --secure-file-priv: Current value does not restrict location of generated files. Consider setting it to a valid, non-empty path.</span><br><span class=\"line\">2024-05-09T07:21:55.740629Z 0 [System] [MY-010116] [Server] /usr/local/soft/mysql-8.4.0-linux-glibc2.17-x86_64/bin/mysqld (mysqld 8.4.0) starting as process 28414</span><br><span class=\"line\">2024-05-09T07:21:55.796983Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class=\"line\">2024-05-09T07:21:56.421873Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class=\"line\">2024-05-09T07:21:56.442008Z 1 [System] [MY-011090] [Server] Data dictionary upgrading from version &#x27;80023&#x27; to &#x27;80300&#x27;.</span><br><span class=\"line\">2024-05-09T07:21:57.106002Z 1 [System] [MY-013413] [Server] Data dictionary upgrade from version &#x27;80023&#x27; to &#x27;80300&#x27; completed.</span><br><span class=\"line\">2024-05-09T07:22:00.128935Z 4 [System] [MY-013381] [Server] Server upgrade from &#x27;80030&#x27; to &#x27;80400&#x27; started.</span><br><span class=\"line\">2024-05-09T07:22:06.850838Z 4 [System] [MY-013381] [Server] Server upgrade from &#x27;80030&#x27; to &#x27;80400&#x27; completed.</span><br><span class=\"line\">2024-05-09T07:22:07.063386Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.</span><br><span class=\"line\">2024-05-09T07:22:07.063456Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.</span><br><span class=\"line\">2024-05-09T07:22:07.085760Z 0 [System] [MY-010931] [Server] /usr/local/soft/mysql-8.4.0-linux-glibc2.17-x86_64/bin/mysqld: ready for connections. Version: &#x27;8.4.0&#x27;  socket: &#x27;/tmp/mysql.sock&#x27;  port: 3306  MySQL Community Server - GPL.</span><br><span class=\"line\">2024-05-09T07:22:07.340333Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: &#x27;::&#x27; port: 33060, socket: /tmp/mysqlx.sock</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从日志看到’binlog_format’也要不支持了，不过先不用管，等到不支持了再处理吧。</p>\n</blockquote>\n<h2 id=\"如果升级到8-4之前忘记修改密码插件了，则升级之后就不能正常登录了，此时怎么办呢？\">如果升级到8.4之前忘记修改密码插件了，则升级之后就不能正常登录了，此时怎么办呢？</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>升级到8.4之前忘记修改密码插件了，则升级之后登录数据库会报告如下错误</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR 1524 (HY000): Plugin &#x27;mysql_native_password&#x27; is not loaded</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>解决方案<br>\n在mysql的配置文件中增加<code>mysql-native-password=ON</code>，然后重启数据库即可，但还是建议尽快修改用户的认证插件为<code>caching_sha2_password</code>吧，毕竟这个认证方式存在安全漏洞。</p>\n</li>\n</ul>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em><br>\n笔者之前没有注意到8.4.0新增的<code>mysql-native-password=ON</code>这个配置，所以采用了如下重置密码的方式进行插件修改，留个纪念吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kill掉mysql服务</span></span><br><span class=\"line\">killall mysqld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 无权限模式启动</span></span><br><span class=\"line\">./mysql8.4.0/bin/mysqld_safe --defaults-file=./mysql8.4.0/my.cnf --skip-grant-tables &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录，此时不需要密码</span></span><br><span class=\"line\">./mysql8.4.0/bin/mysql -uroot</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; USE mysql;</span><br><span class=\"line\"><span class=\"comment\"># 修改密码插件为 caching_sha2_password</span></span><br><span class=\"line\">mysql&gt; UPDATE user SET plugin=<span class=\"string\">&#x27;caching_sha2_password&#x27;</span> WHERE User=<span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 将密码设置为空</span></span><br><span class=\"line\">mysql&gt; UPDATE user SET authentication_string=null WHERE User=<span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 刷新权限：</span></span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\"><span class=\"comment\"># 退出MySQL</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">exit</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭数据库，此时不需要密码即可关闭</span></span><br><span class=\"line\">./mysql8.4.0/bin/mysqladmin --defaults-file=./mysql8.4.0/my.cnf -uroot -p shutdown</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启启动mysql服务</span></span><br><span class=\"line\">./mysql8.4.0/bin/mysqld_safe --defaults-file=./mysql8.4.0/my.cnf &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录，此时依旧不需要密码</span></span><br><span class=\"line\">./mysql8.4.0/bin/mysql -uroot</span><br><span class=\"line\"><span class=\"comment\"># 设置密码</span></span><br><span class=\"line\">mysql&gt; ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 刷新权限：</span></span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\"><span class=\"comment\"># 退出MySQL</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">exit</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录，此时使用密码就可以正常登录了</span></span><br><span class=\"line\">./mysql8.4.0/bin/mysql -uroot -p123456</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 之后再修改其他用户的密码即可，比如</span></span><br><span class=\"line\">mysql&gt; ALTER USER <span class=\"string\">&#x27;other&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED WITH caching_sha2_password BY <span class=\"string\">&#x27;otherpass&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看修改后的user信息</span></span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">select</span> user,host,plugin from user;</span><br></pre></td></tr></table></figure>\n</div>\n","content_text":"摘要 MySql知识点介绍:从Mysql5.7升级到Mysql8 本文基于mysql-8.0.30，https://dev.mysql.com/doc/refman/8.0/en/ 2024-04-30，mysql-8.4.0 LTS版本发布，本文在将mysql从5.7.44升级到8.0.30的基础上，升级到8.4.0 LTS版本。mysql-8.4.0 LTS官方文档 从Mysql5.7升级到Mysql8 升级前，请先备份数据库，防止升级失败 mysqlsh 在mysql8以前，升级mysql还是比较麻烦的，除了要处理不兼容的参数和语法外，而且不支持跨版本的升级，比如5.5必须先升级到5.6，然后再升级到5.7。 mysqlsh是mysql官方提供的一个命令行工具，是MySQL的高级客户端和代码编辑器。其不仅可以像使用mysql命令一样执行sql，而且还支持js脚本、python脚本，等等，具体可以查看官网。 mysqlsh的众多功能之一就是可以检测当前版本是否可以升级到与当前mysqlsh相同的版本。 如果你当前的版本是5.6，你甚至都不需要先将数据库升级到5.7就可以直接升级到8.0，因为mysql8.0支持mysql5.5到mysql8.0的升级。 mysqlsh官方文档 安装mysqlsh 官网下载地址 选择需要的版本进行下载，我这里选择下载的版本是linux的8.0.30版本 下载后解压即可 检查是否可以升级 官网说明 123456789101112# mysqlsh8.4以前可以使用如下方法，因为其默认就是执行js代码./mysqlsh username:password@host -e &quot;util.checkForServerUpgrade()&quot;# mysqlsh8.4后默认执行的是sql代码，所以要先登录，切换到js环境后再运行上面的代码# 登录./mysqlsh username:password@host MySQL localhost SQL &gt; \\jsSwitching to JavaScript mode... MySQL localhost JS &gt; util.checkForServerUpgrade() …………………………………………………… # 退出 MySQL localhost JS &gt; \\qBye! 检查输出信息说明 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148WARNING: Using a password on the command line interface can be insecure.The MySQL server atlocalhost:3306, version5.7.44-log - Please upgrade to 8.0 or opt-in to the paid RDS Extended Supportservice before 5.7 reaches end of standard support on 29 February, 2024:https://a.co/hQqiIn0, will now be checked for compatibility issues for upgradeto MySQL 8.0.30...# 旧时间类型的使用1) Usage of old temporal type No issues found# 使用与新保留关键字冲突的数据库对象名称2) Usage of db objects with names conflicting with new reserved keywords No issues found# 使用utf8mb3字符集3) Usage of utf8mb3 charset Warning: The following objects use the utf8mb3 character set. It is recommended to convert them to use utf8mb4 instead, for improved Unicode support. More information: https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-utf8mb3.html mydb - schema&#x27;s default character set: utf8 mysql - schema&#x27;s default character set: utf8 mydb.tbl_info_i.a_product - column&#x27;s default character set: utf8 mydb.tbl_info_i.a_country - column&#x27;s default character set: utf8 mydb.tbl_info_i.a_version - column&#x27;s default character set: utf8 mydb.tbl_info_i.a_placement - column&#x27;s default character set: utf8………………………………………………………………………………………………………………………………# MySQL模式中的表名与8.0中的新表冲突4) Table names in the mysql schema conflicting with new tables in 8.0 No issues found# 使用非本机分区引擎的分区表5) Partitioned tables using engines with non native partitioning No issues found# 外键约束名称超过64个字符6) Foreign key constraint names longer than 64 characters No issues found# 使用过时的MAXDB sql_mode标志7) Usage of obsolete MAXDB sql_mode flag No issues found# 使用过时的sql_mode标志8) Usage of obsolete sql_mode flags No issues found# ENUM/SET列定义包含超过255个字符的元素9) ENUM/SET column definitions containing elements longer than 255 characters No issues found# 在共享表空间中使用分区表10) Usage of partitioned tables in shared tablespaces No issues found# 表空间数据文件路径中的循环目录引用11) Circular directory references in tablespace data file paths No issues found# 使用已删除的函数12) Usage of removed functions No issues found# 使用已删除的GROUP BY ASC/DESC语法13) Usage of removed GROUP BY ASC/DESC syntax No issues found# 已删除的用于错误日志记录到系统日志配置的系统变量14) Removed system variables for error logging to the system log configuration To run this check requires full path to MySQL server configuration file to be specified at &#x27;configPath&#x27; key of options dictionary More information: https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-13.html#mysqld-8-0-13-logging# 已删除的系统变量15) Removed system variables To run this check requires full path to MySQL server configuration file to be specified at &#x27;configPath&#x27; key of options dictionary More information: https://dev.mysql.com/doc/refman/8.0/en/added-deprecated-removed.html#optvars-removed# 具有新默认值的系统变量16) System variables with new default values To run this check requires full path to MySQL server configuration file to be specified at &#x27;configPath&#x27; key of options dictionary More information: https://mysqlserverteam.com/new-defaults-in-mysql-8-0/# 零日期、日期时间和时间戳值17) Zero Date, Datetime, and Timestamp values Warning: By default zero date/datetime/timestamp values are no longer allowed in MySQL, as of 5.7.8 NO_ZERO_IN_DATE and NO_ZERO_DATE are included in SQL_MODE by default. These modes should be used with strict mode as they will be merged with strict mode in a future release. If you do not include these modes in your SQL_MODE setting, you are able to insert date/datetime/timestamp values that contain zeros. It is strongly advised to replace zero values with valid ones, as they may not work correctly in the future. More information: https://lefred.be/content/mysql-8-0-and-wrong-dates/ global.sql_mode - does not contain either NO_ZERO_DATE or NO_ZERO_IN_DATE which allows insertion of zero dates# 由文件删除或损坏导致的模式不一致18) Schema inconsistencies resulting from file removal or corruption No issues found# 被InnoDB识别但属于不同引擎的表19) Tables recognized by InnoDB that belong to a different engine No issues found# &#x27;check table x for upgrade&#x27;命令报告的问题20) Issues reported by &#x27;check table x for upgrade&#x27; command No issues found# 新的默认认证插件考虑21) New default authentication plugin considerations Warning: The new default authentication plugin &#x27;caching_sha2_password&#x27; offers more secure password hashing than previously used &#x27;mysql_native_password&#x27; (and consequent improved client connection authentication). However, it also has compatibility implications that may affect existing MySQL installations. If your MySQL installation must serve pre-8.0 clients and you encounter compatibility issues after upgrading, the simplest way to address those issues is to reconfigure the server to revert to the previous default authentication plugin (mysql_native_password). For example, use these lines in the server option file: [mysqld] default_authentication_plugin=mysql_native_password However, the setting should be viewed as temporary, not as a long term or permanent solution, because it causes new accounts created with the setting in effect to forego the improved authentication security. If you are using replication please take time to understand how the authentication plugin changes may impact you. More information: https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password-compatibility-issues https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password-replicationErrors: 0Warnings: 98Notices: 0NOTE: No fatal errors were found that would prevent an upgrade, but some potential issues were detected. Please ensure that the reported issues are not significant before upgrading. 可以看到，其检查的数据库版本是5.7.44，其检查是否可以升级到8.0.30 检测项共有21个，其中警告有98个，错误有0个，注意，如果有错误，则不能直接升级，需要解决错误问题，否则升级会失败。至于警告暂时可以不处理。 警告集中体现在字符集上，5.7.44的字符集是utf8(实际就是utf8mb3)，而mysql8以后的默认字符集是utf8mb4，这个警告不影响升级，可以忽略。如果需要修改字符集到utf8mb4，需要注意原来的字段字符串长度是否符合要求，因为utf8mb4是4字节，而utf8mb3是3字节。另外如果使用了存储过程也要注意参数的长度是否符合要求。 这里说一下default_authentication_plugin，mysql8.0.13开始，默认的认证插件是caching_sha2_password，而之前是mysql_native_password，这个警告虽然可以忽略，但是升级后建议尽快将认证插件修改为caching_sha2_password，因为mysql_native_password的认证方式存在安全漏洞，可以参考官方文档。另外，从mysql8.4.0开始，不再支持default_authentication_plugin，若要使其支持mysql_native_password插件，8.4.0开始为我们增加了一个新的配置项mysql-native-password，在[mysqld]中配置mysql-native-password=ON即可开启支持，默认为OFF。 另外还要注意关键词和保留词的问题，mysql8.0以后，又增加了很多个关键词和保留词，如果检查到则需要修改一下，不然升级会失败。即便表和字段里没有使用这些保留字，也要检查一下业务代码中是否有使用。关于关键词和保留词可以查看官网Keywords and Reserved Words，相比于MySQL 5.7，增加了大约130个，同时也减少了6个。 这里建议设置表名称和字段名称时，可以为其设置前缀，比如：表名称为：t_user、字段名称为：f_user_id 还有一点需要注意，Mysql8修改了很多参数的默认值，具体可以查看官方网站的说明，如果你不希望使用默认值，则需要将其配置到配置文件中，这里强调一下，重点关注 character_set_server 和 collation_server 这两个参数。所有的参数配置参考官方文档 关于字符集还想多说两句 mysql8的character_set_server默认是utf8mb4，collation_server默认是utf8mb4_0900_ai_ci 如果创建数据库或者表的时候没有指定字符集，则默认使用character_set_server和collation_server的默认值 此时新创建的表就有可能与旧表字符集不一致，关联查询时就有可能导致错误或因为需要进行字符集转换导致查询性能下降。 最好的方式是创建数据库或表时明确指定字符集，或者在my.cnf配置文件中配置character_set_server和collation_server的值。 升级数据库的过程 因为我们要升级到mysql8.0.30，所以需要先下载并安装mysql8.0.30 关闭mysql5.7的数据库 备份数据目录(一定要做好备份，升级后不能降级的) 根据检查提示修改my.cnf配置文件中的配置(主要是不兼容的配置，如果检查提示没有则不需要修改) 非常重要的一步，就是修改my.cnf配置文件中的basedir，将其指向mysql8.0.30的安装目录 直接使用mysql8.0.30的命令启动数据库，启动过程中就会完成数据库的升级，可以通过mysql的日志文件(log-error)查看升级情况 升级完成后尽快使用新的密码认证插件修改密码，注意要修改所有用户的密码，包括root用户 1mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH caching_sha2_password BY &#x27;123456&#x27;; 小贴士 mysql8.4.0相比于之前的版本变化比较大，具体可以查看官网文档 mysql5.7不要直接升级到8.4.0及以后的版本，可以先升级到8.0.30，然后再升级到8.4.0 升级到8.4.0前依旧要先使用mysqlsh检查是否可以升级，注意要下载对应的mysqlsh版本 升级前要先检查是否所有用户的密码插件都是caching_sha2_password，如果没有则需要修改 升级前要先检查my.cnf中是否配置了default_authentication_plugin，如果有则删除，如果必须要配置mysql_native_password认证插件，则需要配置mysql-native-password=ON 修改my.cnf中的basedir使其指向8.4.0的安装目录 使用8.4.0的命令启动mysql，检查日志是否有错误。 mysql5.7.44升级到8.0.30，再升级到8.4.0的完整过程 准备好各个版本的mysql和mysqlsh 1234567# 目录结构mysql5 # 5.7.44安装目录mysql8.0.30 # 8.0.30安装目录mysql8.4.0 # 8.4.0安装目录mysqlsh8.0.30 # 8.0.30的mysqlsh安装目录mysqlsh8.4.0 # 8.4.0的mysqlsh安装目录datas/mysql # 存放数据目录 mysql5/my.cnf配置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758[mysql]default-character-set=utf8mb4local_infile=ON[client]default-character-set=utf8mb4port = 3306socket = /tmp/mysql.sock[mysqld]skip-name-resolvesecure_file_priv=&quot;&quot;local_infile=ONdefault_authentication_plugin=mysql_native_passwordport = 3306server-id = 1001user = mysqlsocket = /tmp/mysql.sockbasedir = /usr/local/soft/mysql5datadir = /usr/local/soft/datas/mysqllog-bin = mysql-binbinlog-format = ROWexpire-logs-days=10sync-binlog=0innodb_data_home_dir =./innodb_log_group_home_dir =./log-error =mysql.logpid-file =mysql.pidcharacter-set-server=utf8mb4lower_case_table_names=1autocommit =1slow_query_log=1slow_query_log_file=db_slow.loglong_query_time=5log_output=FILElog_queries_not_using_indexes=1skip-external-lockingkey_buffer_size = 256Mmax_allowed_packet = 64Mtable_open_cache = 1024sort_buffer_size = 4Mnet_buffer_length = 8Kread_buffer_size = 4Mread_rnd_buffer_size = 512Kmyisam_sort_buffer_size = 64Mthread_cache_size = 64tmp_table_size = 128Mexplicit_defaults_for_timestamp = truemax_connections = 500max_connect_errors = 100open_files_limit = 65535default_storage_engine = InnoDBinnodb_data_file_path = ibdata1:10M:autoextend 5.7.44升级到8.0.30 升级检查 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122# 升级检查./mysqlsh8.0.30/bin/mysqlsh --uri root:123456@localhost -e &quot;util.checkForServerUpgrade()&quot;# 输出WARNING: Using a password on the command line interface can be insecure.The MySQL server at /tmp%2Fmysql.sock, version 5.7.44-log - MySQL CommunityServer (GPL), will now be checked for compatibility issues for upgrade to MySQL8.0.30...1) Usage of old temporal type No issues found2) Usage of db objects with names conflicting with new reserved keywords No issues found3) Usage of utf8mb3 charset Warning: The following objects use the utf8mb3 character set. It is recommended to convert them to use utf8mb4 instead, for improved Unicode support. More information: https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-utf8mb3.html mydb - schema&#x27;s default character set: utf8 mysql - schema&#x27;s default character set: utf8 mydb.tbl_info_i.a_product - column&#x27;s default character set: utf8 mydb.tbl_info_i.a_country - column&#x27;s default character set: utf8 mydb.tbl_info_i.a_version - column&#x27;s default character set: utf8 mydb.tbl_info_i.a_placement - column&#x27;s default character set: utf8 …………………………………………………………………………………………4) Table names in the mysql schema conflicting with new tables in 8.0 No issues found5) Partitioned tables using engines with non native partitioning No issues found6) Foreign key constraint names longer than 64 characters No issues found7) Usage of obsolete MAXDB sql_mode flag No issues found8) Usage of obsolete sql_mode flags Notice: The following DB objects have obsolete options persisted for sql_mode, which will be cleared during upgrade to 8.0. More information: https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html#mysql-nutshell-removals global system variable sql_mode - defined using obsolete NO_AUTO_CREATE_USER option9) ENUM/SET column definitions containing elements longer than 255 characters No issues found10) Usage of partitioned tables in shared tablespaces No issues found11) Circular directory references in tablespace data file paths No issues found12) Usage of removed functions No issues found13) Usage of removed GROUP BY ASC/DESC syntax No issues found14) Removed system variables for error logging to the system log configuration To run this check requires full path to MySQL server configuration file to be specified at &#x27;configPath&#x27; key of options dictionary More information: https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-13.html#mysqld-8-0-13-logging15) Removed system variables To run this check requires full path to MySQL server configuration file to be specified at &#x27;configPath&#x27; key of options dictionary More information: https://dev.mysql.com/doc/refman/8.0/en/added-deprecated-removed.html#optvars-removed16) System variables with new default values To run this check requires full path to MySQL server configuration file to be specified at &#x27;configPath&#x27; key of options dictionary More information: https://mysqlserverteam.com/new-defaults-in-mysql-8-0/17) Zero Date, Datetime, and Timestamp values No issues found18) Schema inconsistencies resulting from file removal or corruption No issues found19) Tables recognized by InnoDB that belong to a different engine No issues found20) Issues reported by &#x27;check table x for upgrade&#x27; command No issues found21) New default authentication plugin considerations Warning: The new default authentication plugin &#x27;caching_sha2_password&#x27; offers more secure password hashing than previously used &#x27;mysql_native_password&#x27; (and consequent improved client connection authentication). However, it also has compatibility implications that may affect existing MySQL installations. If your MySQL installation must serve pre-8.0 clients and you encounter compatibility issues after upgrading, the simplest way to address those issues is to reconfigure the server to revert to the previous default authentication plugin (mysql_native_password). For example, use these lines in the server option file: [mysqld] default_authentication_plugin=mysql_native_password However, the setting should be viewed as temporary, not as a long term or permanent solution, because it causes new accounts created with the setting in effect to forego the improved authentication security. If you are using replication please take time to understand how the authentication plugin changes may impact you. More information: https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password-compatibility-issues https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password-replicationErrors: 0Warnings: 98Notices: 1NOTE: No fatal errors were found that would prevent an upgrade, but some potential issues were detected. Please ensure that the reported issues are not significant before upgrading. 看到没有error，开始升级 1234567891011# 关闭数据库./mysql5/bin/mysqladmin --defaults-file=./mysql5/my.cnf -uroot -p123456 shutdown# 复制mysql配置文件cp ./mysql5/my.cnf ./mysql8.0.30/my.cnf# 修改新的配置文件中的basedir，使其指向8.0.30的安装路径basedir = /usr/local/soft/mysql8.0.30# 使用8.0.30启动./mysql8.0.30/bin/mysqld_safe --defaults-file=./mysql8.0.30/my.cnf &amp; 查看启动日志，没有错误说明升级成功 12345678910111213142024-05-09T06:48:50.524705Z 0 [Warning] [MY-011068] [Server] The syntax &#x27;expire-logs-days&#x27; is deprecated and will be removed in a future release. Please use binlog_expire_logs_seconds instead.2024-05-09T06:48:50.524819Z 0 [Warning] [MY-010097] [Server] Insecure configuration for --secure-file-priv: Current value does not restrict location of generated files. Consider setting it to a valid, non-empty path.2024-05-09T06:48:50.524917Z 0 [Warning] [MY-010918] [Server] &#x27;default_authentication_plugin&#x27; is deprecated and will be removed in a future release. Please use authentication_policy instead.2024-05-09T06:48:50.524983Z 0 [System] [MY-010116] [Server] /usr/local/soft/mysql8.0.30/bin/mysqld (mysqld 8.0.30) starting as process 266962024-05-09T06:48:50.563366Z 1 [System] [MY-011012] [Server] Starting upgrade of data directory.2024-05-09T06:48:50.563414Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.2024-05-09T06:48:51.260298Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.2024-05-09T06:48:53.614398Z 2 [System] [MY-011003] [Server] Finished populating Data Dictionary tables with data.2024-05-09T06:48:55.055320Z 5 [System] [MY-013381] [Server] Server upgrade from &#x27;50700&#x27; to &#x27;80030&#x27; started.2024-05-09T06:49:02.063990Z 5 [System] [MY-013381] [Server] Server upgrade from &#x27;50700&#x27; to &#x27;80030&#x27; completed.2024-05-09T06:49:02.237992Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.2024-05-09T06:49:02.238048Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.2024-05-09T06:49:02.267583Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: &#x27;::&#x27; port: 33060, socket: /tmp/mysqlx.sock2024-05-09T06:49:02.267648Z 0 [System] [MY-010931] [Server] /usr/local/soft/mysql8.0.30/bin/mysqld: ready for connections. Version: &#x27;8.0.30&#x27; socket: &#x27;/tmp/mysql.sock&#x27; port: 3306 MySQL Community Server - GPL. 根据日志提示我们应该修改两个配置参数，未来将不可用了，不过这里暂且先不去管它，等检查通不过了再进行处理就可以。 121.The syntax &#x27;expire-logs-days&#x27; is deprecated and will be removed in a future release. Please use binlog_expire_logs_seconds instead.2.&#x27;default_authentication_plugin&#x27; is deprecated and will be removed in a future release. Please use authentication_policy instead. 修改密码插件，这个步骤很重要 1234# 登录./mysql8.0.30/bin/mysql -uroot -p123456# 升级完成后使用新的密码认证插件修改密码，8.4不再推荐mysql_native_password认证插，所以升级到8.4以前一定要先修改密码插件，如果忘记了也没关系，文末有重置密码的方法mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH caching_sha2_password BY &#x27;123456&#x27;; 8.0.30升级到8.4.0 同样先用8.4.0的mysqlsh检查一下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145# 升级检查./mysqlsh8.4.0/bin/mysqlsh --uri root:123456@localhost# 输出MySQL Shell 8.4.0Copyright (c) 2016, 2024, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or its affiliates.Other names may be trademarks of their respective owners.Type &#x27;\\help&#x27; or &#x27;\\?&#x27; for help; &#x27;\\quit&#x27; to exit.WARNING: Using a password on the command line interface can be insecure.Creating a Classic session to &#x27;root@/tmp%2Fmysql.sock&#x27;Fetching global names for auto-completion... Press ^C to stop.Your MySQL connection id is 15Server version: 8.0.30 MySQL Community Server - GPLNo default schema selected; type \\use &lt;schema&gt; to set one. MySQL localhost SQL &gt; \\jsSwitching to JavaScript mode... MySQL localhost JS &gt; util.checkForServerUpgrade()The MySQL server at /tmp%2Fmysql.sock, version 8.0.30 - MySQL Community Server- GPL, will now be checked for compatibility issues for upgrade to MySQL 8.4.0.To check for a different target server version, use the targetVersion option.WARNING: Upgrading MySQL Server from version 8.0.30 to 8.4.0 is not supported.Please consider running the check using the following option: targetVersion=8.01) Usage of db objects with names conflicting with new reserved keywords(reservedKeywords) No issues found2) Removed system variables (removedSysVars) Error: Following system variables that were detected as being used will be removed. Please update your system to not rely on them before the upgrade. More information: https://dev.mysql.com/doc/refman/8.0/en/added-deprecated-removed.html#optvars-removed expire_logs_days - Error: The system variable &#x27;expire_logs_days&#x27; is set to 10 (EXPLICIT) and will be removed.3) System variables with new default values (sysVarsNewDefaults) Warning: Following system variables that are not defined in your configuration file will have new default values. Please review if you rely on their current values and if so define them before performing upgrade. More information: https://dev.mysql.com/blog-archive/new-defaults-in-mysql-8-0/ binlog_transaction_dependency_tracking - default value will change from COMMIT_ORDER to WRITESET. group_replication_consistency - default value will change from EVENTUAL to BEFORE_ON_PRIMARY_FAILOVER. group_replication_exit_state_action - default value will change from READ_ONLY to OFFLINE_MODE. innodb_adaptive_hash_index - default value will change from ON to OFF. innodb_buffer_pool_in_core_file - default value will change from ON to OFF. innodb_buffer_pool_instances - default value will change from 8 (or 1 if innodb_buffer_pool_size &lt; 1GB) to MAX(1, #vcpu/4). innodb_change_buffering - default value will change from all to none. innodb_doublewrite_files - default value will change from innodb_buffer_pool_instances * 2 to 2. innodb_doublewrite_pages - default value will change from innodb_write_io_threads to 128. innodb_flush_method - default value will change from fsynch (unix) or unbuffered (windows) to O_DIRECT. innodb_io_capacity - default value will change from 200 to 10000. innodb_io_capacity_max - default value will change from 200 to 2 x innodb_io_capacity. innodb_log_buffer_size - default value will change from 16777216 (16MB) to 67108864 (64MB). innodb_log_writer_threads - default value will change from ON to OFF ( if #vcpu &lt;= 32 ). innodb_numa_interleave - default value will change from OFF to ON. innodb_page_cleaners - default value will change from 4 to innodb_buffer_pool_instances. innodb_parallel_read_threads - default value will change from 4 to MAX(#vcpu/8, 4). innodb_purge_threads - default value will change from 4 to 1 ( if #vcpu &lt;= 16 ). innodb_read_io_threads - default value will change from 4 to MAX(#vcpu/2, 4). innodb_redo_log_capacity - default value will change from 104857600 (100MB) to MIN ( #vcpu/2, 16 )GB.4) Issues reported by &#x27;check table x for upgrade&#x27; command (checkTableCommand) No issues found5) Check for deprecated usage of single dollar signs in object names(dollarSignName) No issues found6) Check for deprecated or invalid user authentication methods.(authMethodUsage) Warning: The following users are using the &#x27;mysql_native_password&#x27; authentication method which is deprecated as of MySQL 8.0.0 and will be removed in a future release. Consider switching the users to a different authentication method (i.e. caching_sha2_password). - mydb@% - mysql.session@localhost - mysql.sys@localhost - root@localhost More information: https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html7) Check for deprecated or removed plugin usage. (pluginUsage) No issues found8) Check for deprecated or invalid default authentication methods in systemvariables. (deprecatedDefaultAuth) The following variables have problems with their set authentication method: Error: default_authentication_plugin - mysql_native_password authentication method was removed and it must be corrected before upgrading to 8.4.0 release.9) Check for deprecated or invalid authentication methods in use by MySQLRouter internal accounts. (deprecatedRouterAuthMethod) No issues found10) Checks for errors in column definitions (columnDefinition) No issues found11) Check for allowed values in System Variables. (sysvarAllowedValues) No issues found12) Checks for user privileges that will be removed (invalidPrivileges) Verifies for users containing grants to be removed, since privileges are removed as part of the upgrade, raises a NOTICE to inform the user about users that will be losing invalid privileges &#x27;mysql.session&#x27;@&#x27;localhost&#x27; - The user &#x27;mysql.session&#x27;@&#x27;localhost&#x27; has the following privileges that will be removed as part of the upgrade process: SET_USER_ID &#x27;root&#x27;@&#x27;localhost&#x27; - The user &#x27;root&#x27;@&#x27;localhost&#x27; has the following privileges that will be removed as part of the upgrade process: SET_USER_ID13) Checks for partitions by key using columns with prefix key indexes(partitionsWithPrefixKeys) No issues foundErrors: 2Warnings: 24Notices: 2ERROR: 2 errors were found. Please correct these issues before upgrading to avoid compatibility issues. 看到了两处错误，就是我们上面说的那两个参数需要修改，修改./mysql8.0.30/my.cnf 12345# binlog日志过期时间，单位秒，过期的binlog日志会被删除，保证磁盘空间，这里设置为10天，mysql8以前的版本这个参数是expire-logs-days，单位是天binlog_expire_logs_seconds =864000#expire-logs-days=10#default_authentication_plugin=mysql_native_password 修改后要重启数据库 12345# 关闭数据库 ./mysql8.0.30/bin/mysqladmin --defaults-file=./mysql8.0.30/my.cnf -uroot -p123456 shutdown # 使用8.0.30启动 ./mysql8.0.30/bin/mysqld_safe --defaults-file=./mysql8.0.30/my.cnf &amp; 再次进程升级检查 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136# 升级检查./mysqlsh8.4.0/bin/mysqlsh --uri root:123456@localhost# 输出MySQL Shell 8.4.0Copyright (c) 2016, 2024, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or its affiliates.Other names may be trademarks of their respective owners.Type &#x27;\\help&#x27; or &#x27;\\?&#x27; for help; &#x27;\\quit&#x27; to exit.WARNING: Using a password on the command line interface can be insecure.Creating a Classic session to &#x27;root@/tmp%2Fmysql.sock&#x27;Fetching global names for auto-completion... Press ^C to stop.Your MySQL connection id is 8Server version: 8.0.30 MySQL Community Server - GPLNo default schema selected; type \\use &lt;schema&gt; to set one. MySQL localhost SQL &gt; \\jsSwitching to JavaScript mode... MySQL localhost JS &gt; util.checkForServerUpgrade()The MySQL server at /tmp%2Fmysql.sock, version 8.0.30 - MySQL Community Server- GPL, will now be checked for compatibility issues for upgrade to MySQL 8.4.0.To check for a different target server version, use the targetVersion option.WARNING: Upgrading MySQL Server from version 8.0.30 to 8.4.0 is not supported.Please consider running the check using the following option: targetVersion=8.01) Usage of db objects with names conflicting with new reserved keywords(reservedKeywords) No issues found2) Removed system variables (removedSysVars) No issues found3) System variables with new default values (sysVarsNewDefaults) Warning: Following system variables that are not defined in your configuration file will have new default values. Please review if you rely on their current values and if so define them before performing upgrade. More information: https://dev.mysql.com/blog-archive/new-defaults-in-mysql-8-0/ binlog_transaction_dependency_tracking - default value will change from COMMIT_ORDER to WRITESET. group_replication_consistency - default value will change from EVENTUAL to BEFORE_ON_PRIMARY_FAILOVER. group_replication_exit_state_action - default value will change from READ_ONLY to OFFLINE_MODE. innodb_adaptive_hash_index - default value will change from ON to OFF. innodb_buffer_pool_in_core_file - default value will change from ON to OFF. innodb_buffer_pool_instances - default value will change from 8 (or 1 if innodb_buffer_pool_size &lt; 1GB) to MAX(1, #vcpu/4). innodb_change_buffering - default value will change from all to none. innodb_doublewrite_files - default value will change from innodb_buffer_pool_instances * 2 to 2. innodb_doublewrite_pages - default value will change from innodb_write_io_threads to 128. innodb_flush_method - default value will change from fsynch (unix) or unbuffered (windows) to O_DIRECT. innodb_io_capacity - default value will change from 200 to 10000. innodb_io_capacity_max - default value will change from 200 to 2 x innodb_io_capacity. innodb_log_buffer_size - default value will change from 16777216 (16MB) to 67108864 (64MB). innodb_log_writer_threads - default value will change from ON to OFF ( if #vcpu &lt;= 32 ). innodb_numa_interleave - default value will change from OFF to ON. innodb_page_cleaners - default value will change from 4 to innodb_buffer_pool_instances. innodb_parallel_read_threads - default value will change from 4 to MAX(#vcpu/8, 4). innodb_purge_threads - default value will change from 4 to 1 ( if #vcpu &lt;= 16 ). innodb_read_io_threads - default value will change from 4 to MAX(#vcpu/2, 4). innodb_redo_log_capacity - default value will change from 104857600 (100MB) to MIN ( #vcpu/2, 16 )GB.4) Issues reported by &#x27;check table x for upgrade&#x27; command (checkTableCommand) No issues found5) Check for deprecated usage of single dollar signs in object names(dollarSignName) No issues found6) Check for deprecated or invalid user authentication methods.(authMethodUsage) Warning: The following users are using the &#x27;mysql_native_password&#x27; authentication method which is deprecated as of MySQL 8.0.0 and will be removed in a future release. Consider switching the users to a different authentication method (i.e. caching_sha2_password). - mydb@% - mysql.session@localhost - mysql.sys@localhost - root@localhost More information: https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html7) Check for deprecated or removed plugin usage. (pluginUsage) No issues found8) Check for deprecated or invalid default authentication methods in systemvariables. (deprecatedDefaultAuth) No issues found9) Check for deprecated or invalid authentication methods in use by MySQLRouter internal accounts. (deprecatedRouterAuthMethod) No issues found10) Checks for errors in column definitions (columnDefinition) No issues found11) Check for allowed values in System Variables. (sysvarAllowedValues) No issues found12) Checks for user privileges that will be removed (invalidPrivileges) Verifies for users containing grants to be removed, since privileges are removed as part of the upgrade, raises a NOTICE to inform the user about users that will be losing invalid privileges &#x27;mysql.session&#x27;@&#x27;localhost&#x27; - The user &#x27;mysql.session&#x27;@&#x27;localhost&#x27; has the following privileges that will be removed as part of the upgrade process: SET_USER_ID &#x27;root&#x27;@&#x27;localhost&#x27; - The user &#x27;root&#x27;@&#x27;localhost&#x27; has the following privileges that will be removed as part of the upgrade process: SET_USER_ID13) Checks for partitions by key using columns with prefix key indexes(partitionsWithPrefixKeys) No issues foundErrors: 0Warnings: 24Notices: 2NOTE: No fatal errors were found that would prevent an upgrade, but some potential issues were detected. Please ensure that the reported issues are not significant before upgrading. 此时看到通过检查，关闭数据库直接升级吧 1234567891011# 关闭数据库./mysql8.0.30/bin/mysqladmin --defaults-file=./mysql8.0.30/my.cnf -uroot -p123456 shutdown# 复制mysql配置文件cp ./mysql8.0.30/my.cnf ./mysql8.4.0/my.cnf# 修改新的配置文件中的basedir，使其指向8.4.0的安装路径basedir = /usr/local/soft/mysql8.4.0 # 使用8.4.0启动./mysql8.4.0/bin/mysqld_safe --defaults-file=./mysql8.4.0/my.cnf &amp; 查看日志，依旧是没有错误，升级很顺利 12345678910111213142024-05-09T07:21:55.325669Z 0 [System] [MY-015015] [Server] MySQL Server - start.2024-05-09T07:21:55.740435Z 0 [Warning] [MY-011070] [Server] &#x27;binlog_format&#x27; is deprecated and will be removed in a future release.2024-05-09T07:21:55.740549Z 0 [Warning] [MY-010097] [Server] Insecure configuration for --secure-file-priv: Current value does not restrict location of generated files. Consider setting it to a valid, non-empty path.2024-05-09T07:21:55.740629Z 0 [System] [MY-010116] [Server] /usr/local/soft/mysql-8.4.0-linux-glibc2.17-x86_64/bin/mysqld (mysqld 8.4.0) starting as process 284142024-05-09T07:21:55.796983Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.2024-05-09T07:21:56.421873Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.2024-05-09T07:21:56.442008Z 1 [System] [MY-011090] [Server] Data dictionary upgrading from version &#x27;80023&#x27; to &#x27;80300&#x27;.2024-05-09T07:21:57.106002Z 1 [System] [MY-013413] [Server] Data dictionary upgrade from version &#x27;80023&#x27; to &#x27;80300&#x27; completed.2024-05-09T07:22:00.128935Z 4 [System] [MY-013381] [Server] Server upgrade from &#x27;80030&#x27; to &#x27;80400&#x27; started.2024-05-09T07:22:06.850838Z 4 [System] [MY-013381] [Server] Server upgrade from &#x27;80030&#x27; to &#x27;80400&#x27; completed.2024-05-09T07:22:07.063386Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.2024-05-09T07:22:07.063456Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.2024-05-09T07:22:07.085760Z 0 [System] [MY-010931] [Server] /usr/local/soft/mysql-8.4.0-linux-glibc2.17-x86_64/bin/mysqld: ready for connections. Version: &#x27;8.4.0&#x27; socket: &#x27;/tmp/mysql.sock&#x27; port: 3306 MySQL Community Server - GPL.2024-05-09T07:22:07.340333Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: &#x27;::&#x27; port: 33060, socket: /tmp/mysqlx.sock 从日志看到’binlog_format’也要不支持了，不过先不用管，等到不支持了再处理吧。 如果升级到8.4之前忘记修改密码插件了，则升级之后就不能正常登录了，此时怎么办呢？ 升级到8.4之前忘记修改密码插件了，则升级之后登录数据库会报告如下错误 1ERROR 1524 (HY000): Plugin &#x27;mysql_native_password&#x27; is not loaded 解决方案 在mysql的配置文件中增加mysql-native-password=ON，然后重启数据库即可，但还是建议尽快修改用户的认证插件为caching_sha2_password吧，毕竟这个认证方式存在安全漏洞。 小贴士 笔者之前没有注意到8.4.0新增的mysql-native-password=ON这个配置，所以采用了如下重置密码的方式进行插件修改，留个纪念吧。 12345678910111213141516171819202122232425262728293031323334353637383940414243# kill掉mysql服务killall mysqld# 无权限模式启动./mysql8.4.0/bin/mysqld_safe --defaults-file=./mysql8.4.0/my.cnf --skip-grant-tables &amp;# 登录，此时不需要密码./mysql8.4.0/bin/mysql -urootmysql&gt; USE mysql;# 修改密码插件为 caching_sha2_passwordmysql&gt; UPDATE user SET plugin=&#x27;caching_sha2_password&#x27; WHERE User=&#x27;root&#x27;;# 将密码设置为空mysql&gt; UPDATE user SET authentication_string=null WHERE User=&#x27;root&#x27;;# 刷新权限：mysql&gt; FLUSH PRIVILEGES;# 退出MySQLmysql&gt; exit;# 关闭数据库，此时不需要密码即可关闭./mysql8.4.0/bin/mysqladmin --defaults-file=./mysql8.4.0/my.cnf -uroot -p shutdown# 重启启动mysql服务./mysql8.4.0/bin/mysqld_safe --defaults-file=./mysql8.4.0/my.cnf &amp;# 登录，此时依旧不需要密码./mysql8.4.0/bin/mysql -uroot# 设置密码mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;# 刷新权限：mysql&gt; FLUSH PRIVILEGES;# 退出MySQLmysql&gt; exit;# 登录，此时使用密码就可以正常登录了./mysql8.4.0/bin/mysql -uroot -p123456# 之后再修改其他用户的密码即可，比如mysql&gt; ALTER USER &#x27;other&#x27;@&#x27;%&#x27; IDENTIFIED WITH caching_sha2_password BY &#x27;otherpass&#x27;;# 查看修改后的user信息mysql&gt; use mysql;mysql&gt; select user,host,plugin from user;","summary":"摘要 MySql知识点介绍:从Mysql5.7升级到Mysql8 本文基于mysql-8.0.30，https://dev.mysql.com/doc/refman/8.0/en/ 2024-04-30，mysql-8.4.0 LTS版本发布，本文在将mysql从5.7.44升级到8.0.30的基础上，升级到8.4.0 LTS版本。mysql-8.4.0 LTS官方文档","date_published":"2024-05-08T13:35:05.000Z","tags":["技术","mysql","mysql"]},{"id":"https://blog.hanqunfeng.com/2024/04/08/mongodb7-pool-springboot/","url":"https://blog.hanqunfeng.com/2024/04/08/mongodb7-pool-springboot/","title":"MongoDB7.0--SpringBoot配置mongodb连接池","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍如何使用SpringBoot配置MongoDB7.0的连接池</p>\n</li>\n<li class=\"lvl-2\">\n<p>SpringBoot版本3.2.4，MongoDB版本7.0.6</p>\n</li>\n<li class=\"lvl-2\">\n<p>关于springboot与mongodb的集成可以参考：<a href=\"/2024/03/05/mongodb7-springboot/\" title=\"MongoDB7.0--SpringBoot单集合操作\">MongoDB7.0--SpringBoot单集合操作</a>，本文只讨论连接池相关内容。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"spring-boot-的-MongoDB-连接池\">spring-boot 的 MongoDB 连接池</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>当我们在springboot的配置文件中配置mongodb的相关属性时，并没有发现和连接池相关的属性，查看<code>MongoProperties</code>中的属性也可以证实这一点，这就很奇怪，按理说springboot应该不会这么弱鸡。</p>\n</li>\n<li class=\"lvl-2\">\n<p>于是我打算看看springboot的源码，看看springboot为我们自动创建的<code>MongoClient</code>到底有没有连接池的配置。</p>\n</li>\n<li class=\"lvl-2\">\n<p>我们就从mongodb的自动配置类<code>MongoAutoConfiguration</code>开始，该类中定义了<code>PropertiesMongoConnectionDetails</code>和<code>MongoClient</code></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这个类主要用于ConnectionString对象的封装，后面会讲到</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(&#123;MongoConnectionDetails.class&#125;)</span></span><br><span class=\"line\">PropertiesMongoConnectionDetails <span class=\"title function_\">mongoConnectionDetails</span><span class=\"params\">(MongoProperties properties)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PropertiesMongoConnectionDetails</span>(properties);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(&#123;MongoClient.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MongoClient <span class=\"title function_\">mongo</span><span class=\"params\">(ObjectProvider&lt;MongoClientSettingsBuilderCustomizer&gt; builderCustomizers, MongoClientSettings settings)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (MongoClient)(<span class=\"keyword\">new</span> <span class=\"title class_\">MongoClientFactory</span>(builderCustomizers.orderedStream().toList())).createMongoClient(settings);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>可以看到，创建<code>MongoClient</code>的bean时，依赖两个参数，一个是<code>ObjectProvider&lt;MongoClientSettingsBuilderCustomizer&gt;</code>，一个是<code>MongoClientSettings</code>，前者会将spring上下文中所有类型为<code>MongoClientSettingsBuilderCustomizer</code>的bean封装到该对象中(springboot默认只提供了一个<code>StandardMongoClientSettingsBuilderCustomizer</code>)</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>MongoAutoConfiguration</code>缺省为我们提供了<code>MongoClientSettings</code>和<code>StandardMongoClientSettingsBuilderCustomizer</code>，这两个类都很重要，连接池参数就和它们有关</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">MongoClientSettings <span class=\"title function_\">mongoClientSettings</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MongoClientSettings.builder().build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 需要的参数connectionDetails刚好是上面的PropertiesMongoConnectionDetails</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">StandardMongoClientSettingsBuilderCustomizer <span class=\"title function_\">standardMongoSettingsCustomizer</span><span class=\"params\">(MongoProperties properties, MongoConnectionDetails connectionDetails, ObjectProvider&lt;SslBundles&gt; sslBundles)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandardMongoClientSettingsBuilderCustomizer</span>(connectionDetails.getConnectionString(), properties.getUuidRepresentation(), properties.getSsl(), (SslBundles)sslBundles.getIfAvailable());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>我们先看<code>MongoClientSettings</code>，其中就定义一个连接池的配置对象<code>ConnectionPoolSettings</code>，而<code>ConnectionPoolSettings</code>其内部就定义了连接池的配置属性，<code>MongoClientSettings</code>通过<code>ConnectionPoolSettings</code>的构造器创建出了<code>ConnectionPoolSettings</code>对象，其缺省值如下：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">maxSize</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> minSize;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">maxWaitTimeMS</span> <span class=\"operator\">=</span> <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">long</span> maxConnectionLifeTimeMS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">long</span> maxConnectionIdleTimeMS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">maxConnecting</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>我们看另一个和创建<code>MongoClient</code>相关的bean，这个<code>StandardMongoClientSettingsBuilderCustomizer</code>，创建这个bean时需要一个<code>MongoConnectionDetails</code>对象，并调用其<code>getConnectionString</code>方法，这个对象<code>MongoAutoConfiguration</code>也为我们提供了(上面可以看到)</p>\n</li>\n<li class=\"lvl-2\">\n<p>查看<code>PropertiesMongoConnectionDetails</code>的源码，发现<code>connectionDetails.getConnectionString()</code>的功能就是将<code>MongoProperties</code>的属性封装为<code>uri</code>并传递给<code>ConnectionString</code>的构造器创建对象</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ConnectionString <span class=\"title function_\">getConnectionString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.properties.getUri() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionString</span>(<span class=\"built_in\">this</span>.properties.getUri());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"string\">&quot;mongodb://&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.properties.getUsername() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            builder.append(<span class=\"built_in\">this</span>.encode(<span class=\"built_in\">this</span>.properties.getUsername()));</span><br><span class=\"line\">            builder.append(<span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.properties.getPassword() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                builder.append(<span class=\"built_in\">this</span>.encode(<span class=\"built_in\">this</span>.properties.getPassword()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            builder.append(<span class=\"string\">&quot;@&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.append(<span class=\"built_in\">this</span>.properties.getHost() != <span class=\"literal\">null</span> ? <span class=\"built_in\">this</span>.properties.getHost() : <span class=\"string\">&quot;localhost&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.properties.getPort() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            builder.append(<span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">            builder.append(<span class=\"built_in\">this</span>.properties.getPort());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.properties.getAdditionalHosts() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            builder.append(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">            builder.append(String.join(<span class=\"string\">&quot;,&quot;</span>, <span class=\"built_in\">this</span>.properties.getAdditionalHosts()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.append(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">        builder.append(<span class=\"built_in\">this</span>.properties.getMongoClientDatabase());</span><br><span class=\"line\">        List&lt;String&gt; options = <span class=\"built_in\">this</span>.getOptions();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!options.isEmpty()) &#123;</span><br><span class=\"line\">            builder.append(<span class=\"string\">&quot;?&quot;</span>);</span><br><span class=\"line\">            builder.append(String.join(<span class=\"string\">&quot;&amp;&quot;</span>, options));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将MongoProperties转换为uri格式后调用构造器创建ConnectionString</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionString</span>(builder.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这个<code>ConnectionString</code>对象的初始化过程就很有意思了，其会对这个<code>uri</code>进行解析，解析过程中会调用<code>parseOptions(connectionStringQueryParameters)</code>方法，其会将<code>uri</code>中的参数转换为<code>Map</code>，之后调用<code>translateOptions(combinedOptionsMaps)</code>方法遍历这个map，而在遍历的过程中就会完成对<code>ConnectionString</code>对象的连接池相关属性的初始化</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">translateOptions</span><span class=\"params\">(<span class=\"keyword\">final</span> Map&lt;String, List&lt;String&gt;&gt; optionsMap)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">tlsInsecureSet</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">tlsAllowInvalidHostnamesSet</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> String key : GENERAL_OPTIONS_KEYS) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> getLastValue(optionsMap, key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 连接池相关属性，注意这里的属性名称，后面我们配置连接池时会用到</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;maxpoolsize&quot;</span>:</span><br><span class=\"line\">                    maxConnectionPoolSize = parseInteger(value, <span class=\"string\">&quot;maxpoolsize&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;minpoolsize&quot;</span>:</span><br><span class=\"line\">                    minConnectionPoolSize = parseInteger(value, <span class=\"string\">&quot;minpoolsize&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;maxidletimems&quot;</span>:</span><br><span class=\"line\">                    maxConnectionIdleTime = parseInteger(value, <span class=\"string\">&quot;maxidletimems&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;maxlifetimems&quot;</span>:</span><br><span class=\"line\">                    maxConnectionLifeTime = parseInteger(value, <span class=\"string\">&quot;maxlifetimems&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;maxconnecting&quot;</span>:</span><br><span class=\"line\">                    maxConnecting = parseInteger(value, <span class=\"string\">&quot;maxConnecting&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;waitqueuetimeoutms&quot;</span>:</span><br><span class=\"line\">                    maxWaitTime = parseInteger(value, <span class=\"string\">&quot;waitqueuetimeoutms&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;connecttimeoutms&quot;</span>:</span><br><span class=\"line\">                    connectTimeout = parseInteger(value, <span class=\"string\">&quot;connecttimeoutms&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           ……………………………………………………………………………………</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>其实此时我们就已经知道应该如何配置连接池参数了，就是将连接池相关的参数追加到<code>uri</code>的参数部分，但是前面我们提到负责连接池的类是<code>ConnectionPoolSettings</code>，那么<code>ConnectionString</code>对象中的连接池属性是如何被传递给<code>ConnectionPoolSettings</code>的呢，我们接着往下看。</p>\n</li>\n<li class=\"lvl-2\">\n<p>参数准备好后就开始创建<code>MongoClient</code>了，其会调用<code>MongoClientFactory</code>的<code>createMongoClient</code>方法，其会对<code>MongoClientSettings</code>对象做进一步的封装，并最终基于封装后的<code>MongoClientSettings</code>对象创建出<code>MongoClient</code>对象</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> T <span class=\"title function_\">createMongoClient</span><span class=\"params\">(MongoClientSettings settings)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Builder</span> <span class=\"variable\">targetSettings</span> <span class=\"operator\">=</span> MongoClientSettings.builder(settings);</span><br><span class=\"line\">    customize(targetSettings);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.clientCreator.apply(targetSettings.build(), driverInformation());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">customize</span><span class=\"params\">(Builder builder)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (MongoClientSettingsBuilderCustomizer customizer : <span class=\"built_in\">this</span>.builderCustomizers) &#123;</span><br><span class=\"line\">        customizer.customize(builder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>而在进一步封装<code>MongoClientSettings</code>对象时，会调用系统中所有被spring管理的<code>MongoClientSettingsBuilderCustomizer</code>,实际上也就是<code>StandardMongoClientSettingsBuilderCustomizer</code>的<code>customize</code>方法，其又会调用<code>MongoClientSettings.builder()</code>的<code>applyConnectionSettings</code>方法，而在该方法中调用<code>connectionPoolSettingsBuilder.applyConnectionString(connectionString);</code>就完成了将<code>ConnectionString</code>对象中的连接池属性传递给<code>ConnectionPoolSettings</code>对象的过程，当然，如果属性没有获取到就会使用默认值，所以我们可以基于需要配置相关的属性。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Builder <span class=\"title function_\">applyConnectionString</span><span class=\"params\">(<span class=\"keyword\">final</span> ConnectionString connectionString)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">maxConnectionPoolSize</span> <span class=\"operator\">=</span> connectionString.getMaxConnectionPoolSize();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxConnectionPoolSize != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        maxSize(maxConnectionPoolSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">minConnectionPoolSize</span> <span class=\"operator\">=</span> connectionString.getMinConnectionPoolSize();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minConnectionPoolSize != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        minSize(minConnectionPoolSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">maxWaitTime</span> <span class=\"operator\">=</span> connectionString.getMaxWaitTime();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxWaitTime != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        maxWaitTime(maxWaitTime, MILLISECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">maxConnectionIdleTime</span> <span class=\"operator\">=</span> connectionString.getMaxConnectionIdleTime();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxConnectionIdleTime != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        maxConnectionIdleTime(maxConnectionIdleTime, MILLISECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">maxConnectionLifeTime</span> <span class=\"operator\">=</span> connectionString.getMaxConnectionLifeTime();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxConnectionLifeTime != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        maxConnectionLifeTime(maxConnectionLifeTime, MILLISECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">maxConnecting</span> <span class=\"operator\">=</span> connectionString.getMaxConnecting();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxConnecting != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        maxConnecting(maxConnecting);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>大体过程就是这样，很绕，简单点说就是springboot已经为我们提供了mongodb的连接池，我们也可以基于需要，在配置<code>mongodb-uri</code>时，增加相关的连接池参数，springboot就会按照我们配置的参数为我们创建连接池，并自动管理连接池。</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">mongodb:</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">mongodb://user:password@127.0.0.1:27040,127.0.0.1:27041,127.0.0.1:27042/mytest?authSource=admin&amp;readPreference=primaryPreferred&amp;maxpoolsize=100&amp;minpoolsize=10&amp;maxidletimems=0&amp;maxlifetimems=0&amp;maxconnecting=5&amp;waitqueuetimeoutms=60000</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>参数说明</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maxpoolsize: 100 # 池中允许的最大连接数。一旦池耗尽，任何需要连接的操作都将在阻塞队列中等待直到获取到连接， 默认: 100</span><br><span class=\"line\">minpoolsize: 10 # 池中允许的最小连接数。这些连接在空闲时将保留在池中，并且池将确保它至少包含这个最小数量 默认: 0</span><br><span class=\"line\">maxidletimems: 0 # 池连接的最大空闲时间。零值表示对空闲时间没有限制。超过其空闲时间的池连接将被关闭并在必要时由新连接替换。单位为毫秒</span><br><span class=\"line\">maxlifetimems: 0 # 池连接可以存活的最长时间。零值表示寿命没有限制。超过其生命周期的池连接将被关闭并在必要时由新连接替换。单位为毫秒</span><br><span class=\"line\">maxconnecting: 5 # 同一时刻允许的最大并行连接数。默认值是: 2。</span><br><span class=\"line\">waitqueuetimeoutms: 60000 # 阻塞队列中请求的最大等待时间，超过这个时间的请求将被拒绝。单位为毫秒，默认为: 120s</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何查看连接池是否生效了？\">如何查看连接池是否生效了？</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>很简单，我们只需要注入<code>MongoClient</code>并查看其<code>settings</code>属性，就可以看到连接池的配置信息了`</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">MongoClient mongoClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印连接池配置信息</span></span><br><span class=\"line\">System.out.println(((MongoClientImpl) mongoClient).getSettings().getConnectionPoolSettings());</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\">ConnectionPoolSettings&#123;maxSize=<span class=\"number\">100</span>, minSize=<span class=\"number\">10</span>, maxWaitTimeMS=<span class=\"number\">60000</span>, maxConnectionLifeTimeMS=<span class=\"number\">0</span>, maxConnectionIdleTimeMS=<span class=\"number\">0</span>, maintenanceInitialDelayMS=<span class=\"number\">0</span>, maintenanceFrequencyMS=<span class=\"number\">60000</span>, connectionPoolListeners=[], maxConnecting=<span class=\"number\">5</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后记\">后记</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>springboot为什么没有将mongodb的连接池属性也封装到<code>MongoProperties</code>中呢，也许是因为和mongodb相关的链接参数太多了吧，而且我们在配置mongodb时，一般都会使用<code>mongodb-uri</code>的方式，所以springboot就直接将连接池参数放到<code>mongodb-uri</code>中，这样配置起来就比较方便了。</p>\n</li>\n<li class=\"lvl-2\">\n<p>另外我们发现，在<code>MongoClientSettings</code>中除了连接池的配置，还有很多配置项也是基于<code>mongodb-uri</code>的，我们可以基于需要进行配置，如下所示：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReadPreference readPreference;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WriteConcern writeConcern;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> retryWrites;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> retryReads;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReadConcern readConcern;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MongoCredential credential;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TransportSettings transportSettings;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> LoggerSettings loggerSettings;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ClusterSettings clusterSettings;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SocketSettings socketSettings;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SocketSettings heartbeatSocketSettings;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConnectionPoolSettings connectionPoolSettings;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ServerSettings serverSettings;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SslSettings sslSettings;</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍如何使用SpringBoot配置MongoDB7.0的连接池 SpringBoot版本3.2.4，MongoDB版本7.0.6 关于springboot与mongodb的集成可以参考：MongoDB7.0--SpringBoot单集合操作，本文只讨论连接池相关内容。 spring-boot 的 MongoDB 连接池 当我们在springboot的配置文件中配置mongodb的相关属性时，并没有发现和连接池相关的属性，查看MongoProperties中的属性也可以证实这一点，这就很奇怪，按理说springboot应该不会这么弱鸡。 于是我打算看看springboot的源码，看看springboot为我们自动创建的MongoClient到底有没有连接池的配置。 我们就从mongodb的自动配置类MongoAutoConfiguration开始，该类中定义了PropertiesMongoConnectionDetails和MongoClient 123456789101112//这个类主要用于ConnectionString对象的封装，后面会讲到@Bean@ConditionalOnMissingBean(&#123;MongoConnectionDetails.class&#125;)PropertiesMongoConnectionDetails mongoConnectionDetails(MongoProperties properties) &#123; return new PropertiesMongoConnectionDetails(properties);&#125;@Bean@ConditionalOnMissingBean(&#123;MongoClient.class&#125;)public MongoClient mongo(ObjectProvider&lt;MongoClientSettingsBuilderCustomizer&gt; builderCustomizers, MongoClientSettings settings) &#123; return (MongoClient)(new MongoClientFactory(builderCustomizers.orderedStream().toList())).createMongoClient(settings);&#125; 可以看到，创建MongoClient的bean时，依赖两个参数，一个是ObjectProvider&lt;MongoClientSettingsBuilderCustomizer&gt;，一个是MongoClientSettings，前者会将spring上下文中所有类型为MongoClientSettingsBuilderCustomizer的bean封装到该对象中(springboot默认只提供了一个StandardMongoClientSettingsBuilderCustomizer) MongoAutoConfiguration缺省为我们提供了MongoClientSettings和StandardMongoClientSettingsBuilderCustomizer，这两个类都很重要，连接池参数就和它们有关 123456789@BeanMongoClientSettings mongoClientSettings() &#123; return MongoClientSettings.builder().build();&#125;// 需要的参数connectionDetails刚好是上面的PropertiesMongoConnectionDetails@BeanStandardMongoClientSettingsBuilderCustomizer standardMongoSettingsCustomizer(MongoProperties properties, MongoConnectionDetails connectionDetails, ObjectProvider&lt;SslBundles&gt; sslBundles) &#123; return new StandardMongoClientSettingsBuilderCustomizer(connectionDetails.getConnectionString(), properties.getUuidRepresentation(), properties.getSsl(), (SslBundles)sslBundles.getIfAvailable());&#125; 我们先看MongoClientSettings，其中就定义一个连接池的配置对象ConnectionPoolSettings，而ConnectionPoolSettings其内部就定义了连接池的配置属性，MongoClientSettings通过ConnectionPoolSettings的构造器创建出了ConnectionPoolSettings对象，其缺省值如下： 123456private int maxSize = 100;private int minSize;private long maxWaitTimeMS = 1000 * 60 * 2;private long maxConnectionLifeTimeMS;private long maxConnectionIdleTimeMS;private int maxConnecting = 2; 我们看另一个和创建MongoClient相关的bean，这个StandardMongoClientSettingsBuilderCustomizer，创建这个bean时需要一个MongoConnectionDetails对象，并调用其getConnectionString方法，这个对象MongoAutoConfiguration也为我们提供了(上面可以看到) 查看PropertiesMongoConnectionDetails的源码，发现connectionDetails.getConnectionString()的功能就是将MongoProperties的属性封装为uri并传递给ConnectionString的构造器创建对象 12345678910111213141516171819202122232425262728293031323334353637public ConnectionString getConnectionString() &#123; if (this.properties.getUri() != null) &#123; return new ConnectionString(this.properties.getUri()); &#125; else &#123; StringBuilder builder = new StringBuilder(&quot;mongodb://&quot;); if (this.properties.getUsername() != null) &#123; builder.append(this.encode(this.properties.getUsername())); builder.append(&quot;:&quot;); if (this.properties.getPassword() != null) &#123; builder.append(this.encode(this.properties.getPassword())); &#125; builder.append(&quot;@&quot;); &#125; builder.append(this.properties.getHost() != null ? this.properties.getHost() : &quot;localhost&quot;); if (this.properties.getPort() != null) &#123; builder.append(&quot;:&quot;); builder.append(this.properties.getPort()); &#125; if (this.properties.getAdditionalHosts() != null) &#123; builder.append(&quot;,&quot;); builder.append(String.join(&quot;,&quot;, this.properties.getAdditionalHosts())); &#125; builder.append(&quot;/&quot;); builder.append(this.properties.getMongoClientDatabase()); List&lt;String&gt; options = this.getOptions(); if (!options.isEmpty()) &#123; builder.append(&quot;?&quot;); builder.append(String.join(&quot;&amp;&quot;, options)); &#125; // 将MongoProperties转换为uri格式后调用构造器创建ConnectionString return new ConnectionString(builder.toString()); &#125;&#125; 这个ConnectionString对象的初始化过程就很有意思了，其会对这个uri进行解析，解析过程中会调用parseOptions(connectionStringQueryParameters)方法，其会将uri中的参数转换为Map，之后调用translateOptions(combinedOptionsMaps)方法遍历这个map，而在遍历的过程中就会完成对ConnectionString对象的连接池相关属性的初始化 123456789101112131415161718192021222324252627282930313233private void translateOptions(final Map&lt;String, List&lt;String&gt;&gt; optionsMap) &#123; boolean tlsInsecureSet = false; boolean tlsAllowInvalidHostnamesSet = false; for (final String key : GENERAL_OPTIONS_KEYS) &#123; String value = getLastValue(optionsMap, key); if (value == null) &#123; continue; &#125; switch (key) &#123; // 连接池相关属性，注意这里的属性名称，后面我们配置连接池时会用到 case &quot;maxpoolsize&quot;: maxConnectionPoolSize = parseInteger(value, &quot;maxpoolsize&quot;); break; case &quot;minpoolsize&quot;: minConnectionPoolSize = parseInteger(value, &quot;minpoolsize&quot;); break; case &quot;maxidletimems&quot;: maxConnectionIdleTime = parseInteger(value, &quot;maxidletimems&quot;); break; case &quot;maxlifetimems&quot;: maxConnectionLifeTime = parseInteger(value, &quot;maxlifetimems&quot;); break; case &quot;maxconnecting&quot;: maxConnecting = parseInteger(value, &quot;maxConnecting&quot;); break; case &quot;waitqueuetimeoutms&quot;: maxWaitTime = parseInteger(value, &quot;waitqueuetimeoutms&quot;); break; case &quot;connecttimeoutms&quot;: connectTimeout = parseInteger(value, &quot;connecttimeoutms&quot;); break; …………………………………………………………………………………… 其实此时我们就已经知道应该如何配置连接池参数了，就是将连接池相关的参数追加到uri的参数部分，但是前面我们提到负责连接池的类是ConnectionPoolSettings，那么ConnectionString对象中的连接池属性是如何被传递给ConnectionPoolSettings的呢，我们接着往下看。 参数准备好后就开始创建MongoClient了，其会调用MongoClientFactory的createMongoClient方法，其会对MongoClientSettings对象做进一步的封装，并最终基于封装后的MongoClientSettings对象创建出MongoClient对象 12345678910public T createMongoClient(MongoClientSettings settings) &#123; Builder targetSettings = MongoClientSettings.builder(settings); customize(targetSettings); return this.clientCreator.apply(targetSettings.build(), driverInformation());&#125;private void customize(Builder builder) &#123; for (MongoClientSettingsBuilderCustomizer customizer : this.builderCustomizers) &#123; customizer.customize(builder); &#125;&#125; 而在进一步封装MongoClientSettings对象时，会调用系统中所有被spring管理的MongoClientSettingsBuilderCustomizer,实际上也就是StandardMongoClientSettingsBuilderCustomizer的customize方法，其又会调用MongoClientSettings.builder()的applyConnectionSettings方法，而在该方法中调用connectionPoolSettingsBuilder.applyConnectionString(connectionString);就完成了将ConnectionString对象中的连接池属性传递给ConnectionPoolSettings对象的过程，当然，如果属性没有获取到就会使用默认值，所以我们可以基于需要配置相关的属性。 123456789101112131415161718192021222324252627282930313233public Builder applyConnectionString(final ConnectionString connectionString) &#123; Integer maxConnectionPoolSize = connectionString.getMaxConnectionPoolSize(); if (maxConnectionPoolSize != null) &#123; maxSize(maxConnectionPoolSize); &#125; Integer minConnectionPoolSize = connectionString.getMinConnectionPoolSize(); if (minConnectionPoolSize != null) &#123; minSize(minConnectionPoolSize); &#125; Integer maxWaitTime = connectionString.getMaxWaitTime(); if (maxWaitTime != null) &#123; maxWaitTime(maxWaitTime, MILLISECONDS); &#125; Integer maxConnectionIdleTime = connectionString.getMaxConnectionIdleTime(); if (maxConnectionIdleTime != null) &#123; maxConnectionIdleTime(maxConnectionIdleTime, MILLISECONDS); &#125; Integer maxConnectionLifeTime = connectionString.getMaxConnectionLifeTime(); if (maxConnectionLifeTime != null) &#123; maxConnectionLifeTime(maxConnectionLifeTime, MILLISECONDS); &#125; Integer maxConnecting = connectionString.getMaxConnecting(); if (maxConnecting != null) &#123; maxConnecting(maxConnecting); &#125; return this;&#125; 大体过程就是这样，很绕，简单点说就是springboot已经为我们提供了mongodb的连接池，我们也可以基于需要，在配置mongodb-uri时，增加相关的连接池参数，springboot就会按照我们配置的参数为我们创建连接池，并自动管理连接池。 12345spring: data: mongodb: uri: mongodb://user:password@127.0.0.1:27040,127.0.0.1:27041,127.0.0.1:27042/mytest?authSource=admin&amp;readPreference=primaryPreferred&amp;maxpoolsize=100&amp;minpoolsize=10&amp;maxidletimems=0&amp;maxlifetimems=0&amp;maxconnecting=5&amp;waitqueuetimeoutms=60000 参数说明 123456maxpoolsize: 100 # 池中允许的最大连接数。一旦池耗尽，任何需要连接的操作都将在阻塞队列中等待直到获取到连接， 默认: 100minpoolsize: 10 # 池中允许的最小连接数。这些连接在空闲时将保留在池中，并且池将确保它至少包含这个最小数量 默认: 0maxidletimems: 0 # 池连接的最大空闲时间。零值表示对空闲时间没有限制。超过其空闲时间的池连接将被关闭并在必要时由新连接替换。单位为毫秒maxlifetimems: 0 # 池连接可以存活的最长时间。零值表示寿命没有限制。超过其生命周期的池连接将被关闭并在必要时由新连接替换。单位为毫秒maxconnecting: 5 # 同一时刻允许的最大并行连接数。默认值是: 2。waitqueuetimeoutms: 60000 # 阻塞队列中请求的最大等待时间，超过这个时间的请求将被拒绝。单位为毫秒，默认为: 120s 如何查看连接池是否生效了？ 很简单，我们只需要注入MongoClient并查看其settings属性，就可以看到连接池的配置信息了` 1234567@AutowiredMongoClient mongoClient;// 打印连接池配置信息System.out.println(((MongoClientImpl) mongoClient).getSettings().getConnectionPoolSettings());// 输出结果ConnectionPoolSettings&#123;maxSize=100, minSize=10, maxWaitTimeMS=60000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=5&#125; 后记 springboot为什么没有将mongodb的连接池属性也封装到MongoProperties中呢，也许是因为和mongodb相关的链接参数太多了吧，而且我们在配置mongodb时，一般都会使用mongodb-uri的方式，所以springboot就直接将连接池参数放到mongodb-uri中，这样配置起来就比较方便了。 另外我们发现，在MongoClientSettings中除了连接池的配置，还有很多配置项也是基于mongodb-uri的，我们可以基于需要进行配置，如下所示： 1234567891011121314private final ReadPreference readPreference;private final WriteConcern writeConcern;private final boolean retryWrites;private final boolean retryReads;private final ReadConcern readConcern;private final MongoCredential credential;private final TransportSettings transportSettings;private final LoggerSettings loggerSettings;private final ClusterSettings clusterSettings;private final SocketSettings socketSettings;private final SocketSettings heartbeatSocketSettings;private final ConnectionPoolSettings connectionPoolSettings;private final ServerSettings serverSettings;private final SslSettings sslSettings;","summary":"摘要 本文介绍如何使用SpringBoot配置MongoDB7.0的连接池 SpringBoot版本3.2.4，MongoDB版本7.0.6 关于springboot与mongodb的集成可以参考：MongoDB7.0--SpringBoot单集合操作，本文只讨论连接池相关内容。","date_published":"2024-04-08T13:30:05.000Z","tags":["技术","linux","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/04/07/mongodb7-others/","url":"https://blog.hanqunfeng.com/2024/04/07/mongodb7-others/","title":"MongoDB7.0一些有用的功能","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍MongoDB7.0的一些有用的功能，比如运行js，查看慢查询日志等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB<a href=\"https://www.mongodb.com/docs/v7.0/\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>CentOS8(x86_64)</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"运行js\">运行js</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>运行js文件</p>\n</li>\n</ul>\n<blockquote>\n<p>insertMany.js</p>\n</blockquote>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tags = [<span class=\"string\">&#x27;nosql&#x27;</span>, <span class=\"string\">&#x27;mongodb&#x27;</span>, <span class=\"string\">&#x27;document&#x27;</span>, <span class=\"string\">&#x27;developer&#x27;</span>, <span class=\"string\">&#x27;popular&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> types = [<span class=\"string\">&#x27;technology&#x27;</span>, <span class=\"string\">&#x27;sociality&#x27;</span>, <span class=\"string\">&#x27;travel&#x27;</span>, <span class=\"string\">&#x27;novel&#x27;</span>, <span class=\"string\">&#x27;literature&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> books = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> typeIdx = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * types.<span class=\"property\">length</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tagIdx = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * tags.<span class=\"property\">length</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> favCount = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">100</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> book = &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;book-&#x27;</span> + i,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: types[typeIdx],</span><br><span class=\"line\">    <span class=\"attr\">tag</span>: tags[tagIdx],</span><br><span class=\"line\">    <span class=\"attr\">favCount</span>: favCount,</span><br><span class=\"line\">    <span class=\"attr\">author</span>: <span class=\"string\">&#x27;xxx&#x27;</span> + i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  books.<span class=\"title function_\">push</span>(book)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.<span class=\"property\">books</span>.<span class=\"title function_\">insertMany</span>(books)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -f 运行js文件</span></span><br><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&quot;</span> -f insertMany.js</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>运行js语句</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---eval 运行js语句</span></span><br><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&quot;</span> --<span class=\"built_in\">eval</span> <span class=\"string\">&quot;db.books.find().limit(2)&quot;</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: ObjectId(<span class=\"string\">&#x27;660d0b05a8a6c09b0b1852b7&#x27;</span>),</span><br><span class=\"line\">    title: <span class=\"string\">&#x27;book-0&#x27;</span>,</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;novel&#x27;</span>,</span><br><span class=\"line\">    tag: <span class=\"string\">&#x27;document&#x27;</span>,</span><br><span class=\"line\">    favCount: 58,</span><br><span class=\"line\">    author: <span class=\"string\">&#x27;xxx0&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: ObjectId(<span class=\"string\">&#x27;660d0b05a8a6c09b0b1852b8&#x27;</span>),</span><br><span class=\"line\">    title: <span class=\"string\">&#x27;book-1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;novel&#x27;</span>,</span><br><span class=\"line\">    tag: <span class=\"string\">&#x27;popular&#x27;</span>,</span><br><span class=\"line\">    favCount: 10,</span><br><span class=\"line\">    author: <span class=\"string\">&#x27;xxx1&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Profiler模块\">Profiler模块</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Profiler模块可以用来记录、分析MongoDB的详细操作日志，默认情况下该功能是关闭的。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Profiler模块开启对于每个业务库来说是独立的，对某个业务库开启Profiler模块之后，符合条件的慢操作日志会被写入该库的<code>system.profile</code>集合中。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Profiler模块的调试级别有：</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0：关闭Profiler模块；</span><br><span class=\"line\">1：部分开启，仅符合条件（时长大于slowms）的操作日志会被记录；</span><br><span class=\"line\">2：日志全开，所有的操作日志都被记录；</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>设置Profiler模块的调试级别：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置Profiler模块的调试级别为2</span></span><br><span class=\"line\">&gt; db.setProfilingLevel(2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当的调试级别信息</span></span><br><span class=\"line\">&gt; db.<span class=\"function\"><span class=\"title\">getProfilingStatus</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  was: 2,  <span class=\"comment\"># 当前的调试级别</span></span><br><span class=\"line\">  slowms: 100, <span class=\"comment\"># 慢查询的阈值，单位是毫秒；</span></span><br><span class=\"line\">  sampleRate: 1.0, <span class=\"comment\"># 日志随机采样率，1.0则表示满足条件的全部输出。</span></span><br><span class=\"line\">  ok: 1,   <span class=\"comment\"># 状态</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;$clusterTime&#x27;</span>: &#123; <span class=\"comment\"># 时间戳</span></span><br><span class=\"line\">    clusterTime: Timestamp(&#123; t: 1712471779, i: 1 &#125;), <span class=\"comment\"># 时间戳</span></span><br><span class=\"line\">    signature: &#123; <span class=\"comment\"># 签名</span></span><br><span class=\"line\">      <span class=\"built_in\">hash</span>: Binary.createFromBase64(<span class=\"string\">&#x27;GGCAjzJrW8arhfJX0Cn0VpvC5MA=&#x27;</span>, 0), <span class=\"comment\"># 签名</span></span><br><span class=\"line\">      keyId: Long(<span class=\"string\">&#x27;7346062378896719877&#x27;</span>)  <span class=\"comment\"># 签名</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  operationTime: Timestamp(&#123; t: 1712471779, i: 1 &#125;) <span class=\"comment\"># 操作时间</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只记录时长超过500ms的操作</span></span><br><span class=\"line\">&gt; db.setProfilingLevel(1,500)</span><br><span class=\"line\"><span class=\"comment\"># 同时加上采样率</span></span><br><span class=\"line\">&gt; db.setProfilingLevel(1,&#123;slowms:500,sampleRate:0.5&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭Profiler模块</span></span><br><span class=\"line\">&gt; db.setProfilingLevel(2)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看日志</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看操作日志</span></span><br><span class=\"line\">&gt; db.system.profile.find().<span class=\"built_in\">limit</span>(5).<span class=\"built_in\">sort</span>(&#123;ts:-1&#125;).pretty()</span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    op: <span class=\"string\">&#x27;query&#x27;</span>, <span class=\"comment\"># 操作类型,比如查询,更新,删除等</span></span><br><span class=\"line\">    ns: <span class=\"string\">&#x27;admin.system.profile&#x27;</span>, <span class=\"comment\"># 操作的集合</span></span><br><span class=\"line\">    <span class=\"built_in\">command</span>: &#123; <span class=\"comment\"># 操作的命令</span></span><br><span class=\"line\">      find: <span class=\"string\">&#x27;system.profile&#x27;</span>, <span class=\"comment\"># 操作的集合</span></span><br><span class=\"line\">      filter: &#123;&#125;, <span class=\"comment\"># 查询条件</span></span><br><span class=\"line\">      lsid: &#123; <span class=\"built_in\">id</span>: UUID(<span class=\"string\">&#x27;2285d6a5-b2df-4b46-b9d2-5e556b0a7c7d&#x27;</span>) &#125;, <span class=\"comment\"># 会话id</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;$clusterTime&#x27;</span>: &#123; <span class=\"comment\"># 时间戳</span></span><br><span class=\"line\">        clusterTime: Timestamp(&#123; t: 1712471018, i: 1 &#125;),</span><br><span class=\"line\">        signature: &#123;</span><br><span class=\"line\">          <span class=\"built_in\">hash</span>: Binary.createFromBase64(<span class=\"string\">&#x27;8YEsN+XUWO6EkoHEegKkG49eWPA=&#x27;</span>, 0),</span><br><span class=\"line\">          keyId: Long(<span class=\"string\">&#x27;7346062378896719877&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&#x27;$db&#x27;</span>: <span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"comment\"># 数据库</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;$readPreference&#x27;</span>: &#123; mode: <span class=\"string\">&#x27;primaryPreferred&#x27;</span> &#125; <span class=\"comment\"># 读偏好</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    keysExamined: 0, <span class=\"comment\"># 扫描索引条目数，如果比nreturned大出很多，则说明查询效率不高。</span></span><br><span class=\"line\">    docsExamined: 3, <span class=\"comment\"># 扫描文档条目数，如果比nreturned大出很多，则说明查询效率不高。</span></span><br><span class=\"line\">    nBatches: 1, <span class=\"comment\"># 批处理数量</span></span><br><span class=\"line\">    cursorExhausted: <span class=\"literal\">true</span>, <span class=\"comment\"># 是否游标已耗尽</span></span><br><span class=\"line\">    numYield: 0, <span class=\"comment\"># 操作数，大于0表示等待锁或者是磁盘I/O操作</span></span><br><span class=\"line\">    nreturned: 3, <span class=\"comment\"># 返回的文档数量</span></span><br><span class=\"line\">    queryHash: <span class=\"string\">&#x27;8880B5AF&#x27;</span>, <span class=\"comment\"># 查询哈希值</span></span><br><span class=\"line\">    planCacheKey: <span class=\"string\">&#x27;8880B5AF&#x27;</span>,</span><br><span class=\"line\">    queryFramework: <span class=\"string\">&#x27;classic&#x27;</span>,</span><br><span class=\"line\">    locks: &#123;       <span class=\"comment\"># 锁占用的情况。</span></span><br><span class=\"line\">      FeatureCompatibilityVersion: &#123; acquireCount: &#123; r: Long(<span class=\"string\">&#x27;1&#x27;</span>) &#125; &#125;,</span><br><span class=\"line\">      Global: &#123; acquireCount: &#123; r: Long(<span class=\"string\">&#x27;1&#x27;</span>) &#125; &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    flowControl: &#123;&#125;,</span><br><span class=\"line\">    readConcern: &#123; level: <span class=\"string\">&#x27;local&#x27;</span>, provenance: <span class=\"string\">&#x27;implicitDefault&#x27;</span> &#125;, <span class=\"comment\"># 读关注</span></span><br><span class=\"line\">    responseLength: 3414, <span class=\"comment\"># 响应数据大小（字节数），一次性查询太多的数据会影响性能，可以使用limit、batchSize进行一些限制。</span></span><br><span class=\"line\">    protocol: <span class=\"string\">&#x27;op_msg&#x27;</span>, <span class=\"comment\"># 协议类型，op_msg是mongodb 4.0+的协议，op_query是mongodb 3.2及以前版本的协议。</span></span><br><span class=\"line\">    millis: 0, <span class=\"comment\"># 命令执行的时长，单位是毫秒。</span></span><br><span class=\"line\">    planSummary: <span class=\"string\">&#x27;COLLSCAN&#x27;</span>, <span class=\"comment\"># 查询计划的概要，如IXSCAN表示使用了索引扫描。</span></span><br><span class=\"line\">    planningTimeMicros: 79,</span><br><span class=\"line\">    execStats: &#123;  <span class=\"comment\"># 执行过程统计信息。</span></span><br><span class=\"line\">      stage: <span class=\"string\">&#x27;COLLSCAN&#x27;</span>,</span><br><span class=\"line\">      nReturned: 3,</span><br><span class=\"line\">      executionTimeMillisEstimate: 0,</span><br><span class=\"line\">      works: 4,</span><br><span class=\"line\">      advanced: 3,</span><br><span class=\"line\">      needTime: 0,</span><br><span class=\"line\">      needYield: 0,</span><br><span class=\"line\">      saveState: 0,</span><br><span class=\"line\">      restoreState: 0,</span><br><span class=\"line\">      isEOF: 1,</span><br><span class=\"line\">      direction: <span class=\"string\">&#x27;forward&#x27;</span>,</span><br><span class=\"line\">      docsExamined: 3</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ts: ISODate(<span class=\"string\">&#x27;2024-04-07T06:23:56.054Z&#x27;</span>), <span class=\"comment\"># 命令执行的时间点。</span></span><br><span class=\"line\">    client: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"comment\"># 客户端地址。</span></span><br><span class=\"line\">    appName: <span class=\"string\">&#x27;mongosh 2.1.5&#x27;</span>, <span class=\"comment\"># 客户端名称。</span></span><br><span class=\"line\">    allUsers: [ &#123; user: <span class=\"string\">&#x27;user&#x27;</span>, db: <span class=\"string\">&#x27;admin&#x27;</span> &#125; ], <span class=\"comment\"># 所有用户信息。</span></span><br><span class=\"line\">    user: <span class=\"string\">&#x27;user@admin&#x27;</span> <span class=\"comment\"># 当前用户信息。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">………………………………</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看执行时长最大的10条操作记录</span></span><br><span class=\"line\">&gt; db.system.profile.find().<span class=\"built_in\">limit</span>(10).<span class=\"built_in\">sort</span>(&#123;millis:-1&#125;).pretty()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个集合中的update操作日志</span></span><br><span class=\"line\">&gt; db.system.profile.find(&#123;op:<span class=\"string\">&quot;update&quot;</span>,ns:<span class=\"string\">&quot;shop.user&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>system.profile</code>是一个1MB的固定大小的集合，随着记录日志的增多，一些旧的记录会被滚动删除。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Profiler模块的设置是内存级的，重启服务器后会自动恢复默认状态。</p>\n</li>\n</ul>\n<h2 id=\"db-currentOp\">db.currentOp()</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Profiler模块所记录的日志都是已经发生的事情，<code>db.currentOp()</code>命令则与此相反，它可以用来查看数据库当前正在执行的一些操作。</p>\n</li>\n<li class=\"lvl-2\">\n<p>db.currentOp()读取的是当前数据库的命令快照，该命令可以返回许多有用的信息，比如：</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作的运行时长，快速发现耗时漫长的低效扫描操作。</span><br><span class=\"line\">执行计划信息，用于判断是否命中了索引，或者存在锁冲突的情况。</span><br><span class=\"line\">操作ID、时间、客户端等信息，方便定位出产生慢操作的源头</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.<span class=\"function\"><span class=\"title\">currentOp</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">inprog: [ <span class=\"comment\"># 当前正在执行的操作</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;op&#x27;</span>, <span class=\"comment\"># 操作类型，可以是op、idleSession、idleCursor的一种，一般的操作信息以op表示。其为MongoDB 4.2版本新增功能</span></span><br><span class=\"line\">      host: <span class=\"string\">&#x27;localhost:27041&#x27;</span>, <span class=\"comment\"># 操作所在的主机</span></span><br><span class=\"line\">      desc: <span class=\"string\">&#x27;conn474&#x27;</span>, <span class=\"comment\"># 操作的描述信息</span></span><br><span class=\"line\">      connectionId: 474, <span class=\"comment\"># 操作的连接ID</span></span><br><span class=\"line\">      client: <span class=\"string\">&#x27;127.0.0.1:58103&#x27;</span>, <span class=\"comment\"># 操作的客户端信息</span></span><br><span class=\"line\">      appName: <span class=\"string\">&#x27;mongosh 2.1.5&#x27;</span>, <span class=\"comment\"># 操作的客户端应用信息</span></span><br><span class=\"line\">      clientMetadata: &#123; <span class=\"comment\"># 关于客户端的附加信息，可以包含驱动的版本。</span></span><br><span class=\"line\">        application: &#123; name: <span class=\"string\">&#x27;mongosh 2.1.5&#x27;</span> &#125;,</span><br><span class=\"line\">        driver: &#123; name: <span class=\"string\">&#x27;nodejs|mongosh&#x27;</span>, version: <span class=\"string\">&#x27;6.3.0|2.1.5&#x27;</span> &#125;,</span><br><span class=\"line\">        platform: <span class=\"string\">&#x27;Node.js v20.11.1, LE&#x27;</span>,</span><br><span class=\"line\">        os: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;darwin&#x27;</span>,</span><br><span class=\"line\">          architecture: <span class=\"string\">&#x27;x64&#x27;</span>,</span><br><span class=\"line\">          version: <span class=\"string\">&#x27;22.6.0&#x27;</span>,</span><br><span class=\"line\">          <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;Darwin&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      active: <span class=\"literal\">true</span>, <span class=\"comment\"># 操作是否活跃。如果是空闲状态则为false</span></span><br><span class=\"line\">      currentOpTime: <span class=\"string\">&#x27;2024-04-07T14:54:02.994+08:00&#x27;</span>, <span class=\"comment\"># 操作的开始时间。MongoDB 3.6版本新增功能</span></span><br><span class=\"line\">      threaded: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      opid: 236247, <span class=\"comment\"># opid：当前操作在数据库进程中的唯一编号,如果已经发现该操作正在导致数据库系统响应缓慢，则可以考虑将其“杀”死 : db.killOp(236247)</span></span><br><span class=\"line\">      secs_running: Long(<span class=\"string\">&#x27;3&#x27;</span>), <span class=\"comment\"># 操作持续时间,单位：秒</span></span><br><span class=\"line\">      microsecs_running: Long(<span class=\"string\">&#x27;3362378&#x27;</span>), <span class=\"comment\"># 操作持续时间，单位：微秒</span></span><br><span class=\"line\">      op: <span class=\"string\">&#x27;command&#x27;</span>, <span class=\"comment\"># 标识操作类型的字符串，如 command, insert, query, update, delete, getMore, killCursors</span></span><br><span class=\"line\">      ns: <span class=\"string\">&#x27;admin.$cmd&#x27;</span>, <span class=\"comment\"># 操作的命名空间，格式为 db.collection</span></span><br><span class=\"line\">      redacted: <span class=\"literal\">false</span>, <span class=\"comment\"># 是否已脱敏</span></span><br><span class=\"line\">      <span class=\"built_in\">command</span>: &#123; <span class=\"comment\"># 操作命令参数</span></span><br><span class=\"line\">        hello: 1,</span><br><span class=\"line\">        maxAwaitTimeMS: 10000,</span><br><span class=\"line\">        topologyVersion: &#123;</span><br><span class=\"line\">          processId: ObjectId(<span class=\"string\">&#x27;6611f8cd59f7cfaa5c8cd7e4&#x27;</span>),</span><br><span class=\"line\">          counter: Long(<span class=\"string\">&#x27;18&#x27;</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class=\"line\">          clusterTime: Timestamp(&#123; t: 1712470998, i: 1 &#125;),</span><br><span class=\"line\">          signature: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">hash</span>: Binary.createFromBase64(<span class=\"string\">&#x27;gvgo03Wqi1AuOVqnrlhzKIK2NAU=&#x27;</span>, 0),</span><br><span class=\"line\">            keyId: Long(<span class=\"string\">&#x27;7346062378896719877&#x27;</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&#x27;$db&#x27;</span>: <span class=\"string\">&#x27;admin&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      numYields: 0,</span><br><span class=\"line\">      locks: &#123;&#125;, <span class=\"comment\"># 当前操作持有锁的类型和模式。</span></span><br><span class=\"line\">      waitingForLock: <span class=\"literal\">false</span>, <span class=\"comment\"># 是否在等待锁</span></span><br><span class=\"line\">      lockStats: &#123;&#125;, <span class=\"comment\"># 当前操作持有锁的统计。</span></span><br><span class=\"line\">      waitingForFlowControl: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      flowControlStats: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">………………………………</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看等待锁的增加、删除、修改、查询操作</span></span><br><span class=\"line\">&gt; db.currentOp(&#123;</span><br><span class=\"line\"> waitingForLock:<span class=\"literal\">true</span>,</span><br><span class=\"line\"> <span class=\"variable\">$or</span>:[</span><br><span class=\"line\">  &#123;op:&#123;<span class=\"variable\">$in</span>:[<span class=\"string\">&quot;insert&quot;</span>,<span class=\"string\">&quot;update&quot;</span>,<span class=\"string\">&quot;remove&quot;</span>]&#125;&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">&quot;query.findandmodify&quot;</span>:&#123;<span class=\"variable\">$exists</span>:<span class=\"literal\">true</span>&#125;&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看执行时间超过1s的操作</span></span><br><span class=\"line\">&gt; db.currentOp(&#123;</span><br><span class=\"line\">   secs_running:&#123;<span class=\"variable\">$gt</span>:1&#125;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看test数据库中的操作</span></span><br><span class=\"line\">&gt; db.currentOp(&#123;</span><br><span class=\"line\">   ns:/test/</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍MongoDB7.0的一些有用的功能，比如运行js，查看慢查询日志等等 MongoDB官方文档 本文基于CentOS8(x86_64) 运行js 运行js文件 insertMany.js 1234567891011121314151617var tags = [&#x27;nosql&#x27;, &#x27;mongodb&#x27;, &#x27;document&#x27;, &#x27;developer&#x27;, &#x27;popular&#x27;]var types = [&#x27;technology&#x27;, &#x27;sociality&#x27;, &#x27;travel&#x27;, &#x27;novel&#x27;, &#x27;literature&#x27;]var books = []for (var i = 0; i &lt; 50; i++) &#123; var typeIdx = Math.floor(Math.random() * types.length) var tagIdx = Math.floor(Math.random() * tags.length) var favCount = Math.floor(Math.random() * 100) var book = &#123; title: &#x27;book-&#x27; + i, type: types[typeIdx], tag: tags[tagIdx], favCount: favCount, author: &#x27;xxx&#x27; + i &#125; books.push(book)&#125;db.books.insertMany(books) 12# -f 运行js文件mongosh &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&quot; -f insertMany.js 运行js语句 1234567891011121314151617181920# ---eval 运行js语句mongosh &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&quot; --eval &quot;db.books.find().limit(2)&quot;[ &#123; _id: ObjectId(&#x27;660d0b05a8a6c09b0b1852b7&#x27;), title: &#x27;book-0&#x27;, type: &#x27;novel&#x27;, tag: &#x27;document&#x27;, favCount: 58, author: &#x27;xxx0&#x27; &#125;, &#123; _id: ObjectId(&#x27;660d0b05a8a6c09b0b1852b8&#x27;), title: &#x27;book-1&#x27;, type: &#x27;novel&#x27;, tag: &#x27;popular&#x27;, favCount: 10, author: &#x27;xxx1&#x27; &#125;] Profiler模块 Profiler模块可以用来记录、分析MongoDB的详细操作日志，默认情况下该功能是关闭的。 Profiler模块开启对于每个业务库来说是独立的，对某个业务库开启Profiler模块之后，符合条件的慢操作日志会被写入该库的system.profile集合中。 Profiler模块的调试级别有： 1230：关闭Profiler模块；1：部分开启，仅符合条件（时长大于slowms）的操作日志会被记录；2：日志全开，所有的操作日志都被记录； 设置Profiler模块的调试级别： 123456789101112131415161718192021222324252627# 设置Profiler模块的调试级别为2&gt; db.setProfilingLevel(2)# 查看当的调试级别信息&gt; db.getProfilingStatus()&#123; was: 2, # 当前的调试级别 slowms: 100, # 慢查询的阈值，单位是毫秒； sampleRate: 1.0, # 日志随机采样率，1.0则表示满足条件的全部输出。 ok: 1, # 状态 &#x27;$clusterTime&#x27;: &#123; # 时间戳 clusterTime: Timestamp(&#123; t: 1712471779, i: 1 &#125;), # 时间戳 signature: &#123; # 签名 hash: Binary.createFromBase64(&#x27;GGCAjzJrW8arhfJX0Cn0VpvC5MA=&#x27;, 0), # 签名 keyId: Long(&#x27;7346062378896719877&#x27;) # 签名 &#125; &#125;, operationTime: Timestamp(&#123; t: 1712471779, i: 1 &#125;) # 操作时间&#125;# 只记录时长超过500ms的操作&gt; db.setProfilingLevel(1,500)# 同时加上采样率&gt; db.setProfilingLevel(1,&#123;slowms:500,sampleRate:0.5&#125;)# 关闭Profiler模块&gt; db.setProfilingLevel(2) 查看日志 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869# 查看操作日志&gt; db.system.profile.find().limit(5).sort(&#123;ts:-1&#125;).pretty()[ &#123; op: &#x27;query&#x27;, # 操作类型,比如查询,更新,删除等 ns: &#x27;admin.system.profile&#x27;, # 操作的集合 command: &#123; # 操作的命令 find: &#x27;system.profile&#x27;, # 操作的集合 filter: &#123;&#125;, # 查询条件 lsid: &#123; id: UUID(&#x27;2285d6a5-b2df-4b46-b9d2-5e556b0a7c7d&#x27;) &#125;, # 会话id &#x27;$clusterTime&#x27;: &#123; # 时间戳 clusterTime: Timestamp(&#123; t: 1712471018, i: 1 &#125;), signature: &#123; hash: Binary.createFromBase64(&#x27;8YEsN+XUWO6EkoHEegKkG49eWPA=&#x27;, 0), keyId: Long(&#x27;7346062378896719877&#x27;) &#125; &#125;, &#x27;$db&#x27;: &#x27;admin&#x27;, # 数据库 &#x27;$readPreference&#x27;: &#123; mode: &#x27;primaryPreferred&#x27; &#125; # 读偏好 &#125;, keysExamined: 0, # 扫描索引条目数，如果比nreturned大出很多，则说明查询效率不高。 docsExamined: 3, # 扫描文档条目数，如果比nreturned大出很多，则说明查询效率不高。 nBatches: 1, # 批处理数量 cursorExhausted: true, # 是否游标已耗尽 numYield: 0, # 操作数，大于0表示等待锁或者是磁盘I/O操作 nreturned: 3, # 返回的文档数量 queryHash: &#x27;8880B5AF&#x27;, # 查询哈希值 planCacheKey: &#x27;8880B5AF&#x27;, queryFramework: &#x27;classic&#x27;, locks: &#123; # 锁占用的情况。 FeatureCompatibilityVersion: &#123; acquireCount: &#123; r: Long(&#x27;1&#x27;) &#125; &#125;, Global: &#123; acquireCount: &#123; r: Long(&#x27;1&#x27;) &#125; &#125; &#125;, flowControl: &#123;&#125;, readConcern: &#123; level: &#x27;local&#x27;, provenance: &#x27;implicitDefault&#x27; &#125;, # 读关注 responseLength: 3414, # 响应数据大小（字节数），一次性查询太多的数据会影响性能，可以使用limit、batchSize进行一些限制。 protocol: &#x27;op_msg&#x27;, # 协议类型，op_msg是mongodb 4.0+的协议，op_query是mongodb 3.2及以前版本的协议。 millis: 0, # 命令执行的时长，单位是毫秒。 planSummary: &#x27;COLLSCAN&#x27;, # 查询计划的概要，如IXSCAN表示使用了索引扫描。 planningTimeMicros: 79, execStats: &#123; # 执行过程统计信息。 stage: &#x27;COLLSCAN&#x27;, nReturned: 3, executionTimeMillisEstimate: 0, works: 4, advanced: 3, needTime: 0, needYield: 0, saveState: 0, restoreState: 0, isEOF: 1, direction: &#x27;forward&#x27;, docsExamined: 3 &#125;, ts: ISODate(&#x27;2024-04-07T06:23:56.054Z&#x27;), # 命令执行的时间点。 client: &#x27;127.0.0.1&#x27;, # 客户端地址。 appName: &#x27;mongosh 2.1.5&#x27;, # 客户端名称。 allUsers: [ &#123; user: &#x27;user&#x27;, db: &#x27;admin&#x27; &#125; ], # 所有用户信息。 user: &#x27;user@admin&#x27; # 当前用户信息。 &#125;………………………………]# 查看执行时长最大的10条操作记录&gt; db.system.profile.find().limit(10).sort(&#123;millis:-1&#125;).pretty()# 查看某个集合中的update操作日志&gt; db.system.profile.find(&#123;op:&quot;update&quot;,ns:&quot;shop.user&quot;&#125;) system.profile是一个1MB的固定大小的集合，随着记录日志的增多，一些旧的记录会被滚动删除。 Profiler模块的设置是内存级的，重启服务器后会自动恢复默认状态。 db.currentOp() Profiler模块所记录的日志都是已经发生的事情，db.currentOp()命令则与此相反，它可以用来查看数据库当前正在执行的一些操作。 db.currentOp()读取的是当前数据库的命令快照，该命令可以返回许多有用的信息，比如： 123操作的运行时长，快速发现耗时漫长的低效扫描操作。执行计划信息，用于判断是否命中了索引，或者存在锁冲突的情况。操作ID、时间、客户端等信息，方便定位出产生慢操作的源头 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&gt; db.currentOp()&#123;inprog: [ # 当前正在执行的操作 &#123; type: &#x27;op&#x27;, # 操作类型，可以是op、idleSession、idleCursor的一种，一般的操作信息以op表示。其为MongoDB 4.2版本新增功能 host: &#x27;localhost:27041&#x27;, # 操作所在的主机 desc: &#x27;conn474&#x27;, # 操作的描述信息 connectionId: 474, # 操作的连接ID client: &#x27;127.0.0.1:58103&#x27;, # 操作的客户端信息 appName: &#x27;mongosh 2.1.5&#x27;, # 操作的客户端应用信息 clientMetadata: &#123; # 关于客户端的附加信息，可以包含驱动的版本。 application: &#123; name: &#x27;mongosh 2.1.5&#x27; &#125;, driver: &#123; name: &#x27;nodejs|mongosh&#x27;, version: &#x27;6.3.0|2.1.5&#x27; &#125;, platform: &#x27;Node.js v20.11.1, LE&#x27;, os: &#123; name: &#x27;darwin&#x27;, architecture: &#x27;x64&#x27;, version: &#x27;22.6.0&#x27;, type: &#x27;Darwin&#x27; &#125; &#125;, active: true, # 操作是否活跃。如果是空闲状态则为false currentOpTime: &#x27;2024-04-07T14:54:02.994+08:00&#x27;, # 操作的开始时间。MongoDB 3.6版本新增功能 threaded: true, opid: 236247, # opid：当前操作在数据库进程中的唯一编号,如果已经发现该操作正在导致数据库系统响应缓慢，则可以考虑将其“杀”死 : db.killOp(236247) secs_running: Long(&#x27;3&#x27;), # 操作持续时间,单位：秒 microsecs_running: Long(&#x27;3362378&#x27;), # 操作持续时间，单位：微秒 op: &#x27;command&#x27;, # 标识操作类型的字符串，如 command, insert, query, update, delete, getMore, killCursors ns: &#x27;admin.$cmd&#x27;, # 操作的命名空间，格式为 db.collection redacted: false, # 是否已脱敏 command: &#123; # 操作命令参数 hello: 1, maxAwaitTimeMS: 10000, topologyVersion: &#123; processId: ObjectId(&#x27;6611f8cd59f7cfaa5c8cd7e4&#x27;), counter: Long(&#x27;18&#x27;) &#125;, &#x27;$clusterTime&#x27;: &#123; clusterTime: Timestamp(&#123; t: 1712470998, i: 1 &#125;), signature: &#123; hash: Binary.createFromBase64(&#x27;gvgo03Wqi1AuOVqnrlhzKIK2NAU=&#x27;, 0), keyId: Long(&#x27;7346062378896719877&#x27;) &#125; &#125;, &#x27;$db&#x27;: &#x27;admin&#x27; &#125;, numYields: 0, locks: &#123;&#125;, # 当前操作持有锁的类型和模式。 waitingForLock: false, # 是否在等待锁 lockStats: &#123;&#125;, # 当前操作持有锁的统计。 waitingForFlowControl: false, flowControlStats: &#123;&#125; &#125;………………………………]&#125;# 查看等待锁的增加、删除、修改、查询操作&gt; db.currentOp(&#123; waitingForLock:true, $or:[ &#123;op:&#123;$in:[&quot;insert&quot;,&quot;update&quot;,&quot;remove&quot;]&#125;&#125;, &#123;&quot;query.findandmodify&quot;:&#123;$exists:true&#125;&#125; ] &#125;)# 查看执行时间超过1s的操作&gt; db.currentOp(&#123; secs_running:&#123;$gt:1&#125; &#125;)# 查看test数据库中的操作&gt; db.currentOp(&#123; ns:/test/ &#125;)","summary":"摘要 本文介绍MongoDB7.0的一些有用的功能，比如运行js，查看慢查询日志等等 MongoDB官方文档 本文基于CentOS8(x86_64)","date_published":"2024-04-07T13:30:05.000Z","tags":["技术","linux","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/04/03/mongodb7-tools/","url":"https://blog.hanqunfeng.com/2024/04/03/mongodb7-tools/","title":"MongoDB Command Line Database Tools","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍Linux下MongoDB Command Line Database Tools的安装与使用</p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB Command Line Database Tools<a href=\"https://www.mongodb.com/docs/database-tools/\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>CentOS8(x86_64)</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"MongoDB-Database-Tools\">MongoDB Database Tools</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>MongoDB Database Tools是MongoDB官方提供的数据库管理工具，可以用于管理MongoDB数据库，包括MongoDB的备份、恢复、监控等功能。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/try/download/database-tools\">MongoDB Database Tools的下载地址</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载安装包</span></span><br><span class=\"line\">wget https://fastdl.mongodb.org/tools/db/mongodb-database-tools-rhel80-x86_64-100.9.4.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压安装包</span></span><br><span class=\"line\">tar -xvzf mongodb-database-tools-rhel80-x86_64-100.9.4.tgz</span><br><span class=\"line\"><span class=\"comment\"># 创建软连接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s mongodb-database-tools-rhel80-x86_64-100.9.4 /mongodb/tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在/etc/profile文件中配置PATH环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/mongodb/tools/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"comment\"># 使配置生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>MongoDB Database Tools常用命令，详细的使用方法请查看<a href=\"https://www.mongodb.com/docs/database-tools/\">官方文档</a></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>文件名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mongostat</td>\n<td>数据库性能监控工具</td>\n</tr>\n<tr>\n<td>mongotop</td>\n<td>热点表监控工具</td>\n</tr>\n<tr>\n<td>mongodump</td>\n<td>数据库逻辑备份工具</td>\n</tr>\n<tr>\n<td>mongorestore</td>\n<td>数据库逻辑恢复工具</td>\n</tr>\n<tr>\n<td>mongoexport</td>\n<td>数据导出工具</td>\n</tr>\n<tr>\n<td>mongoimport</td>\n<td>数据导入工具</td>\n</tr>\n<tr>\n<td>bsondump</td>\n<td>BSON格式转换工具</td>\n</tr>\n<tr>\n<td>mongofiles</td>\n<td>GridFS文件工具</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"mongoexport-导出数据\">mongoexport: 导出数据</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导出csv格式的数据</span></span><br><span class=\"line\">mongoexport <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d <span class=\"built_in\">test</span> -c books -f _id,title,<span class=\"built_in\">type</span>,tag --<span class=\"built_in\">type</span>=csv -o books.csv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导出json格式的数据</span></span><br><span class=\"line\">mongoexport <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d <span class=\"built_in\">test</span> -c books -f _id,title,<span class=\"built_in\">type</span>,tag --<span class=\"built_in\">type</span>=json -o books.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数说明</span></span><br><span class=\"line\">-d 指定数据库</span><br><span class=\"line\">-c 指定集合</span><br><span class=\"line\">-f 指定导出字段，csv格式需要指定字段，json格式可以不指定字段，默认导出全部</span><br><span class=\"line\">--<span class=\"built_in\">type</span>=csv/json 指定导出格式</span><br><span class=\"line\">-o 指定导出文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导出时可以增加过滤条件</span></span><br><span class=\"line\">mongoexport <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017?authSource=admin&amp;replicaSet=rs0&quot;</span> -d mydb -c user --<span class=\"built_in\">type</span>=json -o user.json  --<span class=\"built_in\">limit</span>=10 --skip=2 --<span class=\"built_in\">sort</span>=<span class=\"string\">&#x27;&#123;&quot;name&quot;:1&#125;&#x27;</span> --query=<span class=\"string\">&#x27;&#123;&quot;age&quot;:&#123;&quot;$gt&quot;:25&#125;,&quot;name&quot;:&quot;zhangsan&quot;&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数说明</span></span><br><span class=\"line\">--<span class=\"built_in\">limit</span>=10 指定导出条数</span><br><span class=\"line\">--skip=2 指定跳过条数</span><br><span class=\"line\">--<span class=\"built_in\">sort</span>=<span class=\"string\">&#x27;&#123;&quot;name&quot;:1&#125;&#x27;</span> 指定排序字段</span><br><span class=\"line\">--query=<span class=\"string\">&#x27;&#123;&quot;age&quot;:&#123;&quot;$gt&quot;:25&#125;,&quot;name&quot;:&quot;zhangsan&quot;&#125;&#x27;</span> 指定查询条件，注意这里的查询条件是json格式，字段名需要使用双引号包裹</span><br></pre></td></tr></table></figure>\n<h2 id=\"mongoimport-导入数据\">mongoimport: 导入数据</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入csv格式的数据</span></span><br><span class=\"line\"><span class=\"comment\"># 注意此时导入的csv文件中第一行如果是字段名，需要先删除第一行再导入，这里使用了 -f 指定字段，来和导入的csv文件的列一一对应</span></span><br><span class=\"line\">mongoimport <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d <span class=\"built_in\">test</span> -c books_new -f _id,title,<span class=\"built_in\">type</span>,tag --<span class=\"built_in\">type</span>=csv --file books.csv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意此时导入的csv文件中第一行如果是字段名，需要先删除第一行再导入，这里使用了 -f 指定字段，来和导入的csv文件的列一一对应</span></span><br><span class=\"line\">mongoimport <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d <span class=\"built_in\">test</span> -c books_new --headerline --<span class=\"built_in\">type</span>=csv --file books.csv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入json格式的数据</span></span><br><span class=\"line\">mongoimport <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d <span class=\"built_in\">test</span> -c books_new --<span class=\"built_in\">type</span>=json --file books.json</span><br><span class=\"line\"></span><br><span class=\"line\">-d 指定数据库</span><br><span class=\"line\">-c 指定集合</span><br><span class=\"line\">-f 指定导入字段，csv格式需要指定字段</span><br><span class=\"line\">--headerline 指定第一行是字段名</span><br><span class=\"line\">--<span class=\"built_in\">type</span>=csv/json 指定导入格式</span><br><span class=\"line\">--file 指定导入文件</span><br><span class=\"line\">--mode 指定导入方式，默认是insert，还可以是upsert，merge，delete</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>mode说明</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>insert: 默认值，如果数据不存在，则插入，如果存在，则报错</p>\n</li>\n<li class=\"lvl-2\">\n<p>upsert: 如果数据不存在，则插入，如果存在，则更新</p>\n</li>\n<li class=\"lvl-2\">\n<p>merge: 如果数据不存在，则插入，如果存在，则合并后更新</p>\n</li>\n<li class=\"lvl-2\">\n<p>delete: 如果数据不存在，也不执行插入，如果存在，则删除</p>\n</li>\n</ul>\n<h2 id=\"mongostat-数据库性能监控\">mongostat: 数据库性能监控</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>mongostat命令用于实时监控MongoDB数据库的性能，包括连接数、文档数、索引数、内存使用情况等。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 监控20次，间隔1秒</span></span><br><span class=\"line\">mongostat <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -n20 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数说明</span></span><br><span class=\"line\">-n 指定监控次数</span><br><span class=\"line\">1 指定监控间隔时间，单位为秒</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监控实时数据</span></span><br><span class=\"line\">host               insert query update delete getmore <span class=\"built_in\">command</span> dirty  used flushes vsize  res qrw arw net_in net_out conn <span class=\"built_in\">set</span> repl                time</span><br><span class=\"line\">10.1.2.142:27017    *0    *0     *0     *0       0     4|0     0.4%  5.0%       0 2.95G 151M 0|0 0|0  1.13k   75.2k   24 rs0  SLV Apr  3 08:37:49.405</span><br><span class=\"line\">10.1.2.26:27017     *0    *0     *0     *0       0     2|0     0.2%  3.8%       0 2.87G 138M 0|0 0|0   710b   74.3k   14 rs0  SEC Apr  3 08:37:49.385</span><br><span class=\"line\">10.1.2.41:27017     *0    *0     *0     *0       0     5|0     0.0% 17.7%       0 2.96G 184M 0|0 0|0  1.45k   75.5k   16 rs0  SEC Apr  3 08:37:49.426</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>指标说明</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指标名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>inserts</code></td>\n<td>每秒插入数</td>\n</tr>\n<tr>\n<td><code>query</code></td>\n<td>每秒查询数</td>\n</tr>\n<tr>\n<td><code>update</code></td>\n<td>每秒更新数</td>\n</tr>\n<tr>\n<td><code>delete</code></td>\n<td>每秒删除数</td>\n</tr>\n<tr>\n<td><code>getmore</code></td>\n<td>每秒getmore数</td>\n</tr>\n<tr>\n<td><code>command</code></td>\n<td>每秒命令数，涵盖了内部的一些操作</td>\n</tr>\n<tr>\n<td><code>%dirty</code></td>\n<td>WiredTiger缓存中脏数据百分比</td>\n</tr>\n<tr>\n<td><code>%used</code></td>\n<td>WiredTiger 正在使用的缓存百分比</td>\n</tr>\n<tr>\n<td><code>flushes</code></td>\n<td>WiredTiger执行CheckPoint的次数</td>\n</tr>\n<tr>\n<td><code>vsize</code></td>\n<td>虚拟内存使用量</td>\n</tr>\n<tr>\n<td><code>res</code></td>\n<td>物理内存使用量</td>\n</tr>\n<tr>\n<td><code>qrw</code></td>\n<td>客户端读写等待队列数量，高并发时，一般队列值会升高</td>\n</tr>\n<tr>\n<td><code>arw</code></td>\n<td>客户端读写活跃个数</td>\n</tr>\n<tr>\n<td><code>netIn</code></td>\n<td>网络接收数据量</td>\n</tr>\n<tr>\n<td><code>netOut</code></td>\n<td>网络发送数据量</td>\n</tr>\n<tr>\n<td><code>conn</code></td>\n<td>当前连接数</td>\n</tr>\n<tr>\n<td><code>set</code></td>\n<td>所属复制集名称</td>\n</tr>\n<tr>\n<td><code>repl</code></td>\n<td>复制节点状态，如PRI(主节点,我这里主节点显示为SLV),SEC(从节点),ARB(仲裁节点),REC(节点正在恢复),UNK(未知状态),RTR(mongos)</td>\n</tr>\n<tr>\n<td><code>time</code></td>\n<td>时间戳</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>需要重点关注的指标<br>\n1.插入、删除、修改、查询的速率是否产生较大波动，是否超出预期。<br>\n2.qrw、arw：队列是否较高，若长时间大于0则说明此时读写速度较慢。<br>\n3.conn：连接数是否太多。<br>\n4.dirty：百分比是否较高，若持续高于10%则说明磁盘I/O存在瓶颈。<br>\n5.netIn、netOut：是否超过网络带宽阈值。<br>\n6.repl：状态是否异常，如PRI、SEC、RTR为正常，若出现REC等异常值则需要修复。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定监控指标 -o</span></span><br><span class=\"line\">mongostat <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -n1 1 -o=<span class=\"string\">&#x27;host,insert,query,update,delete,qrw,arw,conn,dirty,repl,version&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            host insert query update delete qrw arw conn dirty repl version</span><br><span class=\"line\">10.1.2.142:27017     *0    *0     *0     *0 0|0 0|0   24  0.4%  SLV   7.0.7</span><br><span class=\"line\"> 10.1.2.26:27017     *0    *0     *0     *0 0|0 0|0   14  0.2%  SEC   7.0.7</span><br><span class=\"line\"> 10.1.2.41:27017     *0    *0     *0     *0 0|0 0|0   16  0.4%  SEC   7.0.7</span><br></pre></td></tr></table></figure>\n<h2 id=\"mongotop-查看数据库性能\">mongotop: 查看数据库性能</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>mongotop命令可用于查看数据库的热点表，通过观察mongotop的输出，可以判定是哪些集合占用了大部分读写时间。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 监控20次，间隔1秒</span></span><br><span class=\"line\">mongotop <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -n 20 1</span><br><span class=\"line\"></span><br><span class=\"line\">                             ns    total    <span class=\"built_in\">read</span>    write    2024-04-03T09:16:53Z</span><br><span class=\"line\">                 admin.atlascli      0ms     0ms      0ms</span><br><span class=\"line\">              admin.system.keys      0ms     0ms      0ms</span><br><span class=\"line\">             admin.system.users      0ms     0ms      0ms</span><br><span class=\"line\">           admin.system.version      0ms     0ms      0ms</span><br><span class=\"line\">config.external_validation_keys      0ms     0ms      0ms</span><br><span class=\"line\">        config.image_collection      0ms     0ms      0ms</span><br><span class=\"line\">          config.queryAnalyzers      0ms     0ms      0ms</span><br><span class=\"line\">                config.settings      0ms     0ms      0ms</span><br><span class=\"line\">    config.shardMergeRecipients      0ms     0ms      0ms</span><br><span class=\"line\">        config.shardSplitDonors      0ms     0ms      0ms</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出说明</span></span><br><span class=\"line\">ns 集合名称</span><br><span class=\"line\">total 花费在该集合上的时长</span><br><span class=\"line\"><span class=\"built_in\">read</span> 花费在该集合上的读操作时长</span><br><span class=\"line\">write 花费在该集合上的写操作时长</span><br></pre></td></tr></table></figure>\n<h2 id=\"mongodump-备份数据库\">mongodump: 备份数据库</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>mongodump命令用于备份数据库</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份所有库，默认输出到dump文件夹下</span></span><br><span class=\"line\">mongodump <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> --gzip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份指定库，默认输出到dump文件夹下</span></span><br><span class=\"line\">mongodump <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d <span class=\"built_in\">test</span> --gzip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份指定集合</span></span><br><span class=\"line\">mongodump <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d <span class=\"built_in\">test</span> -c books --gzip -o ./books</span><br><span class=\"line\">2024-04-03T09:36:18.980+0000\twriting test.books to books/test/books.bson.gz</span><br><span class=\"line\">2024-04-03T09:36:18.983+0000\t<span class=\"keyword\">done</span> dumping test.books (50 documents)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数说明</span></span><br><span class=\"line\">-d 指定数据库，不指定则导出全部数据库</span><br><span class=\"line\">-c 指定集合，不指定则导出全部集合</span><br><span class=\"line\">--gzip 指定压缩格式，导出的文件会被压缩为.gz格式</span><br><span class=\"line\">-o 指定备份目录，不指定则默认为当前目录下的dump文件夹</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 类似于 mongoexport ,备份数据时同样支持过滤条件</span></span><br><span class=\"line\">mongodump <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d <span class=\"built_in\">test</span> -c books --gzip -o ./books --query=<span class=\"string\">&#x27;&#123;&quot;name&quot;:&quot;hello&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"mongorestore-恢复数据库\">mongorestore: 恢复数据库</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>mongorestore命令用于恢复数据库</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复到相同数据库的相同集合,此时会将dump目录下的所有数据库进行恢复</span></span><br><span class=\"line\">mongorestore <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> --gzip ./dump</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只恢复指定的库下的所有集合</span></span><br><span class=\"line\">mongorestore <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> --nsInclude=<span class=\"string\">&quot;test.*&quot;</span> --gzip ./dump</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只恢复指定的集合</span></span><br><span class=\"line\">mongorestore <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> --nsInclude=<span class=\"string\">&quot;test.books&quot;</span> --gzip ./dump</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数说明</span></span><br><span class=\"line\">--nsInclude=test.books 指定要恢复的集合</span><br><span class=\"line\">--gzip 指定压缩格式</span><br></pre></td></tr></table></figure>\n<h2 id=\"bsondump-查看BSON文件内容\">bsondump: 查看BSON文件内容</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>bsondump命令用于查看BSON文件内容，可以将bson格式的数据转换为json格式，方便查看。</p>\n</li>\n<li class=\"lvl-2\">\n<p>我们使用mongodump导出的数据格式为bson格式，可以使用bsondump命令将其转换为json格式。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果导出的是压缩格式需要先解压缩</span></span><br><span class=\"line\">gunzip emp.bson.gz</span><br><span class=\"line\"><span class=\"comment\"># 将bson文件转换为json文件</span></span><br><span class=\"line\">bsondump emp.bson &gt; emp.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"mongofiles-文件存储\">mongofiles: 文件存储</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>mongofiles命令用于文件存储，可以将文件存储到MongoDB中，然后通过mongofiles命令进行查看和删除。</p>\n</li>\n<li class=\"lvl-2\">\n<p>不过现在文件存储基本都会使用S3，很少使用mongodb了。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 上传</span></span><br><span class=\"line\">mongofiles <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d mydb put shell从入门到精通.docx</span><br><span class=\"line\"><span class=\"comment\"># 上传后会在指定的数据库中创建两个集合：fs.files 和 fs.chunks</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; db.fs.files.find()</span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: ObjectId(<span class=\"string\">&#x27;66120f0135b8419b3a1ca510&#x27;</span>), <span class=\"comment\"># 文档ID，唯一标识</span></span><br><span class=\"line\">    length: Long(<span class=\"string\">&#x27;486680&#x27;</span>),                    <span class=\"comment\"># 文件大小</span></span><br><span class=\"line\">    chunkSize: 261120,                         <span class=\"comment\"># 每个分片的大小</span></span><br><span class=\"line\">    uploadDate: ISODate(<span class=\"string\">&#x27;2024-04-07T03:12:01.965Z&#x27;</span>), <span class=\"comment\"># 上传时间</span></span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;shell从入门到精通.docx&#x27;</span>,          <span class=\"comment\"># 文件名</span></span><br><span class=\"line\">    metadata: &#123;&#125;                               <span class=\"comment\"># 元数据</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; db.fs.chunks.find()</span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: ObjectId(<span class=\"string\">&#x27;66120f0135b8419b3a1ca512&#x27;</span>),     <span class=\"comment\"># 分片ID</span></span><br><span class=\"line\">    files_id: ObjectId(<span class=\"string\">&#x27;66120f0135b8419b3a1ca510&#x27;</span>), <span class=\"comment\"># 文档ID，对应fs.files集合中的_id</span></span><br><span class=\"line\">    n: 1,                                         <span class=\"comment\"># 分片序号</span></span><br><span class=\"line\">    data: &lt;Binary&gt;                                <span class=\"comment\"># 分片数据</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">mongofiles <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d mydb list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索</span></span><br><span class=\"line\">mongofiles <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d mydb search shell</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">mongofiles <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d mydb get shell从入门到精通.docx</span><br><span class=\"line\"><span class=\"comment\"># 根据id获取文件</span></span><br><span class=\"line\">mongofiles <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d mydb get_id <span class=\"string\">&#x27;&#123;&quot;$oid&quot;: &quot;66120f0135b8419b3a1ca510&quot;&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除</span></span><br><span class=\"line\">mongofiles <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d mydb delete shell从入门到精通.docx</span><br><span class=\"line\"><span class=\"comment\"># 根据id删除文件</span></span><br><span class=\"line\">mongofiles <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot;</span> -d mydb delete_id <span class=\"string\">&#x27;&#123;&quot;$oid&quot;: &quot;66120f0135b8419b3a1ca510&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍Linux下MongoDB Command Line Database Tools的安装与使用 MongoDB Command Line Database Tools官方文档 本文基于CentOS8(x86_64) MongoDB Database Tools MongoDB Database Tools是MongoDB官方提供的数据库管理工具，可以用于管理MongoDB数据库，包括MongoDB的备份、恢复、监控等功能。 MongoDB Database Tools的下载地址 1234567891011# 下载安装包wget https://fastdl.mongodb.org/tools/db/mongodb-database-tools-rhel80-x86_64-100.9.4.tgz# 解压安装包tar -xvzf mongodb-database-tools-rhel80-x86_64-100.9.4.tgz# 创建软连接ln -s mongodb-database-tools-rhel80-x86_64-100.9.4 /mongodb/tools# 在/etc/profile文件中配置PATH环境变量export PATH=/mongodb/tools/bin:$PATH# 使配置生效source /etc/profile MongoDB Database Tools常用命令，详细的使用方法请查看官方文档 文件名称 作用 mongostat 数据库性能监控工具 mongotop 热点表监控工具 mongodump 数据库逻辑备份工具 mongorestore 数据库逻辑恢复工具 mongoexport 数据导出工具 mongoimport 数据导入工具 bsondump BSON格式转换工具 mongofiles GridFS文件工具 mongoexport: 导出数据 123456789101112131415161718192021# 导出csv格式的数据mongoexport &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d test -c books -f _id,title,type,tag --type=csv -o books.csv# 导出json格式的数据mongoexport &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d test -c books -f _id,title,type,tag --type=json -o books.json# 参数说明-d 指定数据库-c 指定集合-f 指定导出字段，csv格式需要指定字段，json格式可以不指定字段，默认导出全部--type=csv/json 指定导出格式-o 指定导出文件# 导出时可以增加过滤条件mongoexport &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017?authSource=admin&amp;replicaSet=rs0&quot; -d mydb -c user --type=json -o user.json --limit=10 --skip=2 --sort=&#x27;&#123;&quot;name&quot;:1&#125;&#x27; --query=&#x27;&#123;&quot;age&quot;:&#123;&quot;$gt&quot;:25&#125;,&quot;name&quot;:&quot;zhangsan&quot;&#125;&#x27;# 参数说明--limit=10 指定导出条数--skip=2 指定跳过条数--sort=&#x27;&#123;&quot;name&quot;:1&#125;&#x27; 指定排序字段--query=&#x27;&#123;&quot;age&quot;:&#123;&quot;$gt&quot;:25&#125;,&quot;name&quot;:&quot;zhangsan&quot;&#125;&#x27; 指定查询条件，注意这里的查询条件是json格式，字段名需要使用双引号包裹 mongoimport: 导入数据 1234567891011121314151617# 导入csv格式的数据# 注意此时导入的csv文件中第一行如果是字段名，需要先删除第一行再导入，这里使用了 -f 指定字段，来和导入的csv文件的列一一对应mongoimport &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d test -c books_new -f _id,title,type,tag --type=csv --file books.csv# 注意此时导入的csv文件中第一行如果是字段名，需要先删除第一行再导入，这里使用了 -f 指定字段，来和导入的csv文件的列一一对应mongoimport &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d test -c books_new --headerline --type=csv --file books.csv# 导入json格式的数据mongoimport &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d test -c books_new --type=json --file books.json-d 指定数据库-c 指定集合-f 指定导入字段，csv格式需要指定字段--headerline 指定第一行是字段名--type=csv/json 指定导入格式--file 指定导入文件--mode 指定导入方式，默认是insert，还可以是upsert，merge，delete mode说明 insert: 默认值，如果数据不存在，则插入，如果存在，则报错 upsert: 如果数据不存在，则插入，如果存在，则更新 merge: 如果数据不存在，则插入，如果存在，则合并后更新 delete: 如果数据不存在，也不执行插入，如果存在，则删除 mongostat: 数据库性能监控 mongostat命令用于实时监控MongoDB数据库的性能，包括连接数、文档数、索引数、内存使用情况等。 123456789101112# 监控20次，间隔1秒mongostat &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -n20 1# 参数说明-n 指定监控次数1 指定监控间隔时间，单位为秒# 监控实时数据host insert query update delete getmore command dirty used flushes vsize res qrw arw net_in net_out conn set repl time10.1.2.142:27017 *0 *0 *0 *0 0 4|0 0.4% 5.0% 0 2.95G 151M 0|0 0|0 1.13k 75.2k 24 rs0 SLV Apr 3 08:37:49.40510.1.2.26:27017 *0 *0 *0 *0 0 2|0 0.2% 3.8% 0 2.87G 138M 0|0 0|0 710b 74.3k 14 rs0 SEC Apr 3 08:37:49.38510.1.2.41:27017 *0 *0 *0 *0 0 5|0 0.0% 17.7% 0 2.96G 184M 0|0 0|0 1.45k 75.5k 16 rs0 SEC Apr 3 08:37:49.426 指标说明 指标名 说明 inserts 每秒插入数 query 每秒查询数 update 每秒更新数 delete 每秒删除数 getmore 每秒getmore数 command 每秒命令数，涵盖了内部的一些操作 %dirty WiredTiger缓存中脏数据百分比 %used WiredTiger 正在使用的缓存百分比 flushes WiredTiger执行CheckPoint的次数 vsize 虚拟内存使用量 res 物理内存使用量 qrw 客户端读写等待队列数量，高并发时，一般队列值会升高 arw 客户端读写活跃个数 netIn 网络接收数据量 netOut 网络发送数据量 conn 当前连接数 set 所属复制集名称 repl 复制节点状态，如PRI(主节点,我这里主节点显示为SLV),SEC(从节点),ARB(仲裁节点),REC(节点正在恢复),UNK(未知状态),RTR(mongos) time 时间戳 需要重点关注的指标 1.插入、删除、修改、查询的速率是否产生较大波动，是否超出预期。 2.qrw、arw：队列是否较高，若长时间大于0则说明此时读写速度较慢。 3.conn：连接数是否太多。 4.dirty：百分比是否较高，若持续高于10%则说明磁盘I/O存在瓶颈。 5.netIn、netOut：是否超过网络带宽阈值。 6.repl：状态是否异常，如PRI、SEC、RTR为正常，若出现REC等异常值则需要修复。 1234567# 指定监控指标 -omongostat &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -n1 1 -o=&#x27;host,insert,query,update,delete,qrw,arw,conn,dirty,repl,version&#x27; host insert query update delete qrw arw conn dirty repl version10.1.2.142:27017 *0 *0 *0 *0 0|0 0|0 24 0.4% SLV 7.0.7 10.1.2.26:27017 *0 *0 *0 *0 0|0 0|0 14 0.2% SEC 7.0.7 10.1.2.41:27017 *0 *0 *0 *0 0|0 0|0 16 0.4% SEC 7.0.7 mongotop: 查看数据库性能 mongotop命令可用于查看数据库的热点表，通过观察mongotop的输出，可以判定是哪些集合占用了大部分读写时间。 1234567891011121314151617181920# 监控20次，间隔1秒mongotop &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -n 20 1 ns total read write 2024-04-03T09:16:53Z admin.atlascli 0ms 0ms 0ms admin.system.keys 0ms 0ms 0ms admin.system.users 0ms 0ms 0ms admin.system.version 0ms 0ms 0msconfig.external_validation_keys 0ms 0ms 0ms config.image_collection 0ms 0ms 0ms config.queryAnalyzers 0ms 0ms 0ms config.settings 0ms 0ms 0ms config.shardMergeRecipients 0ms 0ms 0ms config.shardSplitDonors 0ms 0ms 0ms# 输出说明ns 集合名称total 花费在该集合上的时长read 花费在该集合上的读操作时长write 花费在该集合上的写操作时长 mongodump: 备份数据库 mongodump命令用于备份数据库 12345678910111213141516171819# 备份所有库，默认输出到dump文件夹下mongodump &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; --gzip# 备份指定库，默认输出到dump文件夹下mongodump &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d test --gzip# 备份指定集合mongodump &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d test -c books --gzip -o ./books2024-04-03T09:36:18.980+0000 writing test.books to books/test/books.bson.gz2024-04-03T09:36:18.983+0000 done dumping test.books (50 documents)# 参数说明-d 指定数据库，不指定则导出全部数据库-c 指定集合，不指定则导出全部集合--gzip 指定压缩格式，导出的文件会被压缩为.gz格式-o 指定备份目录，不指定则默认为当前目录下的dump文件夹# 类似于 mongoexport ,备份数据时同样支持过滤条件mongodump &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d test -c books --gzip -o ./books --query=&#x27;&#123;&quot;name&quot;:&quot;hello&quot;&#125;&#x27; mongorestore: 恢复数据库 mongorestore命令用于恢复数据库 12345678910111213# 恢复到相同数据库的相同集合,此时会将dump目录下的所有数据库进行恢复mongorestore &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; --gzip ./dump# 只恢复指定的库下的所有集合mongorestore &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; --nsInclude=&quot;test.*&quot; --gzip ./dump# 只恢复指定的集合mongorestore &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; --nsInclude=&quot;test.books&quot; --gzip ./dump# 参数说明--nsInclude=test.books 指定要恢复的集合--gzip 指定压缩格式 bsondump: 查看BSON文件内容 bsondump命令用于查看BSON文件内容，可以将bson格式的数据转换为json格式，方便查看。 我们使用mongodump导出的数据格式为bson格式，可以使用bsondump命令将其转换为json格式。 1234# 如果导出的是压缩格式需要先解压缩gunzip emp.bson.gz# 将bson文件转换为json文件bsondump emp.bson &gt; emp.json mongofiles: 文件存储 mongofiles命令用于文件存储，可以将文件存储到MongoDB中，然后通过mongofiles命令进行查看和删除。 不过现在文件存储基本都会使用S3，很少使用mongodb了。 123456789101112131415161718192021222324252627282930313233343536373839404142# 上传mongofiles &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d mydb put shell从入门到精通.docx# 上传后会在指定的数据库中创建两个集合：fs.files 和 fs.chunks&gt; db.fs.files.find()[ &#123; _id: ObjectId(&#x27;66120f0135b8419b3a1ca510&#x27;), # 文档ID，唯一标识 length: Long(&#x27;486680&#x27;), # 文件大小 chunkSize: 261120, # 每个分片的大小 uploadDate: ISODate(&#x27;2024-04-07T03:12:01.965Z&#x27;), # 上传时间 filename: &#x27;shell从入门到精通.docx&#x27;, # 文件名 metadata: &#123;&#125; # 元数据 &#125;]&gt; db.fs.chunks.find()[ &#123; _id: ObjectId(&#x27;66120f0135b8419b3a1ca512&#x27;), # 分片ID files_id: ObjectId(&#x27;66120f0135b8419b3a1ca510&#x27;), # 文档ID，对应fs.files集合中的_id n: 1, # 分片序号 data: &lt;Binary&gt; # 分片数据 &#125;]# 查看mongofiles &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d mydb list# 搜索mongofiles &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d mydb search shell# 下载mongofiles &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d mydb get shell从入门到精通.docx# 根据id获取文件mongofiles &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d mydb get_id &#x27;&#123;&quot;$oid&quot;: &quot;66120f0135b8419b3a1ca510&quot;&#125;&#x27;# 删除mongofiles &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d mydb delete shell从入门到精通.docx# 根据id删除文件mongofiles &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/?authSource=admin&amp;replicaSet=rs0&quot; -d mydb delete_id &#x27;&#123;&quot;$oid&quot;: &quot;66120f0135b8419b3a1ca510&quot;&#125;&#x27;","summary":"摘要 本文介绍Linux下MongoDB Command Line Database Tools的安装与使用 MongoDB Command Line Database Tools官方文档 本文基于CentOS8(x86_64)","date_published":"2024-04-03T13:30:05.000Z","tags":["技术","linux","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/03/29/mongodb7-replset/","url":"https://blog.hanqunfeng.com/2024/03/29/mongodb7-replset/","title":"MongoDB7.0--复制集","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍Linux下MongoDB7.0复制集的安装和使用</p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB<a href=\"https://www.mongodb.com/docs/v7.0/\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>CentOS8(x86_64)</code></p>\n</li>\n<li class=\"lvl-2\">\n<p><code>Mongodb分片集群</code>搭建参看<a href=\"/2020/03/19/mongodb-mongos/\" title=\"MongoDB 分片集群搭建\">MongoDB 分片集群搭建</a>，虽然是基于<code>4.4</code>版本的，但是安装方式差别不大，只是配置文件中个别的属性名称发生了变化。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"复制集节点类型\">复制集节点类型</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>一个复制集最多支持50个节点，且做多只能有7个节点参与投票，节点类型分为<code>Primary</code>、<code>Secondary</code>与<code>Arbiter</code>。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>Primary</code>：主节点，其接收所有的写请求，然后把修改同步到所有 <code>Secondary</code> 节点。一个复制集只能有一个主节点，当主节点<em><strong>挂掉</strong></em>后，其他节点会重新选举出来一个主节点。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>Secondary</code>：备节点，与主节点保持同样的数据集。当主节点<em><strong>挂掉</strong></em>时，参与竞选主节点。分为以下三个不同类型：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">Hidden = false：正常的只读节点，是否可选为主，是否可投票，取决于 <code>Priority</code>，<code>Vote</code> 的值；</li>\n<li class=\"lvl-4\">Hidden = true：隐藏节点，对客户端不可见， 可以参与选举，但是 <code>Priority</code> 必须为 0，即不能被提升为主。 由于隐藏节点不会接受业务访问，因此可通过隐藏节点做一些数据备份、离线计算的任务，这并不会影响整个复制集。</li>\n<li class=\"lvl-4\">Delayed ：延迟节点，必须同时具备<code>隐藏节点</code>和<code>Priority=0</code>的特性，会延迟一定的时间（secondaryDelaySecs 配置决定）从上游复制增量，常用于快速回滚场景。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p><code>Arbiter</code>：仲裁节点，只用于参与选举投票，本身不承载任何数据，只作为投票角色。比如你部署了2个节点的复制集，1个 Primary，1个Secondary，任意节点宕机，复制集将不能提供服务了（无法选出Primary），这时可以给复制集添加⼀个 Arbiter节点，即使有节点宕机，仍能选出Primary。 Arbiter本身不存储数据，是非常轻量级的服务，当复制集成员为偶数时，最好加入⼀个Arbiter节点，以提升复制集可用性。</p>\n</li>\n</ul>\n<h2 id=\"搭建基于3台机器的复制集\">搭建基于3台机器的复制集</h2>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10.1</span><span class=\"number\">.2</span><span class=\"number\">.26</span></span><br><span class=\"line\"><span class=\"number\">10.1</span><span class=\"number\">.2</span><span class=\"number\">.142</span></span><br><span class=\"line\"><span class=\"number\">10.1</span><span class=\"number\">.2</span><span class=\"number\">.41</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>mongod.conf配置文件，需要创建好相关目录</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">systemLog:</span></span><br><span class=\"line\">  <span class=\"attr\">destination:</span> <span class=\"string\">file</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">/mongodb/log/mongodb.log</span></span><br><span class=\"line\">  <span class=\"attr\">logAppend:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">dbPath:</span> <span class=\"string\">/mongodb/data</span></span><br><span class=\"line\"><span class=\"attr\">net:</span></span><br><span class=\"line\">  <span class=\"attr\">bindIp:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\"><span class=\"attr\">processManagement:</span></span><br><span class=\"line\">  <span class=\"attr\">fork:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">replication:</span></span><br><span class=\"line\">  <span class=\"attr\">replSetName:</span> <span class=\"string\">rs0</span></span><br><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\">  <span class=\"attr\">keyFile:</span> <span class=\"string\">/mongodb/mongo.key</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建key文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl rand -<span class=\"built_in\">base64</span> 756 &gt; /mongodb/mongo.key</span><br><span class=\"line\"><span class=\"comment\"># 修改权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600 /mongodb/mongo.key</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>分别启动3个节点</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod -f /mongodb/mongo.conf</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化\">初始化</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>登录任意节点</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongosh 10.1.2.26:27017</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>初始化复制集</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 必须切换到admin数据库</span></span><br><span class=\"line\"><span class=\"built_in\">test</span>&gt; use admin</span><br><span class=\"line\">switched to db admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化</span></span><br><span class=\"line\">admin&gt; rs.initiate(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: <span class=\"string\">&quot;rs0&quot;</span>,</span><br><span class=\"line\">    members: [</span><br><span class=\"line\">      &#123; _id : 0, host : <span class=\"string\">&quot;10.1.2.26&quot;</span> &#125;,</span><br><span class=\"line\">      &#123; _id : 1, host : <span class=\"string\">&quot;10.1.2.142&quot;</span> &#125;,</span><br><span class=\"line\">      &#123; _id : 2, host : <span class=\"string\">&quot;10.1.2.41&quot;</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看谁是主节点</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看谁是主节点，可以看到此时主节点是 10.1.2.26</span></span><br><span class=\"line\">&gt; rs.<span class=\"function\"><span class=\"title\">isMaster</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  topologyVersion: &#123;   <span class=\"comment\"># 拓扑版本，包含进程 ID 和计数器。</span></span><br><span class=\"line\">    processId: ObjectId(<span class=\"string\">&#x27;660a1cdf2e7a827807cac6f9&#x27;</span>),  <span class=\"comment\"># 进程 ID</span></span><br><span class=\"line\">    counter: Long(<span class=\"string\">&#x27;6&#x27;</span>)   <span class=\"comment\"># 计数器，用于标识拓扑版本</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  hosts: [ <span class=\"string\">&#x27;10.1.2.26:27017&#x27;</span>, <span class=\"string\">&#x27;10.1.2.142:27017&#x27;</span>, <span class=\"string\">&#x27;10.1.2.41:27017&#x27;</span> ], <span class=\"comment\"># 复制集中所有成员的主机和端口号列表。</span></span><br><span class=\"line\">  setName: <span class=\"string\">&#x27;rs0&#x27;</span>,    <span class=\"comment\"># 复制集的名称</span></span><br><span class=\"line\">  setVersion: 1,     <span class=\"comment\"># 复制集的版本号</span></span><br><span class=\"line\">  ismaster: <span class=\"literal\">true</span>,    <span class=\"comment\"># 当前节点是否为主节点</span></span><br><span class=\"line\">  secondary: <span class=\"literal\">false</span>,  <span class=\"comment\"># 当前节点是否为从节点</span></span><br><span class=\"line\">  primary: <span class=\"string\">&#x27;10.1.2.26:27017&#x27;</span>, <span class=\"comment\"># 主节点的主机名和端口号</span></span><br><span class=\"line\">  me: <span class=\"string\">&#x27;10.1.2.26:27017&#x27;</span>,      <span class=\"comment\"># 当前节点的主机名和端口号</span></span><br><span class=\"line\">  electionId: ObjectId(<span class=\"string\">&#x27;7fffffff0000000000000001&#x27;</span>), <span class=\"comment\"># 选举 ID</span></span><br><span class=\"line\">  lastWrite: &#123; <span class=\"comment\"># 最后一次写入操作的时间信息</span></span><br><span class=\"line\">    opTime: &#123; ts: Timestamp(&#123; t: 1711939636, i: 7 &#125;), t: Long(<span class=\"string\">&#x27;1&#x27;</span>) &#125;, <span class=\"comment\"># 操作时间戳</span></span><br><span class=\"line\">    lastWriteDate: ISODate(<span class=\"string\">&#x27;2024-04-01T02:47:16.000Z&#x27;</span>),               <span class=\"comment\"># 最后一次写入操作的时间</span></span><br><span class=\"line\">    majorityOpTime: &#123; ts: Timestamp(&#123; t: 1711939636, i: 7 &#125;), t: Long(<span class=\"string\">&#x27;1&#x27;</span>) &#125;, <span class=\"comment\"># 大多数写操作的时间戳</span></span><br><span class=\"line\">    majorityWriteDate: ISODate(<span class=\"string\">&#x27;2024-04-01T02:47:16.000Z&#x27;</span>)                    <span class=\"comment\"># 大多数写操作的时间</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  maxBsonObjectSize: 16777216,                    <span class=\"comment\"># 最大 BSON 对象大小</span></span><br><span class=\"line\">  maxMessageSizeBytes: 48000000,                  <span class=\"comment\"># 最大消息大小(以字节为单位）)</span></span><br><span class=\"line\">  maxWriteBatchSize: 100000,                      <span class=\"comment\"># 最大写批次大小</span></span><br><span class=\"line\">  localTime: ISODate(<span class=\"string\">&#x27;2024-04-01T02:47:20.408Z&#x27;</span>), <span class=\"comment\"># 本地时间</span></span><br><span class=\"line\">  logicalSessionTimeoutMinutes: 30,               <span class=\"comment\"># 登录超时时间(以分钟为单位)</span></span><br><span class=\"line\">  connectionId: 7,                                <span class=\"comment\"># 连接 ID</span></span><br><span class=\"line\">  minWireVersion: 0,                              <span class=\"comment\"># 最小Wire版本</span></span><br><span class=\"line\">  maxWireVersion: 21,                             <span class=\"comment\"># 最大Wire版本</span></span><br><span class=\"line\">  readOnly: <span class=\"literal\">false</span>,                                <span class=\"comment\"># 当前节点是否为只读节点</span></span><br><span class=\"line\">  ok: 1,                                          <span class=\"comment\"># 操作是否成功</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;$clusterTime&#x27;</span>: &#123;                               <span class=\"comment\"># 集群时间</span></span><br><span class=\"line\">    clusterTime: Timestamp(&#123; t: 1711939636, i: 7 &#125;), <span class=\"comment\"># 集群时间戳</span></span><br><span class=\"line\">    signature: &#123;   <span class=\"comment\"># 签名信息</span></span><br><span class=\"line\">      <span class=\"built_in\">hash</span>: Binary.createFromBase64(<span class=\"string\">&#x27;OOXSWapWStZk2n4cyJ7jdBS87do=&#x27;</span>, 0), <span class=\"comment\"># 签名哈希</span></span><br><span class=\"line\">      keyId: Long(<span class=\"string\">&#x27;7352724745051176965&#x27;</span>) <span class=\"comment\"># 密钥 ID</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  operationTime: Timestamp(&#123; t: 1711939636, i: 7 &#125;), <span class=\"comment\"># 操作时间戳</span></span><br><span class=\"line\">  isWritablePrimary: <span class=\"literal\">true</span> <span class=\"comment\"># 当前主节点是否可写</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看集群状态</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rs.status()</span><br><span class=\"line\"><span class=\"comment\"># 这里只列出节点的信息</span></span><br><span class=\"line\">…………………………</span><br><span class=\"line\">members: [   <span class=\"comment\"># 复制集成员列表</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      _id: 0, <span class=\"comment\"># 节点 ID</span></span><br><span class=\"line\">      name: <span class=\"string\">&#x27;10.1.2.26:27017&#x27;</span>, <span class=\"comment\"># 节点主机名和端口号</span></span><br><span class=\"line\">      health: 1, <span class=\"comment\"># 节点健康状态，这里是 1，表示健康</span></span><br><span class=\"line\">      state: 1, <span class=\"comment\"># 节点状态，这里是 1，表示主节点</span></span><br><span class=\"line\">      stateStr: <span class=\"string\">&#x27;PRIMARY&#x27;</span>, <span class=\"comment\"># 节点状态字符串</span></span><br><span class=\"line\">      <span class=\"built_in\">uptime</span>: 88366, <span class=\"comment\"># 节点运行时间</span></span><br><span class=\"line\">      optime: &#123; ts: Timestamp(&#123; t: 1712044133, i: 1 &#125;), t: Long(<span class=\"string\">&#x27;5&#x27;</span>) &#125;, <span class=\"comment\"># 节点操作时间戳</span></span><br><span class=\"line\">      optimeDate: ISODate(<span class=\"string\">&#x27;2024-04-02T07:48:53.000Z&#x27;</span>), <span class=\"comment\"># 节点操作时间</span></span><br><span class=\"line\">      lastAppliedWallTime: ISODate(<span class=\"string\">&#x27;2024-04-02T07:48:53.125Z&#x27;</span>), <span class=\"comment\"># 节点最后应用时间</span></span><br><span class=\"line\">      lastDurableWallTime: ISODate(<span class=\"string\">&#x27;2024-04-02T07:48:53.125Z&#x27;</span>), <span class=\"comment\"># 节点最后持久化时间</span></span><br><span class=\"line\">      syncSourceHost: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\"># 同步源主机名</span></span><br><span class=\"line\">      syncSourceId: -1, <span class=\"comment\"># 同步源节点 ID</span></span><br><span class=\"line\">      infoMessage: <span class=\"string\">&#x27;Could not find member to sync from&#x27;</span>, <span class=\"comment\"># 节点信息消息</span></span><br><span class=\"line\">      electionTime: Timestamp(&#123; t: 1712044063, i: 1 &#125;), <span class=\"comment\"># 选举时间戳</span></span><br><span class=\"line\">      electionDate: ISODate(<span class=\"string\">&#x27;2024-04-02T07:47:43.000Z&#x27;</span>), <span class=\"comment\"># 选举时间</span></span><br><span class=\"line\">      configVersion: 4, <span class=\"comment\"># 配置版本</span></span><br><span class=\"line\">      configTerm: 5, <span class=\"comment\"># 选举任期</span></span><br><span class=\"line\">      self: <span class=\"literal\">true</span>, <span class=\"comment\"># 是否为主节点</span></span><br><span class=\"line\">      lastHeartbeatMessage: <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\"># 节点心跳消息</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      _id: 1,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;10.1.2.142:27017&#x27;</span>,</span><br><span class=\"line\">      health: 1,</span><br><span class=\"line\">      state: 2, <span class=\"comment\"># 节点状态，这里是 2，表示从节点</span></span><br><span class=\"line\">      stateStr: <span class=\"string\">&#x27;SECONDARY&#x27;</span>,</span><br><span class=\"line\">      <span class=\"built_in\">uptime</span>: 88363,</span><br><span class=\"line\">      optime: &#123; ts: Timestamp(&#123; t: 1712044133, i: 1 &#125;), t: Long(<span class=\"string\">&#x27;5&#x27;</span>) &#125;,</span><br><span class=\"line\">      optimeDurable: &#123; ts: Timestamp(&#123; t: 1712044133, i: 1 &#125;), t: Long(<span class=\"string\">&#x27;5&#x27;</span>) &#125;,</span><br><span class=\"line\">      optimeDate: ISODate(<span class=\"string\">&#x27;2024-04-02T07:48:53.000Z&#x27;</span>),</span><br><span class=\"line\">      optimeDurableDate: ISODate(<span class=\"string\">&#x27;2024-04-02T07:48:53.000Z&#x27;</span>),</span><br><span class=\"line\">      lastAppliedWallTime: ISODate(<span class=\"string\">&#x27;2024-04-02T07:48:53.125Z&#x27;</span>),</span><br><span class=\"line\">      lastDurableWallTime: ISODate(<span class=\"string\">&#x27;2024-04-02T07:48:53.125Z&#x27;</span>),</span><br><span class=\"line\">      lastHeartbeat: ISODate(<span class=\"string\">&#x27;2024-04-02T07:48:53.140Z&#x27;</span>), <span class=\"comment\"># 最后一次心跳时间</span></span><br><span class=\"line\">      lastHeartbeatRecv: ISODate(<span class=\"string\">&#x27;2024-04-02T07:48:53.655Z&#x27;</span>), <span class=\"comment\"># 最后一次接收心跳时间</span></span><br><span class=\"line\">      pingMs: Long(<span class=\"string\">&#x27;0&#x27;</span>), <span class=\"comment\"># 节点心跳间隔时间</span></span><br><span class=\"line\">      lastHeartbeatMessage: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\"># 节点心跳消息</span></span><br><span class=\"line\">      syncSourceHost: <span class=\"string\">&#x27;10.1.2.26:27017&#x27;</span>, <span class=\"comment\"># 同步源主机名</span></span><br><span class=\"line\">      syncSourceId: 0, <span class=\"comment\"># 同步源节点 ID</span></span><br><span class=\"line\">      infoMessage: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\"># 节点信息消息</span></span><br><span class=\"line\">      configVersion: 4, <span class=\"comment\"># 配置版本</span></span><br><span class=\"line\">      configTerm: 5 <span class=\"comment\"># 选举任期</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      _id: 2,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;10.1.2.41:27017&#x27;</span>,</span><br><span class=\"line\">      health: 0, <span class=\"comment\"># 节点健康状态，这里是0，表示节点不可达，因为该节点的mongo服务被关掉了，这里只是为了展示不同的状态</span></span><br><span class=\"line\">      state: 8, <span class=\"comment\"># 节点状态，这里是8，表示不可达</span></span><br><span class=\"line\">      stateStr: <span class=\"string\">&#x27;(not reachable/healthy)&#x27;</span>, <span class=\"comment\"># 节点状态字符串，提示节点不可达</span></span><br><span class=\"line\">      <span class=\"built_in\">uptime</span>: 0,</span><br><span class=\"line\">      optime: &#123; ts: Timestamp(&#123; t: 0, i: 0 &#125;), t: Long(<span class=\"string\">&#x27;-1&#x27;</span>) &#125;,</span><br><span class=\"line\">      optimeDurable: &#123; ts: Timestamp(&#123; t: 0, i: 0 &#125;), t: Long(<span class=\"string\">&#x27;-1&#x27;</span>) &#125;,</span><br><span class=\"line\">      optimeDate: ISODate(<span class=\"string\">&#x27;1970-01-01T00:00:00.000Z&#x27;</span>),</span><br><span class=\"line\">      optimeDurableDate: ISODate(<span class=\"string\">&#x27;1970-01-01T00:00:00.000Z&#x27;</span>),</span><br><span class=\"line\">      lastAppliedWallTime: ISODate(<span class=\"string\">&#x27;2024-04-02T07:47:23.818Z&#x27;</span>),</span><br><span class=\"line\">      lastDurableWallTime: ISODate(<span class=\"string\">&#x27;2024-04-02T07:47:23.818Z&#x27;</span>),</span><br><span class=\"line\">      lastHeartbeat: ISODate(<span class=\"string\">&#x27;2024-04-02T07:48:53.163Z&#x27;</span>),</span><br><span class=\"line\">      lastHeartbeatRecv: ISODate(<span class=\"string\">&#x27;2024-04-02T07:47:32.215Z&#x27;</span>),</span><br><span class=\"line\">      pingMs: Long(<span class=\"string\">&#x27;0&#x27;</span>),</span><br><span class=\"line\">      lastHeartbeatMessage: <span class=\"string\">&#x27;Error connecting to 10.1.2.41:27017 :: caused by :: onInvoke :: caused by :: Connection refused&#x27;</span>, <span class=\"comment\"># 节点心跳消息，这里是连接失败</span></span><br><span class=\"line\">      syncSourceHost: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      syncSourceId: -1,</span><br><span class=\"line\">      infoMessage: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      configVersion: 4,</span><br><span class=\"line\">      configTerm: 4</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">………………………………</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>state的值及对应的含义<br>\n0: Startup - 成员正在启动。<br>\n1: Primary - 成员是主副本集节点。可以接收写入操作。每个副本集有且仅有一个主节点。<br>\n2: Secondary - 成员是从副本集节点。复制主节点的数据变更。<br>\n3: Recovering - 成员已经接收到新的数据，但还无法提供读或投票服务。此状态通常是短暂的。<br>\n4: Fatal - 成员发生了不可恢复的错误，已停止接收和复制数据。人工干预需要重启成员或者副本集。<br>\n5: Startup2 - 成员正在初始化副本集的内部数据结构。<br>\n6: Unknown - 因为与此成员的同步被打断，导致此成员状态未知。<br>\n7: Arbiter - 成员是仲裁者。<br>\n8: Down - 这个成员目前不能到达。<br>\n9: Rollback - 这个成员正在滚动回数据以达到一致的状态。<br>\n10: Removed - 这个成员已经从副本集中删除。</p>\n</blockquote>\n<h2 id=\"授权\">授权</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建用户</p>\n</li>\n</ul>\n<blockquote>\n<p>授权后需要重新登录或进行认证后才能继续操作</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录主节点</span></span><br><span class=\"line\">rs0 [direct: primary] <span class=\"built_in\">test</span>&gt; use admin</span><br><span class=\"line\">switched to db admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">rs0 [direct: primary] admin&gt; db.createUser(&#123;</span><br><span class=\"line\"> user: <span class=\"string\">&quot;user&quot;</span>,</span><br><span class=\"line\"> <span class=\"built_in\">pwd</span>: <span class=\"string\">&quot;password&quot;</span>,</span><br><span class=\"line\"> roles: [</span><br><span class=\"line\">  &#123; role: <span class=\"string\">&quot;clusterAdmin&quot;</span>, db: <span class=\"string\">&quot;admin&quot;</span> &#125; ,</span><br><span class=\"line\">  &#123; role: <span class=\"string\">&quot;userAdminAnyDatabase&quot;</span>, db: <span class=\"string\">&quot;admin&quot;</span>&#125;,</span><br><span class=\"line\">  &#123; role: <span class=\"string\">&quot;dbAdminAnyDatabase&quot;</span>, db: <span class=\"string\">&quot;admin&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; role: <span class=\"string\">&quot;readWriteAnyDatabase&quot;</span>, db: <span class=\"string\">&quot;admin&quot;</span>&#125;</span><br><span class=\"line\"> ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"登录\">登录</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>方法1，连接的同时认证</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认登录test数据库</span></span><br><span class=\"line\">mongosh 10.1.2.26:27017 -u user -p password --authenticationDatabase admin</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017/test?authSource=admin&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集群连接，推荐，会自动登录到主节点</span></span><br><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>方法2，先连接，再认证</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongosh 10.1.2.26:27017</span><br><span class=\"line\">&gt; use admin</span><br><span class=\"line\">switched to db admin</span><br><span class=\"line\">&gt; db.auth(<span class=\"string\">&quot;user&quot;</span>,<span class=\"string\">&quot;password&quot;</span>)</span><br><span class=\"line\">&#123; ok: 1 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集群连接，推荐，会自动登录到主节点</span></span><br><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&quot;</span></span><br><span class=\"line\">&gt; use admin</span><br><span class=\"line\">switched to db admin</span><br><span class=\"line\">&gt; db.auth(<span class=\"string\">&quot;user&quot;</span>,<span class=\"string\">&quot;password&quot;</span>)</span><br><span class=\"line\">&#123; ok: 1 &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看用户信息\">查看用户信息</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先要切换到 admin 数据库</span></span><br><span class=\"line\">rs0 [direct: primary] admin&gt; db.system.users.find()</span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: <span class=\"string\">&#x27;admin.user&#x27;</span>,</span><br><span class=\"line\">    userId: UUID(<span class=\"string\">&#x27;19dcd146-6872-41fe-8e39-46bb98b9db5c&#x27;</span>),</span><br><span class=\"line\">    user: <span class=\"string\">&#x27;user&#x27;</span>,</span><br><span class=\"line\">    db: <span class=\"string\">&#x27;admin&#x27;</span>,</span><br><span class=\"line\">    credentials: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;SCRAM-SHA-1&#x27;</span>: &#123;</span><br><span class=\"line\">        iterationCount: 10000,</span><br><span class=\"line\">        salt: <span class=\"string\">&#x27;DLOOhoEKeG2RKfW8hU4caw==&#x27;</span>,</span><br><span class=\"line\">        storedKey: <span class=\"string\">&#x27;ohQOJeAS3XWUwlFJAGduuiUJptc=&#x27;</span>,</span><br><span class=\"line\">        serverKey: <span class=\"string\">&#x27;rDjqq/nF3awasdaPr2ocJskm7p0=&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&#x27;SCRAM-SHA-256&#x27;</span>: &#123;</span><br><span class=\"line\">        iterationCount: 15000,</span><br><span class=\"line\">        salt: <span class=\"string\">&#x27;6YpcJH2pcL3yC726rpIq6VWSQLSV68i+oqURkw==&#x27;</span>,</span><br><span class=\"line\">        storedKey: <span class=\"string\">&#x27;1nIijUrLAL0lQZ6++O0cxM3VbsprdwRQucVFYkDQWbA=&#x27;</span>,</span><br><span class=\"line\">        serverKey: <span class=\"string\">&#x27;nk8TKbK19zLaD7wJn+991euF9ILE08iPopmJ8YAAqfQ=&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    roles: [</span><br><span class=\"line\">      &#123; role: <span class=\"string\">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class=\"string\">&#x27;admin&#x27;</span> &#125;,</span><br><span class=\"line\">      &#123; role: <span class=\"string\">&#x27;clusterAdmin&#x27;</span>, db: <span class=\"string\">&#x27;admin&#x27;</span> &#125;,</span><br><span class=\"line\">      &#123; role: <span class=\"string\">&#x27;dbAdminAnyDatabase&#x27;</span>, db: <span class=\"string\">&#x27;admin&#x27;</span> &#125;,</span><br><span class=\"line\">      &#123; role: <span class=\"string\">&#x27;readWriteAnyDatabase&#x27;</span>, db: <span class=\"string\">&#x27;admin&#x27;</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">rs0 [direct: primary] admin&gt; show <span class=\"built_in\">users</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: <span class=\"string\">&#x27;admin.user&#x27;</span>,</span><br><span class=\"line\">    userId: UUID(<span class=\"string\">&#x27;19dcd146-6872-41fe-8e39-46bb98b9db5c&#x27;</span>),</span><br><span class=\"line\">    user: <span class=\"string\">&#x27;user&#x27;</span>,</span><br><span class=\"line\">    db: <span class=\"string\">&#x27;admin&#x27;</span>,</span><br><span class=\"line\">    roles: [</span><br><span class=\"line\">      &#123; role: <span class=\"string\">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class=\"string\">&#x27;admin&#x27;</span> &#125;,</span><br><span class=\"line\">      &#123; role: <span class=\"string\">&#x27;clusterAdmin&#x27;</span>, db: <span class=\"string\">&#x27;admin&#x27;</span> &#125;,</span><br><span class=\"line\">      &#123; role: <span class=\"string\">&#x27;dbAdminAnyDatabase&#x27;</span>, db: <span class=\"string\">&#x27;admin&#x27;</span> &#125;,</span><br><span class=\"line\">      &#123; role: <span class=\"string\">&#x27;readWriteAnyDatabase&#x27;</span>, db: <span class=\"string\">&#x27;admin&#x27;</span> &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    mechanisms: [ <span class=\"string\">&#x27;SCRAM-SHA-1&#x27;</span>, <span class=\"string\">&#x27;SCRAM-SHA-256&#x27;</span> ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"开启从库读取数据的权限\">开启从库读取数据的权限</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用当前最新版<code>mongosh-2.2.2</code>连接从库时，默认就支持读取数据，其默认的<code>readPreference</code>为<code>primaryPreferred</code>。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果使用之前的版本连接从库时，默认是不能读取数据的，需要手工开启</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提示非主节点，不能查询数据，</span></span><br><span class=\"line\">rs0 [direct: secondary] <span class=\"built_in\">test</span>&gt; show <span class=\"built_in\">users</span></span><br><span class=\"line\">MongoServerError[NotPrimaryNoSecondaryOk]: not primary - consider using db.getMongo().setReadPref() or readPreference <span class=\"keyword\">in</span> the connection string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 早期版本是运行 rs.secondaryOk()，不过现在提示已经不推荐了</span></span><br><span class=\"line\">rs0 [direct: secondary] <span class=\"built_in\">test</span>&gt; rs.secondaryOk()</span><br><span class=\"line\">DeprecationWarning: .setSecondaryOk() is deprecated. Use .setReadPref(<span class=\"string\">&quot;primaryPreferred&quot;</span>) instead</span><br><span class=\"line\">Setting <span class=\"built_in\">read</span> preference from <span class=\"string\">&quot;primary&quot;</span> to <span class=\"string\">&quot;primaryPreferred&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>全局设置<code>readPreference</code>，对本次链接都有效</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启从库读取数据权限</span></span><br><span class=\"line\">rs0 [direct: secondary] <span class=\"built_in\">test</span>&gt; db.getMongo().setReadPref(<span class=\"string\">&quot;primaryPreferred&quot;</span>)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>也可以在链接参数中指定<code>readPreference</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单节点连接</span></span><br><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://user:password@10.1.2.142:27017/test?authSource=admin&amp;readPreference=primaryPreferred&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集群连接</span></span><br><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&amp;readPreference=primaryPreferred&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>可以在查询时指定<code>readPreference</code>，只针对当前查询，对后续查询无效</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0 [direct: secondary] admin&gt; db.system.users.find().readPref(<span class=\"string\">&quot;secondary&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"readPreference\">readPreference</h2>\n<p>readPreference决定使用哪一类节点（主或从节点）来满足正在发起的读请求。可选值包括：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>primary</code>：默认值，只读主节点的数据。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>primaryPreferred</code>：优先读主节点的数据，如果主节点不可用，则读从节点的数据。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>secondary</code>：只读从节点的数据。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>secondaryPreferred</code>：优先读从节点的数据，如果从节点不可用，则读主节点的数据。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>nearest</code>：优先读距离最近的节点的数据。</p>\n</li>\n</ul>\n<blockquote>\n<p>指定 <code>readPreference</code> 时应注意高可用问题。例如将 <code>readPreference</code> 指定 <code>primary</code>，则发生故障转移不存在 <code>primary</code> 期间将没有节点可读。如果业务允许，则应选择 <code>primaryPreferred</code>；</p>\n</blockquote>\n<h2 id=\"Tag\">Tag</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>集群中节点的标签，用于选择节点</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>readPreference</code> 只能控制使用一类（主或从节点）节点。<code>Tag</code> 则可以将节点选择控制到一个或几个节点。</p>\n</li>\n<li class=\"lvl-2\">\n<p>为节点添加<code>Tag</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 必须在主节点下才能修改配置</span></span><br><span class=\"line\">conf = rs.conf()</span><br><span class=\"line\">conf.members[0].tags = &#123; purpose: <span class=\"string\">&quot;online&quot;</span> &#125;</span><br><span class=\"line\">conf.members[1].tags = &#123; purpose: <span class=\"string\">&quot;online&quot;</span> &#125;</span><br><span class=\"line\">conf.members[2].tags = &#123; purpose: <span class=\"string\">&quot;analyse&quot;</span>&#125;</span><br><span class=\"line\">rs.reconfig(conf)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>全局指定<code>Tag</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0 [direct: primary] admin&gt; db.getMongo().setReadPref(<span class=\"string\">&quot;primaryPreferred&quot;</span>, [ &#123;purpose: <span class=\"string\">&quot;online&quot;</span>&#125; ])</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在链接参数中指定<code>Tag</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&amp;readPreference=primaryPreferred&amp;readPreferenceTags=purpose:online&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在查询时指定<code>Tag</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0 [direct: secondary] admin&gt; db.system.users.find().readPref(<span class=\"string\">&quot;secondary&quot;</span>, [ &#123;purpose: <span class=\"string\">&quot;analyse&quot;</span>&#125; ])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意，`Tag`只能用于从节点，主节点不支持。</span></span><br><span class=\"line\">rs0 [direct: primary] admin&gt; db.system.users.find().readPref(<span class=\"string\">&quot;primary&quot;</span>, [ &#123;purpose: <span class=\"string\">&quot;online&quot;</span>&#125; ])</span><br><span class=\"line\">MongoInvalidArgumentError: Primary <span class=\"built_in\">read</span> preference cannot be combined with tags</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用 Tag 时应注意高可用问题，如果只有一个节点拥有一个特定 Tag，则在这个节点失效时将无节点可读。这在有时候是期望的结果，有时候不是。例如：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">如果报表使用的节点失效，即使不生成报表，通常也不希望将报表负载转移到其他节点上，此时只有一个节点有报表 Tag 是合理的选择；</li>\n<li class=\"lvl-4\">如果线上节点失效，通常希望有替代节点，所以应该保持多个节点有同样的 Tag；</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>Tag 有时需要与优先级、选举权综合考虑。例如做报表的节点通常不会希望它成为主节点，则优先级应为 0。</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过<code>rs.conf()</code>可以查看复制集中各个节点的Tag信息</p>\n</li>\n</ul>\n<h2 id=\"优先级-priority-与-选举权-vote\">优先级(priority) 与 选举权(vote)</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>当 <code>Priority</code> 等于 0 时，它不可以被复制集选举为主，<code>Priority</code> 的值越高，则被选举为主的概率更大。</p>\n</li>\n<li class=\"lvl-2\">\n<p>当 <code>Vote</code> 等于 0 时，它不可以参与选举投票，此时该节点的 <code>Priority</code> 也必须为 0，即它也不能被选举为主。</p>\n</li>\n<li class=\"lvl-2\">\n<p>由于一个复制集中最多只有7个投票成员，因此多出来的成员则必须将其vote属性值设置为0，即这些成员将无法参与投票。</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过<code>rs.conf()</code>可以查看复制集中各个节点的相关配置</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rs.<span class=\"function\"><span class=\"title\">conf</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _id: <span class=\"string\">&#x27;rs0&#x27;</span>,                <span class=\"comment\"># 复制集名称</span></span><br><span class=\"line\">  version: 2,                <span class=\"comment\"># 配置版本号，即conf被修改的次数，每次更改配置时，版本号都会递增。</span></span><br><span class=\"line\">  term: 3,                   <span class=\"comment\"># 选举轮次（election term）。在进行选举时，MongoDB 使用一个单调递增的 term 值来标识选举的周期。这个值会随着选举的进行而增加。</span></span><br><span class=\"line\">  members: [                 <span class=\"comment\"># 成员数组，包含了复制集中的所有成员的详细配置信息。</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      _id: 0,                <span class=\"comment\"># 成员的唯一标识符，从0开始递增。</span></span><br><span class=\"line\">      host: <span class=\"string\">&#x27;10.1.2.26:27017&#x27;</span>, <span class=\"comment\"># 节点ip+port</span></span><br><span class=\"line\">      arbiterOnly: <span class=\"literal\">false</span>,    <span class=\"comment\"># 是否为仲裁节点</span></span><br><span class=\"line\">      buildIndexes: <span class=\"literal\">true</span>,    <span class=\"comment\"># 是否在此节点上创建索引</span></span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,         <span class=\"comment\"># 是否为隐藏节点，即不被客户端发现。</span></span><br><span class=\"line\">      priority: 1,           <span class=\"comment\"># 选举优先级，值越大优先级越高，0表示不能被选举为主节点</span></span><br><span class=\"line\">      tags: &#123; purpose: <span class=\"string\">&#x27;online&#x27;</span> &#125;, <span class=\"comment\"># Tag</span></span><br><span class=\"line\">      secondaryDelaySecs: Long(<span class=\"string\">&#x27;0&#x27;</span>), <span class=\"comment\"># 如果存在延迟复制，表示复制延迟的时间量（以秒为单位），如果为0则表示不是延迟节点。</span></span><br><span class=\"line\">      votes: 1               <span class=\"comment\"># 成员的投票数，大于0表示参与投票。</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  protocolVersion: Long(<span class=\"string\">&#x27;1&#x27;</span>),                         <span class=\"comment\"># 复制集使用的协议版本。</span></span><br><span class=\"line\">  writeConcernMajorityJournalDefault: <span class=\"literal\">true</span>,           <span class=\"comment\"># 是否在写入操作中默认启用大多数写关注和日志记录</span></span><br><span class=\"line\">  settings: &#123;                                         <span class=\"comment\"># 复制集的全局设置，包含以下属性：</span></span><br><span class=\"line\">    chainingAllowed: <span class=\"literal\">true</span>,                            <span class=\"comment\"># 是否允许从其他成员读取数据。</span></span><br><span class=\"line\">    heartbeatIntervalMillis: 2000,                    <span class=\"comment\"># 心跳间隔，即成员之间检测状态的时间间隔。</span></span><br><span class=\"line\">    heartbeatTimeoutSecs: 10,                         <span class=\"comment\"># 心跳超时时间，如果在此时间内未收到心跳，则认为成员不可用。</span></span><br><span class=\"line\">    electionTimeoutMillis: 10000,                     <span class=\"comment\"># 选举超时时间，即进行选举的时间间隔。</span></span><br><span class=\"line\">    catchUpTimeoutMillis: -1,                         <span class=\"comment\"># 成员在追赶操作时的超时时间。</span></span><br><span class=\"line\">    catchUpTakeoverDelayMillis: 30000,                <span class=\"comment\"># 在追赶操作期间，发生主节点故障时，延迟节点接管主节点之前的延迟时间。</span></span><br><span class=\"line\">    getLastErrorModes: &#123;&#125;,                            <span class=\"comment\"># 指定写操作的确认模式。</span></span><br><span class=\"line\">    getLastErrorDefaults: &#123; w: 1, wtimeout: 0 &#125;,      <span class=\"comment\"># 指定写操作的默认确认参数。</span></span><br><span class=\"line\">    replicaSetId: ObjectId(<span class=\"string\">&#x27;660a20282e7a827807cac803&#x27;</span>) <span class=\"comment\"># 复制集的唯一标识符。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    ………………</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>修改节点优先级</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 必须在主节点执行</span></span><br><span class=\"line\">cfg = rs.conf()</span><br><span class=\"line\"><span class=\"comment\"># 保存成功后，由于当前节点的优先级最高，所以集群会发起重新选举将当前节点设置为主节点</span></span><br><span class=\"line\">cfg.members[2].priority = 10</span><br><span class=\"line\">rs.reconfig(cfg)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>设置隐藏节点</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 必须在主节点执行</span></span><br><span class=\"line\">cfg = rs.conf()</span><br><span class=\"line\">cfg.members[2].priority = 0</span><br><span class=\"line\">cfg.members[2].hidden = <span class=\"literal\">true</span></span><br><span class=\"line\">rs.reconfig(cfg)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>配置延时节点</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg = rs.conf()</span><br><span class=\"line\">cfg.members[2].priority = 0</span><br><span class=\"line\">cfg.members[2].hidden = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#延迟60秒</span></span><br><span class=\"line\">cfg.members[2].secondaryDelaySecs = 60</span><br><span class=\"line\">rs.reconfig(cfg)</span><br></pre></td></tr></table></figure>\n<h2 id=\"读关注-readConcern\">读关注(readConcern)</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在 <code>readPreference</code> 选择了指定的节点后，<code>readConcern</code> 决定这个节点上的数据哪些是可读的</p>\n</li>\n<li class=\"lvl-2\">\n<p>类似于关系数据库的隔离级别，可选值包括：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- available：读取所有可用的数据;</span><br><span class=\"line\">- <span class=\"built_in\">local</span>：读取所有可用且属于当前分片的数据。在复制集中 <span class=\"built_in\">local</span> 和 available 是没有区别的，两者仅在分片集群中才有区别;</span><br><span class=\"line\">- majority：读取在大多数节点上提交完成的数据;</span><br><span class=\"line\">- linearizable：可线性化读取文档，仅支持从主节点读。只读取大多数节点确认过的数据。和 majority 最大差别是保证绝对的操作线性顺序;</span><br><span class=\"line\">- snapshot：读取最近快照中的数据，仅可用于多文档事务，隔离级别最高;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>主节点读取数据时默认 <code>readConcern</code> 是 <code>local</code>，从节点读取数据时默认 <code>readConcern</code> 是 <code>available</code></p>\n</li>\n</ul>\n<div class=\"tips\">\n<p><em><strong>分片集群中 local 和 available 的区别</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">如果一个 chunk x 正在从 shard1 向 shard2 迁移；</li>\n<li class=\"lvl-2\">整个迁移过程中 chunk x 中的部分数据会在 shard1 和 shard2 中同时存在，但源分片 shard1仍然是chunk x 的负责方：\n<ul class=\"lvl-3\">\n<li class=\"lvl-4\">所有对 chunk x 的读写操作仍然进入 shard1；</li>\n<li class=\"lvl-4\">config 中记录的信息 chunk x 仍然属于 shard1；</li>\n</ul>\n</li>\n<li class=\"lvl-2\">此时如果读 shard2，则会体现出 local 和 available 的区别：\n<ul class=\"lvl-3\">\n<li class=\"lvl-4\">local：只取应该由 shard2 负责的数据（不包括 x）；</li>\n<li class=\"lvl-4\">available：shard2 上有什么就读什么（包括 x）；</li>\n</ul>\n</li>\n</ul>\n</div>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>示例</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.find().readConcern(<span class=\"string\">&#x27;local&#x27;</span>)</span><br><span class=\"line\">db.user.find().readConcern(<span class=\"string\">&#x27;majority&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 读取从节点上已经被大多数节点提交完成的数据</span></span><br><span class=\"line\">db.user.find().readPref(<span class=\"string\">&quot;secondary&quot;</span>).readConcern(<span class=\"string\">&quot;majority&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"写关注-writeConcern\">写关注(writeConcern)</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>writeConcern</code> 决定一个写操作落到多少个节点上才算成功。</p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB支持客户端灵活配置写入策略（writeConcern），以满足不同场景的需求。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; w: &lt;value&gt;, j: &lt;boolean&gt;, wtimeout: &lt;number&gt; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">w: 数据写入到number个节点才向用客户端确认</span><br><span class=\"line\">  - &#123;w: 0&#125; 对客户端的写入不需要发送任何确认，适用于性能要求高，但不关注正确性的场景</span><br><span class=\"line\">  - &#123;w: 1&#125; 默认的writeConcern，数据写入到Primary就向客户端发送确认</span><br><span class=\"line\">  - &#123;w: <span class=\"string\">&quot;majority&quot;</span>&#125; 数据写入到副本集大多数成员后向客户端发送确认，适用于对数据安全性要求比较高的场景，该选项会降低写入性能</span><br><span class=\"line\"></span><br><span class=\"line\">j: 写入操作的journal持久化后才向客户端确认</span><br><span class=\"line\">  - 默认为&#123;j: <span class=\"literal\">false</span>&#125;，如果要求Primary写入持久化了才向客户端确认，则指定该选项为<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">wtimeout: 写入超时时间，仅w的值大于1时有效。</span><br><span class=\"line\">  - 当指定&#123;w: &#125;时，数据需要成功写入number个节点才算成功，如果写入过程中有节点故障，可能导致这个条件一直不能满足，从而一直不能向客户端发送确认结果，针对这种情况，客户端可设置wtimeout选项来指定超时时间，当写入过程持续超过该时间仍未结束，则认为写入失败。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通常重要数据应用 <code>&#123;w: &quot;majority&quot;&#125;</code>，普通数据可以应用 <code>&#123;w: 1&#125;</code> 以确保最佳性能。</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 等等大多数节点写入成功</span></span><br><span class=\"line\">db.user.insertOne(&#123;name:<span class=\"string\">&quot;李四&quot;</span>&#125;,&#123;writeConcern:&#123;w:<span class=\"string\">&quot;majority&quot;</span>&#125;&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 等待3个节点写入成功，若超时则写入失败</span></span><br><span class=\"line\">db.user.insertOne(&#123;name:<span class=\"string\">&quot;小明&quot;</span>&#125;,&#123;writeConcern:&#123;w:3,wtimeout:3000&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"优雅的重启复制集\">优雅的重启复制集</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>逐个重启复制集里所有的Secondary节点</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭服务</span></span><br><span class=\"line\">mongod --shutdown -f /mongodb/mongo.conf</span><br><span class=\"line\"><span class=\"comment\"># 重启启动</span></span><br><span class=\"line\">mongod -f /mongodb/mongo.conf</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>对Primary发送rs.stepDown()命令，等待primary降级为Secondary</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0 [primary] <span class=\"built_in\">local</span>&gt; rs.<span class=\"function\"><span class=\"title\">stepDown</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ok: 1,</span><br><span class=\"line\">  <span class=\"string\">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class=\"line\">    clusterTime: Timestamp(&#123; t: 1712046433, i: 1 &#125;),</span><br><span class=\"line\">    signature: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">hash</span>: Binary.createFromBase64(<span class=\"string\">&#x27;dklQyCuunlYhWYkKuNtiNcGNom8=&#x27;</span>, 0),</span><br><span class=\"line\">      keyId: Long(<span class=\"string\">&#x27;7352724745051176965&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  operationTime: Timestamp(&#123; t: 1712046433, i: 1 &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>重启降级后的Primary</p>\n</li>\n</ul>\n<h2 id=\"oplog\">oplog</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在复制集架构中，主节点与备节点之间是通过oplog来同步数据的，这里的oplog是一个特殊的固定集合，当主节点上的一个写操作完成后，会向oplog集合写入一条对应的日志，而备节点则通过这个oplog不断拉取到新的日志，在本地进行回放以达到数据同步的目的。<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/d2K4tD.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>查询oplog</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use <span class=\"built_in\">local</span></span><br><span class=\"line\"><span class=\"comment\"># 查询最近10条oplog，这里 $natural:-1 是按照时间降序排列</span></span><br><span class=\"line\">db.oplog.rs.find().<span class=\"built_in\">sort</span>(&#123;<span class=\"variable\">$natural</span>:-1&#125;).<span class=\"built_in\">limit</span>(10)</span><br><span class=\"line\"><span class=\"comment\"># 查询最近60分钟oplog</span></span><br><span class=\"line\">db.oplog.rs.find(&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;ts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$gt</span>&quot;</span>: Timestamp(Math.floor(new Date().getTime() / 1000) - 60*60, 1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).<span class=\"built_in\">sort</span>(&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;<span class=\"variable\">$natural</span>&quot;</span>: -1</span><br><span class=\"line\">&#125;).<span class=\"built_in\">limit</span>(10)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    op: <span class=\"string\">&#x27;u&#x27;</span>,</span><br><span class=\"line\">    ns: <span class=\"string\">&#x27;config.system.sessions&#x27;</span>,</span><br><span class=\"line\">    ui: UUID(<span class=\"string\">&#x27;4f90005d-a546-4d59-971d-7954c3acd0f8&#x27;</span>),</span><br><span class=\"line\">    o: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;$v&#x27;</span>: 2,</span><br><span class=\"line\">      diff: &#123; u: &#123; lastUse: ISODate(<span class=\"string\">&#x27;2024-04-02T08:31:10.148Z&#x27;</span>) &#125; &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    o2: &#123;</span><br><span class=\"line\">      _id: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">id</span>: UUID(<span class=\"string\">&#x27;3f881052-ac21-4677-816c-33934322fbd6&#x27;</span>),</span><br><span class=\"line\">        uid: Binary.createFromBase64(<span class=\"string\">&#x27;eOZyqfHfiVpfviPDWgAERmzNFnUp8UBdlWKN50Fv9fo=&#x27;</span>, 0)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ts: Timestamp(&#123; t: 1712046670, i: 1 &#125;),</span><br><span class=\"line\">    t: Long(<span class=\"string\">&#x27;6&#x27;</span>),</span><br><span class=\"line\">    v: Long(<span class=\"string\">&#x27;2&#x27;</span>),</span><br><span class=\"line\">    wall: ISODate(<span class=\"string\">&#x27;2024-04-02T08:31:10.148Z&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ts： 操作时间，当前timestamp + 计数器，计数器每秒都被重置</span><br><span class=\"line\">v：oplog版本信息</span><br><span class=\"line\">op：操作类型:</span><br><span class=\"line\">    i：插⼊操作</span><br><span class=\"line\">    u：更新操作</span><br><span class=\"line\">    d：删除操作</span><br><span class=\"line\">    c：执行命令（如createDatabase，dropDatabase）</span><br><span class=\"line\">    n：空操作，特殊用途</span><br><span class=\"line\">ns：操作针对的集合</span><br><span class=\"line\">o：操作内容</span><br><span class=\"line\">o2：操作查询条件，仅update操作包含该字段</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>oplog集合的大小默认为<code>min(磁盘可用空间*5%，50GB)</code>，可以通过如下命令修改</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将复制集成员的oplog大小修改为1G，这里单位是M</span></span><br><span class=\"line\">&gt; db.adminCommand(&#123;replSetResizeOplog: 1, size: 1024&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 查看oplog大小</span></span><br><span class=\"line\">&gt; use <span class=\"built_in\">local</span></span><br><span class=\"line\">&gt; db.oplog.rs.stats().maxSize/1024/1024</span><br><span class=\"line\">1024</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这里要注意每个节点的oplog大小都需要单独的配置，并且必须一致，否则有可能会出现同步失败的情况。</p>\n</li>\n<li class=\"lvl-2\">\n<p>查看当前节点的oplog的状态</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0 [primary] <span class=\"built_in\">test</span>&gt; rs.printReplicationInfo()</span><br><span class=\"line\">actual oplog size</span><br><span class=\"line\"><span class=\"string\">&#x27;1024 MB&#x27;</span></span><br><span class=\"line\">---</span><br><span class=\"line\">configured oplog size</span><br><span class=\"line\"><span class=\"string\">&#x27;1024 MB&#x27;</span></span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"built_in\">log</span> length start to end</span><br><span class=\"line\"><span class=\"string\">&#x27;112923 secs (31.37 hrs)&#x27;</span></span><br><span class=\"line\">---</span><br><span class=\"line\">oplog first event time</span><br><span class=\"line\"><span class=\"string\">&#x27;Mon Apr 01 2024 02:47:04 GMT+0000 (Coordinated Universal Time)&#x27;</span></span><br><span class=\"line\">---</span><br><span class=\"line\">oplog last event time</span><br><span class=\"line\"><span class=\"string\">&#x27;Tue Apr 02 2024 10:09:07 GMT+0000 (Coordinated Universal Time)&#x27;</span></span><br><span class=\"line\">---</span><br><span class=\"line\">now</span><br><span class=\"line\"><span class=\"string\">&#x27;Tue Apr 02 2024 10:09:08 GMT+0000 (Coordinated Universal Time)&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">actual oplog size：表示实际使用的 oplog 大小。Oplog 是一个 circurlar buffer，用于存储主节点上的操作日志。这个属性指示了 oplog 的当前大小。在示例中，oplog 大小为 <span class=\"string\">&#x27;1024 MB&#x27;</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">configured oplog size：表示配置的 oplog 大小。这是在配置复制集时指定的 oplog 大小。在示例中，配置的 oplog 大小也是 <span class=\"string\">&#x27;1024 MB&#x27;</span>，说明实际 oplog 大小与配置的 oplog 大小相匹配。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">log</span> length start to end：表示 oplog 的记录长度，从开始到结束的时间跨度。在示例中，oplog 记录了 <span class=\"string\">&#x27;112923 secs (31.37 hrs)&#x27;</span>，表示从 oplog 开始记录到结束的时间跨度为约 31.37 小时。</span><br><span class=\"line\"></span><br><span class=\"line\">oplog first event time：表示 oplog 记录的第一个事件的时间戳。在示例中，第一个事件的时间为 <span class=\"string\">&#x27;Mon Apr 01 2024 02:47:04 GMT+0000 (Coordinated Universal Time)&#x27;</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">oplog last event time：表示 oplog 记录的最后一个事件的时间戳。在示例中，最后一个事件的时间为 <span class=\"string\">&#x27;Tue Apr 02 2024 10:09:07 GMT+0000 (Coordinated Universal Time)&#x27;</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">now：表示当前时间。在示例中，当前时间为 <span class=\"string\">&#x27;Tue Apr 02 2024 10:09:08 GMT+0000 (Coordinated Universal Time)&#x27;</span>。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>以从节点视角查看oplog复制状态</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0 [primary] <span class=\"built_in\">local</span>&gt; rs.printSecondaryReplicationInfo()</span><br><span class=\"line\"><span class=\"built_in\">source</span>: 10.1.2.142:27017</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  syncedTo: <span class=\"string\">&#x27;Tue Apr 02 2024 10:10:07 GMT+0000 (Coordinated Universal Time)&#x27;</span>,</span><br><span class=\"line\">  replLag: <span class=\"string\">&#x27;0 secs (0 hrs) behind the primary &#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"built_in\">source</span>: 10.1.2.41:27017</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  syncedTo: <span class=\"string\">&#x27;Tue Apr 02 2024 10:10:07 GMT+0000 (Coordinated Universal Time)&#x27;</span>,</span><br><span class=\"line\">  replLag: <span class=\"string\">&#x27;0 secs (0 hrs) behind the primary &#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span>：从节点的主机名和端口号，即复制数据的来源节点。</span><br><span class=\"line\"></span><br><span class=\"line\">syncedTo：表示从节点已经复制到的最新操作的时间戳。它指示了从节点上数据的同步程度，即从节点已经复制了到主节点的哪个时间点的数据。在示例中，两个从节点的 syncedTo 时间戳都是 <span class=\"string\">&#x27;Tue Apr 02 2024 10:10:07 GMT+0000 (Coordinated Universal Time)&#x27;</span>，表示它们都已经与主节点同步到了相同的时间点。</span><br><span class=\"line\"></span><br><span class=\"line\">replLag：表示从节点与主节点之间的复制延迟。它显示了从节点当前落后于主节点的时间量，以秒和小时为单位。在示例中，两个从节点的 replLag 都是 <span class=\"string\">&#x27;0 secs (0 hrs) behind the primary&#x27;</span>，表示它们与主节点保持实时同步，没有任何复制延迟。</span><br></pre></td></tr></table></figure>\n<h2 id=\"既然oplog的大小有限制，新的数据会覆盖旧的数据，那么新加入的节点如何全量同步数据呢？\">既然oplog的大小有限制，新的数据会覆盖旧的数据，那么新加入的节点如何全量同步数据呢？</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>当MongoDB的从库节点需要进行数据同步时，会执行以下步骤：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">初始同步： 当一个新节点加入到副本集中时，它会执行初始同步以获取集合中的所有数据。初始同步会复制所有数据库的所有数据，包括系统数据库。之后，新节点会开始从oplog里获取更改历史，应用这些更改历史到数据，以保证与其他从库节点一致。注意，初始同步中的数据包括在新加入节点之前的数据以及新节点加入之后其他节点产生的新数据。</li>\n<li class=\"lvl-4\">oplog落后： 如果从库在初始同步执行期间不能及时获取oplog（例如，oplog的数据超出了大小限制并被覆盖，或者初次同步时间过长），新节点需要重新进行初始同步操作。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>这些步骤确保了MongoDB副本集的数据在所有节点间的一致性，尽管oplog有大小限制并且旧的内容会被新的操作覆盖。</p>\n</li>\n</ul>\n<h2 id=\"复制集相关操作\">复制集相关操作</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/manual/reference/method/js-replication/\">官方文档</a></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rs.add(“hostname:port”)</td>\n<td>为复制集新增节点</td>\n</tr>\n<tr>\n<td>rs.addArb(“hostname:port”)</td>\n<td>为复制集新增一个 arbiters</td>\n</tr>\n<tr>\n<td>rs.conf()</td>\n<td>返回复制集配置信息</td>\n</tr>\n<tr>\n<td>rs.config()</td>\n<td>同 rs.conf()</td>\n</tr>\n<tr>\n<td>rs.freeze(3600)</td>\n<td>防止当前节点在一段时间内选举成为主节点，如这里是3600秒，则当前节点在3600秒内不会选举成为主节点</td>\n</tr>\n<tr>\n<td>rs.help()</td>\n<td>返回 replica set 的命令帮助</td>\n</tr>\n<tr>\n<td>rs.initiate()</td>\n<td>初始化一个新的复制集</td>\n</tr>\n<tr>\n<td>rs.printReplicationInfo()</td>\n<td>以当前节点的视角返回复制的状态报告</td>\n</tr>\n<tr>\n<td>rs.printSecondaryReplicationInfo()</td>\n<td>以从节点的视角返回复制状态报告</td>\n</tr>\n<tr>\n<td>rs.reconfig()</td>\n<td>通过重新应用复制集配置来为复制集更新配置</td>\n</tr>\n<tr>\n<td>rs.remove(“hostname:port”)</td>\n<td>从复制集中移除一个节点</td>\n</tr>\n<tr>\n<td>rs.secondaryOk()</td>\n<td>为当前的连接设置从节点可读，该方法已经过时了，使用 db.getMongo().setReadPref() 代替</td>\n</tr>\n<tr>\n<td>rs.status()</td>\n<td>返回复制集状态信息</td>\n</tr>\n<tr>\n<td>rs.stepDown()</td>\n<td>让当前的 primary 变为从节点并触发新一轮的主节点选举</td>\n</tr>\n<tr>\n<td>rs.syncFrom(“hostname:port”)</td>\n<td>设置复制集节点从哪个节点处同步数据，将会覆盖默认选取逻辑</td>\n</tr>\n<tr>\n<td>rs.reconfigForPSASet()</td>\n<td>在主-从-仲裁器（PSA）副本集或正在更改为PSA架构的副本集上安全地执行一些重新配置更改。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"移除节点\">移除节点</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0 [primary] <span class=\"built_in\">local</span>&gt; rs.remove(<span class=\"string\">&quot;10.1.2.41:27017&quot;</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ok: 1,</span><br><span class=\"line\">  <span class=\"string\">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class=\"line\">    clusterTime: Timestamp(&#123; t: 1712049022, i: 1 &#125;),</span><br><span class=\"line\">    signature: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">hash</span>: Binary.createFromBase64(<span class=\"string\">&#x27;Qg3Ymzp3k+hhzaDo3jZQimc4WCI=&#x27;</span>, 0),</span><br><span class=\"line\">      keyId: Long(<span class=\"string\">&#x27;7352724745051176965&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  operationTime: Timestamp(&#123; t: 1712049022, i: 1 &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加仲裁节点\">添加仲裁节点</h3>\n<p><em><strong>当集群中的节点数<code>&gt;=3</code>时，无论是添加仲裁节点还是从节点都没有问题。</strong></em></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>上面删除了集群中的一个节点，此时集群中的节点说是2(一主一从)，此时如果主发生故障集群就没办法工作了，此时我们可以为其添加一个仲裁节点(只投票不存储数据)。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加仲裁节点，但是此时添加仲裁节点会报错</span></span><br><span class=\"line\">rs0 [primary] <span class=\"built_in\">local</span>&gt; rs.addArb(<span class=\"string\">&quot;10.1.2.41:27017&quot;</span>)</span><br><span class=\"line\">MongoServerError[NewReplicaSetConfigurationIncompatible]: Reconfig attempted to install a config that would change the implicit default write concern. Use the setDefaultRWConcern <span class=\"built_in\">command</span> to <span class=\"built_in\">set</span> a cluster-wide write concern and try the reconfig again.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 报错原因：由于默认的写关注为 majority，而当前节点中只有2个节点，没有办法确认“大多数”是多少了，所以我们需要修改写关注的设置</span></span><br><span class=\"line\"><span class=\"comment\"># 查询默认的读写关注</span></span><br><span class=\"line\">rs0 [primary] admin&gt; db.adminCommand(&#123;<span class=\"string\">&quot;getDefaultRWConcern&quot;</span> : 1&#125;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  defaultReadConcern: &#123; level: <span class=\"string\">&#x27;local&#x27;</span> &#125;,</span><br><span class=\"line\">  defaultWriteConcern: &#123; w: <span class=\"string\">&#x27;majority&#x27;</span>, wtimeout: 0 &#125;,</span><br><span class=\"line\">  updateOpTime: Timestamp(&#123; t: 1712050437, i: 1 &#125;),</span><br><span class=\"line\">  updateWallClockTime: ISODate(<span class=\"string\">&#x27;2024-04-02T09:15:04.462Z&#x27;</span>),</span><br><span class=\"line\">  defaultWriteConcernSource: <span class=\"string\">&#x27;global&#x27;</span>,</span><br><span class=\"line\">  defaultReadConcernSource: <span class=\"string\">&#x27;implicit&#x27;</span>,</span><br><span class=\"line\">  localUpdateWallClockTime: ISODate(<span class=\"string\">&#x27;2024-04-02T09:15:04.462Z&#x27;</span>),</span><br><span class=\"line\">  ok: 1,</span><br><span class=\"line\">  <span class=\"string\">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class=\"line\">    clusterTime: Timestamp(&#123; t: 1712109448, i: 1 &#125;),</span><br><span class=\"line\">    signature: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">hash</span>: Binary.createFromBase64(<span class=\"string\">&#x27;oUiR9xdXN4mzQqdz9IXHGdCmNto=&#x27;</span>, 0),</span><br><span class=\"line\">      keyId: Long(<span class=\"string\">&#x27;7352724745051176965&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  operationTime: Timestamp(&#123; t: 1712109448, i: 1 &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改默认写关注 defaultWriteConcern</span></span><br><span class=\"line\"><span class=\"comment\"># setDefaultRWConcern：用于指定设置默认读写关注级别（RW Concern）的操作。值为 1 表示执行设置操作。</span></span><br><span class=\"line\"><span class=\"comment\"># defaultWriteConcern：用于指定默认的写入关注级别。在这个例子中，写入关注级别被设置为 &#123; &quot;w&quot; : 2 &#125;，意味着在写入数据时，MongoDB 驱动程序会等待至少两个节点确认写入成功后才返回成功。其实这里设置为1也可以，表示写入主节点就返回成功。</span></span><br><span class=\"line\">rs0 [primary] <span class=\"built_in\">local</span>&gt; db.adminCommand( &#123;<span class=\"string\">&quot;setDefaultRWConcern&quot;</span> : 1, <span class=\"string\">&quot;defaultWriteConcern&quot;</span> : &#123; <span class=\"string\">&quot;w&quot;</span> : 2 &#125; &#125; )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  defaultReadConcern: &#123; level: <span class=\"string\">&#x27;local&#x27;</span> &#125;,</span><br><span class=\"line\">  defaultWriteConcern: &#123; w: 2, wtimeout: 0 &#125;,</span><br><span class=\"line\">  updateOpTime: Timestamp(&#123; t: 1712049370, i: 1 &#125;),</span><br><span class=\"line\">  updateWallClockTime: ISODate(<span class=\"string\">&#x27;2024-04-02T09:16:22.715Z&#x27;</span>),</span><br><span class=\"line\">  defaultWriteConcernSource: <span class=\"string\">&#x27;global&#x27;</span>,</span><br><span class=\"line\">  defaultReadConcernSource: <span class=\"string\">&#x27;implicit&#x27;</span>,</span><br><span class=\"line\">  localUpdateWallClockTime: ISODate(<span class=\"string\">&#x27;2024-04-02T09:16:22.726Z&#x27;</span>),</span><br><span class=\"line\">  ok: 1,</span><br><span class=\"line\">  <span class=\"string\">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class=\"line\">    clusterTime: Timestamp(&#123; t: 1712049382, i: 2 &#125;),</span><br><span class=\"line\">    signature: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">hash</span>: Binary.createFromBase64(<span class=\"string\">&#x27;04nzjl47CMumvguEzUq7RnY55+s=&#x27;</span>, 0),</span><br><span class=\"line\">      keyId: Long(<span class=\"string\">&#x27;7352724745051176965&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  operationTime: Timestamp(&#123; t: 1712049382, i: 2 &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次添加仲裁节点成功</span></span><br><span class=\"line\">rs0 [primary] <span class=\"built_in\">local</span>&gt; rs.addArb(<span class=\"string\">&quot;10.1.2.41:27017&quot;</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ok: 1,</span><br><span class=\"line\">  <span class=\"string\">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class=\"line\">    clusterTime: Timestamp(&#123; t: 1712049480, i: 1 &#125;),</span><br><span class=\"line\">    signature: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">hash</span>: Binary.createFromBase64(<span class=\"string\">&#x27;4q9s6mvT0boa6Q+vjKms8vnTR6Y=&#x27;</span>, 0),</span><br><span class=\"line\">      keyId: Long(<span class=\"string\">&#x27;7352724745051176965&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  operationTime: Timestamp(&#123; t: 1712049480, i: 1 &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时关闭主节点，就会看到另一个从节点成为主节点了</p>\n</li>\n</ul>\n<h3 id=\"添加新的节点\">添加新的节点</h3>\n<p><em><strong>当集群中的节点数<code>&gt;=3</code>时，无论是添加仲裁节点还是从节点都没有问题。</strong></em></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>如果当前集群中有两个节点(一主一从)，我们也可以不添加仲裁节点，而是直接添加一个新的从节点</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0 [primary] <span class=\"built_in\">test</span>&gt; rs.add(<span class=\"string\">&quot;10.1.2.41:27017&quot;</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ok: 1,</span><br><span class=\"line\">  <span class=\"string\">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class=\"line\">    clusterTime: Timestamp(&#123; t: 1712051880, i: 1 &#125;),</span><br><span class=\"line\">    signature: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">hash</span>: Binary.createFromBase64(<span class=\"string\">&#x27;DuuorhNH4MWqa4DHCifPzxcMN3I=&#x27;</span>, 0),</span><br><span class=\"line\">      keyId: Long(<span class=\"string\">&#x27;7352724745051176965&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  operationTime: Timestamp(&#123; t: 1712051880, i: 1 &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>当集群中只有一个主节点和一个仲裁节点时，此时若直接添加新的节点会报错</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rs0 [primary] <span class=\"built_in\">local</span>&gt; rs.add(<span class=\"string\">&quot;10.1.2.142:27017&quot;</span>)</span><br><span class=\"line\">MongoServerError[NewReplicaSetConfigurationIncompatible]: Rejecting reconfig <span class=\"built_in\">where</span> the new config has a PSA topology and the secondary is electable, but the old config contains only one writable node. Refer to https://docs.mongodb.com/manual/reference/method/rs.reconfigForPSASet/ <span class=\"keyword\">for</span> next steps on reconfiguring a PSA <span class=\"built_in\">set</span>.</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>根据给出的网址的提示，执行以下操作</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取当前配置</span></span><br><span class=\"line\">rs0 [primary] <span class=\"built_in\">test</span>&gt; cfg = rs.conf();</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _id: <span class=\"string\">&#x27;rs0&#x27;</span>,</span><br><span class=\"line\">  version: 7,</span><br><span class=\"line\">  term: 8,</span><br><span class=\"line\">  members: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      _id: 0,</span><br><span class=\"line\">      host: <span class=\"string\">&#x27;10.1.2.26:27017&#x27;</span>,</span><br><span class=\"line\">      arbiterOnly: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      buildIndexes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      priority: 1,</span><br><span class=\"line\">      tags: &#123; purpose: <span class=\"string\">&#x27;online&#x27;</span> &#125;,</span><br><span class=\"line\">      secondaryDelaySecs: Long(<span class=\"string\">&#x27;0&#x27;</span>),</span><br><span class=\"line\">      votes: 1</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      _id: 2,</span><br><span class=\"line\">      host: <span class=\"string\">&#x27;10.1.2.41:27017&#x27;</span>,</span><br><span class=\"line\">      arbiterOnly: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      buildIndexes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      priority: 0,</span><br><span class=\"line\">      tags: &#123;&#125;,</span><br><span class=\"line\">      secondaryDelaySecs: Long(<span class=\"string\">&#x27;0&#x27;</span>),</span><br><span class=\"line\">      votes: 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  protocolVersion: Long(<span class=\"string\">&#x27;1&#x27;</span>),</span><br><span class=\"line\">  writeConcernMajorityJournalDefault: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  settings: &#123;</span><br><span class=\"line\">    chainingAllowed: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    heartbeatIntervalMillis: 2000,</span><br><span class=\"line\">    heartbeatTimeoutSecs: 10,</span><br><span class=\"line\">    electionTimeoutMillis: 10000,</span><br><span class=\"line\">    catchUpTimeoutMillis: -1,</span><br><span class=\"line\">    catchUpTakeoverDelayMillis: 30000,</span><br><span class=\"line\">    getLastErrorModes: &#123;&#125;,</span><br><span class=\"line\">    getLastErrorDefaults: &#123; w: 1, wtimeout: 0 &#125;,</span><br><span class=\"line\">    replicaSetId: ObjectId(<span class=\"string\">&#x27;660a20282e7a827807cac803&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改配置，增加新的节点信息</span></span><br><span class=\"line\">rs0 [primary] <span class=\"built_in\">test</span>&gt; cfg[<span class=\"string\">&quot;members&quot;</span>] = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      _id: 0,</span><br><span class=\"line\">      host: <span class=\"string\">&#x27;10.1.2.26:27017&#x27;</span>,</span><br><span class=\"line\">      arbiterOnly: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      buildIndexes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      priority: 1,</span><br><span class=\"line\">      tags: &#123; purpose: <span class=\"string\">&#x27;online&#x27;</span> &#125;,</span><br><span class=\"line\">      secondaryDelaySecs: Long(<span class=\"string\">&#x27;0&#x27;</span>),</span><br><span class=\"line\">      votes: 1</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      _id: 1,</span><br><span class=\"line\">      host: <span class=\"string\">&#x27;10.1.2.142:27017&#x27;</span>,   <span class=\"comment\"># 新的节点</span></span><br><span class=\"line\">      arbiterOnly: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      buildIndexes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      priority: 1,</span><br><span class=\"line\">      tags: &#123; purpose: <span class=\"string\">&#x27;online&#x27;</span> &#125;,</span><br><span class=\"line\">      secondaryDelaySecs: Long(<span class=\"string\">&#x27;0&#x27;</span>),</span><br><span class=\"line\">      votes: 1</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      _id: 2,</span><br><span class=\"line\">      host: <span class=\"string\">&#x27;10.1.2.41:27017&#x27;</span>,</span><br><span class=\"line\">      arbiterOnly: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      buildIndexes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      priority: 0,</span><br><span class=\"line\">      tags: &#123;&#125;,</span><br><span class=\"line\">      secondaryDelaySecs: Long(<span class=\"string\">&#x27;0&#x27;</span>),</span><br><span class=\"line\">      votes: 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行配置</span></span><br><span class=\"line\">rs0 [primary] <span class=\"built_in\">test</span>&gt; rs.reconfigForPSASet(1, cfg);</span><br><span class=\"line\">Running first reconfig to give member at index 1 &#123; votes: 1, priority: 0 &#125;</span><br><span class=\"line\">Running second reconfig to give member at index 1 &#123; priority: 1 &#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ok: 1,</span><br><span class=\"line\">  <span class=\"string\">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class=\"line\">    clusterTime: Timestamp(&#123; t: 1712051518, i: 2 &#125;),</span><br><span class=\"line\">    signature: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">hash</span>: Binary.createFromBase64(<span class=\"string\">&#x27;+tgYZKeeGP0KGt3YVpDCAjW3xTc=&#x27;</span>, 0),</span><br><span class=\"line\">      keyId: Long(<span class=\"string\">&#x27;7352724745051176965&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  operationTime: Timestamp(&#123; t: 1712051518, i: 2 &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看新节点的状态</span></span><br><span class=\"line\">rs0 [primary] <span class=\"built_in\">test</span>&gt; rs.status()</span><br><span class=\"line\">………………</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      _id: 1,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;10.1.2.142:27017&#x27;</span>,</span><br><span class=\"line\">      health: 1,</span><br><span class=\"line\">      state: 2,</span><br><span class=\"line\">      stateStr: <span class=\"string\">&#x27;SECONDARY&#x27;</span>,</span><br><span class=\"line\">      <span class=\"built_in\">uptime</span>: 87,</span><br><span class=\"line\">      optime: &#123; ts: Timestamp(&#123; t: 1712051597, i: 1 &#125;), t: Long(<span class=\"string\">&#x27;8&#x27;</span>) &#125;,</span><br><span class=\"line\">      optimeDurable: &#123; ts: Timestamp(&#123; t: 1712051597, i: 1 &#125;), t: Long(<span class=\"string\">&#x27;8&#x27;</span>) &#125;,</span><br><span class=\"line\">      optimeDate: ISODate(<span class=\"string\">&#x27;2024-04-02T09:53:17.000Z&#x27;</span>),</span><br><span class=\"line\">      optimeDurableDate: ISODate(<span class=\"string\">&#x27;2024-04-02T09:53:17.000Z&#x27;</span>),</span><br><span class=\"line\">      lastAppliedWallTime: ISODate(<span class=\"string\">&#x27;2024-04-02T09:53:17.058Z&#x27;</span>),</span><br><span class=\"line\">      lastDurableWallTime: ISODate(<span class=\"string\">&#x27;2024-04-02T09:53:17.058Z&#x27;</span>),</span><br><span class=\"line\">      lastHeartbeat: ISODate(<span class=\"string\">&#x27;2024-04-02T09:53:24.535Z&#x27;</span>),</span><br><span class=\"line\">      lastHeartbeatRecv: ISODate(<span class=\"string\">&#x27;2024-04-02T09:53:24.535Z&#x27;</span>),</span><br><span class=\"line\">      pingMs: Long(<span class=\"string\">&#x27;0&#x27;</span>),</span><br><span class=\"line\">      lastHeartbeatMessage: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      syncSourceHost: <span class=\"string\">&#x27;10.1.2.26:27017&#x27;</span>,</span><br><span class=\"line\">      syncSourceId: 0,</span><br><span class=\"line\">      infoMessage: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      configVersion: 10,</span><br><span class=\"line\">      configTerm: 8</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">………………</span><br></pre></td></tr></table></figure>\n<h2 id=\"故障转移\">故障转移</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>集群组建完成后，集群内的各个节点会开启心跳响应定时器，默认每隔2秒<code>(heartbeatIntervalMillis)</code>会向其它成员发起心跳。</p>\n</li>\n<li class=\"lvl-2\">\n<p>同时各成员节点还会启动一个选举超时检测定时器，默认每隔10秒<code>(electionTimeoutMillis)</code>会发起一轮<code>选举调度</code>。</p>\n</li>\n<li class=\"lvl-2\">\n<p>当主节点心跳响应成功，则当前节点就会取消上一次的<code>选举调度</code>，即会重置选举超时检测定时器的倒计时</p>\n</li>\n<li class=\"lvl-2\">\n<p>若主节点心跳响应失败，并且在<code>选举超时检测</code>的时间内仍然没有响应成功，则当前节点就会发起一轮<code>选举调度</code></p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB的复制集选举使用<a href=\"https://raft.github.io/\">Raft算法</a>来实现，选举成功的必要条件是大多数投票节点存活。简单来说就是如果超过半数的节点都给我投票了，那么我就会成为主节点。</p>\n</li>\n</ul>\n<h3 id=\"为什么推荐集群连接的方式？\">为什么推荐集群连接的方式？</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>考虑这样的场景，如果我连接主节点并且插入10000条说，若此时主节点宕机，则客户端会立刻停止操作。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只连接主节点</span></span><br><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017/test?authSource=admin&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行插入</span></span><br><span class=\"line\">rs0 [direct: primary] <span class=\"built_in\">test</span>&gt; <span class=\"keyword\">for</span>(i=0;i&lt;10000;i++)&#123;db.emp.insertOne(&#123;name:<span class=\"string\">&quot;test&quot;</span>+i&#125;)&#125;</span><br><span class=\"line\"><span class=\"comment\"># 此时关闭主节点的mongo服务，则客户端会立刻给出报错信息</span></span><br><span class=\"line\">MongoServerError[NotWritablePrimary]: not primary</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>若连接采用集群的方式连接，则不会中断操作，其原因就是集群连接方式会自动完成故障转移</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 插入操作没有被中断</span></span><br><span class=\"line\">rs0 [primary] <span class=\"built_in\">test</span>&gt; <span class=\"keyword\">for</span>(i=0;i&lt;10000;i++)&#123;db.emp.insertOne(&#123;name:<span class=\"string\">&quot;test&quot;</span>+i&#125;)&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  acknowledged: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  insertedId: ObjectId(<span class=\"string\">&#x27;660cce829918b823661879c6&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 查询结果正确</span></span><br><span class=\"line\">rs0 [primary] <span class=\"built_in\">test</span>&gt; db.emp.countDocuments()</span><br><span class=\"line\">10000</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这里有一点需要注意，当你创建集群时使用的是各个节点的内网ip地址，则客户端必须可以访问这些内网ip才能通过集群连接，否则会出现连接失败的情况。因为通过集群连接的方式，实际上是会先在集群内部判断出主节点的ip地址返回给客户端，然后客户端再通过这个主节点ip访问主节点。</p>\n</li>\n</ul>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">在复制集发生主备节点切换的情况下，会出现短暂的无主节点阶段，此时无法接受业务写操作。</li>\n<li class=\"lvl-2\">早期的版本中需要添加<code>retryWrites</code>参数，现在已经默认开启了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&amp;retryWrites=true&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h2 id=\"SpringBoot集成MongoDB集群\">SpringBoot集成MongoDB集群</h2>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">mongodb:</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">mongodb://user:password@127.0.0.1:27040,127.0.0.1:27041,127.0.0.1:27042/mytest?authSource=admin&amp;readPreference=primaryPreferred</span></span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍Linux下MongoDB7.0复制集的安装和使用 MongoDB官方文档 本文基于CentOS8(x86_64) Mongodb分片集群搭建参看MongoDB 分片集群搭建，虽然是基于4.4版本的，但是安装方式差别不大，只是配置文件中个别的属性名称发生了变化。 复制集节点类型 一个复制集最多支持50个节点，且做多只能有7个节点参与投票，节点类型分为Primary、Secondary与Arbiter。 Primary：主节点，其接收所有的写请求，然后把修改同步到所有 Secondary 节点。一个复制集只能有一个主节点，当主节点挂掉后，其他节点会重新选举出来一个主节点。 Secondary：备节点，与主节点保持同样的数据集。当主节点挂掉时，参与竞选主节点。分为以下三个不同类型： Hidden = false：正常的只读节点，是否可选为主，是否可投票，取决于 Priority，Vote 的值； Hidden = true：隐藏节点，对客户端不可见， 可以参与选举，但是 Priority 必须为 0，即不能被提升为主。 由于隐藏节点不会接受业务访问，因此可通过隐藏节点做一些数据备份、离线计算的任务，这并不会影响整个复制集。 Delayed ：延迟节点，必须同时具备隐藏节点和Priority=0的特性，会延迟一定的时间（secondaryDelaySecs 配置决定）从上游复制增量，常用于快速回滚场景。 Arbiter：仲裁节点，只用于参与选举投票，本身不承载任何数据，只作为投票角色。比如你部署了2个节点的复制集，1个 Primary，1个Secondary，任意节点宕机，复制集将不能提供服务了（无法选出Primary），这时可以给复制集添加⼀个 Arbiter节点，即使有节点宕机，仍能选出Primary。 Arbiter本身不存储数据，是非常轻量级的服务，当复制集成员为偶数时，最好加入⼀个Arbiter节点，以提升复制集可用性。 搭建基于3台机器的复制集 12310.1.2.2610.1.2.14210.1.2.41 mongod.conf配置文件，需要创建好相关目录 123456789101112131415systemLog: destination: file path: /mongodb/log/mongodb.log logAppend: truestorage: dbPath: /mongodb/datanet: bindIp: 0.0.0.0 port: 27017processManagement: fork: truereplication: replSetName: rs0security: keyFile: /mongodb/mongo.key 创建key文件 123openssl rand -base64 756 &gt; /mongodb/mongo.key# 修改权限chmod 600 /mongodb/mongo.key 分别启动3个节点 1mongod -f /mongodb/mongo.conf 初始化 登录任意节点 1mongosh 10.1.2.26:27017 初始化复制集 123456789101112131415# 必须切换到admin数据库test&gt; use adminswitched to db admin# 初始化admin&gt; rs.initiate( &#123; _id: &quot;rs0&quot;, members: [ &#123; _id : 0, host : &quot;10.1.2.26&quot; &#125;, &#123; _id : 1, host : &quot;10.1.2.142&quot; &#125;, &#123; _id : 2, host : &quot;10.1.2.41&quot; &#125; ] &#125;); 查看谁是主节点 1234567891011121314151617181920212223242526272829303132333435363738394041# 查看谁是主节点，可以看到此时主节点是 10.1.2.26&gt; rs.isMaster()&#123; topologyVersion: &#123; # 拓扑版本，包含进程 ID 和计数器。 processId: ObjectId(&#x27;660a1cdf2e7a827807cac6f9&#x27;), # 进程 ID counter: Long(&#x27;6&#x27;) # 计数器，用于标识拓扑版本 &#125;, hosts: [ &#x27;10.1.2.26:27017&#x27;, &#x27;10.1.2.142:27017&#x27;, &#x27;10.1.2.41:27017&#x27; ], # 复制集中所有成员的主机和端口号列表。 setName: &#x27;rs0&#x27;, # 复制集的名称 setVersion: 1, # 复制集的版本号 ismaster: true, # 当前节点是否为主节点 secondary: false, # 当前节点是否为从节点 primary: &#x27;10.1.2.26:27017&#x27;, # 主节点的主机名和端口号 me: &#x27;10.1.2.26:27017&#x27;, # 当前节点的主机名和端口号 electionId: ObjectId(&#x27;7fffffff0000000000000001&#x27;), # 选举 ID lastWrite: &#123; # 最后一次写入操作的时间信息 opTime: &#123; ts: Timestamp(&#123; t: 1711939636, i: 7 &#125;), t: Long(&#x27;1&#x27;) &#125;, # 操作时间戳 lastWriteDate: ISODate(&#x27;2024-04-01T02:47:16.000Z&#x27;), # 最后一次写入操作的时间 majorityOpTime: &#123; ts: Timestamp(&#123; t: 1711939636, i: 7 &#125;), t: Long(&#x27;1&#x27;) &#125;, # 大多数写操作的时间戳 majorityWriteDate: ISODate(&#x27;2024-04-01T02:47:16.000Z&#x27;) # 大多数写操作的时间 &#125;, maxBsonObjectSize: 16777216, # 最大 BSON 对象大小 maxMessageSizeBytes: 48000000, # 最大消息大小(以字节为单位）) maxWriteBatchSize: 100000, # 最大写批次大小 localTime: ISODate(&#x27;2024-04-01T02:47:20.408Z&#x27;), # 本地时间 logicalSessionTimeoutMinutes: 30, # 登录超时时间(以分钟为单位) connectionId: 7, # 连接 ID minWireVersion: 0, # 最小Wire版本 maxWireVersion: 21, # 最大Wire版本 readOnly: false, # 当前节点是否为只读节点 ok: 1, # 操作是否成功 &#x27;$clusterTime&#x27;: &#123; # 集群时间 clusterTime: Timestamp(&#123; t: 1711939636, i: 7 &#125;), # 集群时间戳 signature: &#123; # 签名信息 hash: Binary.createFromBase64(&#x27;OOXSWapWStZk2n4cyJ7jdBS87do=&#x27;, 0), # 签名哈希 keyId: Long(&#x27;7352724745051176965&#x27;) # 密钥 ID &#125; &#125;, operationTime: Timestamp(&#123; t: 1711939636, i: 7 &#125;), # 操作时间戳 isWritablePrimary: true # 当前主节点是否可写&#125; 查看集群状态 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&gt; rs.status()# 这里只列出节点的信息…………………………members: [ # 复制集成员列表 &#123; _id: 0, # 节点 ID name: &#x27;10.1.2.26:27017&#x27;, # 节点主机名和端口号 health: 1, # 节点健康状态，这里是 1，表示健康 state: 1, # 节点状态，这里是 1，表示主节点 stateStr: &#x27;PRIMARY&#x27;, # 节点状态字符串 uptime: 88366, # 节点运行时间 optime: &#123; ts: Timestamp(&#123; t: 1712044133, i: 1 &#125;), t: Long(&#x27;5&#x27;) &#125;, # 节点操作时间戳 optimeDate: ISODate(&#x27;2024-04-02T07:48:53.000Z&#x27;), # 节点操作时间 lastAppliedWallTime: ISODate(&#x27;2024-04-02T07:48:53.125Z&#x27;), # 节点最后应用时间 lastDurableWallTime: ISODate(&#x27;2024-04-02T07:48:53.125Z&#x27;), # 节点最后持久化时间 syncSourceHost: &#x27;&#x27;, # 同步源主机名 syncSourceId: -1, # 同步源节点 ID infoMessage: &#x27;Could not find member to sync from&#x27;, # 节点信息消息 electionTime: Timestamp(&#123; t: 1712044063, i: 1 &#125;), # 选举时间戳 electionDate: ISODate(&#x27;2024-04-02T07:47:43.000Z&#x27;), # 选举时间 configVersion: 4, # 配置版本 configTerm: 5, # 选举任期 self: true, # 是否为主节点 lastHeartbeatMessage: &#x27;&#x27; # 节点心跳消息 &#125;, &#123; _id: 1, name: &#x27;10.1.2.142:27017&#x27;, health: 1, state: 2, # 节点状态，这里是 2，表示从节点 stateStr: &#x27;SECONDARY&#x27;, uptime: 88363, optime: &#123; ts: Timestamp(&#123; t: 1712044133, i: 1 &#125;), t: Long(&#x27;5&#x27;) &#125;, optimeDurable: &#123; ts: Timestamp(&#123; t: 1712044133, i: 1 &#125;), t: Long(&#x27;5&#x27;) &#125;, optimeDate: ISODate(&#x27;2024-04-02T07:48:53.000Z&#x27;), optimeDurableDate: ISODate(&#x27;2024-04-02T07:48:53.000Z&#x27;), lastAppliedWallTime: ISODate(&#x27;2024-04-02T07:48:53.125Z&#x27;), lastDurableWallTime: ISODate(&#x27;2024-04-02T07:48:53.125Z&#x27;), lastHeartbeat: ISODate(&#x27;2024-04-02T07:48:53.140Z&#x27;), # 最后一次心跳时间 lastHeartbeatRecv: ISODate(&#x27;2024-04-02T07:48:53.655Z&#x27;), # 最后一次接收心跳时间 pingMs: Long(&#x27;0&#x27;), # 节点心跳间隔时间 lastHeartbeatMessage: &#x27;&#x27;, # 节点心跳消息 syncSourceHost: &#x27;10.1.2.26:27017&#x27;, # 同步源主机名 syncSourceId: 0, # 同步源节点 ID infoMessage: &#x27;&#x27;, # 节点信息消息 configVersion: 4, # 配置版本 configTerm: 5 # 选举任期 &#125;, &#123; _id: 2, name: &#x27;10.1.2.41:27017&#x27;, health: 0, # 节点健康状态，这里是0，表示节点不可达，因为该节点的mongo服务被关掉了，这里只是为了展示不同的状态 state: 8, # 节点状态，这里是8，表示不可达 stateStr: &#x27;(not reachable/healthy)&#x27;, # 节点状态字符串，提示节点不可达 uptime: 0, optime: &#123; ts: Timestamp(&#123; t: 0, i: 0 &#125;), t: Long(&#x27;-1&#x27;) &#125;, optimeDurable: &#123; ts: Timestamp(&#123; t: 0, i: 0 &#125;), t: Long(&#x27;-1&#x27;) &#125;, optimeDate: ISODate(&#x27;1970-01-01T00:00:00.000Z&#x27;), optimeDurableDate: ISODate(&#x27;1970-01-01T00:00:00.000Z&#x27;), lastAppliedWallTime: ISODate(&#x27;2024-04-02T07:47:23.818Z&#x27;), lastDurableWallTime: ISODate(&#x27;2024-04-02T07:47:23.818Z&#x27;), lastHeartbeat: ISODate(&#x27;2024-04-02T07:48:53.163Z&#x27;), lastHeartbeatRecv: ISODate(&#x27;2024-04-02T07:47:32.215Z&#x27;), pingMs: Long(&#x27;0&#x27;), lastHeartbeatMessage: &#x27;Error connecting to 10.1.2.41:27017 :: caused by :: onInvoke :: caused by :: Connection refused&#x27;, # 节点心跳消息，这里是连接失败 syncSourceHost: &#x27;&#x27;, syncSourceId: -1, infoMessage: &#x27;&#x27;, configVersion: 4, configTerm: 4 &#125; ]……………………………… state的值及对应的含义 0: Startup - 成员正在启动。 1: Primary - 成员是主副本集节点。可以接收写入操作。每个副本集有且仅有一个主节点。 2: Secondary - 成员是从副本集节点。复制主节点的数据变更。 3: Recovering - 成员已经接收到新的数据，但还无法提供读或投票服务。此状态通常是短暂的。 4: Fatal - 成员发生了不可恢复的错误，已停止接收和复制数据。人工干预需要重启成员或者副本集。 5: Startup2 - 成员正在初始化副本集的内部数据结构。 6: Unknown - 因为与此成员的同步被打断，导致此成员状态未知。 7: Arbiter - 成员是仲裁者。 8: Down - 这个成员目前不能到达。 9: Rollback - 这个成员正在滚动回数据以达到一致的状态。 10: Removed - 这个成员已经从副本集中删除。 授权 创建用户 授权后需要重新登录或进行认证后才能继续操作 123456789101112131415# 登录主节点rs0 [direct: primary] test&gt; use adminswitched to db admin# 创建用户rs0 [direct: primary] admin&gt; db.createUser(&#123; user: &quot;user&quot;, pwd: &quot;password&quot;, roles: [ &#123; role: &quot;clusterAdmin&quot;, db: &quot;admin&quot; &#125; , &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot;&#125;, &#123; role: &quot;dbAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125;, &#123; role: &quot;readWriteAnyDatabase&quot;, db: &quot;admin&quot;&#125; ]&#125;); 登录 方法1，连接的同时认证 1234567# 默认登录test数据库mongosh 10.1.2.26:27017 -u user -p password --authenticationDatabase admin# 或者mongosh &quot;mongodb://user:password@10.1.2.26:27017/test?authSource=admin&quot;# 集群连接，推荐，会自动登录到主节点mongosh &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&quot; 方法2，先连接，再认证 123456789101112mongosh 10.1.2.26:27017&gt; use adminswitched to db admin&gt; db.auth(&quot;user&quot;,&quot;password&quot;)&#123; ok: 1 &#125;# 集群连接，推荐，会自动登录到主节点mongosh &quot;mongodb://10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&quot;&gt; use adminswitched to db admin&gt; db.auth(&quot;user&quot;,&quot;password&quot;)&#123; ok: 1 &#125; 查看用户信息 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# 先要切换到 admin 数据库rs0 [direct: primary] admin&gt; db.system.users.find()[ &#123; _id: &#x27;admin.user&#x27;, userId: UUID(&#x27;19dcd146-6872-41fe-8e39-46bb98b9db5c&#x27;), user: &#x27;user&#x27;, db: &#x27;admin&#x27;, credentials: &#123; &#x27;SCRAM-SHA-1&#x27;: &#123; iterationCount: 10000, salt: &#x27;DLOOhoEKeG2RKfW8hU4caw==&#x27;, storedKey: &#x27;ohQOJeAS3XWUwlFJAGduuiUJptc=&#x27;, serverKey: &#x27;rDjqq/nF3awasdaPr2ocJskm7p0=&#x27; &#125;, &#x27;SCRAM-SHA-256&#x27;: &#123; iterationCount: 15000, salt: &#x27;6YpcJH2pcL3yC726rpIq6VWSQLSV68i+oqURkw==&#x27;, storedKey: &#x27;1nIijUrLAL0lQZ6++O0cxM3VbsprdwRQucVFYkDQWbA=&#x27;, serverKey: &#x27;nk8TKbK19zLaD7wJn+991euF9ILE08iPopmJ8YAAqfQ=&#x27; &#125; &#125;, roles: [ &#123; role: &#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;, &#123; role: &#x27;clusterAdmin&#x27;, db: &#x27;admin&#x27; &#125;, &#123; role: &#x27;dbAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;, &#123; role: &#x27;readWriteAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125; ] &#125;]rs0 [direct: primary] admin&gt; show users[ &#123; _id: &#x27;admin.user&#x27;, userId: UUID(&#x27;19dcd146-6872-41fe-8e39-46bb98b9db5c&#x27;), user: &#x27;user&#x27;, db: &#x27;admin&#x27;, roles: [ &#123; role: &#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;, &#123; role: &#x27;clusterAdmin&#x27;, db: &#x27;admin&#x27; &#125;, &#123; role: &#x27;dbAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;, &#123; role: &#x27;readWriteAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125; ], mechanisms: [ &#x27;SCRAM-SHA-1&#x27;, &#x27;SCRAM-SHA-256&#x27; ] &#125;] 开启从库读取数据的权限 使用当前最新版mongosh-2.2.2连接从库时，默认就支持读取数据，其默认的readPreference为primaryPreferred。 如果使用之前的版本连接从库时，默认是不能读取数据的，需要手工开启 12345678# 提示非主节点，不能查询数据，rs0 [direct: secondary] test&gt; show usersMongoServerError[NotPrimaryNoSecondaryOk]: not primary - consider using db.getMongo().setReadPref() or readPreference in the connection string# 早期版本是运行 rs.secondaryOk()，不过现在提示已经不推荐了rs0 [direct: secondary] test&gt; rs.secondaryOk()DeprecationWarning: .setSecondaryOk() is deprecated. Use .setReadPref(&quot;primaryPreferred&quot;) insteadSetting read preference from &quot;primary&quot; to &quot;primaryPreferred&quot; 全局设置readPreference，对本次链接都有效 12# 开启从库读取数据权限rs0 [direct: secondary] test&gt; db.getMongo().setReadPref(&quot;primaryPreferred&quot;) 也可以在链接参数中指定readPreference 12345# 单节点连接mongosh &quot;mongodb://user:password@10.1.2.142:27017/test?authSource=admin&amp;readPreference=primaryPreferred&quot;# 集群连接mongosh &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&amp;readPreference=primaryPreferred&quot; 可以在查询时指定readPreference，只针对当前查询，对后续查询无效 1rs0 [direct: secondary] admin&gt; db.system.users.find().readPref(&quot;secondary&quot;) readPreference readPreference决定使用哪一类节点（主或从节点）来满足正在发起的读请求。可选值包括： primary：默认值，只读主节点的数据。 primaryPreferred：优先读主节点的数据，如果主节点不可用，则读从节点的数据。 secondary：只读从节点的数据。 secondaryPreferred：优先读从节点的数据，如果从节点不可用，则读主节点的数据。 nearest：优先读距离最近的节点的数据。 指定 readPreference 时应注意高可用问题。例如将 readPreference 指定 primary，则发生故障转移不存在 primary 期间将没有节点可读。如果业务允许，则应选择 primaryPreferred； Tag 集群中节点的标签，用于选择节点 readPreference 只能控制使用一类（主或从节点）节点。Tag 则可以将节点选择控制到一个或几个节点。 为节点添加Tag 123456# 必须在主节点下才能修改配置conf = rs.conf()conf.members[0].tags = &#123; purpose: &quot;online&quot; &#125;conf.members[1].tags = &#123; purpose: &quot;online&quot; &#125;conf.members[2].tags = &#123; purpose: &quot;analyse&quot;&#125;rs.reconfig(conf) 全局指定Tag 1rs0 [direct: primary] admin&gt; db.getMongo().setReadPref(&quot;primaryPreferred&quot;, [ &#123;purpose: &quot;online&quot;&#125; ]) 在链接参数中指定Tag 1mongosh &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&amp;readPreference=primaryPreferred&amp;readPreferenceTags=purpose:online&quot; 在查询时指定Tag 12345rs0 [direct: secondary] admin&gt; db.system.users.find().readPref(&quot;secondary&quot;, [ &#123;purpose: &quot;analyse&quot;&#125; ])# 注意，`Tag`只能用于从节点，主节点不支持。rs0 [direct: primary] admin&gt; db.system.users.find().readPref(&quot;primary&quot;, [ &#123;purpose: &quot;online&quot;&#125; ])MongoInvalidArgumentError: Primary read preference cannot be combined with tags 使用 Tag 时应注意高可用问题，如果只有一个节点拥有一个特定 Tag，则在这个节点失效时将无节点可读。这在有时候是期望的结果，有时候不是。例如： 如果报表使用的节点失效，即使不生成报表，通常也不希望将报表负载转移到其他节点上，此时只有一个节点有报表 Tag 是合理的选择； 如果线上节点失效，通常希望有替代节点，所以应该保持多个节点有同样的 Tag； Tag 有时需要与优先级、选举权综合考虑。例如做报表的节点通常不会希望它成为主节点，则优先级应为 0。 通过rs.conf()可以查看复制集中各个节点的Tag信息 优先级(priority) 与 选举权(vote) 当 Priority 等于 0 时，它不可以被复制集选举为主，Priority 的值越高，则被选举为主的概率更大。 当 Vote 等于 0 时，它不可以参与选举投票，此时该节点的 Priority 也必须为 0，即它也不能被选举为主。 由于一个复制集中最多只有7个投票成员，因此多出来的成员则必须将其vote属性值设置为0，即这些成员将无法参与投票。 通过rs.conf()可以查看复制集中各个节点的相关配置 123456789101112131415161718192021222324252627282930313233&gt; rs.conf()&#123; _id: &#x27;rs0&#x27;, # 复制集名称 version: 2, # 配置版本号，即conf被修改的次数，每次更改配置时，版本号都会递增。 term: 3, # 选举轮次（election term）。在进行选举时，MongoDB 使用一个单调递增的 term 值来标识选举的周期。这个值会随着选举的进行而增加。 members: [ # 成员数组，包含了复制集中的所有成员的详细配置信息。 &#123; _id: 0, # 成员的唯一标识符，从0开始递增。 host: &#x27;10.1.2.26:27017&#x27;, # 节点ip+port arbiterOnly: false, # 是否为仲裁节点 buildIndexes: true, # 是否在此节点上创建索引 hidden: false, # 是否为隐藏节点，即不被客户端发现。 priority: 1, # 选举优先级，值越大优先级越高，0表示不能被选举为主节点 tags: &#123; purpose: &#x27;online&#x27; &#125;, # Tag secondaryDelaySecs: Long(&#x27;0&#x27;), # 如果存在延迟复制，表示复制延迟的时间量（以秒为单位），如果为0则表示不是延迟节点。 votes: 1 # 成员的投票数，大于0表示参与投票。 &#125;, ], protocolVersion: Long(&#x27;1&#x27;), # 复制集使用的协议版本。 writeConcernMajorityJournalDefault: true, # 是否在写入操作中默认启用大多数写关注和日志记录 settings: &#123; # 复制集的全局设置，包含以下属性： chainingAllowed: true, # 是否允许从其他成员读取数据。 heartbeatIntervalMillis: 2000, # 心跳间隔，即成员之间检测状态的时间间隔。 heartbeatTimeoutSecs: 10, # 心跳超时时间，如果在此时间内未收到心跳，则认为成员不可用。 electionTimeoutMillis: 10000, # 选举超时时间，即进行选举的时间间隔。 catchUpTimeoutMillis: -1, # 成员在追赶操作时的超时时间。 catchUpTakeoverDelayMillis: 30000, # 在追赶操作期间，发生主节点故障时，延迟节点接管主节点之前的延迟时间。 getLastErrorModes: &#123;&#125;, # 指定写操作的确认模式。 getLastErrorDefaults: &#123; w: 1, wtimeout: 0 &#125;, # 指定写操作的默认确认参数。 replicaSetId: ObjectId(&#x27;660a20282e7a827807cac803&#x27;) # 复制集的唯一标识符。 &#125;&#125; ……………… 修改节点优先级 12345# 必须在主节点执行cfg = rs.conf()# 保存成功后，由于当前节点的优先级最高，所以集群会发起重新选举将当前节点设置为主节点cfg.members[2].priority = 10rs.reconfig(cfg) 设置隐藏节点 12345# 必须在主节点执行cfg = rs.conf()cfg.members[2].priority = 0cfg.members[2].hidden = truers.reconfig(cfg) 配置延时节点 123456cfg = rs.conf()cfg.members[2].priority = 0cfg.members[2].hidden = true#延迟60秒cfg.members[2].secondaryDelaySecs = 60rs.reconfig(cfg) 读关注(readConcern) 在 readPreference 选择了指定的节点后，readConcern 决定这个节点上的数据哪些是可读的 类似于关系数据库的隔离级别，可选值包括： 12345- available：读取所有可用的数据;- local：读取所有可用且属于当前分片的数据。在复制集中 local 和 available 是没有区别的，两者仅在分片集群中才有区别;- majority：读取在大多数节点上提交完成的数据;- linearizable：可线性化读取文档，仅支持从主节点读。只读取大多数节点确认过的数据。和 majority 最大差别是保证绝对的操作线性顺序;- snapshot：读取最近快照中的数据，仅可用于多文档事务，隔离级别最高; 主节点读取数据时默认 readConcern 是 local，从节点读取数据时默认 readConcern 是 available 分片集群中 local 和 available 的区别 如果一个 chunk x 正在从 shard1 向 shard2 迁移； 整个迁移过程中 chunk x 中的部分数据会在 shard1 和 shard2 中同时存在，但源分片 shard1仍然是chunk x 的负责方： 所有对 chunk x 的读写操作仍然进入 shard1； config 中记录的信息 chunk x 仍然属于 shard1； 此时如果读 shard2，则会体现出 local 和 available 的区别： local：只取应该由 shard2 负责的数据（不包括 x）； available：shard2 上有什么就读什么（包括 x）； 示例 1234db.user.find().readConcern(&#x27;local&#x27;)db.user.find().readConcern(&#x27;majority&#x27;)# 读取从节点上已经被大多数节点提交完成的数据db.user.find().readPref(&quot;secondary&quot;).readConcern(&quot;majority&quot;) 写关注(writeConcern) writeConcern 决定一个写操作落到多少个节点上才算成功。 MongoDB支持客户端灵活配置写入策略（writeConcern），以满足不同场景的需求。 123456789101112&#123; w: &lt;value&gt;, j: &lt;boolean&gt;, wtimeout: &lt;number&gt; &#125;w: 数据写入到number个节点才向用客户端确认 - &#123;w: 0&#125; 对客户端的写入不需要发送任何确认，适用于性能要求高，但不关注正确性的场景 - &#123;w: 1&#125; 默认的writeConcern，数据写入到Primary就向客户端发送确认 - &#123;w: &quot;majority&quot;&#125; 数据写入到副本集大多数成员后向客户端发送确认，适用于对数据安全性要求比较高的场景，该选项会降低写入性能j: 写入操作的journal持久化后才向客户端确认 - 默认为&#123;j: false&#125;，如果要求Primary写入持久化了才向客户端确认，则指定该选项为truewtimeout: 写入超时时间，仅w的值大于1时有效。 - 当指定&#123;w: &#125;时，数据需要成功写入number个节点才算成功，如果写入过程中有节点故障，可能导致这个条件一直不能满足，从而一直不能向客户端发送确认结果，针对这种情况，客户端可设置wtimeout选项来指定超时时间，当写入过程持续超过该时间仍未结束，则认为写入失败。 通常重要数据应用 &#123;w: &quot;majority&quot;&#125;，普通数据可以应用 &#123;w: 1&#125; 以确保最佳性能。 示例 1234# 等等大多数节点写入成功db.user.insertOne(&#123;name:&quot;李四&quot;&#125;,&#123;writeConcern:&#123;w:&quot;majority&quot;&#125;&#125;)# 等待3个节点写入成功，若超时则写入失败db.user.insertOne(&#123;name:&quot;小明&quot;&#125;,&#123;writeConcern:&#123;w:3,wtimeout:3000&#125;&#125;) 优雅的重启复制集 逐个重启复制集里所有的Secondary节点 1234# 关闭服务mongod --shutdown -f /mongodb/mongo.conf# 重启启动mongod -f /mongodb/mongo.conf 对Primary发送rs.stepDown()命令，等待primary降级为Secondary 123456789101112rs0 [primary] local&gt; rs.stepDown()&#123; ok: 1, &#x27;$clusterTime&#x27;: &#123; clusterTime: Timestamp(&#123; t: 1712046433, i: 1 &#125;), signature: &#123; hash: Binary.createFromBase64(&#x27;dklQyCuunlYhWYkKuNtiNcGNom8=&#x27;, 0), keyId: Long(&#x27;7352724745051176965&#x27;) &#125; &#125;, operationTime: Timestamp(&#123; t: 1712046433, i: 1 &#125;)&#125; 重启降级后的Primary oplog 在复制集架构中，主节点与备节点之间是通过oplog来同步数据的，这里的oplog是一个特殊的固定集合，当主节点上的一个写操作完成后，会向oplog集合写入一条对应的日志，而备节点则通过这个oplog不断拉取到新的日志，在本地进行回放以达到数据同步的目的。 查询oplog 1234567891011use local# 查询最近10条oplog，这里 $natural:-1 是按照时间降序排列db.oplog.rs.find().sort(&#123;$natural:-1&#125;).limit(10)# 查询最近60分钟oplogdb.oplog.rs.find(&#123; &quot;ts&quot;: &#123; &quot;$gt&quot;: Timestamp(Math.floor(new Date().getTime() / 1000) - 60*60, 1) &#125;&#125;).sort(&#123; &quot;$natural&quot;: -1&#125;).limit(10) 12345678910111213141516171819202122232425262728293031&#123; op: &#x27;u&#x27;, ns: &#x27;config.system.sessions&#x27;, ui: UUID(&#x27;4f90005d-a546-4d59-971d-7954c3acd0f8&#x27;), o: &#123; &#x27;$v&#x27;: 2, diff: &#123; u: &#123; lastUse: ISODate(&#x27;2024-04-02T08:31:10.148Z&#x27;) &#125; &#125; &#125;, o2: &#123; _id: &#123; id: UUID(&#x27;3f881052-ac21-4677-816c-33934322fbd6&#x27;), uid: Binary.createFromBase64(&#x27;eOZyqfHfiVpfviPDWgAERmzNFnUp8UBdlWKN50Fv9fo=&#x27;, 0) &#125; &#125;, ts: Timestamp(&#123; t: 1712046670, i: 1 &#125;), t: Long(&#x27;6&#x27;), v: Long(&#x27;2&#x27;), wall: ISODate(&#x27;2024-04-02T08:31:10.148Z&#x27;)&#125;ts： 操作时间，当前timestamp + 计数器，计数器每秒都被重置v：oplog版本信息op：操作类型: i：插⼊操作 u：更新操作 d：删除操作 c：执行命令（如createDatabase，dropDatabase） n：空操作，特殊用途ns：操作针对的集合o：操作内容o2：操作查询条件，仅update操作包含该字段 oplog集合的大小默认为min(磁盘可用空间*5%，50GB)，可以通过如下命令修改 123456# 将复制集成员的oplog大小修改为1G，这里单位是M&gt; db.adminCommand(&#123;replSetResizeOplog: 1, size: 1024&#125;)# 查看oplog大小&gt; use local&gt; db.oplog.rs.stats().maxSize/1024/10241024 这里要注意每个节点的oplog大小都需要单独的配置，并且必须一致，否则有可能会出现同步失败的情况。 查看当前节点的oplog的状态 12345678910111213141516171819202122232425262728293031rs0 [primary] test&gt; rs.printReplicationInfo()actual oplog size&#x27;1024 MB&#x27;---configured oplog size&#x27;1024 MB&#x27;---log length start to end&#x27;112923 secs (31.37 hrs)&#x27;---oplog first event time&#x27;Mon Apr 01 2024 02:47:04 GMT+0000 (Coordinated Universal Time)&#x27;---oplog last event time&#x27;Tue Apr 02 2024 10:09:07 GMT+0000 (Coordinated Universal Time)&#x27;---now&#x27;Tue Apr 02 2024 10:09:08 GMT+0000 (Coordinated Universal Time)&#x27;actual oplog size：表示实际使用的 oplog 大小。Oplog 是一个 circurlar buffer，用于存储主节点上的操作日志。这个属性指示了 oplog 的当前大小。在示例中，oplog 大小为 &#x27;1024 MB&#x27;。configured oplog size：表示配置的 oplog 大小。这是在配置复制集时指定的 oplog 大小。在示例中，配置的 oplog 大小也是 &#x27;1024 MB&#x27;，说明实际 oplog 大小与配置的 oplog 大小相匹配。log length start to end：表示 oplog 的记录长度，从开始到结束的时间跨度。在示例中，oplog 记录了 &#x27;112923 secs (31.37 hrs)&#x27;，表示从 oplog 开始记录到结束的时间跨度为约 31.37 小时。oplog first event time：表示 oplog 记录的第一个事件的时间戳。在示例中，第一个事件的时间为 &#x27;Mon Apr 01 2024 02:47:04 GMT+0000 (Coordinated Universal Time)&#x27;。oplog last event time：表示 oplog 记录的最后一个事件的时间戳。在示例中，最后一个事件的时间为 &#x27;Tue Apr 02 2024 10:09:07 GMT+0000 (Coordinated Universal Time)&#x27;。now：表示当前时间。在示例中，当前时间为 &#x27;Tue Apr 02 2024 10:09:08 GMT+0000 (Coordinated Universal Time)&#x27;。 以从节点视角查看oplog复制状态 123456789101112131415161718rs0 [primary] local&gt; rs.printSecondaryReplicationInfo()source: 10.1.2.142:27017&#123; syncedTo: &#x27;Tue Apr 02 2024 10:10:07 GMT+0000 (Coordinated Universal Time)&#x27;, replLag: &#x27;0 secs (0 hrs) behind the primary &#x27;&#125;---source: 10.1.2.41:27017&#123; syncedTo: &#x27;Tue Apr 02 2024 10:10:07 GMT+0000 (Coordinated Universal Time)&#x27;, replLag: &#x27;0 secs (0 hrs) behind the primary &#x27;&#125;source：从节点的主机名和端口号，即复制数据的来源节点。syncedTo：表示从节点已经复制到的最新操作的时间戳。它指示了从节点上数据的同步程度，即从节点已经复制了到主节点的哪个时间点的数据。在示例中，两个从节点的 syncedTo 时间戳都是 &#x27;Tue Apr 02 2024 10:10:07 GMT+0000 (Coordinated Universal Time)&#x27;，表示它们都已经与主节点同步到了相同的时间点。replLag：表示从节点与主节点之间的复制延迟。它显示了从节点当前落后于主节点的时间量，以秒和小时为单位。在示例中，两个从节点的 replLag 都是 &#x27;0 secs (0 hrs) behind the primary&#x27;，表示它们与主节点保持实时同步，没有任何复制延迟。 既然oplog的大小有限制，新的数据会覆盖旧的数据，那么新加入的节点如何全量同步数据呢？ 当MongoDB的从库节点需要进行数据同步时，会执行以下步骤： 初始同步： 当一个新节点加入到副本集中时，它会执行初始同步以获取集合中的所有数据。初始同步会复制所有数据库的所有数据，包括系统数据库。之后，新节点会开始从oplog里获取更改历史，应用这些更改历史到数据，以保证与其他从库节点一致。注意，初始同步中的数据包括在新加入节点之前的数据以及新节点加入之后其他节点产生的新数据。 oplog落后： 如果从库在初始同步执行期间不能及时获取oplog（例如，oplog的数据超出了大小限制并被覆盖，或者初次同步时间过长），新节点需要重新进行初始同步操作。 这些步骤确保了MongoDB副本集的数据在所有节点间的一致性，尽管oplog有大小限制并且旧的内容会被新的操作覆盖。 复制集相关操作 官方文档 命令 描述 rs.add(“hostname:port”) 为复制集新增节点 rs.addArb(“hostname:port”) 为复制集新增一个 arbiters rs.conf() 返回复制集配置信息 rs.config() 同 rs.conf() rs.freeze(3600) 防止当前节点在一段时间内选举成为主节点，如这里是3600秒，则当前节点在3600秒内不会选举成为主节点 rs.help() 返回 replica set 的命令帮助 rs.initiate() 初始化一个新的复制集 rs.printReplicationInfo() 以当前节点的视角返回复制的状态报告 rs.printSecondaryReplicationInfo() 以从节点的视角返回复制状态报告 rs.reconfig() 通过重新应用复制集配置来为复制集更新配置 rs.remove(“hostname:port”) 从复制集中移除一个节点 rs.secondaryOk() 为当前的连接设置从节点可读，该方法已经过时了，使用 db.getMongo().setReadPref() 代替 rs.status() 返回复制集状态信息 rs.stepDown() 让当前的 primary 变为从节点并触发新一轮的主节点选举 rs.syncFrom(“hostname:port”) 设置复制集节点从哪个节点处同步数据，将会覆盖默认选取逻辑 rs.reconfigForPSASet() 在主-从-仲裁器（PSA）副本集或正在更改为PSA架构的副本集上安全地执行一些重新配置更改。 移除节点 123456789101112rs0 [primary] local&gt; rs.remove(&quot;10.1.2.41:27017&quot;)&#123; ok: 1, &#x27;$clusterTime&#x27;: &#123; clusterTime: Timestamp(&#123; t: 1712049022, i: 1 &#125;), signature: &#123; hash: Binary.createFromBase64(&#x27;Qg3Ymzp3k+hhzaDo3jZQimc4WCI=&#x27;, 0), keyId: Long(&#x27;7352724745051176965&#x27;) &#125; &#125;, operationTime: Timestamp(&#123; t: 1712049022, i: 1 &#125;)&#125; 添加仲裁节点 当集群中的节点数&gt;=3时，无论是添加仲裁节点还是从节点都没有问题。 上面删除了集群中的一个节点，此时集群中的节点说是2(一主一从)，此时如果主发生故障集群就没办法工作了，此时我们可以为其添加一个仲裁节点(只投票不存储数据)。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# 添加仲裁节点，但是此时添加仲裁节点会报错rs0 [primary] local&gt; rs.addArb(&quot;10.1.2.41:27017&quot;)MongoServerError[NewReplicaSetConfigurationIncompatible]: Reconfig attempted to install a config that would change the implicit default write concern. Use the setDefaultRWConcern command to set a cluster-wide write concern and try the reconfig again.# 报错原因：由于默认的写关注为 majority，而当前节点中只有2个节点，没有办法确认“大多数”是多少了，所以我们需要修改写关注的设置# 查询默认的读写关注rs0 [primary] admin&gt; db.adminCommand(&#123;&quot;getDefaultRWConcern&quot; : 1&#125;)&#123; defaultReadConcern: &#123; level: &#x27;local&#x27; &#125;, defaultWriteConcern: &#123; w: &#x27;majority&#x27;, wtimeout: 0 &#125;, updateOpTime: Timestamp(&#123; t: 1712050437, i: 1 &#125;), updateWallClockTime: ISODate(&#x27;2024-04-02T09:15:04.462Z&#x27;), defaultWriteConcernSource: &#x27;global&#x27;, defaultReadConcernSource: &#x27;implicit&#x27;, localUpdateWallClockTime: ISODate(&#x27;2024-04-02T09:15:04.462Z&#x27;), ok: 1, &#x27;$clusterTime&#x27;: &#123; clusterTime: Timestamp(&#123; t: 1712109448, i: 1 &#125;), signature: &#123; hash: Binary.createFromBase64(&#x27;oUiR9xdXN4mzQqdz9IXHGdCmNto=&#x27;, 0), keyId: Long(&#x27;7352724745051176965&#x27;) &#125; &#125;, operationTime: Timestamp(&#123; t: 1712109448, i: 1 &#125;)&#125;# 修改默认写关注 defaultWriteConcern# setDefaultRWConcern：用于指定设置默认读写关注级别（RW Concern）的操作。值为 1 表示执行设置操作。# defaultWriteConcern：用于指定默认的写入关注级别。在这个例子中，写入关注级别被设置为 &#123; &quot;w&quot; : 2 &#125;，意味着在写入数据时，MongoDB 驱动程序会等待至少两个节点确认写入成功后才返回成功。其实这里设置为1也可以，表示写入主节点就返回成功。rs0 [primary] local&gt; db.adminCommand( &#123;&quot;setDefaultRWConcern&quot; : 1, &quot;defaultWriteConcern&quot; : &#123; &quot;w&quot; : 2 &#125; &#125; )&#123; defaultReadConcern: &#123; level: &#x27;local&#x27; &#125;, defaultWriteConcern: &#123; w: 2, wtimeout: 0 &#125;, updateOpTime: Timestamp(&#123; t: 1712049370, i: 1 &#125;), updateWallClockTime: ISODate(&#x27;2024-04-02T09:16:22.715Z&#x27;), defaultWriteConcernSource: &#x27;global&#x27;, defaultReadConcernSource: &#x27;implicit&#x27;, localUpdateWallClockTime: ISODate(&#x27;2024-04-02T09:16:22.726Z&#x27;), ok: 1, &#x27;$clusterTime&#x27;: &#123; clusterTime: Timestamp(&#123; t: 1712049382, i: 2 &#125;), signature: &#123; hash: Binary.createFromBase64(&#x27;04nzjl47CMumvguEzUq7RnY55+s=&#x27;, 0), keyId: Long(&#x27;7352724745051176965&#x27;) &#125; &#125;, operationTime: Timestamp(&#123; t: 1712049382, i: 2 &#125;)&#125;# 再次添加仲裁节点成功rs0 [primary] local&gt; rs.addArb(&quot;10.1.2.41:27017&quot;)&#123; ok: 1, &#x27;$clusterTime&#x27;: &#123; clusterTime: Timestamp(&#123; t: 1712049480, i: 1 &#125;), signature: &#123; hash: Binary.createFromBase64(&#x27;4q9s6mvT0boa6Q+vjKms8vnTR6Y=&#x27;, 0), keyId: Long(&#x27;7352724745051176965&#x27;) &#125; &#125;, operationTime: Timestamp(&#123; t: 1712049480, i: 1 &#125;)&#125; 此时关闭主节点，就会看到另一个从节点成为主节点了 添加新的节点 当集群中的节点数&gt;=3时，无论是添加仲裁节点还是从节点都没有问题。 如果当前集群中有两个节点(一主一从)，我们也可以不添加仲裁节点，而是直接添加一个新的从节点 123456789101112rs0 [primary] test&gt; rs.add(&quot;10.1.2.41:27017&quot;)&#123; ok: 1, &#x27;$clusterTime&#x27;: &#123; clusterTime: Timestamp(&#123; t: 1712051880, i: 1 &#125;), signature: &#123; hash: Binary.createFromBase64(&#x27;DuuorhNH4MWqa4DHCifPzxcMN3I=&#x27;, 0), keyId: Long(&#x27;7352724745051176965&#x27;) &#125; &#125;, operationTime: Timestamp(&#123; t: 1712051880, i: 1 &#125;)&#125; 当集群中只有一个主节点和一个仲裁节点时，此时若直接添加新的节点会报错 12rs0 [primary] local&gt; rs.add(&quot;10.1.2.142:27017&quot;)MongoServerError[NewReplicaSetConfigurationIncompatible]: Rejecting reconfig where the new config has a PSA topology and the secondary is electable, but the old config contains only one writable node. Refer to https://docs.mongodb.com/manual/reference/method/rs.reconfigForPSASet/ for next steps on reconfiguring a PSA set. 根据给出的网址的提示，执行以下操作 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125# 获取当前配置rs0 [primary] test&gt; cfg = rs.conf();&#123; _id: &#x27;rs0&#x27;, version: 7, term: 8, members: [ &#123; _id: 0, host: &#x27;10.1.2.26:27017&#x27;, arbiterOnly: false, buildIndexes: true, hidden: false, priority: 1, tags: &#123; purpose: &#x27;online&#x27; &#125;, secondaryDelaySecs: Long(&#x27;0&#x27;), votes: 1 &#125;, &#123; _id: 2, host: &#x27;10.1.2.41:27017&#x27;, arbiterOnly: true, buildIndexes: true, hidden: false, priority: 0, tags: &#123;&#125;, secondaryDelaySecs: Long(&#x27;0&#x27;), votes: 1 &#125; ], protocolVersion: Long(&#x27;1&#x27;), writeConcernMajorityJournalDefault: true, settings: &#123; chainingAllowed: true, heartbeatIntervalMillis: 2000, heartbeatTimeoutSecs: 10, electionTimeoutMillis: 10000, catchUpTimeoutMillis: -1, catchUpTakeoverDelayMillis: 30000, getLastErrorModes: &#123;&#125;, getLastErrorDefaults: &#123; w: 1, wtimeout: 0 &#125;, replicaSetId: ObjectId(&#x27;660a20282e7a827807cac803&#x27;) &#125;&#125;# 修改配置，增加新的节点信息rs0 [primary] test&gt; cfg[&quot;members&quot;] = [ &#123; _id: 0, host: &#x27;10.1.2.26:27017&#x27;, arbiterOnly: false, buildIndexes: true, hidden: false, priority: 1, tags: &#123; purpose: &#x27;online&#x27; &#125;, secondaryDelaySecs: Long(&#x27;0&#x27;), votes: 1 &#125;, &#123; _id: 1, host: &#x27;10.1.2.142:27017&#x27;, # 新的节点 arbiterOnly: false, buildIndexes: true, hidden: false, priority: 1, tags: &#123; purpose: &#x27;online&#x27; &#125;, secondaryDelaySecs: Long(&#x27;0&#x27;), votes: 1 &#125;, &#123; _id: 2, host: &#x27;10.1.2.41:27017&#x27;, arbiterOnly: true, buildIndexes: true, hidden: false, priority: 0, tags: &#123;&#125;, secondaryDelaySecs: Long(&#x27;0&#x27;), votes: 1 &#125; ]# 执行配置rs0 [primary] test&gt; rs.reconfigForPSASet(1, cfg);Running first reconfig to give member at index 1 &#123; votes: 1, priority: 0 &#125;Running second reconfig to give member at index 1 &#123; priority: 1 &#125;&#123; ok: 1, &#x27;$clusterTime&#x27;: &#123; clusterTime: Timestamp(&#123; t: 1712051518, i: 2 &#125;), signature: &#123; hash: Binary.createFromBase64(&#x27;+tgYZKeeGP0KGt3YVpDCAjW3xTc=&#x27;, 0), keyId: Long(&#x27;7352724745051176965&#x27;) &#125; &#125;, operationTime: Timestamp(&#123; t: 1712051518, i: 2 &#125;)&#125;# 查看新节点的状态rs0 [primary] test&gt; rs.status()………………&#123; _id: 1, name: &#x27;10.1.2.142:27017&#x27;, health: 1, state: 2, stateStr: &#x27;SECONDARY&#x27;, uptime: 87, optime: &#123; ts: Timestamp(&#123; t: 1712051597, i: 1 &#125;), t: Long(&#x27;8&#x27;) &#125;, optimeDurable: &#123; ts: Timestamp(&#123; t: 1712051597, i: 1 &#125;), t: Long(&#x27;8&#x27;) &#125;, optimeDate: ISODate(&#x27;2024-04-02T09:53:17.000Z&#x27;), optimeDurableDate: ISODate(&#x27;2024-04-02T09:53:17.000Z&#x27;), lastAppliedWallTime: ISODate(&#x27;2024-04-02T09:53:17.058Z&#x27;), lastDurableWallTime: ISODate(&#x27;2024-04-02T09:53:17.058Z&#x27;), lastHeartbeat: ISODate(&#x27;2024-04-02T09:53:24.535Z&#x27;), lastHeartbeatRecv: ISODate(&#x27;2024-04-02T09:53:24.535Z&#x27;), pingMs: Long(&#x27;0&#x27;), lastHeartbeatMessage: &#x27;&#x27;, syncSourceHost: &#x27;10.1.2.26:27017&#x27;, syncSourceId: 0, infoMessage: &#x27;&#x27;, configVersion: 10, configTerm: 8 &#125;……………… 故障转移 集群组建完成后，集群内的各个节点会开启心跳响应定时器，默认每隔2秒(heartbeatIntervalMillis)会向其它成员发起心跳。 同时各成员节点还会启动一个选举超时检测定时器，默认每隔10秒(electionTimeoutMillis)会发起一轮选举调度。 当主节点心跳响应成功，则当前节点就会取消上一次的选举调度，即会重置选举超时检测定时器的倒计时 若主节点心跳响应失败，并且在选举超时检测的时间内仍然没有响应成功，则当前节点就会发起一轮选举调度 MongoDB的复制集选举使用Raft算法来实现，选举成功的必要条件是大多数投票节点存活。简单来说就是如果超过半数的节点都给我投票了，那么我就会成为主节点。 为什么推荐集群连接的方式？ 考虑这样的场景，如果我连接主节点并且插入10000条说，若此时主节点宕机，则客户端会立刻停止操作。 1234567# 只连接主节点mongosh &quot;mongodb://user:password@10.1.2.26:27017/test?authSource=admin&quot;# 执行插入rs0 [direct: primary] test&gt; for(i=0;i&lt;10000;i++)&#123;db.emp.insertOne(&#123;name:&quot;test&quot;+i&#125;)&#125;# 此时关闭主节点的mongo服务，则客户端会立刻给出报错信息MongoServerError[NotWritablePrimary]: not primary 若连接采用集群的方式连接，则不会中断操作，其原因就是集群连接方式会自动完成故障转移 12345678910mongosh &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&quot;# 插入操作没有被中断rs0 [primary] test&gt; for(i=0;i&lt;10000;i++)&#123;db.emp.insertOne(&#123;name:&quot;test&quot;+i&#125;)&#125;&#123; acknowledged: true, insertedId: ObjectId(&#x27;660cce829918b823661879c6&#x27;)&#125;# 查询结果正确rs0 [primary] test&gt; db.emp.countDocuments()10000 这里有一点需要注意，当你创建集群时使用的是各个节点的内网ip地址，则客户端必须可以访问这些内网ip才能通过集群连接，否则会出现连接失败的情况。因为通过集群连接的方式，实际上是会先在集群内部判断出主节点的ip地址返回给客户端，然后客户端再通过这个主节点ip访问主节点。 小贴士 在复制集发生主备节点切换的情况下，会出现短暂的无主节点阶段，此时无法接受业务写操作。 早期的版本中需要添加retryWrites参数，现在已经默认开启了 1mongosh &quot;mongodb://user:password@10.1.2.26:27017,10.1.2.142:27017,10.1.2.41:27017/test?authSource=admin&amp;replicaSet=rs0&amp;retryWrites=true&quot; SpringBoot集成MongoDB集群 1234spring: data: mongodb: uri: mongodb://user:password@127.0.0.1:27040,127.0.0.1:27041,127.0.0.1:27042/mytest?authSource=admin&amp;readPreference=primaryPreferred","summary":"摘要 本文介绍Linux下MongoDB7.0复制集的安装和使用 MongoDB官方文档 本文基于CentOS8(x86_64) Mongodb分片集群搭建参看MongoDB 分片集群搭建，虽然是基于4.4版本的，但是安装方式差别不大，只是配置文件中个别的属性名称发生了变化。","date_published":"2024-03-29T13:30:05.000Z","tags":["技术","linux","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/03/28/ansible-useful-demo/","url":"https://blog.hanqunfeng.com/2024/03/28/ansible-useful-demo/","title":"Ansible 一些有用的小Demo","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍 Ansible 的一些使用技巧。</p>\n</li>\n<li class=\"lvl-2\">\n<p>关于Ansible的介绍可以参看 <a href=\"/2024/03/19/linux-command15-ansible/\" title=\"Linux常用命令--Ansible\">Linux常用命令--Ansible</a></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"将同组内机器别名设置到hosts中\">将同组内机器别名设置到<code>hosts</code>中</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>inventory</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[test-mongo]</span><br><span class=\"line\">10.1.2.249 hostname=mongodb.db0</span><br><span class=\"line\">10.1.2.184 hostname=mongodb.db1</span><br><span class=\"line\">10.1.2.178 hostname=mongodb.db2</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>tasks</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- name: Set static hostname <span class=\"keyword\">in</span> /etc/hosts</span><br><span class=\"line\">  lineinfile:</span><br><span class=\"line\">    path: /etc/hosts</span><br><span class=\"line\">    line: <span class=\"string\">&quot;&#123;&#123; item &#125;&#125; &#123;&#123; hostvars[item].hostname | default(&#x27;mongodb.db&#x27; ~ index)  &#125;&#125;&quot;</span></span><br><span class=\"line\">    state: present</span><br><span class=\"line\">  loop: <span class=\"string\">&quot;&#123;&#123; groups[group_names[0]] &#125;&#125;&quot;</span></span><br><span class=\"line\">  loop_control:</span><br><span class=\"line\">    index_var: index <span class=\"comment\"># 循环索引变量，从0开始，ansible&gt;2.14+</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>说明</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.1.2.249 hostname=mongodb.db03 : 这里hostname就是要设置给当前主机的变量，多个变量空格分割</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">groups</span>[key] : 获取指定组内的ip数组，key为组名</span><br><span class=\"line\">group_names[0] : 获取运行当前脚本的第一个组名</span><br><span class=\"line\">hostvars[item].hostname : 获取指定ip的变量名称为hostname的值</span><br><span class=\"line\">default(<span class=\"string\">&#x27;mongodb.db&#x27;</span> ~ index) : 设置缺省值，即如果没有设置hostname，则默认为mongodb.db[0~2]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取除了当前主机外的ip数组</span></span><br><span class=\"line\">&#123;&#123; <span class=\"built_in\">groups</span>[group_names[0]] | difference([inventory_hostname]) &#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这里用到了<code>loop</code>，关于<code>loop</code>的用法可以参考<a href=\"https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_loops.html\">官方文档</a></p>\n</li>\n</ul>\n","content_text":"摘要 本文介绍 Ansible 的一些使用技巧。 关于Ansible的介绍可以参看 Linux常用命令--Ansible 将同组内机器别名设置到hosts中 inventory 1234[test-mongo]10.1.2.249 hostname=mongodb.db010.1.2.184 hostname=mongodb.db110.1.2.178 hostname=mongodb.db2 tasks 12345678- name: Set static hostname in /etc/hosts lineinfile: path: /etc/hosts line: &quot;&#123;&#123; item &#125;&#125; &#123;&#123; hostvars[item].hostname | default(&#x27;mongodb.db&#x27; ~ index) &#125;&#125;&quot; state: present loop: &quot;&#123;&#123; groups[group_names[0]] &#125;&#125;&quot; loop_control: index_var: index # 循环索引变量，从0开始，ansible&gt;2.14+ 说明 12345678910.1.2.249 hostname=mongodb.db03 : 这里hostname就是要设置给当前主机的变量，多个变量空格分割groups[key] : 获取指定组内的ip数组，key为组名group_names[0] : 获取运行当前脚本的第一个组名hostvars[item].hostname : 获取指定ip的变量名称为hostname的值default(&#x27;mongodb.db&#x27; ~ index) : 设置缺省值，即如果没有设置hostname，则默认为mongodb.db[0~2]# 获取除了当前主机外的ip数组&#123;&#123; groups[group_names[0]] | difference([inventory_hostname]) &#125;&#125; 这里用到了loop，关于loop的用法可以参考官方文档","summary":"摘要 本文介绍 Ansible 的一些使用技巧。 关于Ansible的介绍可以参看 Linux常用命令--Ansible","date_published":"2024-03-28T13:30:05.000Z","tags":["技术","linux","linux常用命令","Ansible","linux常用命令","Ansible"]},{"id":"https://blog.hanqunfeng.com/2024/03/27/ansible-collection-publish/","url":"https://blog.hanqunfeng.com/2024/03/27/ansible-collection-publish/","title":"Ansible Collection Publish To Galaxy","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍如何将Ansible Collection发布到Galaxy。</p>\n</li>\n<li class=\"lvl-2\">\n<p>关于Ansible的介绍可以参看 <a href=\"/2024/03/19/linux-command15-ansible/\" title=\"Linux常用命令--Ansible\">Linux常用命令--Ansible</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>关于将Ansible Role发布到Galaxy的详细介绍可以参看 <a href=\"/2024/03/26/ansible-role-publish/\" title=\"Ansible Role Publish To Galaxy\">Ansible Role Publish To Galaxy</a></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"创建Collection\">创建Collection</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录下创建collection</span></span><br><span class=\"line\"><span class=\"comment\"># 注意这里的collerction名称格式为 namespace.collection，名称只支持 [a-zA-Z0-9_]</span></span><br><span class=\"line\">$ ansible-galaxy collection init hanqunfeng.install_mongodb</span><br><span class=\"line\">- Collection hanqunfeng.install_mongodb was created successfully</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>目录结构</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hanqunfeng</span><br><span class=\"line\">└── install_mongodb</span><br><span class=\"line\">   ├── docs</span><br><span class=\"line\">   ├── galaxy.yml</span><br><span class=\"line\">   ├── meta</span><br><span class=\"line\">   │  └── runtime.yml</span><br><span class=\"line\">   ├── plugins</span><br><span class=\"line\">   │  └── README.md</span><br><span class=\"line\">   ├── README.md</span><br><span class=\"line\">   └── roles</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在<code>galaxy.yml</code>中配置collection的元数据<br>\n在<code>runtime.yml</code>中配置collection的运行时依赖<br>\n在<code>README.md</code>中配置collection的描述信息<br>\n在<code>roles</code>中创建role，这里可以创建多个role，我这里将上面创建的role复制到<code>roles</code>目录下，不过名称需要修改一下，不支持下划线，所以这里将role的名称改为<code>centos_mongodb_install</code></p>\n</blockquote>\n<p>相关代码参考:<a href=\"https://github.com/hanqunfeng/ansible_collections\">https://github.com/hanqunfeng/ansible_collections</a></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>构建collection的tar包</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建collection的tar包时先要进入namespace目录下</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> hanqunfeng</span><br><span class=\"line\"><span class=\"comment\"># 指定collection的目录名称，会基于我们在 galaxy.yml中的配置信息生成tar包</span></span><br><span class=\"line\">$ ansible-galaxy collection build install_mongodb</span><br><span class=\"line\">Created collection <span class=\"keyword\">for</span> hanqunfeng.install_mongodb at /Users/hanqf/ansible_workspace/collections/hanqunfeng/hanqunfeng-install_mongodb-1.0.0.tar.gz</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>上传collection到Galaxy<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/iOTd1D.png\" alt=\"\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/bl2Pkq.png\" alt=\"\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/RohfLq.png\" alt=\"\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/Mmmxcs.png\" alt=\"\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/rmsiSe.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>搜索collection<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/KHYzXd.png\" alt=\"\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/b0KQkB.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>安装collection</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认安装最新版本</span></span><br><span class=\"line\">$ ansible-galaxy collection install hanqunfeng.install_mongodb</span><br><span class=\"line\">Starting galaxy collection install process</span><br><span class=\"line\">Process install dependency map</span><br><span class=\"line\">Starting collection install process</span><br><span class=\"line\">Downloading https://galaxy.ansible.com/api/v3/plugin/ansible/content/published/collections/artifacts/hanqunfeng-install_mongodb-1.0.0.tar.gz to /Users/hanqf/.ansible/tmp/ansible-local-322947_s0gv88/tmp1fbnqss_/hanqunfeng-install_mongodb-1.0.0-s2wczaen</span><br><span class=\"line\">Installing <span class=\"string\">&#x27;hanqunfeng.install_mongodb:1.0.0&#x27;</span> to <span class=\"string\">&#x27;/Users/hanqf/.ansible/collections/ansible_collections/hanqunfeng/install_mongodb&#x27;</span></span><br><span class=\"line\">hanqunfeng.install_mongodb:1.0.0 was installed successfully</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 升级安装时需要加上 --force</span></span><br><span class=\"line\">ansible-galaxy collection install --force hanqunfeng.install_mongodb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看已安装的role</span></span><br><span class=\"line\">ansible-galaxy collection list</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用collection</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test-mongo</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">roles:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">hanqunfeng.install_mongodb.centos_mongodb_install</span> <span class=\"comment\"># &lt;namespace&gt;.&lt;collection_name&gt;.&lt;role_name&gt;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除collection</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 没有现成的remove命令，只能手动删除</span></span><br><span class=\"line\">$ <span class=\"built_in\">rm</span> -rf ~/.ansible/collections/ansible_collections/hanqunfeng/install_mongodb</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>更新collection<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/lZjgci.png\" alt=\"\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/7QzrmF.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>重新安装collection</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认安装最新版本</span></span><br><span class=\"line\">$ ansible-galaxy collection install --force hanqunfeng.install_mongodb</span><br><span class=\"line\">Starting galaxy collection install process</span><br><span class=\"line\">Process install dependency map</span><br><span class=\"line\">Starting collection install process</span><br><span class=\"line\">Downloading https://galaxy.ansible.com/api/v3/plugin/ansible/content/published/collections/artifacts/hanqunfeng-install_mongodb-1.0.1.tar.gz to /Users/hanqf/.ansible/tmp/ansible-local-530779nbn853q/tmpiuxg6ads/hanqunfeng-install_mongodb-1.0.1-ep0cswny</span><br><span class=\"line\">Installing <span class=\"string\">&#x27;hanqunfeng.install_mongodb:1.0.1&#x27;</span> to <span class=\"string\">&#x27;/Users/hanqf/.ansible/collections/ansible_collections/hanqunfeng/install_mongodb&#x27;</span></span><br><span class=\"line\">hanqunfeng.install_mongodb:1.0.1 was installed successfully</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装指定版本</span></span><br><span class=\"line\">ansible-galaxy collection install  hanqunfeng.install_mongodb:1.0.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"命令行发布collection\">命令行发布collection</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>先要在ansible-galaxy网站上获取<code>api-key</code><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/WGgnPL.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>发布collection</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意替换自己的 api-key</span></span><br><span class=\"line\">$ ansible-galaxy collection publish --token xxxxxxxxxxxxxxx hanqunfeng-install_mongodb-1.0.2.tar.gz</span><br><span class=\"line\">Publishing collection artifact <span class=\"string\">&#x27;/Users/hanqf/ansible_workspace/collections/hanqunfeng/hanqunfeng-install_mongodb-1.0.2.tar.gz&#x27;</span> to default https://galaxy.ansible.com/api/</span><br><span class=\"line\">Collection has been published to the Galaxy server default https://galaxy.ansible.com/api/</span><br><span class=\"line\">Waiting <span class=\"keyword\">until</span> Galaxy import task https://galaxy.ansible.com/api/v3/imports/collections/018e7f26-b771-7c47-9c92-14e671b776dc/ has completed</span><br><span class=\"line\">Collection has been successfully published and imported to the Galaxy server default https://galaxy.ansible.com/api/</span><br></pre></td></tr></table></figure>\n<h2 id=\"后记\">后记</h2>\n<p>目前<code>2.16.4</code>这个版本尚不支持在命令行搜索collection，只能通过web界面搜索。</p>\n","content_text":"摘要 本文介绍如何将Ansible Collection发布到Galaxy。 关于Ansible的介绍可以参看 Linux常用命令--Ansible 关于将Ansible Role发布到Galaxy的详细介绍可以参看 Ansible Role Publish To Galaxy 创建Collection 1234# 在当前目录下创建collection# 注意这里的collerction名称格式为 namespace.collection，名称只支持 [a-zA-Z0-9_]$ ansible-galaxy collection init hanqunfeng.install_mongodb- Collection hanqunfeng.install_mongodb was created successfully 目录结构 12345678910hanqunfeng└── install_mongodb ├── docs ├── galaxy.yml ├── meta │ └── runtime.yml ├── plugins │ └── README.md ├── README.md └── roles 在galaxy.yml中配置collection的元数据 在runtime.yml中配置collection的运行时依赖 在README.md中配置collection的描述信息 在roles中创建role，这里可以创建多个role，我这里将上面创建的role复制到roles目录下，不过名称需要修改一下，不支持下划线，所以这里将role的名称改为centos_mongodb_install 相关代码参考:https://github.com/hanqunfeng/ansible_collections 构建collection的tar包 12345# 构建collection的tar包时先要进入namespace目录下$ cd hanqunfeng# 指定collection的目录名称，会基于我们在 galaxy.yml中的配置信息生成tar包$ ansible-galaxy collection build install_mongodbCreated collection for hanqunfeng.install_mongodb at /Users/hanqf/ansible_workspace/collections/hanqunfeng/hanqunfeng-install_mongodb-1.0.0.tar.gz 上传collection到Galaxy 搜索collection 安装collection 1234567891011121314# 默认安装最新版本$ ansible-galaxy collection install hanqunfeng.install_mongodbStarting galaxy collection install processProcess install dependency mapStarting collection install processDownloading https://galaxy.ansible.com/api/v3/plugin/ansible/content/published/collections/artifacts/hanqunfeng-install_mongodb-1.0.0.tar.gz to /Users/hanqf/.ansible/tmp/ansible-local-322947_s0gv88/tmp1fbnqss_/hanqunfeng-install_mongodb-1.0.0-s2wczaenInstalling &#x27;hanqunfeng.install_mongodb:1.0.0&#x27; to &#x27;/Users/hanqf/.ansible/collections/ansible_collections/hanqunfeng/install_mongodb&#x27;hanqunfeng.install_mongodb:1.0.0 was installed successfully# 升级安装时需要加上 --forceansible-galaxy collection install --force hanqunfeng.install_mongodb# 查看已安装的roleansible-galaxy collection list 使用collection 12345---- hosts: test-mongo become: yes # 切换到root用户下执行 roles: - hanqunfeng.install_mongodb.centos_mongodb_install # &lt;namespace&gt;.&lt;collection_name&gt;.&lt;role_name&gt; 删除collection 12# 没有现成的remove命令，只能手动删除$ rm -rf ~/.ansible/collections/ansible_collections/hanqunfeng/install_mongodb 更新collection 重新安装collection 123456789101112# 默认安装最新版本$ ansible-galaxy collection install --force hanqunfeng.install_mongodbStarting galaxy collection install processProcess install dependency mapStarting collection install processDownloading https://galaxy.ansible.com/api/v3/plugin/ansible/content/published/collections/artifacts/hanqunfeng-install_mongodb-1.0.1.tar.gz to /Users/hanqf/.ansible/tmp/ansible-local-530779nbn853q/tmpiuxg6ads/hanqunfeng-install_mongodb-1.0.1-ep0cswnyInstalling &#x27;hanqunfeng.install_mongodb:1.0.1&#x27; to &#x27;/Users/hanqf/.ansible/collections/ansible_collections/hanqunfeng/install_mongodb&#x27;hanqunfeng.install_mongodb:1.0.1 was installed successfully# 安装指定版本ansible-galaxy collection install hanqunfeng.install_mongodb:1.0.1 命令行发布collection 先要在ansible-galaxy网站上获取api-key 发布collection 123456# 注意替换自己的 api-key$ ansible-galaxy collection publish --token xxxxxxxxxxxxxxx hanqunfeng-install_mongodb-1.0.2.tar.gzPublishing collection artifact &#x27;/Users/hanqf/ansible_workspace/collections/hanqunfeng/hanqunfeng-install_mongodb-1.0.2.tar.gz&#x27; to default https://galaxy.ansible.com/api/Collection has been published to the Galaxy server default https://galaxy.ansible.com/api/Waiting until Galaxy import task https://galaxy.ansible.com/api/v3/imports/collections/018e7f26-b771-7c47-9c92-14e671b776dc/ has completedCollection has been successfully published and imported to the Galaxy server default https://galaxy.ansible.com/api/ 后记 目前2.16.4这个版本尚不支持在命令行搜索collection，只能通过web界面搜索。","summary":"摘要 本文介绍如何将Ansible Collection发布到Galaxy。 关于Ansible的介绍可以参看 Linux常用命令--Ansible 关于将Ansible Role发布到Galaxy的详细介绍可以参看 Ansible Role Publish To Galaxy","date_published":"2024-03-27T13:30:05.000Z","tags":["技术","linux","linux常用命令","Ansible","linux常用命令","Ansible"]},{"id":"https://blog.hanqunfeng.com/2024/03/26/ansible-role-publish/","url":"https://blog.hanqunfeng.com/2024/03/26/ansible-role-publish/","title":"Ansible Role Publish To Galaxy","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍如何将Ansible Role发布到Galaxy。</p>\n</li>\n<li class=\"lvl-2\">\n<p>关于Ansible的介绍可以参看 <a href=\"/2024/03/19/linux-command15-ansible/\" title=\"Linux常用命令--Ansible\">Linux常用命令--Ansible</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>关于将Ansible Collection发布到Galaxy的详细介绍可以参看 <a href=\"/2024/03/27/ansible-collection-publish/\" title=\"Ansible Collection Publish To Galaxy\">Ansible Collection Publish To Galaxy</a></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"创建Role\">创建Role</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在当前目录下创建一个名称为<code>mongodb-install</code>的role，实际上就是创建一个名称为<code>mongodb-install</code>的目录结构</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-galaxy init mongodb-install</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建完成后，目录结构如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb-install</span><br><span class=\"line\">├── defaults</span><br><span class=\"line\">│  └── main.yml</span><br><span class=\"line\">├── files</span><br><span class=\"line\">├── handlers</span><br><span class=\"line\">│  └── main.yml</span><br><span class=\"line\">├── meta</span><br><span class=\"line\">│  └── main.yml</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── tasks</span><br><span class=\"line\">│  └── main.yml</span><br><span class=\"line\">├── templates</span><br><span class=\"line\">├── tests</span><br><span class=\"line\">│  ├── inventory</span><br><span class=\"line\">│  └── test.yml</span><br><span class=\"line\">└── vars</span><br><span class=\"line\">   └── main.yml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>编辑role，相关代码参考<a href=\"https://github.com/hanqunfeng/ansible-role-mongodb\">https://github.com/hanqunfeng/ansible-role-mongodb</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>这里我们要注意两个文件</p>\n</li>\n</ul>\n<blockquote>\n<p><code>README.md</code>: 这里面配置的是role的描述信息，其会显示在<code>文档</code>一栏中<br>\n<code>meta/main.yml</code>，这里面配置的是role的作者信息</p>\n</blockquote>\n<h2 id=\"上传Role到Github\">上传Role到Github</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> mongodb-install</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;init&quot;</span></span><br><span class=\"line\">git branch -M main</span><br><span class=\"line\">git remote add origin https://github.com/hanqunfeng/ansible-role-mongodb.git</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布Role到Galaxy\">发布Role到Galaxy</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>登录<a href=\"https://galaxy.ansible.com/\">https://galaxy.ansible.com/</a>，点击<code>登录</code>，使用Github账号登录。</p>\n</li>\n<li class=\"lvl-2\">\n<p>导入Role<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/w1UxvL.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>填写Role信息<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/OnIT3a.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>查看导入状态<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/7Dghla.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>搜索Role<br>\n此时我们在角色列表中搜索关键字<code>hanqunfeng</code>，就可以搜索到我们刚刚上传的那个role了<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/lx7rCg.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>点击进去我们就可以查看角色的详细信息了</p>\n</li>\n</ul>\n<h2 id=\"修改Role\">修改Role</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>修改了role信息后，重新上传到github即可</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果同时修改了<code>README.md</code>等role信息，可以在galaxy中重新上传即可<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/PVNRGz.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"安装Role\">安装Role</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">$ ansible-galaxy role install hanqunfeng.mongodb-install</span><br><span class=\"line\">Starting galaxy role install process</span><br><span class=\"line\">- downloading role <span class=\"string\">&#x27;mongodb-install&#x27;</span>, owned by hanqunfeng</span><br><span class=\"line\">- downloading role from https://github.com/hanqunfeng/ansible-role-mongodb/archive/main.tar.gz</span><br><span class=\"line\">- extracting hanqunfeng.mongodb-install to /Users/hanqf/.ansible/roles/hanqunfeng.mongodb-install</span><br><span class=\"line\">- hanqunfeng.mongodb-install (main) was installed successfully</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新安装</span></span><br><span class=\"line\">ansible-galaxy role install --force hanqunfeng.mongodb-install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看已安装的role</span></span><br><span class=\"line\">ansible-galaxy role list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除</span></span><br><span class=\"line\">$ ansible-galaxy role remove hanqunfeng.mongodb-install</span><br><span class=\"line\">- successfully removed hanqunfeng.mongodb-install</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用Role\">使用Role</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在<code>playbook</code>中引用role</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test-mongo</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">roles:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">hanqunfeng.mongodb-install</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>执行playbook</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i hosts playbook.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换默认的变量</span></span><br><span class=\"line\">ansible-playbook -i hosts --extra-vars <span class=\"string\">&quot;mongo_port=27019&quot;</span> --extra-vars <span class=\"string\">&quot;mongo_replica_set_name=rs1&quot;</span> playbook.yml</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布指定版本到Galaxy\">发布指定版本到Galaxy</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>给角色代码打tag</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建tag，名称为 v1.0.0</span></span><br><span class=\"line\">git tag -a v1.0.0 -m <span class=\"string\">&quot;v1.0.0&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 提交tag</span></span><br><span class=\"line\">git push origin v1.0.0</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在galaxy中重新上传，注意此时在要指定tag名称<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/sESeVk.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>上传成功后，就可以在galaxy中查看到对应的版本了<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/R18rBY.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"下载指定版本的角色\">下载指定版本的角色</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意role和版本号之间用逗号隔开，不加版本号，则下载最新版本</span></span><br><span class=\"line\">$ ansible-galaxy role install hanqunfeng.mongodb-install,v1.0.0</span><br><span class=\"line\">Starting galaxy role install process</span><br><span class=\"line\">- downloading role <span class=\"string\">&#x27;mongodb-install&#x27;</span>, owned by hanqunfeng</span><br><span class=\"line\">- downloading role from https://github.com/hanqunfeng/ansible-role-mongodb/archive/v1.0.0.tar.gz</span><br><span class=\"line\">- extracting hanqunfeng.mongodb-install to /Users/hanqf/.ansible/roles/hanqunfeng.mongodb-install</span><br><span class=\"line\">- hanqunfeng.mongodb-install (v1.0.0) was installed successfully</span><br></pre></td></tr></table></figure>\n<h2 id=\"搜索角色\">搜索角色</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>除了在galaxy网站中搜索，还可以通过命令行搜索</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible-galaxy search hanqunfeng</span><br><span class=\"line\"></span><br><span class=\"line\">Found 1 roles matching your search:</span><br><span class=\"line\"></span><br><span class=\"line\"> Name                       Description</span><br><span class=\"line\"> ----                       -----------</span><br><span class=\"line\"> hanqunfeng.mongodb-install CentOS 7&amp;8 MongoDB install role</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># 或者</span></span><br><span class=\"line\"> ansible-galaxy role search hanqunfeng</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍如何将Ansible Role发布到Galaxy。 关于Ansible的介绍可以参看 Linux常用命令--Ansible 关于将Ansible Collection发布到Galaxy的详细介绍可以参看 Ansible Collection Publish To Galaxy 创建Role 在当前目录下创建一个名称为mongodb-install的role，实际上就是创建一个名称为mongodb-install的目录结构 1ansible-galaxy init mongodb-install 创建完成后，目录结构如下： 1234567891011121314151617mongodb-install├── defaults│ └── main.yml├── files├── handlers│ └── main.yml├── meta│ └── main.yml├── README.md├── tasks│ └── main.yml├── templates├── tests│ ├── inventory│ └── test.yml└── vars └── main.yml 编辑role，相关代码参考https://github.com/hanqunfeng/ansible-role-mongodb 这里我们要注意两个文件 README.md: 这里面配置的是role的描述信息，其会显示在文档一栏中 meta/main.yml，这里面配置的是role的作者信息 上传Role到Github 1234567cd mongodb-installgit initgit add .git commit -m &quot;init&quot;git branch -M maingit remote add origin https://github.com/hanqunfeng/ansible-role-mongodb.gitgit push -u origin main 发布Role到Galaxy 登录https://galaxy.ansible.com/，点击登录，使用Github账号登录。 导入Role 填写Role信息 查看导入状态 搜索Role 此时我们在角色列表中搜索关键字hanqunfeng，就可以搜索到我们刚刚上传的那个role了 点击进去我们就可以查看角色的详细信息了 修改Role 修改了role信息后，重新上传到github即可 如果同时修改了README.md等role信息，可以在galaxy中重新上传即可 安装Role 1234567891011121314151617# 安装$ ansible-galaxy role install hanqunfeng.mongodb-installStarting galaxy role install process- downloading role &#x27;mongodb-install&#x27;, owned by hanqunfeng- downloading role from https://github.com/hanqunfeng/ansible-role-mongodb/archive/main.tar.gz- extracting hanqunfeng.mongodb-install to /Users/hanqf/.ansible/roles/hanqunfeng.mongodb-install- hanqunfeng.mongodb-install (main) was installed successfully# 重新安装ansible-galaxy role install --force hanqunfeng.mongodb-install# 查看已安装的roleansible-galaxy role list# 删除$ ansible-galaxy role remove hanqunfeng.mongodb-install- successfully removed hanqunfeng.mongodb-install 使用Role 在playbook中引用role 12345---- hosts: test-mongo become: yes # 切换到root用户下执行 roles: - hanqunfeng.mongodb-install 执行playbook 1234ansible-playbook -i hosts playbook.yml# 替换默认的变量ansible-playbook -i hosts --extra-vars &quot;mongo_port=27019&quot; --extra-vars &quot;mongo_replica_set_name=rs1&quot; playbook.yml 发布指定版本到Galaxy 给角色代码打tag 1234# 创建tag，名称为 v1.0.0git tag -a v1.0.0 -m &quot;v1.0.0&quot;# 提交taggit push origin v1.0.0 在galaxy中重新上传，注意此时在要指定tag名称 上传成功后，就可以在galaxy中查看到对应的版本了 下载指定版本的角色 1234567# 注意role和版本号之间用逗号隔开，不加版本号，则下载最新版本$ ansible-galaxy role install hanqunfeng.mongodb-install,v1.0.0Starting galaxy role install process- downloading role &#x27;mongodb-install&#x27;, owned by hanqunfeng- downloading role from https://github.com/hanqunfeng/ansible-role-mongodb/archive/v1.0.0.tar.gz- extracting hanqunfeng.mongodb-install to /Users/hanqf/.ansible/roles/hanqunfeng.mongodb-install- hanqunfeng.mongodb-install (v1.0.0) was installed successfully 搜索角色 除了在galaxy网站中搜索，还可以通过命令行搜索 12345678910$ ansible-galaxy search hanqunfengFound 1 roles matching your search: Name Description ---- ----------- hanqunfeng.mongodb-install CentOS 7&amp;8 MongoDB install role # 或者 ansible-galaxy role search hanqunfeng","summary":"摘要 本文介绍如何将Ansible Role发布到Galaxy。 关于Ansible的介绍可以参看 Linux常用命令--Ansible 关于将Ansible Collection发布到Galaxy的详细介绍可以参看 Ansible Collection Publish To Galaxy","date_published":"2024-03-26T13:30:05.000Z","tags":["技术","linux","linux常用命令","Ansible","linux常用命令","Ansible"]},{"id":"https://blog.hanqunfeng.com/2024/03/19/linux-command15-ansible/","url":"https://blog.hanqunfeng.com/2024/03/19/linux-command15-ansible/","title":"Linux常用命令--Ansible","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍Ansible的安装和使用。</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于CentOS8。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"Ansible简介\">Ansible简介</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible 是一个开源的自动化运维工具，它基于 Python 语言开发，支持跨平台，可以运行在 Linux、Unix、Mac OS X、Windows 等多种系统环境。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Ansible简单易用，只需要在控制主机上安装 Ansible 并在被管理主机上安装 Python 2.6 或更高版本即可（现有的开源Linux系统基本都自带了Python ，所以相当于远程主机什么都不需要安装），就可以管理远程主机对其进行自动化配置、编排高级工作流程以支持应用程序部署、系统更新等。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Ansible可以用来管理Linux、Unix、Windows、OpenStack、AWS、GCP、OpenShift、Kubernetes等系统环境。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Ansible官网文档：<a href=\"https://docs.ansible.com/ansible/latest/\">https://docs.ansible.com/ansible/latest/</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>Ansible中文权威指南：<a href=\"https://ansible-tran.readthedocs.io/en/latest/index.html\">https://ansible-tran.readthedocs.io/en/latest/index.html</a></p>\n</li>\n</ul>\n<h2 id=\"Ansible安装\">Ansible安装</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible安装方式有多种，这里介绍通过pip安装，当前系统中的python版本为python3.9。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install ansible</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>如果尚未安装pip，可以通过下面的方法进行安装</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\">python3 get-pip.py</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装完成后，可以查看一下版本</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible --version</span><br><span class=\"line\">ansible [core 2.15.9]</span><br><span class=\"line\">  config file = None</span><br><span class=\"line\">  configured module search path = [<span class=\"string\">&#x27;/root/.ansible/plugins/modules&#x27;</span>, <span class=\"string\">&#x27;/usr/share/ansible/plugins/modules&#x27;</span>]</span><br><span class=\"line\">  ansible python module location = /usr/local/lib/python3.9/site-packages/ansible</span><br><span class=\"line\">  ansible collection location = /root/.ansible/collections:/usr/share/ansible/collections</span><br><span class=\"line\">  executable location = /usr/local/bin/ansible</span><br><span class=\"line\">  python version = 3.9.16 (main, Sep  8 2023, 00:00:00) [GCC 11.4.1 20230605 (Red Hat 11.4.1-2)] (/usr/bin/python3)</span><br><span class=\"line\">  jinja version = 3.1.3</span><br><span class=\"line\">  libyaml = True</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible常用参数：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-u</td>\n<td>指定连接到主机的用户名</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>指定连接hosts文件的路径</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>指定连接到主机的密码</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>指定模块名称，可以指定模块的参数，比如指定shell模块的参数：-m shell -a ‘ls -l’</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>指定模块的参数，比如指定shell模块的参数：-m shell -a ‘ls -l’</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>指定附加参数，比如指定shell端口： -e ‘ansible_port=22’</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>切换到root权限</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>指定并发连接数，默认为5，即可以同时管理5台主机</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Ansible的配置文件\">Ansible的配置文件</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ansible的相关配置都是通过一个名为<code>ansible.cfg</code>的配置文件进行配置的，但我们通过pip安装是不会默认创建它的，实际上不创建这个配置文件也不影响ansible的执行，因为其会使用一些默认的配置，并且在大多数场景下默认的配置就能满足需求。</p>\n</li>\n<li class=\"lvl-2\">\n<p>ansible查找配置文件的顺序，优先级由上到下逐渐降低</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* ANSIBLE_CONFIG (一个环境变量)</span><br><span class=\"line\">* ansible.cfg (位于当前目录中)</span><br><span class=\"line\">* .ansible.cfg (位于家目录中)</span><br><span class=\"line\">* /etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>如果需要修改默认配置，我们可以通过如下命令创建一份配置文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此时会创建一份所有配置项都以 ; 开头的配置文件，我们要修改那个配置，就删除其前面的 ; ，然后修改其值即可</span></span><br><span class=\"line\">ansible-config init --disabled &gt; ansible.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前的生效配置，注意绿色为默认配置，黄色为被修改的配置</span></span><br><span class=\"line\">ansible-config dump</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看帮助文件</span></span><br><span class=\"line\">ansible-config list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看默认配置项的值和注释说明</span></span><br><span class=\"line\">ansible-config init list</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用配置详解</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通用默认配置段；</span></span><br><span class=\"line\">[defaults]</span><br><span class=\"line\"><span class=\"comment\"># 被控端IP或者DNS列表；</span></span><br><span class=\"line\">inventory=/etc/ansible/hosts</span><br><span class=\"line\"><span class=\"comment\"># Ansible默认搜寻模块的位置；</span></span><br><span class=\"line\">library=&#123;&#123; ANSIBLE_HOME ~ <span class=\"string\">&quot;/plugins/modules:/usr/share/ansible/plugins/modules&quot;</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"comment\"># 并行进程数；</span></span><br><span class=\"line\">forks=5</span><br><span class=\"line\"><span class=\"comment\"># 是否允许切换为其它用户</span></span><br><span class=\"line\">become=False</span><br><span class=\"line\"><span class=\"comment\"># become=True时，通过sudo进行切换</span></span><br><span class=\"line\">become_method=sudo</span><br><span class=\"line\"><span class=\"comment\"># 切换为root</span></span><br><span class=\"line\">become_user=root</span><br><span class=\"line\"><span class=\"comment\"># 搜索roles的路径</span></span><br><span class=\"line\">roles_path=&#123;&#123; ANSIBLE_HOME ~ <span class=\"string\">&quot;/roles:/usr/share/ansible/roles:/etc/ansible/roles&quot;</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"comment\"># 日志路径，默认不输出</span></span><br><span class=\"line\">log_path=</span><br><span class=\"line\"><span class=\"comment\"># Ansible命令执行默认的模块；</span></span><br><span class=\"line\">module_name=<span class=\"built_in\">command</span></span><br><span class=\"line\"><span class=\"comment\"># 是否检查远程主机密钥，默认为True，如果希望不检查可以将其设为False，可以加快连接速度</span></span><br><span class=\"line\">host_key_checking=True</span><br></pre></td></tr></table></figure>\n<h2 id=\"Ansible的hosts配置\">Ansible的hosts配置</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>需要创建hosts文件，使用ansible时，ansible会到hosts文件中查找对应的远程主机配置，默认的查找路径为<code>/etc/ansible/hosts</code>，也可以通过<code>ansible.cfg</code>修改默认配置</p>\n</li>\n</ul>\n<h3 id=\"hosts文件格式1\">hosts文件格式1</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>hosts文件格式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以配置ip或主机名</span></span><br><span class=\"line\">[webservers] <span class=\"comment\"># 分组名称</span></span><br><span class=\"line\">10.10.2.45</span><br><span class=\"line\">10.10.2.46</span><br><span class=\"line\">[dbservers]</span><br><span class=\"line\">10.10.2.47</span><br><span class=\"line\">10.10.2.48</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>命令行里加上连接参数</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行命令，多个ip逗号分隔</span></span><br><span class=\"line\">ansible -u username -m ping --private-key=~/.ssh/id_rsa -e <span class=\"string\">&#x27;ansible_port=22&#x27;</span> 10.10.2.45,10.10.2.46</span><br><span class=\"line\"><span class=\"comment\"># 指定hosts文件路径</span></span><br><span class=\"line\">ansible -i hosts -u username -m ping --private-key=~/.ssh/id_rsa -e <span class=\"string\">&#x27;ansible_port=22&#x27;</span> 10.10.2.45,10.10.2.46</span><br></pre></td></tr></table></figure>\n<h3 id=\"hosts文件格式2\">hosts文件格式2</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>hosts文件里也可以配置连接参数</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[webservers]</span><br><span class=\"line\">10.10.2.45 ansible_ssh_user=username ansible_ssh_private_key=~/.ssh/id_rsa ansible_ssh_port=22</span><br><span class=\"line\">10.10.2.46 ansible_ssh_user=username ansible_ssh_private_key=~/.ssh/id_rsa ansible_ssh_port=22</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时命令行连接时就不需要指定连接参数了</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible -i hosts -u username -m ping 10.10.2.45,10.10.2.46</span><br></pre></td></tr></table></figure>\n<h3 id=\"hosts文件格式3\">hosts文件格式3</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ansible是基于ssh建立连接的，所以只要ssh能连上远程主机，ansible就可以管理远程主机，如果我们为ssh配置config文件，那么ansible就可以直接将config里的Host名称配置到hosts文件里，这样就不需要配置连接参数了，同时此时也可以支持跳板机。关于ssh的config详细说明可以参考<a href=\"/2023/02/28/linux-command02-ssh/\" title=\"Linux常用命令--ssh、scp与免密登录\">Linux常用命令--ssh、scp与免密登录</a></p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">配置~/.ssh/config</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 跳板机</span></span><br><span class=\"line\">Host forward</span><br><span class=\"line\">    User ec2-user</span><br><span class=\"line\">    HostName 53.22.227.200</span><br><span class=\"line\">    Port 22</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程主机</span></span><br><span class=\"line\">Host remote-host</span><br><span class=\"line\">    User ec2-user</span><br><span class=\"line\">    HostName 10.9.5.123</span><br><span class=\"line\">    Port 22</span><br><span class=\"line\">    IdentityFile ~/.ssh/key.pem</span><br><span class=\"line\">    ProxyCommand ssh forward -W %h:%p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程主机 ,10.9网段的所有主机</span></span><br><span class=\"line\">Host 10.9.*</span><br><span class=\"line\">    User ec2-user</span><br><span class=\"line\">    Port 22</span><br><span class=\"line\">    IdentityFile ~/.ssh/key.pem</span><br><span class=\"line\">    ProxyCommand ssh forward -W %h:%p</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">hosts文件</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[webservers]</span><br><span class=\"line\">forward     <span class=\"comment\"># 与config中配置的Host名称一致</span></span><br><span class=\"line\">remote-host <span class=\"comment\"># 与config中配置的Host名称一致</span></span><br><span class=\"line\">10.9.5.123     <span class=\"comment\"># 匹配config中的网段</span></span><br><span class=\"line\">10.9.5.124     <span class=\"comment\"># 匹配config中的网段</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">命令行</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过指定主机名或ip</span></span><br><span class=\"line\">ansible -m ping remote-host</span><br><span class=\"line\">ansible -m ping 10.9.5.123</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通配符匹配，此时在匹配hosts中123和124</span></span><br><span class=\"line\">ansible -m ping  <span class=\"string\">&quot;10.9.5.*&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过分组名</span></span><br><span class=\"line\">ansible -m ping  webservers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过all指定hosts里的全部主机</span></span><br><span class=\"line\">ansible -m ping  all</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"查看hosts配置相关命令\">查看hosts配置相关命令</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>列出所有组的配置ip信息</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all --list-hosts</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看当前hosts中配置所有组名称</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible localhost -m debug -a <span class=\"string\">&#x27;var=groups.keys()&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>列出指定组的配置ip信息</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible dbservers --list-hosts</span><br></pre></td></tr></table></figure>\n<h2 id=\"Ansible模块\">Ansible模块</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>列出所有模块</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-doc -l</span><br><span class=\"line\"><span class=\"comment\"># 也可以指定模块名称</span></span><br><span class=\"line\">ansible-doc -l | grep -i shell</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看指定模块的参数信息，如下查看shell模块的参数说明</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-doc -s shell</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看模块的帮助信息，如下查看shell模块的帮助信息，这与官方文档一致:<a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html#ansible-collections-ansible-builtin-shell-module\">shell模块</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-doc shell</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible管理工具常用的模块：<code>command、shell、file、user、copy、service、yum、synchronze、cron、setup、ping</code>等。可以在命令行里指定各个模块的参数(<code>ansible</code>命令)，也可以将参数配置到yml文件里，然后在命令行里指定yml文件(<code>ansible-playbook</code>命令)，下面会结合两种方式一块介绍。网上有大把的关于ansible命令的使用说明，这里只简单介绍几个模块的使用方法，其他模块的使用方法可以参考<a href=\"https://docs.ansible.com/ansible/latest/collections/index.html#plugin-list\">ansible模块</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>下面介绍的都是<a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/index.html#plugins-in-ansible-builtin\">ansible核心模块:ansible-core</a></p>\n</li>\n</ul>\n<h3 id=\"debug模块\">debug模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/debug_module.html#ansible-collections-ansible-builtin-debug-module\">debug模块</a>此模块在执行期间打印语句，可用于调试变量或表达式</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过命令行执行命令</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m debug -a <span class=\"string\">&#x27;msg=&quot;System HostName: &#123;&#123; inventory_hostname &#125;&#125;&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通过yml文件执行命令</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># debug.yml</span></span><br><span class=\"line\"><span class=\"string\">---</span>  <span class=\"comment\"># yml文件的开头，规定playbook的yml文件格式，必须以---开头(必须)，...结尾(非必须)</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Debug</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Debug</span></span><br><span class=\"line\">      <span class=\"attr\">debug:</span></span><br><span class=\"line\">        <span class=\"attr\">msg:</span> <span class=\"string\">&quot;System HostName: <span class=\"template-variable\">&#123;&#123; inventory_hostname &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s debug</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>msg</td>\n<td>打印消息，支持变量</td>\n</tr>\n<tr>\n<td>var</td>\n<td>打印消息，支持变量，注册变量  , 与msg互斥</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ping模块\">ping模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/ping_module.html#ansible-collections-ansible-builtin-ping-module\">ping模块</a>用于测试主机的连通性，它会尝试连接到主机，验证可用的python，并在成功时返回“pong”，可以指定主机名或ip，也可以指定分组名，也可以指定all</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过命令行执行命令</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m ping</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通过yml文件执行命令</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ping.yml</span></span><br><span class=\"line\"><span class=\"string\">---</span>  <span class=\"comment\"># yml文件的开头，规定playbook的yml文件格式，必须以---开头(必须)，...结尾(非必须)</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Ping</span> <span class=\"string\">web</span> <span class=\"string\">servers</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span>  <span class=\"comment\"># ip或组名，也可以配置all：匹配全部主机</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Ping</span> <span class=\"string\">the</span> <span class=\"string\">servers</span></span><br><span class=\"line\">      <span class=\"attr\">ping:</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">command_output</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">显示命令输出</span></span><br><span class=\"line\">      <span class=\"attr\">debug:</span></span><br><span class=\"line\">        <span class=\"attr\">var:</span> <span class=\"string\">command_output.stdout_lines</span> <span class=\"comment\"># 注册变量输出要使用 var</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>ansible-playbook</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">通过ansible-playbook命令，可以指定yml文件</li>\n<li class=\"lvl-2\">ansible-playbook相关命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查yml文件语法格式</span></span><br><span class=\"line\">ansible-playbook --syntax-check ping.yml</span><br><span class=\"line\"><span class=\"comment\"># 列出hosts</span></span><br><span class=\"line\">ansible-playbook --list-hosts ping.yml</span><br><span class=\"line\"><span class=\"comment\"># 列出tags</span></span><br><span class=\"line\">ansible-playbook --list-tags ping.yml</span><br><span class=\"line\"><span class=\"comment\"># 列出task</span></span><br><span class=\"line\">ansible-playbook --list-tasks ping.yml</span><br><span class=\"line\"><span class=\"comment\"># 指定执行主机：--limit 或 -l，其必须是yml中hosts指定的子集</span></span><br><span class=\"line\">ansible-playbook ping.yml --<span class=\"built_in\">limit</span> 192.168.20.23</span><br><span class=\"line\"><span class=\"comment\"># 执行命令</span></span><br><span class=\"line\">ansible-playbook ping.yml</span><br><span class=\"line\"><span class=\"comment\"># 模拟执行，Ansible 会模拟执行任务，并输出执行结果，但不会对目标主机做出任何更改</span></span><br><span class=\"line\"><span class=\"comment\"># 注意这个命令运行不报错并不能说明一定可以执行成功，因为这个命令是模拟执行的</span></span><br><span class=\"line\">ansible-playbook ping.yml --check</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"setup模块\">setup模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>该模块用于采集被管理设备信息并返回给服务端，后面跟<code>--tree &lt;目录&gt;</code>，可以将采集信息以ip为文件名保存至指定目录下</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看全部信息</span></span><br><span class=\"line\">ansible all -m setup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只查看内存信息</span></span><br><span class=\"line\">ansible all -m setup -a <span class=\"string\">&quot;filter=*mem*&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只查看网络信息</span></span><br><span class=\"line\">ansible all -m setup -a <span class=\"string\">&quot;gather_subset=network&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存信息至指定目录，这样会每个ip对应一个文件</span></span><br><span class=\"line\">ansible all -m setup --tree ./</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s setup</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gather_subset</td>\n<td>指定要收集的系统信息的子集。可以是 all（所有信息）、network（网络信息）、hardware（硬件信息）等。默认为 all。</td>\n</tr>\n<tr>\n<td>gather_timeout</td>\n<td>设置信息收集的超时时间，单位为秒。默认为 10 秒。</td>\n</tr>\n<tr>\n<td>filter</td>\n<td>指定要收集的系统信息的过滤条件。可以是一个或多个标签，只收集匹配的信息。</td>\n</tr>\n<tr>\n<td>fact_path</td>\n<td>指定自定义 facts 文件的路径。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>这里重点介绍一下gather_subset</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all: 收集所有可用的系统信息。</span><br><span class=\"line\">all_ipv4_addresses: 收集所有 IPv4 地址信息。</span><br><span class=\"line\">all_ipv6_addresses: 收集所有 IPv6 地址信息。</span><br><span class=\"line\">apparmor: 收集 AppArmor 相关信息。</span><br><span class=\"line\">architecture: 收集系统架构信息。</span><br><span class=\"line\">caps: 收集进程的 capabilities 信息。</span><br><span class=\"line\">chroot: 收集 chroot 环境的信息。</span><br><span class=\"line\">cmdline: 收集内核命令行参数信息。</span><br><span class=\"line\">date_time: 收集日期和时间信息。</span><br><span class=\"line\">default_ipv4: 收集默认的 IPv4 地址信息。</span><br><span class=\"line\">default_ipv6: 收集默认的 IPv6 地址信息。</span><br><span class=\"line\">devices: 收集系统设备信息。</span><br><span class=\"line\">distribution: 收集发行版信息。</span><br><span class=\"line\">distribution_major_version: 收集发行版主版本号。</span><br><span class=\"line\">distribution_release: 收集发行版发行号。</span><br><span class=\"line\">distribution_version: 收集发行版版本信息。</span><br><span class=\"line\">dns: 收集 DNS 配置信息。</span><br><span class=\"line\">effective_group_ids: 收集有效组 ID 信息。</span><br><span class=\"line\">effective_user_id: 收集有效用户 ID 信息。</span><br><span class=\"line\">env: 收集环境变量信息。</span><br><span class=\"line\">facter: 收集 Facter 信息。</span><br><span class=\"line\">fips: 收集 FIPS 相关信息。</span><br><span class=\"line\">hardware: 收集硬件信息。</span><br><span class=\"line\">interfaces: 收集网络接口信息。</span><br><span class=\"line\">is_chroot: 收集是否处于 chroot 环境的信息。</span><br><span class=\"line\">iscsi: 收集 iSCSI 配置信息。</span><br><span class=\"line\">kernel: 收集内核信息。</span><br><span class=\"line\">local: 收集本地配置信息。</span><br><span class=\"line\">lsb: 收集 LSB 发行版信息。</span><br><span class=\"line\">machine: 收集机器信息。</span><br><span class=\"line\">machine_id: 收集机器 ID 信息。</span><br><span class=\"line\">mounts: 收集挂载点信息。</span><br><span class=\"line\">network: 收集网络相关信息。</span><br><span class=\"line\">ohai: 收集 Ohai 信息。</span><br><span class=\"line\">os_family: 收集操作系统家族信息。</span><br><span class=\"line\">pkg_mgr: 收集包管理器信息。</span><br><span class=\"line\">platform: 收集平台信息。</span><br><span class=\"line\">processor: 收集处理器信息。</span><br><span class=\"line\">processor_cores: 收集处理器核心数信息。</span><br><span class=\"line\">processor_count: 收集处理器数量信息。</span><br><span class=\"line\">python: 收集 Python 相关信息。</span><br><span class=\"line\">python_version: 收集 Python 版本信息。</span><br><span class=\"line\">real_user_id: 收集真实用户 ID 信息。</span><br><span class=\"line\">selinux: 收集 SELinux 配置信息。</span><br><span class=\"line\">service_mgr: 收集服务管理器信息。</span><br><span class=\"line\">ssh_host_key_dsa_public: 收集 SSH DSA 公钥信息。</span><br><span class=\"line\">ssh_host_key_ecdsa_public: 收集 SSH ECDSA 公钥信息。</span><br><span class=\"line\">ssh_host_key_ed25519_public: 收集 SSH ED25519 公钥信息。</span><br><span class=\"line\">ssh_host_key_rsa_public: 收集 SSH RSA 公钥信息。</span><br><span class=\"line\">ssh_host_pub_keys: 收集 SSH 主机公钥信息。</span><br><span class=\"line\">ssh_pub_keys: 收集 SSH 用户公钥信息。</span><br><span class=\"line\">system: 收集系统相关信息。</span><br><span class=\"line\">system_capabilities: 收集系统能力信息。</span><br><span class=\"line\">system_capabilities_enforced: 收集系统能力强制信息。</span><br><span class=\"line\">user: 收集用户账户信息。</span><br><span class=\"line\">user_dir: 收集用户目录信息。</span><br><span class=\"line\">user_gecos: 收集用户 GECOS 信息。</span><br><span class=\"line\">user_gid: 收集用户组 ID 信息。</span><br><span class=\"line\">user_id: 收集用户 ID 信息。</span><br><span class=\"line\">user_shell: 收集用户 Shell 信息。</span><br><span class=\"line\">user_uid: 收集用户 UID 信息。</span><br><span class=\"line\">virtual: 收集虚拟化相关信息。</span><br><span class=\"line\">virtualization_role: 收集虚拟化角色信息。</span><br><span class=\"line\">virtualization_type: 收集虚拟化类型信息。</span><br></pre></td></tr></table></figure>\n<h3 id=\"command模块\">command模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html#ansible-collections-ansible-builtin-command-module\">command模块</a>为ansible默认模块，主要用于执行Linux基础命令，可以执行远程服务器命令执行、任务执行等操作。</p>\n</li>\n<li class=\"lvl-2\">\n<p>command模块不支持管道符号、变量，只能运行简单命令，复杂命令需要使用shell模块</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例1</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;df -hT&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># command.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上运行</span> <span class=\"string\">df</span> <span class=\"string\">-hT</span> <span class=\"string\">命令</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">执行</span> <span class=\"string\">df</span> <span class=\"string\">-hT</span> <span class=\"string\">命令</span></span><br><span class=\"line\">      <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">&quot;df -hT&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">command_output</span> <span class=\"comment\"># 保存命令执行结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">显示命令输出</span></span><br><span class=\"line\">      <span class=\"attr\">debug:</span></span><br><span class=\"line\">        <span class=\"attr\">var:</span> <span class=\"string\">command_output.stdout_lines</span> <span class=\"comment\"># 输出命令执行结果</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>示例2：参数chdir：切换到指定目录后再运行命令</p>\n</li>\n</ul>\n<blockquote>\n<p>可以通过<code>ansible-doc -s command</code>查看其支持的参数</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;chdir=/tmp ls -l&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># command2.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上列出</span> <span class=\"string\">/tmp</span> <span class=\"string\">目录的内容</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">切换到</span> <span class=\"string\">/tmp</span> <span class=\"string\">目录并列出内容</span></span><br><span class=\"line\">      <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/tmp</span>       <span class=\"comment\"># 切换到 /tmp 目录</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">ls</span> <span class=\"string\">-l</span>        <span class=\"comment\"># 执行命令</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">command_output</span>  <span class=\"comment\"># 保存命令执行结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">显示命令输出</span></span><br><span class=\"line\">      <span class=\"attr\">debug:</span></span><br><span class=\"line\">        <span class=\"attr\">var:</span> <span class=\"string\">command_output.stdout_lines</span> <span class=\"comment\"># 输出命令执行结果</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s command</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>argv</td>\n<td>要执行的命令，可以是字符串形式或列表形式。</td>\n</tr>\n<tr>\n<td>chdir</td>\n<td>在执行命令之前切换到的目录。</td>\n</tr>\n<tr>\n<td>cmd</td>\n<td>要执行的命令。</td>\n</tr>\n<tr>\n<td>creates</td>\n<td>指定一个文件名或模式，如果匹配的文件已经存在，则不执行命令。</td>\n</tr>\n<tr>\n<td>expand_argument_vars</td>\n<td>是否展开作为变量的参数。默认为 true，表示展开变量。</td>\n</tr>\n<tr>\n<td>free_form</td>\n<td>以字符串形式指定要执行的命令。这个参数并不存在，但是 command 模块接受自由形式的字符串作为命令。</td>\n</tr>\n<tr>\n<td>removes</td>\n<td>指定一个文件名或模式，如果匹配的文件存在，则执行命令。</td>\n</tr>\n<tr>\n<td>stdin</td>\n<td>将命令的标准输入设置为指定的值。</td>\n</tr>\n<tr>\n<td>stdin_add_newline</td>\n<td>是否在标准输入数据后添加换行符。</td>\n</tr>\n<tr>\n<td>strip_empty_ends</td>\n<td>是否从标准输出的末尾剥离空行。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"shell模块\">shell模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html#ansible-collections-ansible-builtin-shell-module\">shell模块</a>与command模块类似，可以执行远程服务器命令执行、任务执行等操作，但是shell模块支持管道符号、变量，可以执行复杂命令</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看进程</span></span><br><span class=\"line\">ansible webservers -m shell -a <span class=\"string\">&quot;ps -ef | grep java | grep -v &#x27;grep&#x27;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改密码</span></span><br><span class=\"line\">ansible webservers -m shell -a <span class=\"string\">&quot; echo 123456 | passwd --stdin ansible&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># shell.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上查找</span> <span class=\"string\">Java</span> <span class=\"string\">进程</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">执行</span> <span class=\"string\">ps</span> <span class=\"string\">-ef</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">java</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">&#x27;grep&#x27;</span> <span class=\"string\">命令</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">ps</span> <span class=\"string\">-ef</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">java</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">&#x27;grep&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">command_output</span>  <span class=\"comment\"># 保存命令执行结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">显示命令输出</span></span><br><span class=\"line\">      <span class=\"attr\">debug:</span></span><br><span class=\"line\">        <span class=\"attr\">var:</span> <span class=\"string\">command_output.stdout_lines</span> <span class=\"comment\"># 输出命令执行结果</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s shell</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>argv</td>\n<td>要执行的命令，可以是字符串形式或列表形式。</td>\n</tr>\n<tr>\n<td>chdir</td>\n<td>在执行命令之前切换到的目录。</td>\n</tr>\n<tr>\n<td>cmd</td>\n<td>要执行的命令。</td>\n</tr>\n<tr>\n<td>creates</td>\n<td>指定一个文件名或模式，如果匹配的文件已经存在，则不执行命令。</td>\n</tr>\n<tr>\n<td>executable</td>\n<td>用于执行命令的可执行程序，默认情况下为 /bin/sh。</td>\n</tr>\n<tr>\n<td>free_form</td>\n<td>以字符串形式指定要执行的命令。这个参数并不存在，但是 shell 模块接受自由形式的字符串作为命令。</td>\n</tr>\n<tr>\n<td>removes</td>\n<td>指定一个文件名或模式，如果匹配的文件存在，则执行命令。</td>\n</tr>\n<tr>\n<td>stdin</td>\n<td>将命令的标准输入设置为指定的值。</td>\n</tr>\n<tr>\n<td>stdin_add_newline</td>\n<td>是否在标准输入数据后添加换行符。</td>\n</tr>\n<tr>\n<td>strip_empty_ends</td>\n<td>是否从标准输出的末尾剥离空行。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"file模块\">file模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html#ansible-collections-ansible-builtin-file-module\">file模块</a>主要用于文件和目录的管理，可以创建、删除、修改文件和目录，可以指定文件或目录的属性，可以指定文件或目录的权限，可以指定文件或目录的owner、group、mode等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：创建目录</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m file -a <span class=\"string\">&quot;path=/tmp/`date +%F`  state=directory  mode=755&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上创建日期格式的目录</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">创建目录</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&quot;/tmp/<span class=\"template-variable\">&#123;&#123; ansible_date_time.date &#125;&#125;</span>&quot;</span> <span class=\"comment\"># ansible_date_time.date表示当前时间获取的日期，格式为YYYY-MM-DD</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">directory</span> <span class=\"comment\"># 创建目录，如果目录已经存在则不创建</span></span><br><span class=\"line\">        <span class=\"attr\">mode:</span> <span class=\"string\">&quot;755&quot;</span> <span class=\"comment\"># 设置目录权限</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s file</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>path</td>\n<td>文件或目录的路径。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>文件或目录的状态。可选值包括 file（文件）、directory（目录）、link（符号链接）。默认为 file。</td>\n</tr>\n<tr>\n<td>owner</td>\n<td>文件或目录的所有者。</td>\n</tr>\n<tr>\n<td>group</td>\n<td>文件或目录的所属组。</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>文件或目录的权限。</td>\n</tr>\n<tr>\n<td>src</td>\n<td>源文件路径，用于复制文件或创建链接。</td>\n</tr>\n<tr>\n<td>dest</td>\n<td>目标文件路径，用于复制文件或创建链接。</td>\n</tr>\n<tr>\n<td>follow</td>\n<td>是否遵循符号链接。如果为 yes，则会遵循符号链接进行操作。默认为 yes。</td>\n</tr>\n<tr>\n<td>selevel</td>\n<td>文件或目录的 SELinux 安全上下文。</td>\n</tr>\n<tr>\n<td>serole</td>\n<td>文件或目录的 SELinux 角色。</td>\n</tr>\n<tr>\n<td>setype</td>\n<td>文件或目录的 SELinux 类型。</td>\n</tr>\n<tr>\n<td>seuser</td>\n<td>文件或目录的 SELinux 用户。</td>\n</tr>\n<tr>\n<td>unsafe_writes</td>\n<td>是否启用不安全的写入模式。如果为 yes，则在写入文件之前不会创建备份。默认为 no。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>这里重点说一下<code>state</code></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file：表示要求目标主机上存在指定的文件。如果文件已经存在，则不执行任何操作；如果文件不存在，则会创建它。</span><br><span class=\"line\">directory：表示要求目标主机上存在指定的目录。如果目录已经存在，则不执行任何操作；如果目录不存在，则会创建它。</span><br><span class=\"line\">link：表示要求目标主机上存在指定的符号链接。如果符号链接已经存在，则不执行任何操作；如果符号链接不存在，则会创建它。</span><br><span class=\"line\">hard：创建硬链接</span><br><span class=\"line\">touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间</span><br><span class=\"line\">absent：删除目录、文件或者取消链接文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"copy模块\">copy模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.html#ansible-collections-ansible-builtin-copy-module\">copy模块</a>主要用于将文件复制到远程服务器，可以指定文件的源路径、目标路径、owner、group、mode等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：复制文件到指定目录</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -b 切换到root用户下执行</span></span><br><span class=\"line\">ansible webservers -m copy -a <span class=\"string\">&quot;src=/tmp/a.txt dest=/tmp/ owner=root group=root mode=755&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># copy.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上复制文件</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span> <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">复制文件</span></span><br><span class=\"line\">      <span class=\"attr\">copy:</span></span><br><span class=\"line\">        <span class=\"attr\">src:</span> <span class=\"string\">&quot;/tmp/a.txt&quot;</span> <span class=\"comment\"># 源文件路径</span></span><br><span class=\"line\">        <span class=\"attr\">dest:</span> <span class=\"string\">&quot;/tmp/&quot;</span>     <span class=\"comment\"># 目标文件路径</span></span><br><span class=\"line\">        <span class=\"attr\">owner:</span> <span class=\"string\">root</span>       <span class=\"comment\"># 指定文件owner</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">root</span>       <span class=\"comment\"># 指定文件group</span></span><br><span class=\"line\">        <span class=\"attr\">mode:</span> <span class=\"string\">&quot;755&quot;</span>       <span class=\"comment\"># 指定文件权限</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s copy</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>src</td>\n<td>源文件的路径。</td>\n</tr>\n<tr>\n<td>dest</td>\n<td>目标文件的路径。</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>是否备份目标文件。如果为 yes，则在复制目标文件之前会创建一个备份文件。默认为 yes。</td>\n</tr>\n<tr>\n<td>content</td>\n<td>要写入目标文件的内容。</td>\n</tr>\n<tr>\n<td>directory_mode</td>\n<td>目标目录的权限。只有当目标是一个目录时才会生效。</td>\n</tr>\n<tr>\n<td>follow</td>\n<td>是否跟随符号链接。如果为 yes，则会跟随符号链接进行操作。默认为 yes。</td>\n</tr>\n<tr>\n<td>force</td>\n<td>是否强制覆盖目标文件。如果为 yes，则强制复制源文件，即使目标文件已经存在。默认为 no。</td>\n</tr>\n<tr>\n<td>group</td>\n<td>目标文件的所属组。</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>目标文件的权限。</td>\n</tr>\n<tr>\n<td>owner</td>\n<td>目标文件的所有者。</td>\n</tr>\n<tr>\n<td>remote_src</td>\n<td>指定源文件是否在远程主机上。如果为 yes，表示源文件在远程主机上。默认为 no。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"fetch模块\">fetch模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fetch_module.html#ansible-collections-ansible-builtin-fetch-module\">fetch模块</a>主要用于将文件从远程服务器复制到本地，可以指定文件的源路径、目标路径、owner、group、mode等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：将文件从远程服务器复制到本地</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m fetch -a <span class=\"string\">&quot;src=/tmp/a.txt dest=/tmp/ flat=yes&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># fetch.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上将文件从远程服务器复制到本地</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">复制文件</span></span><br><span class=\"line\">      <span class=\"attr\">fetch:</span></span><br><span class=\"line\">        <span class=\"attr\">src:</span> <span class=\"string\">&quot;/tmp/a.txt&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">dest:</span> <span class=\"string\">&quot;/tmp/&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">flat:</span> <span class=\"literal\">yes</span> <span class=\"comment\"># flat: yes  # 将文件复制到dest目录下，不创建目录结构</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s fetch</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>src</td>\n<td>远程主机上要拉取的文件的路径。</td>\n</tr>\n<tr>\n<td>dest</td>\n<td>本地主机上文件的目标路径。</td>\n</tr>\n<tr>\n<td>flat</td>\n<td>是否将文件放置在顶层目录中。如果为 yes，则所有文件都将放置在一个目录中。默认为 no。</td>\n</tr>\n<tr>\n<td>fail_on_missing</td>\n<td>如果为 yes，则在源文件不存在时失败。默认为 yes。</td>\n</tr>\n<tr>\n<td>validate_checksum</td>\n<td>是否验证远程文件的校验和。默认为 no。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"cron模块\">cron模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/cron_module.html#ansible-collections-ansible-builtin-cron-module\">cron模块</a>主要用于在远程服务器上创建、修改、删除定时任务</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：创建定时任务</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m cron -a <span class=\"string\">&#x27;name=&quot;restart httpd&quot; hour=*/5 job=&quot;systemctl restart httpd&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cron.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上创建定时任务</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">创建定时任务</span></span><br><span class=\"line\">      <span class=\"attr\">cron:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">&quot;restart httpd&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">hour:</span> <span class=\"string\">&quot;*/5&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">job:</span> <span class=\"string\">&quot;systemctl restart httpd&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s cron</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>cron 任务的名称。</td>\n</tr>\n<tr>\n<td>minute</td>\n<td>cron 任务执行的分钟。</td>\n</tr>\n<tr>\n<td>hour</td>\n<td>cron 任务执行的小时。</td>\n</tr>\n<tr>\n<td>day</td>\n<td>cron 任务执行的日期。</td>\n</tr>\n<tr>\n<td>month</td>\n<td>cron 任务执行的月份。</td>\n</tr>\n<tr>\n<td>weekday</td>\n<td>cron 任务执行的星期几。</td>\n</tr>\n<tr>\n<td>job</td>\n<td>要执行的命令或脚本。</td>\n</tr>\n<tr>\n<td>cron_file</td>\n<td>要操作的 cron 文件的路径。默认为 /etc/crontab。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>cron 任务的状态。可选值包括 present（默认）和 absent。表示要求任务存在或不存在。</td>\n</tr>\n<tr>\n<td>user</td>\n<td>cron 任务的执行用户。默认为 root。</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>是否备份 cron 文件。可选值包括 true 和 false。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>state</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">present：表示要求指定的 cron 任务存在。如果指定的 cron 任务不存在，则 Ansible 将会创建它。如果已经存在，则不执行任何操作。</span><br><span class=\"line\">absent：表示要求指定的 cron 任务不存在。如果指定的 cron 任务存在，则 Ansible 将会删除它。如果不存在，则不执行任何操作。</span><br></pre></td></tr></table></figure>\n<h3 id=\"yum模块\">yum模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/yum_module.html#ansible-collections-ansible-builtin-yum-module\">yum模块</a>主要用于在远程服务器上安装、卸载、更新软件包，可以指定软件包的名称、版本、repo等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：安装软件包</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装软件包，相当于 yum install httpd</span></span><br><span class=\"line\">ansible webservers -m yum -a <span class=\"string\">&quot;name=httpd state=present&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上安装</span> <span class=\"string\">httpd</span> <span class=\"string\">软件包</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装</span> <span class=\"string\">httpd</span> <span class=\"string\">软件包</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">httpd</span> <span class=\"comment\"># 软件包名称，相当于 yum install httpd</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span> <span class=\"comment\"># 安装软件包，如果软件包已经安装则不安装</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明:<code>ansible-doc -s yum</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>指定要操作的包的名称。</td>\n</tr>\n<tr>\n<td>update_cache</td>\n<td>指定是否在执行操作之前更新 yum 缓存。可选值为 <code>yes</code> 或 <code>no</code>。默认为 <code>yes</code>。</td>\n</tr>\n<tr>\n<td>disable_gpg_check</td>\n<td>指定是否禁用 GPG 检查。如果为 <code>yes</code>，则禁用 GPG 检查。默认为 <code>no</code>。</td>\n</tr>\n<tr>\n<td>disable_plugin</td>\n<td>指定是否禁用指定的 yum 插件。可以是一个插件名称的列表。</td>\n</tr>\n<tr>\n<td>enablerepo</td>\n<td>指定要启用的仓库。可以是一个仓库名称的列表。</td>\n</tr>\n<tr>\n<td>disablerepo</td>\n<td>指定要禁用的仓库。可以是一个仓库名称的列表。</td>\n</tr>\n<tr>\n<td>installroot</td>\n<td>指定要安装软件包的根目录。</td>\n</tr>\n<tr>\n<td>security</td>\n<td>指定是否只安装安全更新。如果为 <code>yes</code>，则只安装安全更新。默认为 <code>no</code>。</td>\n</tr>\n<tr>\n<td>list</td>\n<td>指定是否列出所有已安装的包。如果为 <code>yes</code>，则列出已安装的包。默认为 <code>no</code>。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>指定软件包的状态。可选值为 <code>present</code>、<code>latest</code>、<code>absent</code>、<code>installed</code>、<code>removed</code>。默认为 <code>present</code>。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>这里重点说一下<code>state</code></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">present: 表示要求目标主机上存在指定的软件包。如果软件包已经安装，则不执行任何操作；如果软件包未安装，则会安装它。</span><br><span class=\"line\">latest: 表示要求目标主机上存在指定的软件包，并且希望保持为最新版本。如果软件包已经安装，但不是最新版本，则会更新到最新版本；如果软件包未安装，则会安装最新版本。</span><br><span class=\"line\">absent: 表示要求目标主机上不存在指定的软件包。如果软件包已安装，则会将其卸载；如果软件包未安装，则不执行任何操作。</span><br><span class=\"line\">installed: 与 present 意义相同，用于明确表达希望软件包已经安装在目标主机上。</span><br><span class=\"line\">removed: 与 absent 意义相同，用于明确表达希望软件包已从目标主机上卸载。</span><br></pre></td></tr></table></figure>\n<h3 id=\"service模块-调用的是service命令\">service模块:调用的是<code>service</code>命令</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/service_module.html#ansible-collections-ansible-builtin-service-module\">service模块</a>主要用于在远程服务器上启动、停止、重启、重新加载、启用、禁用、检查服务，可以指定服务的名称、状态、启动方式等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：启动服务</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m service -a <span class=\"string\">&quot;name=httpd state=started&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># service.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上启动</span> <span class=\"string\">httpd</span> <span class=\"string\">服务</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动</span> <span class=\"string\">httpd</span> <span class=\"string\">服务</span></span><br><span class=\"line\">      <span class=\"attr\">service:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">httpd</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">started</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明:<code>ansible-doc -s service</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>服务的名称。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>服务的状态。可选值包括 started（已启动）、stopped（已停止）、restarted（已重启）。</td>\n</tr>\n<tr>\n<td>enabled</td>\n<td>是否在启动时自动启用服务。如果为 yes，则在系统启动时自动启动服务。默认为 yes。</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td>匹配服务的模式。默认情况下为服务名称。</td>\n</tr>\n<tr>\n<td>sleep</td>\n<td>在重新启动服务之前等待的秒数。</td>\n</tr>\n<tr>\n<td>arguments</td>\n<td>启动或停止服务时要传递的参数。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>state</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">started：表示要求服务处于已启动状态。如果指定的服务未启动，则 Ansible 将尝试启动该服务。如果服务已经处于运行状态，则不执行任何操作。</span><br><span class=\"line\">stopped：表示要求服务处于已停止状态。如果指定的服务正在运行，则 Ansible 将尝试停止该服务。如果服务已经停止，则不执行任何操作。</span><br><span class=\"line\">restarted：表示要求重启服务。无论服务当前处于运行状态还是停止状态，Ansible 都会尝试重新启动该服务。</span><br></pre></td></tr></table></figure>\n<h3 id=\"systemd模块-支持centos7-，调用的是systemctl\">systemd模块:支持<code>centos7+</code>，调用的是<code>systemctl</code></h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/systemd_service_module.html#ansible-collections-ansible-builtin-systemd-service-module\">systemd模块</a>用于控制 systemd 后台服务，允许你启动、重新启动、停止或者重新加载 systemd 服务。此外，你也可以使用它来使服务在系统启动时自动启动或禁止自动启动。除此之外，systemd 模块还允许你检查服务的状态。</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m systemd -a <span class=\"string\">&quot;name=httpd state=restarted&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># systemd.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上重新启动</span> <span class=\"string\">httpd</span> <span class=\"string\">服务</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">重新启动</span> <span class=\"string\">httpd</span> <span class=\"string\">服务</span></span><br><span class=\"line\">      <span class=\"attr\">systemd:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">httpd</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">restarted</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>主要参数说明：<code>ansible-doc -s systemd</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>enabled</td>\n<td>指定服务是否应该在启动时自动启用。可选值为 yes 或 no。默认为 yes。</td>\n</tr>\n<tr>\n<td>masked</td>\n<td>指定服务是否应该被置为 masked 状态，禁止手动启动。可选值为 yes 或 no。默认为 no。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>服务的名称。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>指定服务的状态。可选值为 started（启动）、stopped（停止）、restarted（重新启动）、reloaded（重新加载）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"script模块\">script模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/script_module.html#ansible-collections-ansible-builtin-script-module\">script模块</a>主要用于在远程服务器上执行本地的脚本</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：执行脚本</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m script -a <span class=\"string\">&quot;chdir=/tmp /tmp/a.sh&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># script.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上运行脚本</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">/tmp</span> <span class=\"string\">目录中运行脚本</span></span><br><span class=\"line\">      <span class=\"attr\">script:</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/tmp</span> <span class=\"comment\"># 指定脚本的执行目录</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">/tmp/a.sh</span> <span class=\"comment\"># 本地脚本的路径</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明:<code>ansible-doc -s script</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>chdir</td>\n<td>在远程主机上执行脚本之前切换到的目录。</td>\n</tr>\n<tr>\n<td>free_form</td>\n<td>要在远程主机上执行的脚本内容。</td>\n</tr>\n<tr>\n<td>creates</td>\n<td>如果指定的文件已经存在，则不执行脚本。</td>\n</tr>\n<tr>\n<td>executable</td>\n<td>指定要使用的脚本解释器。</td>\n</tr>\n<tr>\n<td>removes</td>\n<td>在执行脚本之后，如果指定的文件存在，则删除该文件。</td>\n</tr>\n<tr>\n<td>cmd</td>\n<td>指定要执行的命令。</td>\n</tr>\n<tr>\n<td>decrypt</td>\n<td>指定要解密的源文件。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"user模块\">user模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/user_module.html#ansible-collections-ansible-builtin-user-module\">user模块</a>主要用于在远程服务器上创建、修改、删除用户，可以指定用户的名称、密码、uid、gid、home、shell等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：创建用户</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m user -a <span class=\"string\">&quot;name=nginx group=nginx shell=/sbin/nologin create_home=no&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># user.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">创建用户</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加用户</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span> <span class=\"comment\"># 用户名称</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span> <span class=\"comment\"># 指定用户shell,非登录用户</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span> <span class=\"comment\"># 不创建用户主目录</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明:<code>ansible-doc -s user</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>append</td>\n<td>是否将用户添加到现有组，而不是替换组。</td>\n</tr>\n<tr>\n<td>comment</td>\n<td>对用户的注释信息。</td>\n</tr>\n<tr>\n<td>createhome</td>\n<td>是否创建用户的家目录。</td>\n</tr>\n<tr>\n<td>expires</td>\n<td>用户帐户过期日期。</td>\n</tr>\n<tr>\n<td>force</td>\n<td>是否强制创建或更改用户帐户。</td>\n</tr>\n<tr>\n<td>generate_ssh_key</td>\n<td>是否生成用户的 SSH 密钥对。</td>\n</tr>\n<tr>\n<td>group</td>\n<td>用户所属组的名称或 ID。</td>\n</tr>\n<tr>\n<td>groups</td>\n<td>用户所属的其他组。</td>\n</tr>\n<tr>\n<td>home</td>\n<td>用户的家目录路径。</td>\n</tr>\n<tr>\n<td>login_class</td>\n<td>用户登录类。</td>\n</tr>\n<tr>\n<td>move_home</td>\n<td>是否在更改用户家目录路径时移动其内容。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>用户的名称。</td>\n</tr>\n<tr>\n<td>non_unique</td>\n<td>允许用户具有非唯一的数字 ID。</td>\n</tr>\n<tr>\n<td>password</td>\n<td>用户的密码哈希值或加密后的密码。</td>\n</tr>\n<tr>\n<td>remove</td>\n<td>是否删除用户。</td>\n</tr>\n<tr>\n<td>shell</td>\n<td>用户的 shell。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>用户帐户的状态。</td>\n</tr>\n<tr>\n<td>system</td>\n<td>是否为系统用户。</td>\n</tr>\n<tr>\n<td>uid</td>\n<td>用户的数字 ID。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>state</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">present：表示要求指定的用户账户存在。如果指定的用户账户不存在，则 Ansible 将会创建该账户。如果用户账户已经存在，则不执行任何操作。</span><br><span class=\"line\">absent：表示要求指定的用户账户不存在。如果指定的用户账户存在，则 Ansible 将会删除该账户。如果用户账户不存在，则不执行任何操作。</span><br></pre></td></tr></table></figure>\n<h3 id=\"get-url模块\">get_url模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/get_url_module.html#ansible-collections-ansible-builtin-get-url-module\">get_url模块</a>负责下载文件到目标主机。</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m get_url -a <span class=\"string\">&quot;url=https://www.example.com dest=/tmp&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># get_url.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">下载文件到目标主机的指定目录</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Download</span> <span class=\"string\">files</span> <span class=\"string\">from</span> <span class=\"string\">remote</span> <span class=\"string\">host</span></span><br><span class=\"line\">      <span class=\"attr\">get_url:</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">https://www.example.com/file.conf</span></span><br><span class=\"line\">        <span class=\"attr\">dest:</span> <span class=\"string\">/tmp</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>主要参数说明:<code>ansible-doc -s get_url</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>要下载的文件的 URL 地址。</td>\n</tr>\n<tr>\n<td>dest</td>\n<td>下载文件保存的目标路径。</td>\n</tr>\n<tr>\n<td>force</td>\n<td>是否强制覆盖目标路径中的文件。可选值为 yes 或 no。默认为 yes。</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>下载超时时间，单位为秒。默认为 10 秒。</td>\n</tr>\n<tr>\n<td>validate_certs</td>\n<td>是否验证 SSL 证书。可选值为 yes 或 no。默认为 yes。</td>\n</tr>\n<tr>\n<td>owner</td>\n<td>下载后文件的所有者。</td>\n</tr>\n<tr>\n<td>group</td>\n<td>下载后文件的所属组。</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>下载后文件的权限模式。</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>是否创建备份文件。可选值为 yes 或 no。默认为 no。</td>\n</tr>\n<tr>\n<td>headers</td>\n<td>附加的 HTTP 请求头。</td>\n</tr>\n<tr>\n<td>force_basic_auth</td>\n<td>是否强制使用 HTTP 基本身份验证。可选值为 yes 或 no。默认为 yes。</td>\n</tr>\n<tr>\n<td>http_agent</td>\n<td>用于 HTTP 请求的代理。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"lineinfile模块\">lineinfile模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html#ansible-collections-ansible-builtin-lineinfile-module\">lineinfile模块</a>主要用于在远程主机上查找和替换文件中的行，可以指定要查找的行、要替换的行、要添加的行等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：设置环境变量，需要注意的是此时环境变量在剧本的上下文中是不生效的，如果需要在剧本上下文生效的环境变量，可以使用 <code>shell</code> 模块</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m lineinfile -a <span class=\"string\">&quot;path=/etc/profile line=&#x27;PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin&#x27; state=present backup=yes&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># lineinfile.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">设置环境变量</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">设置环境变量</span></span><br><span class=\"line\">      <span class=\"attr\">lineinfile:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/etc/profile</span></span><br><span class=\"line\">        <span class=\"attr\">line:</span> <span class=\"string\">&#x27;PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">backup:</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>主要参数说明:<code>ansible-doc -s lineinfile</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>path</td>\n<td>要修改的文件的路径。</td>\n</tr>\n<tr>\n<td>line</td>\n<td>要添加、修改或删除的行内容。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>指定要执行的操作。</td>\n</tr>\n<tr>\n<td>regexp</td>\n<td>用于匹配行的正则表达式。</td>\n</tr>\n<tr>\n<td>search_string</td>\n<td>用于匹配行的字符串。</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>是否创建备份文件。可选值为 yes 或 no。默认为 no。</td>\n</tr>\n<tr>\n<td>backrefs</td>\n<td>是否允许在 <code>regexp</code> 中使用反向引用。</td>\n</tr>\n<tr>\n<td>insertbefore</td>\n<td>指定一个行，将新行插入到它之前。</td>\n</tr>\n<tr>\n<td>insertafter</td>\n<td>指定一个行，将新行插入到它之后。</td>\n</tr>\n<tr>\n<td>firstmatch</td>\n<td>是否只匹配第一个匹配项。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>state说明</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">present：确保指定的行存在于文件中。如果文件中不存在指定的行，则会添加该行。如果文件中已经存在该行，则不做任何改变。</span><br><span class=\"line\">absent：确保指定的行不存在于文件中。如果文件中存在指定的行，则会将该行删除。如果文件中不存在该行，则不做任何改变。</span><br></pre></td></tr></table></figure>\n<h2 id=\"ansible-playbook-剧本\">ansible-playbook:剧本</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html#ansible-playbook\">ansible-playbook</a>是Ansible的核心命令，用于执行playbook文件，playbook文件是Ansible执行任务的最小单元，一个playbook文件可以包含多个play，每个play可以包含多个task，每个task可以包含多个module，每个module可以执行一个操作，比如创建目录、安装软件包、启动服务、执行脚本等</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://ansible-tran.readthedocs.io/en/latest/docs/playbooks_intro.html\">Ansible中文全文指南–Playbooks</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>上面在介绍ansible模块时，我们已经编写了一些playbook文件，就是那些yml文件，运行时也是通过ansible-playbook命令执行的，但是基本上都是单个任务单个模块，下面我们来看一个复杂一些的示例</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：安装nginx并配置</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># playbook.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">gcc,zlib-devel,pcre-devel,openssl-devel</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">installed</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wget</span> <span class=\"string\">nginx</span> <span class=\"string\">tar.gz</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">wget</span> <span class=\"string\">https://nginx.org/download/nginx-1.22.1.tar.gz</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tar</span> <span class=\"string\">-zxvf</span> <span class=\"string\">nginx-1.22.1.tar.gz</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">tar</span> <span class=\"string\">-zxvf</span> <span class=\"string\">nginx-1.22.1.tar.gz</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">add</span> <span class=\"string\">user</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">configure</span> <span class=\"string\">,make</span> <span class=\"string\">and</span> <span class=\"string\">make</span> <span class=\"string\">install</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">cd</span> <span class=\"string\">nginx-1.22.1;./configure</span> <span class=\"string\">--prefix=/usr/local/nginx</span> <span class=\"string\">--with-http_stub_status_module</span> <span class=\"string\">--with-http_ssl_module</span> <span class=\"string\">--user=nginx;make</span> <span class=\"string\">-j4;make</span> <span class=\"string\">-j4</span> <span class=\"string\">install;</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">start</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">/usr/local/nginx/sbin/nginx</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>优化1</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>问题</strong>: 上面的剧本有个问题，就是如果系统已经安装了nginx，则运行这个剧本还是会重新安装<br>\n<strong>解决方法</strong>: 先判断nginx是否已经安装，如果已经安装，直接跳过安装步骤，直接执行启动命令，否则执行安装步骤，然后再执行启动命令</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已安装Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">/usr/local/nginx/sbin/nginx</span> <span class=\"string\">-v</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_installed</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">      <span class=\"attr\">loop:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">gcc</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">pcre-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl-devel</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_installed.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未安装时执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已启动Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">ps</span> <span class=\"string\">aux</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">nginx</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">grep</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_status</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">下载Nginx源码包</span></span><br><span class=\"line\">      <span class=\"attr\">get_url:</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">https://nginx.org/download/nginx-1.22.1.tar.gz</span></span><br><span class=\"line\">        <span class=\"attr\">dest:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_installed.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未安装时执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">解压Nginx源码包</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">tar</span> <span class=\"string\">-zxvf</span> <span class=\"string\">nginx-1.22.1.tar.gz</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_installed.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未安装时执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">编译Nginx并安装</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          cd nginx-1.22.1</span></span><br><span class=\"line\"><span class=\"string\">          ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx</span></span><br><span class=\"line\"><span class=\"string\">          make -j4</span></span><br><span class=\"line\"><span class=\"string\">          make -j4 install</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_installed.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未安装时执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">/usr/local/nginx/sbin/nginx</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_status.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未启动时执行</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>register :用于将命令执行的结果保存到变量中，我们可以调用变量的属性，比如rc表示命令返回的状态码($?)，stdout表示命令的输出，stderr表示命令的错误输出<br>\nignore_errors :用于忽略错误<br>\nloop :用于循环列表<br>\nwhen :用于判断条件，只有条件满足时才执行</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>优化2</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>问题</strong>: 上面的步骤有点多，比如下载、解压、编译nginx，这些都是在没有安装nginx的情况下要运行的任务<br>\n<strong>解决方法</strong>: 使用shell模块可以将这些步骤封装成一个任务</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已安装Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">/usr/local/nginx/sbin/nginx</span> <span class=\"string\">-v</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_installed</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">      <span class=\"attr\">loop:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">gcc</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">pcre-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl-devel</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_installed.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未安装时执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已启动Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">ps</span> <span class=\"string\">aux</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">nginx</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">grep</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_status</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Nginx并安装</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          wget https://nginx.org/download/nginx-1.22.1.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          tar -zxvf nginx-1.22.1.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          cd nginx-1.22.1</span></span><br><span class=\"line\"><span class=\"string\">          ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx</span></span><br><span class=\"line\"><span class=\"string\">          make -j4</span></span><br><span class=\"line\"><span class=\"string\">          make -j4 install</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_installed.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未安装时执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">/usr/local/nginx/sbin/nginx</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_status.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未启动时执行</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>优化3</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>问题</strong>: 上面的剧本虽然已经满足了我的需求，但是不够简练，因为很多任务并不是主要任务，我需要在每个任务中进行条件判断来决定是否执行该任务，能否只保留主要任务，其它任务只有当这些主要任务成功运行了才会被运行呢？比如这里的主要任务就是两个：1-判断是否安装了nginx，没安装就去安装，2-判断是否启动了nginx，没启动就去启动<br>\n<strong>解决方法</strong>: 使用基于handlers的notify语句，这样可以减少重复执行任务的次数</p>\n</blockquote>\n<blockquote>\n<p><strong>何为handlers</strong><br>\nHandler 本身是一种非同步的 callback function ，在这里则是指关连于特定 tasks 的事件 (event) 触发机制。当关联 handler 的 tasks 状态为被改变 (changed) 且都已被执行时，才会触发一次</p>\n</blockquote>\n<blockquote>\n<p><strong>何为 tasks 状态为被改变 (changed)</strong><br>\n在Ansible中，task的状态会根据任务执行的结果而改变。当一个任务成功完成并且使得系统的状态与预期不同（即执行了一些更改），那么这个任务的状态就会被标记为&quot;changed&quot;。<br>\n具体来说，task状态为&quot;changed&quot;的条件包括但不限于以下情况：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件变更：例如复制、创建、删除文件等操作导致了文件系统的变更。</span><br><span class=\"line\">服务状态变更：例如启动、停止、重启服务等操作导致了服务状态的改变。</span><br><span class=\"line\">配置更改：例如修改配置文件、添加配置项等操作导致了系统配置的改变。</span><br><span class=\"line\">软件包安装/卸载：例如安装新的软件包或者删除已安装的软件包导致了系统软件状态的改变。</span><br><span class=\"line\">权限变更：例如修改文件权限、更改用户组、更改用户等操作导致了系统权限的改变。</span><br><span class=\"line\">当一个或多个任务的状态被标记为&quot;changed&quot;时，与这些任务关联的handlers会被触发执行。这样可以确保在所有相关的任务都完成并且导致了系统状态的改变时，才执行后续的处理操作，从而保证了任务的一致性和可靠性。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">判断是否存在nginx安装目录，不存在就安装nginx</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/usr/local/nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">directory</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span>  <span class=\"comment\"># 执行通知任务，顺序为从下到上</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">Nginx安装</span> <span class=\"comment\"># 匹配任务name</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已启动Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">ps</span> <span class=\"string\">aux</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">nginx</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">grep</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_status</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查是否需要启动nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;start nginx&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_status.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span> <span class=\"comment\"># 只有当条件满足时才会运行该任务</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span>  <span class=\"comment\"># 运行任务后只有状态为changed才会发送notify给handler</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span>  <span class=\"comment\"># handlers是一类特殊任务，当有notify时，会自动执行该任务</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">      <span class=\"attr\">loop:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">gcc</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">pcre-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl-devel</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Nginx安装</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          wget https://nginx.org/download/nginx-1.22.1.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          tar -zxvf nginx-1.22.1.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          cd nginx-1.22.1</span></span><br><span class=\"line\"><span class=\"string\">          ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx</span></span><br><span class=\"line\"><span class=\"string\">          make -j4</span></span><br><span class=\"line\"><span class=\"string\">          make -j4 install</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">/usr/local/nginx/sbin/nginx</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>优化4</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>问题</strong>: 上面的剧本中nginx的安装版本和安装路径都是写死的，能否动态配置呢？<br>\n<strong>解决方法</strong>: 提取变量，使用vars</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">vars:</span> <span class=\"comment\"># 定义变量</span></span><br><span class=\"line\">    <span class=\"attr\">nginx_version:</span> <span class=\"string\">&quot;1.22.1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">work_dir:</span> <span class=\"string\">&quot;/usr/local&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx_install_path:</span> <span class=\"string\">&quot;/usr/local/nginx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">判断是否存在nginx安装目录，不存在就安装nginx</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>&quot;</span> <span class=\"comment\"># 变量一定要双括号</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">directory</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span>  <span class=\"comment\"># 执行通知任务，顺序为从下到上</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">Nginx安装</span> <span class=\"comment\"># 匹配任务name</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已启动Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">ps</span> <span class=\"string\">aux</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">nginx</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">grep</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_status</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查是否需要启动nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;start nginx&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_status.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span>  <span class=\"comment\"># handlers是一类特殊任务，当有notify时，会自动执行该任务</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">      <span class=\"attr\">loop:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">gcc</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">pcre-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl-devel</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Nginx安装</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          wget https://nginx.org/download/nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          tar -zxvf nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          cd nginx-&#123;&#123; nginx_version &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">          ./configure --prefix=&#123;&#123; nginx_install_path &#125;&#125; --with-http_stub_status_module --with-http_ssl_module --user=nginx</span></span><br><span class=\"line\"><span class=\"string\">          make -j4</span></span><br><span class=\"line\"><span class=\"string\">          make -j4 install</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">chdir:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; work_dir &#125;&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/sbin/nginx&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认</span></span><br><span class=\"line\">ansible-playbook nginx.yml</span><br><span class=\"line\"><span class=\"comment\"># 修改变量</span></span><br><span class=\"line\">ansible-playbook nginx.yml -e <span class=\"string\">&quot;nginx_version=1.24.0&quot;</span> -e <span class=\"string\">&quot;work_dir=/root&quot;</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">除了我们自己定义的变量，我们也可以使用Ansible内置的变量，Ansible内置的变量可以参考<a href=\"https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html\">官方文档</a>。</li>\n<li class=\"lvl-2\">我们用的最多的就是<code>ansible_facts</code>变量获取主机信息，如IP地址、MAC地址、操作系统版本等。也就是通过<code>setup</code>模块获取的信息。</li>\n<li class=\"lvl-2\">在使用<code>ansible_facts</code>变量时需要开启<code>gather_facts</code>选项，默认是开启的。</li>\n<li class=\"lvl-2\">常用的<code>ansible_facts</code>变量如下，注意这里属性名称前是不加<code>ansible_</code>前缀的：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible_facts[&#x27;distribution&#x27;]: 远程主机的操作系统分发名称。</span><br><span class=\"line\">ansible_facts[&#x27;distribution_version&#x27;]: 远程主机的操作系统版本号。</span><br><span class=\"line\">ansible_facts[&#x27;user_id&#x27;]: 远程主机上当前用户的用户 ID。</span><br></pre></td></tr></table></figure>\n</div>\n<h2 id=\"ansible-playbook-Template\">ansible-playbook:Template</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible Playbook Template是一种Ansible的特性，它允许您在Playbook中使用<code>Jinja2</code>模板语言来动态生成配置文件或其他文本文件。通过使用模板，您可以根据变量、条件、循环等动态信息来生成目标文件，从而使配置文件更具可扩展性和灵活性。</p>\n</li>\n<li class=\"lvl-2\">\n<p>下面是使用Ansible Playbook Template的一些常见用法和特性：</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Jinja2模板语言: Ansible Playbook Template使用Jinja2模板语言，这是一种功能强大的模板引擎，支持变量替换、条件语句、循环语句等功能。</span><br><span class=\"line\">变量替换: 您可以在模板中使用Ansible的变量来替换文本中的占位符。这使得您可以根据不同的环境或条件生成不同的配置文件。</span><br><span class=\"line\">条件语句: 您可以在模板中使用条件语句来根据不同的条件生成不同的文本。这允许您根据需要灵活地调整生成的配置文件。</span><br><span class=\"line\">循环语句: 您可以在模板中使用循环语句来对列表或字典中的元素进行迭代，从而生成重复的文本块。</span><br><span class=\"line\">包含其他模板文件: 您可以在一个模板中包含其他模板文件，从而使模板更加模块化和易于管理。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Jinja2模板文件后缀为<code>.j2</code>，常用语法如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印变量</span></span><br><span class=\"line\">&#123;&#123; index_title &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># for循环</span></span><br><span class=\"line\">&#123;% <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> index_for_array %&#125;</span><br><span class=\"line\">&lt;p&gt;show &#123;&#123; key &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if判断</span></span><br><span class=\"line\">&#123;% <span class=\"keyword\">if</span> blog_href_show %&#125;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;a href=<span class=\"string\">&quot;&#123;&#123; blog_href &#125;&#125;&quot;</span>&gt;&#123;&#123; index_title &#125;&#125;&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you <span class=\"keyword\">for</span> using &#123;&#123; index_title &#125;&#125;.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>结合上面部署nginx的示例，我这里增加一个任务，就是替换nginx发布目录下的index.html，然后重启nginx，这里给出<code>index.html.j2</code></p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&#123;&#123; index_title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">html</span> &#123; <span class=\"attribute\">color</span>-scheme: light dark; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">35em</span>; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"attribute\">font-family</span>: Tahoma, Verdana, Arial, sans-serif; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123;&#123; blog_img &#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% for key in index_for_array %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>show &#123;&#123; key &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% if blog_href_show %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123;&#123; blog_href &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; index_title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>Thank you for using &#123;&#123; index_title &#125;&#125;.<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>接着我们修改剧本yml</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">vars:</span> <span class=\"comment\"># 定义变量</span></span><br><span class=\"line\">    <span class=\"attr\">nginx_version:</span> <span class=\"string\">&quot;1.22.1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">work_dir:</span> <span class=\"string\">&quot;/usr/local&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx_install_path:</span> <span class=\"string\">&quot;/usr/local/nginx&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">index_title:</span> <span class=\"string\">&quot;hanqf&#x27;s blog&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">index_for_array:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">hello</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">world</span></span><br><span class=\"line\">    <span class=\"attr\">blog_href_show:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">blog_href:</span> <span class=\"string\">&quot;https://blog.hanqunfeng.com&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">blog_img:</span> <span class=\"string\">&quot;me.png&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">判断是否存在nginx安装目录，不存在就安装nginx</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>&quot;</span> <span class=\"comment\"># 变量一定要双括号</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">directory</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span>  <span class=\"comment\"># 执行通知任务，顺序为从下到上</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">Nginx安装</span> <span class=\"comment\"># 匹配任务name</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已启动Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">ps</span> <span class=\"string\">aux</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">nginx</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">grep</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_status</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查是否需要启动nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;start nginx&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_status.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">上传图片</span></span><br><span class=\"line\">      <span class=\"attr\">copy:</span></span><br><span class=\"line\">        <span class=\"attr\">src:</span> <span class=\"string\">me.png</span> <span class=\"comment\"># 与yml在同一目录</span></span><br><span class=\"line\">        <span class=\"attr\">dest:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/html/me.png&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">发布index.html</span></span><br><span class=\"line\">      <span class=\"attr\">template:</span></span><br><span class=\"line\">        <span class=\"attr\">src:</span> <span class=\"string\">index.html.j2</span> <span class=\"comment\"># 与yml在同一目录</span></span><br><span class=\"line\">        <span class=\"attr\">dest:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/html/index.html&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">force:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 强制覆盖</span></span><br><span class=\"line\">        <span class=\"attr\">backup:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 覆盖前备份</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">重启Nginx服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span>  <span class=\"comment\"># handlers是一类特殊任务，当有notify时，会自动执行该任务</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">      <span class=\"attr\">loop:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">gcc</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">pcre-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl-devel</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Nginx安装</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          wget https://nginx.org/download/nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          tar -zxvf nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          cd nginx-&#123;&#123; nginx_version &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">          ./configure --prefix=&#123;&#123; nginx_install_path &#125;&#125; --with-http_stub_status_module --with-http_ssl_module --user=nginx</span></span><br><span class=\"line\"><span class=\"string\">          make -j4</span></span><br><span class=\"line\"><span class=\"string\">          make -j4 install</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">chdir:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; work_dir &#125;&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/sbin/nginx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">重启Nginx服务</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          pkill nginx</span></span><br><span class=\"line\"><span class=\"string\">          &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>替换之后的效果</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hanqf&#x27;s blog<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">html</span> &#123; <span class=\"attribute\">color</span>-scheme: light dark; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">35em</span>; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"attribute\">font-family</span>: Tahoma, Verdana, Arial, sans-serif; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;me.png&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>show hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>show world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://blog.hanqunfeng.com&quot;</span>&gt;</span>hanqf&#x27;s blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>Thank you for using hanqf&#x27;s blog.<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>template模块</code>的常用参数说明 <code>ansible-doc  -s template</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>必需</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>src</td>\n<td>是</td>\n<td>无</td>\n<td>模板文件的路径。</td>\n</tr>\n<tr>\n<td>dest</td>\n<td>是</td>\n<td>无</td>\n<td>目标文件的路径。</td>\n</tr>\n<tr>\n<td>force</td>\n<td>否</td>\n<td>false</td>\n<td>如果目标文件已经存在，是否强制覆盖。</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>否</td>\n<td>false</td>\n<td>如果设置为true，则在覆盖目标文件之前创建备份。</td>\n</tr>\n<tr>\n<td>unsafe_writes</td>\n<td>否</td>\n<td>false</td>\n<td>如果设置为true，则会跳过文件的暂时性写入保护（如确保在写入文件之前不会更改其内容）。</td>\n</tr>\n<tr>\n<td>newline_sequence</td>\n<td>否</td>\n<td>\\n</td>\n<td>用于生成文件时的换行符序列。</td>\n</tr>\n<tr>\n<td>validate</td>\n<td>否</td>\n<td>无</td>\n<td>要应用于生成文件的验证器脚本的路径。</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>否</td>\n<td>无</td>\n<td>目标文件的权限模式。</td>\n</tr>\n<tr>\n<td>owner</td>\n<td>否</td>\n<td>无</td>\n<td>目标文件的所有者。</td>\n</tr>\n<tr>\n<td>group</td>\n<td>否</td>\n<td>无</td>\n<td>目标文件的所属组。</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这里要注意<code>template模块</code>与<code>copy</code>模块的区别，前者在上传时会进行变量替换。</p>\n</li>\n</ul>\n<h2 id=\"ansible-playbook-Role\">ansible-playbook:Role</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible中的Role是一种组织和管理剧本的方法，它允许您将相关的任务、变量、文件和处理程序组合到一个可重用的单元中。Role使得您可以更轻松地管理和组织大型的Ansible项目，并促进了可维护性和复用性。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Role的特性</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组织性：Role允许您将相关的任务和文件组织在一起，使得代码更易于理解和维护。每个Role通常都有一个特定的目的，例如安装特定的软件、配置服务或执行特定的系统管理任务。</span><br><span class=\"line\"></span><br><span class=\"line\">可重用性：Role可以被设计成可重用的组件，可以在不同的项目中多次使用。这样一来，您可以将常见的功能和配置封装到Role中，并在需要时轻松地调用它们，从而提高了代码的复用性和可移植性。</span><br><span class=\"line\"></span><br><span class=\"line\">结构化布局：Ansible推荐一种特定的目录结构来组织Role，包括tasks、handlers、templates、files、vars和defaults等目录。这种结构化布局有助于更清晰地分离任务、变量、文件和处理程序，并使Role更易于管理和维护。</span><br><span class=\"line\"></span><br><span class=\"line\">参数化：Role可以使用变量来接受外部输入，从而使其更加灵活和通用。通过参数化，您可以定制Role的行为，使其适用于不同的环境和需求。</span><br><span class=\"line\"></span><br><span class=\"line\">依赖关系：Role可以定义依赖关系，即一个Role可能依赖于另一个Role。这种依赖关系使得您可以构建复杂的系统配置，而不必重复编写相同的代码。</span><br><span class=\"line\"></span><br><span class=\"line\">可测试性：由于Role是可重用的组件，因此它们也是可测试的。您可以编写测试用例来验证Role的行为是否符合预期，并确保在修改代码时不会破坏现有功能。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://github.com/ansible/ansible-examples\">ansible-examples</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>创建role</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录下创建一个名称为nginx-install的role，实际上就是创建一个名称为nginx-install的目录结构</span></span><br><span class=\"line\">ansible-galaxy init nginx-install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在指定目录下创建role</span></span><br><span class=\"line\">ansible-galaxy init --init-path /usr/local nginx-install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># nginx-install目录结构</span></span><br><span class=\"line\">$ tree nginx-install/</span><br><span class=\"line\">nginx-install/</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── defaults</span><br><span class=\"line\">│   └── main.yml</span><br><span class=\"line\">├── files</span><br><span class=\"line\">├── handlers</span><br><span class=\"line\">│   └── main.yml</span><br><span class=\"line\">├── meta</span><br><span class=\"line\">│   └── main.yml</span><br><span class=\"line\">├── tasks</span><br><span class=\"line\">│   └── main.yml</span><br><span class=\"line\">├── templates</span><br><span class=\"line\">├── tests</span><br><span class=\"line\">│   ├── inventory</span><br><span class=\"line\">│   └── test.yml</span><br><span class=\"line\">└── vars</span><br><span class=\"line\">    └── main.yml</span><br><span class=\"line\"></span><br><span class=\"line\">8 directories, 8 files</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">files：存放由copy或script模块等调用的文件</span><br><span class=\"line\">templates：template模块查找所需要模板文件的目录</span><br><span class=\"line\">tasks：定义task、role的基本元素，至少应该包含一个名为main.yml的文件。其他文件需要在此文件中通过include进行包含</span><br><span class=\"line\">handlers：至少应该包含一个名为main.yml的文件，其他文件需要在此文件中通过include进行包含</span><br><span class=\"line\">vars：定义变量，至少应该包含一个名为main.yml的文件，其他文件需要在此文件中通过include进行包含</span><br><span class=\"line\">meta：定义当前角色的特殊设定及其依赖关系，至少应该包含一个名为main.yml的文件，其他文件需在此文件中通过include进行包含</span><br><span class=\"line\">default：设定默认变量时使用此目录中的main.yml文件，比vars的优先级低</span><br><span class=\"line\">tests：定义测试用例，至少应该包含一个名为inventory的文件，其他文件需要在此文件中通过include进行包含</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ansible查找role的路径，推荐放到<code>/etc/ansible/roles</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">pwd</span>)/roles</span><br><span class=\"line\">/$(<span class=\"built_in\">whoami</span>)/.ansible/roles</span><br><span class=\"line\">/usr/share/ansible/roles</span><br><span class=\"line\">/etc/ansible/roles</span><br><span class=\"line\">$(<span class=\"built_in\">pwd</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"我们将上面安装nginx那个剧本修改为role的方式\">我们将上面安装nginx那个剧本修改为role的方式</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>nginx-install/tasks/main.yml</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># tasks file for nginx-install</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">if</span> <span class=\"string\">running</span> <span class=\"string\">as</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">fail:</span></span><br><span class=\"line\">    <span class=\"attr\">msg:</span> <span class=\"string\">&quot;This role must be run as root user&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">ansible_facts[&#x27;user_id&#x27;]</span> <span class=\"type\">!=</span> <span class=\"string\">&#x27;root&#x27;</span> <span class=\"comment\"># 因为我们的剧本是需要root用户运行，所以这里加一个判断，这里就用到了ansible_facts特殊变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">判断是否存在nginx安装目录，不存在就安装nginx</span></span><br><span class=\"line\">  <span class=\"attr\">file:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">state:</span> <span class=\"string\">directory</span></span><br><span class=\"line\">  <span class=\"attr\">notify:</span>  <span class=\"comment\"># 执行通知任务，顺序为从下到上</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Nginx安装</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已启动Nginx</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span> <span class=\"string\">ps</span> <span class=\"string\">aux</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">nginx</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">grep</span></span><br><span class=\"line\">  <span class=\"attr\">register:</span> <span class=\"string\">nginx_status</span></span><br><span class=\"line\">  <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查是否需要启动nginx</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;start nginx&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">nginx_status.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">notify:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">上传图片</span></span><br><span class=\"line\">  <span class=\"attr\">copy:</span></span><br><span class=\"line\">    <span class=\"attr\">src:</span> <span class=\"string\">me.png</span> <span class=\"comment\"># 与yml在同一目录</span></span><br><span class=\"line\">    <span class=\"attr\">dest:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/html/me.png&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">发布index.html</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">src:</span> <span class=\"string\">index.html.j2</span> <span class=\"comment\"># 与yml在同一目录</span></span><br><span class=\"line\">    <span class=\"attr\">dest:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/html/index.html&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">force:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 强制覆盖</span></span><br><span class=\"line\">    <span class=\"attr\">backup:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 覆盖前备份</span></span><br><span class=\"line\">  <span class=\"attr\">notify:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">重启Nginx服务</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>nginx-install/handlers/main.yml</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># handlers file for nginx-install</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">    <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">  <span class=\"attr\">yum:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">gcc</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">zlib</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">zlib-devel</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">pcre-devel</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">openssl</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">openssl-devel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Nginx安装</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span></span><br><span class=\"line\">    <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">      wget https://nginx.org/download/nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">      tar -zxvf nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">      cd nginx-&#123;&#123; nginx_version &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      ./configure --prefix=&#123;&#123; nginx_install_path &#125;&#125; --with-http_stub_status_module --with-http_ssl_module --user=nginx</span></span><br><span class=\"line\"><span class=\"string\">      make -j4</span></span><br><span class=\"line\"><span class=\"string\">      make -j4 install</span></span><br><span class=\"line\"><span class=\"string\"></span>    <span class=\"attr\">chdir:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; work_dir &#125;&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span></span><br><span class=\"line\">    <span class=\"attr\">cmd:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/sbin/nginx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">重启Nginx服务</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span></span><br><span class=\"line\">    <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">      pkill nginx</span></span><br><span class=\"line\"><span class=\"string\">      &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>nginx-install/vars/main.yml</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># vars file for nginx-install</span></span><br><span class=\"line\"><span class=\"attr\">nginx_version:</span> <span class=\"string\">&quot;1.22.1&quot;</span></span><br><span class=\"line\"><span class=\"attr\">work_dir:</span> <span class=\"string\">&quot;/usr/local&quot;</span></span><br><span class=\"line\"><span class=\"attr\">nginx_install_path:</span> <span class=\"string\">&quot;/usr/local/nginx&quot;</span></span><br><span class=\"line\"><span class=\"attr\">index_title:</span> <span class=\"string\">&quot;hanqf&#x27;s blog&quot;</span></span><br><span class=\"line\"><span class=\"attr\">index_for_array:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">hello</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">world</span></span><br><span class=\"line\"><span class=\"attr\">blog_href_show:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">blog_href:</span> <span class=\"string\">&quot;https://blog.hanqunfeng.com&quot;</span></span><br><span class=\"line\"><span class=\"attr\">blog_img:</span> <span class=\"string\">&quot;me.png&quot;</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">上面介绍的<code>tasks</code>、<code>handlers</code>，其目录中都含有一个main.yml文件，这个文件是必须存在的</li>\n<li class=\"lvl-2\">但是如果配置的内容比较多，都写在main.yml文件中，那么这个文件就显得有点臃肿，所以可以将这些内容拆分成多个文件，然后在main.yml文件中通过<code>include</code>进行包含</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include:</span> <span class=\"string\">other1.yml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include:</span> <span class=\"string\">other2.yml</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\"><code>tasks</code>或者<code>handlers中</code>还可以使用<code>include_tasks</code>进行包含</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include_tasks:</span> <span class=\"string\">other1.yml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include_tasks:</span> <span class=\"string\">other2.yml</span></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include_tasks:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">other1.yml</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">other2.yml</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p><code>vars</code>里也可以定义多个yml文件存储变量，然后在tasks中通过<code>include_vars</code>进行包含，注意，必须放在task的yml文件中</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此时不需要加上vars路径，会自动从vars目录下查找</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include_vars:</span> <span class=\"string\">&quot;v-other1.yml&quot;</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include_vars:</span> <span class=\"string\">&quot;v-other2.yml&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include_vars:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">v-other1.yml</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">v-other2.yml</span></span><br></pre></td></tr></table></figure>\n</div>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将模板文件和图片文本保存到对应的路径</p>\n</li>\n</ul>\n<blockquote>\n<p>nginx-install/templates/index.html.j2<br>\nnginx-install/files/me.png</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>执行<br>\n<em><strong>假设我们将创建的角色安装到了<code>/etc/ansible/roles</code>下</strong></em></p>\n</li>\n</ul>\n<blockquote>\n<p>创建启动剧本<code>nginx-install-start.yml</code>，我们也可以修改<code>tests/test.yml</code></p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">roles:</span> <span class=\"comment\"># 调用role</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">nginx-install</span> <span class=\"comment\"># role名称</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>执行role</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook nginx-install-start.yml</span><br></pre></td></tr></table></figure>\n<h2 id=\"ansible-galaxy\">ansible-galaxy</h2>\n<h3 id=\"什么是ansible-galaxy\">什么是ansible-galaxy</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>用于从<a href=\"https://galaxy.ansible.com\">ansible-galaxy官网</a>上查找，下载<code>role</code>和<code>collection</code>的工具，如何下载和使用网站上都有说明。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://ansible.readthedocs.io/projects/galaxy-ng/en/latest/community/userguide/\">ansible-galaxy用户指南</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>我们也可以将自己创建好的<code>role</code>发布到<code>ansible-galaxy</code>上，可以参考 <a href=\"/2024/03/26/ansible-role-publish/\" title=\"Ansible Role Publish To Galaxy\">Ansible Role Publish To Galaxy</a></p>\n</li>\n</ul>\n<h3 id=\"role\">role</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 搜索role</span></span><br><span class=\"line\">ansible-galaxy search mysql</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">ansible-galaxy role search mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看已经安装的role</span></span><br><span class=\"line\">ansible-galaxy list</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">ansible-galaxy role list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装role，默认安装到 ~/.ansible/roles 下</span></span><br><span class=\"line\">ansible-galaxy role install shaneholloman.redis</span><br><span class=\"line\"><span class=\"comment\"># 安装到指定路径</span></span><br><span class=\"line\">ansible-galaxy role install &lt;role-name&gt; -p &lt;path&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"collection\">collection</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ansible-galaxy同时支持下载 collection</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看已经安装的collection</span></span><br><span class=\"line\">ansible-galaxy collection list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装collection，，默认安装到 ~/.ansible/collections/ansible_collections 下</span></span><br><span class=\"line\">ansible-galaxy collection install saiello.kafka</span><br><span class=\"line\"><span class=\"comment\"># 安装到指定路径</span></span><br><span class=\"line\">ansible-galaxy collection install &lt;collection-name&gt; -p &lt;path&gt;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible Collection 是 Ansible 社区为了更好地管理和组织 Ansible 角色、模块、插件等内容而引入的概念。它可以被视为一种打包机制，用于将相关的 Ansible 内容打包成单独的单元，使得其更易于分享、安装和维护。</p>\n</li>\n<li class=\"lvl-2\">\n<p>具体来说，Ansible Collection 具有以下作用：</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组织和管理角色、模块和插件：通过 Collection，可以将相关的角色、模块和插件打包在一起，形成逻辑上的单元，提高了内容的组织性和可管理性。</span><br><span class=\"line\"></span><br><span class=\"line\">易于分享和分发：Ansible Collection 可以被轻松地分享和分发给其他用户。开发人员可以将自己的角色、模块打包成 Collection，并将其发布到 Ansible Galaxy 或其他集中式的仓库中，供其他用户使用。</span><br><span class=\"line\"></span><br><span class=\"line\">版本控制和更新：与角色相比，Collection 更容易进行版本控制和更新。开发人员可以为 Collection 指定版本，并在更新内容时发布新的版本，使得用户可以选择使用特定版本或者升级到最新版本。</span><br><span class=\"line\"></span><br><span class=\"line\">依赖管理：Collection 支持依赖管理，可以在 Collection 中指定依赖关系，确保相关的角色、模块和插件能够正常工作。</span><br><span class=\"line\"></span><br><span class=\"line\">提供文档和示例：开发人员可以将文档和示例代码与 Collection 打包在一起，使得用户更容易理解和使用其中的内容。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>总的来说，Ansible Collection 提供了一种更高级别的组织和管理方式，使得 Ansible 内容更易于分享、使用和维护，从而提高了 Ansible 的整体生态系统的健壮性和可用性。</p>\n</li>\n</ul>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">前面的剧本中我们多次使用到了<code>become</code>切换用户到root用户，其实在<code>ansible.cfg</code>中我们可以配置<code>become_user</code>，这样我们就可以不用每次都切换用户了</li>\n<li class=\"lvl-2\">但这里有个需要注意的点，就是因为 <code>become</code> 会以一个全新的环境执行任务，所以其不会包含原用户的环境变量。可以理解为其是通过<code>sudo su</code>切换到root，而非<code>sudo -i</code>。</li>\n</ul>\n</div>\n<h2 id=\"后记\">后记</h2>\n<p>关于ansible的知识点还有很多没有研究到，后面会慢慢补吧……</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>关于将Ansible Role发布到Galaxy的详细介绍可以参看 <a href=\"/2024/03/26/ansible-role-publish/\" title=\"Ansible Role Publish To Galaxy\">Ansible Role Publish To Galaxy</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>关于将Ansible Collection发布到Galaxy的详细介绍可以参看 <a href=\"/2024/03/27/ansible-collection-publish/\" title=\"Ansible Collection Publish To Galaxy\">Ansible Collection Publish To Galaxy</a></p>\n</li>\n</ul>\n","content_text":"摘要 本文介绍Ansible的安装和使用。 本文基于CentOS8。 Ansible简介 Ansible 是一个开源的自动化运维工具，它基于 Python 语言开发，支持跨平台，可以运行在 Linux、Unix、Mac OS X、Windows 等多种系统环境。 Ansible简单易用，只需要在控制主机上安装 Ansible 并在被管理主机上安装 Python 2.6 或更高版本即可（现有的开源Linux系统基本都自带了Python ，所以相当于远程主机什么都不需要安装），就可以管理远程主机对其进行自动化配置、编排高级工作流程以支持应用程序部署、系统更新等。 Ansible可以用来管理Linux、Unix、Windows、OpenStack、AWS、GCP、OpenShift、Kubernetes等系统环境。 Ansible官网文档：https://docs.ansible.com/ansible/latest/ Ansible中文权威指南：https://ansible-tran.readthedocs.io/en/latest/index.html Ansible安装 Ansible安装方式有多种，这里介绍通过pip安装，当前系统中的python版本为python3.9。 1python3 -m pip install ansible 如果尚未安装pip，可以通过下面的方法进行安装 12wget https://bootstrap.pypa.io/get-pip.pypython3 get-pip.py 安装完成后，可以查看一下版本 12345678910ansible --versionansible [core 2.15.9] config file = None configured module search path = [&#x27;/root/.ansible/plugins/modules&#x27;, &#x27;/usr/share/ansible/plugins/modules&#x27;] ansible python module location = /usr/local/lib/python3.9/site-packages/ansible ansible collection location = /root/.ansible/collections:/usr/share/ansible/collections executable location = /usr/local/bin/ansible python version = 3.9.16 (main, Sep 8 2023, 00:00:00) [GCC 11.4.1 20230605 (Red Hat 11.4.1-2)] (/usr/bin/python3) jinja version = 3.1.3 libyaml = True Ansible常用参数： 参数 说明 -u 指定连接到主机的用户名 -i 指定连接hosts文件的路径 -k 指定连接到主机的密码 -m 指定模块名称，可以指定模块的参数，比如指定shell模块的参数：-m shell -a ‘ls -l’ -a 指定模块的参数，比如指定shell模块的参数：-m shell -a ‘ls -l’ -e 指定附加参数，比如指定shell端口： -e ‘ansible_port=22’ -b 切换到root权限 -f 指定并发连接数，默认为5，即可以同时管理5台主机 Ansible的配置文件 ansible的相关配置都是通过一个名为ansible.cfg的配置文件进行配置的，但我们通过pip安装是不会默认创建它的，实际上不创建这个配置文件也不影响ansible的执行，因为其会使用一些默认的配置，并且在大多数场景下默认的配置就能满足需求。 ansible查找配置文件的顺序，优先级由上到下逐渐降低 1234* ANSIBLE_CONFIG (一个环境变量)* ansible.cfg (位于当前目录中)* .ansible.cfg (位于家目录中)* /etc/ansible/ansible.cfg 如果需要修改默认配置，我们可以通过如下命令创建一份配置文件 1234567891011# 此时会创建一份所有配置项都以 ; 开头的配置文件，我们要修改那个配置，就删除其前面的 ; ，然后修改其值即可ansible-config init --disabled &gt; ansible.cfg# 查看当前的生效配置，注意绿色为默认配置，黄色为被修改的配置ansible-config dump# 查看帮助文件ansible-config list# 查看默认配置项的值和注释说明ansible-config init list 常用配置详解 12345678910111213141516171819202122# 通用默认配置段；[defaults]# 被控端IP或者DNS列表；inventory=/etc/ansible/hosts# Ansible默认搜寻模块的位置；library=&#123;&#123; ANSIBLE_HOME ~ &quot;/plugins/modules:/usr/share/ansible/plugins/modules&quot; &#125;&#125;# 并行进程数；forks=5# 是否允许切换为其它用户become=False# become=True时，通过sudo进行切换become_method=sudo# 切换为rootbecome_user=root# 搜索roles的路径roles_path=&#123;&#123; ANSIBLE_HOME ~ &quot;/roles:/usr/share/ansible/roles:/etc/ansible/roles&quot; &#125;&#125;# 日志路径，默认不输出log_path=# Ansible命令执行默认的模块；module_name=command# 是否检查远程主机密钥，默认为True，如果希望不检查可以将其设为False，可以加快连接速度host_key_checking=True Ansible的hosts配置 需要创建hosts文件，使用ansible时，ansible会到hosts文件中查找对应的远程主机配置，默认的查找路径为/etc/ansible/hosts，也可以通过ansible.cfg修改默认配置 hosts文件格式1 hosts文件格式如下： 1234567# 可以配置ip或主机名[webservers] # 分组名称10.10.2.4510.10.2.46[dbservers]10.10.2.4710.10.2.48 命令行里加上连接参数 1234# 执行命令，多个ip逗号分隔ansible -u username -m ping --private-key=~/.ssh/id_rsa -e &#x27;ansible_port=22&#x27; 10.10.2.45,10.10.2.46# 指定hosts文件路径ansible -i hosts -u username -m ping --private-key=~/.ssh/id_rsa -e &#x27;ansible_port=22&#x27; 10.10.2.45,10.10.2.46 hosts文件格式2 hosts文件里也可以配置连接参数 123[webservers]10.10.2.45 ansible_ssh_user=username ansible_ssh_private_key=~/.ssh/id_rsa ansible_ssh_port=2210.10.2.46 ansible_ssh_user=username ansible_ssh_private_key=~/.ssh/id_rsa ansible_ssh_port=22 此时命令行连接时就不需要指定连接参数了 1ansible -i hosts -u username -m ping 10.10.2.45,10.10.2.46 hosts文件格式3 ansible是基于ssh建立连接的，所以只要ssh能连上远程主机，ansible就可以管理远程主机，如果我们为ssh配置config文件，那么ansible就可以直接将config里的Host名称配置到hosts文件里，这样就不需要配置连接参数了，同时此时也可以支持跳板机。关于ssh的config详细说明可以参考Linux常用命令--ssh、scp与免密登录 配置~/.ssh/config 123456789101112131415161718192021# 跳板机Host forward User ec2-user HostName 53.22.227.200 Port 22 IdentityFile ~/.ssh/id_rsa# 远程主机Host remote-host User ec2-user HostName 10.9.5.123 Port 22 IdentityFile ~/.ssh/key.pem ProxyCommand ssh forward -W %h:%p# 远程主机 ,10.9网段的所有主机Host 10.9.* User ec2-user Port 22 IdentityFile ~/.ssh/key.pem ProxyCommand ssh forward -W %h:%p hosts文件 12345[webservers]forward # 与config中配置的Host名称一致remote-host # 与config中配置的Host名称一致10.9.5.123 # 匹配config中的网段10.9.5.124 # 匹配config中的网段 命令行 12345678910111213# 通过指定主机名或ipansible -m ping remote-hostansible -m ping 10.9.5.123# 通配符匹配，此时在匹配hosts中123和124ansible -m ping &quot;10.9.5.*&quot;# 通过分组名ansible -m ping webservers# 通过all指定hosts里的全部主机ansible -m ping all 查看hosts配置相关命令 列出所有组的配置ip信息 1ansible all --list-hosts 查看当前hosts中配置所有组名称 1ansible localhost -m debug -a &#x27;var=groups.keys()&#x27; 列出指定组的配置ip信息 1ansible dbservers --list-hosts Ansible模块 列出所有模块 123ansible-doc -l# 也可以指定模块名称ansible-doc -l | grep -i shell 查看指定模块的参数信息，如下查看shell模块的参数说明 1ansible-doc -s shell 查看模块的帮助信息，如下查看shell模块的帮助信息，这与官方文档一致:shell模块 1ansible-doc shell Ansible管理工具常用的模块：command、shell、file、user、copy、service、yum、synchronze、cron、setup、ping等。可以在命令行里指定各个模块的参数(ansible命令)，也可以将参数配置到yml文件里，然后在命令行里指定yml文件(ansible-playbook命令)，下面会结合两种方式一块介绍。网上有大把的关于ansible命令的使用说明，这里只简单介绍几个模块的使用方法，其他模块的使用方法可以参考ansible模块 下面介绍的都是ansible核心模块:ansible-core debug模块 debug模块此模块在执行期间打印语句，可用于调试变量或表达式 通过命令行执行命令 1ansible webservers -m debug -a &#x27;msg=&quot;System HostName: &#123;&#123; inventory_hostname &#125;&#125;&quot;&#x27; 通过yml文件执行命令 12345678# debug.yml--- # yml文件的开头，规定playbook的yml文件格式，必须以---开头(必须)，...结尾(非必须)- name: Debug hosts: webservers tasks: - name: Debug debug: msg: &quot;System HostName: &#123;&#123; inventory_hostname &#125;&#125;&quot; 常用参数说明：ansible-doc -s debug 参数 描述 msg 打印消息，支持变量 var 打印消息，支持变量，注册变量 , 与msg互斥 ping模块 ping模块用于测试主机的连通性，它会尝试连接到主机，验证可用的python，并在成功时返回“pong”，可以指定主机名或ip，也可以指定分组名，也可以指定all 通过命令行执行命令 1ansible webservers -m ping 通过yml文件执行命令 123456789101112# ping.yml--- # yml文件的开头，规定playbook的yml文件格式，必须以---开头(必须)，...结尾(非必须)- name: Ping web servers hosts: webservers # ip或组名，也可以配置all：匹配全部主机 tasks: - name: Ping the servers ping: register: command_output - name: 显示命令输出 debug: var: command_output.stdout_lines # 注册变量输出要使用 var ansible-playbook 通过ansible-playbook命令，可以指定yml文件 ansible-playbook相关命令 123456789101112131415# 检查yml文件语法格式ansible-playbook --syntax-check ping.yml# 列出hostsansible-playbook --list-hosts ping.yml# 列出tagsansible-playbook --list-tags ping.yml# 列出taskansible-playbook --list-tasks ping.yml# 指定执行主机：--limit 或 -l，其必须是yml中hosts指定的子集ansible-playbook ping.yml --limit 192.168.20.23# 执行命令ansible-playbook ping.yml# 模拟执行，Ansible 会模拟执行任务，并输出执行结果，但不会对目标主机做出任何更改# 注意这个命令运行不报错并不能说明一定可以执行成功，因为这个命令是模拟执行的ansible-playbook ping.yml --check setup模块 该模块用于采集被管理设备信息并返回给服务端，后面跟--tree &lt;目录&gt;，可以将采集信息以ip为文件名保存至指定目录下 1234567891011# 查看全部信息ansible all -m setup# 只查看内存信息ansible all -m setup -a &quot;filter=*mem*&quot;# 只查看网络信息ansible all -m setup -a &quot;gather_subset=network&quot;# 保存信息至指定目录，这样会每个ip对应一个文件ansible all -m setup --tree ./ 常用参数说明：ansible-doc -s setup 参数 描述 gather_subset 指定要收集的系统信息的子集。可以是 all（所有信息）、network（网络信息）、hardware（硬件信息）等。默认为 all。 gather_timeout 设置信息收集的超时时间，单位为秒。默认为 10 秒。 filter 指定要收集的系统信息的过滤条件。可以是一个或多个标签，只收集匹配的信息。 fact_path 指定自定义 facts 文件的路径。 这里重点介绍一下gather_subset 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364all: 收集所有可用的系统信息。all_ipv4_addresses: 收集所有 IPv4 地址信息。all_ipv6_addresses: 收集所有 IPv6 地址信息。apparmor: 收集 AppArmor 相关信息。architecture: 收集系统架构信息。caps: 收集进程的 capabilities 信息。chroot: 收集 chroot 环境的信息。cmdline: 收集内核命令行参数信息。date_time: 收集日期和时间信息。default_ipv4: 收集默认的 IPv4 地址信息。default_ipv6: 收集默认的 IPv6 地址信息。devices: 收集系统设备信息。distribution: 收集发行版信息。distribution_major_version: 收集发行版主版本号。distribution_release: 收集发行版发行号。distribution_version: 收集发行版版本信息。dns: 收集 DNS 配置信息。effective_group_ids: 收集有效组 ID 信息。effective_user_id: 收集有效用户 ID 信息。env: 收集环境变量信息。facter: 收集 Facter 信息。fips: 收集 FIPS 相关信息。hardware: 收集硬件信息。interfaces: 收集网络接口信息。is_chroot: 收集是否处于 chroot 环境的信息。iscsi: 收集 iSCSI 配置信息。kernel: 收集内核信息。local: 收集本地配置信息。lsb: 收集 LSB 发行版信息。machine: 收集机器信息。machine_id: 收集机器 ID 信息。mounts: 收集挂载点信息。network: 收集网络相关信息。ohai: 收集 Ohai 信息。os_family: 收集操作系统家族信息。pkg_mgr: 收集包管理器信息。platform: 收集平台信息。processor: 收集处理器信息。processor_cores: 收集处理器核心数信息。processor_count: 收集处理器数量信息。python: 收集 Python 相关信息。python_version: 收集 Python 版本信息。real_user_id: 收集真实用户 ID 信息。selinux: 收集 SELinux 配置信息。service_mgr: 收集服务管理器信息。ssh_host_key_dsa_public: 收集 SSH DSA 公钥信息。ssh_host_key_ecdsa_public: 收集 SSH ECDSA 公钥信息。ssh_host_key_ed25519_public: 收集 SSH ED25519 公钥信息。ssh_host_key_rsa_public: 收集 SSH RSA 公钥信息。ssh_host_pub_keys: 收集 SSH 主机公钥信息。ssh_pub_keys: 收集 SSH 用户公钥信息。system: 收集系统相关信息。system_capabilities: 收集系统能力信息。system_capabilities_enforced: 收集系统能力强制信息。user: 收集用户账户信息。user_dir: 收集用户目录信息。user_gecos: 收集用户 GECOS 信息。user_gid: 收集用户组 ID 信息。user_id: 收集用户 ID 信息。user_shell: 收集用户 Shell 信息。user_uid: 收集用户 UID 信息。virtual: 收集虚拟化相关信息。virtualization_role: 收集虚拟化角色信息。virtualization_type: 收集虚拟化类型信息。 command模块 command模块为ansible默认模块，主要用于执行Linux基础命令，可以执行远程服务器命令执行、任务执行等操作。 command模块不支持管道符号、变量，只能运行简单命令，复杂命令需要使用shell模块 示例1 1ansible webservers -m command -a &quot;df -hT&quot; 12345678910111213# command.yml---- name: 在 web 服务器上运行 df -hT 命令 hosts: webservers tasks: - name: 执行 df -hT 命令 command: cmd: &quot;df -hT&quot; register: command_output # 保存命令执行结果 - name: 显示命令输出 debug: var: command_output.stdout_lines # 输出命令执行结果 示例2：参数chdir：切换到指定目录后再运行命令 可以通过ansible-doc -s command查看其支持的参数 1ansible webservers -m command -a &quot;chdir=/tmp ls -l&quot; 1234567891011121314# command2.yml---- name: 在 web 服务器上列出 /tmp 目录的内容 hosts: webservers tasks: - name: 切换到 /tmp 目录并列出内容 command: chdir: /tmp # 切换到 /tmp 目录 cmd: ls -l # 执行命令 register: command_output # 保存命令执行结果 - name: 显示命令输出 debug: var: command_output.stdout_lines # 输出命令执行结果 常用参数说明：ansible-doc -s command 参数 描述 argv 要执行的命令，可以是字符串形式或列表形式。 chdir 在执行命令之前切换到的目录。 cmd 要执行的命令。 creates 指定一个文件名或模式，如果匹配的文件已经存在，则不执行命令。 expand_argument_vars 是否展开作为变量的参数。默认为 true，表示展开变量。 free_form 以字符串形式指定要执行的命令。这个参数并不存在，但是 command 模块接受自由形式的字符串作为命令。 removes 指定一个文件名或模式，如果匹配的文件存在，则执行命令。 stdin 将命令的标准输入设置为指定的值。 stdin_add_newline 是否在标准输入数据后添加换行符。 strip_empty_ends 是否从标准输出的末尾剥离空行。 shell模块 shell模块与command模块类似，可以执行远程服务器命令执行、任务执行等操作，但是shell模块支持管道符号、变量，可以执行复杂命令 示例： 12345# 查看进程ansible webservers -m shell -a &quot;ps -ef | grep java | grep -v &#x27;grep&#x27;&quot;# 修改密码ansible webservers -m shell -a &quot; echo 123456 | passwd --stdin ansible&quot; 12345678910111213# shell.yml---- name: 在 web 服务器上查找 Java 进程 hosts: webservers tasks: - name: 执行 ps -ef | grep java | grep -v &#x27;grep&#x27; 命令 shell: cmd: ps -ef | grep java | grep -v &#x27;grep&#x27; register: command_output # 保存命令执行结果 - name: 显示命令输出 debug: var: command_output.stdout_lines # 输出命令执行结果 常用参数说明：ansible-doc -s shell 参数 描述 argv 要执行的命令，可以是字符串形式或列表形式。 chdir 在执行命令之前切换到的目录。 cmd 要执行的命令。 creates 指定一个文件名或模式，如果匹配的文件已经存在，则不执行命令。 executable 用于执行命令的可执行程序，默认情况下为 /bin/sh。 free_form 以字符串形式指定要执行的命令。这个参数并不存在，但是 shell 模块接受自由形式的字符串作为命令。 removes 指定一个文件名或模式，如果匹配的文件存在，则执行命令。 stdin 将命令的标准输入设置为指定的值。 stdin_add_newline 是否在标准输入数据后添加换行符。 strip_empty_ends 是否从标准输出的末尾剥离空行。 file模块 file模块主要用于文件和目录的管理，可以创建、删除、修改文件和目录，可以指定文件或目录的属性，可以指定文件或目录的权限，可以指定文件或目录的owner、group、mode等信息，等等 示例：创建目录 1ansible webservers -m file -a &quot;path=/tmp/`date +%F` state=directory mode=755&quot; 12345678910# file.yml---- name: 在 web 服务器上创建日期格式的目录 hosts: webservers tasks: - name: 创建目录 file: path: &quot;/tmp/&#123;&#123; ansible_date_time.date &#125;&#125;&quot; # ansible_date_time.date表示当前时间获取的日期，格式为YYYY-MM-DD state: directory # 创建目录，如果目录已经存在则不创建 mode: &quot;755&quot; # 设置目录权限 常用参数说明：ansible-doc -s file 参数 描述 path 文件或目录的路径。 state 文件或目录的状态。可选值包括 file（文件）、directory（目录）、link（符号链接）。默认为 file。 owner 文件或目录的所有者。 group 文件或目录的所属组。 mode 文件或目录的权限。 src 源文件路径，用于复制文件或创建链接。 dest 目标文件路径，用于复制文件或创建链接。 follow 是否遵循符号链接。如果为 yes，则会遵循符号链接进行操作。默认为 yes。 selevel 文件或目录的 SELinux 安全上下文。 serole 文件或目录的 SELinux 角色。 setype 文件或目录的 SELinux 类型。 seuser 文件或目录的 SELinux 用户。 unsafe_writes 是否启用不安全的写入模式。如果为 yes，则在写入文件之前不会创建备份。默认为 no。 这里重点说一下state 123456file：表示要求目标主机上存在指定的文件。如果文件已经存在，则不执行任何操作；如果文件不存在，则会创建它。directory：表示要求目标主机上存在指定的目录。如果目录已经存在，则不执行任何操作；如果目录不存在，则会创建它。link：表示要求目标主机上存在指定的符号链接。如果符号链接已经存在，则不执行任何操作；如果符号链接不存在，则会创建它。hard：创建硬链接touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间absent：删除目录、文件或者取消链接文件 copy模块 copy模块主要用于将文件复制到远程服务器，可以指定文件的源路径、目标路径、owner、group、mode等信息，等等 示例：复制文件到指定目录 12# -b 切换到root用户下执行ansible webservers -m copy -a &quot;src=/tmp/a.txt dest=/tmp/ owner=root group=root mode=755&quot; 12345678910111213# copy.yml---- name: 在 web 服务器上复制文件 hosts: webservers become: yes # 切换到root用户下执行 tasks: - name: 复制文件 copy: src: &quot;/tmp/a.txt&quot; # 源文件路径 dest: &quot;/tmp/&quot; # 目标文件路径 owner: root # 指定文件owner group: root # 指定文件group mode: &quot;755&quot; # 指定文件权限 常用参数说明：ansible-doc -s copy 参数 描述 src 源文件的路径。 dest 目标文件的路径。 backup 是否备份目标文件。如果为 yes，则在复制目标文件之前会创建一个备份文件。默认为 yes。 content 要写入目标文件的内容。 directory_mode 目标目录的权限。只有当目标是一个目录时才会生效。 follow 是否跟随符号链接。如果为 yes，则会跟随符号链接进行操作。默认为 yes。 force 是否强制覆盖目标文件。如果为 yes，则强制复制源文件，即使目标文件已经存在。默认为 no。 group 目标文件的所属组。 mode 目标文件的权限。 owner 目标文件的所有者。 remote_src 指定源文件是否在远程主机上。如果为 yes，表示源文件在远程主机上。默认为 no。 fetch模块 fetch模块主要用于将文件从远程服务器复制到本地，可以指定文件的源路径、目标路径、owner、group、mode等信息，等等 示例：将文件从远程服务器复制到本地 1ansible webservers -m fetch -a &quot;src=/tmp/a.txt dest=/tmp/ flat=yes&quot; 12345678910# fetch.yml---- name: 在 web 服务器上将文件从远程服务器复制到本地 hosts: webservers tasks: - name: 复制文件 fetch: src: &quot;/tmp/a.txt&quot; dest: &quot;/tmp/&quot; flat: yes # flat: yes # 将文件复制到dest目录下，不创建目录结构 常用参数说明：ansible-doc -s fetch 参数 描述 src 远程主机上要拉取的文件的路径。 dest 本地主机上文件的目标路径。 flat 是否将文件放置在顶层目录中。如果为 yes，则所有文件都将放置在一个目录中。默认为 no。 fail_on_missing 如果为 yes，则在源文件不存在时失败。默认为 yes。 validate_checksum 是否验证远程文件的校验和。默认为 no。 cron模块 cron模块主要用于在远程服务器上创建、修改、删除定时任务 示例：创建定时任务 1ansible webservers -m cron -a &#x27;name=&quot;restart httpd&quot; hour=*/5 job=&quot;systemctl restart httpd&quot;&#x27; 12345678910# cron.yml---- name: 在 web 服务器上创建定时任务 hosts: webservers tasks: - name: 创建定时任务 cron: name: &quot;restart httpd&quot; hour: &quot;*/5&quot; job: &quot;systemctl restart httpd&quot; 常用参数说明：ansible-doc -s cron 参数 描述 name cron 任务的名称。 minute cron 任务执行的分钟。 hour cron 任务执行的小时。 day cron 任务执行的日期。 month cron 任务执行的月份。 weekday cron 任务执行的星期几。 job 要执行的命令或脚本。 cron_file 要操作的 cron 文件的路径。默认为 /etc/crontab。 state cron 任务的状态。可选值包括 present（默认）和 absent。表示要求任务存在或不存在。 user cron 任务的执行用户。默认为 root。 backup 是否备份 cron 文件。可选值包括 true 和 false。 state 12present：表示要求指定的 cron 任务存在。如果指定的 cron 任务不存在，则 Ansible 将会创建它。如果已经存在，则不执行任何操作。absent：表示要求指定的 cron 任务不存在。如果指定的 cron 任务存在，则 Ansible 将会删除它。如果不存在，则不执行任何操作。 yum模块 yum模块主要用于在远程服务器上安装、卸载、更新软件包，可以指定软件包的名称、版本、repo等信息，等等 示例：安装软件包 12# 安装软件包，相当于 yum install httpdansible webservers -m yum -a &quot;name=httpd state=present&quot; 123456789# yum.yml---- name: 在 web 服务器上安装 httpd 软件包 hosts: webservers tasks: - name: 安装 httpd 软件包 yum: name: httpd # 软件包名称，相当于 yum install httpd state: present # 安装软件包，如果软件包已经安装则不安装 常用参数说明:ansible-doc -s yum 参数 解释 name 指定要操作的包的名称。 update_cache 指定是否在执行操作之前更新 yum 缓存。可选值为 yes 或 no。默认为 yes。 disable_gpg_check 指定是否禁用 GPG 检查。如果为 yes，则禁用 GPG 检查。默认为 no。 disable_plugin 指定是否禁用指定的 yum 插件。可以是一个插件名称的列表。 enablerepo 指定要启用的仓库。可以是一个仓库名称的列表。 disablerepo 指定要禁用的仓库。可以是一个仓库名称的列表。 installroot 指定要安装软件包的根目录。 security 指定是否只安装安全更新。如果为 yes，则只安装安全更新。默认为 no。 list 指定是否列出所有已安装的包。如果为 yes，则列出已安装的包。默认为 no。 state 指定软件包的状态。可选值为 present、latest、absent、installed、removed。默认为 present。 这里重点说一下state 12345present: 表示要求目标主机上存在指定的软件包。如果软件包已经安装，则不执行任何操作；如果软件包未安装，则会安装它。latest: 表示要求目标主机上存在指定的软件包，并且希望保持为最新版本。如果软件包已经安装，但不是最新版本，则会更新到最新版本；如果软件包未安装，则会安装最新版本。absent: 表示要求目标主机上不存在指定的软件包。如果软件包已安装，则会将其卸载；如果软件包未安装，则不执行任何操作。installed: 与 present 意义相同，用于明确表达希望软件包已经安装在目标主机上。removed: 与 absent 意义相同，用于明确表达希望软件包已从目标主机上卸载。 service模块:调用的是service命令 service模块主要用于在远程服务器上启动、停止、重启、重新加载、启用、禁用、检查服务，可以指定服务的名称、状态、启动方式等信息，等等 示例：启动服务 1ansible webservers -m service -a &quot;name=httpd state=started&quot; 123456789# service.yml---- name: 在 web 服务器上启动 httpd 服务 hosts: webservers tasks: - name: 启动 httpd 服务 service: name: httpd state: started 常用参数说明:ansible-doc -s service 参数 描述 name 服务的名称。 state 服务的状态。可选值包括 started（已启动）、stopped（已停止）、restarted（已重启）。 enabled 是否在启动时自动启用服务。如果为 yes，则在系统启动时自动启动服务。默认为 yes。 pattern 匹配服务的模式。默认情况下为服务名称。 sleep 在重新启动服务之前等待的秒数。 arguments 启动或停止服务时要传递的参数。 state 123started：表示要求服务处于已启动状态。如果指定的服务未启动，则 Ansible 将尝试启动该服务。如果服务已经处于运行状态，则不执行任何操作。stopped：表示要求服务处于已停止状态。如果指定的服务正在运行，则 Ansible 将尝试停止该服务。如果服务已经停止，则不执行任何操作。restarted：表示要求重启服务。无论服务当前处于运行状态还是停止状态，Ansible 都会尝试重新启动该服务。 systemd模块:支持centos7+，调用的是systemctl systemd模块用于控制 systemd 后台服务，允许你启动、重新启动、停止或者重新加载 systemd 服务。此外，你也可以使用它来使服务在系统启动时自动启动或禁止自动启动。除此之外，systemd 模块还允许你检查服务的状态。 示例 1ansible webservers -m systemd -a &quot;name=httpd state=restarted&quot; 123456789# systemd.yml---- name: 在 web 服务器上重新启动 httpd 服务 hosts: webservers tasks: - name: 重新启动 httpd 服务 systemd: name: httpd state: restarted 主要参数说明：ansible-doc -s systemd 参数 描述 enabled 指定服务是否应该在启动时自动启用。可选值为 yes 或 no。默认为 yes。 masked 指定服务是否应该被置为 masked 状态，禁止手动启动。可选值为 yes 或 no。默认为 no。 name 服务的名称。 state 指定服务的状态。可选值为 started（启动）、stopped（停止）、restarted（重新启动）、reloaded（重新加载） script模块 script模块主要用于在远程服务器上执行本地的脚本 示例：执行脚本 1ansible webservers -m script -a &quot;chdir=/tmp /tmp/a.sh&quot; 123456789# script.yml---- name: 在 web 服务器上运行脚本 hosts: webservers tasks: - name: 在 /tmp 目录中运行脚本 script: chdir: /tmp # 指定脚本的执行目录 cmd: /tmp/a.sh # 本地脚本的路径 常用参数说明:ansible-doc -s script 参数 描述 chdir 在远程主机上执行脚本之前切换到的目录。 free_form 要在远程主机上执行的脚本内容。 creates 如果指定的文件已经存在，则不执行脚本。 executable 指定要使用的脚本解释器。 removes 在执行脚本之后，如果指定的文件存在，则删除该文件。 cmd 指定要执行的命令。 decrypt 指定要解密的源文件。 user模块 user模块主要用于在远程服务器上创建、修改、删除用户，可以指定用户的名称、密码、uid、gid、home、shell等信息，等等 示例：创建用户 1ansible webservers -m user -a &quot;name=nginx group=nginx shell=/sbin/nologin create_home=no&quot; 12345678910# user.yml---- name: 创建用户 nginx hosts: webservers tasks: - name: 添加用户 nginx user: name: nginx # 用户名称 shell: /sbin/nologin # 指定用户shell,非登录用户 createhome: no # 不创建用户主目录 常用参数说明:ansible-doc -s user 参数 描述 append 是否将用户添加到现有组，而不是替换组。 comment 对用户的注释信息。 createhome 是否创建用户的家目录。 expires 用户帐户过期日期。 force 是否强制创建或更改用户帐户。 generate_ssh_key 是否生成用户的 SSH 密钥对。 group 用户所属组的名称或 ID。 groups 用户所属的其他组。 home 用户的家目录路径。 login_class 用户登录类。 move_home 是否在更改用户家目录路径时移动其内容。 name 用户的名称。 non_unique 允许用户具有非唯一的数字 ID。 password 用户的密码哈希值或加密后的密码。 remove 是否删除用户。 shell 用户的 shell。 state 用户帐户的状态。 system 是否为系统用户。 uid 用户的数字 ID。 state 12present：表示要求指定的用户账户存在。如果指定的用户账户不存在，则 Ansible 将会创建该账户。如果用户账户已经存在，则不执行任何操作。absent：表示要求指定的用户账户不存在。如果指定的用户账户存在，则 Ansible 将会删除该账户。如果用户账户不存在，则不执行任何操作。 get_url模块 get_url模块负责下载文件到目标主机。 示例 1ansible webservers -m get_url -a &quot;url=https://www.example.com dest=/tmp&quot; 123456789# get_url.yml---- name: 下载文件到目标主机的指定目录 hosts: webservers tasks: - name: Download files from remote host get_url: url: https://www.example.com/file.conf dest: /tmp 主要参数说明:ansible-doc -s get_url 参数 描述 url 要下载的文件的 URL 地址。 dest 下载文件保存的目标路径。 force 是否强制覆盖目标路径中的文件。可选值为 yes 或 no。默认为 yes。 timeout 下载超时时间，单位为秒。默认为 10 秒。 validate_certs 是否验证 SSL 证书。可选值为 yes 或 no。默认为 yes。 owner 下载后文件的所有者。 group 下载后文件的所属组。 mode 下载后文件的权限模式。 backup 是否创建备份文件。可选值为 yes 或 no。默认为 no。 headers 附加的 HTTP 请求头。 force_basic_auth 是否强制使用 HTTP 基本身份验证。可选值为 yes 或 no。默认为 yes。 http_agent 用于 HTTP 请求的代理。 lineinfile模块 lineinfile模块主要用于在远程主机上查找和替换文件中的行，可以指定要查找的行、要替换的行、要添加的行等信息，等等 示例：设置环境变量，需要注意的是此时环境变量在剧本的上下文中是不生效的，如果需要在剧本上下文生效的环境变量，可以使用 shell 模块 1ansible webservers -m lineinfile -a &quot;path=/etc/profile line=&#x27;PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin&#x27; state=present backup=yes&quot; 1234567891011# lineinfile.yml---- name: 设置环境变量 hosts: webservers tasks: - name: 设置环境变量 lineinfile: path: /etc/profile line: &#x27;PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin&#x27; state: present backup: yes 主要参数说明:ansible-doc -s lineinfile 参数 描述 path 要修改的文件的路径。 line 要添加、修改或删除的行内容。 state 指定要执行的操作。 regexp 用于匹配行的正则表达式。 search_string 用于匹配行的字符串。 backup 是否创建备份文件。可选值为 yes 或 no。默认为 no。 backrefs 是否允许在 regexp 中使用反向引用。 insertbefore 指定一个行，将新行插入到它之前。 insertafter 指定一个行，将新行插入到它之后。 firstmatch 是否只匹配第一个匹配项。 state说明 12present：确保指定的行存在于文件中。如果文件中不存在指定的行，则会添加该行。如果文件中已经存在该行，则不做任何改变。absent：确保指定的行不存在于文件中。如果文件中存在指定的行，则会将该行删除。如果文件中不存在该行，则不做任何改变。 ansible-playbook:剧本 ansible-playbook是Ansible的核心命令，用于执行playbook文件，playbook文件是Ansible执行任务的最小单元，一个playbook文件可以包含多个play，每个play可以包含多个task，每个task可以包含多个module，每个module可以执行一个操作，比如创建目录、安装软件包、启动服务、执行脚本等 Ansible中文全文指南–Playbooks 上面在介绍ansible模块时，我们已经编写了一些playbook文件，就是那些yml文件，运行时也是通过ansible-playbook命令执行的，但是基本上都是单个任务单个模块，下面我们来看一个复杂一些的示例 示例：安装nginx并配置 12345678910111213141516171819202122232425262728293031# playbook.yml---- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 tasks: - name: install nginx yum: name: gcc,zlib-devel,pcre-devel,openssl-devel state: installed - name: wget nginx tar.gz shell: cmd: wget https://nginx.org/download/nginx-1.22.1.tar.gz chdir: /usr/local - name: tar -zxvf nginx-1.22.1.tar.gz shell: cmd: tar -zxvf nginx-1.22.1.tar.gz chdir: /usr/local - name: add user nginx user: name: nginx state: present shell: /sbin/nologin createhome: no - name: configure ,make and make install shell: cmd: cd nginx-1.22.1;./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx;make -j4;make -j4 install; chdir: /usr/local - name: start nginx shell: cmd: /usr/local/nginx/sbin/nginx 优化1 问题: 上面的剧本有个问题，就是如果系统已经安装了nginx，则运行这个剧本还是会重新安装 解决方法: 先判断nginx是否已经安装，如果已经安装，直接跳过安装步骤，直接执行启动命令，否则执行安装步骤，然后再执行启动命令 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061---- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 tasks: - name: 检查系统是否已安装Nginx shell: /usr/local/nginx/sbin/nginx -v register: nginx_installed ignore_errors: yes - name: 安装Nginx依赖软件包 yum: name: &quot;&#123;&#123; item &#125;&#125;&quot; state: present loop: - gcc - zlib - zlib-devel - pcre-devel - openssl - openssl-devel when: nginx_installed.rc != 0 # 只有当Nginx未安装时执行 - name: 检查系统是否已启动Nginx shell: ps aux | grep nginx | grep -v grep register: nginx_status ignore_errors: yes - name: 下载Nginx源码包 get_url: url: https://nginx.org/download/nginx-1.22.1.tar.gz dest: /usr/local when: nginx_installed.rc != 0 # 只有当Nginx未安装时执行 - name: 解压Nginx源码包 shell: cmd: tar -zxvf nginx-1.22.1.tar.gz chdir: /usr/local when: nginx_installed.rc != 0 # 只有当Nginx未安装时执行 - name: 添加nginx用户 user: name: nginx state: present shell: /sbin/nologin createhome: no - name: 编译Nginx并安装 shell: cmd: | cd nginx-1.22.1 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx make -j4 make -j4 install chdir: /usr/local when: nginx_installed.rc != 0 # 只有当Nginx未安装时执行 - name: 启动Nginx服务 shell: cmd: /usr/local/nginx/sbin/nginx when: nginx_status.rc != 0 # 只有当Nginx未启动时执行 register :用于将命令执行的结果保存到变量中，我们可以调用变量的属性，比如rc表示命令返回的状态码($?)，stdout表示命令的输出，stderr表示命令的错误输出 ignore_errors :用于忽略错误 loop :用于循环列表 when :用于判断条件，只有条件满足时才执行 优化2 问题: 上面的步骤有点多，比如下载、解压、编译nginx，这些都是在没有安装nginx的情况下要运行的任务 解决方法: 使用shell模块可以将这些步骤封装成一个任务 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051---- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 tasks: - name: 检查系统是否已安装Nginx shell: /usr/local/nginx/sbin/nginx -v register: nginx_installed ignore_errors: yes - name: 安装Nginx依赖软件包 yum: name: &quot;&#123;&#123; item &#125;&#125;&quot; state: present loop: - gcc - zlib - zlib-devel - pcre-devel - openssl - openssl-devel when: nginx_installed.rc != 0 # 只有当Nginx未安装时执行 - name: 检查系统是否已启动Nginx shell: ps aux | grep nginx | grep -v grep register: nginx_status ignore_errors: yes - name: 添加nginx用户 user: name: nginx state: present shell: /sbin/nologin createhome: no - name: Nginx并安装 shell: cmd: | wget https://nginx.org/download/nginx-1.22.1.tar.gz tar -zxvf nginx-1.22.1.tar.gz cd nginx-1.22.1 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx make -j4 make -j4 install chdir: /usr/local when: nginx_installed.rc != 0 # 只有当Nginx未安装时执行 - name: 启动Nginx服务 shell: cmd: /usr/local/nginx/sbin/nginx when: nginx_status.rc != 0 # 只有当Nginx未启动时执行 优化3 问题: 上面的剧本虽然已经满足了我的需求，但是不够简练，因为很多任务并不是主要任务，我需要在每个任务中进行条件判断来决定是否执行该任务，能否只保留主要任务，其它任务只有当这些主要任务成功运行了才会被运行呢？比如这里的主要任务就是两个：1-判断是否安装了nginx，没安装就去安装，2-判断是否启动了nginx，没启动就去启动 解决方法: 使用基于handlers的notify语句，这样可以减少重复执行任务的次数 何为handlers Handler 本身是一种非同步的 callback function ，在这里则是指关连于特定 tasks 的事件 (event) 触发机制。当关联 handler 的 tasks 状态为被改变 (changed) 且都已被执行时，才会触发一次 何为 tasks 状态为被改变 (changed) 在Ansible中，task的状态会根据任务执行的结果而改变。当一个任务成功完成并且使得系统的状态与预期不同（即执行了一些更改），那么这个任务的状态就会被标记为&quot;changed&quot;。 具体来说，task状态为&quot;changed&quot;的条件包括但不限于以下情况： 123456文件变更：例如复制、创建、删除文件等操作导致了文件系统的变更。服务状态变更：例如启动、停止、重启服务等操作导致了服务状态的改变。配置更改：例如修改配置文件、添加配置项等操作导致了系统配置的改变。软件包安装/卸载：例如安装新的软件包或者删除已安装的软件包导致了系统软件状态的改变。权限变更：例如修改文件权限、更改用户组、更改用户等操作导致了系统权限的改变。当一个或多个任务的状态被标记为&quot;changed&quot;时，与这些任务关联的handlers会被触发执行。这样可以确保在所有相关的任务都完成并且导致了系统状态的改变时，才执行后续的处理操作，从而保证了任务的一致性和可靠性。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859---- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 tasks: - name: 判断是否存在nginx安装目录，不存在就安装nginx file: path: /usr/local/nginx state: directory notify: # 执行通知任务，顺序为从下到上 - Nginx安装 # 匹配任务name - 安装Nginx依赖软件包 - 添加nginx用户 - name: 检查系统是否已启动Nginx shell: ps aux | grep nginx | grep -v grep register: nginx_status ignore_errors: yes - name: 检查是否需要启动nginx shell: echo &quot;start nginx&quot; when: nginx_status.rc != 0 # 只有当条件满足时才会运行该任务 notify: # 运行任务后只有状态为changed才会发送notify给handler - 启动Nginx服务 handlers: # handlers是一类特殊任务，当有notify时，会自动执行该任务 - name: 添加nginx用户 user: name: nginx state: present shell: /sbin/nologin createhome: no - name: 安装Nginx依赖软件包 yum: name: &quot;&#123;&#123; item &#125;&#125;&quot; state: present loop: - gcc - zlib - zlib-devel - pcre-devel - openssl - openssl-devel - name: Nginx安装 shell: cmd: | wget https://nginx.org/download/nginx-1.22.1.tar.gz tar -zxvf nginx-1.22.1.tar.gz cd nginx-1.22.1 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx make -j4 make -j4 install chdir: /usr/local - name: 启动Nginx服务 shell: cmd: /usr/local/nginx/sbin/nginx 优化4 问题: 上面的剧本中nginx的安装版本和安装路径都是写死的，能否动态配置呢？ 解决方法: 提取变量，使用vars 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465---- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 vars: # 定义变量 nginx_version: &quot;1.22.1&quot; work_dir: &quot;/usr/local&quot; nginx_install_path: &quot;/usr/local/nginx&quot; tasks: - name: 判断是否存在nginx安装目录，不存在就安装nginx file: path: &quot;&#123;&#123; nginx_install_path &#125;&#125;&quot; # 变量一定要双括号 state: directory notify: # 执行通知任务，顺序为从下到上 - Nginx安装 # 匹配任务name - 安装Nginx依赖软件包 - 添加nginx用户 - name: 检查系统是否已启动Nginx shell: ps aux | grep nginx | grep -v grep register: nginx_status ignore_errors: yes - name: 检查是否需要启动nginx shell: echo &quot;start nginx&quot; when: nginx_status.rc != 0 notify: - 启动Nginx服务 handlers: # handlers是一类特殊任务，当有notify时，会自动执行该任务 - name: 添加nginx用户 user: name: nginx state: present shell: /sbin/nologin createhome: no - name: 安装Nginx依赖软件包 yum: name: &quot;&#123;&#123; item &#125;&#125;&quot; state: present loop: - gcc - zlib - zlib-devel - pcre-devel - openssl - openssl-devel - name: Nginx安装 shell: cmd: | wget https://nginx.org/download/nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz tar -zxvf nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz cd nginx-&#123;&#123; nginx_version &#125;&#125; ./configure --prefix=&#123;&#123; nginx_install_path &#125;&#125; --with-http_stub_status_module --with-http_ssl_module --user=nginx make -j4 make -j4 install chdir: &quot;&#123;&#123; work_dir &#125;&#125;&quot; - name: 启动Nginx服务 shell: cmd: &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot; 1234# 默认ansible-playbook nginx.yml# 修改变量ansible-playbook nginx.yml -e &quot;nginx_version=1.24.0&quot; -e &quot;work_dir=/root&quot; 小贴士 除了我们自己定义的变量，我们也可以使用Ansible内置的变量，Ansible内置的变量可以参考官方文档。 我们用的最多的就是ansible_facts变量获取主机信息，如IP地址、MAC地址、操作系统版本等。也就是通过setup模块获取的信息。 在使用ansible_facts变量时需要开启gather_facts选项，默认是开启的。 常用的ansible_facts变量如下，注意这里属性名称前是不加ansible_前缀的： 123ansible_facts[&#x27;distribution&#x27;]: 远程主机的操作系统分发名称。ansible_facts[&#x27;distribution_version&#x27;]: 远程主机的操作系统版本号。ansible_facts[&#x27;user_id&#x27;]: 远程主机上当前用户的用户 ID。 ansible-playbook:Template Ansible Playbook Template是一种Ansible的特性，它允许您在Playbook中使用Jinja2模板语言来动态生成配置文件或其他文本文件。通过使用模板，您可以根据变量、条件、循环等动态信息来生成目标文件，从而使配置文件更具可扩展性和灵活性。 下面是使用Ansible Playbook Template的一些常见用法和特性： 12345Jinja2模板语言: Ansible Playbook Template使用Jinja2模板语言，这是一种功能强大的模板引擎，支持变量替换、条件语句、循环语句等功能。变量替换: 您可以在模板中使用Ansible的变量来替换文本中的占位符。这使得您可以根据不同的环境或条件生成不同的配置文件。条件语句: 您可以在模板中使用条件语句来根据不同的条件生成不同的文本。这允许您根据需要灵活地调整生成的配置文件。循环语句: 您可以在模板中使用循环语句来对列表或字典中的元素进行迭代，从而生成重复的文本块。包含其他模板文件: 您可以在一个模板中包含其他模板文件，从而使模板更加模块化和易于管理。 Jinja2模板文件后缀为.j2，常用语法如下： 123456789101112131415# 打印变量&#123;&#123; index_title &#125;&#125;# for循环&#123;% for key in index_for_array %&#125;&lt;p&gt;show &#123;&#123; key &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125;# if判断&#123;% if blog_href_show %&#125;&lt;p&gt;&lt;a href=&quot;&#123;&#123; blog_href &#125;&#125;&quot;&gt;&#123;&#123; index_title &#125;&#125;&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using &#123;&#123; index_title &#125;&#125;.&lt;/em&gt;&lt;/p&gt;&#123;% endif %&#125; 结合上面部署nginx的示例，我这里增加一个任务，就是替换nginx发布目录下的index.html，然后重启nginx，这里给出index.html.j2 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;&#123;&#123; index_title &#125;&#125;&lt;/title&gt;&lt;style&gt;html &#123; color-scheme: light dark; &#125;body &#123; width: 35em; margin: 0 auto;font-family: Tahoma, Verdana, Arial, sans-serif; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello World!&lt;/h1&gt;&lt;img src=&quot;&#123;&#123; blog_img &#125;&#125;&quot;&gt;&#123;% for key in index_for_array %&#125;&lt;p&gt;show &#123;&#123; key &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125;&#123;% if blog_href_show %&#125;&lt;p&gt;&lt;a href=&quot;&#123;&#123; blog_href &#125;&#125;&quot;&gt;&#123;&#123; index_title &#125;&#125;&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using &#123;&#123; index_title &#125;&#125;.&lt;/em&gt;&lt;/p&gt;&#123;% endif %&#125;&lt;/body&gt;&lt;/html&gt; 接着我们修改剧本yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293---- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 vars: # 定义变量 nginx_version: &quot;1.22.1&quot; work_dir: &quot;/usr/local&quot; nginx_install_path: &quot;/usr/local/nginx&quot; index_title: &quot;hanqf&#x27;s blog&quot; index_for_array: - hello - world blog_href_show: true blog_href: &quot;https://blog.hanqunfeng.com&quot; blog_img: &quot;me.png&quot; tasks: - name: 判断是否存在nginx安装目录，不存在就安装nginx file: path: &quot;&#123;&#123; nginx_install_path &#125;&#125;&quot; # 变量一定要双括号 state: directory notify: # 执行通知任务，顺序为从下到上 - Nginx安装 # 匹配任务name - 安装Nginx依赖软件包 - 添加nginx用户 - name: 检查系统是否已启动Nginx shell: ps aux | grep nginx | grep -v grep register: nginx_status ignore_errors: yes - name: 检查是否需要启动nginx shell: echo &quot;start nginx&quot; when: nginx_status.rc != 0 notify: - 启动Nginx服务 - name: 上传图片 copy: src: me.png # 与yml在同一目录 dest: &quot;&#123;&#123; nginx_install_path &#125;&#125;/html/me.png&quot; - name: 发布index.html template: src: index.html.j2 # 与yml在同一目录 dest: &quot;&#123;&#123; nginx_install_path &#125;&#125;/html/index.html&quot; force: true # 强制覆盖 backup: true # 覆盖前备份 notify: - 重启Nginx服务 handlers: # handlers是一类特殊任务，当有notify时，会自动执行该任务 - name: 添加nginx用户 user: name: nginx state: present shell: /sbin/nologin createhome: no - name: 安装Nginx依赖软件包 yum: name: &quot;&#123;&#123; item &#125;&#125;&quot; state: present loop: - gcc - zlib - zlib-devel - pcre-devel - openssl - openssl-devel - name: Nginx安装 shell: cmd: | wget https://nginx.org/download/nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz tar -zxvf nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz cd nginx-&#123;&#123; nginx_version &#125;&#125; ./configure --prefix=&#123;&#123; nginx_install_path &#125;&#125; --with-http_stub_status_module --with-http_ssl_module --user=nginx make -j4 make -j4 install chdir: &quot;&#123;&#123; work_dir &#125;&#125;&quot; - name: 启动Nginx服务 shell: cmd: &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot; - name: 重启Nginx服务 shell: cmd: | pkill nginx &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot; 替换之后的效果 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;hanqf&#x27;s blog&lt;/title&gt;&lt;style&gt;html &#123; color-scheme: light dark; &#125;body &#123; width: 35em; margin: 0 auto;font-family: Tahoma, Verdana, Arial, sans-serif; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello World!&lt;/h1&gt;&lt;img src=&quot;me.png&quot;&gt;&lt;p&gt;show hello&lt;/p&gt;&lt;p&gt;show world&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blog.hanqunfeng.com&quot;&gt;hanqf&#x27;s blog&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using hanqf&#x27;s blog.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; template模块的常用参数说明 ansible-doc -s template 参数 必需 默认值 描述 src 是 无 模板文件的路径。 dest 是 无 目标文件的路径。 force 否 false 如果目标文件已经存在，是否强制覆盖。 backup 否 false 如果设置为true，则在覆盖目标文件之前创建备份。 unsafe_writes 否 false 如果设置为true，则会跳过文件的暂时性写入保护（如确保在写入文件之前不会更改其内容）。 newline_sequence 否 \\n 用于生成文件时的换行符序列。 validate 否 无 要应用于生成文件的验证器脚本的路径。 mode 否 无 目标文件的权限模式。 owner 否 无 目标文件的所有者。 group 否 无 目标文件的所属组。 这里要注意template模块与copy模块的区别，前者在上传时会进行变量替换。 ansible-playbook:Role Ansible中的Role是一种组织和管理剧本的方法，它允许您将相关的任务、变量、文件和处理程序组合到一个可重用的单元中。Role使得您可以更轻松地管理和组织大型的Ansible项目，并促进了可维护性和复用性。 Role的特性 1234567891011组织性：Role允许您将相关的任务和文件组织在一起，使得代码更易于理解和维护。每个Role通常都有一个特定的目的，例如安装特定的软件、配置服务或执行特定的系统管理任务。可重用性：Role可以被设计成可重用的组件，可以在不同的项目中多次使用。这样一来，您可以将常见的功能和配置封装到Role中，并在需要时轻松地调用它们，从而提高了代码的复用性和可移植性。结构化布局：Ansible推荐一种特定的目录结构来组织Role，包括tasks、handlers、templates、files、vars和defaults等目录。这种结构化布局有助于更清晰地分离任务、变量、文件和处理程序，并使Role更易于管理和维护。参数化：Role可以使用变量来接受外部输入，从而使其更加灵活和通用。通过参数化，您可以定制Role的行为，使其适用于不同的环境和需求。依赖关系：Role可以定义依赖关系，即一个Role可能依赖于另一个Role。这种依赖关系使得您可以构建复杂的系统配置，而不必重复编写相同的代码。可测试性：由于Role是可重用的组件，因此它们也是可测试的。您可以编写测试用例来验证Role的行为是否符合预期，并确保在修改代码时不会破坏现有功能。 ansible-examples 创建role 123456789101112131415161718192021222324252627# 在当前目录下创建一个名称为nginx-install的role，实际上就是创建一个名称为nginx-install的目录结构ansible-galaxy init nginx-install# 在指定目录下创建roleansible-galaxy init --init-path /usr/local nginx-install# nginx-install目录结构$ tree nginx-install/nginx-install/├── README.md├── defaults│ └── main.yml├── files├── handlers│ └── main.yml├── meta│ └── main.yml├── tasks│ └── main.yml├── templates├── tests│ ├── inventory│ └── test.yml└── vars └── main.yml8 directories, 8 files 12345678files：存放由copy或script模块等调用的文件templates：template模块查找所需要模板文件的目录tasks：定义task、role的基本元素，至少应该包含一个名为main.yml的文件。其他文件需要在此文件中通过include进行包含handlers：至少应该包含一个名为main.yml的文件，其他文件需要在此文件中通过include进行包含vars：定义变量，至少应该包含一个名为main.yml的文件，其他文件需要在此文件中通过include进行包含meta：定义当前角色的特殊设定及其依赖关系，至少应该包含一个名为main.yml的文件，其他文件需在此文件中通过include进行包含default：设定默认变量时使用此目录中的main.yml文件，比vars的优先级低tests：定义测试用例，至少应该包含一个名为inventory的文件，其他文件需要在此文件中通过include进行包含 ansible查找role的路径，推荐放到/etc/ansible/roles 12345$(pwd)/roles/$(whoami)/.ansible/roles/usr/share/ansible/roles/etc/ansible/roles$(pwd) 我们将上面安装nginx那个剧本修改为role的方式 nginx-install/tasks/main.yml 1234567891011121314151617181920212223242526272829303132333435363738394041---# tasks file for nginx-install- name: Check if running as root fail: msg: &quot;This role must be run as root user&quot; when: ansible_facts[&#x27;user_id&#x27;] != &#x27;root&#x27; # 因为我们的剧本是需要root用户运行，所以这里加一个判断，这里就用到了ansible_facts特殊变量- name: 判断是否存在nginx安装目录，不存在就安装nginx file: path: &quot;&#123;&#123; nginx_install_path &#125;&#125;&quot; state: directory notify: # 执行通知任务，顺序为从下到上 - Nginx安装 - 安装Nginx依赖软件包 - 添加nginx用户- name: 检查系统是否已启动Nginx shell: ps aux | grep nginx | grep -v grep register: nginx_status ignore_errors: yes- name: 检查是否需要启动nginx shell: echo &quot;start nginx&quot; when: nginx_status.rc != 0 notify: - 启动Nginx服务- name: 上传图片 copy: src: me.png # 与yml在同一目录 dest: &quot;&#123;&#123; nginx_install_path &#125;&#125;/html/me.png&quot;- name: 发布index.html template: src: index.html.j2 # 与yml在同一目录 dest: &quot;&#123;&#123; nginx_install_path &#125;&#125;/html/index.html&quot; force: true # 强制覆盖 backup: true # 覆盖前备份 notify: - 重启Nginx服务 nginx-install/handlers/main.yml 1234567891011121314151617181920212223242526272829303132333435363738394041---# handlers file for nginx-install- name: 添加nginx用户 user: name: nginx state: present shell: /sbin/nologin createhome: no- name: 安装Nginx依赖软件包 yum: name: &quot;&#123;&#123; item &#125;&#125;&quot; state: present loop: - gcc - zlib - zlib-devel - pcre-devel - openssl - openssl-devel- name: Nginx安装 shell: cmd: | wget https://nginx.org/download/nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz tar -zxvf nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz cd nginx-&#123;&#123; nginx_version &#125;&#125; ./configure --prefix=&#123;&#123; nginx_install_path &#125;&#125; --with-http_stub_status_module --with-http_ssl_module --user=nginx make -j4 make -j4 install chdir: &quot;&#123;&#123; work_dir &#125;&#125;&quot;- name: 启动Nginx服务 shell: cmd: &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot;- name: 重启Nginx服务 shell: cmd: | pkill nginx &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot; nginx-install/vars/main.yml 123456789101112---# vars file for nginx-installnginx_version: &quot;1.22.1&quot;work_dir: &quot;/usr/local&quot;nginx_install_path: &quot;/usr/local/nginx&quot;index_title: &quot;hanqf&#x27;s blog&quot;index_for_array: - hello - worldblog_href_show: trueblog_href: &quot;https://blog.hanqunfeng.com&quot;blog_img: &quot;me.png&quot; 小贴士 上面介绍的tasks、handlers，其目录中都含有一个main.yml文件，这个文件是必须存在的 但是如果配置的内容比较多，都写在main.yml文件中，那么这个文件就显得有点臃肿，所以可以将这些内容拆分成多个文件，然后在main.yml文件中通过include进行包含 123---- include: other1.yml- include: other2.yml tasks或者handlers中还可以使用include_tasks进行包含 12345678---- include_tasks: other1.yml- include_tasks: other2.yml# 或者- include_tasks: &quot;&#123;&#123; item &#125;&#125;&quot; loop: - other1.yml - other2.yml vars里也可以定义多个yml文件存储变量，然后在tasks中通过include_vars进行包含，注意，必须放在task的yml文件中 12345678# 此时不需要加上vars路径，会自动从vars目录下查找- include_vars: &quot;v-other1.yml&quot;- include_vars: &quot;v-other2.yml&quot;# 或者- include_vars: &quot;&#123;&#123; item &#125;&#125;&quot; loop: - v-other1.yml - v-other2.yml 将模板文件和图片文本保存到对应的路径 nginx-install/templates/index.html.j2 nginx-install/files/me.png 执行 假设我们将创建的角色安装到了/etc/ansible/roles下 创建启动剧本nginx-install-start.yml，我们也可以修改tests/test.yml 12345- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 roles: # 调用role - nginx-install # role名称 执行role 1ansible-playbook nginx-install-start.yml ansible-galaxy 什么是ansible-galaxy 用于从ansible-galaxy官网上查找，下载role和collection的工具，如何下载和使用网站上都有说明。 ansible-galaxy用户指南 我们也可以将自己创建好的role发布到ansible-galaxy上，可以参考 Ansible Role Publish To Galaxy role 1234567891011121314# 搜索roleansible-galaxy search mysql# 或者ansible-galaxy role search mysql# 查看已经安装的roleansible-galaxy list# 或者ansible-galaxy role list# 安装role，默认安装到 ~/.ansible/roles 下ansible-galaxy role install shaneholloman.redis# 安装到指定路径ansible-galaxy role install &lt;role-name&gt; -p &lt;path&gt; collection ansible-galaxy同时支持下载 collection 1234567# 查看已经安装的collectionansible-galaxy collection list# 安装collection，，默认安装到 ~/.ansible/collections/ansible_collections 下ansible-galaxy collection install saiello.kafka# 安装到指定路径ansible-galaxy collection install &lt;collection-name&gt; -p &lt;path&gt; Ansible Collection 是 Ansible 社区为了更好地管理和组织 Ansible 角色、模块、插件等内容而引入的概念。它可以被视为一种打包机制，用于将相关的 Ansible 内容打包成单独的单元，使得其更易于分享、安装和维护。 具体来说，Ansible Collection 具有以下作用： 123456789组织和管理角色、模块和插件：通过 Collection，可以将相关的角色、模块和插件打包在一起，形成逻辑上的单元，提高了内容的组织性和可管理性。易于分享和分发：Ansible Collection 可以被轻松地分享和分发给其他用户。开发人员可以将自己的角色、模块打包成 Collection，并将其发布到 Ansible Galaxy 或其他集中式的仓库中，供其他用户使用。版本控制和更新：与角色相比，Collection 更容易进行版本控制和更新。开发人员可以为 Collection 指定版本，并在更新内容时发布新的版本，使得用户可以选择使用特定版本或者升级到最新版本。依赖管理：Collection 支持依赖管理，可以在 Collection 中指定依赖关系，确保相关的角色、模块和插件能够正常工作。提供文档和示例：开发人员可以将文档和示例代码与 Collection 打包在一起，使得用户更容易理解和使用其中的内容。 总的来说，Ansible Collection 提供了一种更高级别的组织和管理方式，使得 Ansible 内容更易于分享、使用和维护，从而提高了 Ansible 的整体生态系统的健壮性和可用性。 小贴士 前面的剧本中我们多次使用到了become切换用户到root用户，其实在ansible.cfg中我们可以配置become_user，这样我们就可以不用每次都切换用户了 但这里有个需要注意的点，就是因为 become 会以一个全新的环境执行任务，所以其不会包含原用户的环境变量。可以理解为其是通过sudo su切换到root，而非sudo -i。 后记 关于ansible的知识点还有很多没有研究到，后面会慢慢补吧…… 关于将Ansible Role发布到Galaxy的详细介绍可以参看 Ansible Role Publish To Galaxy 关于将Ansible Collection发布到Galaxy的详细介绍可以参看 Ansible Collection Publish To Galaxy","summary":"摘要 本文介绍Ansible的安装和使用。 本文基于CentOS8。","date_published":"2024-03-19T13:30:05.000Z","tags":["技术","linux","linux常用命令","linux常用命令"]},{"id":"https://blog.hanqunfeng.com/2024/03/14/mongodb7-mtools/","url":"https://blog.hanqunfeng.com/2024/03/14/mongodb7-mtools/","title":"MongoDB本地测试环境搭建工具--mtools之mlaunch使用方法","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍mtools工具的使用</p>\n</li>\n<li class=\"lvl-2\">\n<p>mtools<a href=\"https://rueckstiess.github.io/mtools/\">官方文档</a>，<a href=\"https://github.com/rueckstiess/mtools\">mtools-github</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>mtools提供的<code>mlaunch</code>是一个基于python的mongo环境管理工具，可以方便的启动、停止、重启、kill mongo进程，还可以查看mongo进程的运行状态，可以方便初学者快速搭建本地mongo环境，但是其只能在一台机器上运行。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"mtools安装\">mtools安装</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>mtools基于python3，支持mongo4+以上版本，但是mtools并且不会为我们安装mongodb，所以需要我们自己先在系统中安装好mongodb，mongodb的安装可以参考<a href=\"/2024/03/01/mongodb7/\" title=\"MongoDB7.0的安装\">MongoDB7.0的安装</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>按照官网的说法，mtools支持的Python版本为 3.7|3.8|3.9|3.10，其他版本的Python目前不受支持或测试，但作者的python版本为3.11.3，并没有出现兼容性问题。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ python3 --version</span><br><span class=\"line\">Python 3.11.3</span><br><span class=\"line\">➜  ~ pip3 -V</span><br><span class=\"line\">pip 24.0 from /usr/local/lib/python3.11/site-packages/pip (python 3.11)</span><br><span class=\"line\">➜  ~ pip3 list</span><br><span class=\"line\">Package           Version</span><br><span class=\"line\">----------------- ------------</span><br><span class=\"line\">certifi           2023.11.17</span><br><span class=\"line\">cffi              1.16.0</span><br><span class=\"line\">cryptography      41.0.7</span><br><span class=\"line\">docutils          0.20.1</span><br><span class=\"line\">idna              3.6</span><br><span class=\"line\">Jinja2            3.1.2</span><br><span class=\"line\">MarkupSafe        2.1.3</span><br><span class=\"line\">packaging         23.2</span><br><span class=\"line\">pip               24.0</span><br><span class=\"line\">pycparser         2.21</span><br><span class=\"line\">Pygments          2.17.2</span><br><span class=\"line\">pyparsing         3.1.1</span><br><span class=\"line\">pytz              2023.3.post1</span><br><span class=\"line\">requests          2.31.0</span><br><span class=\"line\">setuptools        68.2.2</span><br><span class=\"line\">six               1.16.0</span><br><span class=\"line\">tabulate          0.0.0</span><br><span class=\"line\">typing_extensions 4.9.0</span><br><span class=\"line\">urllib3           2.1.0</span><br><span class=\"line\">wheel             0.41.2</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装mtools依赖</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install python-dateutil psutil pymongo</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装mtools</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install mtools</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装mtools会同时为我们安装mtools的所有工具，如果只希望安装mlaunch，可以使用下面的命令<br>\n<em><strong>mtools提供的其它工具，如<code>mlogfilter</code>,<code>mloginfo</code>,<code>mplotqueries</code>等并不支持<code>logv2</code>格式的日志，<code>logv2</code>是<code>mongodb4.4+</code>以后的加入的，从<code>mongodb5.0</code>以后<code>logv2</code>为默认的日志格式，所以这里不做介绍。</strong></em></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install <span class=\"string\">&#x27;mtools[mlaunch]&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"mlaunch\">mlaunch</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看mlaunch版本</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ <span class=\"built_in\">which</span> mlaunch</span><br><span class=\"line\">/usr/local/bin/mlaunch</span><br><span class=\"line\">➜  ~ mlaunch --version</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">mtools version 1.7.2 || Python 3.11.6 (main, Oct 3 2023, 02:51:45) [Clang 14.0.3 (clang-1403.0.22.14.1)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"init-构建环境\">init :构建环境</h3>\n<p><em><strong>此命令初始化并启动MongoDB独立实例、副本集或分片集群，它只需要为每个环境调用一次。</strong></em></p>\n<h4 id=\"构建独立实例\">构建独立实例</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快速构建一个单节点，数据目录在当前路径下的data目录下</span></span><br><span class=\"line\">$ mlaunch init --single --auth</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">Generating keyfile: /mongodb/mtools/single/data/keyfile</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27017</span><br><span class=\"line\">Username <span class=\"string\">&quot;user&quot;</span>, password <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数说明</span></span><br><span class=\"line\"><span class=\"comment\"># --single ：启动单节点</span></span><br><span class=\"line\"><span class=\"comment\"># --auth ：开启默认认证，默认用户名/密码:user/password，并授予如下角色</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123; role: &#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123; role: &#x27;readWriteAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123; role: &#x27;dbAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123; role: &#x27;clusterAdmin&#x27;, db: &#x27;admin&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"># --dir ：指定数据目录，默认为当前路径下的data目录</span></span><br><span class=\"line\"><span class=\"comment\"># --bind_ip：指定监听ip，默认为127.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"># --port：指定监听端口，默认为27017</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构建复制集\">构建复制集</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快速构建一个3节点的复制集</span></span><br><span class=\"line\">$ mlaunch init --replicaset --nodes 3 --auth --port 27040</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">Generating keyfile: /mongodb/mtools/replicaset/data/keyfile</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27040</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27041</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27042</span><br><span class=\"line\">replica <span class=\"built_in\">set</span> <span class=\"string\">&#x27;replset&#x27;</span> initialized.</span><br><span class=\"line\">waiting <span class=\"keyword\">for</span> primary to add a user.</span><br><span class=\"line\">Username <span class=\"string\">&quot;user&quot;</span>, password <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --replicaset ：创建副本集，默认3个节点</span></span><br><span class=\"line\"><span class=\"comment\"># --nodes 3 ：指定副本集节点个数，默认3个节点</span></span><br><span class=\"line\"><span class=\"comment\"># --auth : 开启默认认证，同单节点</span></span><br><span class=\"line\"><span class=\"comment\"># --port 27040 : 指定复制集的起始端口，默认从27017开始，依次递增</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构建分片集群\">构建分片集群</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快速构建一个2个分片的分片集群，每个分片是一个包含3每个节点的复制集，包含一个3个节点配置复制集，并且启动3个mongos路由</span></span><br><span class=\"line\">$ mlaunch init --sharded 2 --replicaset --node 3 --config 3 --csrs --mongos 3 --auth --port 27050</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">Generating keyfile: /mongodb/mtools/sharded/data/keyfile</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27053</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27054</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27055</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27056</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27057</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27058</span><br><span class=\"line\">launching: config server on port 27059</span><br><span class=\"line\">launching: config server on port 27060</span><br><span class=\"line\">launching: config server on port 27061</span><br><span class=\"line\">replica <span class=\"built_in\">set</span> <span class=\"string\">&#x27;configRepl&#x27;</span> initialized.</span><br><span class=\"line\">replica <span class=\"built_in\">set</span> <span class=\"string\">&#x27;shard01&#x27;</span> initialized.</span><br><span class=\"line\">replica <span class=\"built_in\">set</span> <span class=\"string\">&#x27;shard02&#x27;</span> initialized.</span><br><span class=\"line\">launching: mongos on port 27050</span><br><span class=\"line\">launching: mongos on port 27051</span><br><span class=\"line\">launching: mongos on port 27052</span><br><span class=\"line\">adding shards. can take up to 30 seconds...</span><br><span class=\"line\">sent signal 15 to 12 processes.</span><br><span class=\"line\">launching: config server on port 27059</span><br><span class=\"line\">launching: config server on port 27060</span><br><span class=\"line\">launching: config server on port 27061</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27053</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27054</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27055</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27056</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27057</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27058</span><br><span class=\"line\">launching: mongos on port 27050</span><br><span class=\"line\">launching: mongos on port 27051</span><br><span class=\"line\">launching: mongos on port 27052</span><br><span class=\"line\">Username <span class=\"string\">&quot;user&quot;</span>, password <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --sharded 2：启用分片集群模式，分片数为2。</span></span><br><span class=\"line\"><span class=\"comment\"># --replicaset : 创建副本集，默认3个节点，可以通过 --nodes 指定复制集节点个数</span></span><br><span class=\"line\"><span class=\"comment\"># --nodes 3：采用3节点的复制集架构，默认就是3个节点。</span></span><br><span class=\"line\"><span class=\"comment\"># --config 3：配置服务器采用3节点的复制集架构模式</span></span><br><span class=\"line\"><span class=\"comment\"># --csrs：指Config Server as a Replica Set，这个也是默认配置</span></span><br><span class=\"line\"><span class=\"comment\"># --mongos 3：启动3个mongos实例进程。</span></span><br><span class=\"line\"><span class=\"comment\"># --auth : 开启默认认证，同单节点</span></span><br><span class=\"line\"><span class=\"comment\"># --port 27050：集群将以27050作为起始端口，集群中的各个实例基于该端口向上递增。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下命令运行时必须指定数据目录，默认为当前路径下的data目录，可以使用<code>--dir</code>指定数据目录，因为需要通过<code>./data/.mlaunch_startup</code>来获取mongo的构建信息。以分片集群举例：</p>\n</blockquote>\n<h3 id=\"list-查看启动信息\">list: 查看启动信息</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看集群状态</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示mongo进程的列表</span></span><br><span class=\"line\">$ mlaunch list</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\"></span><br><span class=\"line\">PROCESS          PORT     STATUS     PID</span><br><span class=\"line\"></span><br><span class=\"line\">mongos           27050    running    61988</span><br><span class=\"line\">mongos           27051    running    61991</span><br><span class=\"line\">mongos           27052    running    61999</span><br><span class=\"line\"></span><br><span class=\"line\">config server    27059    running    61903</span><br><span class=\"line\">config server    27060    running    61911</span><br><span class=\"line\">config server    27061    running    61914</span><br><span class=\"line\"></span><br><span class=\"line\">shard01</span><br><span class=\"line\">    mongod       27053    running    61922</span><br><span class=\"line\">    mongod       27054    running    61947</span><br><span class=\"line\">    mongod       27055    running    61955</span><br><span class=\"line\"></span><br><span class=\"line\">shard02</span><br><span class=\"line\">    mongod       27056    running    61964</span><br><span class=\"line\">    mongod       27057    running    61972</span><br><span class=\"line\">    mongod       27058    running    61980</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看启动命令</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mlaunch list --startup</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\"></span><br><span class=\"line\">PROCESS          PORT     STATUS     PID      STARTUP COMMAND</span><br><span class=\"line\"></span><br><span class=\"line\">mongos           27050    running    61988    mongos --logpath /mongodb/mtools/sharded/data/mongos/mongos_27050.<span class=\"built_in\">log</span> --port 27050 --configdb configRepl/localhost:27059,localhost:27060,localhost:27061 --keyFile /mongodb/mtools/sharded/data/keyfile --fork</span><br><span class=\"line\">mongos           27051    running    61991    mongos --logpath /mongodb/mtools/sharded/data/mongos/mongos_27051.<span class=\"built_in\">log</span> --port 27051 --configdb configRepl/localhost:27059,localhost:27060,localhost:27061 --keyFile /mongodb/mtools/sharded/data/keyfile --fork</span><br><span class=\"line\">mongos           27052    running    61999    mongos --logpath /mongodb/mtools/sharded/data/mongos/mongos_27052.<span class=\"built_in\">log</span> --port 27052 --configdb configRepl/localhost:27059,localhost:27060,localhost:27061 --keyFile /mongodb/mtools/sharded/data/keyfile --fork</span><br><span class=\"line\"></span><br><span class=\"line\">config server    27059    running    61903    mongod --replSet configRepl --dbpath /mongodb/mtools/sharded/data/configRepl/rs1/db --logpath /mongodb/mtools/sharded/data/configRepl/rs1/mongod.log --port 27059 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --configsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\">config server    27060    running    61911    mongod --replSet configRepl --dbpath /mongodb/mtools/sharded/data/configRepl/rs2/db --logpath /mongodb/mtools/sharded/data/configRepl/rs2/mongod.log --port 27060 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --configsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\">config server    27061    running    61914    mongod --replSet configRepl --dbpath /mongodb/mtools/sharded/data/configRepl/rs3/db --logpath /mongodb/mtools/sharded/data/configRepl/rs3/mongod.log --port 27061 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --configsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\"></span><br><span class=\"line\">shard01</span><br><span class=\"line\">    mongod       27053    running    61922    mongod --replSet shard01 --dbpath /mongodb/mtools/sharded/data/shard01/rs1/db --logpath /mongodb/mtools/sharded/data/shard01/rs1/mongod.log --port 27053 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\">    mongod       27054    running    61947    mongod --replSet shard01 --dbpath /mongodb/mtools/sharded/data/shard01/rs2/db --logpath /mongodb/mtools/sharded/data/shard01/rs2/mongod.log --port 27054 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\">    mongod       27055    running    61955    mongod --replSet shard01 --dbpath /mongodb/mtools/sharded/data/shard01/rs3/db --logpath /mongodb/mtools/sharded/data/shard01/rs3/mongod.log --port 27055 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\"></span><br><span class=\"line\">shard02</span><br><span class=\"line\">    mongod       27056    running    61964    mongod --replSet shard02 --dbpath /mongodb/mtools/sharded/data/shard02/rs1/db --logpath /mongodb/mtools/sharded/data/shard02/rs1/mongod.log --port 27056 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\">    mongod       27057    running    61972    mongod --replSet shard02 --dbpath /mongodb/mtools/sharded/data/shard02/rs2/db --logpath /mongodb/mtools/sharded/data/shard02/rs2/mongod.log --port 27057 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\">    mongod       27058    running    61980    mongod --replSet shard02 --dbpath /mongodb/mtools/sharded/data/shard02/rs3/db --logpath /mongodb/mtools/sharded/data/shard02/rs3/mongod.log --port 27058 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    auth: <span class=\"string\">&quot;user:password&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"stop-关闭-mongo进程\">stop: 关闭 mongo进程</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭全部mongo进程，注意：如果开启了认证，stop会使用默认的用户名和密码进行认证（user/password），否则需要使用 kill</span></span><br><span class=\"line\">$ mlaunch stop</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">sent signal 15 to 11 processes.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只关闭mongos进程，这里mongos是tag</span></span><br><span class=\"line\">$ mlaunch stop mongos</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">sent signal 15 to 2 processes.</span><br><span class=\"line\"><span class=\"comment\"># 查看当前mongo进程状态</span></span><br><span class=\"line\">$ mlaunch list</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\"></span><br><span class=\"line\">PROCESS          PORT     STATUS     PID</span><br><span class=\"line\"></span><br><span class=\"line\">mongos           27050    down       -</span><br><span class=\"line\">mongos           27051    down       -</span><br><span class=\"line\"></span><br><span class=\"line\">config server    27058    running    23284</span><br><span class=\"line\">config server    27059    running    23287</span><br><span class=\"line\">config server    27060    running    23295</span><br><span class=\"line\"></span><br><span class=\"line\">shard01</span><br><span class=\"line\">    mongod       27052    running    23303</span><br><span class=\"line\">    mongod       27053    running    23326</span><br><span class=\"line\">    mongod       27054    running    23334</span><br><span class=\"line\"></span><br><span class=\"line\">shard02</span><br><span class=\"line\">    mongod       27055    running    23342</span><br><span class=\"line\">    mongod       27056    running    23345</span><br><span class=\"line\">    mongod       27057    running    23353</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tauth: <span class=\"string\">&quot;user:password&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"start-启动-mongo进程\">start: 启动 mongo进程</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动全部mongo进程</span></span><br><span class=\"line\">$ mlaunch start</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">launching: config server on port 27058</span><br><span class=\"line\">launching: config server on port 27059</span><br><span class=\"line\">launching: config server on port 27060</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27052</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27053</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27054</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27055</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27056</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27057</span><br><span class=\"line\">launching: mongos on port 27050</span><br><span class=\"line\">launching: mongos on port 27051</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只启动当前关闭的mongo进程</span></span><br><span class=\"line\">$ mlaunch start down</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">launching: mongos on port 27050</span><br><span class=\"line\">launching: mongos on port 27051</span><br></pre></td></tr></table></figure>\n<h3 id=\"restart-重启-mongo进程\">restart: 重启 mongo进程</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启，不推荐使用，除了单实例，复制集和分片集群都会出问题</span></span><br><span class=\"line\">$ mlaunch restart</span><br><span class=\"line\"><span class=\"comment\"># 以下是分片集群重启后的报错信息，猜测原因是并没有完全关闭mongo分片集群中的所有节点时就启动了</span></span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">sent signal 15 to 11 processes.</span><br><span class=\"line\">b<span class=\"string\">&#x27;about to fork child process, waiting until server is ready for connections.\\nforked process: 20202\\nERROR: child process failed, exited with 1\\nTo see additional information in this output, start without the &quot;--fork&quot; option.\\n&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"kill-杀掉-mongo进程\">kill: 杀掉 mongo进程</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 杀掉全部mongo进程</span></span><br><span class=\"line\">$ mlaunch <span class=\"built_in\">kill</span></span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">sent signal 15 to 11 processes.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 杀掉某个端口的mongo进程</span></span><br><span class=\"line\">$ mlaunch <span class=\"built_in\">kill</span> 27050</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">sent signal 15 to 1 process.</span><br><span class=\"line\"><span class=\"comment\"># 可以看到27050端口的mongo进程的状态为down</span></span><br><span class=\"line\">$ mlaunch list</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\"></span><br><span class=\"line\">PROCESS          PORT     STATUS     PID</span><br><span class=\"line\"></span><br><span class=\"line\">mongos           27050    down       -</span><br><span class=\"line\">mongos           27051    running    23369</span><br><span class=\"line\"></span><br><span class=\"line\">config server    27058    running    23284</span><br><span class=\"line\">config server    27059    running    23287</span><br><span class=\"line\">config server    27060    running    23295</span><br><span class=\"line\"></span><br><span class=\"line\">shard01</span><br><span class=\"line\">    mongod       27052    running    23303</span><br><span class=\"line\">    mongod       27053    running    23326</span><br><span class=\"line\">    mongod       27054    running    23334</span><br><span class=\"line\"></span><br><span class=\"line\">shard02</span><br><span class=\"line\">    mongod       27055    running    23342</span><br><span class=\"line\">    mongod       27056    running    23345</span><br><span class=\"line\">    mongod       27057    running    23353</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tauth: <span class=\"string\">&quot;user:password&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭全部mongos进程</span></span><br><span class=\"line\">$ mlaunch <span class=\"built_in\">kill</span> mongos</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>支持的tags</strong></em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all：环境中的所有节点。</span><br><span class=\"line\">running：所有当前运行的节点。</span><br><span class=\"line\">down：目前所有关闭的节点。</span><br><span class=\"line\">mongos：所有mongos进程都带有此标签。</span><br><span class=\"line\">mongod：所有mongod进程（包括仲裁者和配置服务器）。</span><br><span class=\"line\">config：所有配置服务器</span><br><span class=\"line\">&lt;shard name&gt;：对于分片环境，分片的每个成员都带有分片名称作为标签，例如“shard-a”。</span><br><span class=\"line\">&lt;port number&gt;：每个节点都带有其端口号作为标签。</span><br></pre></td></tr></table></figure>\n</div>\n","content_text":"摘要 本文介绍mtools工具的使用 mtools官方文档，mtools-github mtools提供的mlaunch是一个基于python的mongo环境管理工具，可以方便的启动、停止、重启、kill mongo进程，还可以查看mongo进程的运行状态，可以方便初学者快速搭建本地mongo环境，但是其只能在一台机器上运行。 mtools安装 mtools基于python3，支持mongo4+以上版本，但是mtools并且不会为我们安装mongodb，所以需要我们自己先在系统中安装好mongodb，mongodb的安装可以参考MongoDB7.0的安装 按照官网的说法，mtools支持的Python版本为 3.7|3.8|3.9|3.10，其他版本的Python目前不受支持或测试，但作者的python版本为3.11.3，并没有出现兼容性问题。 123456789101112131415161718192021222324252627➜ ~ python3 --versionPython 3.11.3➜ ~ pip3 -Vpip 24.0 from /usr/local/lib/python3.11/site-packages/pip (python 3.11)➜ ~ pip3 listPackage Version----------------- ------------certifi 2023.11.17cffi 1.16.0cryptography 41.0.7docutils 0.20.1idna 3.6Jinja2 3.1.2MarkupSafe 2.1.3packaging 23.2pip 24.0pycparser 2.21Pygments 2.17.2pyparsing 3.1.1pytz 2023.3.post1requests 2.31.0setuptools 68.2.2six 1.16.0tabulate 0.0.0typing_extensions 4.9.0urllib3 2.1.0wheel 0.41.2 安装mtools依赖 1pip3 install python-dateutil psutil pymongo 安装mtools 1pip3 install mtools 安装mtools会同时为我们安装mtools的所有工具，如果只希望安装mlaunch，可以使用下面的命令 mtools提供的其它工具，如mlogfilter,mloginfo,mplotqueries等并不支持logv2格式的日志，logv2是mongodb4.4+以后的加入的，从mongodb5.0以后logv2为默认的日志格式，所以这里不做介绍。 1pip3 install &#x27;mtools[mlaunch]&#x27; mlaunch 查看mlaunch版本 12345➜ ~ which mlaunch/usr/local/bin/mlaunch➜ ~ mlaunch --versionDetected mongod version: 7.0.6mtools version 1.7.2 || Python 3.11.6 (main, Oct 3 2023, 02:51:45) [Clang 14.0.3 (clang-1403.0.22.14.1)] init :构建环境 此命令初始化并启动MongoDB独立实例、副本集或分片集群，它只需要为每个环境调用一次。 构建独立实例 123456789101112131415161718# 快速构建一个单节点，数据目录在当前路径下的data目录下$ mlaunch init --single --authDetected mongod version: 7.0.6Generating keyfile: /mongodb/mtools/single/data/keyfilelaunching: &quot;mongod&quot; on port 27017Username &quot;user&quot;, password &quot;password&quot;# 参数说明# --single ：启动单节点# --auth ：开启默认认证，默认用户名/密码:user/password，并授予如下角色 # &#123; role: &#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;, # &#123; role: &#x27;readWriteAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;, # &#123; role: &#x27;dbAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;, # &#123; role: &#x27;clusterAdmin&#x27;, db: &#x27;admin&#x27; &#125;# --dir ：指定数据目录，默认为当前路径下的data目录# --bind_ip：指定监听ip，默认为127.0.0.1# --port：指定监听端口，默认为27017 构建复制集 123456789101112131415# 快速构建一个3节点的复制集$ mlaunch init --replicaset --nodes 3 --auth --port 27040Detected mongod version: 7.0.6Generating keyfile: /mongodb/mtools/replicaset/data/keyfilelaunching: &quot;mongod&quot; on port 27040launching: &quot;mongod&quot; on port 27041launching: &quot;mongod&quot; on port 27042replica set &#x27;replset&#x27; initialized.waiting for primary to add a user.Username &quot;user&quot;, password &quot;password&quot;# --replicaset ：创建副本集，默认3个节点# --nodes 3 ：指定副本集节点个数，默认3个节点# --auth : 开启默认认证，同单节点# --port 27040 : 指定复制集的起始端口，默认从27017开始，依次递增 构建分片集群 12345678910111213141516171819202122232425262728293031323334353637383940414243# 快速构建一个2个分片的分片集群，每个分片是一个包含3每个节点的复制集，包含一个3个节点配置复制集，并且启动3个mongos路由$ mlaunch init --sharded 2 --replicaset --node 3 --config 3 --csrs --mongos 3 --auth --port 27050Detected mongod version: 7.0.6Generating keyfile: /mongodb/mtools/sharded/data/keyfilelaunching: &quot;mongod&quot; on port 27053launching: &quot;mongod&quot; on port 27054launching: &quot;mongod&quot; on port 27055launching: &quot;mongod&quot; on port 27056launching: &quot;mongod&quot; on port 27057launching: &quot;mongod&quot; on port 27058launching: config server on port 27059launching: config server on port 27060launching: config server on port 27061replica set &#x27;configRepl&#x27; initialized.replica set &#x27;shard01&#x27; initialized.replica set &#x27;shard02&#x27; initialized.launching: mongos on port 27050launching: mongos on port 27051launching: mongos on port 27052adding shards. can take up to 30 seconds...sent signal 15 to 12 processes.launching: config server on port 27059launching: config server on port 27060launching: config server on port 27061launching: &quot;mongod&quot; on port 27053launching: &quot;mongod&quot; on port 27054launching: &quot;mongod&quot; on port 27055launching: &quot;mongod&quot; on port 27056launching: &quot;mongod&quot; on port 27057launching: &quot;mongod&quot; on port 27058launching: mongos on port 27050launching: mongos on port 27051launching: mongos on port 27052Username &quot;user&quot;, password &quot;password&quot;# --sharded 2：启用分片集群模式，分片数为2。# --replicaset : 创建副本集，默认3个节点，可以通过 --nodes 指定复制集节点个数# --nodes 3：采用3节点的复制集架构，默认就是3个节点。# --config 3：配置服务器采用3节点的复制集架构模式# --csrs：指Config Server as a Replica Set，这个也是默认配置# --mongos 3：启动3个mongos实例进程。# --auth : 开启默认认证，同单节点# --port 27050：集群将以27050作为起始端口，集群中的各个实例基于该端口向上递增。 以下命令运行时必须指定数据目录，默认为当前路径下的data目录，可以使用--dir指定数据目录，因为需要通过./data/.mlaunch_startup来获取mongo的构建信息。以分片集群举例： list: 查看启动信息 查看集群状态 1234567891011121314151617181920212223# 显示mongo进程的列表$ mlaunch listDetected mongod version: 7.0.6PROCESS PORT STATUS PIDmongos 27050 running 61988mongos 27051 running 61991mongos 27052 running 61999config server 27059 running 61903config server 27060 running 61911config server 27061 running 61914shard01 mongod 27053 running 61922 mongod 27054 running 61947 mongod 27055 running 61955shard02 mongod 27056 running 61964 mongod 27057 running 61972 mongod 27058 running 61980 查看启动命令 12345678910111213141516171819202122232425$ mlaunch list --startupDetected mongod version: 7.0.6PROCESS PORT STATUS PID STARTUP COMMANDmongos 27050 running 61988 mongos --logpath /mongodb/mtools/sharded/data/mongos/mongos_27050.log --port 27050 --configdb configRepl/localhost:27059,localhost:27060,localhost:27061 --keyFile /mongodb/mtools/sharded/data/keyfile --forkmongos 27051 running 61991 mongos --logpath /mongodb/mtools/sharded/data/mongos/mongos_27051.log --port 27051 --configdb configRepl/localhost:27059,localhost:27060,localhost:27061 --keyFile /mongodb/mtools/sharded/data/keyfile --forkmongos 27052 running 61999 mongos --logpath /mongodb/mtools/sharded/data/mongos/mongos_27052.log --port 27052 --configdb configRepl/localhost:27059,localhost:27060,localhost:27061 --keyFile /mongodb/mtools/sharded/data/keyfile --forkconfig server 27059 running 61903 mongod --replSet configRepl --dbpath /mongodb/mtools/sharded/data/configRepl/rs1/db --logpath /mongodb/mtools/sharded/data/configRepl/rs1/mongod.log --port 27059 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --configsvr --wiredTigerCacheSizeGB 1config server 27060 running 61911 mongod --replSet configRepl --dbpath /mongodb/mtools/sharded/data/configRepl/rs2/db --logpath /mongodb/mtools/sharded/data/configRepl/rs2/mongod.log --port 27060 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --configsvr --wiredTigerCacheSizeGB 1config server 27061 running 61914 mongod --replSet configRepl --dbpath /mongodb/mtools/sharded/data/configRepl/rs3/db --logpath /mongodb/mtools/sharded/data/configRepl/rs3/mongod.log --port 27061 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --configsvr --wiredTigerCacheSizeGB 1shard01 mongod 27053 running 61922 mongod --replSet shard01 --dbpath /mongodb/mtools/sharded/data/shard01/rs1/db --logpath /mongodb/mtools/sharded/data/shard01/rs1/mongod.log --port 27053 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1 mongod 27054 running 61947 mongod --replSet shard01 --dbpath /mongodb/mtools/sharded/data/shard01/rs2/db --logpath /mongodb/mtools/sharded/data/shard01/rs2/mongod.log --port 27054 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1 mongod 27055 running 61955 mongod --replSet shard01 --dbpath /mongodb/mtools/sharded/data/shard01/rs3/db --logpath /mongodb/mtools/sharded/data/shard01/rs3/mongod.log --port 27055 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1shard02 mongod 27056 running 61964 mongod --replSet shard02 --dbpath /mongodb/mtools/sharded/data/shard02/rs1/db --logpath /mongodb/mtools/sharded/data/shard02/rs1/mongod.log --port 27056 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1 mongod 27057 running 61972 mongod --replSet shard02 --dbpath /mongodb/mtools/sharded/data/shard02/rs2/db --logpath /mongodb/mtools/sharded/data/shard02/rs2/mongod.log --port 27057 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1 mongod 27058 running 61980 mongod --replSet shard02 --dbpath /mongodb/mtools/sharded/data/shard02/rs3/db --logpath /mongodb/mtools/sharded/data/shard02/rs3/mongod.log --port 27058 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1 auth: &quot;user:password&quot; stop: 关闭 mongo进程 12345678910111213141516171819202122232425262728293031323334# 关闭全部mongo进程，注意：如果开启了认证，stop会使用默认的用户名和密码进行认证（user/password），否则需要使用 kill$ mlaunch stopDetected mongod version: 7.0.6sent signal 15 to 11 processes.# 只关闭mongos进程，这里mongos是tag$ mlaunch stop mongosDetected mongod version: 7.0.6sent signal 15 to 2 processes.# 查看当前mongo进程状态$ mlaunch listDetected mongod version: 7.0.6PROCESS PORT STATUS PIDmongos 27050 down -mongos 27051 down -config server 27058 running 23284config server 27059 running 23287config server 27060 running 23295shard01 mongod 27052 running 23303 mongod 27053 running 23326 mongod 27054 running 23334shard02 mongod 27055 running 23342 mongod 27056 running 23345 mongod 27057 running 23353 auth: &quot;user:password&quot; start: 启动 mongo进程 1234567891011121314151617181920# 启动全部mongo进程$ mlaunch startDetected mongod version: 7.0.6launching: config server on port 27058launching: config server on port 27059launching: config server on port 27060launching: &quot;mongod&quot; on port 27052launching: &quot;mongod&quot; on port 27053launching: &quot;mongod&quot; on port 27054launching: &quot;mongod&quot; on port 27055launching: &quot;mongod&quot; on port 27056launching: &quot;mongod&quot; on port 27057launching: mongos on port 27050launching: mongos on port 27051# 只启动当前关闭的mongo进程$ mlaunch start downDetected mongod version: 7.0.6launching: mongos on port 27050launching: mongos on port 27051 restart: 重启 mongo进程 123456# 重启，不推荐使用，除了单实例，复制集和分片集群都会出问题$ mlaunch restart# 以下是分片集群重启后的报错信息，猜测原因是并没有完全关闭mongo分片集群中的所有节点时就启动了Detected mongod version: 7.0.6sent signal 15 to 11 processes.b&#x27;about to fork child process, waiting until server is ready for connections.\\nforked process: 20202\\nERROR: child process failed, exited with 1\\nTo see additional information in this output, start without the &quot;--fork&quot; option.\\n&#x27; kill: 杀掉 mongo进程 12345678910111213141516171819202122232425262728293031323334353637# 杀掉全部mongo进程$ mlaunch killDetected mongod version: 7.0.6sent signal 15 to 11 processes.# 杀掉某个端口的mongo进程$ mlaunch kill 27050Detected mongod version: 7.0.6sent signal 15 to 1 process.# 可以看到27050端口的mongo进程的状态为down$ mlaunch listDetected mongod version: 7.0.6PROCESS PORT STATUS PIDmongos 27050 down -mongos 27051 running 23369config server 27058 running 23284config server 27059 running 23287config server 27060 running 23295shard01 mongod 27052 running 23303 mongod 27053 running 23326 mongod 27054 running 23334shard02 mongod 27055 running 23342 mongod 27056 running 23345 mongod 27057 running 23353 auth: &quot;user:password&quot;# 关闭全部mongos进程$ mlaunch kill mongos 支持的tags 12345678all：环境中的所有节点。running：所有当前运行的节点。down：目前所有关闭的节点。mongos：所有mongos进程都带有此标签。mongod：所有mongod进程（包括仲裁者和配置服务器）。config：所有配置服务器&lt;shard name&gt;：对于分片环境，分片的每个成员都带有分片名称作为标签，例如“shard-a”。&lt;port number&gt;：每个节点都带有其端口号作为标签。","summary":"摘要 本文介绍mtools工具的使用 mtools官方文档，mtools-github mtools提供的mlaunch是一个基于python的mongo环境管理工具，可以方便的启动、停止、重启、kill mongo进程，还可以查看mongo进程的运行状态，可以方便初学者快速搭建本地mongo环境，但是其只能在一台机器上运行。","date_published":"2024-03-14T13:30:05.000Z","tags":["技术","mac","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/03/13/linux-command14-setting/","url":"https://blog.hanqunfeng.com/2024/03/13/linux-command14-setting/","title":"Linux常用命令--常用设置","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装完linux后，一些常用的设置可以方便我们今后的使用，比如关闭SELinux，增加文件描述符限制，等等。</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于CentOS8。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"关闭SELinux\">关闭SELinux</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>SELinux（Security-Enhanced Linux）是一种基于安全策略的 Linux 安全模块，其主要目的是提供对各种应用程序和进程的更细粒度的访问控制。</p>\n</li>\n<li class=\"lvl-2\">\n<p>SELinux 的安全方案主要基于以下两个策略：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">强制访问控制（Mandatory Access Control, MAC）：MAC 策略不允许用户在他们拥有的文件和进程上设置安全访问控制，而是根据一个由系统管理员和/或操作系统开发商定义的集中安全策略进行访问控制。</li>\n<li class=\"lvl-6\">类型强制访问控制（Type Enforcement）：通过将文件、目录和其他资源分配到类型，并定义它们之间的交互，限制进程在资源之间的信息流。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>在实际工作中，SELinux 可以用来阻止或限制恶意或损坏的应用程序对系统造成的损害。当配置正确时，SELinux 提供的强大安全机制可以显著提高系统的安全性。</p>\n</li>\n<li class=\"lvl-2\">\n<p>但是，SELinux 也可能会带来一些问题，例如，它可能会导致某些应用程序无法正常工作，或者它可能会在某些情况下导致性能下降。因此，许多 Linux 发行版默认会关闭 SELinux，以避免这些问题。</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过以下命令，可以查看当前的 SELinux 状态：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果当前状态为 Enforcing，表示 SELinux 已启用，否则为 Disabled。</span></span><br><span class=\"line\">$ sestatus</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>临时关闭 SELinux，可以使用以下命令：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ setenforce 0</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>永久关闭 SELinux，可以使用以下命令：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi /etc/selinux/config</span><br><span class=\"line\">    <span class=\"comment\"># 在文件中找到以下行，将值改为 disabled。</span></span><br><span class=\"line\">    SELINUX=disabled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启系统，SELinux 就会关闭。</span></span><br><span class=\"line\">$ reboot</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>临时开启 SELinux，可以使用以下命令：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ setenforce 1</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>永久开启 SELinux，可以使用以下命令：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi /etc/selinux/config</span><br><span class=\"line\">    <span class=\"comment\"># 在文件中找到以下行，将值改为 enforcing。</span></span><br><span class=\"line\">    SELINUX=enforcing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启系统，SELinux 就会开启。</span></span><br><span class=\"line\">$ reboot</span><br></pre></td></tr></table></figure>\n<h2 id=\"增加文件描述符限制\">增加文件描述符限制</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>每个运行中的进程都有一个限制，即它可以同时打开的最大文件描述符数量。这个限制对于避免过度使用系统资源非常重要。然而，在某些情况下，你可能需要增加这个限制来满足应用的需求。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Linux 服务器默认的文件描述符限制为 1024，如果需要使用更多的文件描述符，可以使用以下命令来增加限制：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时设置，即刻生效</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -n 65535</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 永久设置</span></span><br><span class=\"line\">$ vi /etc/security/limits.conf</span><br><span class=\"line\">    <span class=\"comment\"># 在文件中找到以下行，将值改为 65535</span></span><br><span class=\"line\">    <span class=\"comment\"># 如果不存在对应的配置则在文件末尾添加即可</span></span><br><span class=\"line\">    <span class=\"comment\"># root用户限制</span></span><br><span class=\"line\">    root soft nofile 65535</span><br><span class=\"line\">    root hard nofile 65535</span><br><span class=\"line\">    <span class=\"comment\"># 其它用户限制</span></span><br><span class=\"line\">    * soft nofile 65535</span><br><span class=\"line\">    * hard nofile 65535</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启系统，文件描述符限制就变了。</span></span><br><span class=\"line\">$ reboot</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这样的设置既为 root 用户设置了文件描述符（句柄）的软硬限制数量为65535，也为系统中所有其他用户设置了同样的限制。所谓“软限制”是指用户可以达到但不能超过的限制，而“硬限制”是指系统设置的绝对限制。即软限制不能大于硬限制的值。</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过以下命令，可以查看当前的文件描述符限制：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看的是当前 bash 的“软”文件描述符限制</span></span><br><span class=\"line\">$ <span class=\"built_in\">ulimit</span> -n</span><br><span class=\"line\"><span class=\"comment\"># 查看软限制，在大多数情况下，ulimit -n 和 ulimit -Sn 是相同的</span></span><br><span class=\"line\">$ <span class=\"built_in\">ulimit</span> -Sn</span><br><span class=\"line\"><span class=\"comment\"># 查看硬限制</span></span><br><span class=\"line\">$ <span class=\"built_in\">ulimit</span> -Hn</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 安装完linux后，一些常用的设置可以方便我们今后的使用，比如关闭SELinux，增加文件描述符限制，等等。 本文基于CentOS8。 关闭SELinux SELinux（Security-Enhanced Linux）是一种基于安全策略的 Linux 安全模块，其主要目的是提供对各种应用程序和进程的更细粒度的访问控制。 SELinux 的安全方案主要基于以下两个策略： 强制访问控制（Mandatory Access Control, MAC）：MAC 策略不允许用户在他们拥有的文件和进程上设置安全访问控制，而是根据一个由系统管理员和/或操作系统开发商定义的集中安全策略进行访问控制。 类型强制访问控制（Type Enforcement）：通过将文件、目录和其他资源分配到类型，并定义它们之间的交互，限制进程在资源之间的信息流。 在实际工作中，SELinux 可以用来阻止或限制恶意或损坏的应用程序对系统造成的损害。当配置正确时，SELinux 提供的强大安全机制可以显著提高系统的安全性。 但是，SELinux 也可能会带来一些问题，例如，它可能会导致某些应用程序无法正常工作，或者它可能会在某些情况下导致性能下降。因此，许多 Linux 发行版默认会关闭 SELinux，以避免这些问题。 通过以下命令，可以查看当前的 SELinux 状态： 12# 如果当前状态为 Enforcing，表示 SELinux 已启用，否则为 Disabled。$ sestatus 临时关闭 SELinux，可以使用以下命令： 1$ setenforce 0 永久关闭 SELinux，可以使用以下命令： 123456$ vi /etc/selinux/config # 在文件中找到以下行，将值改为 disabled。 SELINUX=disabled# 重启系统，SELinux 就会关闭。$ reboot 临时开启 SELinux，可以使用以下命令： 1$ setenforce 1 永久开启 SELinux，可以使用以下命令： 123456$ vi /etc/selinux/config # 在文件中找到以下行，将值改为 enforcing。 SELINUX=enforcing# 重启系统，SELinux 就会开启。$ reboot 增加文件描述符限制 每个运行中的进程都有一个限制，即它可以同时打开的最大文件描述符数量。这个限制对于避免过度使用系统资源非常重要。然而，在某些情况下，你可能需要增加这个限制来满足应用的需求。 Linux 服务器默认的文件描述符限制为 1024，如果需要使用更多的文件描述符，可以使用以下命令来增加限制： 12345678910111213141516# 临时设置，即刻生效ulimit -n 65535# 永久设置$ vi /etc/security/limits.conf # 在文件中找到以下行，将值改为 65535 # 如果不存在对应的配置则在文件末尾添加即可 # root用户限制 root soft nofile 65535 root hard nofile 65535 # 其它用户限制 * soft nofile 65535 * hard nofile 65535# 重启系统，文件描述符限制就变了。$ reboot 这样的设置既为 root 用户设置了文件描述符（句柄）的软硬限制数量为65535，也为系统中所有其他用户设置了同样的限制。所谓“软限制”是指用户可以达到但不能超过的限制，而“硬限制”是指系统设置的绝对限制。即软限制不能大于硬限制的值。 通过以下命令，可以查看当前的文件描述符限制： 123456# 查看的是当前 bash 的“软”文件描述符限制$ ulimit -n# 查看软限制，在大多数情况下，ulimit -n 和 ulimit -Sn 是相同的$ ulimit -Sn# 查看硬限制$ ulimit -Hn","summary":"摘要 安装完linux后，一些常用的设置可以方便我们今后的使用，比如关闭SELinux，增加文件描述符限制，等等。 本文基于CentOS8。","date_published":"2024-03-13T13:30:05.000Z","tags":["技术","linux","linux常用命令","linux常用命令"]},{"id":"https://blog.hanqunfeng.com/2024/03/11/mongodb7-index/","url":"https://blog.hanqunfeng.com/2024/03/11/mongodb7-index/","title":"MongoDB7.0--索引","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍如何使用MongoDB7.0的索引</p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB版本7.0.6</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/v7.0/indexes/\">MongoDB Indexes</a></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"MongoDB索引简介\">MongoDB索引简介</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>索引支持在MongoDB中高效执行查询。如果没有索引，MongoDB必须扫描集合中的每个文档才能返回查询结果。如果查询存在适当的索引，MongoDB使用该索引来限制它必须扫描的文档数量。</p>\n</li>\n<li class=\"lvl-2\">\n<p>虽然索引可以提高查询性能，但添加索引对写入操作的性能有负面影响。对于写入读数比较高的集合，索引很昂贵，因为每个插入还必须更新任何索引。</p>\n</li>\n<li class=\"lvl-2\">\n<p>所以合理的创建索引，即可以提升查询性能，又不会对写操作造成太大的影响。</p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB采用 <code>B-Tree (准确的说是 B+Tree)</code> 做索引，索引创建在colletions上。</p>\n</li>\n</ul>\n<h2 id=\"创建索引语法\">创建索引语法</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.createIndex( keys, options )</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Key 值为你要创建的索引字段，1 按升序创建索引， -1 按降序创建索引</p>\n</li>\n<li class=\"lvl-2\">\n<p>options 选项</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>background</td>\n<td>Boolean</td>\n<td>建索引过程是否阻塞其它数据库操作，设置为 true 则以后台方式创建索引</td>\n</tr>\n<tr>\n<td>unique</td>\n<td>Boolean</td>\n<td>建立的索引是否唯一，设置为 true 则创建唯一索引</td>\n</tr>\n<tr>\n<td>name</td>\n<td>string</td>\n<td>索引的名称</td>\n</tr>\n<tr>\n<td>dropDups</td>\n<td>Boolean</td>\n<td>3.0+版本已废弃，在建立唯一索引时是否删除重复记录</td>\n</tr>\n<tr>\n<td>sparse</td>\n<td>Boolean</td>\n<td>对文档中不存在的字段数据是否启用索引</td>\n</tr>\n<tr>\n<td>expireAfterSeconds</td>\n<td>integer</td>\n<td>指定一个以秒为单位的数值，完成 TTL 设定，设定集合的生存时间</td>\n</tr>\n<tr>\n<td>v</td>\n<td>index version</td>\n<td>索引的版本号</td>\n</tr>\n<tr>\n<td>weights</td>\n<td>document</td>\n<td>索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重</td>\n</tr>\n<tr>\n<td>default_language</td>\n<td>string</td>\n<td>对于文本索引，该参数决定了停用词及词干和词器的规则的列表</td>\n</tr>\n<tr>\n<td>language_override</td>\n<td>string</td>\n<td>对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的 language</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"索引类型\">索引类型</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>与大多数数据库一样，MongoDB支持各种丰富的索引类型，包括单键索引、复合索引，唯一索引等一些常用的结构。由于采用了灵活可变的文档类型，因此它也同样支持对嵌套字段、数组进行索引。通过建立合适的索引，我们可以极大地提升数据的检索速度。在一些特殊应用场景，MongoDB还支持地理空间索引、文本检索索引、TTL索引等不同的特性。</p>\n</li>\n</ul>\n<h3 id=\"单键索引-Single-Field-Indexes\">单键索引(Single Field Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>单键索引是MongoDB最简单的索引类型，它将一个字段作为索引键，索引键值唯一。</p>\n</li>\n<li class=\"lvl-2\">\n<p>默认情况下，MongoDB会在ID字段上创建一个单键索引，ID字段是文档的唯一标识符，MongoDB会自动创建一个ID字段，如果用户自己创建ID字段，MongoDB会自动将ID字段作为单键索引。</p>\n</li>\n<li class=\"lvl-2\">\n<p>单键索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1表示正序，-1表示倒序</span></span><br><span class=\"line\">db.books.createIndex(&#123;title:1&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 对内嵌文档字段创建索引：</span></span><br><span class=\"line\">db.books.createIndex(&#123;<span class=\"string\">&quot;author.name&quot;</span>:1&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"复合索引-Compound-Index\">复合索引(Compound Index)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>复合索引是将多个字段作为索引键，其性质和单字段索引类似。但不同的是，复合索引中字段的顺序、字段的升降序对查询性能有直接的影响，因此在设计复合索引时则需要考虑不同的查询场景。</p>\n</li>\n<li class=\"lvl-2\">\n<p>复合索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.books.createIndex(&#123;title:1, author.name:1&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 对内嵌文档字段创建索引：</span></span><br><span class=\"line\">db.books.createIndex(&#123;<span class=\"string\">&quot;author.name&quot;</span>:1, <span class=\"string\">&quot;author.age&quot;</span>:1&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"多键-数组-索引-Multikey-Index\">多键(数组)索引(Multikey Index)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>多键索引是将一个字段作为索引键，该字段可以是嵌套文档、数组等复杂数据类型。</p>\n</li>\n<li class=\"lvl-2\">\n<p>多键索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tags字段为数组</span></span><br><span class=\"line\">db.books.createIndex(&#123;<span class=\"string\">&quot;tags&quot;</span>:1&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 创建复合多值索引，这里仅能有一个字段是数组，MongoDB并不支持一个复合索引中同时出现多个数组字段</span></span><br><span class=\"line\">db.books.createIndex(&#123;title:1, tags:1&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例数据格式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _id: 1,</span><br><span class=\"line\">  item: <span class=\"string\">&quot;abc&quot;</span>,</span><br><span class=\"line\">  stock: [</span><br><span class=\"line\">    &#123; size: <span class=\"string\">&quot;S&quot;</span>, color: <span class=\"string\">&quot;red&quot;</span>, quantity: 25 &#125;,</span><br><span class=\"line\">    &#123; size: <span class=\"string\">&quot;S&quot;</span>, color: <span class=\"string\">&quot;blue&quot;</span>, quantity: 10 &#125;,</span><br><span class=\"line\">    &#123; size: <span class=\"string\">&quot;M&quot;</span>, color: <span class=\"string\">&quot;blue&quot;</span>, quantity: 50 &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 可以对嵌入文档创建多键索引</span></span><br><span class=\"line\">db.collection.createIndex( &#123; <span class=\"string\">&quot;stock.size&quot;</span>: 1, <span class=\"string\">&quot;stock.quantity&quot;</span>: 1 &#125; )</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hash索引-Hashed-Indexes\">Hash索引(Hashed Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Hash索引是MongoDB中的一种特殊的索引类型，它将字段的值计算出一个哈希值，然后将该哈希值作为索引键。由于哈希值的唯一性，因此MongoDB在创建Hash索引时，不会对索引键值进行排序。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Hash索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.books.createIndex(&#123;title:<span class=\"string\">&quot;hashed&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 对内嵌文档字段创建索引：</span></span><br><span class=\"line\">db.books.createIndex(&#123;<span class=\"string\">&quot;author.name&quot;</span>:<span class=\"string\">&quot;hashed&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"通配符索引-Wildcard-Indexes\">通配符索引(Wildcard Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通配符索引是MongoDB中的一种特殊的索引类型，它允许在索引键值中包含通配符，从而支持对通配符匹配的查询。</p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB 4.2 引入了通配符索</p>\n</li>\n<li class=\"lvl-2\">\n<p>通配符索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例数据</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;product_name&quot;</span> : <span class=\"string\">&quot;Spy Coat&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;product_attributes&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;material&quot;</span> : [ <span class=\"string\">&quot;Tweed&quot;</span>, <span class=\"string\">&quot;Wool&quot;</span>, <span class=\"string\">&quot;Leather&quot;</span> ],</span><br><span class=\"line\">        <span class=\"string\">&quot;size&quot;</span> : &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;length&quot;</span> : 72,</span><br><span class=\"line\">            <span class=\"string\">&quot;units&quot;</span> : <span class=\"string\">&quot;inches&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.products.createIndex( &#123; <span class=\"string\">&quot;product_attributes.$**&quot;</span> : 1 &#125; )</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通配符索引是稀疏的，不索引空字段。因此，通配符索引不能支持查询字段不存在的文档。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通配符索引不能支持以下查询</span></span><br><span class=\"line\">db.products.find( &#123;<span class=\"string\">&quot;product_attributes&quot;</span> : &#123; <span class=\"variable\">$exists</span> : <span class=\"literal\">false</span> &#125; &#125; )</span><br><span class=\"line\">db.products.aggregate([</span><br><span class=\"line\">  &#123; <span class=\"variable\">$match</span> : &#123; <span class=\"string\">&quot;product_attributes&quot;</span> : &#123; <span class=\"variable\">$exists</span> : <span class=\"literal\">false</span> &#125; &#125; &#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通配符索引为文档或数组的内容生成条目，而不是文档/数组本身。因此通配符索引不能支持精确的文档/数组相等匹配。通配符索引可以支持查询字段等于空文档{}的情况</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#通配符索引不能支持以下查询:</span></span><br><span class=\"line\">db.products.find(&#123; <span class=\"string\">&quot;product_attributes.colors&quot;</span> : [ <span class=\"string\">&quot;Blue&quot;</span>, <span class=\"string\">&quot;Black&quot;</span> ] &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">db.products.aggregate([&#123;</span><br><span class=\"line\">  <span class=\"variable\">$match</span> : &#123; <span class=\"string\">&quot;product_attributes.colors&quot;</span> : [ <span class=\"string\">&quot;Blue&quot;</span>, <span class=\"string\">&quot;Black&quot;</span> ] &#125;</span><br><span class=\"line\">&#125;])</span><br></pre></td></tr></table></figure>\n<h2 id=\"索引属性\">索引属性</h2>\n<h3 id=\"唯一索引-Unique-Indexes\">唯一索引(Unique Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>唯一索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单键索引支持唯一约束</span></span><br><span class=\"line\">db.books.createIndex(&#123;title:1&#125;, &#123;unique:<span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 复合索引支持唯一性约束</span></span><br><span class=\"line\">db.books.createIndex(&#123;title:1，<span class=\"built_in\">type</span>:1&#125;, &#123;unique:<span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 多键索引支持唯一性约束，这里tags是数组</span></span><br><span class=\"line\">db.books.createIndex(&#123;<span class=\"string\">&quot;tags&quot;</span>:1&#125;, &#123;unique:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>唯一性索引对于文档中缺失的字段，会使用null值代替，因此不允许存在多个文档缺失索引字段的情况。</p>\n</li>\n<li class=\"lvl-2\">\n<p>对于分片的集合，唯一性约束必须匹配分片规则。换句话说，为了保证全局的唯一性，分片键必须作为唯一性索引的前缀字段。</p>\n</li>\n</ul>\n<h3 id=\"部分索引-Partial-Indexes\">部分索引(Partial Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>部分索引仅对满足指定过滤器表达式的文档进行索引。通过在一个集合中为文档的一个子集建立索引，部分索引具有更低的存储需求和更低的索引创建和维护的性能成本。</p>\n</li>\n<li class=\"lvl-2\">\n<p>部分索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 符合条件&#123;author: &#123;$exists: true&#125;&#125;，即存在作者，才对title创建升序索引</span></span><br><span class=\"line\">db.books.createIndex(&#123;title:1&#125;, &#123;partialFilterExpression: &#123;author: &#123;<span class=\"variable\">$exists</span>: <span class=\"literal\">true</span>&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>partialFilterExpression(筛选器表达式)选项接受指定过滤条件的文档:<br>\n- 等式表达式(例如:field: value或使用$eq操作符)<br>\n- $exists: true<br>\n- $gt， $gte， $lt， $lte<br>\n- $type<br>\n- 顶层的$and</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>注意：如果同时指定了partialFilterExpression和唯一约束，那么唯一约束只适用于满足筛选器表达式的文档。如果文档不满足筛选条件，那么带有惟一约束的部分索引不会阻止插入不满足惟一约束的文档。</p>\n</li>\n</ul>\n<h3 id=\"稀疏索引-Sparse-Indexes\">稀疏索引(Sparse Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>索引的稀疏属性确保索引只包含具有索引字段的文档的条目，索引将跳过没有索引字段的文档。即只对存在字段的文档进行索引（包括字段值为null的文档）。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果稀疏索引会导致查询和排序操作的结果集不完整，MongoDB将不会使用该索引，除非hint()明确指定索引。</p>\n</li>\n<li class=\"lvl-2\">\n<p>稀疏索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据准备</span></span><br><span class=\"line\">db.scores.insertMany([</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;userid&quot;</span> : <span class=\"string\">&quot;newbie&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;userid&quot;</span> : <span class=\"string\">&quot;abby&quot;</span>, <span class=\"string\">&quot;score&quot;</span> : 82&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;userid&quot;</span> : <span class=\"string\">&quot;nina&quot;</span>, <span class=\"string\">&quot;score&quot;</span> : 90&#125;</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建稀疏索引</span></span><br><span class=\"line\">db.scores.createIndex( &#123; score: 1 &#125; , &#123; sparse: <span class=\"literal\">true</span> &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试</span></span><br><span class=\"line\"><span class=\"comment\"># 使用稀疏索引</span></span><br><span class=\"line\">db.scores.find( &#123; score: &#123; <span class=\"variable\">$lt</span>: 90 &#125; &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 即使排序是通过索引字段，MongoDB也不会选择稀疏索引来完成查询，以返回完整的结果</span></span><br><span class=\"line\">db.scores.find().<span class=\"built_in\">sort</span>( &#123; score: -1 &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 要使用稀疏索引，使用hint()显式指定索引</span></span><br><span class=\"line\">db.scores.find().<span class=\"built_in\">sort</span>( &#123; score: -1 &#125; ).hint( &#123; score: 1 &#125; )</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>同时具有稀疏性和唯一性的索引可以防止集合中存在字段值重复的文档，但允许不包含此索引字段的文档插入。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除之前创建的索引</span></span><br><span class=\"line\">db.scores.dropIndex(&#123;score:1&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 创建具有唯一约束的稀疏索引</span></span><br><span class=\"line\">db.scores.createIndex( &#123; score: 1 &#125; , &#123; sparse: <span class=\"literal\">true</span>, unique: <span class=\"literal\">true</span> &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试插入</span></span><br><span class=\"line\">db.scores.insertMany( [</span><br><span class=\"line\">   &#123; <span class=\"string\">&quot;userid&quot;</span>: <span class=\"string\">&quot;AAAAAAA&quot;</span>, <span class=\"string\">&quot;score&quot;</span>: 50 &#125;,</span><br><span class=\"line\">   &#123; <span class=\"string\">&quot;userid&quot;</span>: <span class=\"string\">&quot;BBBBBBB&quot;</span>, <span class=\"string\">&quot;score&quot;</span>: 64 &#125;,</span><br><span class=\"line\">   &#123; <span class=\"string\">&quot;userid&quot;</span>: <span class=\"string\">&quot;CCCCCCC&quot;</span> &#125;,</span><br><span class=\"line\">   &#123; <span class=\"string\">&quot;userid&quot;</span>: <span class=\"string\">&quot;CCCCCCC&quot;</span> &#125;</span><br><span class=\"line\">] )</span><br></pre></td></tr></table></figure>\n<h3 id=\"TTL索引-TTL-Indexes\">TTL索引(TTL Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>MongoDB 可以使用它在一定时间或特定时钟时间后自动从集合中删除文档，就是带有过期时间的索引，到期后，MongoDB会自动删除这些过期的文档。</p>\n</li>\n<li class=\"lvl-2\">\n<p>TTL索引只能创建在日期字段上，当文档过期后，MongoDB会自动删除这些文档。</p>\n</li>\n<li class=\"lvl-2\">\n<p>TTL索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据准备</span></span><br><span class=\"line\">db.log_events.insertOne( &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;createdAt&quot;</span>: new Date(),</span><br><span class=\"line\">   <span class=\"string\">&quot;logEvent&quot;</span>: 2,</span><br><span class=\"line\">   <span class=\"string\">&quot;logMessage&quot;</span>: <span class=\"string\">&quot;Success!&quot;</span></span><br><span class=\"line\">&#125; )</span><br><span class=\"line\"><span class=\"comment\"># 创建TTL索引</span></span><br><span class=\"line\">db.scores.createIndex( &#123; <span class=\"string\">&quot;createdAt&quot;</span>: 1 &#125;, &#123; expireAfterSeconds: 3600 &#125; )</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>TTL 索引不保证过期数据会在过期后立即被删除。文档过期和 MongoDB 从数据库中删除文档的时间之间可能存在延迟。删除过期文档的后台任务每 60 秒运行一次。因此，在文档到期和后台任务运行之间的时间段内，文档可能会保留在集合中。</p>\n</li>\n<li class=\"lvl-2\">\n<p>TTL索引在创建之后，仍然可以对过期时间进行修改。这需要使用collMod命令对索引的定义进行变更</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.runCommand( &#123;</span><br><span class=\"line\">    collMod: <span class=\"string\">&quot;log_events&quot;</span>,</span><br><span class=\"line\">    index: &#123;</span><br><span class=\"line\">        keyPattern: &#123; createdAt: 1 &#125;,</span><br><span class=\"line\">        expireAfterSeconds: 3600</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; )</span><br></pre></td></tr></table></figure>\n<h3 id=\"隐藏索引-Hidden-Indexes\">隐藏索引(Hidden Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>隐藏索引对查询规划器不可见，不能用于查询。</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过对规划器隐藏索引，用户可以在不实际删除索引的情况下评估删除索引的潜在影响。如果影响是负面的，用户可以取消隐藏索引，而不必重新创建已删除的索引。</p>\n</li>\n<li class=\"lvl-2\">\n<p>隐藏索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建隐藏索引</span></span><br><span class=\"line\">db.restaurants.createIndex(&#123; borough: 1 &#125;,&#123; hidden: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\"># 隐藏现有索引</span></span><br><span class=\"line\">db.restaurants.hideIndex( &#123; borough: 1&#125; );</span><br><span class=\"line\">db.restaurants.hideIndex( <span class=\"string\">&quot;索引名称&quot;</span> )</span><br><span class=\"line\"><span class=\"comment\"># 取消隐藏索引</span></span><br><span class=\"line\">db.restaurants.unhideIndex( &#123; borough: 1&#125; );</span><br><span class=\"line\">db.restaurants.unhideIndex( <span class=\"string\">&quot;索引名称&quot;</span> );</span><br></pre></td></tr></table></figure>\n<h2 id=\"索引其它操作\">索引其它操作</h2>\n<h3 id=\"查看索引\">查看索引</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看索引信息</span></span><br><span class=\"line\">db.books.getIndexes()</span><br><span class=\"line\"><span class=\"comment\"># 查看索引键</span></span><br><span class=\"line\">db.books.getIndexKeys()</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除索引\">删除索引</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除集合指定索引</span></span><br><span class=\"line\">db.col.dropIndex(<span class=\"string\">&quot;索引名称&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 删除集合所有索引,不能删除主键索引</span></span><br><span class=\"line\">db.col.dropIndexes()</span><br></pre></td></tr></table></figure>\n<h2 id=\"索引使用建议\">索引使用建议</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>为每一个查询建立合适的索引</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">这个是针对于数据量较大比如说超过几十上百万（文档数目）数量级的集合。</li>\n<li class=\"lvl-6\">如果没有索引MongoDB需要把所有的Document从盘上读到内存，这会对MongoDB服务器造成较大的压力并影响到其他请求的执行。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>创建合适的复合索引，不要依赖于交叉索引</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">如果你的查询会使用到多个字段，MongoDB有两个索引技术可以使用：交叉索引和复合索引。</li>\n<li class=\"lvl-6\">交叉索引就是针对每个字段单独建立一个单字段索引，然后在查询执行时候使用相应的单字段索引进行索引交叉而得到查询结果。</li>\n<li class=\"lvl-6\">交叉索引目前触发率较低，所以如果你有一个多字段查询的时候，建议使用复合索引能够保证索引正常的使用。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查找所有年龄小于30岁的深圳市马拉松运动员</span></span><br><span class=\"line\">db.athelets.find(&#123;sport: <span class=\"string\">&quot;marathon&quot;</span>, location: <span class=\"string\">&quot;sz&quot;</span>, age: &#123;<span class=\"variable\">$lt</span>: 30&#125;&#125;&#125;)</span><br><span class=\"line\"><span class=\"comment\">#创建复合索引</span></span><br><span class=\"line\">db.athelets.createIndex(&#123;sport:1, location:1, age:1&#125;)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>复合索引字段顺序：匹配条件在前，范围条件在后（Equality First, Range After）</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">前面的例子，在创建复合索引时如果条件有匹配和范围之分，那么匹配条件（sport: “marathon”) 应该在复合索引的前面。范围条件(age: &lt;30)字段应该放在复合索引的后面。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>尽可能使用覆盖索引（Covered Index）</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">建议只返回需要的字段，同时，利用覆盖索引来提升性能。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>建索引要在后台运行</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">在对一个集合创建索引时，该集合所在的数据库将不接受其他读写操作。对大数据量的集合建索引，建议使用后台运行选项 {background: true}</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>避免设计过长的数组索引</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">数组索引是多值的，在存储时需要使用更多的空间。如果索引的数组长度特别长，或者数组的增长不受控制，则可能导致索引空间急剧膨胀。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"explain执行计划\">explain执行计划</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>explain执行计划的作用是：查看MongoDB执行查询时的执行计划。</p>\n</li>\n<li class=\"lvl-2\">\n<p>explain执行计划的使用方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\">db.collection.find().explain(&lt;verbose&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">db.books.find(&#123;title: <span class=\"string\">&quot;MongoDB 教程&quot;</span>&#125;).explain()</span><br><span class=\"line\">db.books.find(&#123;title: <span class=\"string\">&quot;MongoDB 教程&quot;</span>&#125;).explain(<span class=\"string\">&quot;executionStats&quot;</span>)</span><br><span class=\"line\">db.books.find(&#123;title: <span class=\"string\">&quot;MongoDB 教程&quot;</span>&#125;).explain(<span class=\"string\">&quot;allPlansExecution&quot;</span>)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>verbose :可选参数，表示执行计划的输出模式，默认queryPlanner</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>模式名字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>queryPlanner</td>\n<td>执行计划的详细信息，包括查询计划、集合信息、查询条件、最佳执行计划、查询方式和 MongoDB 服务信息等</td>\n</tr>\n<tr>\n<td>executionStats</td>\n<td>最佳执行计划的执行情况和被拒绝的计划等信息</td>\n</tr>\n<tr>\n<td>allPlansExecution</td>\n<td>选择并执行最佳执行计划，并返回最佳执行计划和其他执行计划的执行情况</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>输出结果中重点查看<code>stage</code>,比如<code>queryPlanner</code>下的<code>winningPlan.stage</code></p>\n</li>\n<li class=\"lvl-2\">\n<p><code>stage</code>类型</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>COLLSCAN</td>\n<td>全表扫描</td>\n</tr>\n<tr>\n<td>IXSCAN</td>\n<td>索引扫描</td>\n</tr>\n<tr>\n<td>FETCH</td>\n<td>根据索引检索指定文档</td>\n</tr>\n<tr>\n<td>SHARD_MERGE</td>\n<td>将各个分片返回数据进行合并</td>\n</tr>\n<tr>\n<td>SORT</td>\n<td>在内存中进行了排序</td>\n</tr>\n<tr>\n<td>LIMIT</td>\n<td>使用 limit 限制返回数</td>\n</tr>\n<tr>\n<td>SKIP</td>\n<td>使用 skip 进行跳过</td>\n</tr>\n<tr>\n<td>IDHACK</td>\n<td>对 _id 进行查询</td>\n</tr>\n<tr>\n<td>SHARDING_FILTER</td>\n<td>通过 mongos 对分片数据进行查询</td>\n</tr>\n<tr>\n<td>COUNTSCAN</td>\n<td>count 不使用索引进行 count 时的 stage 返回</td>\n</tr>\n<tr>\n<td>COUNT_SCAN</td>\n<td>count 使用了索引进行 count 时的 stage 返回</td>\n</tr>\n<tr>\n<td>SUBPLAN</td>\n<td>未使用到索引的 $or 查询的 stage 返回</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>使用全文索引进行查询时候的 stage 返回</td>\n</tr>\n<tr>\n<td>PROJECTION</td>\n<td>限定返回字段时候 stage 的返回</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>执行计划的返回结果中尽量不要出现以下<code>stage</code>:</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- COLLSCAN(全表扫描)</span><br><span class=\"line\">- SORT(使用sort但是无index)</span><br><span class=\"line\">- 不合理的SKIP</span><br><span class=\"line\">- SUBPLA(未用到index的$or)</span><br><span class=\"line\">- COUNTSCAN(不使用index进行count)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"实战\">实战</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>下面是一个结合各种索引类型的示例，假设我们正在为一个电商应用创建和管理一个MongoDB集合products，其中包含以下字段：</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_id: 默认的ObjectId类型，作为主键（已自动带有唯一性索引）。</span><br><span class=\"line\">category: 商品分类，字符串类型。</span><br><span class=\"line\">brand: 商品品牌，字符串类型。</span><br><span class=\"line\">tags: 商品标签数组，包含多个字符串元素。</span><br><span class=\"line\">price: 商品价格，数字类型。</span><br><span class=\"line\">lastUpdated: 商品最后更新时间，日期类型。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建集合与插入文档</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 假设已经连接到数据库并选择了一个database</span><br><span class=\"line\">db.createCollection(<span class=\"string\">&quot;products&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">// 插入一些示例数据</span><br><span class=\"line\">db.products.insertMany([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    category: <span class=\"string\">&quot;Electronics&quot;</span>,</span><br><span class=\"line\">    brand: <span class=\"string\">&quot;Apple&quot;</span>,</span><br><span class=\"line\">    tags: [<span class=\"string\">&quot;smartphone&quot;</span>, <span class=\"string\">&quot;ios&quot;</span>],</span><br><span class=\"line\">    price: 999,</span><br><span class=\"line\">    lastUpdated: ISODate(<span class=\"string\">&quot;2023-03-01T00:00:00Z&quot;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // ...其他商品文档</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>单键索引 - 查询商品按价格排序</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">createIndex</span>(&#123; <span class=\"attr\">price</span>: <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">find</span>().<span class=\"title function_\">sort</span>(&#123; <span class=\"attr\">price</span>: <span class=\"number\">1</span> &#125;); <span class=\"comment\">// 获取所有商品按价格升序排列</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>复合索引 - 按品牌和价格查询，并进行排序：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">createIndex</span>(&#123; <span class=\"attr\">brand</span>: <span class=\"number\">1</span>, <span class=\"attr\">price</span>: -<span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">brand</span>: <span class=\"string\">&quot;Apple&quot;</span> &#125;).<span class=\"title function_\">sort</span>(&#123; <span class=\"attr\">price</span>: -<span class=\"number\">1</span> &#125;); <span class=\"comment\">// 获取指定品牌的商品并按价格降序排列</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>多键索引 - 根据商品标签进行搜索</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">createIndex</span>(&#123; <span class=\"string\">&quot;tags&quot;</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"string\">&quot;sparse&quot;</span>: <span class=\"literal\">true</span> &#125;); <span class=\"comment\">// 如果不是每个文档都有tags，可以使用sparse选项以节省空间</span></span><br><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"string\">&quot;tags&quot;</span>: <span class=\"string\">&quot;smartphone&quot;</span> &#125;); <span class=\"comment\">// 找到所有带有“smartphone”标签的商品</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>唯一索引 - 确保品牌名称不重复</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">createIndex</span>(&#123; <span class=\"attr\">brand</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"attr\">unique</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 尝试插入重复记录时</span></span><br><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">insertOne</span>(&#123; <span class=\"attr\">category</span>: <span class=\"string\">&quot;Electronics&quot;</span>, <span class=\"attr\">brand</span>: <span class=\"string\">&quot;Apple&quot;</span>, ... &#125;); <span class=\"comment\">// 正常插入</span></span><br><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">insertOne</span>(&#123; <span class=\"attr\">category</span>: <span class=\"string\">&quot;Computers&quot;</span>, <span class=\"attr\">brand</span>: <span class=\"string\">&quot;Apple&quot;</span>, ... &#125;); <span class=\"comment\">// 若数据库中已有Apple品牌，则会因违反唯一性而报错</span></span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍如何使用MongoDB7.0的索引 MongoDB版本7.0.6 MongoDB Indexes MongoDB索引简介 索引支持在MongoDB中高效执行查询。如果没有索引，MongoDB必须扫描集合中的每个文档才能返回查询结果。如果查询存在适当的索引，MongoDB使用该索引来限制它必须扫描的文档数量。 虽然索引可以提高查询性能，但添加索引对写入操作的性能有负面影响。对于写入读数比较高的集合，索引很昂贵，因为每个插入还必须更新任何索引。 所以合理的创建索引，即可以提升查询性能，又不会对写操作造成太大的影响。 MongoDB采用 B-Tree (准确的说是 B+Tree) 做索引，索引创建在colletions上。 创建索引语法 1db.collection.createIndex( keys, options ) Key 值为你要创建的索引字段，1 按升序创建索引， -1 按降序创建索引 options 选项 参数 类型 描述 background Boolean 建索引过程是否阻塞其它数据库操作，设置为 true 则以后台方式创建索引 unique Boolean 建立的索引是否唯一，设置为 true 则创建唯一索引 name string 索引的名称 dropDups Boolean 3.0+版本已废弃，在建立唯一索引时是否删除重复记录 sparse Boolean 对文档中不存在的字段数据是否启用索引 expireAfterSeconds integer 指定一个以秒为单位的数值，完成 TTL 设定，设定集合的生存时间 v index version 索引的版本号 weights document 索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重 default_language string 对于文本索引，该参数决定了停用词及词干和词器的规则的列表 language_override string 对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的 language 索引类型 与大多数数据库一样，MongoDB支持各种丰富的索引类型，包括单键索引、复合索引，唯一索引等一些常用的结构。由于采用了灵活可变的文档类型，因此它也同样支持对嵌套字段、数组进行索引。通过建立合适的索引，我们可以极大地提升数据的检索速度。在一些特殊应用场景，MongoDB还支持地理空间索引、文本检索索引、TTL索引等不同的特性。 单键索引(Single Field Indexes) 单键索引是MongoDB最简单的索引类型，它将一个字段作为索引键，索引键值唯一。 默认情况下，MongoDB会在ID字段上创建一个单键索引，ID字段是文档的唯一标识符，MongoDB会自动创建一个ID字段，如果用户自己创建ID字段，MongoDB会自动将ID字段作为单键索引。 单键索引的创建方式如下： 1234# 1表示正序，-1表示倒序db.books.createIndex(&#123;title:1&#125;)# 对内嵌文档字段创建索引：db.books.createIndex(&#123;&quot;author.name&quot;:1&#125;) 复合索引(Compound Index) 复合索引是将多个字段作为索引键，其性质和单字段索引类似。但不同的是，复合索引中字段的顺序、字段的升降序对查询性能有直接的影响，因此在设计复合索引时则需要考虑不同的查询场景。 复合索引的创建方式如下： 123db.books.createIndex(&#123;title:1, author.name:1&#125;)# 对内嵌文档字段创建索引：db.books.createIndex(&#123;&quot;author.name&quot;:1, &quot;author.age&quot;:1&#125;) 多键(数组)索引(Multikey Index) 多键索引是将一个字段作为索引键，该字段可以是嵌套文档、数组等复杂数据类型。 多键索引的创建方式如下： 1234567891011121314151617# tags字段为数组db.books.createIndex(&#123;&quot;tags&quot;:1&#125;)# 创建复合多值索引，这里仅能有一个字段是数组，MongoDB并不支持一个复合索引中同时出现多个数组字段db.books.createIndex(&#123;title:1, tags:1&#125;)# 示例数据格式&#123; _id: 1, item: &quot;abc&quot;, stock: [ &#123; size: &quot;S&quot;, color: &quot;red&quot;, quantity: 25 &#125;, &#123; size: &quot;S&quot;, color: &quot;blue&quot;, quantity: 10 &#125;, &#123; size: &quot;M&quot;, color: &quot;blue&quot;, quantity: 50 &#125; ]&#125;# 可以对嵌入文档创建多键索引db.collection.createIndex( &#123; &quot;stock.size&quot;: 1, &quot;stock.quantity&quot;: 1 &#125; ) Hash索引(Hashed Indexes) Hash索引是MongoDB中的一种特殊的索引类型，它将字段的值计算出一个哈希值，然后将该哈希值作为索引键。由于哈希值的唯一性，因此MongoDB在创建Hash索引时，不会对索引键值进行排序。 Hash索引的创建方式如下： 123db.books.createIndex(&#123;title:&quot;hashed&quot;&#125;)# 对内嵌文档字段创建索引：db.books.createIndex(&#123;&quot;author.name&quot;:&quot;hashed&quot;&#125;) 通配符索引(Wildcard Indexes) 通配符索引是MongoDB中的一种特殊的索引类型，它允许在索引键值中包含通配符，从而支持对通配符匹配的查询。 MongoDB 4.2 引入了通配符索 通配符索引的创建方式如下： 12345678910111213# 示例数据&#123; &quot;product_name&quot; : &quot;Spy Coat&quot;, &quot;product_attributes&quot; : &#123; &quot;material&quot; : [ &quot;Tweed&quot;, &quot;Wool&quot;, &quot;Leather&quot; ], &quot;size&quot; : &#123; &quot;length&quot; : 72, &quot;units&quot; : &quot;inches&quot; &#125; &#125;&#125;db.products.createIndex( &#123; &quot;product_attributes.$**&quot; : 1 &#125; ) 通配符索引是稀疏的，不索引空字段。因此，通配符索引不能支持查询字段不存在的文档。 12345# 通配符索引不能支持以下查询db.products.find( &#123;&quot;product_attributes&quot; : &#123; $exists : false &#125; &#125; )db.products.aggregate([ &#123; $match : &#123; &quot;product_attributes&quot; : &#123; $exists : false &#125; &#125; &#125;]) 通配符索引为文档或数组的内容生成条目，而不是文档/数组本身。因此通配符索引不能支持精确的文档/数组相等匹配。通配符索引可以支持查询字段等于空文档{}的情况 123456#通配符索引不能支持以下查询:db.products.find(&#123; &quot;product_attributes.colors&quot; : [ &quot;Blue&quot;, &quot;Black&quot; ] &#125; )db.products.aggregate([&#123; $match : &#123; &quot;product_attributes.colors&quot; : [ &quot;Blue&quot;, &quot;Black&quot; ] &#125;&#125;]) 索引属性 唯一索引(Unique Indexes) 唯一索引的创建方式如下： 123456# 单键索引支持唯一约束db.books.createIndex(&#123;title:1&#125;, &#123;unique:true&#125;)# 复合索引支持唯一性约束db.books.createIndex(&#123;title:1，type:1&#125;, &#123;unique:true&#125;)# 多键索引支持唯一性约束，这里tags是数组db.books.createIndex(&#123;&quot;tags&quot;:1&#125;, &#123;unique:true&#125;) 唯一性索引对于文档中缺失的字段，会使用null值代替，因此不允许存在多个文档缺失索引字段的情况。 对于分片的集合，唯一性约束必须匹配分片规则。换句话说，为了保证全局的唯一性，分片键必须作为唯一性索引的前缀字段。 部分索引(Partial Indexes) 部分索引仅对满足指定过滤器表达式的文档进行索引。通过在一个集合中为文档的一个子集建立索引，部分索引具有更低的存储需求和更低的索引创建和维护的性能成本。 部分索引的创建方式如下： 12# 符合条件&#123;author: &#123;$exists: true&#125;&#125;，即存在作者，才对title创建升序索引db.books.createIndex(&#123;title:1&#125;, &#123;partialFilterExpression: &#123;author: &#123;$exists: true&#125;&#125;&#125;) partialFilterExpression(筛选器表达式)选项接受指定过滤条件的文档: - 等式表达式(例如:field: value或使用$eq操作符) - $exists: true - $gt， $gte， $lt， $lte - $type - 顶层的$and 注意：如果同时指定了partialFilterExpression和唯一约束，那么唯一约束只适用于满足筛选器表达式的文档。如果文档不满足筛选条件，那么带有惟一约束的部分索引不会阻止插入不满足惟一约束的文档。 稀疏索引(Sparse Indexes) 索引的稀疏属性确保索引只包含具有索引字段的文档的条目，索引将跳过没有索引字段的文档。即只对存在字段的文档进行索引（包括字段值为null的文档）。 如果稀疏索引会导致查询和排序操作的结果集不完整，MongoDB将不会使用该索引，除非hint()明确指定索引。 稀疏索引的创建方式如下： 12345678910111213141516171819# 数据准备db.scores.insertMany([ &#123;&quot;userid&quot; : &quot;newbie&quot;&#125;, &#123;&quot;userid&quot; : &quot;abby&quot;, &quot;score&quot; : 82&#125;, &#123;&quot;userid&quot; : &quot;nina&quot;, &quot;score&quot; : 90&#125;])# 创建稀疏索引db.scores.createIndex( &#123; score: 1 &#125; , &#123; sparse: true &#125; )# 测试# 使用稀疏索引db.scores.find( &#123; score: &#123; $lt: 90 &#125; &#125; )# 即使排序是通过索引字段，MongoDB也不会选择稀疏索引来完成查询，以返回完整的结果db.scores.find().sort( &#123; score: -1 &#125; )# 要使用稀疏索引，使用hint()显式指定索引db.scores.find().sort( &#123; score: -1 &#125; ).hint( &#123; score: 1 &#125; ) 同时具有稀疏性和唯一性的索引可以防止集合中存在字段值重复的文档，但允许不包含此索引字段的文档插入。 123456789101112# 删除之前创建的索引db.scores.dropIndex(&#123;score:1&#125;)# 创建具有唯一约束的稀疏索引db.scores.createIndex( &#123; score: 1 &#125; , &#123; sparse: true, unique: true &#125; )# 测试插入db.scores.insertMany( [ &#123; &quot;userid&quot;: &quot;AAAAAAA&quot;, &quot;score&quot;: 50 &#125;, &#123; &quot;userid&quot;: &quot;BBBBBBB&quot;, &quot;score&quot;: 64 &#125;, &#123; &quot;userid&quot;: &quot;CCCCCCC&quot; &#125;, &#123; &quot;userid&quot;: &quot;CCCCCCC&quot; &#125;] ) TTL索引(TTL Indexes) MongoDB 可以使用它在一定时间或特定时钟时间后自动从集合中删除文档，就是带有过期时间的索引，到期后，MongoDB会自动删除这些过期的文档。 TTL索引只能创建在日期字段上，当文档过期后，MongoDB会自动删除这些文档。 TTL索引的创建方式如下： 12345678# 数据准备db.log_events.insertOne( &#123; &quot;createdAt&quot;: new Date(), &quot;logEvent&quot;: 2, &quot;logMessage&quot;: &quot;Success!&quot;&#125; )# 创建TTL索引db.scores.createIndex( &#123; &quot;createdAt&quot;: 1 &#125;, &#123; expireAfterSeconds: 3600 &#125; ) TTL 索引不保证过期数据会在过期后立即被删除。文档过期和 MongoDB 从数据库中删除文档的时间之间可能存在延迟。删除过期文档的后台任务每 60 秒运行一次。因此，在文档到期和后台任务运行之间的时间段内，文档可能会保留在集合中。 TTL索引在创建之后，仍然可以对过期时间进行修改。这需要使用collMod命令对索引的定义进行变更 1234567db.runCommand( &#123; collMod: &quot;log_events&quot;, index: &#123; keyPattern: &#123; createdAt: 1 &#125;, expireAfterSeconds: 3600 &#125;&#125; ) 隐藏索引(Hidden Indexes) 隐藏索引对查询规划器不可见，不能用于查询。 通过对规划器隐藏索引，用户可以在不实际删除索引的情况下评估删除索引的潜在影响。如果影响是负面的，用户可以取消隐藏索引，而不必重新创建已删除的索引。 隐藏索引的创建方式如下： 12345678# 创建隐藏索引db.restaurants.createIndex(&#123; borough: 1 &#125;,&#123; hidden: true &#125;);# 隐藏现有索引db.restaurants.hideIndex( &#123; borough: 1&#125; );db.restaurants.hideIndex( &quot;索引名称&quot; )# 取消隐藏索引db.restaurants.unhideIndex( &#123; borough: 1&#125; );db.restaurants.unhideIndex( &quot;索引名称&quot; ); 索引其它操作 查看索引 1234# 查看索引信息db.books.getIndexes()# 查看索引键db.books.getIndexKeys() 删除索引 1234# 删除集合指定索引db.col.dropIndex(&quot;索引名称&quot;)# 删除集合所有索引,不能删除主键索引db.col.dropIndexes() 索引使用建议 为每一个查询建立合适的索引 这个是针对于数据量较大比如说超过几十上百万（文档数目）数量级的集合。 如果没有索引MongoDB需要把所有的Document从盘上读到内存，这会对MongoDB服务器造成较大的压力并影响到其他请求的执行。 创建合适的复合索引，不要依赖于交叉索引 如果你的查询会使用到多个字段，MongoDB有两个索引技术可以使用：交叉索引和复合索引。 交叉索引就是针对每个字段单独建立一个单字段索引，然后在查询执行时候使用相应的单字段索引进行索引交叉而得到查询结果。 交叉索引目前触发率较低，所以如果你有一个多字段查询的时候，建议使用复合索引能够保证索引正常的使用。 1234#查找所有年龄小于30岁的深圳市马拉松运动员db.athelets.find(&#123;sport: &quot;marathon&quot;, location: &quot;sz&quot;, age: &#123;$lt: 30&#125;&#125;&#125;)#创建复合索引db.athelets.createIndex(&#123;sport:1, location:1, age:1&#125;) 复合索引字段顺序：匹配条件在前，范围条件在后（Equality First, Range After） 前面的例子，在创建复合索引时如果条件有匹配和范围之分，那么匹配条件（sport: “marathon”) 应该在复合索引的前面。范围条件(age: &lt;30)字段应该放在复合索引的后面。 尽可能使用覆盖索引（Covered Index） 建议只返回需要的字段，同时，利用覆盖索引来提升性能。 建索引要在后台运行 在对一个集合创建索引时，该集合所在的数据库将不接受其他读写操作。对大数据量的集合建索引，建议使用后台运行选项 {background: true} 避免设计过长的数组索引 数组索引是多值的，在存储时需要使用更多的空间。如果索引的数组长度特别长，或者数组的增长不受控制，则可能导致索引空间急剧膨胀。 explain执行计划 explain执行计划的作用是：查看MongoDB执行查询时的执行计划。 explain执行计划的使用方式如下： 1234567# 语法db.collection.find().explain(&lt;verbose&gt;)# 示例db.books.find(&#123;title: &quot;MongoDB 教程&quot;&#125;).explain()db.books.find(&#123;title: &quot;MongoDB 教程&quot;&#125;).explain(&quot;executionStats&quot;)db.books.find(&#123;title: &quot;MongoDB 教程&quot;&#125;).explain(&quot;allPlansExecution&quot;) verbose :可选参数，表示执行计划的输出模式，默认queryPlanner 模式名字 描述 queryPlanner 执行计划的详细信息，包括查询计划、集合信息、查询条件、最佳执行计划、查询方式和 MongoDB 服务信息等 executionStats 最佳执行计划的执行情况和被拒绝的计划等信息 allPlansExecution 选择并执行最佳执行计划，并返回最佳执行计划和其他执行计划的执行情况 输出结果中重点查看stage,比如queryPlanner下的winningPlan.stage stage类型 状态 描述 COLLSCAN 全表扫描 IXSCAN 索引扫描 FETCH 根据索引检索指定文档 SHARD_MERGE 将各个分片返回数据进行合并 SORT 在内存中进行了排序 LIMIT 使用 limit 限制返回数 SKIP 使用 skip 进行跳过 IDHACK 对 _id 进行查询 SHARDING_FILTER 通过 mongos 对分片数据进行查询 COUNTSCAN count 不使用索引进行 count 时的 stage 返回 COUNT_SCAN count 使用了索引进行 count 时的 stage 返回 SUBPLAN 未使用到索引的 $or 查询的 stage 返回 TEXT 使用全文索引进行查询时候的 stage 返回 PROJECTION 限定返回字段时候 stage 的返回 执行计划的返回结果中尽量不要出现以下stage: 12345- COLLSCAN(全表扫描)- SORT(使用sort但是无index)- 不合理的SKIP- SUBPLA(未用到index的$or)- COUNTSCAN(不使用index进行count) 实战 下面是一个结合各种索引类型的示例，假设我们正在为一个电商应用创建和管理一个MongoDB集合products，其中包含以下字段： 123456_id: 默认的ObjectId类型，作为主键（已自动带有唯一性索引）。category: 商品分类，字符串类型。brand: 商品品牌，字符串类型。tags: 商品标签数组，包含多个字符串元素。price: 商品价格，数字类型。lastUpdated: 商品最后更新时间，日期类型。 创建集合与插入文档 1234567891011121314// 假设已经连接到数据库并选择了一个databasedb.createCollection(&quot;products&quot;);// 插入一些示例数据db.products.insertMany([ &#123; category: &quot;Electronics&quot;, brand: &quot;Apple&quot;, tags: [&quot;smartphone&quot;, &quot;ios&quot;], price: 999, lastUpdated: ISODate(&quot;2023-03-01T00:00:00Z&quot;) &#125;, // ...其他商品文档]); 单键索引 - 查询商品按价格排序 12db.products.createIndex(&#123; price: 1 &#125;);db.products.find().sort(&#123; price: 1 &#125;); // 获取所有商品按价格升序排列 复合索引 - 按品牌和价格查询，并进行排序： 12db.products.createIndex(&#123; brand: 1, price: -1 &#125;);db.products.find(&#123; brand: &quot;Apple&quot; &#125;).sort(&#123; price: -1 &#125;); // 获取指定品牌的商品并按价格降序排列 多键索引 - 根据商品标签进行搜索 12db.products.createIndex(&#123; &quot;tags&quot;: 1 &#125;, &#123; &quot;sparse&quot;: true &#125;); // 如果不是每个文档都有tags，可以使用sparse选项以节省空间db.products.find(&#123; &quot;tags&quot;: &quot;smartphone&quot; &#125;); // 找到所有带有“smartphone”标签的商品 唯一索引 - 确保品牌名称不重复 1234db.products.createIndex(&#123; brand: 1 &#125;, &#123; unique: true &#125;);// 尝试插入重复记录时db.products.insertOne(&#123; category: &quot;Electronics&quot;, brand: &quot;Apple&quot;, ... &#125;); // 正常插入db.products.insertOne(&#123; category: &quot;Computers&quot;, brand: &quot;Apple&quot;, ... &#125;); // 若数据库中已有Apple品牌，则会因违反唯一性而报错","summary":"摘要 本文介绍如何使用MongoDB7.0的索引 MongoDB版本7.0.6 MongoDB Indexes","date_published":"2024-03-11T13:30:05.000Z","tags":["技术","linux","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/03/07/mongodb7-springboot-aggregate/","url":"https://blog.hanqunfeng.com/2024/03/07/mongodb7-springboot-aggregate/","title":"MongoDB7.0--SpringBoot聚合操作","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍如何使用SpringBoot实现MongoDB7.0的聚合操作</p>\n</li>\n<li class=\"lvl-2\">\n<p>SpringBoot版本3.2.3，MongoDB版本7.0.6</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/v7.0/aggregation/\">MongoDB Aggregation Operations</a></p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/v7.0/reference/sql-aggregation-comparison/\">SQL to Aggregation Mapping Chart</a></p>\n</li>\n<li class=\"lvl-2\">\n<a href=\"/2024/03/05/mongodb7-springboot/\" title=\"MongoDB7.0--SpringBoot单集合操作\">MongoDB7.0--SpringBoot单集合操作</a>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"聚合操作简介\">聚合操作简介</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>聚合操作允许用户处理多个文档并返回计算结果</p>\n</li>\n<li class=\"lvl-2\">\n<p>聚合操作包含三类</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">单文档聚合：针对单个集合，如：<code>db.collection.countDocument()</code>, <code>db.collection.distinct()</code></li>\n<li class=\"lvl-6\">聚合管道：它可以作用在一个或几个集合上，对集合中的数据进行的一系列运算，并将这些数据转化为用户期望的形式，本文主要介绍管道操作</li>\n<li class=\"lvl-6\">MapReduce：从MongoDB 5.0开始，map-reduce操作已被弃用，本文不做介绍。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"聚合管道\">聚合管道</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>聚合管道是MongoDB中非常强大的功能，它允许用户将多个操作组合在一起，以实现复杂的数据处理。</p>\n</li>\n<li class=\"lvl-2\">\n<p>从效果而言，聚合管道相当于 SQL 查询中的 GROUP BY、 LEFT OUTER JOIN 、 AS等。</p>\n</li>\n<li class=\"lvl-2\">\n<p>整个聚合运算过程称为管道（Pipeline），它是由多个阶段（Stage）组成的， 每个管道：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">接受一系列文档（原始数据）</li>\n<li class=\"lvl-6\">每个阶段对这些文档进行一系列运算</li>\n<li class=\"lvl-6\">结果文档输出给下一个阶段</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/cHlDgv.png\" alt=\"\"></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>聚合管道操作语法</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">pipelines 一组数据聚合阶段。除$out、$Merge和$geonear阶段之外，每个阶段都可以在管道中出现多次。</li>\n<li class=\"lvl-6\">options 可选，聚合操作的其他参数。包含：查询计划、是否使用临时文件、 游标、最大操作时间、读写策略、强制索引等等</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline = [<span class=\"variable\">$stage1</span>, <span class=\"variable\">$stage2</span>, ...<span class=\"variable\">$stageN</span>];</span><br><span class=\"line\">db.collection.aggregate(pipeline, &#123;options&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/reMhNx.png\" alt=\"聚合管道\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>常用的聚合阶段运算符</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>阶段运算符</th>\n<th>描述</th>\n<th>SQL等价运算符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$match</td>\n<td>过滤文档</td>\n<td>WHERE</td>\n</tr>\n<tr>\n<td>$project</td>\n<td>投影，改变文档的形状和内容</td>\n<td>SELECT filedName AS newName</td>\n</tr>\n<tr>\n<td>$group</td>\n<td>将文档分组</td>\n<td>GROUP BY</td>\n</tr>\n<tr>\n<td>$sort</td>\n<td>对文档进行排序</td>\n<td>ORDER BY</td>\n</tr>\n<tr>\n<td>$limit</td>\n<td>限制结果集的大小</td>\n<td>LIMIT</td>\n</tr>\n<tr>\n<td>$skip</td>\n<td>跳过指定数量的文档</td>\n<td>OFFSET</td>\n</tr>\n<tr>\n<td>$unwind</td>\n<td>展开数组</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$lookup</td>\n<td>从其他集合中获取相关文档,左外连接</td>\n<td>LEFT OUTER JOIN</td>\n</tr>\n<tr>\n<td>$out</td>\n<td>将结果集输出到新的集合</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$geoNear</td>\n<td>按照地理位置附近的顺序返回文档</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$graphLookup</td>\n<td>执行递归查询</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$addFields</td>\n<td>添加新字段</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$bucket</td>\n<td>根据指定条件将文档分组成桶</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$facet</td>\n<td>允许在单个聚合阶段内执行多个独立的子聚合</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/BqWIi9.png\" alt=\"\"></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>聚合表达式</p>\n</li>\n</ul>\n<blockquote>\n<p>获取字段信息</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&lt;field&gt;  ： 用 $ 指示字段路径</span><br><span class=\"line\">$&lt;field&gt;.&lt;subfield&gt;  ： 使用 $  和 .  来指示内嵌文档的路径</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>常量表达式</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$literal</span> :&lt;value&gt; ： 指示常量 &lt;value&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>系统变量表达式</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$&lt;variable&gt;  使用 $$ 指示系统变量</span><br><span class=\"line\">$<span class=\"variable\">$CURRENT</span>  指示管道中当前操作的文档</span><br></pre></td></tr></table></figure>\n<h2 id=\"聚合管道示例\">聚合管道示例</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本示例使用SpringBoot实现MongoDB7.0的聚合操作</p>\n</li>\n<li class=\"lvl-2\">\n<p>初始化数据</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">var tags = [&quot;nosql&quot;,&quot;mongodb&quot;,&quot;document&quot;,&quot;developer&quot;,&quot;popular&quot;];</span></span><br><span class=\"line\"><span class=\"comment\">var types = [&quot;technology&quot;,&quot;sociality&quot;,&quot;travel&quot;,&quot;novel&quot;,&quot;literature&quot;];</span></span><br><span class=\"line\"><span class=\"comment\">var books=[];</span></span><br><span class=\"line\"><span class=\"comment\">for(var i=0;i&lt;50;i++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    var typeIdx = Math.floor(Math.random()*types.length);</span></span><br><span class=\"line\"><span class=\"comment\">    var tagIdx = Math.floor(Math.random()*tags.length);</span></span><br><span class=\"line\"><span class=\"comment\">    var tagIdx2 = Math.floor(Math.random()*tags.length);</span></span><br><span class=\"line\"><span class=\"comment\">    var favCount = Math.floor(Math.random()*100);</span></span><br><span class=\"line\"><span class=\"comment\">    var username = &quot;xx00&quot;+Math.floor(Math.random()*10);</span></span><br><span class=\"line\"><span class=\"comment\">    var age = 20 + Math.floor(Math.random()*15);</span></span><br><span class=\"line\"><span class=\"comment\">    var book = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        title: &quot;book-&quot;+i,</span></span><br><span class=\"line\"><span class=\"comment\">        type: types[typeIdx],</span></span><br><span class=\"line\"><span class=\"comment\">        tag: [tags[tagIdx],tags[tagIdx2]],</span></span><br><span class=\"line\"><span class=\"comment\">        favCount: favCount,</span></span><br><span class=\"line\"><span class=\"comment\">        author: &#123;name:username,age:age&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;;</span></span><br><span class=\"line\"><span class=\"comment\">    books.push(book)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">db.books.insertMany(books);</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">String[] tags = &#123;<span class=\"string\">&quot;nosql&quot;</span>, <span class=\"string\">&quot;mongodb&quot;</span>, <span class=\"string\">&quot;document&quot;</span>, <span class=\"string\">&quot;developer&quot;</span>, <span class=\"string\">&quot;popular&quot;</span>&#125;;</span><br><span class=\"line\">String[] types = &#123;<span class=\"string\">&quot;technology&quot;</span>, <span class=\"string\">&quot;sociality&quot;</span>, <span class=\"string\">&quot;travel&quot;</span>, <span class=\"string\">&quot;novel&quot;</span>, <span class=\"string\">&quot;literature&quot;</span>&#125;;</span><br><span class=\"line\">List&lt;Document&gt; books = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">typeIdx</span> <span class=\"operator\">=</span> random.nextInt(types.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">tagIdx</span> <span class=\"operator\">=</span> random.nextInt(tags.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">tagIdx2</span> <span class=\"operator\">=</span> random.nextInt(tags.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">favCount</span> <span class=\"operator\">=</span> random.nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xx00&quot;</span> + random.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">20</span> + random.nextInt(<span class=\"number\">15</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Document</span> <span class=\"variable\">book</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(<span class=\"string\">&quot;title&quot;</span>, <span class=\"string\">&quot;book-&quot;</span> + i)</span><br><span class=\"line\">            .append(<span class=\"string\">&quot;type&quot;</span>, types[typeIdx])</span><br><span class=\"line\">            .append(<span class=\"string\">&quot;tag&quot;</span>, List.of(tags[tagIdx], tags[tagIdx2]))</span><br><span class=\"line\">            .append(<span class=\"string\">&quot;favCount&quot;</span>, favCount)</span><br><span class=\"line\">            .append(<span class=\"string\">&quot;author&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(<span class=\"string\">&quot;name&quot;</span>, username).append(<span class=\"string\">&quot;age&quot;</span>, age));</span><br><span class=\"line\">    books.add(book);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mongoTemplate.insert(books, <span class=\"string\">&quot;books&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"project-投影操作\">$project:投影操作</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将原始字段投影成指定名称， 如将集合中的 title 投影成 name</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.books.aggregate([&#123;$project:&#123;name:&quot;$title&quot;&#125;&#125;])</span></span><br><span class=\"line\"><span class=\"type\">ProjectionOperation</span> <span class=\"variable\">projectOperation</span> <span class=\"operator\">=</span> Aggregation.project()</span><br><span class=\"line\">        .andExpression(<span class=\"string\">&quot;title&quot;</span>).as(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(projectOperation);</span><br><span class=\"line\">System.out.println(aggregation);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Document document : result) &#123;</span><br><span class=\"line\">    System.out.println(document.toJson());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>剔除不需要的字段</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.books.aggregate([&#123;$project:&#123;name:&quot;$title&quot;,_id:0,type:1,author.name:1&#125;&#125;])</span></span><br><span class=\"line\"><span class=\"type\">ProjectionOperation</span> <span class=\"variable\">projectOperation</span> <span class=\"operator\">=</span> Aggregation.project()</span><br><span class=\"line\">        .andExclude(<span class=\"string\">&quot;_id&quot;</span>)</span><br><span class=\"line\">        .andInclude(<span class=\"string\">&quot;type&quot;</span>)</span><br><span class=\"line\">        .andExpression(<span class=\"string\">&quot;author.name&quot;</span>).as(<span class=\"string\">&quot;author.name&quot;</span>) <span class=\"comment\">// 这里必须使用as重新命名，否则只会用name做字段名称，这就和后面的title的别名冲突了</span></span><br><span class=\"line\">        .andExpression(<span class=\"string\">&quot;title&quot;</span>).as(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(projectOperation);</span><br><span class=\"line\">System.out.println(aggregation);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Document document : results) &#123;</span><br><span class=\"line\">    System.out.println(document.toJson());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"match-过滤操作\">$match:过滤操作</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>过滤出指定条件的文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.books.aggregate([&#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;])</span></span><br><span class=\"line\"><span class=\"type\">MatchOperation</span> <span class=\"variable\">matchOperation</span> <span class=\"operator\">=</span> Aggregation.match(Criteria.where(<span class=\"string\">&quot;type&quot;</span>).is(<span class=\"string\">&quot;technology&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(matchOperation);</span><br><span class=\"line\">System.out.println(aggregation);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Document document : results) &#123;</span><br><span class=\"line\">    System.out.println(document.toJson());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>组合其它管道</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$project:&#123;name:&quot;$title&quot;,_id:0,type:1,author:&#123;name:1&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">MatchOperation</span> <span class=\"variable\">matchOperation</span> <span class=\"operator\">=</span> Aggregation.match(Criteria.where(<span class=\"string\">&quot;type&quot;</span>).is(<span class=\"string\">&quot;technology&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">ProjectionOperation</span> <span class=\"variable\">projectOperation</span> <span class=\"operator\">=</span> Aggregation.project(<span class=\"string\">&quot;title&quot;</span>).andExclude(<span class=\"string\">&quot;_id&quot;</span>).andInclude(<span class=\"string\">&quot;type&quot;</span>).and(<span class=\"string\">&quot;author.name&quot;</span>).as(<span class=\"string\">&quot;author.name&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(matchOperation, projectOperation);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<h3 id=\"count-计数操作\">$count:计数操作</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$count: &quot;type_count&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// MatchOperation to filter documents by type: &quot;technology&quot;</span></span><br><span class=\"line\"><span class=\"type\">MatchOperation</span> <span class=\"variable\">matchAggregation</span> <span class=\"operator\">=</span> Aggregation.match(Criteria.where(<span class=\"string\">&quot;type&quot;</span>).is(<span class=\"string\">&quot;technology&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">// CountOperation to count the matched documents</span></span><br><span class=\"line\"><span class=\"type\">CountOperation</span> <span class=\"variable\">countAggregation</span> <span class=\"operator\">=</span> Aggregation.count().as(<span class=\"string\">&quot;type_count&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Combine the match and count operations</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(matchAggregation, countAggregation);</span><br><span class=\"line\">System.out.println(aggregation);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<h3 id=\"group-分组操作\">$group:分组操作</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>按指定的表达式对文档进行分组，并将每个不同分组的文档输出到下一个阶段。输出文档包含一个_id字段，该字段按键包含不同的组。</p>\n</li>\n<li class=\"lvl-2\">\n<p>输出文档还可以包含计算字段，该字段保存由$group的_id字段分组的一些accumulator表达式的值。 $group不会输出具体的文档而只是统计信息。</p>\n</li>\n<li class=\"lvl-2\">\n<p>语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"variable\">$group</span>: &#123; _id: &lt;expression&gt;, &lt;field1&gt;: &#123; &lt;accumulator1&gt; : &lt;expression1&gt; &#125;, ... &#125; &#125;</span><br><span class=\"line\"><span class=\"comment\"># _id字段是必填的;但是，可以指定_id值为null来为整个输入文档计算累计值。</span></span><br><span class=\"line\"><span class=\"comment\"># 剩余的计算字段是可选的，并使用&lt;accumulator&gt;运算符进行计算。</span></span><br><span class=\"line\"><span class=\"comment\"># _id和&lt;accumulator&gt;表达式可以接受任何有效的表达式。</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>accumulator操作符</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n<th>类比sql</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>avg</code></td>\n<td>计算均值</td>\n<td>avg</td>\n</tr>\n<tr>\n<td><code>first</code></td>\n<td>返回每组第一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的第一个文档。</td>\n<td>limit 0,1</td>\n</tr>\n<tr>\n<td><code>last</code></td>\n<td>返回每组最后一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的最后个文档。</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>max</code></td>\n<td>根据分组，获取集合中所有文档对应值得最大值。</td>\n<td>max</td>\n</tr>\n<tr>\n<td><code>min</code></td>\n<td>根据分组，获取集合中所有文档对应值得最小值。</td>\n<td>min</td>\n</tr>\n<tr>\n<td><code>push</code></td>\n<td>将指定的表达式的值添加到一个数组中。</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>addToSet</code></td>\n<td>将表达式的值添加到一个集合中（无重复值，无序）。</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>sum</code></td>\n<td>计算总和</td>\n<td>sum</td>\n</tr>\n<tr>\n<td><code>stdDevPop</code></td>\n<td>返回输入值的总体标准偏差（population standard deviation）</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>stdDevSamp</code></td>\n<td>返回输入值的样本标准偏差（the sample standard deviation）</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/EVvswC.png\" alt=\"\"></p>\n<h4 id=\"示例\">示例</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>book的数量，收藏总数和平均值</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:null,count:&#123;$sum:1&#125;,pop:&#123;$sum:&quot;$favCount&quot;&#125;,avg:&#123;$avg:&quot;$favCount&quot;&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.group().count().as(<span class=\"string\">&quot;count&quot;</span>).sum(<span class=\"string\">&quot;favCount&quot;</span>).as(<span class=\"string\">&quot;pop&quot;</span>).avg(<span class=\"string\">&quot;favCount&quot;</span>).as(<span class=\"string\">&quot;avg&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class);</span><br><span class=\"line\">List&lt;Document&gt; mappedResults = results.getMappedResults();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Assuming that there will be only one result due to grouping by null (_id: null)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!mappedResults.isEmpty()) &#123;</span><br><span class=\"line\">    System.out.println(mappedResults.get(<span class=\"number\">0</span>).toJson());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;&#123;&#125;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>统计每个作者的book收藏总数</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:&quot;$author.name&quot;,pop:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.group(<span class=\"string\">&quot;author.name&quot;</span>).sum(<span class=\"string\">&quot;favCount&quot;</span>).as(<span class=\"string\">&quot;pop&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class);</span><br><span class=\"line\">List&lt;Document&gt; mappedResults = results.getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>统计每个作者的每本book的收藏数</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:&#123;name:&quot;$author.name&quot;,title:&quot;$title&quot;&#125;,pop:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.group(<span class=\"string\">&quot;author.name&quot;</span>, <span class=\"string\">&quot;title&quot;</span>).sum(<span class=\"string\">&quot;favCount&quot;</span>).as(<span class=\"string\">&quot;pop&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class);</span><br><span class=\"line\">List&lt;Document&gt; mappedResults = results.getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>每个作者的book的type合集</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:&quot;$author.name&quot;,types:&#123;$addToSet:&quot;$type&quot;&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">GroupOperation</span> <span class=\"variable\">groupOperation</span> <span class=\"operator\">=</span> Aggregation.group(<span class=\"string\">&quot;author.name&quot;</span>).addToSet(<span class=\"string\">&quot;type&quot;</span>).as(<span class=\"string\">&quot;types&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(groupOperation);</span><br><span class=\"line\">AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class);</span><br><span class=\"line\">List&lt;Document&gt; mappedResults = results.getMappedResults();</span><br></pre></td></tr></table></figure>\n<h3 id=\"unwind\">$unwind</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>可以将数组拆分为单独的文档</p>\n</li>\n<li class=\"lvl-2\">\n<p>语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"variable\">$unwind</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">#要指定字段路径，在字段名称前加上$符并用引号括起来。</span></span><br><span class=\"line\">      path: &lt;field path&gt;,</span><br><span class=\"line\">      <span class=\"comment\">#可选,一个新字段的名称用于存放元素的数组索引。该名称不能以$开头。</span></span><br><span class=\"line\">      includeArrayIndex: &lt;string&gt;,</span><br><span class=\"line\">      <span class=\"comment\">#可选，default :false，若为true,如果路径为空，缺少或为空数组，则$unwind输出文档</span></span><br><span class=\"line\">      preserveNullAndEmptyArrays: &lt;boolean&gt;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例-2\">示例</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>姓名为xx006的作者的book的tag数组拆分为多个文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$unwind:&quot;$tag&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.match(Criteria.where(<span class=\"string\">&quot;author.name&quot;</span>).is(<span class=\"string\">&quot;xx006&quot;</span>)),</span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">&quot;tag&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用<code>includeArrayIndex</code>选项来输出数组元素的数组索引</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$unwind:&#123;path:&quot;$tag&quot;, includeArrayIndex: &quot;arrayIndex&quot;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.match(Criteria.where(<span class=\"string\">&quot;author.name&quot;</span>).is(<span class=\"string\">&quot;xx006&quot;</span>)),</span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;arrayIndex&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>每个作者的book的tag合集</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$unwind:&quot;$tag&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:&quot;$author.name&quot;,types:&#123;$addToSet:&quot;$tag&quot;&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">UnwindOperation</span> <span class=\"variable\">unwindOperation</span> <span class=\"operator\">=</span> Aggregation.unwind(<span class=\"string\">&quot;tag&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">GroupOperation</span> <span class=\"variable\">groupOperation</span> <span class=\"operator\">=</span> Aggregation.group(<span class=\"string\">&quot;author.name&quot;</span>).addToSet(<span class=\"string\">&quot;tag&quot;</span>).as(<span class=\"string\">&quot;types&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(unwindOperation, groupOperation);</span><br><span class=\"line\">AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class);</span><br><span class=\"line\">List&lt;Document&gt; mappedResults = results.getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用<code>preserveNullAndEmptyArrays</code>选项在输出中包含缺少tag字段，null或空数组的文档</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化数据，加入一些tag为空数组或不存在tag的文档</span></span><br><span class=\"line\">db.books.insertMany([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;title&quot;</span> : <span class=\"string\">&quot;book-51&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;type&quot;</span> : <span class=\"string\">&quot;technology&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;favCount&quot;</span> : 11,</span><br><span class=\"line\">        <span class=\"string\">&quot;tag&quot;</span>:[],</span><br><span class=\"line\">        <span class=\"string\">&quot;author&quot;</span> : &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;xx006&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;age&quot;</span> : 28</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;title&quot;</span> : <span class=\"string\">&quot;book-52&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;type&quot;</span> : <span class=\"string\">&quot;technology&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;favCount&quot;</span> : 15,</span><br><span class=\"line\">        <span class=\"string\">&quot;author&quot;</span> : &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;xx006&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;age&quot;</span> : 28</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$unwind:&#123;path:&quot;$tag&quot;, preserveNullAndEmptyArrays: true&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.match(Criteria.where(<span class=\"string\">&quot;author.name&quot;</span>).is(<span class=\"string\">&quot;xx006&quot;</span>)),</span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<h3 id=\"limit-skip-sort\">$limit/$skip/$sort</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>$limit:限制传递到管道中下一阶段的文档数</p>\n</li>\n<li class=\"lvl-2\">\n<p>$skip:跳过传递到管道中下一阶段的文档数</p>\n</li>\n<li class=\"lvl-2\">\n<p>$sort:对传递到管道中下一阶段的文档进行排序</p>\n</li>\n</ul>\n<h4 id=\"示例-3\">示例</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>姓名为xx006的作者的book的tag数组拆分为多个文档，按照收藏数降序排序，跳过2个文档，取5个文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$unwind:&#123;path:&quot;$tag&quot;, preserveNullAndEmptyArrays: true&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$sort:&#123;&quot;favCount&quot;:-1&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$limit : 5 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$skip : 2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.match(Criteria.where(<span class=\"string\">&quot;author.name&quot;</span>).is(<span class=\"string\">&quot;xx006&quot;</span>)),</span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"literal\">true</span>),</span><br><span class=\"line\">        Aggregation.sort(Sort.by(Sort.Direction.DESC, <span class=\"string\">&quot;favCount&quot;</span>)),</span><br><span class=\"line\">        Aggregation.skip(<span class=\"number\">2</span>),</span><br><span class=\"line\">        Aggregation.limit(<span class=\"number\">5</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br><span class=\"line\">``</span><br><span class=\"line\">* 统计每个分类的book文档数量</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:&quot;$type&quot;,total:&#123;$sum:1&#125;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$sort:&#123;total:-1&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.group(<span class=\"string\">&quot;type&quot;</span>).count().as(<span class=\"string\">&quot;total&quot;</span>),</span><br><span class=\"line\">        Aggregation.sort(Sort.by(Sort.Direction.DESC, <span class=\"string\">&quot;total&quot;</span>))</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>标签的热度排行，标签的热度则按其关联book文档的收藏数（favCount）来计算</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;favCount:&#123;$gt:0&#125;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$unwind:&quot;$tag&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:&quot;$tag&quot;,total:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$sort:&#123;total:-1&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.match(Criteria.where(<span class=\"string\">&quot;favCount&quot;</span>).gt(<span class=\"number\">0</span>)),</span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">&quot;tag&quot;</span>),</span><br><span class=\"line\">        Aggregation.group(<span class=\"string\">&quot;tag&quot;</span>).sum(<span class=\"string\">&quot;favCount&quot;</span>).as(<span class=\"string\">&quot;total&quot;</span>),</span><br><span class=\"line\">        Aggregation.sort(Sort.by(Sort.Direction.DESC, <span class=\"string\">&quot;total&quot;</span>))</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<h3 id=\"bucket\">$bucket</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>$bucket:根据指定的条件和边界，将文档分组到不同的桶中</p>\n</li>\n</ul>\n<h4 id=\"示例-4\">示例</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>统计book文档收藏数[0,10),[10,60),[60,80),[80,100),[100,+∞）</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    $bucket:&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        groupBy:&quot;$favCount&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">        boundaries:[0,10,60,80,100],</span></span><br><span class=\"line\"><span class=\"comment\">        default:&quot;other&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">        output:&#123;&quot;count&quot;:&#123;$sum:1&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;])</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">[</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 0, count: 3 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 10, count: 27 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 60, count: 11 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 80, count: 11 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">groupBy: 指定用于分组的字段。在此示例中，根据 favCount 字段的值进行分组。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">boundaries: 定义分桶的边界，即每个桶的范围。文档的值将根据这些边界被分配到不同的桶中。边界应按升序排列。在这个命令中，边界 [0, 10, 60, 80, 100] 表示将文档分成六个桶：小于等于0、大于0小于等于10、大于10小于等于60、大于60小于等于80、大于80小于等于100、大于100。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">default: 这是一个可选参数，用于指定默认桶的名称。如果文档的值不在指定的边界范围内，则会被放入该桶中。在这个命令中，如果 favCount 的值不在指定的边界范围内，将会被放入名为 &quot;other&quot; 的桶中。比如这里设置边界 [10, 60, 80, 100]，即表示从10开始分组，则0~10的数据会被分组到名为 &quot;other&quot; 的桶中。</span></span><br><span class=\"line\"><span class=\"comment\">[</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 10, count: 27 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 60, count: 11 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 80, count: 11 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: &#x27;other&#x27;, count: 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">output: 定义了每个桶的输出内容。这是一个子文档，它指定了在每个桶中计算的聚合操作。在这个示例中，使用 $sum 聚合操作符来计算每个桶中的文档数量，并将结果存储在名为 &quot;count&quot; 的字段中。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.bucket(<span class=\"string\">&quot;$favCount&quot;</span>)</span><br><span class=\"line\">                .withBoundaries(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">60</span>,<span class=\"number\">80</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">                .withDefaultBucket(<span class=\"string\">&quot;other&quot;</span>)</span><br><span class=\"line\">                .andOutput(context -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(<span class=\"string\">&quot;$sum&quot;</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">                .as(<span class=\"string\">&quot;count&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<h3 id=\"lookup\">$lookup</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>$lookup:将文档中的一个字段的值与另一个集合中的文档进行匹配，然后将匹配的文档添加到当前文档中</p>\n</li>\n<li class=\"lvl-2\">\n<p>语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.aggregate([&#123;</span><br><span class=\"line\">    <span class=\"variable\">$lookup</span>: &#123;</span><br><span class=\"line\">            from: <span class=\"string\">&quot;&lt;collection to join&gt;&quot;</span>,</span><br><span class=\"line\">            localField: <span class=\"string\">&quot;&lt;field from the input documents&gt;&quot;</span>,</span><br><span class=\"line\">            foreignField: <span class=\"string\">&quot;&lt;field from the documents of the from collection&gt;&quot;</span>,</span><br><span class=\"line\">            as: <span class=\"string\">&quot;&lt;output array field&gt;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>from</code></td>\n<td>同一个数据库下等待被Join的集合。</td>\n</tr>\n<tr>\n<td><code>localField</code></td>\n<td>源集合中的match值，如果输入的集合中，某文档没有 localField这个Key（Field），在处理的过程中，会默认为此文档含有 localField：null的键值对。</td>\n</tr>\n<tr>\n<td><code>foreignField</code></td>\n<td>待Join的集合的match值，如果待Join的集合中，文档没有foreignField值，在处理的过程中，会默认为此文档含有 foreignField：null的键值对。</td>\n</tr>\n<tr>\n<td><code>as</code></td>\n<td>为输出文档的新增值命名。如果输入的集合中已存在该值，则会覆盖掉。</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>其语法功能类似于下面的伪SQL语句</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span>, <span class=\"operator\">&lt;</span>output <span class=\"keyword\">array</span> field<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> collection</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>output <span class=\"keyword\">array</span> field<span class=\"operator\">&gt;</span> <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\">                               <span class=\"keyword\">FROM</span> <span class=\"operator\">&lt;</span>collection <span class=\"keyword\">to</span> <span class=\"keyword\">join</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\">                               <span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>foreignField<span class=\"operator\">&gt;</span> <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>collection.localField<span class=\"operator\">&gt;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例-5\">示例</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>准备数据</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 顾客信息</span></span><br><span class=\"line\">db.customer.insertOne(&#123;customerCode:1,name:<span class=\"string\">&quot;customer1&quot;</span>,phone:<span class=\"string\">&quot;13112345678&quot;</span>,address:<span class=\"string\">&quot;test1&quot;</span>&#125;)</span><br><span class=\"line\">db.customer.insertOne(&#123;customerCode:2,name:<span class=\"string\">&quot;customer2&quot;</span>,phone:<span class=\"string\">&quot;13112345679&quot;</span>,address:<span class=\"string\">&quot;test2&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 订单信息</span></span><br><span class=\"line\">db.order.insertOne(&#123;orderId:1,orderCode:<span class=\"string\">&quot;order001&quot;</span>,customerCode:1,price:200&#125;)</span><br><span class=\"line\">db.order.insertOne(&#123;orderId:2,orderCode:<span class=\"string\">&quot;order002&quot;</span>,customerCode:2,price:400&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 订单明细</span></span><br><span class=\"line\">db.orderItem.insertOne(&#123;itemId:1,productName:<span class=\"string\">&quot;apples&quot;</span>,qutity:2,orderId:1&#125;)</span><br><span class=\"line\">db.orderItem.insertOne(&#123;itemId:2,productName:<span class=\"string\">&quot;oranges&quot;</span>,qutity:2,orderId:1&#125;)</span><br><span class=\"line\">db.orderItem.insertOne(&#123;itemId:3,productName:<span class=\"string\">&quot;mangoes&quot;</span>,qutity:2,orderId:1&#125;)</span><br><span class=\"line\">db.orderItem.insertOne(&#123;itemId:4,productName:<span class=\"string\">&quot;apples&quot;</span>,qutity:2,orderId:2&#125;)</span><br><span class=\"line\">db.orderItem.insertOne(&#123;itemId:5,productName:<span class=\"string\">&quot;oranges&quot;</span>,qutity:2,orderId:2&#125;)</span><br><span class=\"line\">db.orderItem.insertOne(&#123;itemId:6,productName:<span class=\"string\">&quot;mangoes&quot;</span>,qutity:2,orderId:2&#125;)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查询顾客的订单信息，关联字段为customerCode顾客号码</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.customer.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$lookup: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">       from: &quot;order&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">       localField: &quot;customerCode&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">       foreignField: &quot;customerCode&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">       as: &quot;customerOrder&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.lookup(<span class=\"string\">&quot;order&quot;</span>, <span class=\"string\">&quot;customerCode&quot;</span>, <span class=\"string\">&quot;customerCode&quot;</span>, <span class=\"string\">&quot;customerOrder&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;customer&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>根据订单信息关联顾客信息和订单明细</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.order.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$lookup: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">               from: &quot;customer&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">               localField: &quot;customerCode&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">               foreignField: &quot;customerCode&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">               as: &quot;curstomer&quot;</span></span><br><span class=\"line\"><span class=\"comment\">             &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$lookup: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">               from: &quot;orderItem&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">               localField: &quot;orderId&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">               foreignField: &quot;orderId&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">               as: &quot;orderItem&quot;</span></span><br><span class=\"line\"><span class=\"comment\">             &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.lookup(<span class=\"string\">&quot;customer&quot;</span>, <span class=\"string\">&quot;customerCode&quot;</span>, <span class=\"string\">&quot;customerCode&quot;</span>, <span class=\"string\">&quot;curstomer&quot;</span>),</span><br><span class=\"line\">        Aggregation.lookup(<span class=\"string\">&quot;orderItem&quot;</span>, <span class=\"string\">&quot;orderId&quot;</span>, <span class=\"string\">&quot;orderId&quot;</span>, <span class=\"string\">&quot;orderItem&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;order&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍如何使用SpringBoot实现MongoDB7.0的聚合操作 SpringBoot版本3.2.3，MongoDB版本7.0.6 MongoDB Aggregation Operations SQL to Aggregation Mapping Chart MongoDB7.0--SpringBoot单集合操作 聚合操作简介 聚合操作允许用户处理多个文档并返回计算结果 聚合操作包含三类 单文档聚合：针对单个集合，如：db.collection.countDocument(), db.collection.distinct() 聚合管道：它可以作用在一个或几个集合上，对集合中的数据进行的一系列运算，并将这些数据转化为用户期望的形式，本文主要介绍管道操作 MapReduce：从MongoDB 5.0开始，map-reduce操作已被弃用，本文不做介绍。 聚合管道 聚合管道是MongoDB中非常强大的功能，它允许用户将多个操作组合在一起，以实现复杂的数据处理。 从效果而言，聚合管道相当于 SQL 查询中的 GROUP BY、 LEFT OUTER JOIN 、 AS等。 整个聚合运算过程称为管道（Pipeline），它是由多个阶段（Stage）组成的， 每个管道： 接受一系列文档（原始数据） 每个阶段对这些文档进行一系列运算 结果文档输出给下一个阶段 聚合管道操作语法 pipelines 一组数据聚合阶段。除$out、$Merge和$geonear阶段之外，每个阶段都可以在管道中出现多次。 options 可选，聚合操作的其他参数。包含：查询计划、是否使用临时文件、 游标、最大操作时间、读写策略、强制索引等等 12pipeline = [$stage1, $stage2, ...$stageN];db.collection.aggregate(pipeline, &#123;options&#125;) 常用的聚合阶段运算符 阶段运算符 描述 SQL等价运算符 $match 过滤文档 WHERE $project 投影，改变文档的形状和内容 SELECT filedName AS newName $group 将文档分组 GROUP BY $sort 对文档进行排序 ORDER BY $limit 限制结果集的大小 LIMIT $skip 跳过指定数量的文档 OFFSET $unwind 展开数组 - $lookup 从其他集合中获取相关文档,左外连接 LEFT OUTER JOIN $out 将结果集输出到新的集合 - $geoNear 按照地理位置附近的顺序返回文档 - $graphLookup 执行递归查询 - $addFields 添加新字段 - $bucket 根据指定条件将文档分组成桶 - $facet 允许在单个聚合阶段内执行多个独立的子聚合 - 聚合表达式 获取字段信息 12$&lt;field&gt; ： 用 $ 指示字段路径$&lt;field&gt;.&lt;subfield&gt; ： 使用 $ 和 . 来指示内嵌文档的路径 常量表达式 1$literal :&lt;value&gt; ： 指示常量 &lt;value&gt; 系统变量表达式 12$$&lt;variable&gt; 使用 $$ 指示系统变量$$CURRENT 指示管道中当前操作的文档 聚合管道示例 本示例使用SpringBoot实现MongoDB7.0的聚合操作 初始化数据 1234567891011121314151617181920212223242526272829303132333435363738394041424344/*var tags = [&quot;nosql&quot;,&quot;mongodb&quot;,&quot;document&quot;,&quot;developer&quot;,&quot;popular&quot;];var types = [&quot;technology&quot;,&quot;sociality&quot;,&quot;travel&quot;,&quot;novel&quot;,&quot;literature&quot;];var books=[];for(var i=0;i&lt;50;i++)&#123; var typeIdx = Math.floor(Math.random()*types.length); var tagIdx = Math.floor(Math.random()*tags.length); var tagIdx2 = Math.floor(Math.random()*tags.length); var favCount = Math.floor(Math.random()*100); var username = &quot;xx00&quot;+Math.floor(Math.random()*10); var age = 20 + Math.floor(Math.random()*15); var book = &#123; title: &quot;book-&quot;+i, type: types[typeIdx], tag: [tags[tagIdx],tags[tagIdx2]], favCount: favCount, author: &#123;name:username,age:age&#125; &#125;; books.push(book)&#125;db.books.insertMany(books);*/String[] tags = &#123;&quot;nosql&quot;, &quot;mongodb&quot;, &quot;document&quot;, &quot;developer&quot;, &quot;popular&quot;&#125;;String[] types = &#123;&quot;technology&quot;, &quot;sociality&quot;, &quot;travel&quot;, &quot;novel&quot;, &quot;literature&quot;&#125;;List&lt;Document&gt; books = new ArrayList&lt;&gt;();Random random = new Random();for (int i = 0; i &lt; 50; i++) &#123; int typeIdx = random.nextInt(types.length); int tagIdx = random.nextInt(tags.length); int tagIdx2 = random.nextInt(tags.length); int favCount = random.nextInt(100); String username = &quot;xx00&quot; + random.nextInt(10); int age = 20 + random.nextInt(15); Document book = new Document(&quot;title&quot;, &quot;book-&quot; + i) .append(&quot;type&quot;, types[typeIdx]) .append(&quot;tag&quot;, List.of(tags[tagIdx], tags[tagIdx2])) .append(&quot;favCount&quot;, favCount) .append(&quot;author&quot;, new Document(&quot;name&quot;, username).append(&quot;age&quot;, age)); books.add(book);&#125;mongoTemplate.insert(books, &quot;books&quot;); $project:投影操作 将原始字段投影成指定名称， 如将集合中的 title 投影成 name 12345678910// db.books.aggregate([&#123;$project:&#123;name:&quot;$title&quot;&#125;&#125;])ProjectionOperation projectOperation = Aggregation.project() .andExpression(&quot;title&quot;).as(&quot;name&quot;);Aggregation aggregation = Aggregation.newAggregation(projectOperation);System.out.println(aggregation);List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults();for (Document document : result) &#123; System.out.println(document.toJson());&#125; 剔除不需要的字段 12345678910111213// db.books.aggregate([&#123;$project:&#123;name:&quot;$title&quot;,_id:0,type:1,author.name:1&#125;&#125;])ProjectionOperation projectOperation = Aggregation.project() .andExclude(&quot;_id&quot;) .andInclude(&quot;type&quot;) .andExpression(&quot;author.name&quot;).as(&quot;author.name&quot;) // 这里必须使用as重新命名，否则只会用name做字段名称，这就和后面的title的别名冲突了 .andExpression(&quot;title&quot;).as(&quot;name&quot;);Aggregation aggregation = Aggregation.newAggregation(projectOperation);System.out.println(aggregation);List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults();for (Document document : results) &#123; System.out.println(document.toJson());&#125; $match:过滤操作 过滤出指定条件的文档 12345678// db.books.aggregate([&#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;])MatchOperation matchOperation = Aggregation.match(Criteria.where(&quot;type&quot;).is(&quot;technology&quot;));Aggregation aggregation = Aggregation.newAggregation(matchOperation);System.out.println(aggregation);List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults();for (Document document : results) &#123; System.out.println(document.toJson());&#125; 组合其它管道 12345678910/*db.books.aggregate([ &#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;, &#123;$project:&#123;name:&quot;$title&quot;,_id:0,type:1,author:&#123;name:1&#125;&#125;&#125;])*/MatchOperation matchOperation = Aggregation.match(Criteria.where(&quot;type&quot;).is(&quot;technology&quot;));ProjectionOperation projectOperation = Aggregation.project(&quot;title&quot;).andExclude(&quot;_id&quot;).andInclude(&quot;type&quot;).and(&quot;author.name&quot;).as(&quot;author.name&quot;);Aggregation aggregation = Aggregation.newAggregation(matchOperation, projectOperation);List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); $count:计数操作 1234567891011121314/*db.books.aggregate([ &#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;, &#123;$count: &quot;type_count&quot;&#125;])*/// MatchOperation to filter documents by type: &quot;technology&quot;MatchOperation matchAggregation = Aggregation.match(Criteria.where(&quot;type&quot;).is(&quot;technology&quot;));// CountOperation to count the matched documentsCountOperation countAggregation = Aggregation.count().as(&quot;type_count&quot;);// Combine the match and count operationsAggregation aggregation = Aggregation.newAggregation(matchAggregation, countAggregation);System.out.println(aggregation);List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); $group:分组操作 按指定的表达式对文档进行分组，并将每个不同分组的文档输出到下一个阶段。输出文档包含一个_id字段，该字段按键包含不同的组。 输出文档还可以包含计算字段，该字段保存由$group的_id字段分组的一些accumulator表达式的值。 $group不会输出具体的文档而只是统计信息。 语法 1234&#123; $group: &#123; _id: &lt;expression&gt;, &lt;field1&gt;: &#123; &lt;accumulator1&gt; : &lt;expression1&gt; &#125;, ... &#125; &#125;# _id字段是必填的;但是，可以指定_id值为null来为整个输入文档计算累计值。# 剩余的计算字段是可选的，并使用&lt;accumulator&gt;运算符进行计算。# _id和&lt;accumulator&gt;表达式可以接受任何有效的表达式。 accumulator操作符 名称 描述 类比sql avg 计算均值 avg first 返回每组第一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的第一个文档。 limit 0,1 last 返回每组最后一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的最后个文档。 - max 根据分组，获取集合中所有文档对应值得最大值。 max min 根据分组，获取集合中所有文档对应值得最小值。 min push 将指定的表达式的值添加到一个数组中。 - addToSet 将表达式的值添加到一个集合中（无重复值，无序）。 - sum 计算总和 sum stdDevPop 返回输入值的总体标准偏差（population standard deviation） - stdDevSamp 返回输入值的样本标准偏差（the sample standard deviation） - 示例 book的数量，收藏总数和平均值 123456789101112131415161718/*db.books.aggregate([ &#123;$group:&#123;_id:null,count:&#123;$sum:1&#125;,pop:&#123;$sum:&quot;$favCount&quot;&#125;,avg:&#123;$avg:&quot;$favCount&quot;&#125;&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.group().count().as(&quot;count&quot;).sum(&quot;favCount&quot;).as(&quot;pop&quot;).avg(&quot;favCount&quot;).as(&quot;avg&quot;));AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class);List&lt;Document&gt; mappedResults = results.getMappedResults();// Assuming that there will be only one result due to grouping by null (_id: null)if (!mappedResults.isEmpty()) &#123; System.out.println(mappedResults.get(0).toJson());&#125; else &#123; System.out.println(&quot;&#123;&#125;&quot;);&#125; 统计每个作者的book收藏总数 1234567891011/*db.books.aggregate([ &#123;$group:&#123;_id:&quot;$author.name&quot;,pop:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.group(&quot;author.name&quot;).sum(&quot;favCount&quot;).as(&quot;pop&quot;));AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class);List&lt;Document&gt; mappedResults = results.getMappedResults(); 统计每个作者的每本book的收藏数 1234567891011/*db.books.aggregate([ &#123;$group:&#123;_id:&#123;name:&quot;$author.name&quot;,title:&quot;$title&quot;&#125;,pop:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.group(&quot;author.name&quot;, &quot;title&quot;).sum(&quot;favCount&quot;).as(&quot;pop&quot;));AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class);List&lt;Document&gt; mappedResults = results.getMappedResults(); 每个作者的book的type合集 123456789/*db.books.aggregate([ &#123;$group:&#123;_id:&quot;$author.name&quot;,types:&#123;$addToSet:&quot;$type&quot;&#125;&#125;&#125;])*/GroupOperation groupOperation = Aggregation.group(&quot;author.name&quot;).addToSet(&quot;type&quot;).as(&quot;types&quot;);Aggregation aggregation = Aggregation.newAggregation(groupOperation);AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class);List&lt;Document&gt; mappedResults = results.getMappedResults(); $unwind 可以将数组拆分为单独的文档 语法 1234567891011&#123; $unwind: &#123; #要指定字段路径，在字段名称前加上$符并用引号括起来。 path: &lt;field path&gt;, #可选,一个新字段的名称用于存放元素的数组索引。该名称不能以$开头。 includeArrayIndex: &lt;string&gt;, #可选，default :false，若为true,如果路径为空，缺少或为空数组，则$unwind输出文档 preserveNullAndEmptyArrays: &lt;boolean&gt; &#125;&#125; 示例 姓名为xx006的作者的book的tag数组拆分为多个文档 1234567891011/*db.books.aggregate([ &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;, &#123;$unwind:&quot;$tag&quot;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.match(Criteria.where(&quot;author.name&quot;).is(&quot;xx006&quot;)), Aggregation.unwind(&quot;tag&quot;));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); 使用includeArrayIndex选项来输出数组元素的数组索引 1234567891011/*db.books.aggregate([ &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;, &#123;$unwind:&#123;path:&quot;$tag&quot;, includeArrayIndex: &quot;arrayIndex&quot;&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.match(Criteria.where(&quot;author.name&quot;).is(&quot;xx006&quot;)), Aggregation.unwind(&quot;tag&quot;, &quot;arrayIndex&quot;));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); 每个作者的book的tag合集 1234567891011/*db.books.aggregate([ &#123;$unwind:&quot;$tag&quot;&#125;, &#123;$group:&#123;_id:&quot;$author.name&quot;,types:&#123;$addToSet:&quot;$tag&quot;&#125;&#125;&#125;])*/UnwindOperation unwindOperation = Aggregation.unwind(&quot;tag&quot;);GroupOperation groupOperation = Aggregation.group(&quot;author.name&quot;).addToSet(&quot;tag&quot;).as(&quot;types&quot;);Aggregation aggregation = Aggregation.newAggregation(unwindOperation, groupOperation);AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class);List&lt;Document&gt; mappedResults = results.getMappedResults(); 使用preserveNullAndEmptyArrays选项在输出中包含缺少tag字段，null或空数组的文档 12345678910111213141516171819202122# 初始化数据，加入一些tag为空数组或不存在tag的文档db.books.insertMany([ &#123; &quot;title&quot; : &quot;book-51&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;favCount&quot; : 11, &quot;tag&quot;:[], &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx006&quot;, &quot;age&quot; : 28 &#125; &#125;, &#123; &quot;title&quot; : &quot;book-52&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;favCount&quot; : 15, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx006&quot;, &quot;age&quot; : 28 &#125; &#125;]) 1234567891011/*db.books.aggregate([ &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;, &#123;$unwind:&#123;path:&quot;$tag&quot;, preserveNullAndEmptyArrays: true&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.match(Criteria.where(&quot;author.name&quot;).is(&quot;xx006&quot;)), Aggregation.unwind(&quot;tag&quot;, true));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); $limit/$skip/$sort $limit:限制传递到管道中下一阶段的文档数 $skip:跳过传递到管道中下一阶段的文档数 $sort:对传递到管道中下一阶段的文档进行排序 示例 姓名为xx006的作者的book的tag数组拆分为多个文档，按照收藏数降序排序，跳过2个文档，取5个文档 12345678910111213141516171819202122232425262728293031/*db.books.aggregate([ &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;, &#123;$unwind:&#123;path:&quot;$tag&quot;, preserveNullAndEmptyArrays: true&#125;&#125;, &#123;$sort:&#123;&quot;favCount&quot;:-1&#125;&#125;, &#123;$limit : 5 &#125;, &#123;$skip : 2&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.match(Criteria.where(&quot;author.name&quot;).is(&quot;xx006&quot;)), Aggregation.unwind(&quot;tag&quot;, true), Aggregation.sort(Sort.by(Sort.Direction.DESC, &quot;favCount&quot;)), Aggregation.skip(2), Aggregation.limit(5));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults();``* 统计每个分类的book文档数量```java/*db.books.aggregate([ &#123;$group:&#123;_id:&quot;$type&quot;,total:&#123;$sum:1&#125;&#125;&#125;, &#123;$sort:&#123;total:-1&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.group(&quot;type&quot;).count().as(&quot;total&quot;), Aggregation.sort(Sort.by(Sort.Direction.DESC, &quot;total&quot;)));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); 标签的热度排行，标签的热度则按其关联book文档的收藏数（favCount）来计算 123456789101112131415/*db.books.aggregate([ &#123;$match:&#123;favCount:&#123;$gt:0&#125;&#125;&#125;, &#123;$unwind:&quot;$tag&quot;&#125;, &#123;$group:&#123;_id:&quot;$tag&quot;,total:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;, &#123;$sort:&#123;total:-1&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.match(Criteria.where(&quot;favCount&quot;).gt(0)), Aggregation.unwind(&quot;tag&quot;), Aggregation.group(&quot;tag&quot;).sum(&quot;favCount&quot;).as(&quot;total&quot;), Aggregation.sort(Sort.by(Sort.Direction.DESC, &quot;total&quot;)));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); $bucket $bucket:根据指定的条件和边界，将文档分组到不同的桶中 示例 统计book文档收藏数[0,10),[10,60),[60,80),[80,100),[100,+∞） 123456789101112131415161718192021222324252627282930313233343536373839/*db.books.aggregate([&#123; $bucket:&#123; groupBy:&quot;$favCount&quot;, boundaries:[0,10,60,80,100], default:&quot;other&quot;, output:&#123;&quot;count&quot;:&#123;$sum:1&#125;&#125; &#125;&#125;])[ &#123; _id: 0, count: 3 &#125;, &#123; _id: 10, count: 27 &#125;, &#123; _id: 60, count: 11 &#125;, &#123; _id: 80, count: 11 &#125;]groupBy: 指定用于分组的字段。在此示例中，根据 favCount 字段的值进行分组。boundaries: 定义分桶的边界，即每个桶的范围。文档的值将根据这些边界被分配到不同的桶中。边界应按升序排列。在这个命令中，边界 [0, 10, 60, 80, 100] 表示将文档分成六个桶：小于等于0、大于0小于等于10、大于10小于等于60、大于60小于等于80、大于80小于等于100、大于100。default: 这是一个可选参数，用于指定默认桶的名称。如果文档的值不在指定的边界范围内，则会被放入该桶中。在这个命令中，如果 favCount 的值不在指定的边界范围内，将会被放入名为 &quot;other&quot; 的桶中。比如这里设置边界 [10, 60, 80, 100]，即表示从10开始分组，则0~10的数据会被分组到名为 &quot;other&quot; 的桶中。[ &#123; _id: 10, count: 27 &#125;, &#123; _id: 60, count: 11 &#125;, &#123; _id: 80, count: 11 &#125;, &#123; _id: &#x27;other&#x27;, count: 3 &#125;]output: 定义了每个桶的输出内容。这是一个子文档，它指定了在每个桶中计算的聚合操作。在这个示例中，使用 $sum 聚合操作符来计算每个桶中的文档数量，并将结果存储在名为 &quot;count&quot; 的字段中。*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.bucket(&quot;$favCount&quot;) .withBoundaries(0,10,60,80,100) .withDefaultBucket(&quot;other&quot;) .andOutput(context -&gt; new Document(&quot;$sum&quot;, 1)) .as(&quot;count&quot;));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); $lookup $lookup:将文档中的一个字段的值与另一个集合中的文档进行匹配，然后将匹配的文档添加到当前文档中 语法 12345678db.collection.aggregate([&#123; $lookup: &#123; from: &quot;&lt;collection to join&gt;&quot;, localField: &quot;&lt;field from the input documents&gt;&quot;, foreignField: &quot;&lt;field from the documents of the from collection&gt;&quot;, as: &quot;&lt;output array field&gt;&quot; &#125;&#125;) 名称 描述 from 同一个数据库下等待被Join的集合。 localField 源集合中的match值，如果输入的集合中，某文档没有 localField这个Key（Field），在处理的过程中，会默认为此文档含有 localField：null的键值对。 foreignField 待Join的集合的match值，如果待Join的集合中，文档没有foreignField值，在处理的过程中，会默认为此文档含有 foreignField：null的键值对。 as 为输出文档的新增值命名。如果输入的集合中已存在该值，则会覆盖掉。 其语法功能类似于下面的伪SQL语句 12345SELECT *, &lt;output array field&gt;FROM collectionWHERE &lt;output array field&gt; IN (SELECT * FROM &lt;collection to join&gt; WHERE &lt;foreignField&gt; = &lt;collection.localField&gt;); 示例 准备数据 123456789101112131415# 顾客信息db.customer.insertOne(&#123;customerCode:1,name:&quot;customer1&quot;,phone:&quot;13112345678&quot;,address:&quot;test1&quot;&#125;)db.customer.insertOne(&#123;customerCode:2,name:&quot;customer2&quot;,phone:&quot;13112345679&quot;,address:&quot;test2&quot;&#125;)# 订单信息db.order.insertOne(&#123;orderId:1,orderCode:&quot;order001&quot;,customerCode:1,price:200&#125;)db.order.insertOne(&#123;orderId:2,orderCode:&quot;order002&quot;,customerCode:2,price:400&#125;)# 订单明细db.orderItem.insertOne(&#123;itemId:1,productName:&quot;apples&quot;,qutity:2,orderId:1&#125;)db.orderItem.insertOne(&#123;itemId:2,productName:&quot;oranges&quot;,qutity:2,orderId:1&#125;)db.orderItem.insertOne(&#123;itemId:3,productName:&quot;mangoes&quot;,qutity:2,orderId:1&#125;)db.orderItem.insertOne(&#123;itemId:4,productName:&quot;apples&quot;,qutity:2,orderId:2&#125;)db.orderItem.insertOne(&#123;itemId:5,productName:&quot;oranges&quot;,qutity:2,orderId:2&#125;)db.orderItem.insertOne(&#123;itemId:6,productName:&quot;mangoes&quot;,qutity:2,orderId:2&#125;) 查询顾客的订单信息，关联字段为customerCode顾客号码 123456789101112131415/*db.customer.aggregate([ &#123;$lookup: &#123; from: &quot;order&quot;, localField: &quot;customerCode&quot;, foreignField: &quot;customerCode&quot;, as: &quot;customerOrder&quot; &#125; &#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.lookup(&quot;order&quot;, &quot;customerCode&quot;, &quot;customerCode&quot;, &quot;customerOrder&quot;));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;customer&quot;, Document.class).getMappedResults(); 根据订单信息关联顾客信息和订单明细 123456789101112131415161718192021222324/*db.order.aggregate([ &#123;$lookup: &#123; from: &quot;customer&quot;, localField: &quot;customerCode&quot;, foreignField: &quot;customerCode&quot;, as: &quot;curstomer&quot; &#125; &#125;, &#123;$lookup: &#123; from: &quot;orderItem&quot;, localField: &quot;orderId&quot;, foreignField: &quot;orderId&quot;, as: &quot;orderItem&quot; &#125; &#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.lookup(&quot;customer&quot;, &quot;customerCode&quot;, &quot;customerCode&quot;, &quot;curstomer&quot;), Aggregation.lookup(&quot;orderItem&quot;, &quot;orderId&quot;, &quot;orderId&quot;, &quot;orderItem&quot;));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;order&quot;, Document.class).getMappedResults();","summary":"摘要 本文介绍如何使用SpringBoot实现MongoDB7.0的聚合操作 SpringBoot版本3.2.3，MongoDB版本7.0.6 MongoDB Aggregation Operations SQL to Aggregation Mapping Chart MongoDB7.0--SpringBoot单集合操作","date_published":"2024-03-07T13:30:05.000Z","tags":["技术","linux","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/03/05/mongodb7-springboot/","url":"https://blog.hanqunfeng.com/2024/03/05/mongodb7-springboot/","title":"MongoDB7.0--SpringBoot单集合操作","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍如何使用SpringBoot实现MongoDB7.0的单集合的CURD操作</p>\n</li>\n<li class=\"lvl-2\">\n<p>SpringBoot版本3.2.3，MongoDB版本7.0.6</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/v7.0/crud/\">MongoDB CRUD Operations</a></p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/v7.0/reference/sql-comparison/\">SQL to MongoDB Mapping Chart</a></p>\n</li>\n<li class=\"lvl-2\">\n<a href=\"/2024/03/07/mongodb7-springboot-aggregate/\" title=\"MongoDB7.0--SpringBoot聚合操作\">MongoDB7.0--SpringBoot聚合操作</a>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"spring-boot-与-MongoDB-的版本对应关系\">spring-boot 与 MongoDB 的版本对应关系</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>spring-data-mongodb</code>与<code>MongoDB</code>版本对应关系可以参看<a href=\"https://docs.spring.io/spring-data/mongodb/reference/preface.html\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p><code>spring-boot-starter-data-mongodb</code> 与 <code>spring-data-mongodb</code> 版本对应关系</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>spring-boot-starter-data-mongodb 版本</th>\n<th>spring-data-mongodb 版本</th>\n<th>MongoDB Server 版本</th>\n<th>Java Driver Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3.2.x</td>\n<td>4.2.x</td>\n<td>6.0.x,7.0.x</td>\n<td>4.11.x</td>\n</tr>\n<tr>\n<td>3.1.x</td>\n<td>4.1.x</td>\n<td>6.0.x,7.0.x</td>\n<td>4.9.x</td>\n</tr>\n<tr>\n<td>3.0.x</td>\n<td>4.0.x</td>\n<td>6.0.x</td>\n<td>4.7.x</td>\n</tr>\n<tr>\n<td>2.7.x</td>\n<td>3.4.x</td>\n<td>5.0.x</td>\n<td>4.6.x</td>\n</tr>\n<tr>\n<td>2.6.x</td>\n<td>3.3.x</td>\n<td>5.0.x</td>\n<td>4.4.x</td>\n</tr>\n<tr>\n<td>2.5.x</td>\n<td>3.2.x</td>\n<td>4.4.x</td>\n<td>4.1.x</td>\n</tr>\n<tr>\n<td>2.4.x</td>\n<td>3.1.x</td>\n<td>4.4.x</td>\n<td>4.1.x</td>\n</tr>\n<tr>\n<td>2.3.x</td>\n<td>3.0.x</td>\n<td>4.4.x</td>\n<td>4.0.x</td>\n</tr>\n<tr>\n<td>2.2.x</td>\n<td>2.2.x</td>\n<td>4.2.x</td>\n<td>3.11.x</td>\n</tr>\n<tr>\n<td>2.1.x</td>\n<td>2.1.x</td>\n<td>4.0.x</td>\n<td>3.8.x</td>\n</tr>\n<tr>\n<td>2.0.x</td>\n<td>2.0.x</td>\n<td>3.4.x</td>\n<td>3.5.x</td>\n</tr>\n<tr>\n<td>1.10.x</td>\n<td>1.10.x</td>\n<td>2.4.x</td>\n<td>2.10.x,2.11.x</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Mongo的Java驱动，在<code>3.7.x</code>及以后的版本叫做<a href=\"https://mvnrepository.com/artifact/org.mongodb/mongodb-driver-sync\">mongodb-driver-sync</a>，以前的版本叫做<a href=\"https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver\">mongo-java-driver</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB 与 Java Driver 兼容性<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/FZeH9j.png\" alt=\"\" width=\"800\" height=\"800\"></p>\n</li>\n</ul>\n<h2 id=\"SpringBoot整合MongoDB\">SpringBoot整合MongoDB</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>引入依赖</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>配置yml</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">mongodb:</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">mongodb://root:password@127.0.0.1:27017/mytest?authSource=admin</span></span><br><span class=\"line\">      <span class=\"comment\">#uri等同于下面的配置</span></span><br><span class=\"line\">      <span class=\"comment\"># database: mytest # 数据库名</span></span><br><span class=\"line\">      <span class=\"comment\"># host: 127.0.0.1</span></span><br><span class=\"line\">      <span class=\"comment\"># port: 27017</span></span><br><span class=\"line\">      <span class=\"comment\"># username: root</span></span><br><span class=\"line\">      <span class=\"comment\"># password: password</span></span><br><span class=\"line\">      <span class=\"comment\">#a uthentication-database: admin</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 复制集</span></span><br><span class=\"line\">      <span class=\"comment\"># uri: mongodb://user:password@127.0.0.1:27040,127.0.0.1:27041,127.0.0.1:27042/mytest?authSource=admin&amp;readPreference=primaryPreferred</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>配置类:去掉<code>_class</code>属性</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MongoConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定制TypeMapper去掉_class属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    MappingMongoConverter <span class=\"title function_\">mappingMongoConverter</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            MongoDatabaseFactory mongoDatabaseFactory,</span></span><br><span class=\"line\"><span class=\"params\">            MongoMappingContext context, MongoCustomConversions conversions)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">DbRefResolver</span> <span class=\"variable\">dbRefResolver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultDbRefResolver</span>(mongoDatabaseFactory);</span><br><span class=\"line\">        <span class=\"type\">MappingMongoConverter</span> <span class=\"variable\">mappingMongoConverter</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">MappingMongoConverter</span>(dbRefResolver, context);</span><br><span class=\"line\">        mappingMongoConverter.setCustomConversions(conversions);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//构造DefaultMongoTypeMapper，将typeKey设置为空值</span></span><br><span class=\"line\">        mappingMongoConverter.setTypeMapper(<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultMongoTypeMapper</span>(<span class=\"literal\">null</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mappingMongoConverter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询\">查询</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Mongo语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询集合中的若干文档</span></span><br><span class=\"line\">db.collection.find(query, projection)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询集合中的第一个文档</span></span><br><span class=\"line\">db.collection.findOne(query, projection)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果你需要以易读的方式来读取数据，可以使用pretty()方法</span></span><br><span class=\"line\">db.collection.find().pretty()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 排序，1 为升序排列，而 -1 是用于降序排列</span></span><br><span class=\"line\">db.collection.find(query, projection).<span class=\"built_in\">sort</span>(&#123;field:-1&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分页</span></span><br><span class=\"line\"><span class=\"comment\"># .skip(16) 表示跳过前面 16 条记录，即前两页的所有记录.</span></span><br><span class=\"line\"><span class=\"comment\"># .limit(8) 表示返回 8 条记录，即第三页的所有记录。</span></span><br><span class=\"line\">db.collection.find().skip(16).<span class=\"built_in\">limit</span>(8)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询记录数</span></span><br><span class=\"line\">db.collection.countDocuments()</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>query ：可选，使用查询操作符指定查询条件</p>\n</li>\n<li class=\"lvl-4\">\n<p>projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。投影时，_id为1的时候，其他字段必须是1；_id是0的时候，其他字段可以是0；如果没有_id字段约束，多个其他字段必须同为0或同为1。</p>\n</li>\n</ul>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查询操作符</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>解释</th>\n<th>示例</th>\n<th>示例解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$lt</code></td>\n<td>小于</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;)</code></td>\n<td>查询年龄小于 25 的文档</td>\n</tr>\n<tr>\n<td><code>$lte</code></td>\n<td>小于等于</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;)</code></td>\n<td>查询年龄小于等于 25 的文档</td>\n</tr>\n<tr>\n<td><code>$gt</code></td>\n<td>大于</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;)</code></td>\n<td>查询年龄大于 25 的文档</td>\n</tr>\n<tr>\n<td><code>$gte</code></td>\n<td>大于等于</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;)</code></td>\n<td>查询年龄大于等于 25 的文档</td>\n</tr>\n<tr>\n<td><code>$ne</code></td>\n<td>不等于</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;)</code></td>\n<td>查询年龄不等于 25 的文档</td>\n</tr>\n<tr>\n<td><code>$in</code></td>\n<td>在指定数组中</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;)</code></td>\n<td>查询年龄存在并且在指定数组中的文档</td>\n</tr>\n<tr>\n<td><code>$nin</code></td>\n<td>不在指定数组中</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;)</code></td>\n<td>查询年龄不存在或者不在指定数组中的文档</td>\n</tr>\n<tr>\n<td><code>$or</code></td>\n<td>匹配两个或多个条件中的一个</td>\n<td><code>db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</code></td>\n<td>查询年龄为 20 或者薪资大于 8000 的文档</td>\n</tr>\n<tr>\n<td><code>$and</code></td>\n<td>匹配全部条件</td>\n<td><code>db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</code></td>\n<td>查询年龄为 20 并且薪资大于 8000 的文档</td>\n</tr>\n<tr>\n<td><code>$all</code></td>\n<td>匹配数组中所有元素满足指定条件</td>\n<td><code>db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;, &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125; ] &#125; &#125;)</code></td>\n<td>查询包含 tagKey 为 “color”，tagValue 为 “red” 的标签，并且包含 tagKey 为 “size”，tagValue 为 “XL” 的标签的文档</td>\n</tr>\n<tr>\n<td><code>$elemMatch</code></td>\n<td>匹配数组中至少一个元素满足指定条件</td>\n<td><code>db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;blue&quot; &#125; &#125; &#125;)</code></td>\n<td>查询包含 tagKey 为 “color”，tagValue 包含 “blue” 的标签的文档</td>\n</tr>\n<tr>\n<td><code>$text</code></td>\n<td>全文搜索</td>\n<td><code>db.collection.find(&#123; &quot;$text&quot;: &#123; &quot;$search&quot;: &quot;searchTerm&quot; &#125; &#125;)</code></td>\n<td>进行全文搜索，查找包含 “searchTerm” 的文档</td>\n</tr>\n<tr>\n<td><code>$type</code></td>\n<td>指定字段类型</td>\n<td><code>db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$type&quot;: &quot;string&quot; &#125; &#125;)</code></td>\n<td>查询指定字段类型为字符串的文档</td>\n</tr>\n<tr>\n<td><code>$size</code></td>\n<td>数组长度</td>\n<td><code>db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$size&quot;: sizeValue &#125; &#125;)</code></td>\n<td>查询指定字段数组长度为 sizeValue 的文档</td>\n</tr>\n<tr>\n<td><code>$exists</code></td>\n<td>字段存在</td>\n<td><code>db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$exists&quot;: true &#125; &#125;)</code></td>\n<td>查询指定字段存在的文档</td>\n</tr>\n<tr>\n<td><code>$mod</code></td>\n<td>取模</td>\n<td><code>db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$mod&quot;: [divisor, remainder] &#125; &#125;)</code></td>\n<td>查询指定字段取模后符合给定除数和余数的文档</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"SpringBoot代码示例\">SpringBoot代码示例</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>操作<code>org.bson.Document</code>对象，无需创建实体映射对象，但操作时需要指定集合名称</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.bson.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.BasicQuery;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasicTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MongoTemplate mongoTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    // 初始化数据</span></span><br><span class=\"line\"><span class=\"comment\">    db.collection.insertMany([</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;name&quot;: &quot;item1&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;age&quot;: 20,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;salary&quot;: 5000,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;colors&quot;: [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;sizes&quot;: [&quot;S&quot;, &quot;M&quot;, &quot;L&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;tags&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;M&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            ]</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;name&quot;: &quot;item2&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;age&quot;: 30,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;salary&quot;: 8000,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;colors&quot;: [&quot;green&quot;, &quot;yellow&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;sizes&quot;: [&quot;M&quot;, &quot;L&quot;, &quot;XL&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;tags&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;blue&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;formal&quot; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            ]</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;name&quot;: &quot;item3&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;age&quot;: 25,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;salary&quot;: 10000,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;colors&quot;: [&quot;red&quot;, &quot;green&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;sizes&quot;: [&quot;L&quot;, &quot;XL&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;tags&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;green&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;L&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            ]</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    ]);</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">initializeData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        List&lt;Document&gt; documents = Arrays.asList(</span><br><span class=\"line\">                <span class=\"comment\">// 文档1</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;item1&quot;</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;salary&quot;</span>, <span class=\"number\">5000</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;colors&quot;</span>, Arrays.asList(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;green&quot;</span>))</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;sizes&quot;</span>, Arrays.asList(<span class=\"string\">&quot;S&quot;</span>, <span class=\"string\">&quot;M&quot;</span>, <span class=\"string\">&quot;L&quot;</span>))</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;tags&quot;</span>, Arrays.asList(</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;color&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;red&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;size&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;M&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;style&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;casual&quot;</span>)</span><br><span class=\"line\">                        )),</span><br><span class=\"line\">                <span class=\"comment\">// 文档2</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;item2&quot;</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;salary&quot;</span>, <span class=\"number\">8000</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;colors&quot;</span>, Arrays.asList(<span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>))</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;sizes&quot;</span>, Arrays.asList(<span class=\"string\">&quot;M&quot;</span>, <span class=\"string\">&quot;L&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>))</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;tags&quot;</span>, Arrays.asList(</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;color&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;size&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;style&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;formal&quot;</span>)</span><br><span class=\"line\">                        )),</span><br><span class=\"line\">                <span class=\"comment\">// 文档3</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;item3&quot;</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;salary&quot;</span>, <span class=\"number\">10000</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;colors&quot;</span>, Arrays.asList(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>))</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;sizes&quot;</span>, Arrays.asList(<span class=\"string\">&quot;L&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>))</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;tags&quot;</span>, Arrays.asList(</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;color&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;green&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;size&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;L&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;style&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;casual&quot;</span>)</span><br><span class=\"line\">                        ))</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"comment\">// 这里要指定集合名称</span></span><br><span class=\"line\">        mongoTemplate.insert(documents, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 也可以通过json来构建Document对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">initializeData2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; jsonList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        jsonList.add(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;name&quot;: &quot;item1&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;age&quot;: 20,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;salary&quot;: 5000,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;colors&quot;: [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;],</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;sizes&quot;: [&quot;S&quot;, &quot;M&quot;, &quot;L&quot;],</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;tags&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;M&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125;</span></span><br><span class=\"line\"><span class=\"string\">                    ]</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>);</span><br><span class=\"line\">        jsonList.add(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;name&quot;: &quot;item2&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;age&quot;: 30,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;salary&quot;: 8000,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;colors&quot;: [&quot;green&quot;, &quot;yellow&quot;],</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;sizes&quot;: [&quot;M&quot;, &quot;L&quot;, &quot;XL&quot;],</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;tags&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;blue&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;formal&quot; &#125;</span></span><br><span class=\"line\"><span class=\"string\">                    ]</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>);</span><br><span class=\"line\">        jsonList.add(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;name&quot;: &quot;item3&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;age&quot;: 25,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;salary&quot;: 10000,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;colors&quot;: [&quot;red&quot;, &quot;green&quot;],</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;sizes&quot;: [&quot;L&quot;, &quot;XL&quot;],</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;tags&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;green&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;L&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125;</span></span><br><span class=\"line\"><span class=\"string\">                    ]</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Document&gt; documents = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String json : jsonList) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 通过Document.parse()方法将json字符串转换为Document对象</span></span><br><span class=\"line\">            documents.add(Document.parse(json));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mongoTemplate.insert(documents, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testQueries</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">QueryExecutor</span> <span class=\"variable\">queryExecutor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QueryExecutor</span>(mongoTemplate);</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeLessThan25&quot;</span>, queryExecutor.findAgeLessThan25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeLessThanOrEqualTo25&quot;</span>, queryExecutor.findAgeLessThanOrEqualTo25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeGreaterThan25&quot;</span>, queryExecutor.findAgeGreaterThan25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeGreaterThanOrEqualTo25&quot;</span>, queryExecutor.findAgeGreaterThanOrEqualTo25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeNotEqualTo25&quot;</span>, queryExecutor.findAgeNotEqualTo25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeInArray&quot;</span>, queryExecutor.findAgeInArray(List.of(<span class=\"number\">20</span>, <span class=\"number\">25</span>)));</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeNotInArray&quot;</span>, queryExecutor.findAgeNotInArray(List.of(<span class=\"number\">20</span>, <span class=\"number\">25</span>)));</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeOrSalary&quot;</span>, queryExecutor.findAgeOrSalary());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeAndSalary&quot;</span>, queryExecutor.findAgeAndSalary());</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findTagsWithColorAndSize&quot;</span>, queryExecutor.findTagsWithColorAndSize());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findTagsWithColorContainingBlue&quot;</span>, queryExecutor.findTagsWithColorContainingBlue());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findTagsWithColor&quot;</span>, queryExecutor.findTagsWithColor());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findDocumentWithTagsSizeThree&quot;</span>, queryExecutor.findDocumentWithTagsSizeThree());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findDocumentWithSpecificTag&quot;</span>, queryExecutor.findDocumentWithSpecificTag());</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAllElementsWithSpecificTag&quot;</span>, queryExecutor.findAllElementsWithSpecificTag());</span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAllElementsWithSpecificTagByJson&quot;</span>, queryExecutor.findAllElementsWithSpecificTagByJson());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printResult</span><span class=\"params\">(String queryName, List&lt;Document&gt; result)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Query: &quot;</span> + queryName + <span class=\"string\">&quot; ###################################################&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Document document : result) &#123;</span><br><span class=\"line\">            System.out.println(document);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QueryExecutor</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MongoTemplate mongoTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">QueryExecutor</span><span class=\"params\">(MongoTemplate mongoTemplate)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mongoTemplate = mongoTemplate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄小于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeLessThan25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).lt(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄小于等于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeLessThanOrEqualTo25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).lte(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄大于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeGreaterThan25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).gt(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄大于等于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeGreaterThanOrEqualTo25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).gte(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄不等于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeNotEqualTo25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).ne(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄存在并且在指定数组中的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeInArray</span><span class=\"params\">(List&lt;Integer&gt; ages)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).in(ages));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄不存在或者不在指定数组中的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeNotInArray</span><span class=\"params\">(List&lt;Integer&gt; ages)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).nin(ages));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄存在并且为 20，或者薪资大于 8000 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeOrSalary</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().orOperator(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).is(<span class=\"number\">20</span>), Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gt(<span class=\"number\">8000</span>)));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄为 20，并且薪资大于 8000 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeAndSalary</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().andOperator(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).is(<span class=\"number\">20</span>), Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gt(<span class=\"number\">8000</span>)));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签，并且包含 tagKey 为 &quot;size&quot;，tagValue 为 &quot;XL&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findTagsWithColorAndSize</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Criteria</span> <span class=\"variable\">criteria</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().andOperator(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).is(<span class=\"string\">&quot;red&quot;</span>)), Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;size&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).is(<span class=\"string\">&quot;XL&quot;</span>)));</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(criteria);</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;blue&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findTagsWithColorContainingBlue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).regex(<span class=\"string\">&quot;blue&quot;</span>)));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findTagsWithColor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags.tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询 tags 数组长度为 3 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findDocumentWithTagsSizeThree</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).size(<span class=\"number\">3</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findDocumentWithSpecificTag</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).is(<span class=\"string\">&quot;red&quot;</span>)));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAllElementsWithSpecificTag</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).regex(<span class=\"string\">&quot;green&quot;</span>)));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用 BasicQuery，可以使用 json 字符串，这样就可以直接使用 mongo 的查询语法</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAllElementsWithSpecificTagByJson</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    &#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                                &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125;</span></span><br><span class=\"line\"><span class=\"string\">                            ]&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BasicQuery</span>(json);</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>操作实体类</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>相关注解</th>\n<th>修饰范围</th>\n<th>作用</th>\n<th>属性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Document</td>\n<td>类</td>\n<td>映射类对象为Mongo文档</td>\n<td>value, collection</td>\n</tr>\n<tr>\n<td>@Id</td>\n<td>成员变量、方法</td>\n<td>将成员变量值映射为文档的_id的值</td>\n<td></td>\n</tr>\n<tr>\n<td>@Field</td>\n<td>成员变量、方法</td>\n<td>将成员变量及值映射为文档中key:value对</td>\n<td>name, value</td>\n</tr>\n<tr>\n<td>@Transient</td>\n<td>成员变量、方法</td>\n<td>指定成员变量不参与文档的序列化</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>使用 @Document 注解指定集合名</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.mongo.model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.annotation.Id;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.mapping.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Document(collection = &quot;collection&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Item</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; colors;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; sizes;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Tag&gt; tags;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Item</span><span class=\"params\">(String name, <span class=\"type\">int</span> age, <span class=\"type\">double</span> salary, List&lt;String&gt; colors, List&lt;String&gt; sizes, List&lt;Tag&gt; tags)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.salary = salary;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.colors = colors;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sizes = sizes;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tags = tags;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\">    <span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tag</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String tagKey;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String tagValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>查询示例</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.mongo.model.Item;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.BasicQuery;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasicTests2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MongoTemplate mongoTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">initializeData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Initialize data</span></span><br><span class=\"line\">        List&lt;Item&gt; items = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"string\">&quot;item1&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">5000</span>,</span><br><span class=\"line\">                        Arrays.asList(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;green&quot;</span>),</span><br><span class=\"line\">                        Arrays.asList(<span class=\"string\">&quot;S&quot;</span>, <span class=\"string\">&quot;M&quot;</span>, <span class=\"string\">&quot;L&quot;</span>),</span><br><span class=\"line\">                        Arrays.asList(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;color&quot;</span>, <span class=\"string\">&quot;red&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;size&quot;</span>, <span class=\"string\">&quot;M&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;style&quot;</span>, <span class=\"string\">&quot;casual&quot;</span>))),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"string\">&quot;item2&quot;</span>, <span class=\"number\">30</span>, <span class=\"number\">8000</span>,</span><br><span class=\"line\">                        Arrays.asList(<span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>),</span><br><span class=\"line\">                        Arrays.asList(<span class=\"string\">&quot;M&quot;</span>, <span class=\"string\">&quot;L&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>),</span><br><span class=\"line\">                        Arrays.asList(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;color&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;size&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;style&quot;</span>, <span class=\"string\">&quot;formal&quot;</span>))),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"string\">&quot;item3&quot;</span>, <span class=\"number\">25</span>, <span class=\"number\">10000</span>,</span><br><span class=\"line\">                        Arrays.asList(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>),</span><br><span class=\"line\">                        Arrays.asList(<span class=\"string\">&quot;L&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>),</span><br><span class=\"line\">                        Arrays.asList(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;color&quot;</span>, <span class=\"string\">&quot;green&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;size&quot;</span>, <span class=\"string\">&quot;L&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;style&quot;</span>, <span class=\"string\">&quot;casual&quot;</span>)))</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        mongoTemplate.insertAll(items);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testQueries</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        BasicTests2.<span class=\"type\">QueryExecutor</span> <span class=\"variable\">queryExecutor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BasicTests2</span>.QueryExecutor(mongoTemplate);</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeLessThan25&quot;</span>, queryExecutor.findAgeLessThan25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeLessThanOrEqualTo25&quot;</span>, queryExecutor.findAgeLessThanOrEqualTo25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeGreaterThan25&quot;</span>, queryExecutor.findAgeGreaterThan25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeGreaterThanOrEqualTo25&quot;</span>, queryExecutor.findAgeGreaterThanOrEqualTo25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeNotEqualTo25&quot;</span>, queryExecutor.findAgeNotEqualTo25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeInArray&quot;</span>, queryExecutor.findAgeInArray(List.of(<span class=\"number\">20</span>, <span class=\"number\">25</span>)));</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeNotInArray&quot;</span>, queryExecutor.findAgeNotInArray(List.of(<span class=\"number\">20</span>, <span class=\"number\">25</span>)));</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeOrSalary&quot;</span>, queryExecutor.findAgeOrSalary());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeAndSalary&quot;</span>, queryExecutor.findAgeAndSalary());</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findTagsWithColorAndSize&quot;</span>, queryExecutor.findTagsWithColorAndSize());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findTagsWithColorContainingBlue&quot;</span>, queryExecutor.findTagsWithColorContainingBlue());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findTagsWithColor&quot;</span>, queryExecutor.findTagsWithColor());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findDocumentWithTagsSizeThree&quot;</span>, queryExecutor.findDocumentWithTagsSizeThree());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findDocumentWithSpecificTag&quot;</span>, queryExecutor.findDocumentWithSpecificTag());</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAllElementsWithSpecificTag&quot;</span>, queryExecutor.findAllElementsWithSpecificTag());</span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAllElementsWithSpecificTagByJson&quot;</span>, queryExecutor.findAllElementsWithSpecificTagByJson());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printResult</span><span class=\"params\">(String queryName, List&lt;Item&gt; result)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Query: &quot;</span> + queryName + <span class=\"string\">&quot; ###################################################&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Item item : result) &#123;</span><br><span class=\"line\">            System.out.println(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QueryExecutor</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MongoTemplate mongoTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">QueryExecutor</span><span class=\"params\">(MongoTemplate mongoTemplate)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mongoTemplate = mongoTemplate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄小于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeLessThan25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).lt(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄小于等于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeLessThanOrEqualTo25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).lte(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄大于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeGreaterThan25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).gt(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄大于等于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeGreaterThanOrEqualTo25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).gte(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄不等于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeNotEqualTo25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).ne(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄存在并且在指定数组中的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeInArray</span><span class=\"params\">(List&lt;Integer&gt; ages)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).in(ages));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄不存在或者不在指定数组中的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeNotInArray</span><span class=\"params\">(List&lt;Integer&gt; ages)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).nin(ages));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄存在并且为 20，或者薪资大于 8000 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeOrSalary</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().orOperator(</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;age&quot;</span>).is(<span class=\"number\">20</span>),</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gt(<span class=\"number\">8000</span>)</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄为 20，并且薪资大于 8000 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeAndSalary</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().andOperator(</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;age&quot;</span>).is(<span class=\"number\">20</span>),</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gt(<span class=\"number\">8000</span>)</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签，并且包含 tagKey 为 &quot;size&quot;，tagValue 为 &quot;XL&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findTagsWithColorAndSize</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Criteria</span> <span class=\"variable\">criteria</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().andOperator(</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(</span><br><span class=\"line\">                            Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).is(<span class=\"string\">&quot;red&quot;</span>)</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(</span><br><span class=\"line\">                            Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;size&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).is(<span class=\"string\">&quot;XL&quot;</span>)</span><br><span class=\"line\">                    )</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(criteria);</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;blue&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findTagsWithColorContainingBlue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).regex(<span class=\"string\">&quot;blue&quot;</span>)</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findTagsWithColor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags.tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询 tags 数组长度为 3 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findDocumentWithTagsSizeThree</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).size(<span class=\"number\">3</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findDocumentWithSpecificTag</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).is(<span class=\"string\">&quot;red&quot;</span>)</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAllElementsWithSpecificTag</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).regex(<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用 BasicQuery，可以使用 json 字符串，这样就可以直接使用 mongo 的查询语法</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAllElementsWithSpecificTagByJson</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    &#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                                &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125;</span></span><br><span class=\"line\"><span class=\"string\">                            ]&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BasicQuery</span>(json);</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用的查询方法\">常用的查询方法</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>查询所有文档</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.employee.find()</span></span><br><span class=\"line\">List&lt;Employee&gt; list = mongoTemplate.findAll(Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>根据_id查询</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.employee.findOne(&#123; &quot;_id&quot;: 1 &#125;)|</span></span><br><span class=\"line\"><span class=\"type\">Employee</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> mongoTemplate.findById(<span class=\"number\">1</span>, Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>查询第一个文档</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.employee.findOne(&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"type\">Employee</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> mongoTemplate.findOne(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(), Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>条件查询，排序及分页</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.employee.find(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;$or&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">              &#123; &quot;username&quot;: &quot;张三&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">              &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 5000 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">          ]</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;).sort(&#123; &quot;salary&quot;: -1 &#125;).skip(2).limit(4)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().orOperator(Criteria.where(<span class=\"string\">&quot;name&quot;</span>).is(<span class=\"string\">&quot;张三&quot;</span>), Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gt(<span class=\"number\">5000</span>)););</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你不熟悉 Criteria，但是熟悉 mongo 的查询语法，可以使用 BasicQuery</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  String json = &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">          &#123;</span></span><br><span class=\"line\"><span class=\"comment\">              &quot;$or&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">                  &#123; &quot;username&quot;: &quot;张三&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                  &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 5000 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">              ]</span></span><br><span class=\"line\"><span class=\"comment\">          &#125;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;&quot;&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">  Query query = new BasicQuery(json);</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//skip limit 分页  skip用于指定跳过记录数，limit则用于限定返回结果数量。</span></span><br><span class=\"line\">query.with(Sort.by(Sort.Order.desc(<span class=\"string\">&quot;salary&quot;</span>)))</span><br><span class=\"line\">        .skip(<span class=\"number\">2</span>)  <span class=\"comment\">//指定跳过记录数</span></span><br><span class=\"line\">        .limit(<span class=\"number\">4</span>);  <span class=\"comment\">//每页显示记录数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询结果</span></span><br><span class=\"line\">List&lt;Employee&gt; employees = mongoTemplate.find(</span><br><span class=\"line\">        query, Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>只返回部分字段</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.employee.find(</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 18 &#125; &#125;,  // 筛选条件，年龄大于等于18岁的文档</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; &quot;name&quot;: 1, &quot;age&quot;: 1 &#125;      // 指定返回的字段，只包含&quot;name&quot;和&quot;age&quot;，其中1表示包含该字段，0表示不包含</span></span><br><span class=\"line\"><span class=\"comment\">)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>();</span><br><span class=\"line\">query.addCriteria(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).gte(<span class=\"number\">18</span>)); <span class=\"comment\">// 筛选条件，年龄大于等于18岁的文档</span></span><br><span class=\"line\">query.fields().include(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;age&quot;</span>).exclude(<span class=\"string\">&quot;id&quot;</span>);<span class=\"comment\">// 指定返回的字段，只包含&quot;name&quot;和&quot;age&quot;，要去除id，否则默认会返回id</span></span><br><span class=\"line\">List&lt;Employee&gt; results = mongoTemplate.find(query, Employee.class);</span><br><span class=\"line\"><span class=\"comment\">// Employee(id=null, name=张三, age=21, salary=null, entryDay=null)</span></span><br><span class=\"line\">results.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>去重</p>\n</li>\n</ul>\n<blockquote>\n<p>distinct 方法只能直接获取唯一值，并不能在查询过程中进行其他的聚合操作，使用场景非常受限，推荐使用聚合方式进行查询</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//语法：db.collectionName.distinct(&quot;fieldName&quot;, &#123; /* 过滤条件 */ &#125;)，这将返回指定字段 fieldName 的唯一值数组。</span></span><br><span class=\"line\"><span class=\"comment\">// 示例：db.collection.distinct(&quot;name&quot;,&#123;age:&#123;$gte:25&#125;&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式1</span></span><br><span class=\"line\">DistinctIterable&lt;String&gt; distinctIterable = mongoTemplate.getCollection(<span class=\"string\">&quot;collection&quot;</span>)</span><br><span class=\"line\">        .distinct(<span class=\"string\">&quot;name&quot;</span>, BsonDocument.parse(<span class=\"string\">&quot;&#123;age:&#123;$gte:25&#125;&#125;&quot;</span>), String.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式2</span></span><br><span class=\"line\"><span class=\"comment\">// DistinctIterable&lt;String&gt; distinctIterable = mongoTemplate.getCollection(&quot;collection&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//        .distinct(&quot;name&quot;, new Document(&quot;age&quot;, new Document(&quot;$gte&quot;, 25)), String.class);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将DistinctIterable转换为List</span></span><br><span class=\"line\">List&lt;String&gt; distinctNames = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">distinctIterable.iterator().forEachRemaining(distinctNames::add);</span><br><span class=\"line\"><span class=\"comment\">// 打印输出</span></span><br><span class=\"line\">distinctNames.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 聚合方式，聚合方式的详细说明会在下一篇博客中介绍</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.collection.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          $match: &#123; age: &#123; $gte: 25 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          $group: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">              _id: &quot;$name&quot;</span></span><br><span class=\"line\"><span class=\"comment\">          &#125;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  ])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">              Aggregation.match(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).gte(<span class=\"number\">25</span>)),</span><br><span class=\"line\">              Aggregation.group(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\"></span><br><span class=\"line\">      AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;collection&quot;</span>, Document.class);</span><br><span class=\"line\">      List&lt;String&gt; distinctNames = results.getMappedResults().stream()</span><br><span class=\"line\">              .map(document -&gt; document.getString(<span class=\"string\">&quot;_id&quot;</span>))</span><br><span class=\"line\">              .toList();</span><br><span class=\"line\"></span><br><span class=\"line\">      distinctNames.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SpringBoot对Mongo的查询，其实就是如何通过Criteria来构建一个Query，所以我们的目标就是要熟练掌握Criteria的语法。当然，如果你熟悉Mongo的查询语法，也可以直接使用BasicQuery来实现Mongo的查询。</p>\n</blockquote>\n<h2 id=\"插入\">插入</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Mongo语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 插入单个文档</span></span><br><span class=\"line\">db.collection.insertOne(</span><br><span class=\"line\">   &lt;document&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      writeConcern: &lt;document&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">db.demo.insertOne(</span><br><span class=\"line\">   &#123; name: <span class=\"string\">&quot;张三&quot;</span>, age: 35&#125;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      writeConcern: &#123; w: <span class=\"string\">&quot;majority&quot;</span>, j: <span class=\"literal\">true</span>, wtimeout: 5000 &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入多个文档</span></span><br><span class=\"line\">db.collection.insertMany(</span><br><span class=\"line\">   [ &lt;document 1&gt; , &lt;document 2&gt;, ... ],</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      writeConcern: &lt;document&gt;,</span><br><span class=\"line\">      ordered: &lt;boolean&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>writeConcern 是 MongoDB 中用来控制写入确认的选项，可选。以下是 writeConcern 参数的一些常见选项：</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>w：指定写入确认级别。如果指定为数字，则表示要等待写入操作完成的节点数。如果指定为 majority，则表示等待大多数节点完成写入操作。默认为 1，表示等待写入操作完成的节点数为 1。</p>\n</li>\n<li class=\"lvl-4\">\n<p>j：表示写入操作是否要求持久化到磁盘。如果设置为 true，则表示写入操作必须持久化到磁盘后才返回成功。如果设置为 false，则表示写入操作可能在数据被持久化到磁盘之前返回成功。默认为 false。</p>\n</li>\n<li class=\"lvl-4\">\n<p>wtimeout：表示等待写入操作完成的超时时间，单位为毫秒。如果超过指定的时间仍然没有返回确认信息，则返回错误。默认为 0，表示不设置超时时间。</p>\n</li>\n</ul>\n<blockquote>\n<p>ordered：指定是否按顺序写入，默认 true，按顺序写入。</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>插入单个文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.employee.insertOne(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">      &quot;_id&quot;: 1,</span></span><br><span class=\"line\"><span class=\"comment\">      &quot;username&quot;: &quot;小明&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">      &quot;age&quot;: 30,</span></span><br><span class=\"line\"><span class=\"comment\">      &quot;salary&quot;: 10000.00,</span></span><br><span class=\"line\"><span class=\"comment\">      &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;小明&quot;</span>, <span class=\"number\">30</span>, <span class=\"number\">10000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">mongoTemplate.insert(employee);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>插入多个文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.employee.insertMany([</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;_id&quot;: 2,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;username&quot;: &quot;张三&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;age&quot;: 21,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;salary&quot;: 5000.00,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;_id&quot;: 3,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;username&quot;: &quot;李四&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;age&quot;: 26,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;salary&quot;: 8000.00,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;_id&quot;: 4,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;username&quot;: &quot;王五&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;age&quot;: 22,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;salary&quot;: 8000.00,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;_id&quot;: 5,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;username&quot;: &quot;张龙&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;age&quot;: 28,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;salary&quot;: 6000.00,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;_id&quot;: 6,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;username&quot;: &quot;赵虎&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;age&quot;: 24,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;salary&quot;: 7000.00,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;_id&quot;: 7,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;username&quot;: &quot;赵六&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;age&quot;: 28,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;salary&quot;: 12000.00,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  ])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">List&lt;Employee&gt; list = Arrays.asList(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">21</span>, <span class=\"number\">5000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">3</span>, <span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">26</span>, <span class=\"number\">8000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">4</span>, <span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">22</span>, <span class=\"number\">8000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">5</span>, <span class=\"string\">&quot;张龙&quot;</span>, <span class=\"number\">28</span>, <span class=\"number\">6000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">6</span>, <span class=\"string\">&quot;赵虎&quot;</span>, <span class=\"number\">24</span>, <span class=\"number\">7000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">7</span>, <span class=\"string\">&quot;赵六&quot;</span>, <span class=\"number\">28</span>, <span class=\"number\">12000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()));</span><br><span class=\"line\"><span class=\"comment\">//插入多条数据</span></span><br><span class=\"line\">mongoTemplate.insert(list, Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>id存在时更新，不存在时插入</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.employee.updateOne(</span></span><br><span class=\"line\"><span class=\"comment\">   &#123; &quot;_id&quot;: 1 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">   &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      $set: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         &quot;name&quot;: &quot;小明&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">         &quot;age&quot;: 30,</span></span><br><span class=\"line\"><span class=\"comment\">         &quot;salary&quot;: 10000.00,</span></span><br><span class=\"line\"><span class=\"comment\">         &quot;entryDay&quot;: ISODate(&quot;2024-03-05T00:00:00Z&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">   &#123; upsert: true &#125;</span></span><br><span class=\"line\"><span class=\"comment\">)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;小明&quot;</span>, <span class=\"number\">30</span>, <span class=\"number\">10000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"><span class=\"comment\">//save方法会根据对象的id是否存在来判断是更新还是插入</span></span><br><span class=\"line\">mongoTemplate.save(employee);</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新\">更新</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Mongo语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新单个或多个文档</span></span><br><span class=\"line\">db.collection.update[One|Many](</span><br><span class=\"line\">   &lt;filter&gt;,</span><br><span class=\"line\">   &lt;update&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     upsert: &lt;boolean&gt;,</span><br><span class=\"line\">     writeConcern: &lt;document&gt;,</span><br><span class=\"line\">     collation: &lt;document&gt;,</span><br><span class=\"line\">     arrayFilters: [ &lt;filterdocument1&gt;, ... ],</span><br><span class=\"line\">     hint:  &lt;document|string&gt;        // Available starting <span class=\"keyword\">in</span> MongoDB 4.2.1</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># findAndModify,只能更新单个文档</span></span><br><span class=\"line\">db.collection.findAndModify(&#123;</span><br><span class=\"line\">    query:&lt;filter&gt;,</span><br><span class=\"line\">    update:&lt;update&gt;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 示例，该操作会返回符合查询条件的文档数据，并完成对文档的修改</span></span><br><span class=\"line\"><span class=\"comment\"># 将某个book文档的收藏数（favCount）加1</span></span><br><span class=\"line\">db.books.findAndModify(&#123;</span><br><span class=\"line\">    query:&#123;_id:ObjectId(<span class=\"string\">&quot;6457a39c817728350ec83b9d&quot;</span>)&#125;,</span><br><span class=\"line\">    update:&#123;<span class=\"variable\">$inc</span>:&#123;favCount:1&#125;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 默认情况下，findAndModify会返回修改前的“旧”数据。如果希望返回修改后的数据，则可以指定new选项</span></span><br><span class=\"line\">db.books.findAndModify(&#123;</span><br><span class=\"line\">    query:&#123;_id:ObjectId(<span class=\"string\">&quot;6457a39c817728350ec83b9d&quot;</span>)&#125;,</span><br><span class=\"line\">    update:&#123;<span class=\"variable\">$inc</span>:&#123;favCount:1&#125;&#125;,</span><br><span class=\"line\">    new: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;filter&gt;</td>\n<td>一个筛选器对象，用于指定要更新的文档。</td>\n</tr>\n<tr>\n<td>&lt;update&gt;</td>\n<td>一个更新操作对象，用于指定如何更新文档。可以使用一些操作符，例如$set、$inc、$unset等，以更新文档中的特定字段。</td>\n</tr>\n<tr>\n<td>upsert</td>\n<td>一个布尔值，用于指定如果找不到与筛选器匹配的文档时是否应插入一个新文档。如果upsert为true，则会插入一个新文档。默认值为false。</td>\n</tr>\n<tr>\n<td>writeConcern</td>\n<td>一个文档，用于指定写入操作的安全级别。可以指定写入操作需要到达的节点数或等待写入操作的时间。</td>\n</tr>\n<tr>\n<td>collation</td>\n<td>一个文档，用于指定用于查询的排序规则。例如，可以通过指定locale属性来指定语言环境，从而实现基于区域设置的排序。</td>\n</tr>\n<tr>\n<td>arrayFilters</td>\n<td>一个数组，用于指定要更新的数组元素。数组元素是通过使用更新操作符$[]和$来指定的。</td>\n</tr>\n<tr>\n<td>hint</td>\n<td>一个文档或字符串，用于指定查询使用的索引。该参数仅在MongoDB 4.2.1及以上版本中可用。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>更新操作符</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$set</td>\n<td>{ $set: { field: value } }</td>\n<td>指定一个键并更新值，若键不存在则创建。</td>\n</tr>\n<tr>\n<td>$unset</td>\n<td>{ $unset : { field : 1 } }</td>\n<td>删除一个键。</td>\n</tr>\n<tr>\n<td>$inc</td>\n<td>{ $inc : { field : value } }</td>\n<td>对数值类型进行增减。</td>\n</tr>\n<tr>\n<td>$rename</td>\n<td>{ $rename : { old_field_name : new_field_name } }</td>\n<td>修改字段名称。</td>\n</tr>\n<tr>\n<td>$push</td>\n<td>{ $push : { field : value } }</td>\n<td>将数值追加到数组中，若数组不存在则会进行初始化。</td>\n</tr>\n<tr>\n<td>$pushAll</td>\n<td>{ $pushAll : { field : value_array } }</td>\n<td>追加多个值到一个数组字段内。</td>\n</tr>\n<tr>\n<td>$pull</td>\n<td>{ $pull : { field : _value } }</td>\n<td>从数组中删除指定的元素。</td>\n</tr>\n<tr>\n<td>$addToSet</td>\n<td>{ $addToSet : { field : value } }</td>\n<td>添加元素到数组中，具有排重功能。</td>\n</tr>\n<tr>\n<td>$pop</td>\n<td>{ $pop : { field : 1 } }</td>\n<td>删除数组的第一个或最后一个元素。</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>只更新满足条件的第一条记录</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.employee.updateOne(</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 8000 &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;$set&quot;: &#123; &quot;salary&quot;: 13000 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  )</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gte(<span class=\"number\">8000</span>));</span><br><span class=\"line\"><span class=\"type\">Update</span> <span class=\"variable\">update</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Update</span>();</span><br><span class=\"line\"><span class=\"comment\">//设置更新属性</span></span><br><span class=\"line\">update.set(<span class=\"string\">&quot;salary&quot;</span>, <span class=\"number\">13000</span>);</span><br><span class=\"line\"><span class=\"type\">UpdateResult</span> <span class=\"variable\">updateResult</span> <span class=\"operator\">=</span> mongoTemplate.updateFirst(query, update, Employee.class);</span><br><span class=\"line\"><span class=\"comment\">//返回修改的记录数</span></span><br><span class=\"line\">System.out.println(updateResult.getModifiedCount());</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>更新所有满足条件的记录</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.employee.updateMany(</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 8000 &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;$set&quot;: &#123; &quot;salary&quot;: 13000 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gte(<span class=\"number\">8000</span>));</span><br><span class=\"line\"><span class=\"type\">Update</span> <span class=\"variable\">update</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Update</span>();</span><br><span class=\"line\"><span class=\"comment\">//设置更新属性</span></span><br><span class=\"line\">update.set(<span class=\"string\">&quot;salary&quot;</span>, <span class=\"number\">13000</span>);</span><br><span class=\"line\"><span class=\"type\">UpdateResult</span> <span class=\"variable\">updateResult</span> <span class=\"operator\">=</span> mongoTemplate.updateMulti(query, update, Employee.class);</span><br><span class=\"line\"><span class=\"comment\">//返回修改的记录数</span></span><br><span class=\"line\">System.out.println(updateResult.getModifiedCount());</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>没有符合条件的记录则插入数据</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.employee.updateOne(</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 8000 &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;$set&quot;: &#123; &quot;salary&quot;: 13000 &#125;, &quot;$setOnInsert&quot;: &#123; &quot;id&quot;: 11 &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;upsert&quot;: true &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gte(<span class=\"number\">8000</span>));</span><br><span class=\"line\"><span class=\"type\">Update</span> <span class=\"variable\">update</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Update</span>();</span><br><span class=\"line\"><span class=\"comment\">//设置更新属性</span></span><br><span class=\"line\">update.set(<span class=\"string\">&quot;salary&quot;</span>, <span class=\"number\">13000</span>);</span><br><span class=\"line\">update.setOnInsert(<span class=\"string\">&quot;id&quot;</span>,<span class=\"number\">11</span>);  <span class=\"comment\">//指定_id，只有没有匹配到时才插入</span></span><br><span class=\"line\"><span class=\"type\">UpdateResult</span> <span class=\"variable\">updateResult</span> <span class=\"operator\">=</span> mongoTemplate.upsert(query, update, Employee.class);</span><br><span class=\"line\"><span class=\"comment\">//返回修改的记录数</span></span><br><span class=\"line\">System.out.println(updateResult.getModifiedCount());</span><br></pre></td></tr></table></figure>\n<h2 id=\"替换\">替换</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Mongo语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.replaceOne(</span><br><span class=\"line\">   &lt;filter&gt;,</span><br><span class=\"line\">   &lt;replacement&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     upsert: &lt;boolean&gt;,</span><br><span class=\"line\">     writeConcern: &lt;document&gt;,</span><br><span class=\"line\">     collation: &lt;document&gt;,</span><br><span class=\"line\">     hint: &lt;document|string&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>replaceOne</code>操作会首先使用指定的筛选条件来查找匹配的文档，然后用提供的新文档完全替换掉原始文档，也就是说<code>replaceOne</code>是整体替换，而不是修改文档中的某些字段。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;filter&gt;</td>\n<td>一个筛选器对象，用于指定要替换的文档。只有与筛选器对象匹配的第一个文档才会被替换。</td>\n</tr>\n<tr>\n<td>&lt;replacement&gt;</td>\n<td>一个替换文档对象，用于指定用于替换原始文档的新文档。替换文档必须包含所有要在原始文档中修改或替换的字段。</td>\n</tr>\n<tr>\n<td>upsert</td>\n<td>一个布尔值，表示如果找不到与筛选器匹配的文档时是否应插入一个新文档。如果设置为true，则会插入一个新文档。默认为false。</td>\n</tr>\n<tr>\n<td>writeConcern</td>\n<td>一个文档，用于指定写入操作的安全级别。可以指定写入操作需要到达的节点数或等待写入操作的时间。</td>\n</tr>\n<tr>\n<td>collation</td>\n<td>一个文档，用于指定用于查询的排序规则。例如，可以通过指定locale属性来指定语言环境，从而实现基于区域设置的排序。</td>\n</tr>\n<tr>\n<td>hint</td>\n<td>一个文档或字符串，用于指定查询使用的索引。该参数仅在MongoDB 4.2.1及以上版本中可用</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>示例</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.collection.replaceOne(</span></span><br><span class=\"line\"><span class=\"comment\">   &#123; &quot;name&quot;: &quot;John&quot; &#125;,  // 筛选条件，匹配name为John的文档</span></span><br><span class=\"line\"><span class=\"comment\">   &#123;                     // 替换文档，用于替换匹配到的文档</span></span><br><span class=\"line\"><span class=\"comment\">     &quot;name&quot;: &quot;Peter&quot;,    // 新的name字段值为Peter</span></span><br><span class=\"line\"><span class=\"comment\">     &quot;age&quot;: 30           // 新增age字段，值为30</span></span><br><span class=\"line\"><span class=\"comment\">   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;name&quot;</span>).is(<span class=\"string\">&quot;John&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">Employee</span> <span class=\"variable\">replacement</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">replacement.setName(<span class=\"string\">&quot;Peter&quot;</span>);</span><br><span class=\"line\">replacement.setAge(<span class=\"number\">30</span>);</span><br><span class=\"line\">mongoTemplate.findAndReplace(query, replacement);</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除\">删除</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Mongo语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按条件删除多个文档</span></span><br><span class=\"line\">db.collection.deleteMany(&lt;filter&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按条件删除单个文档</span></span><br><span class=\"line\">db.collection.deleteOne(&lt;filter&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 先查询后删除，返回查询条件对应的文档，sort是可选项</span></span><br><span class=\"line\">db.collection.findOneAndDelete(&lt;filter&gt;,&#123;<span class=\"built_in\">sort</span>:&#123;field:1&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除所有文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.employee.deleteMany(&#123;&#125;)</span></span><br><span class=\"line\">mongoTemplate.remove(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(),Employee.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// db.employee.drop()</span></span><br><span class=\"line\"><span class=\"comment\">// 清空数据也可以使用drop方法，但是这样会删除索引</span></span><br><span class=\"line\">mongoTemplate.dropCollection(Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>按条件删除文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.employee.deleteMany(&#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 10000 &#125; &#125;)</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gte(<span class=\"number\">10000</span>));</span><br><span class=\"line\">mongoTemplate.remove(query, Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除查询到的第一个文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.employee.deleteOne(&#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 10000 &#125; &#125;)</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gte(<span class=\"number\">10000</span>));</span><br><span class=\"line\">query.limit(<span class=\"number\">1</span>);</span><br><span class=\"line\">mongoTemplate.remove(query, Employee.class);</span><br></pre></td></tr></table></figure>\n<h2 id=\"批量操作\">批量操作</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>bulkwrite()方法提供了执行批量插入、更新和删除操作的能力。</p>\n</li>\n<li class=\"lvl-2\">\n<p>bulkWrite()支持以下写操作:</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">insertOne</li>\n<li class=\"lvl-4\">updateOne</li>\n<li class=\"lvl-4\">updateMany</li>\n<li class=\"lvl-4\">replaceOne</li>\n<li class=\"lvl-4\">deleteOne</li>\n<li class=\"lvl-4\">deleteMany</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>示例</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.annotation.Id;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.BulkOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Update;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BulkWriteTests</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MongoTemplate mongoTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    db.pizzas.insertMany( [</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; _id: 0, type: &quot;pepperoni&quot;, size: &quot;small&quot;, price: 4 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; _id: 1, type: &quot;cheese&quot;, size: &quot;medium&quot;, price: 7 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; _id: 2, type: &quot;vegan&quot;, size: &quot;large&quot;, price: 8 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    ] )</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">insertManyPizzas</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mongoTemplate.insertAll(Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;pepperoni&quot;</span>, <span class=\"string\">&quot;small&quot;</span>, <span class=\"number\">4</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;cheese&quot;</span>, <span class=\"string\">&quot;medium&quot;</span>, <span class=\"number\">7</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;vegan&quot;</span>, <span class=\"string\">&quot;large&quot;</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    db.pizzas.bulkWrite( [</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; insertOne: &#123; document: &#123; _id: 3, type: &quot;beef&quot;, size: &quot;medium&quot;, price: 6 &#125; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; insertOne: &#123; document: &#123; _id: 4, type: &quot;sausage&quot;, size: &quot;large&quot;, price: 10 &#125; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; updateOne: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          filter: &#123; type: &quot;cheese&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">          update: &#123; $set: &#123; price: 8 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; deleteOne: &#123; filter: &#123; type: &quot;pepperoni&quot;&#125; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; replaceOne: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          filter: &#123; type: &quot;vegan&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">          replacement: &#123; type: &quot;tofu&quot;, size: &quot;small&quot;, price: 4 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    ] )</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">performBulkWrite</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BulkOperations</span> <span class=\"variable\">bulkOperations</span> <span class=\"operator\">=</span> mongoTemplate.bulkOps(BulkOperations.BulkMode.ORDERED, Pizza.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        bulkOperations.insert(Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"number\">3</span>, <span class=\"string\">&quot;beef&quot;</span>, <span class=\"string\">&quot;medium&quot;</span>, <span class=\"number\">6</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"number\">4</span>, <span class=\"string\">&quot;sausage&quot;</span>, <span class=\"string\">&quot;large&quot;</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        ));</span><br><span class=\"line\"></span><br><span class=\"line\">        bulkOperations.updateOne(</span><br><span class=\"line\">                Query.query(Criteria.where(<span class=\"string\">&quot;type&quot;</span>).is(<span class=\"string\">&quot;cheese&quot;</span>)),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Update</span>().set(<span class=\"string\">&quot;price&quot;</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        bulkOperations.remove(</span><br><span class=\"line\">                Query.query(Criteria.where(<span class=\"string\">&quot;type&quot;</span>).is(<span class=\"string\">&quot;pepperoni&quot;</span>)).limit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        bulkOperations.replaceOne(</span><br><span class=\"line\">                Query.query(Criteria.where(<span class=\"string\">&quot;type&quot;</span>).is(<span class=\"string\">&quot;vegan&quot;</span>)),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"literal\">null</span>, <span class=\"string\">&quot;tofu&quot;</span>, <span class=\"string\">&quot;small&quot;</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        bulkOperations.execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\">    <span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\">    <span class=\"meta\">@Document(&quot;pizza&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pizza</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Id</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Integer _id;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String size;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Integer price;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍如何使用SpringBoot实现MongoDB7.0的单集合的CURD操作 SpringBoot版本3.2.3，MongoDB版本7.0.6 MongoDB CRUD Operations SQL to MongoDB Mapping Chart MongoDB7.0--SpringBoot聚合操作 spring-boot 与 MongoDB 的版本对应关系 spring-data-mongodb与MongoDB版本对应关系可以参看官方文档 spring-boot-starter-data-mongodb 与 spring-data-mongodb 版本对应关系 spring-boot-starter-data-mongodb 版本 spring-data-mongodb 版本 MongoDB Server 版本 Java Driver Version 3.2.x 4.2.x 6.0.x,7.0.x 4.11.x 3.1.x 4.1.x 6.0.x,7.0.x 4.9.x 3.0.x 4.0.x 6.0.x 4.7.x 2.7.x 3.4.x 5.0.x 4.6.x 2.6.x 3.3.x 5.0.x 4.4.x 2.5.x 3.2.x 4.4.x 4.1.x 2.4.x 3.1.x 4.4.x 4.1.x 2.3.x 3.0.x 4.4.x 4.0.x 2.2.x 2.2.x 4.2.x 3.11.x 2.1.x 2.1.x 4.0.x 3.8.x 2.0.x 2.0.x 3.4.x 3.5.x 1.10.x 1.10.x 2.4.x 2.10.x,2.11.x Mongo的Java驱动，在3.7.x及以后的版本叫做mongodb-driver-sync，以前的版本叫做mongo-java-driver MongoDB 与 Java Driver 兼容性 SpringBoot整合MongoDB 引入依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;&lt;/dependency&gt; 配置yml 1234567891011121314spring: data: mongodb: uri: mongodb://root:password@127.0.0.1:27017/mytest?authSource=admin #uri等同于下面的配置 # database: mytest # 数据库名 # host: 127.0.0.1 # port: 27017 # username: root # password: password #a uthentication-database: admin # 复制集 # uri: mongodb://user:password@127.0.0.1:27040,127.0.0.1:27041,127.0.0.1:27042/mytest?authSource=admin&amp;readPreference=primaryPreferred 配置类:去掉_class属性 12345678910111213141516171819202122@Configurationpublic class MongoConfig &#123; /** * 定制TypeMapper去掉_class属性 */ @Bean MappingMongoConverter mappingMongoConverter( MongoDatabaseFactory mongoDatabaseFactory, MongoMappingContext context, MongoCustomConversions conversions) &#123; DbRefResolver dbRefResolver = new DefaultDbRefResolver(mongoDatabaseFactory); MappingMongoConverter mappingMongoConverter = new MappingMongoConverter(dbRefResolver, context); mappingMongoConverter.setCustomConversions(conversions); //构造DefaultMongoTypeMapper，将typeKey设置为空值 mappingMongoConverter.setTypeMapper(new DefaultMongoTypeMapper(null)); return mappingMongoConverter; &#125;&#125; 查询 Mongo语法 12345678910111213141516171819# 查询集合中的若干文档db.collection.find(query, projection)# 查询集合中的第一个文档db.collection.findOne(query, projection)# 如果你需要以易读的方式来读取数据，可以使用pretty()方法db.collection.find().pretty()# 排序，1 为升序排列，而 -1 是用于降序排列db.collection.find(query, projection).sort(&#123;field:-1&#125;)# 分页# .skip(16) 表示跳过前面 16 条记录，即前两页的所有记录.# .limit(8) 表示返回 8 条记录，即第三页的所有记录。db.collection.find().skip(16).limit(8)# 查询记录数db.collection.countDocuments() query ：可选，使用查询操作符指定查询条件 projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。投影时，_id为1的时候，其他字段必须是1；_id是0的时候，其他字段可以是0；如果没有_id字段约束，多个其他字段必须同为0或同为1。 查询操作符 操作符 解释 示例 示例解释 $lt 小于 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;) 查询年龄小于 25 的文档 $lte 小于等于 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;) 查询年龄小于等于 25 的文档 $gt 大于 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;) 查询年龄大于 25 的文档 $gte 大于等于 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;) 查询年龄大于等于 25 的文档 $ne 不等于 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;) 查询年龄不等于 25 的文档 $in 在指定数组中 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;) 查询年龄存在并且在指定数组中的文档 $nin 不在指定数组中 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;) 查询年龄不存在或者不在指定数组中的文档 $or 匹配两个或多个条件中的一个 db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) 查询年龄为 20 或者薪资大于 8000 的文档 $and 匹配全部条件 db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) 查询年龄为 20 并且薪资大于 8000 的文档 $all 匹配数组中所有元素满足指定条件 db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;, &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125; ] &#125; &#125;) 查询包含 tagKey 为 “color”，tagValue 为 “red” 的标签，并且包含 tagKey 为 “size”，tagValue 为 “XL” 的标签的文档 $elemMatch 匹配数组中至少一个元素满足指定条件 db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;blue&quot; &#125; &#125; &#125;) 查询包含 tagKey 为 “color”，tagValue 包含 “blue” 的标签的文档 $text 全文搜索 db.collection.find(&#123; &quot;$text&quot;: &#123; &quot;$search&quot;: &quot;searchTerm&quot; &#125; &#125;) 进行全文搜索，查找包含 “searchTerm” 的文档 $type 指定字段类型 db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$type&quot;: &quot;string&quot; &#125; &#125;) 查询指定字段类型为字符串的文档 $size 数组长度 db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$size&quot;: sizeValue &#125; &#125;) 查询指定字段数组长度为 sizeValue 的文档 $exists 字段存在 db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$exists&quot;: true &#125; &#125;) 查询指定字段存在的文档 $mod 取模 db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$mod&quot;: [divisor, remainder] &#125; &#125;) 查询指定字段取模后符合给定除数和余数的文档 SpringBoot代码示例 操作org.bson.Document对象，无需创建实体映射对象，但操作时需要指定集合名称package com.hanqf;import org.bson.Document;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.data.mongodb.core.query.BasicQuery;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import java.util.Arrays;import java.util.List;import java.util.Map;@SpringBootTestclass BasicTests &#123; @Autowired private MongoTemplate mongoTemplate; /* // 初始化数据 db.collection.insertMany([ &#123; &quot;name&quot;: &quot;item1&quot;, &quot;age&quot;: 20, &quot;salary&quot;: 5000, &quot;colors&quot;: [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;], &quot;sizes&quot;: [&quot;S&quot;, &quot;M&quot;, &quot;L&quot;], &quot;tags&quot;: [ &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;M&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125; ] &#125;, &#123; &quot;name&quot;: &quot;item2&quot;, &quot;age&quot;: 30, &quot;salary&quot;: 8000, &quot;colors&quot;: [&quot;green&quot;, &quot;yellow&quot;], &quot;sizes&quot;: [&quot;M&quot;, &quot;L&quot;, &quot;XL&quot;], &quot;tags&quot;: [ &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;blue&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;formal&quot; &#125; ] &#125;, &#123; &quot;name&quot;: &quot;item3&quot;, &quot;age&quot;: 25, &quot;salary&quot;: 10000, &quot;colors&quot;: [&quot;red&quot;, &quot;green&quot;], &quot;sizes&quot;: [&quot;L&quot;, &quot;XL&quot;], &quot;tags&quot;: [ &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;green&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;L&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125; ] &#125; ]); */ @Test void initializeData() &#123; List&lt;Document&gt; documents = Arrays.asList( // 文档1 new Document().append(&quot;name&quot;, &quot;item1&quot;) .append(&quot;age&quot;, 20) .append(&quot;salary&quot;, 5000) .append(&quot;colors&quot;, Arrays.asList(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)) .append(&quot;sizes&quot;, Arrays.asList(&quot;S&quot;, &quot;M&quot;, &quot;L&quot;)) .append(&quot;tags&quot;, Arrays.asList( new Document().append(&quot;tagKey&quot;, &quot;color&quot;) .append(&quot;tagValue&quot;, &quot;red&quot;), new Document().append(&quot;tagKey&quot;, &quot;size&quot;) .append(&quot;tagValue&quot;, &quot;M&quot;), new Document().append(&quot;tagKey&quot;, &quot;style&quot;) .append(&quot;tagValue&quot;, &quot;casual&quot;) )), // 文档2 new Document().append(&quot;name&quot;, &quot;item2&quot;) .append(&quot;age&quot;, 30) .append(&quot;salary&quot;, 8000) .append(&quot;colors&quot;, Arrays.asList(&quot;green&quot;, &quot;yellow&quot;)) .append(&quot;sizes&quot;, Arrays.asList(&quot;M&quot;, &quot;L&quot;, &quot;XL&quot;)) .append(&quot;tags&quot;, Arrays.asList( new Document().append(&quot;tagKey&quot;, &quot;color&quot;) .append(&quot;tagValue&quot;, &quot;blue&quot;), new Document().append(&quot;tagKey&quot;, &quot;size&quot;) .append(&quot;tagValue&quot;, &quot;XL&quot;), new Document().append(&quot;tagKey&quot;, &quot;style&quot;) .append(&quot;tagValue&quot;, &quot;formal&quot;) )), // 文档3 new Document().append(&quot;name&quot;, &quot;item3&quot;) .append(&quot;age&quot;, 25) .append(&quot;salary&quot;, 10000) .append(&quot;colors&quot;, Arrays.asList(&quot;red&quot;, &quot;green&quot;)) .append(&quot;sizes&quot;, Arrays.asList(&quot;L&quot;, &quot;XL&quot;)) .append(&quot;tags&quot;, Arrays.asList( new Document().append(&quot;tagKey&quot;, &quot;color&quot;) .append(&quot;tagValue&quot;, &quot;green&quot;), new Document().append(&quot;tagKey&quot;, &quot;size&quot;) .append(&quot;tagValue&quot;, &quot;L&quot;), new Document().append(&quot;tagKey&quot;, &quot;style&quot;) .append(&quot;tagValue&quot;, &quot;casual&quot;) )) ); // 这里要指定集合名称 mongoTemplate.insert(documents, &quot;collection&quot;); &#125; /** * 也可以通过json来构建Document对象 */ @Test void initializeData2() &#123; List&lt;String&gt; jsonList = new ArrayList&lt;&gt;(); jsonList.add(&quot;&quot;&quot; &#123; &quot;name&quot;: &quot;item1&quot;, &quot;age&quot;: 20, &quot;salary&quot;: 5000, &quot;colors&quot;: [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;], &quot;sizes&quot;: [&quot;S&quot;, &quot;M&quot;, &quot;L&quot;], &quot;tags&quot;: [ &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;M&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125; ] &#125; &quot;&quot;&quot;); jsonList.add(&quot;&quot;&quot; &#123; &quot;name&quot;: &quot;item2&quot;, &quot;age&quot;: 30, &quot;salary&quot;: 8000, &quot;colors&quot;: [&quot;green&quot;, &quot;yellow&quot;], &quot;sizes&quot;: [&quot;M&quot;, &quot;L&quot;, &quot;XL&quot;], &quot;tags&quot;: [ &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;blue&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;formal&quot; &#125; ] &#125; &quot;&quot;&quot;); jsonList.add(&quot;&quot;&quot; &#123; &quot;name&quot;: &quot;item3&quot;, &quot;age&quot;: 25, &quot;salary&quot;: 10000, &quot;colors&quot;: [&quot;red&quot;, &quot;green&quot;], &quot;sizes&quot;: [&quot;L&quot;, &quot;XL&quot;], &quot;tags&quot;: [ &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;green&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;L&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125; ] &#125; &quot;&quot;&quot;); List&lt;Document&gt; documents = new ArrayList&lt;&gt;(); for (String json : jsonList) &#123; // 通过Document.parse()方法将json字符串转换为Document对象 documents.add(Document.parse(json)); &#125; mongoTemplate.insert(documents, &quot;collection&quot;); &#125; @Test void testQueries() &#123; QueryExecutor queryExecutor = new QueryExecutor(mongoTemplate); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;) printResult(&quot;findAgeLessThan25&quot;, queryExecutor.findAgeLessThan25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;) printResult(&quot;findAgeLessThanOrEqualTo25&quot;, queryExecutor.findAgeLessThanOrEqualTo25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;) printResult(&quot;findAgeGreaterThan25&quot;, queryExecutor.findAgeGreaterThan25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;) printResult(&quot;findAgeGreaterThanOrEqualTo25&quot;, queryExecutor.findAgeGreaterThanOrEqualTo25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;) printResult(&quot;findAgeNotEqualTo25&quot;, queryExecutor.findAgeNotEqualTo25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;) printResult(&quot;findAgeInArray&quot;, queryExecutor.findAgeInArray(List.of(20, 25))); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;) printResult(&quot;findAgeNotInArray&quot;, queryExecutor.findAgeNotInArray(List.of(20, 25))); // db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) printResult(&quot;findAgeOrSalary&quot;, queryExecutor.findAgeOrSalary()); // db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) printResult(&quot;findAgeAndSalary&quot;, queryExecutor.findAgeAndSalary()); /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;, &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125; ]&#125;&#125;) */ printResult(&quot;findTagsWithColorAndSize&quot;, queryExecutor.findTagsWithColorAndSize()); // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;) printResult(&quot;findTagsWithColorContainingBlue&quot;, queryExecutor.findTagsWithColorContainingBlue()); // db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;) printResult(&quot;findTagsWithColor&quot;, queryExecutor.findTagsWithColor()); // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;) printResult(&quot;findDocumentWithTagsSizeThree&quot;, queryExecutor.findDocumentWithTagsSizeThree()); // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;) printResult(&quot;findDocumentWithSpecificTag&quot;, queryExecutor.findDocumentWithSpecificTag()); /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125; ]&#125;&#125;) */ printResult(&quot;findAllElementsWithSpecificTag&quot;, queryExecutor.findAllElementsWithSpecificTag()); printResult(&quot;findAllElementsWithSpecificTagByJson&quot;, queryExecutor.findAllElementsWithSpecificTagByJson()); &#125; private void printResult(String queryName, List&lt;Document&gt; result) &#123; System.out.println(&quot;Query: &quot; + queryName + &quot; ###################################################&quot;); for (Document document : result) &#123; System.out.println(document); &#125; System.out.println(); &#125; public static class QueryExecutor &#123; private final MongoTemplate mongoTemplate; public QueryExecutor(MongoTemplate mongoTemplate) &#123; this.mongoTemplate = mongoTemplate; &#125; // 查询年龄小于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;) public List&lt;Document&gt; findAgeLessThan25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).lt(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄小于等于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;) public List&lt;Document&gt; findAgeLessThanOrEqualTo25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).lte(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄大于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;) public List&lt;Document&gt; findAgeGreaterThan25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).gt(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄大于等于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;) public List&lt;Document&gt; findAgeGreaterThanOrEqualTo25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).gte(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄不等于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;) public List&lt;Document&gt; findAgeNotEqualTo25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).ne(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄存在并且在指定数组中的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;) public List&lt;Document&gt; findAgeInArray(List&lt;Integer&gt; ages) &#123; Query query = new Query(Criteria.where(&quot;age&quot;).in(ages)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄不存在或者不在指定数组中的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;) public List&lt;Document&gt; findAgeNotInArray(List&lt;Integer&gt; ages) &#123; Query query = new Query(Criteria.where(&quot;age&quot;).nin(ages)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄存在并且为 20，或者薪资大于 8000 的文档 // db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) public List&lt;Document&gt; findAgeOrSalary() &#123; Query query = new Query(new Criteria().orOperator(Criteria.where(&quot;age&quot;).is(20), Criteria.where(&quot;salary&quot;).gt(8000))); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄为 20，并且薪资大于 8000 的文档 // db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) public List&lt;Document&gt; findAgeAndSalary() &#123; Query query = new Query(new Criteria().andOperator(Criteria.where(&quot;age&quot;).is(20), Criteria.where(&quot;salary&quot;).gt(8000))); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签，并且包含 tagKey 为 &quot;size&quot;，tagValue 为 &quot;XL&quot; 的标签的文档 /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;, &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125; ]&#125;&#125;) */ public List&lt;Document&gt; findTagsWithColorAndSize() &#123; Criteria criteria = new Criteria().andOperator(Criteria.where(&quot;tags&quot;).elemMatch(Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).is(&quot;red&quot;)), Criteria.where(&quot;tags&quot;).elemMatch(Criteria.where(&quot;tagKey&quot;).is(&quot;size&quot;).and(&quot;tagValue&quot;).is(&quot;XL&quot;))); Query query = new Query(criteria); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询包含 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;blue&quot; 的标签的文档 // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;) public List&lt;Document&gt; findTagsWithColorContainingBlue() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).elemMatch(Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).regex(&quot;blue&quot;))); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询包含 tagKey 为 &quot;color&quot; 的标签的文档 // db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;) public List&lt;Document&gt; findTagsWithColor() &#123; Query query = new Query(Criteria.where(&quot;tags.tagKey&quot;).is(&quot;color&quot;)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询 tags 数组长度为 3 的文档 // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;) public List&lt;Document&gt; findDocumentWithTagsSizeThree() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).size(3)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签的文档 // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;) public List&lt;Document&gt; findDocumentWithSpecificTag() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).elemMatch(Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).is(&quot;red&quot;))); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档 /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125; ]&#125;&#125;) */ public List&lt;Document&gt; findAllElementsWithSpecificTag() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).elemMatch(Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).regex(&quot;green&quot;))); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档 // 使用 BasicQuery，可以使用 json 字符串，这样就可以直接使用 mongo 的查询语法 public List&lt;Document&gt; findAllElementsWithSpecificTagByJson() &#123; String json = &quot;&quot;&quot; &#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125; ]&#125;&#125; &quot;&quot;&quot;; Query query = new BasicQuery(json); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; &#125;&#125; 操作实体类 相关注解 修饰范围 作用 属性 @Document 类 映射类对象为Mongo文档 value, collection @Id 成员变量、方法 将成员变量值映射为文档的_id的值 @Field 成员变量、方法 将成员变量及值映射为文档中key:value对 name, value @Transient 成员变量、方法 指定成员变量不参与文档的序列化 使用 @Document 注解指定集合名 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.hanqf.mongo.model;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import org.springframework.data.annotation.Id;import org.springframework.data.mongodb.core.mapping.Document;import org.springframework.data.mongodb.core.mapping.Field;import java.util.List;@Data@AllArgsConstructor@NoArgsConstructor@Document(collection = &quot;collection&quot;)public class Item &#123; @Id private String id; @Field private String name; @Field private int age; @Field private double salary; @Field private List&lt;String&gt; colors; @Field private List&lt;String&gt; sizes; @Field private List&lt;Tag&gt; tags; public Item(String name, int age, double salary, List&lt;String&gt; colors, List&lt;String&gt; sizes, List&lt;Tag&gt; tags) &#123; this.name = name; this.age = age; this.salary = salary; this.colors = colors; this.sizes = sizes; this.tags = tags; &#125; @Data @AllArgsConstructor @NoArgsConstructor public static class Tag &#123; private String tagKey; private String tagValue; &#125;&#125; 查询示例package com.hanqf;import com.hanqf.mongo.model.Item;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.data.mongodb.core.query.BasicQuery;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import java.util.Arrays;import java.util.List;@SpringBootTestclass BasicTests2 &#123; @Autowired private MongoTemplate mongoTemplate; @Test void initializeData() &#123; // Initialize data List&lt;Item&gt; items = Arrays.asList( new Item(&quot;item1&quot;, 20, 5000, Arrays.asList(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), Arrays.asList(&quot;S&quot;, &quot;M&quot;, &quot;L&quot;), Arrays.asList(new Item.Tag(&quot;color&quot;, &quot;red&quot;), new Item.Tag(&quot;size&quot;, &quot;M&quot;), new Item.Tag(&quot;style&quot;, &quot;casual&quot;))), new Item(&quot;item2&quot;, 30, 8000, Arrays.asList(&quot;green&quot;, &quot;yellow&quot;), Arrays.asList(&quot;M&quot;, &quot;L&quot;, &quot;XL&quot;), Arrays.asList(new Item.Tag(&quot;color&quot;, &quot;blue&quot;), new Item.Tag(&quot;size&quot;, &quot;XL&quot;), new Item.Tag(&quot;style&quot;, &quot;formal&quot;))), new Item(&quot;item3&quot;, 25, 10000, Arrays.asList(&quot;red&quot;, &quot;green&quot;), Arrays.asList(&quot;L&quot;, &quot;XL&quot;), Arrays.asList(new Item.Tag(&quot;color&quot;, &quot;green&quot;), new Item.Tag(&quot;size&quot;, &quot;L&quot;), new Item.Tag(&quot;style&quot;, &quot;casual&quot;))) ); mongoTemplate.insertAll(items); &#125; @Test void testQueries() &#123; BasicTests2.QueryExecutor queryExecutor = new BasicTests2.QueryExecutor(mongoTemplate); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;) printResult(&quot;findAgeLessThan25&quot;, queryExecutor.findAgeLessThan25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;) printResult(&quot;findAgeLessThanOrEqualTo25&quot;, queryExecutor.findAgeLessThanOrEqualTo25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;) printResult(&quot;findAgeGreaterThan25&quot;, queryExecutor.findAgeGreaterThan25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;) printResult(&quot;findAgeGreaterThanOrEqualTo25&quot;, queryExecutor.findAgeGreaterThanOrEqualTo25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;) printResult(&quot;findAgeNotEqualTo25&quot;, queryExecutor.findAgeNotEqualTo25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;) printResult(&quot;findAgeInArray&quot;, queryExecutor.findAgeInArray(List.of(20, 25))); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;) printResult(&quot;findAgeNotInArray&quot;, queryExecutor.findAgeNotInArray(List.of(20, 25))); // db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) printResult(&quot;findAgeOrSalary&quot;, queryExecutor.findAgeOrSalary()); // db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) printResult(&quot;findAgeAndSalary&quot;, queryExecutor.findAgeAndSalary()); /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;, &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125; ]&#125;&#125;) */ printResult(&quot;findTagsWithColorAndSize&quot;, queryExecutor.findTagsWithColorAndSize()); // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;) printResult(&quot;findTagsWithColorContainingBlue&quot;, queryExecutor.findTagsWithColorContainingBlue()); // db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;) printResult(&quot;findTagsWithColor&quot;, queryExecutor.findTagsWithColor()); // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;) printResult(&quot;findDocumentWithTagsSizeThree&quot;, queryExecutor.findDocumentWithTagsSizeThree()); // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;) printResult(&quot;findDocumentWithSpecificTag&quot;, queryExecutor.findDocumentWithSpecificTag()); /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125; ]&#125;&#125;) */ printResult(&quot;findAllElementsWithSpecificTag&quot;, queryExecutor.findAllElementsWithSpecificTag()); printResult(&quot;findAllElementsWithSpecificTagByJson&quot;, queryExecutor.findAllElementsWithSpecificTagByJson()); &#125; private void printResult(String queryName, List&lt;Item&gt; result) &#123; System.out.println(&quot;Query: &quot; + queryName + &quot; ###################################################&quot;); for (Item item : result) &#123; System.out.println(item); &#125; System.out.println(); &#125; public static class QueryExecutor &#123; private final MongoTemplate mongoTemplate; public QueryExecutor(MongoTemplate mongoTemplate) &#123; this.mongoTemplate = mongoTemplate; &#125; // 查询年龄小于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;) public List&lt;Item&gt; findAgeLessThan25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).lt(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄小于等于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;) public List&lt;Item&gt; findAgeLessThanOrEqualTo25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).lte(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄大于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;) public List&lt;Item&gt; findAgeGreaterThan25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).gt(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄大于等于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;) public List&lt;Item&gt; findAgeGreaterThanOrEqualTo25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).gte(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄不等于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;) public List&lt;Item&gt; findAgeNotEqualTo25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).ne(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄存在并且在指定数组中的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;) public List&lt;Item&gt; findAgeInArray(List&lt;Integer&gt; ages) &#123; Query query = new Query(Criteria.where(&quot;age&quot;).in(ages)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄不存在或者不在指定数组中的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;) public List&lt;Item&gt; findAgeNotInArray(List&lt;Integer&gt; ages) &#123; Query query = new Query(Criteria.where(&quot;age&quot;).nin(ages)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄存在并且为 20，或者薪资大于 8000 的文档 // db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) public List&lt;Item&gt; findAgeOrSalary() &#123; Query query = new Query(new Criteria().orOperator( Criteria.where(&quot;age&quot;).is(20), Criteria.where(&quot;salary&quot;).gt(8000) )); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄为 20，并且薪资大于 8000 的文档 // db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) public List&lt;Item&gt; findAgeAndSalary() &#123; Query query = new Query(new Criteria().andOperator( Criteria.where(&quot;age&quot;).is(20), Criteria.where(&quot;salary&quot;).gt(8000) )); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签，并且包含 tagKey 为 &quot;size&quot;，tagValue 为 &quot;XL&quot; 的标签的文档 /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;, &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125; ]&#125;&#125;) */ public List&lt;Item&gt; findTagsWithColorAndSize() &#123; Criteria criteria = new Criteria().andOperator( Criteria.where(&quot;tags&quot;).elemMatch( Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).is(&quot;red&quot;) ), Criteria.where(&quot;tags&quot;).elemMatch( Criteria.where(&quot;tagKey&quot;).is(&quot;size&quot;).and(&quot;tagValue&quot;).is(&quot;XL&quot;) ) ); Query query = new Query(criteria); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询包含 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;blue&quot; 的标签的文档 // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;) public List&lt;Item&gt; findTagsWithColorContainingBlue() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).elemMatch( Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).regex(&quot;blue&quot;) )); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询包含 tagKey 为 &quot;color&quot; 的标签的文档 // db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;) public List&lt;Item&gt; findTagsWithColor() &#123; Query query = new Query(Criteria.where(&quot;tags.tagKey&quot;).is(&quot;color&quot;)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询 tags 数组长度为 3 的文档 // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;) public List&lt;Item&gt; findDocumentWithTagsSizeThree() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).size(3)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签的文档 // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;) public List&lt;Item&gt; findDocumentWithSpecificTag() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).elemMatch( Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).is(&quot;red&quot;) )); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档 /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125; ]&#125;&#125;) */ public List&lt;Item&gt; findAllElementsWithSpecificTag() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).elemMatch( Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).regex(&quot;green&quot;) )); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档 // 使用 BasicQuery，可以使用 json 字符串，这样就可以直接使用 mongo 的查询语法 public List&lt;Item&gt; findAllElementsWithSpecificTagByJson() &#123; String json = &quot;&quot;&quot; &#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125; ]&#125;&#125; &quot;&quot;&quot;; Query query = new BasicQuery(json); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; &#125;&#125; 常用的查询方法 查询所有文档 12// db.employee.find()List&lt;Employee&gt; list = mongoTemplate.findAll(Employee.class); 根据_id查询 12// db.employee.findOne(&#123; &quot;_id&quot;: 1 &#125;)|Employee e = mongoTemplate.findById(1, Employee.class); 查询第一个文档 12// db.employee.findOne(&#123;&#125;)Employee e = mongoTemplate.findOne(new Query(), Employee.class); 条件查询，排序及分页 12345678910111213141516171819202122232425262728293031/*db.employee.find(&#123; &quot;$or&quot;: [ &#123; &quot;username&quot;: &quot;张三&quot; &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 5000 &#125; &#125; ] &#125;).sort(&#123; &quot;salary&quot;: -1 &#125;).skip(2).limit(4)*/Query query = new Query(new Criteria().orOperator(Criteria.where(&quot;name&quot;).is(&quot;张三&quot;), Criteria.where(&quot;salary&quot;).gt(5000)););// 如果你不熟悉 Criteria，但是熟悉 mongo 的查询语法，可以使用 BasicQuery/* String json = &quot;&quot;&quot; &#123; &quot;$or&quot;: [ &#123; &quot;username&quot;: &quot;张三&quot; &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 5000 &#125; &#125; ] &#125; &quot;&quot;&quot;; Query query = new BasicQuery(json);*///skip limit 分页 skip用于指定跳过记录数，limit则用于限定返回结果数量。query.with(Sort.by(Sort.Order.desc(&quot;salary&quot;))) .skip(2) //指定跳过记录数 .limit(4); //每页显示记录数//查询结果List&lt;Employee&gt; employees = mongoTemplate.find( query, Employee.class); 只返回部分字段 123456789101112/*db.employee.find( &#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 18 &#125; &#125;, // 筛选条件，年龄大于等于18岁的文档 &#123; &quot;name&quot;: 1, &quot;age&quot;: 1 &#125; // 指定返回的字段，只包含&quot;name&quot;和&quot;age&quot;，其中1表示包含该字段，0表示不包含)*/Query query = new Query();query.addCriteria(Criteria.where(&quot;age&quot;).gte(18)); // 筛选条件，年龄大于等于18岁的文档query.fields().include(&quot;name&quot;, &quot;age&quot;).exclude(&quot;id&quot;);// 指定返回的字段，只包含&quot;name&quot;和&quot;age&quot;，要去除id，否则默认会返回idList&lt;Employee&gt; results = mongoTemplate.find(query, Employee.class);// Employee(id=null, name=张三, age=21, salary=null, entryDay=null)results.forEach(System.out::println); 去重 distinct 方法只能直接获取唯一值，并不能在查询过程中进行其他的聚合操作，使用场景非常受限，推荐使用聚合方式进行查询 12345678910111213141516171819202122232425262728293031323334353637383940414243//语法：db.collectionName.distinct(&quot;fieldName&quot;, &#123; /* 过滤条件 */ &#125;)，这将返回指定字段 fieldName 的唯一值数组。// 示例：db.collection.distinct(&quot;name&quot;,&#123;age:&#123;$gte:25&#125;&#125;)// 方式1DistinctIterable&lt;String&gt; distinctIterable = mongoTemplate.getCollection(&quot;collection&quot;) .distinct(&quot;name&quot;, BsonDocument.parse(&quot;&#123;age:&#123;$gte:25&#125;&#125;&quot;), String.class);// 方式2// DistinctIterable&lt;String&gt; distinctIterable = mongoTemplate.getCollection(&quot;collection&quot;)// .distinct(&quot;name&quot;, new Document(&quot;age&quot;, new Document(&quot;$gte&quot;, 25)), String.class);// 将DistinctIterable转换为ListList&lt;String&gt; distinctNames = new ArrayList&lt;&gt;();distinctIterable.iterator().forEachRemaining(distinctNames::add);// 打印输出distinctNames.forEach(System.out::println);// 聚合方式，聚合方式的详细说明会在下一篇博客中介绍/* db.collection.aggregate([ &#123; $match: &#123; age: &#123; $gte: 25 &#125; &#125; &#125;, &#123; $group: &#123; _id: &quot;$name&quot; &#125; &#125; ])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.match(Criteria.where(&quot;age&quot;).gte(25)), Aggregation.group(&quot;name&quot;) ); AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;collection&quot;, Document.class); List&lt;String&gt; distinctNames = results.getMappedResults().stream() .map(document -&gt; document.getString(&quot;_id&quot;)) .toList(); distinctNames.forEach(System.out::println); SpringBoot对Mongo的查询，其实就是如何通过Criteria来构建一个Query，所以我们的目标就是要熟练掌握Criteria的语法。当然，如果你熟悉Mongo的查询语法，也可以直接使用BasicQuery来实现Mongo的查询。 插入 Mongo语法 1234567891011121314151617181920212223# 插入单个文档db.collection.insertOne( &lt;document&gt;, &#123; writeConcern: &lt;document&gt; &#125;)# 示例db.demo.insertOne( &#123; name: &quot;张三&quot;, age: 35&#125;, &#123; writeConcern: &#123; w: &quot;majority&quot;, j: true, wtimeout: 5000 &#125; &#125;)# 插入多个文档db.collection.insertMany( [ &lt;document 1&gt; , &lt;document 2&gt;, ... ], &#123; writeConcern: &lt;document&gt;, ordered: &lt;boolean&gt; &#125;) writeConcern 是 MongoDB 中用来控制写入确认的选项，可选。以下是 writeConcern 参数的一些常见选项： w：指定写入确认级别。如果指定为数字，则表示要等待写入操作完成的节点数。如果指定为 majority，则表示等待大多数节点完成写入操作。默认为 1，表示等待写入操作完成的节点数为 1。 j：表示写入操作是否要求持久化到磁盘。如果设置为 true，则表示写入操作必须持久化到磁盘后才返回成功。如果设置为 false，则表示写入操作可能在数据被持久化到磁盘之前返回成功。默认为 false。 wtimeout：表示等待写入操作完成的超时时间，单位为毫秒。如果超过指定的时间仍然没有返回确认信息，则返回错误。默认为 0，表示不设置超时时间。 ordered：指定是否按顺序写入，默认 true，按顺序写入。 插入单个文档 1234567891011/* db.employee.insertOne(&#123; &quot;_id&quot;: 1, &quot;username&quot;: &quot;小明&quot;, &quot;age&quot;: 30, &quot;salary&quot;: 10000.00, &quot;entryDay&quot;: new Date() &#125;)*/Employee employee = new Employee(1, &quot;小明&quot;, 30, 10000.00, new Date());mongoTemplate.insert(employee); 插入多个文档 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/* db.employee.insertMany([ &#123; &quot;_id&quot;: 2, &quot;username&quot;: &quot;张三&quot;, &quot;age&quot;: 21, &quot;salary&quot;: 5000.00, &quot;entryDay&quot;: new Date() &#125;, &#123; &quot;_id&quot;: 3, &quot;username&quot;: &quot;李四&quot;, &quot;age&quot;: 26, &quot;salary&quot;: 8000.00, &quot;entryDay&quot;: new Date() &#125;, &#123; &quot;_id&quot;: 4, &quot;username&quot;: &quot;王五&quot;, &quot;age&quot;: 22, &quot;salary&quot;: 8000.00, &quot;entryDay&quot;: new Date() &#125;, &#123; &quot;_id&quot;: 5, &quot;username&quot;: &quot;张龙&quot;, &quot;age&quot;: 28, &quot;salary&quot;: 6000.00, &quot;entryDay&quot;: new Date() &#125;, &#123; &quot;_id&quot;: 6, &quot;username&quot;: &quot;赵虎&quot;, &quot;age&quot;: 24, &quot;salary&quot;: 7000.00, &quot;entryDay&quot;: new Date() &#125;, &#123; &quot;_id&quot;: 7, &quot;username&quot;: &quot;赵六&quot;, &quot;age&quot;: 28, &quot;salary&quot;: 12000.00, &quot;entryDay&quot;: new Date() &#125; ])*/List&lt;Employee&gt; list = Arrays.asList( new Employee(2, &quot;张三&quot;, 21, 5000.00, new Date()), new Employee(3, &quot;李四&quot;, 26, 8000.00, new Date()), new Employee(4, &quot;王五&quot;, 22, 8000.00, new Date()), new Employee(5, &quot;张龙&quot;, 28, 6000.00, new Date()), new Employee(6, &quot;赵虎&quot;, 24, 7000.00, new Date()), new Employee(7, &quot;赵六&quot;, 28, 12000.00, new Date()));//插入多条数据mongoTemplate.insert(list, Employee.class); id存在时更新，不存在时插入 1234567891011121314151617/* db.employee.updateOne( &#123; &quot;_id&quot;: 1 &#125;, &#123; $set: &#123; &quot;name&quot;: &quot;小明&quot;, &quot;age&quot;: 30, &quot;salary&quot;: 10000.00, &quot;entryDay&quot;: ISODate(&quot;2024-03-05T00:00:00Z&quot;) &#125; &#125;, &#123; upsert: true &#125;)*/Employee employee = new Employee(1, &quot;小明&quot;, 30, 10000.00, new Date());//save方法会根据对象的id是否存在来判断是更新还是插入mongoTemplate.save(employee); 更新 Mongo语法 123456789101112131415161718192021222324252627282930# 更新单个或多个文档db.collection.update[One|Many]( &lt;filter&gt;, &lt;update&gt;, &#123; upsert: &lt;boolean&gt;, writeConcern: &lt;document&gt;, collation: &lt;document&gt;, arrayFilters: [ &lt;filterdocument1&gt;, ... ], hint: &lt;document|string&gt; // Available starting in MongoDB 4.2.1 &#125;)# findAndModify,只能更新单个文档db.collection.findAndModify(&#123; query:&lt;filter&gt;, update:&lt;update&gt;&#125;)# 示例，该操作会返回符合查询条件的文档数据，并完成对文档的修改# 将某个book文档的收藏数（favCount）加1db.books.findAndModify(&#123; query:&#123;_id:ObjectId(&quot;6457a39c817728350ec83b9d&quot;)&#125;, update:&#123;$inc:&#123;favCount:1&#125;&#125;&#125;)# 默认情况下，findAndModify会返回修改前的“旧”数据。如果希望返回修改后的数据，则可以指定new选项db.books.findAndModify(&#123; query:&#123;_id:ObjectId(&quot;6457a39c817728350ec83b9d&quot;)&#125;, update:&#123;$inc:&#123;favCount:1&#125;&#125;, new: true&#125;) 参数 描述 &lt;filter&gt; 一个筛选器对象，用于指定要更新的文档。 &lt;update&gt; 一个更新操作对象，用于指定如何更新文档。可以使用一些操作符，例如$set、$inc、$unset等，以更新文档中的特定字段。 upsert 一个布尔值，用于指定如果找不到与筛选器匹配的文档时是否应插入一个新文档。如果upsert为true，则会插入一个新文档。默认值为false。 writeConcern 一个文档，用于指定写入操作的安全级别。可以指定写入操作需要到达的节点数或等待写入操作的时间。 collation 一个文档，用于指定用于查询的排序规则。例如，可以通过指定locale属性来指定语言环境，从而实现基于区域设置的排序。 arrayFilters 一个数组，用于指定要更新的数组元素。数组元素是通过使用更新操作符$[]和$来指定的。 hint 一个文档或字符串，用于指定查询使用的索引。该参数仅在MongoDB 4.2.1及以上版本中可用。 更新操作符 操作符 格式 描述 $set { $set: { field: value } } 指定一个键并更新值，若键不存在则创建。 $unset { $unset : { field : 1 } } 删除一个键。 $inc { $inc : { field : value } } 对数值类型进行增减。 $rename { $rename : { old_field_name : new_field_name } } 修改字段名称。 $push { $push : { field : value } } 将数值追加到数组中，若数组不存在则会进行初始化。 $pushAll { $pushAll : { field : value_array } } 追加多个值到一个数组字段内。 $pull { $pull : { field : _value } } 从数组中删除指定的元素。 $addToSet { $addToSet : { field : value } } 添加元素到数组中，具有排重功能。 $pop { $pop : { field : 1 } } 删除数组的第一个或最后一个元素。 只更新满足条件的第一条记录 12345678910111213/* db.employee.updateOne( &#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 8000 &#125; &#125;, &#123; &quot;$set&quot;: &#123; &quot;salary&quot;: 13000 &#125; &#125; ) */Query query = new Query(Criteria.where(&quot;salary&quot;).gte(8000));Update update = new Update();//设置更新属性update.set(&quot;salary&quot;, 13000);UpdateResult updateResult = mongoTemplate.updateFirst(query, update, Employee.class);//返回修改的记录数System.out.println(updateResult.getModifiedCount()); 更新所有满足条件的记录 12345678910111213/* db.employee.updateMany( &#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 8000 &#125; &#125;, &#123; &quot;$set&quot;: &#123; &quot;salary&quot;: 13000 &#125; &#125; )*/Query query = new Query(Criteria.where(&quot;salary&quot;).gte(8000));Update update = new Update();//设置更新属性update.set(&quot;salary&quot;, 13000);UpdateResult updateResult = mongoTemplate.updateMulti(query, update, Employee.class);//返回修改的记录数System.out.println(updateResult.getModifiedCount()); 没有符合条件的记录则插入数据 123456789101112131415/* db.employee.updateOne( &#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 8000 &#125; &#125;, &#123; &quot;$set&quot;: &#123; &quot;salary&quot;: 13000 &#125;, &quot;$setOnInsert&quot;: &#123; &quot;id&quot;: 11 &#125; &#125;, &#123; &quot;upsert&quot;: true &#125; )*/Query query = new Query(Criteria.where(&quot;salary&quot;).gte(8000));Update update = new Update();//设置更新属性update.set(&quot;salary&quot;, 13000);update.setOnInsert(&quot;id&quot;,11); //指定_id，只有没有匹配到时才插入UpdateResult updateResult = mongoTemplate.upsert(query, update, Employee.class);//返回修改的记录数System.out.println(updateResult.getModifiedCount()); 替换 Mongo语法 1234567891011db.collection.replaceOne( &lt;filter&gt;, &lt;replacement&gt;, &#123; upsert: &lt;boolean&gt;, writeConcern: &lt;document&gt;, collation: &lt;document&gt;, hint: &lt;document|string&gt; &#125;) replaceOne操作会首先使用指定的筛选条件来查找匹配的文档，然后用提供的新文档完全替换掉原始文档，也就是说replaceOne是整体替换，而不是修改文档中的某些字段。 参数 描述 &lt;filter&gt; 一个筛选器对象，用于指定要替换的文档。只有与筛选器对象匹配的第一个文档才会被替换。 &lt;replacement&gt; 一个替换文档对象，用于指定用于替换原始文档的新文档。替换文档必须包含所有要在原始文档中修改或替换的字段。 upsert 一个布尔值，表示如果找不到与筛选器匹配的文档时是否应插入一个新文档。如果设置为true，则会插入一个新文档。默认为false。 writeConcern 一个文档，用于指定写入操作的安全级别。可以指定写入操作需要到达的节点数或等待写入操作的时间。 collation 一个文档，用于指定用于查询的排序规则。例如，可以通过指定locale属性来指定语言环境，从而实现基于区域设置的排序。 hint 一个文档或字符串，用于指定查询使用的索引。该参数仅在MongoDB 4.2.1及以上版本中可用 示例 1234567891011121314/*db.collection.replaceOne( &#123; &quot;name&quot;: &quot;John&quot; &#125;, // 筛选条件，匹配name为John的文档 &#123; // 替换文档，用于替换匹配到的文档 &quot;name&quot;: &quot;Peter&quot;, // 新的name字段值为Peter &quot;age&quot;: 30 // 新增age字段，值为30 &#125;)*/Query query = new Query(Criteria.where(&quot;name&quot;).is(&quot;John&quot;));Employee replacement = new Employee();replacement.setName(&quot;Peter&quot;);replacement.setAge(30);mongoTemplate.findAndReplace(query, replacement); 删除 Mongo语法 12345678# 按条件删除多个文档db.collection.deleteMany(&lt;filter&gt;)# 按条件删除单个文档db.collection.deleteOne(&lt;filter&gt;)# 先查询后删除，返回查询条件对应的文档，sort是可选项db.collection.findOneAndDelete(&lt;filter&gt;,&#123;sort:&#123;field:1&#125;&#125;) 删除所有文档 123456// db.employee.deleteMany(&#123;&#125;)mongoTemplate.remove(new Query(),Employee.class);// db.employee.drop()// 清空数据也可以使用drop方法，但是这样会删除索引mongoTemplate.dropCollection(Employee.class); 按条件删除文档 123// db.employee.deleteMany(&#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 10000 &#125; &#125;)Query query = new Query(Criteria.where(&quot;salary&quot;).gte(10000));mongoTemplate.remove(query, Employee.class); 删除查询到的第一个文档 1234// db.employee.deleteOne(&#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 10000 &#125; &#125;)Query query = new Query(Criteria.where(&quot;salary&quot;).gte(10000));query.limit(1);mongoTemplate.remove(query, Employee.class); 批量操作 bulkwrite()方法提供了执行批量插入、更新和删除操作的能力。 bulkWrite()支持以下写操作: insertOne updateOne updateMany replaceOne deleteOne deleteMany 示例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192package com.hanqf;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.annotation.Id;import org.springframework.data.mongodb.core.BulkOperations;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.data.mongodb.core.mapping.Document;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import java.util.Arrays;@SpringBootTestclass BulkWriteTests &#123; @Autowired private MongoTemplate mongoTemplate; /* db.pizzas.insertMany( [ &#123; _id: 0, type: &quot;pepperoni&quot;, size: &quot;small&quot;, price: 4 &#125;, &#123; _id: 1, type: &quot;cheese&quot;, size: &quot;medium&quot;, price: 7 &#125;, &#123; _id: 2, type: &quot;vegan&quot;, size: &quot;large&quot;, price: 8 &#125; ] ) */ @Test void insertManyPizzas() &#123; mongoTemplate.insertAll(Arrays.asList( new Pizza(0, &quot;pepperoni&quot;, &quot;small&quot;, 4), new Pizza(1, &quot;cheese&quot;, &quot;medium&quot;, 7), new Pizza(2, &quot;vegan&quot;, &quot;large&quot;, 8) )); &#125; /* db.pizzas.bulkWrite( [ &#123; insertOne: &#123; document: &#123; _id: 3, type: &quot;beef&quot;, size: &quot;medium&quot;, price: 6 &#125; &#125; &#125;, &#123; insertOne: &#123; document: &#123; _id: 4, type: &quot;sausage&quot;, size: &quot;large&quot;, price: 10 &#125; &#125; &#125;, &#123; updateOne: &#123; filter: &#123; type: &quot;cheese&quot; &#125;, update: &#123; $set: &#123; price: 8 &#125; &#125; &#125; &#125;, &#123; deleteOne: &#123; filter: &#123; type: &quot;pepperoni&quot;&#125; &#125; &#125;, &#123; replaceOne: &#123; filter: &#123; type: &quot;vegan&quot; &#125;, replacement: &#123; type: &quot;tofu&quot;, size: &quot;small&quot;, price: 4 &#125; &#125; &#125; ] ) */ @Test void performBulkWrite() &#123; BulkOperations bulkOperations = mongoTemplate.bulkOps(BulkOperations.BulkMode.ORDERED, Pizza.class); bulkOperations.insert(Arrays.asList( new Pizza(3, &quot;beef&quot;, &quot;medium&quot;, 6), new Pizza(4, &quot;sausage&quot;, &quot;large&quot;, 10) )); bulkOperations.updateOne( Query.query(Criteria.where(&quot;type&quot;).is(&quot;cheese&quot;)), new Update().set(&quot;price&quot;, 8) ); bulkOperations.remove( Query.query(Criteria.where(&quot;type&quot;).is(&quot;pepperoni&quot;)).limit(1) ); bulkOperations.replaceOne( Query.query(Criteria.where(&quot;type&quot;).is(&quot;vegan&quot;)), new Pizza(null, &quot;tofu&quot;, &quot;small&quot;, 4) ); bulkOperations.execute(); &#125; @Data @AllArgsConstructor @NoArgsConstructor @Document(&quot;pizza&quot;) private static class Pizza &#123; @Id private Integer _id; private String type; private String size; private Integer price; &#125;&#125;","summary":"摘要 本文介绍如何使用SpringBoot实现MongoDB7.0的单集合的CURD操作 SpringBoot版本3.2.3，MongoDB版本7.0.6 MongoDB CRUD Operations SQL to MongoDB Mapping Chart MongoDB7.0--SpringBoot聚合操作","date_published":"2024-03-05T13:30:05.000Z","tags":["技术","linux","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/03/01/mongodb7/","url":"https://blog.hanqunfeng.com/2024/03/01/mongodb7/","title":"MongoDB7.0的安装","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍Linux下MongoDB7.0的安装</p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB<a href=\"https://www.mongodb.com/docs/v7.0/\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>CentOS8(x86_64)</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"MongoDB-7-0新特性\">MongoDB 7.0新特性</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>2024年8月15日，MongoDB正式发布7.0版本，截止目前最新版本为7.0.6。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/v7.0/release-notes/7.0/\">MongoDB7.0特性</a></p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://help.aliyun.com/zh/mongodb/product-overview/features-of-mongodb-7-0?spm=a2c4g.11186623.0.0.2acc36f3yP2Mr9\">阿里云关于MongoDB7.0的特性说明</a>，该文档中也包含MongoDB其它版本的特性说明</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/legal/support-policy/lifecycles\">MongoDB Software Lifecycle Schedules</a></p>\n</li>\n</ul>\n<h2 id=\"安装MongoDB\">安装MongoDB</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>mongodb的安装方法可以查看<a href=\"https://www.mongodb.com/docs/v7.0/administration/install-community/\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/try/download/community\">MongoDB下载地址</a>，选择合适的版本、平台和包类型</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载MongoDB</span></span><br><span class=\"line\">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-7.0.6.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf mongodb-linux-x86_64-rhel80-7.0.6.tgz</span><br><span class=\"line\"><span class=\"comment\"># 方便起见，创建软连接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s mongodb-linux-x86_64-rhel80-7.0.6 mongodb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改/etc/profile，添加环境变量，方便执行MongoDB命令</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> MONGODB_HOME=/usr/local/soft/mongodb</span><br><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$MONGODB_HOME</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#重新加载环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看版本，检查命令是否可用</span></span><br><span class=\"line\">mongod --version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建dbpath和logpath的存储目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mongodb/data /mongodb/log</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装mongoDB时可能遇到的问题\">安装mongoDB时可能遇到的问题</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<ol>\n<li class=\"lvl-5\">启动mongodb服务时，提示<code>mongod: error while loading shared libraries: libcrypto.so.1.1: cannot open shared object file: No such file or directory</code></li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>解决方法：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget  https://www.openssl.org/source/openssl-1.1.1w.tar.gz</span><br><span class=\"line\">tar -zxvf openssl-1.1.1w.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> openssl-1.1.1w</span><br><span class=\"line\">./config</span><br><span class=\"line\"><span class=\"comment\"># 如果make时提示 /bin/sh: gcc: command not found，需要先安装gcc：sudo yum install gcc -y</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/lib64/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/lib64/libssl.so.1.1 /usr/lib64/libssl.so.1.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动mongodb服务\">启动mongodb服务</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>命令参数启动</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --port=27017 --dbpath=/mongodb/data --logpath=/mongodb/log/mongodb.log --bind_ip=0.0.0.0 --fork</span><br><span class=\"line\">    <span class=\"comment\"># 参数说明</span></span><br><span class=\"line\">    --port: 指定端口，默认为27017</span><br><span class=\"line\">    --dbpath: 指定数据文件存放目录</span><br><span class=\"line\">    --logpath: 指定日志文件，注意是指定文件不是目录</span><br><span class=\"line\">    --bind_ip: 默认只监听localhost网卡</span><br><span class=\"line\">    --fork: 后台启动</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>也可以将上面的参数写到配置文件中，如<code>/mongodb/conf/mongo.conf</code>文件，必须是yaml格式</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">systemLog:</span></span><br><span class=\"line\">  <span class=\"attr\">destination:</span> <span class=\"string\">file</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">/mongodb/log/mongodb.log</span> <span class=\"comment\"># log path</span></span><br><span class=\"line\">  <span class=\"attr\">logAppend:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">dbPath:</span> <span class=\"string\">/mongodb/data</span> <span class=\"comment\"># data directory</span></span><br><span class=\"line\">  <span class=\"attr\">engine:</span> <span class=\"string\">wiredTiger</span>  <span class=\"comment\">#存储引擎，默认值就是wiredTiger</span></span><br><span class=\"line\">  <span class=\"attr\">journal:</span>            <span class=\"comment\">#journal日志配置</span></span><br><span class=\"line\">    <span class=\"attr\">commitIntervalMs:</span> <span class=\"number\">100</span> <span class=\"comment\">#mongod进程在日志操作之间允许的最大时间（以毫秒为单位）。值可以从1到500毫秒不等。较低的值会增加日志的耐用性，而牺牲了磁盘性能。在WiredTiger上，默认的日志提交间隔是100毫秒。此外，包含或暗示j:true的写入将导致期刊立即同步。</span></span><br><span class=\"line\"><span class=\"attr\">net:</span></span><br><span class=\"line\">  <span class=\"attr\">bindIp:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\"><span class=\"attr\">processManagement:</span></span><br><span class=\"line\">  <span class=\"attr\">fork:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将命令行参数直接转换为yaml:<code>--outputConfig</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongod --port=27017 --dbpath=/mongodb/data --logpath=/mongodb/log/mongodb.log --bind_ip=0.0.0.0 --fork --outputConfig</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">net:</span></span><br><span class=\"line\">  <span class=\"attr\">bindIp:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\"><span class=\"attr\">outputConfig:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">processManagement:</span></span><br><span class=\"line\">  <span class=\"attr\">fork:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">dbPath:</span> <span class=\"string\">/mongodb/data</span></span><br><span class=\"line\"><span class=\"attr\">systemLog:</span></span><br><span class=\"line\">  <span class=\"attr\">destination:</span> <span class=\"string\">file</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">/mongodb/log/mongodb.log</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>删除<code>outputConfig: true</code>这一行，然后将其余内容复制到mongo.conf中</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>关于配置参数的详细信息可以查看<a href=\"https://www.mongodb.com/docs/v7.0/reference/configuration-options/\">官方文档</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动mongo服务</span></span><br><span class=\"line\">mongod -f /mongodb/conf/mongo.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭mongo服务，注意：macos下不支持 --shutdown</span></span><br><span class=\"line\">mongod -f /mongodb/conf/mongo.conf --shutdown</span><br></pre></td></tr></table></figure>\n<h2 id=\"shell客户端mongosh\">shell客户端mongosh</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>从mongodb6开始不再支持mongo命令，而是需要使用mongosh命令，关于mongosh命令的使用可以查看<a href=\"https://www.mongodb.com/docs/mongodb-shell/\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>mongosh命令的使用方式与mongo命令基本一致</p>\n</li>\n<li class=\"lvl-2\">\n<p>下载地址：<a href=\"https://www.mongodb.com/try/download/shell\">mongosh下载地址</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载安装包</span></span><br><span class=\"line\"><span class=\"comment\"># openssl11是centos7的版本，目前支持centos8，但更推荐使用centos8时下载openssl3的版本</span></span><br><span class=\"line\">wget https://downloads.mongodb.com/compass/mongosh-2.2.2-linux-x64-openssl11.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf mongosh-2.2.2-linux-x64-openssl11.tgz</span><br><span class=\"line\"><span class=\"comment\"># 创建软连接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s mongosh-2.2.2-linux-x64-openssl11 mongosh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改/etc/profile，添加环境变量，方便执行MongoShell命令</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> MONGODB_SHELL_HOME=/usr/local/soft/mongosh</span><br><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$MONGODB_SHELL_HOME</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#重新加载环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">mongosh --version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接mongodb server端</span></span><br><span class=\"line\">mongosh --host=127.0.0.1 --port=27017</span><br><span class=\"line\"><span class=\"comment\"># --host: mongodb server端ip地址</span></span><br><span class=\"line\"><span class=\"comment\"># --port: mongodb server端口</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>mongosh常用命令</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>show dbs 或 show databases</td>\n<td>显示数据库</td>\n</tr>\n<tr>\n<td>use 数据库名</td>\n<td>切换数据库，如果不存在创建数据库</td>\n</tr>\n<tr>\n<td>db.dropDatabase()</td>\n<td>删除数据库</td>\n</tr>\n<tr>\n<td>show collections 或 show tables</td>\n<td>显示当前数据库的集合列表</td>\n</tr>\n<tr>\n<td>db.集合名.stats()</td>\n<td>查看集合详情</td>\n</tr>\n<tr>\n<td>db.集合名.drop()</td>\n<td>删除集合</td>\n</tr>\n<tr>\n<td>show users</td>\n<td>显示当前数据库的用户列表</td>\n</tr>\n<tr>\n<td>show roles</td>\n<td>显示当前数据库的角色列表</td>\n</tr>\n<tr>\n<td>show profile</td>\n<td>显示最近发生的操作</td>\n</tr>\n<tr>\n<td>load(“xxx.js”)</td>\n<td>执行一个JavaScript脚本文件</td>\n</tr>\n<tr>\n<td>exit 或 quit</td>\n<td>退出</td>\n</tr>\n<tr>\n<td>help</td>\n<td>查看mongodb支持哪些命令</td>\n</tr>\n<tr>\n<td>db.help()</td>\n<td>查询当前数据库支持的方法</td>\n</tr>\n<tr>\n<td>db.集合名.help()</td>\n<td>显示集合的帮助信息</td>\n</tr>\n<tr>\n<td>db.version()</td>\n<td>查看数据库版本</td>\n</tr>\n<tr>\n<td>cls</td>\n<td>清屏</td>\n</tr>\n<tr>\n<td>db.shutdownServer()</td>\n<td>关闭mongodb server端</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安全认证\">安全认证</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建管理员</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置管理员用户名密码需要切换到admin库</span></span><br><span class=\"line\">use admin</span><br><span class=\"line\"><span class=\"comment\">#显示可设置权限</span></span><br><span class=\"line\">show roles</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建管理员，授予root角色</span></span><br><span class=\"line\">db.createUser(&#123;user:<span class=\"string\">&quot;root&quot;</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">&quot;password&quot;</span>,roles:[<span class=\"string\">&quot;root&quot;</span>]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前数据库所有用户信息</span></span><br><span class=\"line\">show <span class=\"built_in\">users</span></span><br><span class=\"line\"><span class=\"comment\">#显示所有用户</span></span><br><span class=\"line\">db.system.users.find()</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用角色</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>权限名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>read</td>\n<td>允许用户读取指定数据库</td>\n</tr>\n<tr>\n<td>readWrite</td>\n<td>允许用户读写指定数据库</td>\n</tr>\n<tr>\n<td>dbAdmin</td>\n<td>允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</td>\n</tr>\n<tr>\n<td>dbOwner</td>\n<td>允许用户在指定数据库中执行任意操作，增、删、改、查等</td>\n</tr>\n<tr>\n<td>userAdmin</td>\n<td>允许用户向system.users集合写入，可以在指定数据库里创建、删除和管理用户</td>\n</tr>\n<tr>\n<td>clusterAdmin</td>\n<td>只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</td>\n</tr>\n<tr>\n<td>readAnyDatabase</td>\n<td>只在admin数据库中可用，赋予用户所有数据库的读权限</td>\n</tr>\n<tr>\n<td>readWriteAnyDatabase</td>\n<td>只在admin数据库中可用，赋予用户所有数据库的读写权限</td>\n</tr>\n<tr>\n<td>userAdminAnyDatabase</td>\n<td>只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</td>\n</tr>\n<tr>\n<td>dbAdminAnyDatabase</td>\n<td>只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限</td>\n</tr>\n<tr>\n<td>root</td>\n<td>只在admin数据库中可用。超级账号，超级权限</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建数据库用户</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin&gt; use mydb</span><br><span class=\"line\">switched to db mydb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认认证数据库为当前数据库，下面的授权等同于 &#123; role: &#x27;dbOwner&#x27;, db: &#x27;mydb&#x27; &#125;</span></span><br><span class=\"line\">mydb&gt; db.createUser(&#123;user:<span class=\"string\">&quot;mytest&quot;</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">&quot;123456&quot;</span>,roles:[<span class=\"string\">&quot;dbOwner&quot;</span>]&#125;)</span><br><span class=\"line\">&#123; ok: 1 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前数据库下的用户</span></span><br><span class=\"line\">mydb&gt; show <span class=\"built_in\">users</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: <span class=\"string\">&#x27;mydb.mytest&#x27;</span>,</span><br><span class=\"line\">    userId: UUID(<span class=\"string\">&#x27;8bc42a74-5d84-4849-af25-09fdcbdfd03a&#x27;</span>),</span><br><span class=\"line\">    user: <span class=\"string\">&#x27;mytest&#x27;</span>,</span><br><span class=\"line\">    db: <span class=\"string\">&#x27;mydb&#x27;</span>,</span><br><span class=\"line\">    roles: [ &#123; role: <span class=\"string\">&#x27;dbOwner&#x27;</span>, db: <span class=\"string\">&#x27;mydb&#x27;</span> &#125; ],</span><br><span class=\"line\">    mechanisms: [ <span class=\"string\">&#x27;SCRAM-SHA-1&#x27;</span>, <span class=\"string\">&#x27;SCRAM-SHA-256&#x27;</span> ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>重置用户密码</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mydb&gt; db.changeUserPassword(<span class=\"string\">&quot;mytest&quot;</span>, <span class=\"string\">&quot;password&quot;</span>)</span><br><span class=\"line\">&#123; ok: 1 &#125;</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">mydb&gt; db.updateUser(<span class=\"string\">&quot;mytest&quot;</span>, &#123;<span class=\"built_in\">pwd</span>: <span class=\"string\">&quot;password&quot;</span>&#125;)</span><br><span class=\"line\">&#123; ok: 1 &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>为用户添加角色</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设已经创建了用户mytest，需要重新赋予其角色</span></span><br><span class=\"line\">mydb&gt; db.grantRolesToUser( <span class=\"string\">&quot;mytest&quot;</span> , [</span><br><span class=\"line\"> &#123; role: <span class=\"string\">&quot;dbAdmin&quot;</span>, db: <span class=\"string\">&quot;mydb&quot;</span> &#125; ,</span><br><span class=\"line\"> &#123; role: <span class=\"string\">&quot;userAdmin&quot;</span>, db: <span class=\"string\">&quot;mydb&quot;</span>&#125;</span><br><span class=\"line\"> ])</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除用户的指定角色</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mydb&gt; db.revokeRolesFromUser( <span class=\"string\">&quot;mytest&quot;</span> , [</span><br><span class=\"line\">  &#123; role: <span class=\"string\">&quot;dbAdmin&quot;</span>, db: <span class=\"string\">&quot;mydb&quot;</span> &#125;</span><br><span class=\"line\">  ])</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除用户</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mydb&gt; db.dropUser(<span class=\"string\">&quot;mytest&quot;</span>)</span><br><span class=\"line\">&#123; ok: 1 &#125;</span><br><span class=\"line\">mydb&gt; show <span class=\"built_in\">users</span></span><br><span class=\"line\">[]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除全部用户</span></span><br><span class=\"line\">mydb&gt; db.dropAllUsers()</span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB启用鉴权\">MongoDB启用鉴权</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>默认情况下，MongoDB不会启用鉴权，以鉴权模式启动MongoDB有两种方法</p>\n</li>\n</ul>\n<blockquote>\n<p>命令行参数增加 <code>--auth</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod -f /mongodb/conf/mongo.conf --auth</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置文件中加上如下内容</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\">  <span class=\"attr\">authorization:</span> <span class=\"string\">enabled</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>启用鉴权之后，连接MongoDB的相关操作都需要提供身份认证</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongosh --host=127.0.0.1 --port=27017 -u root -p password --authenticationDatabase=admin</span><br><span class=\"line\"><span class=\"comment\"># -u: 用户名</span></span><br><span class=\"line\"><span class=\"comment\"># -p: 密码</span></span><br><span class=\"line\"><span class=\"comment\"># --authenticationDatabase: 指定认证数据库</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"mongosh连接mongodb-server端的方式\">mongosh连接mongodb server端的方式</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>参数方式</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以通过 mongosh --help 查看帮助</span></span><br><span class=\"line\">mongosh --host=127.0.0.1 --port=27017 -u root -p password --authenticationDatabase=admin</span><br><span class=\"line\"><span class=\"comment\"># 指定连接的数据库，这里指定连接到mydb数据库，如果不指定，默认连接到test数据库</span></span><br><span class=\"line\">mongosh mydb --host=127.0.0.1 --port=27017 -u root -p password --authenticationDatabase=admin</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>混合方式</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ip+端口方式连接</span></span><br><span class=\"line\">mongosh 127.0.0.1:27017</span><br><span class=\"line\"><span class=\"comment\"># ip+端口方式连接，后面可以加上各种参数配置</span></span><br><span class=\"line\">mongosh 127.0.0.1:27017 -u root -p password --authenticationDatabase=admin</span><br><span class=\"line\"><span class=\"comment\"># ip+端口方式连接，同时可以指定连接的数据库，这里指定连接到mydb数据库，如果不指定，默认连接到test数据库</span></span><br><span class=\"line\">mongosh 127.0.0.1:27017/mydb</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>uri方式</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongosh mongodb://127.0.0.1:27017</span><br><span class=\"line\"><span class=\"comment\"># 指定连接数据库</span></span><br><span class=\"line\">mongosh mongodb://127.0.0.1:27017/mydb</span><br><span class=\"line\"><span class=\"comment\"># 带认证方式连接</span></span><br><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://root:password@127.0.0.1:27017/mydb?authSource=admin&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 带认证方式连接，同时指定readPreference为primaryPreferred，即读取数据时优先从主节点读取数据</span></span><br><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://root:password@127.0.0.1:27019/mydb?authSource=admin&amp;readPreference=primaryPreferred&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>如果只是连接本机的server端，而且端口为27017，可以省略host和port</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongosh</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决连接MongoDB时出现的-vm-max-map-count-is-too-low-的问题\">解决连接MongoDB时出现的 vm.max_map_count is too low 的问题</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>默认的<code>vm.max_map_count</code>值为<code>65530</code>，如果需要开启MongoDB的分片功能，需要将<code>vm.max_map_count</code>设置为较高的值，通常推荐为<code>1048576</code></p>\n</li>\n<li class=\"lvl-2\">\n<p>查看当前<code>vm.max_map_count</code>的值</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl vm.max_map_count</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>临时增加<code>vm.max_map_count</code>的值</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -w vm.max_map_count=1048576</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>永久增加<code>vm.max_map_count</code>的值</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改/etc/sysctl.conf文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;vm.max_map_count = 1048576&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"comment\"># 使配置生效</span></span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>重启MongoDB才会生效</p>\n</li>\n</ul>\n","content_text":"摘要 本文介绍Linux下MongoDB7.0的安装 MongoDB官方文档 本文基于CentOS8(x86_64) MongoDB 7.0新特性 2024年8月15日，MongoDB正式发布7.0版本，截止目前最新版本为7.0.6。 MongoDB7.0特性 阿里云关于MongoDB7.0的特性说明，该文档中也包含MongoDB其它版本的特性说明 MongoDB Software Lifecycle Schedules 安装MongoDB mongodb的安装方法可以查看官方文档 MongoDB下载地址，选择合适的版本、平台和包类型 12345678910111213141516171819#下载MongoDBwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-7.0.6.tgz# 解压tar -zxvf mongodb-linux-x86_64-rhel80-7.0.6.tgz# 方便起见，创建软连接ln -s mongodb-linux-x86_64-rhel80-7.0.6 mongodb# 修改/etc/profile，添加环境变量，方便执行MongoDB命令export MONGODB_HOME=/usr/local/soft/mongodbPATH=$PATH:$MONGODB_HOME/bin#重新加载环境变量source /etc/profile#查看版本，检查命令是否可用mongod --version#创建dbpath和logpath的存储目录mkdir -p /mongodb/data /mongodb/log 安装mongoDB时可能遇到的问题 启动mongodb服务时，提示mongod: error while loading shared libraries: libcrypto.so.1.1: cannot open shared object file: No such file or directory 解决方法： 12345678wget https://www.openssl.org/source/openssl-1.1.1w.tar.gztar -zxvf openssl-1.1.1w.tar.gzcd openssl-1.1.1w./config# 如果make时提示 /bin/sh: gcc: command not found，需要先安装gcc：sudo yum install gcc -ymake &amp;&amp; make installln -s /usr/local/lib64/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1ln -s /usr/local/lib64/libssl.so.1.1 /usr/lib64/libssl.so.1.1 启动mongodb服务 命令参数启动 1234567mongod --port=27017 --dbpath=/mongodb/data --logpath=/mongodb/log/mongodb.log --bind_ip=0.0.0.0 --fork # 参数说明 --port: 指定端口，默认为27017 --dbpath: 指定数据文件存放目录 --logpath: 指定日志文件，注意是指定文件不是目录 --bind_ip: 默认只监听localhost网卡 --fork: 后台启动 也可以将上面的参数写到配置文件中，如/mongodb/conf/mongo.conf文件，必须是yaml格式 1234567891011121314systemLog: destination: file path: /mongodb/log/mongodb.log # log path logAppend: truestorage: dbPath: /mongodb/data # data directory engine: wiredTiger #存储引擎，默认值就是wiredTiger journal: #journal日志配置 commitIntervalMs: 100 #mongod进程在日志操作之间允许的最大时间（以毫秒为单位）。值可以从1到500毫秒不等。较低的值会增加日志的耐用性，而牺牲了磁盘性能。在WiredTiger上，默认的日志提交间隔是100毫秒。此外，包含或暗示j:true的写入将导致期刊立即同步。net: bindIp: 0.0.0.0 port: 27017processManagement: fork: true 将命令行参数直接转换为yaml:--outputConfig 1$ mongod --port=27017 --dbpath=/mongodb/data --logpath=/mongodb/log/mongodb.log --bind_ip=0.0.0.0 --fork --outputConfig 1234567891011net: bindIp: 0.0.0.0 port: 27017outputConfig: trueprocessManagement: fork: truestorage: dbPath: /mongodb/datasystemLog: destination: file path: /mongodb/log/mongodb.log 删除outputConfig: true这一行，然后将其余内容复制到mongo.conf中 关于配置参数的详细信息可以查看官方文档 12345# 启动mongo服务mongod -f /mongodb/conf/mongo.conf# 关闭mongo服务，注意：macos下不支持 --shutdownmongod -f /mongodb/conf/mongo.conf --shutdown shell客户端mongosh 从mongodb6开始不再支持mongo命令，而是需要使用mongosh命令，关于mongosh命令的使用可以查看官方文档 mongosh命令的使用方式与mongo命令基本一致 下载地址：mongosh下载地址 12345678910111213141516171819202122# 下载安装包# openssl11是centos7的版本，目前支持centos8，但更推荐使用centos8时下载openssl3的版本wget https://downloads.mongodb.com/compass/mongosh-2.2.2-linux-x64-openssl11.tgz# 解压tar -zxvf mongosh-2.2.2-linux-x64-openssl11.tgz# 创建软连接ln -s mongosh-2.2.2-linux-x64-openssl11 mongosh# 修改/etc/profile，添加环境变量，方便执行MongoShell命令export MONGODB_SHELL_HOME=/usr/local/soft/mongoshPATH=$PATH:$MONGODB_SHELL_HOME/bin#重新加载环境变量source /etc/profile# 查看版本mongosh --version# 连接mongodb server端mongosh --host=127.0.0.1 --port=27017# --host: mongodb server端ip地址# --port: mongodb server端口 mongosh常用命令 命令 说明 show dbs 或 show databases 显示数据库 use 数据库名 切换数据库，如果不存在创建数据库 db.dropDatabase() 删除数据库 show collections 或 show tables 显示当前数据库的集合列表 db.集合名.stats() 查看集合详情 db.集合名.drop() 删除集合 show users 显示当前数据库的用户列表 show roles 显示当前数据库的角色列表 show profile 显示最近发生的操作 load(“xxx.js”) 执行一个JavaScript脚本文件 exit 或 quit 退出 help 查看mongodb支持哪些命令 db.help() 查询当前数据库支持的方法 db.集合名.help() 显示集合的帮助信息 db.version() 查看数据库版本 cls 清屏 db.shutdownServer() 关闭mongodb server端 安全认证 创建管理员 123456789101112# 设置管理员用户名密码需要切换到admin库use admin#显示可设置权限show roles#创建管理员，授予root角色db.createUser(&#123;user:&quot;root&quot;,pwd:&quot;password&quot;,roles:[&quot;root&quot;]&#125;)#查看当前数据库所有用户信息show users#显示所有用户db.system.users.find() 常用角色 权限名 描述 read 允许用户读取指定数据库 readWrite 允许用户读写指定数据库 dbAdmin 允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile dbOwner 允许用户在指定数据库中执行任意操作，增、删、改、查等 userAdmin 允许用户向system.users集合写入，可以在指定数据库里创建、删除和管理用户 clusterAdmin 只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限 readAnyDatabase 只在admin数据库中可用，赋予用户所有数据库的读权限 readWriteAnyDatabase 只在admin数据库中可用，赋予用户所有数据库的读写权限 userAdminAnyDatabase 只在admin数据库中可用，赋予用户所有数据库的userAdmin权限 dbAdminAnyDatabase 只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限 root 只在admin数据库中可用。超级账号，超级权限 创建数据库用户 12345678910111213141516171819admin&gt; use mydbswitched to db mydb# 默认认证数据库为当前数据库，下面的授权等同于 &#123; role: &#x27;dbOwner&#x27;, db: &#x27;mydb&#x27; &#125;mydb&gt; db.createUser(&#123;user:&quot;mytest&quot;,pwd:&quot;123456&quot;,roles:[&quot;dbOwner&quot;]&#125;)&#123; ok: 1 &#125;# 显示当前数据库下的用户mydb&gt; show users[ &#123; _id: &#x27;mydb.mytest&#x27;, userId: UUID(&#x27;8bc42a74-5d84-4849-af25-09fdcbdfd03a&#x27;), user: &#x27;mytest&#x27;, db: &#x27;mydb&#x27;, roles: [ &#123; role: &#x27;dbOwner&#x27;, db: &#x27;mydb&#x27; &#125; ], mechanisms: [ &#x27;SCRAM-SHA-1&#x27;, &#x27;SCRAM-SHA-256&#x27; ] &#125;] 重置用户密码 123456mydb&gt; db.changeUserPassword(&quot;mytest&quot;, &quot;password&quot;)&#123; ok: 1 &#125;# 或者mydb&gt; db.updateUser(&quot;mytest&quot;, &#123;pwd: &quot;password&quot;&#125;)&#123; ok: 1 &#125; 为用户添加角色 12345# 假设已经创建了用户mytest，需要重新赋予其角色mydb&gt; db.grantRolesToUser( &quot;mytest&quot; , [ &#123; role: &quot;dbAdmin&quot;, db: &quot;mydb&quot; &#125; , &#123; role: &quot;userAdmin&quot;, db: &quot;mydb&quot;&#125; ]) 删除用户的指定角色 123mydb&gt; db.revokeRolesFromUser( &quot;mytest&quot; , [ &#123; role: &quot;dbAdmin&quot;, db: &quot;mydb&quot; &#125; ]) 删除用户 1234567mydb&gt; db.dropUser(&quot;mytest&quot;)&#123; ok: 1 &#125;mydb&gt; show users[]# 删除全部用户mydb&gt; db.dropAllUsers() MongoDB启用鉴权 默认情况下，MongoDB不会启用鉴权，以鉴权模式启动MongoDB有两种方法 命令行参数增加 --auth 1mongod -f /mongodb/conf/mongo.conf --auth 配置文件中加上如下内容 12security: authorization: enabled 启用鉴权之后，连接MongoDB的相关操作都需要提供身份认证 1234mongosh --host=127.0.0.1 --port=27017 -u root -p password --authenticationDatabase=admin# -u: 用户名# -p: 密码# --authenticationDatabase: 指定认证数据库 mongosh连接mongodb server端的方式 参数方式 1234# 可以通过 mongosh --help 查看帮助mongosh --host=127.0.0.1 --port=27017 -u root -p password --authenticationDatabase=admin# 指定连接的数据库，这里指定连接到mydb数据库，如果不指定，默认连接到test数据库mongosh mydb --host=127.0.0.1 --port=27017 -u root -p password --authenticationDatabase=admin 混合方式 123456# ip+端口方式连接mongosh 127.0.0.1:27017# ip+端口方式连接，后面可以加上各种参数配置mongosh 127.0.0.1:27017 -u root -p password --authenticationDatabase=admin# ip+端口方式连接，同时可以指定连接的数据库，这里指定连接到mydb数据库，如果不指定，默认连接到test数据库mongosh 127.0.0.1:27017/mydb uri方式 1234567mongosh mongodb://127.0.0.1:27017# 指定连接数据库mongosh mongodb://127.0.0.1:27017/mydb# 带认证方式连接mongosh &quot;mongodb://root:password@127.0.0.1:27017/mydb?authSource=admin&quot;# 带认证方式连接，同时指定readPreference为primaryPreferred，即读取数据时优先从主节点读取数据mongosh &quot;mongodb://root:password@127.0.0.1:27019/mydb?authSource=admin&amp;readPreference=primaryPreferred&quot; 如果只是连接本机的server端，而且端口为27017，可以省略host和port 1mongosh 解决连接MongoDB时出现的 vm.max_map_count is too low 的问题 默认的vm.max_map_count值为65530，如果需要开启MongoDB的分片功能，需要将vm.max_map_count设置为较高的值，通常推荐为1048576 查看当前vm.max_map_count的值 1sysctl vm.max_map_count 临时增加vm.max_map_count的值 1sysctl -w vm.max_map_count=1048576 永久增加vm.max_map_count的值 1234# 修改/etc/sysctl.conf文件echo &quot;vm.max_map_count = 1048576&quot; &gt;&gt; /etc/sysctl.conf# 使配置生效sysctl -p 重启MongoDB才会生效","summary":"摘要 本文介绍Linux下MongoDB7.0的安装 MongoDB官方文档 本文基于CentOS8(x86_64)","date_published":"2024-03-01T13:30:05.000Z","tags":["技术","linux","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/02/28/linux-command13-echo-printf/","url":"https://blog.hanqunfeng.com/2024/02/28/linux-command13-echo-printf/","title":"Linux常用命令--echo与printf","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在编写 shell 脚本时，echo 和 printf 是两个常用的命令，用于输出信息到标准输出设备。虽然它们看似简单，但深入理解它们的使用方式和内部机制对于编写高效、可读性强的脚本至关重要。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"echo-命令\">echo 命令</h2>\n<h3 id=\"基本语法和用法\">基本语法和用法</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>echo</code> 命令的基本语法为：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> [选项] [字符串或变量]</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>参数和选项</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-n：不换行输出。</span><br><span class=\"line\">-e：解释转义字符。</span><br><span class=\"line\">-E：禁止解释转义字符。</span><br><span class=\"line\"></span><br><span class=\"line\">常见的转义字符包括 \\n（换行）、\\t（制表符）等。</span><br></pre></td></tr></table></figure>\n<h3 id=\"实际应用示例\">实际应用示例</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 打印一个文本消息。注意：引号是可选的</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 打印一个带环境变量的消息</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;My path is <span class=\"variable\">$PATH</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 打印一个不带尾随换行符的消息</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 将消息追加到文件中</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Hello World&quot;</span> &gt;&gt; file.txt</span><br><span class=\"line\"></span><br><span class=\"line\">- 启用反斜杠转义（特殊字符）的解释</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;Column 1\\tColumn 2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 打印最后一个执行命令的退出状态</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> $?</span><br></pre></td></tr></table></figure>\n<h3 id=\"echo输出颜色化文本\">echo输出颜色化文本</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\e[1;31mError:\\e[0m Something went wrong.&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[1;31mError:\\033[0m Something went wrong.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 说明：</span></span><br><span class=\"line\">\\e[1;31m：这部分控制文本的颜色和样式。</span><br><span class=\"line\">其中：</span><br><span class=\"line\">    \\e 表示这是一个转义字符，它是 ANSI 转义序列的起始，后跟一系列用于控制文本颜色、样式等的数字和字符。这里\\e也可以用\\033替代。</span><br><span class=\"line\">    1 表示设置文本为粗体（或者称为高亮）。</span><br><span class=\"line\">    31 表示设置文本颜色为红色。不同的数字代表不同的颜色，这里的 31 对应红色。</span><br><span class=\"line\"></span><br><span class=\"line\">\\e[0m：这部分重置文本格式为默认值。这样做是为了确保在之后的输出中文本样式不受之前的影响。</span><br><span class=\"line\"></span><br><span class=\"line\">因此，这条命令会输出一个红色的“Error:”，接着是一个空格，然后是普通文本“Something went wrong.”。整体效果是，错误消息以红色高亮显示，使其在输出中更加醒目。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">颜色：</span><br><span class=\"line\">    30：黑色</span><br><span class=\"line\">    31：红色</span><br><span class=\"line\">    32：绿色</span><br><span class=\"line\">    33：黄色</span><br><span class=\"line\">    34：蓝色</span><br><span class=\"line\">    35：紫色</span><br><span class=\"line\">    36：青色</span><br><span class=\"line\">    37：白色</span><br><span class=\"line\"></span><br><span class=\"line\">样式：</span><br><span class=\"line\">    0：重置所有样式（默认值）</span><br><span class=\"line\">    1：粗体（或高亮）</span><br><span class=\"line\">    2：暗色（不常见，视终端而定）</span><br><span class=\"line\">    3：斜体（不常见，视终端而定）</span><br><span class=\"line\">    4：下划线</span><br><span class=\"line\">    5：闪烁（不常见，视终端而定）</span><br><span class=\"line\">    7：反显（前景色与背景色交换）</span><br><span class=\"line\">    8：隐藏（文本不可见）</span><br><span class=\"line\"></span><br><span class=\"line\">这些数字和字符可以单独使用，比如\\e[1m 表示加粗，\\e[31m 表示设置文本颜色为红色。</span><br><span class=\"line\">也可以组合使用，比如 \\e[1;31m 表示设置文本为红色并加粗，中间用分号隔开。</span><br></pre></td></tr></table></figure>\n<h2 id=\"printf-命令\">printf 命令</h2>\n<h3 id=\"基本语法和用法-2\">基本语法和用法</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>printf</code> 命令的基本语法为：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> [格式化字符串] [参数]</span><br></pre></td></tr></table></figure>\n<h3 id=\"实际应用示例-2\">实际应用示例</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 打印文本消息：</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;%s\\n&quot;</span> <span class=\"string\">&quot;Hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 以蓝色粗体打印整数：使用方法同<span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\e[1;34m%.3d\\e[0m\\n&quot;</span> 42</span><br><span class=\"line\"></span><br><span class=\"line\">- 打印带有Unicode Euro符号的浮点数：</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\u20AC %.2f\\n&quot;</span> 123.4</span><br><span class=\"line\"></span><br><span class=\"line\">- 打印由变量组成的文本消息：</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;var1: %s\\tvar2: %s\\n&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$var1</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$var2</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 将格式化的消息存储在变量中：</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> -v myvar <span class=\"string\">&quot;This is %s = %d\\n&quot;</span> <span class=\"string\">&quot;a year&quot;</span> 2016</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$myvar</span></span><br><span class=\"line\">    This is a year = 2016</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p>在 printf 命令中，支持的格式化符号用于指定输出的格式，包括整数、浮点数、字符串等。<br>\n以下是常用的格式化符号及其使用示例：</p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>1.整数格式化符号：</p>\n<ul class=\"lvl-3\">\n<li class=\"lvl-6\">%d：以十进制形式输出整数。</li>\n<li class=\"lvl-6\">%.nd：指定数字占几位，不足部分前面补0。</li>\n<li class=\"lvl-6\">%o：以八进制形式输出整数。</li>\n<li class=\"lvl-6\">%x 或 %X：以十六进制形式输出整数（小写或大写）。</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d\\n&quot;</span> 42      <span class=\"comment\"># 输出：42</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%.3d\\n&quot;</span> 42    <span class=\"comment\"># 输出：042</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%o\\n&quot;</span> 42      <span class=\"comment\"># 输出：52</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%x\\n&quot;</span> 42      <span class=\"comment\"># 输出：2a</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%X\\n&quot;</span> 42      <span class=\"comment\"># 输出：2A</span></span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>2.浮点数格式化符号：</p>\n<ul class=\"lvl-3\">\n<li class=\"lvl-6\">%f：以十进制形式输出浮点数。</li>\n<li class=\"lvl-6\">%.nf：指定小数点后保留 n 位小数。</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%f\\n&quot;</span> 3.14159      <span class=\"comment\"># 输出：3.141590</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%.2f\\n&quot;</span> 3.14159    <span class=\"comment\"># 输出：3.14</span></span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>3.字符串格式化符号：</p>\n<ul class=\"lvl-3\">\n<li class=\"lvl-6\">%c：输出单个字符。</li>\n<li class=\"lvl-6\">%s：输出字符串。</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%c\\n&quot;</span> <span class=\"string\">&#x27;A&#x27;</span>      <span class=\"comment\"># 输出：A</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%s\\n&quot;</span> <span class=\"string\">&quot;Hello&quot;</span>  <span class=\"comment\"># 输出：Hello</span></span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>4.其他格式化符号：</p>\n<ul class=\"lvl-3\">\n<li class=\"lvl-6\">%p：以十六进制形式输出指针地址。</li>\n<li class=\"lvl-6\">%u：输出无符号整数。</li>\n<li class=\"lvl-6\">%e 或 %E：以科学计数法形式输出浮点数（小写或大写）。</li>\n<li class=\"lvl-6\">%g 或 %G：根据实际情况自动选择 %f 或 %e 格式输出浮点数（小写或大写）。</li>\n<li class=\"lvl-6\">%%：输出一个百分号。</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%p\\n&quot;</span> <span class=\"variable\">$var</span>           <span class=\"comment\"># 输出：0x7ffeefbff748 （变量 var 的地址）</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%u\\n&quot;</span> -42            <span class=\"comment\"># 输出：4294967254</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%e\\n&quot;</span> 123.456        <span class=\"comment\"># 输出：1.234560e+02</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%E\\n&quot;</span> 123.456        <span class=\"comment\"># 输出：1.234560E+02</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%g\\n&quot;</span> 123.456        <span class=\"comment\"># 输出：123.456</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%G\\n&quot;</span> 123.456        <span class=\"comment\"># 输出：123.456</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;100%%\\n&quot;</span>             <span class=\"comment\"># 输出：100%</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</div>\n<h2 id=\"不同进制之间进行相互转换\">不同进制之间进行相互转换</h2>\n<h3 id=\"10进制转其它进制\">10进制转其它进制</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 10进制转2进制，obase=2 指定输出进制为二进制，默认为10进制。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=2; 255&quot;</span> | bc <span class=\"comment\"># 11111111</span></span><br><span class=\"line\"><span class=\"comment\"># printf不支持到二进制的转换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 10进制转8进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=8; 255&quot;</span> | bc <span class=\"comment\"># 377</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%o\\n&quot;</span> 255 <span class=\"comment\"># 377，%o 表示八进制数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 10进制转16进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=16; 255&quot;</span> | bc <span class=\"comment\"># FF</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%x\\n&quot;</span> <span class=\"string\">&quot;255&quot;</span> <span class=\"comment\"># ff，%x 表示十六进制数，小写</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%X\\n&quot;</span> <span class=\"string\">&quot;255&quot;</span> <span class=\"comment\"># FF，%X 表示十六进制数，大写</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2进制转其它进制\">2进制转其它进制</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2进制转10进制，ibase=2 指定输入进制为二进制，默认为10进制。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;ibase=2; 11111111&quot;</span> | bc <span class=\"comment\"># 255</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $((<span class=\"number\">2#11111111</span>)) <span class=\"comment\"># 255，内置的算术运算 $((...))，可以实现其它进制转10进制</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d\\n&quot;</span> <span class=\"string\">&quot;0b11111111&quot;</span> <span class=\"comment\"># 255，%d 表示十进制数，对于二进制数，你需要在数字前面加上 0b 的前缀</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d\\n&quot;</span> $((<span class=\"number\">2#11111111</span>)) <span class=\"comment\"># 255</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2进制转16进制，两个同时出现时要先声明obase，再声明ibase，否则输出结果错误</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=16; ibase=2; 11111111&quot;</span> | bc  <span class=\"comment\"># FF</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%X\\n&quot;</span> <span class=\"string\">&quot;0b11111111&quot;</span> <span class=\"comment\"># FF</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%x\\n&quot;</span> <span class=\"string\">&quot;0b11111111&quot;</span> <span class=\"comment\"># ff</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%X\\n&quot;</span> $((<span class=\"number\">2#11111111</span>)) <span class=\"comment\"># FF</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%x\\n&quot;</span> $((<span class=\"number\">2#11111111</span>)) <span class=\"comment\"># ff</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2进制转8进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=8; ibase=2; 11111111&quot;</span> | bc <span class=\"comment\"># 377</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%o\\n&quot;</span> <span class=\"string\">&quot;0b11111111&quot;</span> <span class=\"comment\"># 377</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%o\\n&quot;</span> $((<span class=\"number\">2#11111111</span>)) <span class=\"comment\"># 377</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8进制转其它进制\">8进制转其它进制</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 8进制转10进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;ibase=8; 377&quot;</span> | bc <span class=\"comment\"># 255</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $((<span class=\"number\">8#377</span>)) <span class=\"comment\"># 255</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d\\n&quot;</span> $((<span class=\"number\">8#377</span>))  <span class=\"comment\"># 255</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 8进制转2进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=2; ibase=8; 377&quot;</span> | bc <span class=\"comment\"># 11111111</span></span><br><span class=\"line\"><span class=\"comment\"># printf不支持到二进制的转换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 8进制转16进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=16; ibase=8; 377&quot;</span> | bc <span class=\"comment\"># FF</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%X\\n&quot;</span> <span class=\"string\">&quot;<span class=\"subst\">$((8#377)</span>)&quot;</span> <span class=\"comment\"># FF</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%x\\n&quot;</span> <span class=\"string\">&quot;<span class=\"subst\">$((8#377)</span>)&quot;</span> <span class=\"comment\"># ff</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"16进制转其它进制\">16进制转其它进制</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 16进制转10进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;ibase=16; FF&quot;</span> | bc <span class=\"comment\"># 255</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $((<span class=\"number\">16</span>#FF)) <span class=\"comment\"># 255</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d\\n&quot;</span> <span class=\"string\">&quot;0xFF&quot;</span>  <span class=\"comment\"># 255，%d 表示十进制数，对于十六进制数，你需要在数字前面加上 0x 的前缀</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d\\n&quot;</span> $((<span class=\"number\">16</span>#FF)) <span class=\"comment\"># 255</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 16进制转2进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=2; ibase=16; FF&quot;</span> | bc <span class=\"comment\"># 11111111</span></span><br><span class=\"line\"><span class=\"comment\"># printf不支持到二进制的转换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 16进制转8进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=8; ibase=16; FF&quot;</span> | bc <span class=\"comment\"># 377</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%o\\n&quot;</span> <span class=\"string\">&quot;0xFF&quot;</span> <span class=\"comment\"># 377</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%o\\n&quot;</span> <span class=\"string\">&quot;<span class=\"subst\">$((16#FF)</span>)&quot;</span> <span class=\"comment\"># 377</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"echo-与-printf-的比较\">echo 与 printf 的比较</h2>\n<h3 id=\"输出效果的比较\">输出效果的比较</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>echo 会自动换行，而 printf 需要显式指定换行符。</p>\n</li>\n<li class=\"lvl-2\">\n<p>printf 提供更灵活的格式化输出方式。</p>\n</li>\n</ul>\n<h3 id=\"性能比较\">性能比较</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在大量输出时，echo 通常比 printf 更高效。</p>\n</li>\n</ul>\n<h3 id=\"适用场景的选择\">适用场景的选择</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>简单文本输出场景，使用 echo。</p>\n</li>\n<li class=\"lvl-2\">\n<p>需要格式化输出或者更精确控制输出格式时，使用 printf。</p>\n</li>\n</ul>\n","content_text":"摘要 在编写 shell 脚本时，echo 和 printf 是两个常用的命令，用于输出信息到标准输出设备。虽然它们看似简单，但深入理解它们的使用方式和内部机制对于编写高效、可读性强的脚本至关重要。 echo 命令 基本语法和用法 echo 命令的基本语法为： 1echo [选项] [字符串或变量] 参数和选项 12345-n：不换行输出。-e：解释转义字符。-E：禁止解释转义字符。常见的转义字符包括 \\n（换行）、\\t（制表符）等。 实际应用示例 1234567891011121314151617- 打印一个文本消息。注意：引号是可选的 echo &quot;Hello World&quot;- 打印一个带环境变量的消息 echo &quot;My path is $PATH&quot;- 打印一个不带尾随换行符的消息 echo -n &quot;Hello World&quot;- 将消息追加到文件中 echo &quot;Hello World&quot; &gt;&gt; file.txt- 启用反斜杠转义（特殊字符）的解释 echo -e &quot;Column 1\\tColumn 2&quot;- 打印最后一个执行命令的退出状态 echo $? echo输出颜色化文本 1234567891011121314151617181920212223242526272829303132333435363738echo -e &quot;\\e[1;31mError:\\e[0m Something went wrong.&quot;# 或echo -e &quot;\\033[1;31mError:\\033[0m Something went wrong.&quot;# 说明：\\e[1;31m：这部分控制文本的颜色和样式。其中： \\e 表示这是一个转义字符，它是 ANSI 转义序列的起始，后跟一系列用于控制文本颜色、样式等的数字和字符。这里\\e也可以用\\033替代。 1 表示设置文本为粗体（或者称为高亮）。 31 表示设置文本颜色为红色。不同的数字代表不同的颜色，这里的 31 对应红色。\\e[0m：这部分重置文本格式为默认值。这样做是为了确保在之后的输出中文本样式不受之前的影响。因此，这条命令会输出一个红色的“Error:”，接着是一个空格，然后是普通文本“Something went wrong.”。整体效果是，错误消息以红色高亮显示，使其在输出中更加醒目。颜色： 30：黑色 31：红色 32：绿色 33：黄色 34：蓝色 35：紫色 36：青色 37：白色样式： 0：重置所有样式（默认值） 1：粗体（或高亮） 2：暗色（不常见，视终端而定） 3：斜体（不常见，视终端而定） 4：下划线 5：闪烁（不常见，视终端而定） 7：反显（前景色与背景色交换） 8：隐藏（文本不可见）这些数字和字符可以单独使用，比如\\e[1m 表示加粗，\\e[31m 表示设置文本颜色为红色。也可以组合使用，比如 \\e[1;31m 表示设置文本为红色并加粗，中间用分号隔开。 printf 命令 基本语法和用法 printf 命令的基本语法为： 1printf [格式化字符串] [参数] 实际应用示例 12345678910111213141516- 打印文本消息： printf &quot;%s\\n&quot; &quot;Hello world&quot;- 以蓝色粗体打印整数：使用方法同echo printf &quot;\\e[1;34m%.3d\\e[0m\\n&quot; 42- 打印带有Unicode Euro符号的浮点数： printf &quot;\\u20AC %.2f\\n&quot; 123.4- 打印由变量组成的文本消息： printf &quot;var1: %s\\tvar2: %s\\n&quot; &quot;$var1&quot; &quot;$var2&quot;- 将格式化的消息存储在变量中： printf -v myvar &quot;This is %s = %d\\n&quot; &quot;a year&quot; 2016 echo $myvar This is a year = 2016 在 printf 命令中，支持的格式化符号用于指定输出的格式，包括整数、浮点数、字符串等。 以下是常用的格式化符号及其使用示例： 1.整数格式化符号： %d：以十进制形式输出整数。 %.nd：指定数字占几位，不足部分前面补0。 %o：以八进制形式输出整数。 %x 或 %X：以十六进制形式输出整数（小写或大写）。 12345printf &quot;%d\\n&quot; 42 # 输出：42printf &quot;%.3d\\n&quot; 42 # 输出：042printf &quot;%o\\n&quot; 42 # 输出：52printf &quot;%x\\n&quot; 42 # 输出：2aprintf &quot;%X\\n&quot; 42 # 输出：2A 2.浮点数格式化符号： %f：以十进制形式输出浮点数。 %.nf：指定小数点后保留 n 位小数。 12printf &quot;%f\\n&quot; 3.14159 # 输出：3.141590printf &quot;%.2f\\n&quot; 3.14159 # 输出：3.14 3.字符串格式化符号： %c：输出单个字符。 %s：输出字符串。 12printf &quot;%c\\n&quot; &#x27;A&#x27; # 输出：Aprintf &quot;%s\\n&quot; &quot;Hello&quot; # 输出：Hello 4.其他格式化符号： %p：以十六进制形式输出指针地址。 %u：输出无符号整数。 %e 或 %E：以科学计数法形式输出浮点数（小写或大写）。 %g 或 %G：根据实际情况自动选择 %f 或 %e 格式输出浮点数（小写或大写）。 %%：输出一个百分号。 1234567printf &quot;%p\\n&quot; $var # 输出：0x7ffeefbff748 （变量 var 的地址）printf &quot;%u\\n&quot; -42 # 输出：4294967254printf &quot;%e\\n&quot; 123.456 # 输出：1.234560e+02printf &quot;%E\\n&quot; 123.456 # 输出：1.234560E+02printf &quot;%g\\n&quot; 123.456 # 输出：123.456printf &quot;%G\\n&quot; 123.456 # 输出：123.456printf &quot;100%%\\n&quot; # 输出：100% 不同进制之间进行相互转换 10进制转其它进制 123456789101112# 10进制转2进制，obase=2 指定输出进制为二进制，默认为10进制。echo &quot;obase=2; 255&quot; | bc # 11111111# printf不支持到二进制的转换# 10进制转8进制echo &quot;obase=8; 255&quot; | bc # 377printf &quot;%o\\n&quot; 255 # 377，%o 表示八进制数# 10进制转16进制echo &quot;obase=16; 255&quot; | bc # FFprintf &quot;%x\\n&quot; &quot;255&quot; # ff，%x 表示十六进制数，小写printf &quot;%X\\n&quot; &quot;255&quot; # FF，%X 表示十六进制数，大写 2进制转其它进制 1234567891011121314151617# 2进制转10进制，ibase=2 指定输入进制为二进制，默认为10进制。echo &quot;ibase=2; 11111111&quot; | bc # 255echo $((2#11111111)) # 255，内置的算术运算 $((...))，可以实现其它进制转10进制printf &quot;%d\\n&quot; &quot;0b11111111&quot; # 255，%d 表示十进制数，对于二进制数，你需要在数字前面加上 0b 的前缀printf &quot;%d\\n&quot; $((2#11111111)) # 255# 2进制转16进制，两个同时出现时要先声明obase，再声明ibase，否则输出结果错误echo &quot;obase=16; ibase=2; 11111111&quot; | bc # FFprintf &quot;%X\\n&quot; &quot;0b11111111&quot; # FFprintf &quot;%x\\n&quot; &quot;0b11111111&quot; # ffprintf &quot;%X\\n&quot; $((2#11111111)) # FFprintf &quot;%x\\n&quot; $((2#11111111)) # ff# 2进制转8进制echo &quot;obase=8; ibase=2; 11111111&quot; | bc # 377printf &quot;%o\\n&quot; &quot;0b11111111&quot; # 377printf &quot;%o\\n&quot; $((2#11111111)) # 377 8进制转其它进制 12345678910111213# 8进制转10进制echo &quot;ibase=8; 377&quot; | bc # 255echo $((8#377)) # 255printf &quot;%d\\n&quot; $((8#377)) # 255# 8进制转2进制echo &quot;obase=2; ibase=8; 377&quot; | bc # 11111111# printf不支持到二进制的转换# 8进制转16进制echo &quot;obase=16; ibase=8; 377&quot; | bc # FFprintf &quot;%X\\n&quot; &quot;$((8#377))&quot; # FFprintf &quot;%x\\n&quot; &quot;$((8#377))&quot; # ff 16进制转其它进制 1234567891011121314# 16进制转10进制echo &quot;ibase=16; FF&quot; | bc # 255echo $((16#FF)) # 255printf &quot;%d\\n&quot; &quot;0xFF&quot; # 255，%d 表示十进制数，对于十六进制数，你需要在数字前面加上 0x 的前缀printf &quot;%d\\n&quot; $((16#FF)) # 255# 16进制转2进制echo &quot;obase=2; ibase=16; FF&quot; | bc # 11111111# printf不支持到二进制的转换# 16进制转8进制echo &quot;obase=8; ibase=16; FF&quot; | bc # 377printf &quot;%o\\n&quot; &quot;0xFF&quot; # 377printf &quot;%o\\n&quot; &quot;$((16#FF))&quot; # 377 echo 与 printf 的比较 输出效果的比较 echo 会自动换行，而 printf 需要显式指定换行符。 printf 提供更灵活的格式化输出方式。 性能比较 在大量输出时，echo 通常比 printf 更高效。 适用场景的选择 简单文本输出场景，使用 echo。 需要格式化输出或者更精确控制输出格式时，使用 printf。","summary":"摘要 在编写 shell 脚本时，echo 和 printf 是两个常用的命令，用于输出信息到标准输出设备。虽然它们看似简单，但深入理解它们的使用方式和内部机制对于编写高效、可读性强的脚本至关重要。","date_published":"2024-02-28T13:30:05.000Z","tags":["技术","linux","linux常用命令","linux常用命令"]},{"id":"https://blog.hanqunfeng.com/2024/02/23/macos-shell-useful/","url":"https://blog.hanqunfeng.com/2024/02/23/macos-shell-useful/","title":"MacOS下一些有用的脚本","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这里列举一些macos下一些有用的shell脚本</p>\n</li>\n<li class=\"lvl-2\">\n<p>与本文脚本对应的centos脚本可以参看<a href=\"https://gitee.com/hanqunfeng/centos-shell.git\">centos-shell</a></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"查看端口被哪个进程占用\">查看端口被哪个进程占用</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：port 授予执行权限</span></span><br><span class=\"line\"><span class=\"comment\">#功能：查询端口被哪个进程占用</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：port 8080</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\">port=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$port</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请加上端口作为参数，如：port 8080&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    lsof -i :<span class=\"variable\">$&#123;port&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"杀掉占用某个端口的进程\">杀掉占用某个端口的进程</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：killport 授予执行权限</span></span><br><span class=\"line\"><span class=\"comment\">#功能：关闭占用端口的进程</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：killport 8080</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请加上端口作为参数，如：killport 8080&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;kill  begin........&quot;</span></span><br><span class=\"line\">    pid=`port <span class=\"variable\">$1</span> | awk <span class=\"string\">&#x27;NR&gt;1 &#123;print $2&#125;&#x27;</span> | <span class=\"built_in\">sort</span> | <span class=\"built_in\">uniq</span>`</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$pid</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$pid</span>&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;No process running.&quot;</span></span><br><span class=\"line\">            <span class=\"comment\">#exit -1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;The process(<span class=\"variable\">$&#123;pid&#125;</span>) is running...&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">kill</span> <span class=\"variable\">$&#123;pid&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;kill process(<span class=\"variable\">$&#123;pid&#125;</span>) OK&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"本机端口通过跳板机转发到远程端口\">本机端口通过跳板机转发到远程端口</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：ssh_port 授予执行权限</span></span><br><span class=\"line\"><span class=\"comment\">#功能：本机端口通过跳板机转发到远程端口</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：</span></span><br><span class=\"line\"><span class=\"comment\"># ssh_port start 8080 10.10.2.2 80</span></span><br><span class=\"line\"><span class=\"comment\"># ssh_port stop 8080</span></span><br><span class=\"line\"><span class=\"comment\"># ssh_port status 8080</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">check</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">#验证参数是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;#@&#125;</span> &lt; 1 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入参数！&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;开启端口转发：ssh_port start 8080 10.10.2.2 80&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;关闭端口转发：ssh_port stop 8080&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;查看端口状态：ssh_port status 8080&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">check <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 工作目录</span></span><br><span class=\"line\">WORKDIR=<span class=\"string\">&quot;/Users/<span class=\"subst\">$(whoami)</span>/workdir&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 操作类型</span></span><br><span class=\"line\">operation=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地端口</span></span><br><span class=\"line\">local_port=<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程 IP 地址</span></span><br><span class=\"line\">remote_ip=<span class=\"string\">&quot;<span class=\"variable\">$3</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程端口</span></span><br><span class=\"line\">remote_port=<span class=\"string\">&quot;<span class=\"variable\">$4</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SSH 控制套接字文件</span></span><br><span class=\"line\">sock_file=<span class=\"string\">&quot;<span class=\"variable\">$WORKDIR</span>/<span class=\"variable\">$local_port</span>.sock&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 跳板机，~/.ssh/config中的配置</span></span><br><span class=\"line\">jump_name=jump-machine</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;start port begin........&quot;</span></span><br><span class=\"line\">    pid=`port <span class=\"variable\">$local_port</span> | grep ssh | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$pid</span>&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\"># 建立连接</span></span><br><span class=\"line\">        ssh -nNT -S <span class=\"string\">&quot;<span class=\"variable\">$sock_file</span>&quot;</span> -L 127.0.0.1:<span class=\"variable\">$local_port</span>:<span class=\"variable\">$remote_ip</span>:<span class=\"variable\">$remote_port</span> <span class=\"variable\">$jump_name</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;ssh -nNT -S <span class=\"variable\">$&#123;sock_file&#125;</span> -L 127.0.0.1:<span class=\"variable\">$&#123;local_port&#125;</span>:<span class=\"variable\">$&#123;remote_ip&#125;</span>:<span class=\"variable\">$&#123;remote_port&#125;</span> <span class=\"variable\">$&#123;jump_name&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;start port success!&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;port is running.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;stop port begin........&quot;</span></span><br><span class=\"line\">    pid=`port <span class=\"variable\">$local_port</span> | grep ssh | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$pid</span>&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;No port running.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;The port (<span class=\"variable\">$&#123;pid&#125;</span>) is running...&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># kill -9 $pid</span></span><br><span class=\"line\">        ssh -S <span class=\"variable\">$sock_file</span> -O <span class=\"built_in\">exit</span> <span class=\"variable\">$jump_name</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;ssh -S <span class=\"variable\">$sock_file</span> -O exit <span class=\"variable\">$jump_name</span>&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;stop port (<span class=\"variable\">$&#123;pid&#125;</span>) success!&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">status</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;check status port begin........&quot;</span></span><br><span class=\"line\">    pid=`port <span class=\"variable\">$local_port</span> | grep ssh | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$pid</span>&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;No port running.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;The port (<span class=\"variable\">$&#123;pid&#125;</span>) is running...&quot;</span></span><br><span class=\"line\">        port <span class=\"variable\">$local_port</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$operation</span>&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># 判断操作类型</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$operation</span>&quot;</span> == <span class=\"string\">&quot;start&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\"># 建立连接</span></span><br><span class=\"line\">        start</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$operation</span>&quot;</span> == <span class=\"string\">&quot;stop&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">        stop</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$operation</span>&quot;</span> == <span class=\"string\">&quot;status&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">        status</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        check</span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看域名到期时间\">查看域名到期时间</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：check_domain 授予执行权限</span></span><br><span class=\"line\"><span class=\"comment\">#功能：检查域名到期时间</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：check_domain baidu.com google.com</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果：</span></span><br><span class=\"line\"><span class=\"comment\"># baidu.com，过期日期：2026-10-11</span></span><br><span class=\"line\"><span class=\"comment\"># 距离到期还有958天</span></span><br><span class=\"line\"><span class=\"comment\"># google.com，过期日期：2028-09-14</span></span><br><span class=\"line\"><span class=\"comment\"># 距离到期还有1662天</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#验证域名参数是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;#@&#125;</span> &lt; 1 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入域名，多个域名空格分隔，如：check_domain baidu.com google.com&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检测域名到期时间</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> domain <span class=\"keyword\">in</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span>;<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\">#取出域名过期时间</span></span><br><span class=\"line\">    expire_date=`whois <span class=\"variable\">$domain</span> | grep <span class=\"string\">&quot;Expiration Time&quot;</span> | awk <span class=\"string\">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$expire_date</span>&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">        expire_date=`whois <span class=\"variable\">$domain</span> | grep <span class=\"string\">&#x27;Expiry Date&#x27;</span>| awk <span class=\"string\">&#x27;&#123;print $4&#125;&#x27;</span>| <span class=\"built_in\">cut</span> -d <span class=\"string\">&#x27;T&#x27;</span> -f 1`</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;domain&#125;</span>，过期日期：<span class=\"variable\">$&#123;expire_date&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#转换成时间戳</span></span><br><span class=\"line\">    <span class=\"comment\"># 1.linux</span></span><br><span class=\"line\">    <span class=\"comment\"># expire_date_timestamp=`date -d $expire_date +%s`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.macos</span></span><br><span class=\"line\">    <span class=\"comment\"># https://blog.csdn.net/zhw21w/article/details/126010972</span></span><br><span class=\"line\">    expire_date_timestamp=`<span class=\"built_in\">date</span> -j -f %Y-%m-%d <span class=\"variable\">$expire_date</span> +%s`</span><br><span class=\"line\">    <span class=\"comment\">#以时间戳的形式显示当前时间</span></span><br><span class=\"line\">    now=`<span class=\"built_in\">date</span> <span class=\"string\">&#x27;+%s&#x27;</span>`</span><br><span class=\"line\">    <span class=\"comment\">#域名到期剩余天数</span></span><br><span class=\"line\">    time_left=$[$[<span class=\"variable\">$expire_date_timestamp</span>-<span class=\"variable\">$now</span>]/86400]</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;距离到期还有<span class=\"variable\">$&#123;time_left&#125;</span>天&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看证书到期时间\">查看证书到期时间</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：ssl_check 授予执行权限</span></span><br><span class=\"line\"><span class=\"comment\">#功能：检查证书到期时间</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：ssl_check www.baidu.com www.google.com</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果：</span></span><br><span class=\"line\"><span class=\"comment\"># 证书：www.baidu.com，过期时间：2024-08-06 01:51:05</span></span><br><span class=\"line\"><span class=\"comment\"># 距离到期还有161天</span></span><br><span class=\"line\"><span class=\"comment\"># 证书：www.google.com，过期时间：2024-04-29 08:19:49</span></span><br><span class=\"line\"><span class=\"comment\"># 距离到期还有62天</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#验证证书参数是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;#@&#125;</span> &lt; 1 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入证书，多个证书空格分隔，如：ssl_check www.baidu.com www.google.com&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取证书的有效时间</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> domain <span class=\"keyword\">in</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span>;<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\"># 这里在openssl x509 -noout -dates后面加上了2&gt;/dev/null，否则会打印告警信息：Warning: Reading certificate from stdin since no -in or -new option is given</span></span><br><span class=\"line\">    <span class=\"comment\"># 您可以忽略此警告。它只是表明您没有使用 -in 或 -new 选项指定输入文件，因此 OpenSSL 将从标准输入 (stdin) 读取证书。</span></span><br><span class=\"line\">    time=$(<span class=\"built_in\">echo</span> | openssl s_client  -connect  <span class=\"variable\">$domain</span>:443 2&gt;/dev/null | openssl x509 -noout -dates 2&gt;/dev/null |awk -F<span class=\"string\">&#x27;=&#x27;</span> <span class=\"string\">&#x27;NR==2&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">#echo $time</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#取出域名过期时间</span></span><br><span class=\"line\">    expire_date=`<span class=\"built_in\">env</span> LC_ALL=en_US.en <span class=\"built_in\">date</span> -j -f <span class=\"string\">&#x27;%b %d %H:%M:%S %Y GMT&#x27;</span> <span class=\"string\">&quot;<span class=\"variable\">$time</span>&quot;</span> <span class=\"string\">&#x27;+%Y-%m-%d %H:%M:%S&#x27;</span>`</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;证书：<span class=\"variable\">$domain</span>，过期时间：<span class=\"variable\">$expire_date</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    expire_date_timestamp=`<span class=\"built_in\">date</span> -j -f <span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span> <span class=\"variable\">$expire_date</span> +%s`</span><br><span class=\"line\">    <span class=\"comment\">#以时间戳的形式显示当前时间</span></span><br><span class=\"line\">    now=`<span class=\"built_in\">date</span> <span class=\"string\">&#x27;+%s&#x27;</span>`</span><br><span class=\"line\">    <span class=\"comment\">#证书到期剩余天数</span></span><br><span class=\"line\">    time_left=$[$[<span class=\"variable\">$expire_date_timestamp</span>-<span class=\"variable\">$now</span>]/86400]</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;距离到期还有<span class=\"variable\">$&#123;time_left&#125;</span>天&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看指定IP的详细信息\">查看指定IP的详细信息</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\"># filename：ip-info 授权执行权限</span></span><br><span class=\"line\"><span class=\"comment\"># 功能：查看IP信息</span></span><br><span class=\"line\"><span class=\"comment\"># 使用方法：ip-info 10.10.2.24/24</span></span><br><span class=\"line\"><span class=\"comment\"># 输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">#  网络地址: 10.10.2.0</span></span><br><span class=\"line\"><span class=\"comment\">#  网关地址: 10.10.2.1</span></span><br><span class=\"line\"><span class=\"comment\">#  广播地址: 10.10.2.255</span></span><br><span class=\"line\"><span class=\"comment\">#  主机地址范围: 10.10.2.1 到 10.10.2.254</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以使用 sipcalc 命令，用法更多，显示也会更为详细：</span></span><br><span class=\"line\"><span class=\"comment\"># 安装：brew install sipcalc</span></span><br><span class=\"line\"><span class=\"comment\"># 使用示例：</span></span><br><span class=\"line\"><span class=\"comment\">#  sipcalc 1.119.161.30/30</span></span><br><span class=\"line\"><span class=\"comment\">#  sipcalc 10.10.2.32 255.255.255.0</span></span><br><span class=\"line\"><span class=\"comment\">#  sipcalc 10.10.2.32 0xffffff00</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否提供了正确数量的参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> -ne 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;用法: <span class=\"variable\">$0</span> &lt;IP地址/子网掩码CIDR&gt;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取命令行参数</span></span><br><span class=\"line\">ip_cidr=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分割IP地址和子网掩码</span></span><br><span class=\"line\">IFS=<span class=\"string\">&#x27;/&#x27;</span> <span class=\"built_in\">read</span> -A ip_parts &lt;&lt;&lt; <span class=\"string\">&quot;<span class=\"variable\">$ip_cidr</span>&quot;</span></span><br><span class=\"line\">ip=<span class=\"variable\">$&#123;ip_parts[1]&#125;</span></span><br><span class=\"line\">subnet_cidr=<span class=\"variable\">$&#123;ip_parts[2]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算子网掩码的二进制表示</span></span><br><span class=\"line\">subnet_binary=$(<span class=\"built_in\">printf</span> <span class=\"string\">&#x27;1%.0s&#x27;</span> $(<span class=\"built_in\">seq</span> 1 <span class=\"string\">&quot;<span class=\"variable\">$subnet_cidr</span>&quot;</span>) &amp;&amp; <span class=\"built_in\">printf</span> <span class=\"string\">&#x27;0%.0s&#x27;</span> $(<span class=\"built_in\">seq</span> 1 $((<span class=\"number\">32</span> - <span class=\"variable\">$subnet_cidr</span>))))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将二进制子网掩码转换为点分十进制表示</span></span><br><span class=\"line\">subnet_mask_decimal=$(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d.%d.%d.%d&quot;</span> $((<span class=\"number\">2</span>#<span class=\"variable\">$&#123;subnet_binary:0:8&#125;</span>)) $((<span class=\"number\">2</span>#<span class=\"variable\">$&#123;subnet_binary:8:8&#125;</span>)) $((<span class=\"number\">2</span>#<span class=\"variable\">$&#123;subnet_binary:16:8&#125;</span>)) $((<span class=\"number\">2</span>#<span class=\"variable\">$&#123;subnet_binary:24:8&#125;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用按位与运算计算网络地址</span></span><br><span class=\"line\">network_address=$(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d.%d.%d.%d&quot;</span> $(( $(echo <span class=\"variable\">$ip</span> | cut -d. -f1) &amp; $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f1) )) $(( $(echo <span class=\"variable\">$ip</span> | cut -d. -f2) &amp; $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f2) )) $(( $(echo <span class=\"variable\">$ip</span> | cut -d. -f3) &amp; $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f3) )) $(( $(echo <span class=\"variable\">$ip</span> | cut -d. -f4) &amp; $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f4) )))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算广播地址和网关地址</span></span><br><span class=\"line\">broadcast_address=$(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d.%d.%d.%d&quot;</span> $(( $(echo <span class=\"variable\">$network_address</span> | cut -d. -f1) | (<span class=\"number\">255</span> - $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f1) % <span class=\"number\">256</span>) )) $(( $(echo <span class=\"variable\">$network_address</span> | cut -d. -f2) | (<span class=\"number\">255</span> - $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f2) % <span class=\"number\">256</span>) )) $(( $(echo <span class=\"variable\">$network_address</span> | cut -d. -f3) | (<span class=\"number\">255</span> - $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f3) % <span class=\"number\">256</span>) )) $(( $(echo <span class=\"variable\">$network_address</span> | cut -d. -f4) | (<span class=\"number\">255</span> - $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f4) % <span class=\"number\">256</span>) )))</span><br><span class=\"line\"></span><br><span class=\"line\">gateway_address=$(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d.%d.%d.%d&quot;</span> $(<span class=\"built_in\">echo</span> <span class=\"variable\">$network_address</span> | <span class=\"built_in\">cut</span> -d. -f1) $(<span class=\"built_in\">echo</span> <span class=\"variable\">$network_address</span> | <span class=\"built_in\">cut</span> -d. -f2) $(<span class=\"built_in\">echo</span> <span class=\"variable\">$network_address</span> | <span class=\"built_in\">cut</span> -d. -f3) $(( $(echo <span class=\"variable\">$network_address</span> | cut -d. -f4) + <span class=\"number\">1</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;网络地址: <span class=\"variable\">$network_address</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;网关地址: <span class=\"variable\">$gateway_address</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;广播地址: <span class=\"variable\">$broadcast_address</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算主机地址范围</span></span><br><span class=\"line\">first_host=$(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d.%d.%d.%d&quot;</span> $(<span class=\"built_in\">echo</span> <span class=\"variable\">$network_address</span> | <span class=\"built_in\">cut</span> -d. -f1) $(<span class=\"built_in\">echo</span> <span class=\"variable\">$network_address</span> | <span class=\"built_in\">cut</span> -d. -f2) $(<span class=\"built_in\">echo</span> <span class=\"variable\">$network_address</span> | <span class=\"built_in\">cut</span> -d. -f3) $(( $(echo <span class=\"variable\">$network_address</span> | cut -d. -f4) + <span class=\"number\">1</span>)))</span><br><span class=\"line\">last_host=$(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d.%d.%d.%d&quot;</span> $(<span class=\"built_in\">echo</span> <span class=\"variable\">$broadcast_address</span> | <span class=\"built_in\">cut</span> -d. -f1) $(<span class=\"built_in\">echo</span> <span class=\"variable\">$broadcast_address</span> | <span class=\"built_in\">cut</span> -d. -f2) $(<span class=\"built_in\">echo</span> <span class=\"variable\">$broadcast_address</span> | <span class=\"built_in\">cut</span> -d. -f3) $(( $(echo <span class=\"variable\">$broadcast_address</span> | cut -d. -f4) - <span class=\"number\">1</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;主机地址范围: <span class=\"variable\">$first_host</span> 到 <span class=\"variable\">$last_host</span>&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看本机网络信息\">查看本机网络信息</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：ip</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：ip</span></span><br><span class=\"line\"><span class=\"comment\">#功能：查看本机网络信息</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认获取外网ip超时3秒</span></span><br><span class=\"line\">maxtime=3</span><br><span class=\"line\"></span><br><span class=\"line\">net_ip=$(curl --max-time <span class=\"variable\">$maxtime</span> --silent https://ipv4.icanhazip.com)</span><br><span class=\"line\">MAC=$(ifconfig | grep en0: -A 7 | grep ether | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f 2)</span><br><span class=\"line\">local_ip=$(ifconfig | grep -A 1 <span class=\"string\">&quot;en&quot;</span> | grep broadcast | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f 2 | <span class=\"built_in\">tr</span> <span class=\"string\">&quot;\\\\n&quot;</span> <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">DNS=$(nslookup localhost | grep Server | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;MAC: <span class=\"variable\">$&#123;MAC&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;IP: <span class=\"variable\">$&#123;local_ip&#125;</span> <span class=\"variable\">$&#123;net_ip&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;DNS: <span class=\"variable\">$&#123;DNS&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ip=`ifconfig | grep -A 1 <span class=\"string\">&quot;en&quot;</span> | grep broadcast | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f 2`</span><br><span class=\"line\">netmask=`ifconfig | grep -A 1 <span class=\"string\">&quot;en&quot;</span> | grep broadcast | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f 4`</span><br><span class=\"line\">Network=$(ipcalc -b <span class=\"variable\">$ip</span> <span class=\"variable\">$netmask</span> | grep Network | sed <span class=\"string\">&#x27;s/   / /&#x27;</span> | awk -F <span class=\"string\">&#x27; &#x27;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\nIP详细信息:&quot;</span></span><br><span class=\"line\">ip-info <span class=\"variable\">$&#123;Network&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"将十进制IP地址转换为二进制形式\">将十进制IP地址转换为二进制形式</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#功能：将十进制IP地址转换为二进制形式</span></span><br><span class=\"line\"><span class=\"comment\">#filename：ipTo2</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：ipTo2 192.168.16.155</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果：11000000.10101000.00010000.10011011</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否提供了正确数量的参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> -ne 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;用法: ipTo2 192.168.16.155&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">ip=<span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;ip&#125;</span> | <span class=\"built_in\">tr</span> <span class=\"string\">&#x27;.&#x27;</span> <span class=\"string\">&#x27; &#x27;</span>); <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=2 ; <span class=\"variable\">$i</span>&quot;</span> | bc; <span class=\"keyword\">done</span> | awk <span class=\"string\">&#x27;&#123;printf &quot;.%08d&quot;, $1&#125;&#x27;</span> | <span class=\"built_in\">cut</span> -c2-</span><br></pre></td></tr></table></figure>\n<h2 id=\"将二进制形式转换为十进制IP地址\">将二进制形式转换为十进制IP地址</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#功能：将十进制IP地址转换为二进制形式</span></span><br><span class=\"line\"><span class=\"comment\">#filename：2Toip</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：2Toip 11111111.11111111.11100000.00000000</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果：255.255.224.0</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否提供了正确数量的参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> -ne 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;用法: 2Toip 11111111.11111111.11100000.00000000&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$1</span>|awk -F. <span class=\"string\">&#x27;function bin2dec(a,b,i,c)&#123;b=length(a);c=0;for(i=1;i&lt;=b;i++)&#123;c+=c;if(substr(a,i,1)==&quot;1&quot;)c++&#125;return c&#125;&#123;for(j=1;j&lt;=NF;j++)printf(&quot;%d%s&quot;,bin2dec($j),j!=NF?&quot;.&quot;:&quot;\\n&quot;)&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串转ascii码\">字符串转ascii码</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：strtoascii</span></span><br><span class=\"line\"><span class=\"comment\">#功能：字符串转ascii码</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：strtoascii 你好hello</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果：\\u4f60\\u597d\\u68\\u65\\u6c\\u6c\\u6f</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否提供了正确数量的参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> -ne 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;用法: strtoascii 你好hello&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">str=<span class=\"variable\">$1</span></span><br><span class=\"line\">newstr=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ((i=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"variable\">$&#123;#str&#125;</span>;i=<span class=\"variable\">$i</span>+<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    text=<span class=\"string\">&quot;<span class=\"variable\">$&#123;str:$i:1&#125;</span>&quot;</span></span><br><span class=\"line\">    newtext=`<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%x&quot;</span> <span class=\"string\">&quot;&#x27;<span class=\"variable\">$text</span>&quot;</span>`;</span><br><span class=\"line\">    newstr=<span class=\"variable\">$newstr</span><span class=\"string\">&quot;\\\\\\\\u&quot;</span><span class=\"variable\">$newtext</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$newstr</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ascii码转字符串\">ascii码转字符串</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：asciitostr</span></span><br><span class=\"line\"><span class=\"comment\">#功能： ascii码转字符串</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：asciitostr \\u4f60\\u597d\\u68\\u65\\u6c\\u6c\\u6f</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果：你好hello</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否提供了正确数量的参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> -ne 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;用法: asciitostr \\u4f60\\u597d\\u68\\u65\\u6c\\u6c\\u6f&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否包含\\u，如果不包含，添加双引号</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> != *\\\\u* ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  input=$(<span class=\"built_in\">echo</span> -e <span class=\"variable\">$1</span> | sed <span class=\"string\">&#x27;s/u/\\\\u/g&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  input=<span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\"># 将Unicode转义序列解析为中文字符</span></span><br><span class=\"line\">result=$(<span class=\"built_in\">echo</span> -e <span class=\"variable\">$input</span> | perl -pe <span class=\"string\">&#x27;s/\\\\u([0-9a-fA-F]&#123;4&#125;)/chr(hex($1))/eg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$result</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"获取java文件的jdk编译版本\">获取java文件的jdk编译版本</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：jdk_version</span></span><br><span class=\"line\"><span class=\"comment\">#功能：获取对应java文件的jdk编译版本</span></span><br><span class=\"line\"><span class=\"comment\"># 如果是jar，这里只会检索jar包中第一个class的jdk编译版本，所以也不一定准确</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：jdk_version &lt;file_path:[.jar|.class|.war]&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 1.jar示例：</span></span><br><span class=\"line\"><span class=\"comment\">#  jdk_version xxl-job-admin-2.3.0.jar</span></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\">#  Build-Jdk: 1.8.0_271</span></span><br><span class=\"line\"><span class=\"comment\">#  file_path:[xxl-job-admin-2.3.0.jar]\tmajor_version:[52]\tjdk_version:[jdk1.8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.class示例</span></span><br><span class=\"line\"><span class=\"comment\">#  jdk_version XxlJobAdminConfig.class</span></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\">#  file_path:[XxlJobAdminConfig.class]\tmajor_version:[52]\tjdk_version:[jdk1.8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.war示例</span></span><br><span class=\"line\"><span class=\"comment\">#  jdk_version wardir/BOSS.war</span></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\">#  file_path:[wardir/BOSS.war]\t\tjdk_version:[1.7.0_67-b01 (Oracle Corporation)]</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义关联数组</span></span><br><span class=\"line\"><span class=\"built_in\">typeset</span> -A my_map</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 向关联数组中添加键值对</span></span><br><span class=\"line\"><span class=\"comment\"># LTS:</span></span><br><span class=\"line\"><span class=\"comment\">#    8(2014年初发布，免费版本至8u202，从8u211开始商用收费，支持到2030年9月)</span></span><br><span class=\"line\"><span class=\"comment\">#    11(2018年9月发布，免费版本版本至11.0.2，后续版本商用收费，支持到2032年9月)</span></span><br><span class=\"line\"><span class=\"comment\">#    17(2021年9月发布，免费，支持到2029年9月)</span></span><br><span class=\"line\"><span class=\"comment\">#    21(2023年9月发布，免费，支持到2031年9月)</span></span><br><span class=\"line\"><span class=\"comment\">#    25(预计2025年9月发布，支持到2033年9月)</span></span><br><span class=\"line\"><span class=\"comment\"># 后续Oracle计划每半年发布一个新的大版本(3、9月)，每两年发布一次LTS(9月)，建议正式环境只使用LTS版本</span></span><br><span class=\"line\"><span class=\"comment\"># 此处可以查看jdk发布计划：https://www.java.com/en/releases/matrix/</span></span><br><span class=\"line\"><span class=\"comment\"># JDK下载地址：https://www.oracle.com/cn/java/technologies/downloads/</span></span><br><span class=\"line\">my_map=(</span><br><span class=\"line\">    [45]=<span class=\"string\">&quot;jdk1.1&quot;</span></span><br><span class=\"line\">    [46]=<span class=\"string\">&quot;jdk1.2&quot;</span></span><br><span class=\"line\">    [47]=<span class=\"string\">&quot;jdk1.3&quot;</span></span><br><span class=\"line\">    [48]=<span class=\"string\">&quot;jdk1.4&quot;</span></span><br><span class=\"line\">    [49]=<span class=\"string\">&quot;jdk1.5&quot;</span></span><br><span class=\"line\">    [50]=<span class=\"string\">&quot;jdk1.6&quot;</span></span><br><span class=\"line\">    [51]=<span class=\"string\">&quot;jdk1.7&quot;</span></span><br><span class=\"line\">    [52]=<span class=\"string\">&quot;jdk1.8&quot;</span></span><br><span class=\"line\">    [53]=<span class=\"string\">&quot;jdk9&quot;</span></span><br><span class=\"line\">    [54]=<span class=\"string\">&quot;jdk10&quot;</span></span><br><span class=\"line\">    [55]=<span class=\"string\">&quot;jdk11&quot;</span></span><br><span class=\"line\">    [56]=<span class=\"string\">&quot;jdk12&quot;</span></span><br><span class=\"line\">    [57]=<span class=\"string\">&quot;jdk13&quot;</span></span><br><span class=\"line\">    [58]=<span class=\"string\">&quot;jdk14&quot;</span></span><br><span class=\"line\">    [59]=<span class=\"string\">&quot;jdk15&quot;</span></span><br><span class=\"line\">    [60]=<span class=\"string\">&quot;jdk16&quot;</span></span><br><span class=\"line\">    [61]=<span class=\"string\">&quot;jdk17&quot;</span></span><br><span class=\"line\">    [62]=<span class=\"string\">&quot;jdk18&quot;</span></span><br><span class=\"line\">    [63]=<span class=\"string\">&quot;jdk19&quot;</span></span><br><span class=\"line\">    [64]=<span class=\"string\">&quot;jdk20&quot;</span></span><br><span class=\"line\">    [65]=<span class=\"string\">&quot;jdk21&quot;</span></span><br><span class=\"line\">    [66]=<span class=\"string\">&quot;jdk22&quot;</span></span><br><span class=\"line\">    [67]=<span class=\"string\">&quot;jdk23&quot;</span></span><br><span class=\"line\">    [68]=<span class=\"string\">&quot;jdk24&quot;</span></span><br><span class=\"line\">    [69]=<span class=\"string\">&quot;jdk25&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取所有键并排序</span></span><br><span class=\"line\">sorted_keys=(<span class=\"variable\">$&#123;(o)<span class=\"variable\">$&#123;(k)my_map&#125;</span>&#125;</span>)</span><br><span class=\"line\"><span class=\"comment\"># echo $sorted_keys</span></span><br><span class=\"line\"></span><br><span class=\"line\">original_string=<span class=\"string\">&quot;\\tmajor_version\\tjdk_version&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27; 将字符串中的小写字母转换为大写字母。输出结果将是 &quot;MAJOR_VERSION\\tJDK_VERSION&quot;</span></span><br><span class=\"line\">uppercase_string=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$original_string</span>&quot;</span> | <span class=\"built_in\">tr</span> <span class=\"string\">&#x27;[:lower:]&#x27;</span> <span class=\"string\">&#x27;[:upper:]&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印map</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">echo_map</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;uppercase_string&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 按排序后的键输出键值对</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> <span class=\"variable\">$sorted_keys</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\t<span class=\"variable\">$key</span>\\t\\t<span class=\"variable\">$&#123;my_map[$key]&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">error_message</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: jdk_version &lt;file_path:[.jar|.class|.war]&gt;&quot;</span></span><br><span class=\"line\">    echo_map</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否传递了参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    error_message</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">file_path=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查文件是否存在</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -e <span class=\"string\">&quot;<span class=\"variable\">$file_path</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;文件不存在:file_path:[<span class=\"variable\">$&#123;file_path&#125;</span>]&quot;</span></span><br><span class=\"line\">    error_message</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">greap_content=<span class=\"string\">&quot;major version&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$file_path</span> == *.class ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过javap命令获取class文件的详细信息，grep过滤出包含 “major version” 的行，awk取出其版本号</span></span><br><span class=\"line\">    key=$(javap -verbose <span class=\"variable\">$&#123;file_path&#125;</span> | grep <span class=\"string\">&quot;<span class=\"variable\">$&#123;greap_content&#125;</span>&quot;</span> | awk -F<span class=\"string\">&#x27;: &#x27;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [[ <span class=\"variable\">$file_path</span> == *.jar ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># 先通过“jar tf”命令获取jar包中的class文件，这里只取出第一个，注意这里class路径必须去掉“.class”，之后再通过javap命令获取“-classpath”所指定的jar中的这个第一个class文件的详细信息，grep过滤出包含 “major version” 的行，awk取出其版本号</span></span><br><span class=\"line\">    key=$(javap -classpath <span class=\"variable\">$&#123;file_path&#125;</span> -verbose $(jar tf <span class=\"variable\">$&#123;file_path&#125;</span> | grep <span class=\"string\">&quot;.class$&quot;</span> | <span class=\"built_in\">head</span> -n 1 | sed s/.class//) | grep <span class=\"string\">&quot;<span class=\"variable\">$&#123;greap_content&#125;</span>&quot;</span> | awk -F<span class=\"string\">&#x27;: &#x27;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 通过jar包中的MANIFEST.MF文件来判断打包的jdk版本</span></span><br><span class=\"line\">    result=$(unzip -p <span class=\"variable\">$&#123;file_path&#125;</span> $(jar tf <span class=\"variable\">$&#123;file_path&#125;</span> | grep <span class=\"string\">&quot;MANIFEST.MF$&quot;</span> | <span class=\"built_in\">head</span> -n 1) | grep <span class=\"string\">&quot;^Build-Jdk&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$result</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        result=$(unzip -p <span class=\"variable\">$&#123;file_path&#125;</span> $(jar tf <span class=\"variable\">$&#123;file_path&#125;</span> | grep <span class=\"string\">&quot;MANIFEST.MF$&quot;</span> | <span class=\"built_in\">head</span> -n 1) | grep <span class=\"string\">&quot;^Created-By&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$result</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$result</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;没有在 MANIFEST.MF 中发现jdk相关信息&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [[ <span class=\"variable\">$file_path</span> == *.war ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># 查找 Build-Jdk</span></span><br><span class=\"line\">    jdk_version=$(unzip -p <span class=\"string\">&quot;<span class=\"variable\">$&#123;file_path&#125;</span>&quot;</span> META-INF/MANIFEST.MF | grep -i <span class=\"string\">&quot;^Build-Jdk&quot;</span> | awk -F<span class=\"string\">&#x27;: &#x27;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 如果 Build-Jdk 未找到，则尝试查找 Created-By</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$jdk_version</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        jdk_version=$(unzip -p <span class=\"string\">&quot;<span class=\"variable\">$&#123;file_path&#125;</span>&quot;</span> META-INF/MANIFEST.MF | grep -i <span class=\"string\">&quot;^Created-By&quot;</span> | awk -F<span class=\"string\">&#x27;: &#x27;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    error_message</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印结果</span></span><br><span class=\"line\"><span class=\"comment\"># 输出 JDK 版本信息</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$key</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;file_path:[<span class=\"variable\">$&#123;file_path&#125;</span>]\\tmajor_version:[<span class=\"variable\">$key</span>]\\tjdk_version:[<span class=\"variable\">$&#123;my_map[$key]&#125;</span>]&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$jdk_version</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># jdk_version含有特殊字符，通过如下命令查看包含哪些特殊字符，结果发现包含\\r\\n</span></span><br><span class=\"line\">    <span class=\"comment\"># echo &quot;$&#123;jdk_version&#125;&quot; | od -c</span></span><br><span class=\"line\">    <span class=\"comment\"># 去掉特殊字符 \\r\\n</span></span><br><span class=\"line\">    jdk_version_cleaned=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;jdk_version&#125;</span>&quot;</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;\\r\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span>  <span class=\"string\">&quot;file_path:[<span class=\"variable\">$&#123;file_path&#125;</span>]\\t\\tjdk_version:[<span class=\"variable\">$&#123;jdk_version_cleaned&#125;</span>]&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;JDK Version information not found&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n","content_text":"摘要 这里列举一些macos下一些有用的shell脚本 与本文脚本对应的centos脚本可以参看centos-shell 查看端口被哪个进程占用 12345678910111213#!/usr/bin/env zsh##################################################filename：port 授予执行权限#功能：查询端口被哪个进程占用#执行方法：port 8080#################################################port=$1if [ -z &quot;$port&quot; ]; then echo &quot;请加上端口作为参数，如：port 8080&quot;else lsof -i :$&#123;port&#125;fi 杀掉占用某个端口的进程 123456789101112131415161718192021222324#!/usr/bin/env zsh##################################################filename：killport 授予执行权限#功能：关闭占用端口的进程#执行方法：killport 8080#################################################if [ -z &quot;$1&quot; ]; then echo &quot;请加上端口作为参数，如：killport 8080&quot;else echo &quot;kill begin........&quot; pid=`port $1 | awk &#x27;NR&gt;1 &#123;print $2&#125;&#x27; | sort | uniq` echo $pid if [ -z &quot;$pid&quot; ] ; then echo &quot;No process running.&quot; #exit -1; else echo &quot;The process($&#123;pid&#125;) is running...&quot; kill $&#123;pid&#125; echo &quot;kill process($&#123;pid&#125;) OK&quot; fifi 本机端口通过跳板机转发到远程端口 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#!/usr/bin/env zsh##################################################filename：ssh_port 授予执行权限#功能：本机端口通过跳板机转发到远程端口#执行方法：# ssh_port start 8080 10.10.2.2 80# ssh_port stop 8080# ssh_port status 8080#################################################check()&#123; #验证参数是否为空 if [[ $&#123;#@&#125; &lt; 1 ]];then echo &quot;请输入参数！&quot; echo &quot;开启端口转发：ssh_port start 8080 10.10.2.2 80&quot; echo &quot;关闭端口转发：ssh_port stop 8080&quot; echo &quot;查看端口状态：ssh_port status 8080&quot; exit 1 fi&#125;check $@# 工作目录WORKDIR=&quot;/Users/$(whoami)/workdir&quot;# 操作类型operation=&quot;$1&quot;# 本地端口local_port=&quot;$2&quot;# 远程 IP 地址remote_ip=&quot;$3&quot;# 远程端口remote_port=&quot;$4&quot;# SSH 控制套接字文件sock_file=&quot;$WORKDIR/$local_port.sock&quot;# 跳板机，~/.ssh/config中的配置jump_name=jump-machinestart()&#123; echo &quot;start port begin........&quot; pid=`port $local_port | grep ssh | awk &#x27;&#123;print $2&#125;&#x27;` if [ -z &quot;$pid&quot; ] ; then # 建立连接 ssh -nNT -S &quot;$sock_file&quot; -L 127.0.0.1:$local_port:$remote_ip:$remote_port $jump_name echo &quot;ssh -nNT -S $&#123;sock_file&#125; -L 127.0.0.1:$&#123;local_port&#125;:$&#123;remote_ip&#125;:$&#123;remote_port&#125; $&#123;jump_name&#125;&quot; echo &quot;start port success!&quot; sleep 1 else echo &quot;port is running.&quot; fi&#125;stop()&#123; echo &quot;stop port begin........&quot; pid=`port $local_port | grep ssh | awk &#x27;&#123;print $2&#125;&#x27;` if [ -z &quot;$pid&quot; ] ; then echo &quot;No port running.&quot; else echo &quot;The port ($&#123;pid&#125;) is running...&quot; # kill -9 $pid ssh -S $sock_file -O exit $jump_name echo &quot;ssh -S $sock_file -O exit $jump_name&quot; echo &quot;stop port ($&#123;pid&#125;) success!&quot; fi&#125;status()&#123; echo &quot;check status port begin........&quot; pid=`port $local_port | grep ssh | awk &#x27;&#123;print $2&#125;&#x27;` if [ -z &quot;$pid&quot; ] ; then echo &quot;No port running.&quot; else echo &quot;The port ($&#123;pid&#125;) is running...&quot; port $local_port fi&#125;if [ -n &quot;$operation&quot; ];then # 判断操作类型 if [[ &quot;$operation&quot; == &quot;start&quot; ]]; then # 建立连接 start elif [[ &quot;$operation&quot; == &quot;stop&quot; ]]; then # 关闭连接 stop elif [[ &quot;$operation&quot; == &quot;status&quot; ]]; then # 关闭连接 status else check exit 1 fifi 查看域名到期时间 123456789101112131415161718192021222324252627282930313233343536373839#!/usr/bin/env zsh##################################################filename：check_domain 授予执行权限#功能：检查域名到期时间#执行方法：check_domain baidu.com google.com#输出结果：# baidu.com，过期日期：2026-10-11# 距离到期还有958天# google.com，过期日期：2028-09-14# 距离到期还有1662天##################################################验证域名参数是否为空if [[ $&#123;#@&#125; &lt; 1 ]];then echo &quot;请输入域名，多个域名空格分隔，如：check_domain baidu.com google.com&quot;fi#检测域名到期时间for domain in &quot;$@&quot;;do #取出域名过期时间 expire_date=`whois $domain | grep &quot;Expiration Time&quot; | awk &#x27;&#123;print $3&#125;&#x27;` if [ -z &quot;$expire_date&quot; ];then expire_date=`whois $domain | grep &#x27;Expiry Date&#x27;| awk &#x27;&#123;print $4&#125;&#x27;| cut -d &#x27;T&#x27; -f 1` fi echo &quot;$&#123;domain&#125;，过期日期：$&#123;expire_date&#125;&quot; #转换成时间戳 # 1.linux # expire_date_timestamp=`date -d $expire_date +%s` # 2.macos # https://blog.csdn.net/zhw21w/article/details/126010972 expire_date_timestamp=`date -j -f %Y-%m-%d $expire_date +%s` #以时间戳的形式显示当前时间 now=`date &#x27;+%s&#x27;` #域名到期剩余天数 time_left=$[$[$expire_date_timestamp-$now]/86400] echo &quot;距离到期还有$&#123;time_left&#125;天&quot;done 查看证书到期时间 123456789101112131415161718192021222324252627282930313233343536#!/usr/bin/env zsh##################################################filename：ssl_check 授予执行权限#功能：检查证书到期时间#执行方法：ssl_check www.baidu.com www.google.com#输出结果：# 证书：www.baidu.com，过期时间：2024-08-06 01:51:05# 距离到期还有161天# 证书：www.google.com，过期时间：2024-04-29 08:19:49# 距离到期还有62天##################################################验证证书参数是否为空if [[ $&#123;#@&#125; &lt; 1 ]];then echo &quot;请输入证书，多个证书空格分隔，如：ssl_check www.baidu.com www.google.com&quot;fi#获取证书的有效时间for domain in &quot;$@&quot;;do # 这里在openssl x509 -noout -dates后面加上了2&gt;/dev/null，否则会打印告警信息：Warning: Reading certificate from stdin since no -in or -new option is given # 您可以忽略此警告。它只是表明您没有使用 -in 或 -new 选项指定输入文件，因此 OpenSSL 将从标准输入 (stdin) 读取证书。 time=$(echo | openssl s_client -connect $domain:443 2&gt;/dev/null | openssl x509 -noout -dates 2&gt;/dev/null |awk -F&#x27;=&#x27; &#x27;NR==2&#123;print $2&#125;&#x27;) #echo $time #取出域名过期时间 expire_date=`env LC_ALL=en_US.en date -j -f &#x27;%b %d %H:%M:%S %Y GMT&#x27; &quot;$time&quot; &#x27;+%Y-%m-%d %H:%M:%S&#x27;` echo &quot;证书：$domain，过期时间：$expire_date&quot; expire_date_timestamp=`date -j -f &#x27;%Y-%m-%d %H:%M:%S&#x27; $expire_date +%s` #以时间戳的形式显示当前时间 now=`date &#x27;+%s&#x27;` #证书到期剩余天数 time_left=$[$[$expire_date_timestamp-$now]/86400] echo &quot;距离到期还有$&#123;time_left&#125;天&quot;done 查看指定IP的详细信息 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#!/usr/bin/env zsh################################################## filename：ip-info 授权执行权限# 功能：查看IP信息# 使用方法：ip-info 10.10.2.24/24# 输出结果：# 网络地址: 10.10.2.0# 网关地址: 10.10.2.1# 广播地址: 10.10.2.255# 主机地址范围: 10.10.2.1 到 10.10.2.254# 也可以使用 sipcalc 命令，用法更多，显示也会更为详细：# 安装：brew install sipcalc# 使用示例：# sipcalc 1.119.161.30/30# sipcalc 10.10.2.32 255.255.255.0# sipcalc 10.10.2.32 0xffffff00################################################## 检查是否提供了正确数量的参数if [ &quot;$#&quot; -ne 1 ]; then echo &quot;用法: $0 &lt;IP地址/子网掩码CIDR&gt;&quot; exit 1fi# 获取命令行参数ip_cidr=&quot;$1&quot;# 分割IP地址和子网掩码IFS=&#x27;/&#x27; read -A ip_parts &lt;&lt;&lt; &quot;$ip_cidr&quot;ip=$&#123;ip_parts[1]&#125;subnet_cidr=$&#123;ip_parts[2]&#125;# 计算子网掩码的二进制表示subnet_binary=$(printf &#x27;1%.0s&#x27; $(seq 1 &quot;$subnet_cidr&quot;) &amp;&amp; printf &#x27;0%.0s&#x27; $(seq 1 $((32 - $subnet_cidr))))# 将二进制子网掩码转换为点分十进制表示subnet_mask_decimal=$(printf &quot;%d.%d.%d.%d&quot; $((2#$&#123;subnet_binary:0:8&#125;)) $((2#$&#123;subnet_binary:8:8&#125;)) $((2#$&#123;subnet_binary:16:8&#125;)) $((2#$&#123;subnet_binary:24:8&#125;)))# 使用按位与运算计算网络地址network_address=$(printf &quot;%d.%d.%d.%d&quot; $(( $(echo $ip | cut -d. -f1) &amp; $(echo $subnet_mask_decimal | cut -d. -f1) )) $(( $(echo $ip | cut -d. -f2) &amp; $(echo $subnet_mask_decimal | cut -d. -f2) )) $(( $(echo $ip | cut -d. -f3) &amp; $(echo $subnet_mask_decimal | cut -d. -f3) )) $(( $(echo $ip | cut -d. -f4) &amp; $(echo $subnet_mask_decimal | cut -d. -f4) )))# 计算广播地址和网关地址broadcast_address=$(printf &quot;%d.%d.%d.%d&quot; $(( $(echo $network_address | cut -d. -f1) | (255 - $(echo $subnet_mask_decimal | cut -d. -f1) % 256) )) $(( $(echo $network_address | cut -d. -f2) | (255 - $(echo $subnet_mask_decimal | cut -d. -f2) % 256) )) $(( $(echo $network_address | cut -d. -f3) | (255 - $(echo $subnet_mask_decimal | cut -d. -f3) % 256) )) $(( $(echo $network_address | cut -d. -f4) | (255 - $(echo $subnet_mask_decimal | cut -d. -f4) % 256) )))gateway_address=$(printf &quot;%d.%d.%d.%d&quot; $(echo $network_address | cut -d. -f1) $(echo $network_address | cut -d. -f2) $(echo $network_address | cut -d. -f3) $(( $(echo $network_address | cut -d. -f4) + 1)))# 输出结果echo &quot;网络地址: $network_address&quot;echo &quot;网关地址: $gateway_address&quot;echo &quot;广播地址: $broadcast_address&quot;# 计算主机地址范围first_host=$(printf &quot;%d.%d.%d.%d&quot; $(echo $network_address | cut -d. -f1) $(echo $network_address | cut -d. -f2) $(echo $network_address | cut -d. -f3) $(( $(echo $network_address | cut -d. -f4) + 1)))last_host=$(printf &quot;%d.%d.%d.%d&quot; $(echo $broadcast_address | cut -d. -f1) $(echo $broadcast_address | cut -d. -f2) $(echo $broadcast_address | cut -d. -f3) $(( $(echo $broadcast_address | cut -d. -f4) - 1)))echo &quot;主机地址范围: $first_host 到 $last_host&quot; 查看本机网络信息 12345678910111213141516171819202122232425#!/usr/bin/env zsh##################################################filename：ip#执行方法：ip#功能：查看本机网络信息################################################## 默认获取外网ip超时3秒maxtime=3net_ip=$(curl --max-time $maxtime --silent https://ipv4.icanhazip.com)MAC=$(ifconfig | grep en0: -A 7 | grep ether | cut -d &quot; &quot; -f 2)local_ip=$(ifconfig | grep -A 1 &quot;en&quot; | grep broadcast | cut -d &quot; &quot; -f 2 | tr &quot;\\\\n&quot; &quot; &quot;)DNS=$(nslookup localhost | grep Server | awk &#x27;&#123;print $2&#125;&#x27;)echo &quot;MAC: $&#123;MAC&#125;&quot;echo &quot;IP: $&#123;local_ip&#125; $&#123;net_ip&#125;&quot;echo &quot;DNS: $&#123;DNS&#125;&quot;ip=`ifconfig | grep -A 1 &quot;en&quot; | grep broadcast | cut -d &quot; &quot; -f 2`netmask=`ifconfig | grep -A 1 &quot;en&quot; | grep broadcast | cut -d &quot; &quot; -f 4`Network=$(ipcalc -b $ip $netmask | grep Network | sed &#x27;s/ / /&#x27; | awk -F &#x27; &#x27; &#x27;&#123;print $2&#125;&#x27;)echo &quot;\\nIP详细信息:&quot;ip-info $&#123;Network&#125; 将十进制IP地址转换为二进制形式 12345678910111213141516#!/usr/bin/env zsh##################################################功能：将十进制IP地址转换为二进制形式#filename：ipTo2#执行方法：ipTo2 192.168.16.155#输出结果：11000000.10101000.00010000.10011011################################################## 检查是否提供了正确数量的参数if [ &quot;$#&quot; -ne 1 ]; then echo &quot;用法: ipTo2 192.168.16.155&quot; exit 1fiip=$1for i in $(echo $&#123;ip&#125; | tr &#x27;.&#x27; &#x27; &#x27;); do echo &quot;obase=2 ; $i&quot; | bc; done | awk &#x27;&#123;printf &quot;.%08d&quot;, $1&#125;&#x27; | cut -c2- 将二进制形式转换为十进制IP地址 123456789101112131415#!/usr/bin/env zsh##################################################功能：将十进制IP地址转换为二进制形式#filename：2Toip#执行方法：2Toip 11111111.11111111.11100000.00000000#输出结果：255.255.224.0################################################## 检查是否提供了正确数量的参数if [ &quot;$#&quot; -ne 1 ]; then echo &quot;用法: 2Toip 11111111.11111111.11100000.00000000&quot; exit 1fiecho $1|awk -F. &#x27;function bin2dec(a,b,i,c)&#123;b=length(a);c=0;for(i=1;i&lt;=b;i++)&#123;c+=c;if(substr(a,i,1)==&quot;1&quot;)c++&#125;return c&#125;&#123;for(j=1;j&lt;=NF;j++)printf(&quot;%d%s&quot;,bin2dec($j),j!=NF?&quot;.&quot;:&quot;\\n&quot;)&#125;&#x27; 字符串转ascii码 123456789101112131415161718192021222324#!/usr/bin/env zsh##################################################filename：strtoascii#功能：字符串转ascii码#执行方法：strtoascii 你好hello#输出结果：\\u4f60\\u597d\\u68\\u65\\u6c\\u6c\\u6f################################################## 检查是否提供了正确数量的参数if [ &quot;$#&quot; -ne 1 ]; then echo &quot;用法: strtoascii 你好hello&quot; exit 1fistr=$1newstr=&quot;&quot;for ((i=0;$i&lt;$&#123;#str&#125;;i=$i+1));do text=&quot;$&#123;str:$i:1&#125;&quot; newtext=`printf &quot;%x&quot; &quot;&#x27;$text&quot;`; newstr=$newstr&quot;\\\\\\\\u&quot;$newtextdoneecho $newstr ascii码转字符串 12345678910111213141516171819202122232425#!/usr/bin/env zsh##################################################filename：asciitostr#功能： ascii码转字符串#执行方法：asciitostr \\u4f60\\u597d\\u68\\u65\\u6c\\u6c\\u6f#输出结果：你好hello################################################## 检查是否提供了正确数量的参数if [ &quot;$#&quot; -ne 1 ]; then echo &quot;用法: asciitostr \\u4f60\\u597d\\u68\\u65\\u6c\\u6c\\u6f&quot; exit 1fi# 检查是否包含\\u，如果不包含，添加双引号if [[ &quot;$1&quot; != *\\\\u* ]]; then input=$(echo -e $1 | sed &#x27;s/u/\\\\u/g&#x27;)else input=$1fi# 将Unicode转义序列解析为中文字符result=$(echo -e $input | perl -pe &#x27;s/\\\\u([0-9a-fA-F]&#123;4&#125;)/chr(hex($1))/eg&#x27;)# 输出结果echo &quot;$result&quot; 获取java文件的jdk编译版本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146#!/usr/bin/env zsh##################################################filename：jdk_version#功能：获取对应java文件的jdk编译版本# 如果是jar，这里只会检索jar包中第一个class的jdk编译版本，所以也不一定准确##执行方法：jdk_version &lt;file_path:[.jar|.class|.war]&gt;# 1.jar示例：# jdk_version xxl-job-admin-2.3.0.jar# 输出：# Build-Jdk: 1.8.0_271# file_path:[xxl-job-admin-2.3.0.jar] major_version:[52] jdk_version:[jdk1.8]# 2.class示例# jdk_version XxlJobAdminConfig.class# 输出：# file_path:[XxlJobAdminConfig.class] major_version:[52] jdk_version:[jdk1.8]# 3.war示例# jdk_version wardir/BOSS.war# 输出：# file_path:[wardir/BOSS.war] jdk_version:[1.7.0_67-b01 (Oracle Corporation)]################################################## 定义关联数组typeset -A my_map# 向关联数组中添加键值对# LTS:# 8(2014年初发布，免费版本至8u202，从8u211开始商用收费，支持到2030年9月)# 11(2018年9月发布，免费版本版本至11.0.2，后续版本商用收费，支持到2032年9月)# 17(2021年9月发布，免费，支持到2029年9月)# 21(2023年9月发布，免费，支持到2031年9月)# 25(预计2025年9月发布，支持到2033年9月)# 后续Oracle计划每半年发布一个新的大版本(3、9月)，每两年发布一次LTS(9月)，建议正式环境只使用LTS版本# 此处可以查看jdk发布计划：https://www.java.com/en/releases/matrix/# JDK下载地址：https://www.oracle.com/cn/java/technologies/downloads/my_map=( [45]=&quot;jdk1.1&quot; [46]=&quot;jdk1.2&quot; [47]=&quot;jdk1.3&quot; [48]=&quot;jdk1.4&quot; [49]=&quot;jdk1.5&quot; [50]=&quot;jdk1.6&quot; [51]=&quot;jdk1.7&quot; [52]=&quot;jdk1.8&quot; [53]=&quot;jdk9&quot; [54]=&quot;jdk10&quot; [55]=&quot;jdk11&quot; [56]=&quot;jdk12&quot; [57]=&quot;jdk13&quot; [58]=&quot;jdk14&quot; [59]=&quot;jdk15&quot; [60]=&quot;jdk16&quot; [61]=&quot;jdk17&quot; [62]=&quot;jdk18&quot; [63]=&quot;jdk19&quot; [64]=&quot;jdk20&quot; [65]=&quot;jdk21&quot; [66]=&quot;jdk22&quot; [67]=&quot;jdk23&quot; [68]=&quot;jdk24&quot; [69]=&quot;jdk25&quot;)# 获取所有键并排序sorted_keys=($&#123;(o)$&#123;(k)my_map&#125;&#125;)# echo $sorted_keysoriginal_string=&quot;\\tmajor_version\\tjdk_version&quot;# tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27; 将字符串中的小写字母转换为大写字母。输出结果将是 &quot;MAJOR_VERSION\\tJDK_VERSION&quot;uppercase_string=$(echo &quot;$original_string&quot; | tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27;)# 打印mapecho_map() &#123; echo &quot;$&#123;uppercase_string&#125;&quot; # 按排序后的键输出键值对 for key in $sorted_keys; do echo &quot;\\t$key\\t\\t$&#123;my_map[$key]&#125;&quot; done&#125;error_message() &#123; echo &quot;Usage: jdk_version &lt;file_path:[.jar|.class|.war]&gt;&quot; echo_map exit 1&#125;# 检查是否传递了参数if [ -z &quot;$1&quot; ]; then error_messagefifile_path=$1# 检查文件是否存在if [ ! -e &quot;$file_path&quot; ]; then echo &quot;文件不存在:file_path:[$&#123;file_path&#125;]&quot; error_messagefigreap_content=&quot;major version&quot;if [[ $file_path == *.class ]]; then # 通过javap命令获取class文件的详细信息，grep过滤出包含 “major version” 的行，awk取出其版本号 key=$(javap -verbose $&#123;file_path&#125; | grep &quot;$&#123;greap_content&#125;&quot; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)elif [[ $file_path == *.jar ]]; then # 先通过“jar tf”命令获取jar包中的class文件，这里只取出第一个，注意这里class路径必须去掉“.class”，之后再通过javap命令获取“-classpath”所指定的jar中的这个第一个class文件的详细信息，grep过滤出包含 “major version” 的行，awk取出其版本号 key=$(javap -classpath $&#123;file_path&#125; -verbose $(jar tf $&#123;file_path&#125; | grep &quot;.class$&quot; | head -n 1 | sed s/.class//) | grep &quot;$&#123;greap_content&#125;&quot; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;) # 通过jar包中的MANIFEST.MF文件来判断打包的jdk版本 result=$(unzip -p $&#123;file_path&#125; $(jar tf $&#123;file_path&#125; | grep &quot;MANIFEST.MF$&quot; | head -n 1) | grep &quot;^Build-Jdk&quot;) if [ -z &quot;$result&quot; ]; then result=$(unzip -p $&#123;file_path&#125; $(jar tf $&#123;file_path&#125; | grep &quot;MANIFEST.MF$&quot; | head -n 1) | grep &quot;^Created-By&quot;) fi if [ -n &quot;$result&quot; ]; then echo $result else echo &quot;没有在 MANIFEST.MF 中发现jdk相关信息&quot; fielif [[ $file_path == *.war ]]; then # 查找 Build-Jdk jdk_version=$(unzip -p &quot;$&#123;file_path&#125;&quot; META-INF/MANIFEST.MF | grep -i &quot;^Build-Jdk&quot; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;) # 如果 Build-Jdk 未找到，则尝试查找 Created-By if [ -z &quot;$jdk_version&quot; ]; then jdk_version=$(unzip -p &quot;$&#123;file_path&#125;&quot; META-INF/MANIFEST.MF | grep -i &quot;^Created-By&quot; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;) fielse error_messagefi# 打印结果# 输出 JDK 版本信息if [ -n &quot;$key&quot; ]; then echo &quot;file_path:[$&#123;file_path&#125;]\\tmajor_version:[$key]\\tjdk_version:[$&#123;my_map[$key]&#125;]&quot;elif [ -n &quot;$jdk_version&quot; ]; then # jdk_version含有特殊字符，通过如下命令查看包含哪些特殊字符，结果发现包含\\r\\n # echo &quot;$&#123;jdk_version&#125;&quot; | od -c # 去掉特殊字符 \\r\\n jdk_version_cleaned=$(echo &quot;$&#123;jdk_version&#125;&quot; | tr -d &#x27;\\r\\n&#x27;) echo &quot;file_path:[$&#123;file_path&#125;]\\t\\tjdk_version:[$&#123;jdk_version_cleaned&#125;]&quot;else echo &quot;JDK Version information not found&quot;fi","summary":"摘要 这里列举一些macos下一些有用的shell脚本 与本文脚本对应的centos脚本可以参看centos-shell","date_published":"2024-02-23T13:55:05.000Z","tags":["技术","macos","macos"]},{"id":"https://blog.hanqunfeng.com/2024/01/26/aws-s3-java/","url":"https://blog.hanqunfeng.com/2024/01/26/aws-s3-java/","title":"S3--AWS SDK for Java","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍如何使用AWS SDK for Java V2操作S3。</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/sdk-for-java/\">AWS SDK for Java 文档</a></li>\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/userguide/service_code_examples.html\">适用于使用 AWS 软件开发工具包的 Amazon S3 的代码示例</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"示例代码\">示例代码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.utils.AmazonS3V2Util;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.utils.MyIOUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.utils.S3ClientFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 文件下载，支持断点续传，支持分段下载</span></span><br><span class=\"line\"><span class=\"comment\">     * 分段下载的好处就是可以进行多线程下载，提高下载速度，下载完成后再将所有的分段文件进行合并成一个完整的文件</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 可以先下载一个字节的数据，此时可以获取文件总的字节数，然后基于这个总字节数决定分段大小</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/file-down-range&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fileDownRange</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 服务器上的文件路径，这里只是为了演示方便，实际使用时，需要根据文件的实际存储方式进行处理</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">localFileName</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;fileName&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(localFileName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;没有上传fileName！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(localFileName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(localFileName + <span class=\"string\">&quot;:文件不存在！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">contentLength</span> <span class=\"operator\">=</span> file.length();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">range</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;Range&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(range) &amp;&amp; (range.contains(<span class=\"string\">&quot;bytes=&quot;</span>) &amp;&amp; range.contains(<span class=\"string\">&quot;-&quot;</span>))) &#123;</span><br><span class=\"line\">            start = org.apache.commons.lang.StringUtils.substringBetween(range, <span class=\"string\">&quot;bytes=&quot;</span>, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">            end = org.apache.commons.lang.StringUtils.substringAfter(range, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">startIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">endIndex</span> <span class=\"operator\">=</span> contentLength - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(start)) &#123;</span><br><span class=\"line\">            startIndex = Long.parseLong(start);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(end)) &#123;</span><br><span class=\"line\">            endIndex = Long.parseLong(end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;range:&quot;</span> + startIndex + <span class=\"string\">&quot;~&quot;</span> + endIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> localFileName;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (localFileName.contains(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">            fileName = localFileName.substring(localFileName.lastIndexOf(<span class=\"string\">&quot;/&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(start)) &#123;</span><br><span class=\"line\">            fileName = fileName + <span class=\"string\">&quot;.&quot;</span> + startIndex + <span class=\"string\">&quot;-&quot;</span> + endIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> endIndex - startIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/octet-stream&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Accept-Ranges&quot;</span>, <span class=\"string\">&quot;bytes&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Range&quot;</span>, <span class=\"string\">&quot;bytes &quot;</span> + startIndex + <span class=\"string\">&quot;-&quot;</span> + endIndex + <span class=\"string\">&quot;/&quot;</span> + contentLength);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Length&quot;</span>, length + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        response.addHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>, <span class=\"string\">&quot;attachment;filename=&quot;</span> + fileName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取文件流</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">ServletOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> response.getOutputStream(); <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> Files.newInputStream(file.toPath())) &#123;</span><br><span class=\"line\">            MyIOUtil.copyDataFromInputStreamToOutputStream(inputStream, startIndex, length, outputStream, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * S3文件下载，分段下载</span></span><br><span class=\"line\"><span class=\"comment\">     * num 分段号，从1开始</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/s3-down/&#123;num&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">s3Down</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> <span class=\"type\">int</span> num, HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分段下载测试</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">remoteFileName</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;fileName&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(remoteFileName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(remoteFileName + <span class=\"string\">&quot;:文件不存在！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> remoteFileName;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remoteFileName.contains(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">            fileName = remoteFileName.substring(remoteFileName.lastIndexOf(<span class=\"string\">&quot;/&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fileName = fileName + <span class=\"string\">&quot;.&quot;</span> + num;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">contentLength</span> <span class=\"operator\">=</span> AmazonS3V2Util.getObjectInfo(S3ClientFactory.BUCKET_NAME, remoteFileName).contentLength();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> java.util.List&lt;Long&gt; positions = AmazonS3V2Util.positions(contentLength);</span><br><span class=\"line\">        positions.add(contentLength);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> positions.get(num - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> positions.get(num) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;range:&quot;</span> + start + <span class=\"string\">&quot;~&quot;</span> + end);</span><br><span class=\"line\"></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/octet-stream&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Accept-Ranges&quot;</span>, <span class=\"string\">&quot;bytes&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Range&quot;</span>, <span class=\"string\">&quot;bytes &quot;</span> + start + <span class=\"string\">&quot;-&quot;</span> + end + <span class=\"string\">&quot;/&quot;</span> + contentLength);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Length&quot;</span>, (end - start + <span class=\"number\">1</span>) + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        response.addHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>, <span class=\"string\">&quot;attachment;filename=&quot;</span> + fileName);</span><br><span class=\"line\">        <span class=\"type\">ServletOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> response.getOutputStream();</span><br><span class=\"line\">        AmazonS3V2Util.downloadSubsectionAndCloseOutputStream(S3ClientFactory.BUCKET_NAME, remoteFileName, start, end, outputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * S3文件下载，支持断点续传，支持分段下载</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/s3-down-range&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">s3DownRange</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分段下载测试</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">remoteFileName</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;fileName&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(remoteFileName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(remoteFileName + <span class=\"string\">&quot;:文件不存在！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">contentLength</span> <span class=\"operator\">=</span> AmazonS3V2Util.getObjectInfo(S3ClientFactory.BUCKET_NAME, remoteFileName).contentLength();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">range</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;Range&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(range) &amp;&amp; (range.contains(<span class=\"string\">&quot;bytes=&quot;</span>) &amp;&amp; range.contains(<span class=\"string\">&quot;-&quot;</span>))) &#123;</span><br><span class=\"line\">            start = org.apache.commons.lang.StringUtils.substringBetween(range, <span class=\"string\">&quot;bytes=&quot;</span>, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">            end = org.apache.commons.lang.StringUtils.substringAfter(range, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">startIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">endIndex</span> <span class=\"operator\">=</span> contentLength - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(start)) &#123;</span><br><span class=\"line\">            startIndex = Long.parseLong(start);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(end)) &#123;</span><br><span class=\"line\">            endIndex = Long.parseLong(end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;range:&quot;</span> + startIndex + <span class=\"string\">&quot;~&quot;</span> + endIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> remoteFileName;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remoteFileName.contains(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">            fileName = remoteFileName.substring(remoteFileName.lastIndexOf(<span class=\"string\">&quot;/&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(start)) &#123;</span><br><span class=\"line\">            fileName = fileName + <span class=\"string\">&quot;.&quot;</span> + startIndex + <span class=\"string\">&quot;-&quot;</span> + endIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/octet-stream&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Accept-Ranges&quot;</span>, <span class=\"string\">&quot;bytes&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Range&quot;</span>, <span class=\"string\">&quot;bytes &quot;</span> + startIndex + <span class=\"string\">&quot;-&quot;</span> + endIndex + <span class=\"string\">&quot;/&quot;</span> + contentLength);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Length&quot;</span>, (endIndex - startIndex + <span class=\"number\">1</span>) + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        response.addHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>, <span class=\"string\">&quot;attachment;filename=&quot;</span> + fileName);</span><br><span class=\"line\">        <span class=\"type\">ServletOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> response.getOutputStream();</span><br><span class=\"line\">        AmazonS3V2Util.downloadSubsectionAndCloseOutputStream(S3ClientFactory.BUCKET_NAME, remoteFileName, startIndex, endIndex, outputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上传文件到S3，支持分段上传</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/uploadToS3&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">uploadFileToS3</span><span class=\"params\">(MultipartFile file, String remoteFileName)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file != <span class=\"literal\">null</span> &amp;&amp; StringUtils.hasText(remoteFileName)) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;上传文件到S3：&quot;</span> + remoteFileName);</span><br><span class=\"line\">            AmazonS3V2Util.multipartUpload(S3ClientFactory.BUCKET_NAME, remoteFileName, file.getBytes(), <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;上传成功&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;上传失败&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"源码地址\">源码地址</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>V2版本：<a href=\"https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/aws-s3-v2\">https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/aws-s3-v2</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>V1版本：<a href=\"https://github.com/hanqunfeng/springbootchapter/blob/master/springboot3-demo/resumed-transfer-offset/src/main/java/com/hanqf/resumedtransferoffset/utils/AmazonS3Util.java\">https://github.com/hanqunfeng/springbootchapter/blob/master/springboot3-demo/resumed-transfer-offset/src/main/java/com/hanqf/resumedtransferoffset/utils/AmazonS3Util.java</a></p>\n</li>\n</ul>\n","content_text":"摘要 本文介绍如何使用AWS SDK for Java V2操作S3。 参考资料： AWS SDK for Java 文档 适用于使用 AWS 软件开发工具包的 Amazon S3 的代码示例 示例代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186package com.hanqf.controller;import com.hanqf.utils.AmazonS3V2Util;import com.hanqf.utils.MyIOUtil;import com.hanqf.utils.S3ClientFactory;import jakarta.servlet.ServletOutputStream;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import lombok.extern.slf4j.Slf4j;import org.springframework.util.StringUtils;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.nio.file.Files;@Slf4j@RestControllerpublic class DemoController &#123; /** * 文件下载，支持断点续传，支持分段下载 * 分段下载的好处就是可以进行多线程下载，提高下载速度，下载完成后再将所有的分段文件进行合并成一个完整的文件 * &lt;p&gt; * 可以先下载一个字节的数据，此时可以获取文件总的字节数，然后基于这个总字节数决定分段大小 */ @GetMapping(&quot;/file-down-range&quot;) public void fileDownRange(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; // 服务器上的文件路径，这里只是为了演示方便，实际使用时，需要根据文件的实际存储方式进行处理 String localFileName = request.getParameter(&quot;fileName&quot;); if (!StringUtils.hasText(localFileName)) &#123; throw new RuntimeException(&quot;没有上传fileName！&quot;); &#125; File file = new File(localFileName); if (!file.exists()) &#123; throw new RuntimeException(localFileName + &quot;:文件不存在！&quot;); &#125; final long contentLength = file.length(); String range = request.getHeader(&quot;Range&quot;); String start = null; String end = null; if (StringUtils.hasText(range) &amp;&amp; (range.contains(&quot;bytes=&quot;) &amp;&amp; range.contains(&quot;-&quot;))) &#123; start = org.apache.commons.lang.StringUtils.substringBetween(range, &quot;bytes=&quot;, &quot;-&quot;); end = org.apache.commons.lang.StringUtils.substringAfter(range, &quot;-&quot;); &#125; long startIndex = 0; long endIndex = contentLength - 1; if (StringUtils.hasText(start)) &#123; startIndex = Long.parseLong(start); &#125; if (StringUtils.hasText(end)) &#123; endIndex = Long.parseLong(end); &#125; log.info(&quot;range:&quot; + startIndex + &quot;~&quot; + endIndex); String fileName = localFileName; if (localFileName.contains(&quot;/&quot;)) &#123; fileName = localFileName.substring(localFileName.lastIndexOf(&quot;/&quot;) + 1); &#125; if (StringUtils.hasText(start)) &#123; fileName = fileName + &quot;.&quot; + startIndex + &quot;-&quot; + endIndex; &#125; long length = endIndex - startIndex + 1; response.setContentType(&quot;application/octet-stream&quot;); response.setHeader(&quot;Accept-Ranges&quot;, &quot;bytes&quot;); response.setHeader(&quot;Content-Range&quot;, &quot;bytes &quot; + startIndex + &quot;-&quot; + endIndex + &quot;/&quot; + contentLength); response.setHeader(&quot;Content-Length&quot;, length + &quot;&quot;); response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + fileName); // 读取文件流 try (ServletOutputStream outputStream = response.getOutputStream(); InputStream inputStream = Files.newInputStream(file.toPath())) &#123; MyIOUtil.copyDataFromInputStreamToOutputStream(inputStream, startIndex, length, outputStream, true); &#125; &#125; /** * S3文件下载，分段下载 * num 分段号，从1开始 */ @GetMapping(&quot;/s3-down/&#123;num&#125;&quot;) public void s3Down(@PathVariable int num, HttpServletRequest request, HttpServletResponse response) throws IOException &#123; // 分段下载测试 String remoteFileName = request.getParameter(&quot;fileName&quot;); if (!StringUtils.hasText(remoteFileName)) &#123; throw new RuntimeException(remoteFileName + &quot;:文件不存在！&quot;); &#125; String fileName = remoteFileName; if (remoteFileName.contains(&quot;/&quot;)) &#123; fileName = remoteFileName.substring(remoteFileName.lastIndexOf(&quot;/&quot;) + 1); &#125; fileName = fileName + &quot;.&quot; + num; final long contentLength = AmazonS3V2Util.getObjectInfo(S3ClientFactory.BUCKET_NAME, remoteFileName).contentLength(); final java.util.List&lt;Long&gt; positions = AmazonS3V2Util.positions(contentLength); positions.add(contentLength); long start = positions.get(num - 1); long end = positions.get(num) - 1; log.info(&quot;range:&quot; + start + &quot;~&quot; + end); response.setContentType(&quot;application/octet-stream&quot;); response.setHeader(&quot;Accept-Ranges&quot;, &quot;bytes&quot;); response.setHeader(&quot;Content-Range&quot;, &quot;bytes &quot; + start + &quot;-&quot; + end + &quot;/&quot; + contentLength); response.setHeader(&quot;Content-Length&quot;, (end - start + 1) + &quot;&quot;); response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + fileName); ServletOutputStream outputStream = response.getOutputStream(); AmazonS3V2Util.downloadSubsectionAndCloseOutputStream(S3ClientFactory.BUCKET_NAME, remoteFileName, start, end, outputStream); &#125; /** * S3文件下载，支持断点续传，支持分段下载 */ @GetMapping(&quot;/s3-down-range&quot;) public void s3DownRange(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; // 分段下载测试 String remoteFileName = request.getParameter(&quot;fileName&quot;); if (!StringUtils.hasText(remoteFileName)) &#123; throw new RuntimeException(remoteFileName + &quot;:文件不存在！&quot;); &#125; final long contentLength = AmazonS3V2Util.getObjectInfo(S3ClientFactory.BUCKET_NAME, remoteFileName).contentLength(); String range = request.getHeader(&quot;Range&quot;); String start = null; String end = null; if (StringUtils.hasText(range) &amp;&amp; (range.contains(&quot;bytes=&quot;) &amp;&amp; range.contains(&quot;-&quot;))) &#123; start = org.apache.commons.lang.StringUtils.substringBetween(range, &quot;bytes=&quot;, &quot;-&quot;); end = org.apache.commons.lang.StringUtils.substringAfter(range, &quot;-&quot;); &#125; long startIndex = 0; long endIndex = contentLength - 1; if (StringUtils.hasText(start)) &#123; startIndex = Long.parseLong(start); &#125; if (StringUtils.hasText(end)) &#123; endIndex = Long.parseLong(end); &#125; log.info(&quot;range:&quot; + startIndex + &quot;~&quot; + endIndex); String fileName = remoteFileName; if (remoteFileName.contains(&quot;/&quot;)) &#123; fileName = remoteFileName.substring(remoteFileName.lastIndexOf(&quot;/&quot;) + 1); &#125; if (StringUtils.hasText(start)) &#123; fileName = fileName + &quot;.&quot; + startIndex + &quot;-&quot; + endIndex; &#125; response.setContentType(&quot;application/octet-stream&quot;); response.setHeader(&quot;Accept-Ranges&quot;, &quot;bytes&quot;); response.setHeader(&quot;Content-Range&quot;, &quot;bytes &quot; + startIndex + &quot;-&quot; + endIndex + &quot;/&quot; + contentLength); response.setHeader(&quot;Content-Length&quot;, (endIndex - startIndex + 1) + &quot;&quot;); response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + fileName); ServletOutputStream outputStream = response.getOutputStream(); AmazonS3V2Util.downloadSubsectionAndCloseOutputStream(S3ClientFactory.BUCKET_NAME, remoteFileName, startIndex, endIndex, outputStream); &#125; /** * 上传文件到S3，支持分段上传 */ @PostMapping(&quot;/uploadToS3&quot;) public String uploadFileToS3(MultipartFile file, String remoteFileName) throws IOException &#123; if (file != null &amp;&amp; StringUtils.hasText(remoteFileName)) &#123; log.info(&quot;上传文件到S3：&quot; + remoteFileName); AmazonS3V2Util.multipartUpload(S3ClientFactory.BUCKET_NAME, remoteFileName, file.getBytes(), true); return &quot;上传成功&quot;; &#125; return &quot;上传失败&quot;; &#125;&#125; 源码地址 V2版本：https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/aws-s3-v2 V1版本：https://github.com/hanqunfeng/springbootchapter/blob/master/springboot3-demo/resumed-transfer-offset/src/main/java/com/hanqf/resumedtransferoffset/utils/AmazonS3Util.java","summary":"摘要 本文介绍如何使用AWS SDK for Java V2操作S3。 参考资料： AWS SDK for Java 文档 适用于使用 AWS 软件开发工具包的 Amazon S3 的代码示例","date_published":"2024-01-26T14:30:05.000Z","tags":["技术","aws","s3","s3"]},{"id":"https://blog.hanqunfeng.com/2023/11/06/linux-command12-disk-raid5/","url":"https://blog.hanqunfeng.com/2023/11/06/linux-command12-disk-raid5/","title":"Linux常用命令--磁盘管理之RAID5","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>磁盘的挂载、分区、格式化、扩容等命令</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>AWS EC2 EBS CentOS8(x86_64)</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"写在前面\">写在前面</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>raid后不支持重新挂载到EC2</p>\n</li>\n<li class=\"lvl-2\">\n<p>raid后同样支持分区和扩容，就把raid后的磁盘当作普通磁盘操作即可</p>\n</li>\n</ul>\n<h2 id=\"创建raid5\">创建raid5</h2>\n<h3 id=\"1-登录aws挂载好3块磁盘-raid5要求至少3块盘-这里每个10g\">1.登录aws挂载好3块磁盘,raid5要求至少3块盘,这里每个10g</h3>\n<h3 id=\"2-创建raid5\">2.创建raid5</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看磁盘名称，新挂载的磁盘为 nvme1n1，nvme2n1，nvme3n1</span></span><br><span class=\"line\">$ lsblk</span><br><span class=\"line\">NAME          MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">nvme0n1       259:0    0   8G  0 disk</span><br><span class=\"line\">├─nvme0n1p1   259:1    0   8G  0 part /</span><br><span class=\"line\">└─nvme0n1p128 259:2    0   1M  0 part</span><br><span class=\"line\">nvme1n1       259:3    0  10G  0 disk</span><br><span class=\"line\">nvme2n1       259:4    0  10G  0 disk</span><br><span class=\"line\">nvme3n1       259:5    0  10G  0 disk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 /dev/md0 的raid5逻辑卷</span></span><br><span class=\"line\">$ mdadm --create /dev/md0 --level=5 --raid-devices=3 /dev/nvme1n1 /dev/nvme2n1 /dev/nvme3n1</span><br><span class=\"line\">mdadm: Defaulting to version 1.2 metadata</span><br><span class=\"line\">mdadm: array /dev/md0 started.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分区情况，可以看到 /dev/md0 是20G</span></span><br><span class=\"line\">$ fdisk -l</span><br><span class=\"line\">Disk /dev/nvme0n1：8 GiB，8589934592 字节，16777216 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\">磁盘标识符：465F350B-EC19-47A2-9A1D-44ECF9FF38AC</span><br><span class=\"line\"></span><br><span class=\"line\">设备              起点     末尾     扇区 大小 类型</span><br><span class=\"line\">/dev/nvme0n1p1    4096 16777182 16773087   8G Linux 文件系统</span><br><span class=\"line\">/dev/nvme0n1p128  2048     4095     2048   1M BIOS 启动</span><br><span class=\"line\"></span><br><span class=\"line\">分区表记录没有按磁盘顺序。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme1n1：10 GiB，10737418240 字节，20971520 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme2n1：10 GiB，10737418240 字节，20971520 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme3n1：10 GiB，10737418240 字节，20971520 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/md0：20 GiB，21458059264 字节，41910272 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：524288 字节 / 1048576 字节</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-格式化\">3.格式化</h3>\n<h4 id=\"3-1-ext4\">3.1 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.ext4 /dev/md0</span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=128 blocks, Stripe width=256 blocks</span><br><span class=\"line\">1310720 inodes, 5238784 blocks</span><br><span class=\"line\">261939 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=2153775104</span><br><span class=\"line\">160 block <span class=\"built_in\">groups</span></span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">8192 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks:</span><br><span class=\"line\">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,</span><br><span class=\"line\">    4096000</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成</span><br><span class=\"line\">正在写入inode表: 完成</span><br><span class=\"line\">Creating journal (32768 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-xfs\">3.2 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.xfs /dev/md0</span><br><span class=\"line\"><span class=\"built_in\">log</span> stripe unit (524288 bytes) is too large (maximum is 256KiB)</span><br><span class=\"line\"><span class=\"built_in\">log</span> stripe unit adjusted to 32KiB</span><br><span class=\"line\">meta-data=/dev/md0               isize=512    agcount=16, agsize=327296 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class=\"line\">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=5236736, imaxpct=25</span><br><span class=\"line\">         =                       sunit=128    swidth=256 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=8 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-挂载\">4.挂载</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> /data</span><br><span class=\"line\">$ mount /dev/md0 /data</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  456M     0  456M    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     464M  436K  464M    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/nvme0n1p1 xfs       8.0G  1.7G  6.4G   21% /</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/1000</span><br><span class=\"line\">/dev/md0       ext4       20G   24K   19G    1% /data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开机自动挂载</span></span><br><span class=\"line\"><span class=\"comment\"># ext4</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/md0  /data ext4    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\"><span class=\"comment\"># xfs</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/md0  /data xfs    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a</span><br><span class=\"line\"></span><br><span class=\"line\">$ lsblk <span class=\"comment\"># 此时可以看到 TYPE 为 raid5</span></span><br><span class=\"line\">NAME          MAJ:MIN RM SIZE RO TYPE  MOUNTPOINT</span><br><span class=\"line\">nvme0n1       259:0    0   8G  0 disk</span><br><span class=\"line\">├─nvme0n1p1   259:1    0   8G  0 part  /</span><br><span class=\"line\">└─nvme0n1p128 259:2    0   1M  0 part</span><br><span class=\"line\">nvme1n1       259:3    0  10G  0 disk</span><br><span class=\"line\">└─md0           9:0    0  20G  0 raid5 /data</span><br><span class=\"line\">nvme2n1       259:4    0  10G  0 disk</span><br><span class=\"line\">└─md0           9:0    0  20G  0 raid5 /data</span><br><span class=\"line\">nvme3n1       259:5    0  10G  0 disk</span><br><span class=\"line\">└─md0           9:0    0  20G  0 raid5 /data</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-检查Raid5状态\">5.检查Raid5状态</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 RAID5 数组的状态，重点关注 Array Size 和 Used Dev Size，前者表示raid5中总的磁盘大小，后者表示实际使用的磁盘大小</span></span><br><span class=\"line\">$ mdadm --detail /dev/md0</span><br><span class=\"line\">/dev/md0:</span><br><span class=\"line\">           Version : 1.2</span><br><span class=\"line\">     Creation Time : Tue Oct 31 09:25:02 2023</span><br><span class=\"line\">        Raid Level : raid5</span><br><span class=\"line\">        Array Size : 20955136 (19.98 GiB 21.46 GB)</span><br><span class=\"line\">     Used Dev Size : 10477568 (9.99 GiB 10.73 GB)</span><br><span class=\"line\">      Raid Devices : 3</span><br><span class=\"line\">     Total Devices : 3</span><br><span class=\"line\">       Persistence : Superblock is persistent</span><br><span class=\"line\"></span><br><span class=\"line\">       Update Time : Tue Oct 31 09:45:35 2023</span><br><span class=\"line\">             State : clean</span><br><span class=\"line\">    Active Devices : 3</span><br><span class=\"line\">   Working Devices : 3</span><br><span class=\"line\">    Failed Devices : 0</span><br><span class=\"line\">     Spare Devices : 0</span><br><span class=\"line\"></span><br><span class=\"line\">            Layout : left-symmetric</span><br><span class=\"line\">        Chunk Size : 512K</span><br><span class=\"line\"></span><br><span class=\"line\">Consistency Policy : resync</span><br><span class=\"line\"></span><br><span class=\"line\">              Name : 0</span><br><span class=\"line\">              UUID : 765ad648:3d03a9e0:5a86106f:2e24b14d</span><br><span class=\"line\">            Events : 19</span><br><span class=\"line\"></span><br><span class=\"line\">    Number   Major   Minor   RaidDevice State</span><br><span class=\"line\">       0     259        3        0      active <span class=\"built_in\">sync</span>   /dev/sdf</span><br><span class=\"line\">       1     259        4        1      active <span class=\"built_in\">sync</span>   /dev/sdg</span><br><span class=\"line\">       3     259        5        2      active <span class=\"built_in\">sync</span>   /dev/sdh</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加新的磁盘到现有raid5\">添加新的磁盘到现有raid5</h2>\n<h3 id=\"1-登录aws挂载好1块磁盘-这里还是10g\">1.登录aws挂载好1块磁盘,这里还是10g</h3>\n<h3 id=\"2-查看磁盘名称\">2.查看磁盘名称</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsblk  <span class=\"comment\"># 这里新挂载的磁盘为 nvme4n1</span></span><br><span class=\"line\">NAME          MAJ:MIN RM SIZE RO TYPE  MOUNTPOINT</span><br><span class=\"line\">nvme0n1       259:0    0   8G  0 disk</span><br><span class=\"line\">├─nvme0n1p1   259:1    0   8G  0 part  /</span><br><span class=\"line\">└─nvme0n1p128 259:2    0   1M  0 part</span><br><span class=\"line\">nvme1n1       259:3    0  10G  0 disk</span><br><span class=\"line\">└─md0           9:0    0  20G  0 raid5 /data</span><br><span class=\"line\">nvme2n1       259:4    0  10G  0 disk</span><br><span class=\"line\">└─md0           9:0    0  20G  0 raid5 /data</span><br><span class=\"line\">nvme3n1       259:5    0  10G  0 disk</span><br><span class=\"line\">└─md0           9:0    0  20G  0 raid5 /data</span><br><span class=\"line\">nvme4n1       259:6    0  10G  0 disk</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-格式化-2\">3.格式化</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xfs</span></span><br><span class=\"line\">$ mkfs.xfs /dev/nvme4n1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ext4</span></span><br><span class=\"line\">$ mkfs.ext4 /dev/nvme4n1</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-加入raid5\">4.加入raid5</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mdadm --add /dev/md0 /dev/nvme4n1</span><br><span class=\"line\">mdadm: added /dev/nvme4n1</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-查看raid信息\">5.查看raid信息</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看raid信息，此时可以看到新加入的磁盘被当作了备用盘：Spare Devices : 1</span></span><br><span class=\"line\">$ mdadm --detail /dev/md0</span><br><span class=\"line\">/dev/md0:</span><br><span class=\"line\">           Version : 1.2</span><br><span class=\"line\">     Creation Time : Tue Oct 31 09:25:02 2023</span><br><span class=\"line\">        Raid Level : raid5</span><br><span class=\"line\">        Array Size : 20955136 (19.98 GiB 21.46 GB)</span><br><span class=\"line\">     Used Dev Size : 10477568 (9.99 GiB 10.73 GB)</span><br><span class=\"line\">      Raid Devices : 3</span><br><span class=\"line\">     Total Devices : 4</span><br><span class=\"line\">       Persistence : Superblock is persistent</span><br><span class=\"line\"></span><br><span class=\"line\">       Update Time : Tue Oct 31 09:45:35 2023</span><br><span class=\"line\">             State : clean</span><br><span class=\"line\">    Active Devices : 3</span><br><span class=\"line\">   Working Devices : 4</span><br><span class=\"line\">    Failed Devices : 0</span><br><span class=\"line\">     Spare Devices : 1</span><br><span class=\"line\"></span><br><span class=\"line\">            Layout : left-symmetric</span><br><span class=\"line\">        Chunk Size : 512K</span><br><span class=\"line\"></span><br><span class=\"line\">Consistency Policy : resync</span><br><span class=\"line\"></span><br><span class=\"line\">              Name : 0</span><br><span class=\"line\">              UUID : 765ad648:3d03a9e0:5a86106f:2e24b14d</span><br><span class=\"line\">            Events : 19</span><br><span class=\"line\"></span><br><span class=\"line\">    Number   Major   Minor   RaidDevice State</span><br><span class=\"line\">       0     259        3        0      active <span class=\"built_in\">sync</span>   /dev/sdf</span><br><span class=\"line\">       1     259        4        1      active <span class=\"built_in\">sync</span>   /dev/sdg</span><br><span class=\"line\">       3     259        5        2      active <span class=\"built_in\">sync</span>   /dev/sdh</span><br><span class=\"line\"></span><br><span class=\"line\">       4     259        6        -      spare   /dev/sdi</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-将备用盘加入raid\">6.将备用盘加入raid</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里扩容到4快盘</span></span><br><span class=\"line\">$ mdadm --grow /dev/md0 --raid-devices=4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次查看raid信息</span></span><br><span class=\"line\">$ mdadm --detail /dev/md0</span><br><span class=\"line\">/dev/md0:</span><br><span class=\"line\">           Version : 1.2</span><br><span class=\"line\">     Creation Time : Tue Oct 31 09:25:02 2023</span><br><span class=\"line\">        Raid Level : raid5</span><br><span class=\"line\">        Array Size : 20955136 (19.98 GiB 21.46 GB)</span><br><span class=\"line\">     Used Dev Size : 10477568 (9.99 GiB 10.73 GB)</span><br><span class=\"line\">      Raid Devices : 4</span><br><span class=\"line\">     Total Devices : 4</span><br><span class=\"line\">       Persistence : Superblock is persistent</span><br><span class=\"line\"></span><br><span class=\"line\">       Update Time : Tue Oct 31 10:04:18 2023</span><br><span class=\"line\">             State : clean, reshaping</span><br><span class=\"line\">    Active Devices : 4</span><br><span class=\"line\">   Working Devices : 4</span><br><span class=\"line\">    Failed Devices : 0</span><br><span class=\"line\">     Spare Devices : 0</span><br><span class=\"line\"></span><br><span class=\"line\">            Layout : left-symmetric</span><br><span class=\"line\">        Chunk Size : 512K</span><br><span class=\"line\"></span><br><span class=\"line\">Consistency Policy : resync</span><br><span class=\"line\"></span><br><span class=\"line\">    Reshape Status : 5% complete</span><br><span class=\"line\">     Delta Devices : 1, (3-&gt;4)</span><br><span class=\"line\"></span><br><span class=\"line\">              Name : 0</span><br><span class=\"line\">              UUID : 765ad648:3d03a9e0:5a86106f:2e24b14d</span><br><span class=\"line\">            Events : 39</span><br><span class=\"line\"></span><br><span class=\"line\">    Number   Major   Minor   RaidDevice State</span><br><span class=\"line\">       0     259        3        0      active <span class=\"built_in\">sync</span>   /dev/sdf</span><br><span class=\"line\">       1     259        4        1      active <span class=\"built_in\">sync</span>   /dev/sdg</span><br><span class=\"line\">       3     259        5        2      active <span class=\"built_in\">sync</span>   /dev/sdh</span><br><span class=\"line\">       4     259        6        3      active <span class=\"built_in\">sync</span>   /dev/sdi</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-监视同步过程：扩容后raid机制会将数据分配到新加入的磁盘\">7.监视同步过程：扩容后raid机制会将数据分配到新加入的磁盘</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> /proc/mdstat</span><br><span class=\"line\">Personalities : [raid6] [raid5] [raid4]</span><br><span class=\"line\">md0 : active raid5 nvme4n1[4] nvme3n1[3] nvme2n1[1] nvme1n1[0]</span><br><span class=\"line\">      20955136 blocks super 1.2 level 5, 512k chunk, algorithm 2 [4/4] [UUUU]</span><br><span class=\"line\">      [========&gt;............]  reshape = 42.7% (4484448/10477568) finish=3.9min speed=25563K/sec</span><br><span class=\"line\"></span><br><span class=\"line\">unused devices: &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以使用watch命令进行监控，这里设置为每隔1秒执行一次命令</span></span><br><span class=\"line\">$ watch -n 1 <span class=\"built_in\">cat</span> /proc/mdstat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 完成后的效果</span></span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> /proc/mdstat</span><br><span class=\"line\">Personalities : [raid6] [raid5] [raid4]</span><br><span class=\"line\">md0 : active raid5 nvme4n1[4] nvme3n1[3] nvme2n1[1] nvme1n1[0]</span><br><span class=\"line\">      31432704 blocks super 1.2 level 5, 512k chunk, algorithm 2 [4/4] [UUUU]</span><br><span class=\"line\"></span><br><span class=\"line\">unused devices: &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-扩展文件系统\">8.扩展文件系统</h3>\n<h4 id=\"8-1-ext4\">8.1 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ resize2fs /dev/md0</span><br><span class=\"line\">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">Filesystem at /dev/md0 is mounted on /data; on-line resizing required</span><br><span class=\"line\">old_desc_blocks = 3, new_desc_blocks = 4</span><br><span class=\"line\">The filesystem on /dev/md0 is now 7858176 blocks long.</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  456M     0  456M    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     464M  500K  464M    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/nvme0n1p1 xfs       8.0G  1.7G  6.4G   21% /</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/1000</span><br><span class=\"line\">/dev/md0       ext4       30G   24K   28G    1% /data</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/0</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-2-xfs\">8.2 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xfs_growfs /dev/md0</span><br><span class=\"line\">meta-data=/dev/md0               isize=512    agcount=17, agsize=327296 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class=\"line\">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=5238784, imaxpct=25</span><br><span class=\"line\">         =                       sunit=128    swidth=256 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=8 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\">data blocks changed from 5238784 to 7858176</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  456M     0  456M    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     464M  500K  464M    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/nvme0n1p1 xfs       8.0G  1.7G  6.4G   21% /</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/1000</span><br><span class=\"line\">/dev/md0       xfs        30G  248M   30G    1% /data</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/0</span><br></pre></td></tr></table></figure>\n<h2 id=\"raid5后进行分区\">raid5后进行分区</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>raid5后创建的逻辑卷同样支持分区，注意：如果已经mount，则分区前要先umount</p>\n</li>\n</ul>\n<h3 id=\"1-创建分区，这里以MBR举例\">1.创建分区，这里以MBR举例</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ fdisk /dev/md0</span><br><span class=\"line\"></span><br><span class=\"line\">欢迎使用 fdisk (util-linux 2.30.2)。</span><br><span class=\"line\">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class=\"line\">使用写入命令前请三思。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">分区号 (1-128, 默认  1):</span><br><span class=\"line\">第一个扇区 (34-83820510, 默认 4096):</span><br><span class=\"line\">上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (4096-83820510, 默认 83820510): +10G</span><br><span class=\"line\"></span><br><span class=\"line\">创建了一个新分区 1，类型为“Linux filesystem”，大小为 10 GiB。</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">分区号 (2-128, 默认  2):</span><br><span class=\"line\">第一个扇区 (20975616-83820510, 默认 20975616):</span><br><span class=\"line\">上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (20975616-83820510, 默认 83820510):</span><br><span class=\"line\"></span><br><span class=\"line\">创建了一个新分区 2，类型为“Linux filesystem”，大小为 30 GiB。</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\">Disk /dev/md0：40 GiB，42916118528 字节，83820544 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：524288 字节 / 2097152 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\">磁盘标识符：73A41633-30A2-47D5-B812-6C419C795D7C</span><br><span class=\"line\"></span><br><span class=\"line\">设备           起点     末尾     扇区 大小 类型</span><br><span class=\"line\">/dev/md0p1     4096 20975615 20971520  10G Linux 文件系统</span><br><span class=\"line\">/dev/md0p2 20975616 83820510 62844895  30G Linux 文件系统</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：w</span><br><span class=\"line\">分区表已调整。</span><br><span class=\"line\">将调用 ioctl() 来重新读分区表。</span><br><span class=\"line\">正在同步磁盘。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-格式化，这里以xfs举例\">2.格式化，这里以xfs举例</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.xfs /dev/md0p1</span><br><span class=\"line\"><span class=\"built_in\">log</span> stripe unit (524288 bytes) is too large (maximum is 256KiB)</span><br><span class=\"line\"><span class=\"built_in\">log</span> stripe unit adjusted to 32KiB</span><br><span class=\"line\">meta-data=/dev/md0p1             isize=512    agcount=16, agsize=152576 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class=\"line\">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=2441150, imaxpct=25</span><br><span class=\"line\">         =                       sunit=128    swidth=384 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=8 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\"></span><br><span class=\"line\">$ mkfs.xfs /dev/md0p2</span><br><span class=\"line\"><span class=\"built_in\">log</span> stripe unit (524288 bytes) is too large (maximum is 256KiB)</span><br><span class=\"line\"><span class=\"built_in\">log</span> stripe unit adjusted to 32KiB</span><br><span class=\"line\">meta-data=/dev/md0p2             isize=512    agcount=16, agsize=338560 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class=\"line\">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=5416320, imaxpct=25</span><br><span class=\"line\">         =                       sunit=128    swidth=384 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2648, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=8 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-mount到指定路径\">3.mount到指定路径</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> /data1</span><br><span class=\"line\">$ <span class=\"built_in\">mkdir</span> /data2</span><br><span class=\"line\">$ mount /dev/md0p1 /data1</span><br><span class=\"line\">$ mount /dev/md0p2 /data2</span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  456M     0  456M    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     464M  508K  464M    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/nvme0n1p1 xfs       8.0G  1.7G  6.4G   21% /</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/1000</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/0</span><br><span class=\"line\">/dev/md0p1     xfs       9.4G  100M  9.3G    2% /data1</span><br><span class=\"line\">/dev/md0p2     xfs        21G  181M   21G    1% /data2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开机自动挂载</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/md0p1  /data1 xfs    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/md0p2  /data2 xfs    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-扩容，添加新的磁盘，新的磁盘只能扩容最后一个分区，这里就是指的第二个分区\">4.扩容，添加新的磁盘，新的磁盘只能扩容最后一个分区，这里就是指的第二个分区</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>raid5中添加新的磁盘参考上面的内容，这里不再赘述，这里添加一个10g的新磁盘</p>\n</li>\n<li class=\"lvl-2\">\n<p>扩容最后一个分区</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ growpart /dev/md0 2</span><br><span class=\"line\">CHANGED: partition=2 start=19531776 old: size=43330560 end=62862336 new: size=64288735 end=83820511</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>同步文件系统</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xfs_growfs -d /data2</span><br><span class=\"line\">meta-data=/dev/md0p2             isize=512    agcount=16, agsize=338560 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class=\"line\">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=5416320, imaxpct=25</span><br><span class=\"line\">         =                       sunit=128    swidth=384 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2648, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=8 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\">data blocks changed from 5416320 to 8036091</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  456M     0  456M    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     464M  460K  464M    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/nvme0n1p1 xfs       8.0G  1.7G  6.4G   21% /</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/1000</span><br><span class=\"line\">/dev/md0p1     xfs       9.4G  100M  9.3G    2% /data1</span><br><span class=\"line\">/dev/md0p2     xfs        31G  253M   31G    1% /data2</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 磁盘的挂载、分区、格式化、扩容等命令 本文基于AWS EC2 EBS CentOS8(x86_64) 写在前面 raid后不支持重新挂载到EC2 raid后同样支持分区和扩容，就把raid后的磁盘当作普通磁盘操作即可 创建raid5 1.登录aws挂载好3块磁盘,raid5要求至少3块盘,这里每个10g 2.创建raid5 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# 查看磁盘名称，新挂载的磁盘为 nvme1n1，nvme2n1，nvme3n1$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 8G 0 disk├─nvme0n1p1 259:1 0 8G 0 part /└─nvme0n1p128 259:2 0 1M 0 partnvme1n1 259:3 0 10G 0 disknvme2n1 259:4 0 10G 0 disknvme3n1 259:5 0 10G 0 disk# 创建 /dev/md0 的raid5逻辑卷$ mdadm --create /dev/md0 --level=5 --raid-devices=3 /dev/nvme1n1 /dev/nvme2n1 /dev/nvme3n1mdadm: Defaulting to version 1.2 metadatamdadm: array /dev/md0 started.# 查看分区情况，可以看到 /dev/md0 是20G$ fdisk -lDisk /dev/nvme0n1：8 GiB，8589934592 字节，16777216 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节磁盘标签类型：gpt磁盘标识符：465F350B-EC19-47A2-9A1D-44ECF9FF38AC设备 起点 末尾 扇区 大小 类型/dev/nvme0n1p1 4096 16777182 16773087 8G Linux 文件系统/dev/nvme0n1p128 2048 4095 2048 1M BIOS 启动分区表记录没有按磁盘顺序。Disk /dev/nvme1n1：10 GiB，10737418240 字节，20971520 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节Disk /dev/nvme2n1：10 GiB，10737418240 字节，20971520 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节Disk /dev/nvme3n1：10 GiB，10737418240 字节，20971520 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节Disk /dev/md0：20 GiB，21458059264 字节，41910272 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：524288 字节 / 1048576 字节 3.格式化 3.1 ext4 12345678910111213141516171819202122$ mkfs.ext4 /dev/md0mke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=128 blocks, Stripe width=256 blocks1310720 inodes, 5238784 blocks261939 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=2153775104160 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000Allocating group tables: 完成正在写入inode表: 完成Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成 3.2 xfs 12345678910111213$ mkfs.xfs /dev/md0log stripe unit (524288 bytes) is too large (maximum is 256KiB)log stripe unit adjusted to 32KiBmeta-data=/dev/md0 isize=512 agcount=16, agsize=327296 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=1, rmapbt=0 = reflink=1 bigtime=0 inobtcount=0data = bsize=4096 blocks=5236736, imaxpct=25 = sunit=128 swidth=256 blksnaming =version 2 bsize=4096 ascii-ci=0, ftype=1log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=8 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0 4.挂载 12345678910111213141516171819202122232425262728293031$ mkdir /data$ mount /dev/md0 /data$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 456M 0 456M 0% /devtmpfs tmpfs 464M 0 464M 0% /dev/shmtmpfs tmpfs 464M 436K 464M 1% /runtmpfs tmpfs 464M 0 464M 0% /sys/fs/cgroup/dev/nvme0n1p1 xfs 8.0G 1.7G 6.4G 21% /tmpfs tmpfs 93M 0 93M 0% /run/user/1000/dev/md0 ext4 20G 24K 19G 1% /data# 开机自动挂载# ext4$ echo &#x27;/dev/md0 /data ext4 defaults 0 0&#x27; &gt;&gt; /etc/fstab# xfs$ echo &#x27;/dev/md0 /data xfs defaults 0 0&#x27; &gt;&gt; /etc/fstab$ mount -a$ lsblk # 此时可以看到 TYPE 为 raid5NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 8G 0 disk├─nvme0n1p1 259:1 0 8G 0 part /└─nvme0n1p128 259:2 0 1M 0 partnvme1n1 259:3 0 10G 0 disk└─md0 9:0 0 20G 0 raid5 /datanvme2n1 259:4 0 10G 0 disk└─md0 9:0 0 20G 0 raid5 /datanvme3n1 259:5 0 10G 0 disk└─md0 9:0 0 20G 0 raid5 /data 5.检查Raid5状态 1234567891011121314151617181920212223242526272829303132# 检查 RAID5 数组的状态，重点关注 Array Size 和 Used Dev Size，前者表示raid5中总的磁盘大小，后者表示实际使用的磁盘大小$ mdadm --detail /dev/md0/dev/md0: Version : 1.2 Creation Time : Tue Oct 31 09:25:02 2023 Raid Level : raid5 Array Size : 20955136 (19.98 GiB 21.46 GB) Used Dev Size : 10477568 (9.99 GiB 10.73 GB) Raid Devices : 3 Total Devices : 3 Persistence : Superblock is persistent Update Time : Tue Oct 31 09:45:35 2023 State : clean Active Devices : 3 Working Devices : 3 Failed Devices : 0 Spare Devices : 0 Layout : left-symmetric Chunk Size : 512KConsistency Policy : resync Name : 0 UUID : 765ad648:3d03a9e0:5a86106f:2e24b14d Events : 19 Number Major Minor RaidDevice State 0 259 3 0 active sync /dev/sdf 1 259 4 1 active sync /dev/sdg 3 259 5 2 active sync /dev/sdh 添加新的磁盘到现有raid5 1.登录aws挂载好1块磁盘,这里还是10g 2.查看磁盘名称 123456789101112$ lsblk # 这里新挂载的磁盘为 nvme4n1NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 8G 0 disk├─nvme0n1p1 259:1 0 8G 0 part /└─nvme0n1p128 259:2 0 1M 0 partnvme1n1 259:3 0 10G 0 disk└─md0 9:0 0 20G 0 raid5 /datanvme2n1 259:4 0 10G 0 disk└─md0 9:0 0 20G 0 raid5 /datanvme3n1 259:5 0 10G 0 disk└─md0 9:0 0 20G 0 raid5 /datanvme4n1 259:6 0 10G 0 disk 3.格式化 12345# xfs$ mkfs.xfs /dev/nvme4n1# ext4$ mkfs.ext4 /dev/nvme4n1 4.加入raid5 12$ mdadm --add /dev/md0 /dev/nvme4n1mdadm: added /dev/nvme4n1 5.查看raid信息 12345678910111213141516171819202122232425262728293031323334# 查看raid信息，此时可以看到新加入的磁盘被当作了备用盘：Spare Devices : 1$ mdadm --detail /dev/md0/dev/md0: Version : 1.2 Creation Time : Tue Oct 31 09:25:02 2023 Raid Level : raid5 Array Size : 20955136 (19.98 GiB 21.46 GB) Used Dev Size : 10477568 (9.99 GiB 10.73 GB) Raid Devices : 3 Total Devices : 4 Persistence : Superblock is persistent Update Time : Tue Oct 31 09:45:35 2023 State : clean Active Devices : 3 Working Devices : 4 Failed Devices : 0 Spare Devices : 1 Layout : left-symmetric Chunk Size : 512KConsistency Policy : resync Name : 0 UUID : 765ad648:3d03a9e0:5a86106f:2e24b14d Events : 19 Number Major Minor RaidDevice State 0 259 3 0 active sync /dev/sdf 1 259 4 1 active sync /dev/sdg 3 259 5 2 active sync /dev/sdh 4 259 6 - spare /dev/sdi 6.将备用盘加入raid 123456789101112131415161718192021222324252627282930313233343536373839# 这里扩容到4快盘$ mdadm --grow /dev/md0 --raid-devices=4# 再次查看raid信息$ mdadm --detail /dev/md0/dev/md0: Version : 1.2 Creation Time : Tue Oct 31 09:25:02 2023 Raid Level : raid5 Array Size : 20955136 (19.98 GiB 21.46 GB) Used Dev Size : 10477568 (9.99 GiB 10.73 GB) Raid Devices : 4 Total Devices : 4 Persistence : Superblock is persistent Update Time : Tue Oct 31 10:04:18 2023 State : clean, reshaping Active Devices : 4 Working Devices : 4 Failed Devices : 0 Spare Devices : 0 Layout : left-symmetric Chunk Size : 512KConsistency Policy : resync Reshape Status : 5% complete Delta Devices : 1, (3-&gt;4) Name : 0 UUID : 765ad648:3d03a9e0:5a86106f:2e24b14d Events : 39 Number Major Minor RaidDevice State 0 259 3 0 active sync /dev/sdf 1 259 4 1 active sync /dev/sdg 3 259 5 2 active sync /dev/sdh 4 259 6 3 active sync /dev/sdi 7.监视同步过程：扩容后raid机制会将数据分配到新加入的磁盘 123456789101112131415161718$ cat /proc/mdstatPersonalities : [raid6] [raid5] [raid4]md0 : active raid5 nvme4n1[4] nvme3n1[3] nvme2n1[1] nvme1n1[0] 20955136 blocks super 1.2 level 5, 512k chunk, algorithm 2 [4/4] [UUUU] [========&gt;............] reshape = 42.7% (4484448/10477568) finish=3.9min speed=25563K/secunused devices: &lt;none&gt;# 可以使用watch命令进行监控，这里设置为每隔1秒执行一次命令$ watch -n 1 cat /proc/mdstat# 完成后的效果$ cat /proc/mdstatPersonalities : [raid6] [raid5] [raid4]md0 : active raid5 nvme4n1[4] nvme3n1[3] nvme2n1[1] nvme1n1[0] 31432704 blocks super 1.2 level 5, 512k chunk, algorithm 2 [4/4] [UUUU]unused devices: &lt;none&gt; 8.扩展文件系统 8.1 ext4 12345678910111213141516$ resize2fs /dev/md0resize2fs 1.42.9 (28-Dec-2013)Filesystem at /dev/md0 is mounted on /data; on-line resizing requiredold_desc_blocks = 3, new_desc_blocks = 4The filesystem on /dev/md0 is now 7858176 blocks long.$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 456M 0 456M 0% /devtmpfs tmpfs 464M 0 464M 0% /dev/shmtmpfs tmpfs 464M 500K 464M 1% /runtmpfs tmpfs 464M 0 464M 0% /sys/fs/cgroup/dev/nvme0n1p1 xfs 8.0G 1.7G 6.4G 21% /tmpfs tmpfs 93M 0 93M 0% /run/user/1000/dev/md0 ext4 30G 24K 28G 1% /datatmpfs tmpfs 93M 0 93M 0% /run/user/0 8.2 xfs 1234567891011121314151617181920212223$ xfs_growfs /dev/md0meta-data=/dev/md0 isize=512 agcount=17, agsize=327296 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=1, rmapbt=0 = reflink=1 bigtime=0 inobtcount=0data = bsize=4096 blocks=5238784, imaxpct=25 = sunit=128 swidth=256 blksnaming =version 2 bsize=4096 ascii-ci=0, ftype=1log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=8 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0data blocks changed from 5238784 to 7858176$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 456M 0 456M 0% /devtmpfs tmpfs 464M 0 464M 0% /dev/shmtmpfs tmpfs 464M 500K 464M 1% /runtmpfs tmpfs 464M 0 464M 0% /sys/fs/cgroup/dev/nvme0n1p1 xfs 8.0G 1.7G 6.4G 21% /tmpfs tmpfs 93M 0 93M 0% /run/user/1000/dev/md0 xfs 30G 248M 30G 1% /datatmpfs tmpfs 93M 0 93M 0% /run/user/0 raid5后进行分区 raid5后创建的逻辑卷同样支持分区，注意：如果已经mount，则分区前要先umount 1.创建分区，这里以MBR举例 12345678910111213141516171819202122232425262728293031323334353637$ fdisk /dev/md0欢迎使用 fdisk (util-linux 2.30.2)。更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。命令(输入 m 获取帮助)：n分区号 (1-128, 默认 1):第一个扇区 (34-83820510, 默认 4096):上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (4096-83820510, 默认 83820510): +10G创建了一个新分区 1，类型为“Linux filesystem”，大小为 10 GiB。命令(输入 m 获取帮助)：n分区号 (2-128, 默认 2):第一个扇区 (20975616-83820510, 默认 20975616):上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (20975616-83820510, 默认 83820510):创建了一个新分区 2，类型为“Linux filesystem”，大小为 30 GiB。命令(输入 m 获取帮助)：pDisk /dev/md0：40 GiB，42916118528 字节，83820544 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：524288 字节 / 2097152 字节磁盘标签类型：gpt磁盘标识符：73A41633-30A2-47D5-B812-6C419C795D7C设备 起点 末尾 扇区 大小 类型/dev/md0p1 4096 20975615 20971520 10G Linux 文件系统/dev/md0p2 20975616 83820510 62844895 30G Linux 文件系统命令(输入 m 获取帮助)：w分区表已调整。将调用 ioctl() 来重新读分区表。正在同步磁盘。 2.格式化，这里以xfs举例 123456789101112131415161718192021222324252627$ mkfs.xfs /dev/md0p1log stripe unit (524288 bytes) is too large (maximum is 256KiB)log stripe unit adjusted to 32KiBmeta-data=/dev/md0p1 isize=512 agcount=16, agsize=152576 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=1, rmapbt=0 = reflink=1 bigtime=0 inobtcount=0data = bsize=4096 blocks=2441150, imaxpct=25 = sunit=128 swidth=384 blksnaming =version 2 bsize=4096 ascii-ci=0, ftype=1log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=8 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0$ mkfs.xfs /dev/md0p2log stripe unit (524288 bytes) is too large (maximum is 256KiB)log stripe unit adjusted to 32KiBmeta-data=/dev/md0p2 isize=512 agcount=16, agsize=338560 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=1, rmapbt=0 = reflink=1 bigtime=0 inobtcount=0data = bsize=4096 blocks=5416320, imaxpct=25 = sunit=128 swidth=384 blksnaming =version 2 bsize=4096 ascii-ci=0, ftype=1log =internal log bsize=4096 blocks=2648, version=2 = sectsz=512 sunit=8 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0 3.mount到指定路径 1234567891011121314151617181920$ mkdir /data1$ mkdir /data2$ mount /dev/md0p1 /data1$ mount /dev/md0p2 /data2$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 456M 0 456M 0% /devtmpfs tmpfs 464M 0 464M 0% /dev/shmtmpfs tmpfs 464M 508K 464M 1% /runtmpfs tmpfs 464M 0 464M 0% /sys/fs/cgroup/dev/nvme0n1p1 xfs 8.0G 1.7G 6.4G 21% /tmpfs tmpfs 93M 0 93M 0% /run/user/1000tmpfs tmpfs 93M 0 93M 0% /run/user/0/dev/md0p1 xfs 9.4G 100M 9.3G 2% /data1/dev/md0p2 xfs 21G 181M 21G 1% /data2# 开机自动挂载$ echo &#x27;/dev/md0p1 /data1 xfs defaults 0 0&#x27; &gt;&gt; /etc/fstab$ echo &#x27;/dev/md0p2 /data2 xfs defaults 0 0&#x27; &gt;&gt; /etc/fstab$ mount -a 4.扩容，添加新的磁盘，新的磁盘只能扩容最后一个分区，这里就是指的第二个分区 raid5中添加新的磁盘参考上面的内容，这里不再赘述，这里添加一个10g的新磁盘 扩容最后一个分区 12$ growpart /dev/md0 2CHANGED: partition=2 start=19531776 old: size=43330560 end=62862336 new: size=64288735 end=83820511 同步文件系统 1234567891011121314151617181920212223$ xfs_growfs -d /data2meta-data=/dev/md0p2 isize=512 agcount=16, agsize=338560 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=1, rmapbt=0 = reflink=1 bigtime=0 inobtcount=0data = bsize=4096 blocks=5416320, imaxpct=25 = sunit=128 swidth=384 blksnaming =version 2 bsize=4096 ascii-ci=0, ftype=1log =internal log bsize=4096 blocks=2648, version=2 = sectsz=512 sunit=8 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0data blocks changed from 5416320 to 8036091$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 456M 0 456M 0% /devtmpfs tmpfs 464M 0 464M 0% /dev/shmtmpfs tmpfs 464M 460K 464M 1% /runtmpfs tmpfs 464M 0 464M 0% /sys/fs/cgroup/dev/nvme0n1p1 xfs 8.0G 1.7G 6.4G 21% /tmpfs tmpfs 93M 0 93M 0% /run/user/1000/dev/md0p1 xfs 9.4G 100M 9.3G 2% /data1/dev/md0p2 xfs 31G 253M 31G 1% /data2","summary":"摘要 磁盘的挂载、分区、格式化、扩容等命令 本文基于AWS EC2 EBS CentOS8(x86_64)","date_published":"2023-11-06T15:30:05.000Z","tags":["技术","linux","linux常用命令","linux常用命令"]},{"id":"https://blog.hanqunfeng.com/2023/11/06/linux-command12-disk-lvs/","url":"https://blog.hanqunfeng.com/2023/11/06/linux-command12-disk-lvs/","title":"Linux常用命令--磁盘管理之逻辑卷","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>磁盘的挂载、分区、格式化、扩容等命令</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>AWS EC2 EBS CentOS8(x86_64)</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"写在前面\">写在前面</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>逻辑卷不支持<code>MBR</code>和<code>GPT</code>分区，但通过<code>MBR</code>和<code>GPT</code>分区后的子分区可以被加入到物理卷组，从而扩展原有逻辑分区或者创建新的逻辑分区</p>\n</li>\n<li class=\"lvl-2\">\n<p>逻辑卷与普通的磁盘和分区一样，同样支持重新挂载到ec2，不过要将组成逻辑卷和物理卷组的所有磁盘都挂载到ec2后才有效</p>\n</li>\n</ul>\n<h2 id=\"挂载新的逻辑卷\">挂载新的逻辑卷</h2>\n<h3 id=\"1-aws控制台–-卷–-创建一个新卷，注意选择可用区，然后点击操作–-挂载卷–选择对应的ec2实例\">1.aws控制台–&gt;卷–&gt;创建一个新卷，注意选择可用区，然后点击操作–&gt;挂载卷–选择对应的ec2实例</h3>\n<h3 id=\"2-ssh-登录-ec2，以下操作全责root下进行，初始磁盘情况如下\">2.ssh 登录 ec2，以下操作全责root下进行，初始磁盘情况如下</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  2.0G     0  2.0G    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     2.0G     0  2.0G    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     2.0G  532K  2.0G    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     2.0G     0  2.0G    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/xvda1     xfs       100G   13G   88G   13% /</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1002</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1001</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1000</span><br><span class=\"line\">/dev/xvdf      xfs        20G   53M   20G    1% /data</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-查看新挂载卷的名称，这里看到新挂载的卷名称为-xvdg\">3.查看新挂载卷的名称，这里看到新挂载的卷名称为 <code>xvdg</code></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsblk</span><br><span class=\"line\">NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">xvda    202:0    0  100G  0 disk</span><br><span class=\"line\">└─xvda1 202:1    0  100G  0 part /</span><br><span class=\"line\">xvdf    202:80   0   20G  0 disk /data</span><br><span class=\"line\">xvdg    202:96   0   10G  0 disk</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-创建新物理卷\">4.创建新物理卷</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新物理卷，可以先分区再创建，这里为了省事不进行分区，也就是说，物理卷可以通过磁盘或者磁盘的子分区进行创建</span></span><br><span class=\"line\">$ pvcreate /dev/xvdg</span><br><span class=\"line\"> Physical volume <span class=\"string\">&quot;/dev/xvdg&quot;</span> successfully created.</span><br><span class=\"line\"><span class=\"comment\"># 查看当期所有物理卷（或使用 pvdisplay 命令）</span></span><br><span class=\"line\">pvs</span><br><span class=\"line\">  PV         VG Fmt  Attr PSize  PFree</span><br><span class=\"line\">  /dev/sdg      lvm2 ---  10.00g 10.00g</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-创建新物理卷组\">5.创建新物理卷组</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新物理卷组，这里 vgnew 就是新卷组的名称</span></span><br><span class=\"line\">$ vgcreate vgnew /dev/xvdg</span><br><span class=\"line\">  Volume group <span class=\"string\">&quot;vgnew&quot;</span> successfully created</span><br><span class=\"line\"><span class=\"comment\"># 查看卷组（或使用  命令）</span></span><br><span class=\"line\">vgs</span><br><span class=\"line\">  VG    <span class=\"comment\">#PV #LV #SN Attr   VSize   VFree</span></span><br><span class=\"line\">  vgnew   1   0   0 wz--n- &lt;10.00g &lt;10.00g</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-创建新逻辑卷\">6.创建新逻辑卷</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新逻辑卷，lvnew 为自定义逻辑卷名称，一个物理卷组可以创建多个逻辑卷，重点看物理卷组的剩余空间</span></span><br><span class=\"line\">$ lvcreate -n lvnew -l 100%FREE vgnew   <span class=\"comment\"># 这里的含义是将物理卷组中100%的剩余可用空间分配给新的逻辑卷，也可以只使用卷组的部分空余空间，如50%FREE，或者指定具体的容量：lvcreate -n lvnew -L 5G vgnew</span></span><br><span class=\"line\">  Logical volume <span class=\"string\">&quot;lvnew&quot;</span> created.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前所有逻辑卷（或使用 lvdisplay 命令）</span></span><br><span class=\"line\">$ lvs</span><br><span class=\"line\">  LV    VG    Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class=\"line\">  lvnew vgnew -wi-a----- &lt;10.00g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看磁盘信息，注意此时创建的逻辑卷的全称为 vgnew-lvnew，与其对应的磁盘路径为 /dev/vgnew/lvnew ，其TYPE为 lvm，这里说一下TYPE: disk-磁盘卷，part-分区卷，lvm-逻辑卷</span></span><br><span class=\"line\">$ lsblk</span><br><span class=\"line\">NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">xvda          202:0    0  100G  0 disk</span><br><span class=\"line\">└─xvda1       202:1    0  100G  0 part /</span><br><span class=\"line\">xvdf          202:80   0   20G  0 disk /data</span><br><span class=\"line\">xvdg          202:96   0   10G  0 disk</span><br><span class=\"line\">└─vgnew-lvnew 253:0    0   10G  0 lvm  /new_data</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-格式化新卷\">7.格式化新卷</h3>\n<h4 id=\"7-1-xfs\">7.1 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.xfs /dev/vgnew/lvnew</span><br><span class=\"line\">meta-data=/dev/vgnew/lvnew       isize=512    agcount=4, agsize=655104 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=2620416, imaxpct=25</span><br><span class=\"line\">         =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-2-ext4\">7.2 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.ext4 /dev/vgnew/lvnew</span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">655360 inodes, 2620416 blocks</span><br><span class=\"line\">131020 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=2151677952</span><br><span class=\"line\">80 block <span class=\"built_in\">groups</span></span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">8192 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks:</span><br><span class=\"line\">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成</span><br><span class=\"line\">正在写入inode表: 完成</span><br><span class=\"line\">Creating journal (32768 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-创建新路径并将新卷挂载上\">8.创建新路径并将新卷挂载上</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> /new_data</span><br><span class=\"line\">$ mount /dev/vgnew/lvnew /new_data</span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统                类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs                devtmpfs  2.0G     0  2.0G    0% /dev</span><br><span class=\"line\">tmpfs                   tmpfs     2.0G     0  2.0G    0% /dev/shm</span><br><span class=\"line\">tmpfs                   tmpfs     2.0G  544K  2.0G    1% /run</span><br><span class=\"line\">tmpfs                   tmpfs     2.0G     0  2.0G    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/xvda1              xfs       100G   13G   88G   13% /</span><br><span class=\"line\">/dev/xvdf               xfs        20G   53M   20G    1% /data</span><br><span class=\"line\">tmpfs                   tmpfs     393M     0  393M    0% /run/user/1002</span><br><span class=\"line\">tmpfs                   tmpfs     393M     0  393M    0% /run/user/1001</span><br><span class=\"line\">tmpfs                   tmpfs     393M     0  393M    0% /run/user/1000</span><br><span class=\"line\">/dev/mapper/vgnew-lvnew xfs        10G   43M   10G    1% /new_data</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-永久挂载卷\">9.永久挂载卷</h3>\n<h4 id=\"9-1-xfs\">9.1 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/mapper/vgnew-lvnew  /new_data xfs    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n<h4 id=\"9-2-ext4\">9.2 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/mapper/vgnew-lvnew  /new_data ext4    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加新的磁盘到存在的逻辑卷\">添加新的磁盘到存在的逻辑卷</h2>\n<h3 id=\"1-添加新的磁盘，步骤同1，2，3，新卷名称-xvdh，注意物理卷的方式扩容只能添加新的磁盘，不支持修改ebs容量的方式进行扩容\">1.添加新的磁盘，步骤同1，2，3，新卷名称 xvdh，注意物理卷的方式扩容只能添加新的磁盘，不支持修改ebs容量的方式进行扩容</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsblk</span><br><span class=\"line\">NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">xvda          202:0    0  100G  0 disk</span><br><span class=\"line\">└─xvda1       202:1    0  100G  0 part /</span><br><span class=\"line\">xvdf          202:80   0   20G  0 disk /data</span><br><span class=\"line\">xvdg          202:96   0   10G  0 disk</span><br><span class=\"line\">└─vgnew-lvnew 253:0    0   10G  0 lvm  /new_data</span><br><span class=\"line\">xvdh          202:112  0   10G  0 disk</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-创建新物理卷\">2.创建新物理卷</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新物理卷，可以先分区再创建，这里为了省事不进行分区</span></span><br><span class=\"line\">$ pvcreate /dev/xvdh</span><br><span class=\"line\">  Physical volume <span class=\"string\">&quot;/dev/xvdh&quot;</span> successfully created.</span><br><span class=\"line\"><span class=\"comment\"># 查看当期所有物理卷（或使用 pvdisplay 命令）</span></span><br><span class=\"line\">$ pvs</span><br><span class=\"line\">  PV         VG    Fmt  Attr PSize   PFree</span><br><span class=\"line\">  /dev/sdg   vgnew lvm2 a--  &lt;10.00g     0</span><br><span class=\"line\">  /dev/sdh         lvm2 ---   10.00g 10.00g</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-扩展已有卷组\">3.扩展已有卷组</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将新的物理卷 /dev/sdh 加入卷组 vgnew</span></span><br><span class=\"line\">$ vgextend vgnew /dev/sdh</span><br><span class=\"line\">  Volume group <span class=\"string\">&quot;vgnew&quot;</span> successfully extended</span><br><span class=\"line\"><span class=\"comment\"># 查看当前所有物理卷（或使用 pvdisplay 命令）</span></span><br><span class=\"line\">$ pvs</span><br><span class=\"line\">  PV         VG    Fmt  Attr PSize   PFree</span><br><span class=\"line\">  /dev/sdg   vgnew lvm2 a--  &lt;10.00g      0</span><br><span class=\"line\">  /dev/sdh   vgnew lvm2 a--  &lt;10.00g &lt;10.00g</span><br><span class=\"line\"><span class=\"comment\"># 查看卷组（或使用 vgdisplay 命令），此次可以看到卷组中剩余可用空间 VFree和总大小 VSize</span></span><br><span class=\"line\">$ vgs</span><br><span class=\"line\">  VG    <span class=\"comment\">#PV #LV #SN Attr   VSize  VFree</span></span><br><span class=\"line\">  vgnew   2   1   0 wz--n- 19.99g &lt;10.00g</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-扩容已有逻辑卷\">4.扩容已有逻辑卷</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将卷组中的剩余空间添加到指定逻辑卷</span></span><br><span class=\"line\">$ lvextend -l +100%FREE /dev/vgnew/lvnew</span><br><span class=\"line\">  Size of logical volume vgnew/lvnew changed from &lt;10.00 GiB (2559 extents) to 19.99 GiB (5118 extents).</span><br><span class=\"line\">  Logical volume vgnew/lvnew successfully resized.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以加上 -r,自动更新文件系统</span></span><br><span class=\"line\">$ lvextend -r -l +100%FREE /dev/vgnew/lvnew</span><br><span class=\"line\">  Size of logical volume vgnew/lvnew changed from 509.99 GiB (130558 extents) to &lt;519.99 GiB (133117 extents).</span><br><span class=\"line\">  Logical volume vgnew/lvnew successfully resized.</span><br><span class=\"line\">meta-data=/dev/mapper/vgnew-lvnew isize=512    agcount=817, agsize=163776 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class=\"line\">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=133691392, imaxpct=25</span><br><span class=\"line\">         =                       sunit=1      swidth=1 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=1 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\">data blocks changed from 133691392 to 136311808</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-更新文件系统，上面的扩展逻辑卷名称加上-r-后，就不需要执行的命令了\">5.更新文件系统，上面的扩展逻辑卷名称加上 <code>-r</code> 后，就不需要执行的命令了</h3>\n<h4 id=\"5-1-xfs\">5.1 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xfs_growfs /dev/vgnew/lvnew</span><br><span class=\"line\">meta-data=/dev/mapper/vgnew-lvnew isize=512    agcount=4, agsize=655104 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1 spinodes=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=2620416, imaxpct=25</span><br><span class=\"line\">         =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal               bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\">data blocks changed from 2620416 to 5240832</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2-ext4\">5.2 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ resize2fs /dev/mapper/vgnew-lvnew</span><br><span class=\"line\">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">Filesystem at /dev/mapper/vgnew-lvnew is mounted on /new_data; on-line resizing required</span><br><span class=\"line\">old_desc_blocks = 2, new_desc_blocks = 3</span><br><span class=\"line\">The filesystem on /dev/mapper/vgnew-lvnew is now 5240832 blocks long.</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3-查看结果\">5.3 查看结果</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统                类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs                devtmpfs  2.0G     0  2.0G    0% /dev</span><br><span class=\"line\">tmpfs                   tmpfs     2.0G     0  2.0G    0% /dev/shm</span><br><span class=\"line\">tmpfs                   tmpfs     2.0G  548K  2.0G    1% /run</span><br><span class=\"line\">tmpfs                   tmpfs     2.0G     0  2.0G    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/xvda1              xfs       100G   13G   88G   13% /</span><br><span class=\"line\">/dev/xvdf               xfs        20G   53M   20G    1% /data</span><br><span class=\"line\">tmpfs                   tmpfs     393M     0  393M    0% /run/user/1002</span><br><span class=\"line\">tmpfs                   tmpfs     393M     0  393M    0% /run/user/1001</span><br><span class=\"line\">tmpfs                   tmpfs     393M     0  393M    0% /run/user/1000</span><br><span class=\"line\">/dev/mapper/vgnew-lvnew xfs        20G   53M   20G    1% /new_data</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 磁盘的挂载、分区、格式化、扩容等命令 本文基于AWS EC2 EBS CentOS8(x86_64) 写在前面 逻辑卷不支持MBR和GPT分区，但通过MBR和GPT分区后的子分区可以被加入到物理卷组，从而扩展原有逻辑分区或者创建新的逻辑分区 逻辑卷与普通的磁盘和分区一样，同样支持重新挂载到ec2，不过要将组成逻辑卷和物理卷组的所有磁盘都挂载到ec2后才有效 挂载新的逻辑卷 1.aws控制台–&gt;卷–&gt;创建一个新卷，注意选择可用区，然后点击操作–&gt;挂载卷–选择对应的ec2实例 2.ssh 登录 ec2，以下操作全责root下进行，初始磁盘情况如下 1234567891011$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 2.0G 0 2.0G 0% /devtmpfs tmpfs 2.0G 0 2.0G 0% /dev/shmtmpfs tmpfs 2.0G 532K 2.0G 1% /runtmpfs tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup/dev/xvda1 xfs 100G 13G 88G 13% /tmpfs tmpfs 393M 0 393M 0% /run/user/1002tmpfs tmpfs 393M 0 393M 0% /run/user/1001tmpfs tmpfs 393M 0 393M 0% /run/user/1000/dev/xvdf xfs 20G 53M 20G 1% /data 3.查看新挂载卷的名称，这里看到新挂载的卷名称为 xvdg 123456$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTxvda 202:0 0 100G 0 disk└─xvda1 202:1 0 100G 0 part /xvdf 202:80 0 20G 0 disk /dataxvdg 202:96 0 10G 0 disk 4.创建新物理卷 1234567# 创建新物理卷，可以先分区再创建，这里为了省事不进行分区，也就是说，物理卷可以通过磁盘或者磁盘的子分区进行创建$ pvcreate /dev/xvdg Physical volume &quot;/dev/xvdg&quot; successfully created.# 查看当期所有物理卷（或使用 pvdisplay 命令）pvs PV VG Fmt Attr PSize PFree /dev/sdg lvm2 --- 10.00g 10.00g 5.创建新物理卷组 1234567# 创建新物理卷组，这里 vgnew 就是新卷组的名称$ vgcreate vgnew /dev/xvdg Volume group &quot;vgnew&quot; successfully created# 查看卷组（或使用 命令）vgs VG #PV #LV #SN Attr VSize VFree vgnew 1 0 0 wz--n- &lt;10.00g &lt;10.00g 6.创建新逻辑卷 1234567891011121314151617# 创建新逻辑卷，lvnew 为自定义逻辑卷名称，一个物理卷组可以创建多个逻辑卷，重点看物理卷组的剩余空间$ lvcreate -n lvnew -l 100%FREE vgnew # 这里的含义是将物理卷组中100%的剩余可用空间分配给新的逻辑卷，也可以只使用卷组的部分空余空间，如50%FREE，或者指定具体的容量：lvcreate -n lvnew -L 5G vgnew Logical volume &quot;lvnew&quot; created.# 查看当前所有逻辑卷（或使用 lvdisplay 命令）$ lvs LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert lvnew vgnew -wi-a----- &lt;10.00g# 查看磁盘信息，注意此时创建的逻辑卷的全称为 vgnew-lvnew，与其对应的磁盘路径为 /dev/vgnew/lvnew ，其TYPE为 lvm，这里说一下TYPE: disk-磁盘卷，part-分区卷，lvm-逻辑卷$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTxvda 202:0 0 100G 0 disk└─xvda1 202:1 0 100G 0 part /xvdf 202:80 0 20G 0 disk /dataxvdg 202:96 0 10G 0 disk└─vgnew-lvnew 253:0 0 10G 0 lvm /new_data 7.格式化新卷 7.1 xfs 12345678910$ mkfs.xfs /dev/vgnew/lvnewmeta-data=/dev/vgnew/lvnew isize=512 agcount=4, agsize=655104 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=0data = bsize=4096 blocks=2620416, imaxpct=25 = sunit=0 swidth=0 blksnaming =version 2 bsize=4096 ascii-ci=0 ftype=1log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0 7.2 ext4 123456789101112131415161718192021$ mkfs.ext4 /dev/vgnew/lvnewmke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks655360 inodes, 2620416 blocks131020 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=215167795280 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632Allocating group tables: 完成正在写入inode表: 完成Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成 8.创建新路径并将新卷挂载上 1234567891011121314$ mkdir /new_data$ mount /dev/vgnew/lvnew /new_data$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 2.0G 0 2.0G 0% /devtmpfs tmpfs 2.0G 0 2.0G 0% /dev/shmtmpfs tmpfs 2.0G 544K 2.0G 1% /runtmpfs tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup/dev/xvda1 xfs 100G 13G 88G 13% //dev/xvdf xfs 20G 53M 20G 1% /datatmpfs tmpfs 393M 0 393M 0% /run/user/1002tmpfs tmpfs 393M 0 393M 0% /run/user/1001tmpfs tmpfs 393M 0 393M 0% /run/user/1000/dev/mapper/vgnew-lvnew xfs 10G 43M 10G 1% /new_data 9.永久挂载卷 9.1 xfs 12echo &#x27;/dev/mapper/vgnew-lvnew /new_data xfs defaults 0 0&#x27; &gt;&gt; /etc/fstabmount -a 9.2 ext4 12echo &#x27;/dev/mapper/vgnew-lvnew /new_data ext4 defaults 0 0&#x27; &gt;&gt; /etc/fstabmount -a 添加新的磁盘到存在的逻辑卷 1.添加新的磁盘，步骤同1，2，3，新卷名称 xvdh，注意物理卷的方式扩容只能添加新的磁盘，不支持修改ebs容量的方式进行扩容 12345678$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTxvda 202:0 0 100G 0 disk└─xvda1 202:1 0 100G 0 part /xvdf 202:80 0 20G 0 disk /dataxvdg 202:96 0 10G 0 disk└─vgnew-lvnew 253:0 0 10G 0 lvm /new_dataxvdh 202:112 0 10G 0 disk 2.创建新物理卷 12345678# 创建新物理卷，可以先分区再创建，这里为了省事不进行分区$ pvcreate /dev/xvdh Physical volume &quot;/dev/xvdh&quot; successfully created.# 查看当期所有物理卷（或使用 pvdisplay 命令）$ pvs PV VG Fmt Attr PSize PFree /dev/sdg vgnew lvm2 a-- &lt;10.00g 0 /dev/sdh lvm2 --- 10.00g 10.00g 3.扩展已有卷组 123456789101112# 将新的物理卷 /dev/sdh 加入卷组 vgnew$ vgextend vgnew /dev/sdh Volume group &quot;vgnew&quot; successfully extended# 查看当前所有物理卷（或使用 pvdisplay 命令）$ pvs PV VG Fmt Attr PSize PFree /dev/sdg vgnew lvm2 a-- &lt;10.00g 0 /dev/sdh vgnew lvm2 a-- &lt;10.00g &lt;10.00g# 查看卷组（或使用 vgdisplay 命令），此次可以看到卷组中剩余可用空间 VFree和总大小 VSize$ vgs VG #PV #LV #SN Attr VSize VFree vgnew 2 1 0 wz--n- 19.99g &lt;10.00g 4.扩容已有逻辑卷 1234567891011121314151617181920# 将卷组中的剩余空间添加到指定逻辑卷$ lvextend -l +100%FREE /dev/vgnew/lvnew Size of logical volume vgnew/lvnew changed from &lt;10.00 GiB (2559 extents) to 19.99 GiB (5118 extents). Logical volume vgnew/lvnew successfully resized.# 可以加上 -r,自动更新文件系统$ lvextend -r -l +100%FREE /dev/vgnew/lvnew Size of logical volume vgnew/lvnew changed from 509.99 GiB (130558 extents) to &lt;519.99 GiB (133117 extents). Logical volume vgnew/lvnew successfully resized.meta-data=/dev/mapper/vgnew-lvnew isize=512 agcount=817, agsize=163776 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=1, rmapbt=0 = reflink=1 bigtime=0 inobtcount=0data = bsize=4096 blocks=133691392, imaxpct=25 = sunit=1 swidth=1 blksnaming =version 2 bsize=4096 ascii-ci=0, ftype=1log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=1 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0data blocks changed from 133691392 to 136311808 5.更新文件系统，上面的扩展逻辑卷名称加上 -r 后，就不需要执行的命令了 5.1 xfs 1234567891011$ xfs_growfs /dev/vgnew/lvnewmeta-data=/dev/mapper/vgnew-lvnew isize=512 agcount=4, agsize=655104 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1 spinodes=0data = bsize=4096 blocks=2620416, imaxpct=25 = sunit=0 swidth=0 blksnaming =version 2 bsize=4096 ascii-ci=0 ftype=1log =internal bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0data blocks changed from 2620416 to 5240832 5.2 ext4 12345$ resize2fs /dev/mapper/vgnew-lvnewresize2fs 1.42.9 (28-Dec-2013)Filesystem at /dev/mapper/vgnew-lvnew is mounted on /new_data; on-line resizing requiredold_desc_blocks = 2, new_desc_blocks = 3The filesystem on /dev/mapper/vgnew-lvnew is now 5240832 blocks long. 5.3 查看结果 123456789101112$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 2.0G 0 2.0G 0% /devtmpfs tmpfs 2.0G 0 2.0G 0% /dev/shmtmpfs tmpfs 2.0G 548K 2.0G 1% /runtmpfs tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup/dev/xvda1 xfs 100G 13G 88G 13% //dev/xvdf xfs 20G 53M 20G 1% /datatmpfs tmpfs 393M 0 393M 0% /run/user/1002tmpfs tmpfs 393M 0 393M 0% /run/user/1001tmpfs tmpfs 393M 0 393M 0% /run/user/1000/dev/mapper/vgnew-lvnew xfs 20G 53M 20G 1% /new_data","summary":"摘要 磁盘的挂载、分区、格式化、扩容等命令 本文基于AWS EC2 EBS CentOS8(x86_64)","date_published":"2023-11-06T14:30:05.000Z","tags":["技术","linux","linux常用命令","linux常用命令"]},{"id":"https://blog.hanqunfeng.com/2023/11/06/linux-command12-disk/","url":"https://blog.hanqunfeng.com/2023/11/06/linux-command12-disk/","title":"Linux常用命令--磁盘管理之基础篇","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>磁盘的挂载、分区、格式化、扩容等命令</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>AWS EC2 EBS CentOS8(x86_64)</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"添加新卷并绑定到新的路径下\">添加新卷并绑定到新的路径下</h2>\n<h3 id=\"1-aws控制台–-卷–-创建一个新卷（10G），注意选择可用区，然后点击操作–-挂载卷–-选择对应的ec2实例\">1.aws控制台–&gt;卷–&gt;创建一个新卷（10G），注意选择可用区，然后点击操作–&gt;挂载卷–&gt;选择对应的ec2实例</h3>\n<h3 id=\"2-ssh-登录-ec2，以下操作全责root下进行，初始磁盘情况如下\">2.ssh 登录 ec2，以下操作全责root下进行，初始磁盘情况如下</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  2.0G     0  2.0G    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     2.0G     0  2.0G    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     2.0G  532K  2.0G    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     2.0G     0  2.0G    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/xvda1     xfs       100G   13G   88G   13% /</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1002</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1001</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1000</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-查看新挂载卷的名称，这里看到新挂载的卷名称为-xvdf\">3.查看新挂载卷的名称，这里看到新挂载的卷名称为 <code>xvdf</code></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsblk</span><br><span class=\"line\">NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">xvda    202:0    0  100G  0 disk</span><br><span class=\"line\">└─xvda1 202:1    0  100G  0 part /</span><br><span class=\"line\">xvdf    202:80   0   10G  0 disk</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-格式化新卷\">4.格式化新卷</h3>\n<div class=\"tips\">\n<p><em><strong>可以查看磁盘的格式化类型</strong></em></p>\n<blockquote>\n<p>注意这里的磁盘名称有可能不一样，这和云厂商提供的磁盘种类有关系，请根据实际情况进行修改</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方法1，更简单，格式化类型目前最常用的就是ext4和xfs</span></span><br><span class=\"line\">$ lsblk -f</span><br><span class=\"line\">NAME    FSTYPE LABEL UUID                                 MOUNTPOINT</span><br><span class=\"line\">xvda</span><br><span class=\"line\">└─xvda1 ext4   /     df24ba12-defa-4725-9a31-2ff9b332ae90 /</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ lsblk -f <span class=\"comment\"># 注意这里是两个分区 ，这里 nvme0n1p128 是一个特殊的系统分区，其不用于存储文件数据，而是为启动管理提供支持,在aws上只有作为系统盘时才会有该分区。</span></span><br><span class=\"line\">NAME          FSTYPE LABEL UUID                                 MOUNTPOINT</span><br><span class=\"line\">nvme0n1</span><br><span class=\"line\">├─nvme0n1p1   xfs    /     a79c006f-96af-49dc-a71a-2779441678a3 /</span><br><span class=\"line\">└─nvme0n1p128</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法2，后面根磁盘名称或者分区名称</span></span><br><span class=\"line\"><span class=\"comment\"># 磁盘格式化类型</span></span><br><span class=\"line\">$ blkid /dev/xvda1</span><br><span class=\"line\">/dev/xvda1: LABEL=<span class=\"string\">&quot;/&quot;</span> UUID=<span class=\"string\">&quot;df24ba12-defa-4725-9a31-2ff9b332ae90&quot;</span> TYPE=<span class=\"string\">&quot;ext4&quot;</span> PARTLABEL=<span class=\"string\">&quot;Linux&quot;</span> PARTUUID=<span class=\"string\">&quot;d6311ca9-f51b-419d-9c8d-beac61c0403a&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ blkid /dev/nvme0n1p1</span><br><span class=\"line\">/dev/nvme0n1p1: LABEL=<span class=\"string\">&quot;/&quot;</span> UUID=<span class=\"string\">&quot;a79c006f-96af-49dc-a71a-2779441678a3&quot;</span> TYPE=<span class=\"string\">&quot;xfs&quot;</span> PARTLABEL=<span class=\"string\">&quot;Linux&quot;</span> PARTUUID=<span class=\"string\">&quot;80232d14-a44a-48c8-844b-e54d7e6178eb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 磁盘分区类型，分区类型下文会有介绍</span></span><br><span class=\"line\">$ blkid /dev/xvda</span><br><span class=\"line\">/dev/xvda: PTTYPE=<span class=\"string\">&quot;gpt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">blkid /dev/nvme0n1</span><br><span class=\"line\">/dev/nvme0n1: PTUUID=<span class=\"string\">&quot;0bcd4d37-a271-4b2c-a475-a2bdb05f5f0d&quot;</span> PTTYPE=<span class=\"string\">&quot;gpt&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h4 id=\"4-1-不分区xfs\">4.1 不分区xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.xfs /dev/xvdf</span><br><span class=\"line\">meta-data=/dev/xvdf              isize=512    agcount=4, agsize=655360 blks</span><br><span class=\"line\">        =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">        =                       crc=1        finobt=1, sparse=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=2621440, imaxpct=25</span><br><span class=\"line\">        =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">        =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-不分区ext4\">4.2 不分区ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.ext4 /dev/xvdf</span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">655360 inodes, 2620416 blocks</span><br><span class=\"line\">131020 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=2151677952</span><br><span class=\"line\">80 block <span class=\"built_in\">groups</span></span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">8192 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks:</span><br><span class=\"line\">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成</span><br><span class=\"line\">正在写入inode表: 完成</span><br><span class=\"line\">Creating journal (32768 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-3-分区后格式化，后续操作没有进行分区，一块盘最大可以申请16384GiB，对于一般的业务来说足够了\">4.3 分区后格式化，后续操作没有进行分区，一块盘最大可以申请16384GiB，对于一般的业务来说足够了</h4>\n<h5 id=\"4-3-1-MBR分区（一个分区必须小于2-2T-且最多3个主分区）\">4.3.1 MBR分区（一个分区必须小于2.2T,且最多3个主分区）</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ fdisk /dev/nvme2n1 <span class=\"comment\"># 磁盘名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">欢迎使用 fdisk (util-linux 2.30.2)。</span><br><span class=\"line\">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class=\"line\">使用写入命令前请三思。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n <span class=\"comment\">#创建新分区</span></span><br><span class=\"line\">分区类型</span><br><span class=\"line\">   p   主分区 (0个主分区，0个扩展分区，4空闲)</span><br><span class=\"line\">   e   扩展分区 (逻辑分区容器)</span><br><span class=\"line\">选择 (默认 p)：p  <span class=\"comment\">#创建主分区</span></span><br><span class=\"line\">分区号 (1-4, 默认  1): <span class=\"comment\">#回车</span></span><br><span class=\"line\">第一个扇区 (2048-41943039, 默认 2048): <span class=\"comment\">#回车</span></span><br><span class=\"line\">上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (2048-41943039, 默认 41943039): +5120M <span class=\"comment\">#设置第一个分区大小为5G</span></span><br><span class=\"line\"></span><br><span class=\"line\">创建了一个新分区 1，类型为“Linux”，大小为 5 GiB。</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n <span class=\"comment\">#创建新分区，设置第二个分区</span></span><br><span class=\"line\">分区类型</span><br><span class=\"line\">   p   主分区 (1个主分区，0个扩展分区，3空闲)</span><br><span class=\"line\">   e   扩展分区 (逻辑分区容器)</span><br><span class=\"line\">选择 (默认 p)：p  <span class=\"comment\">#创建主分区</span></span><br><span class=\"line\">分区号 (2-4, 默认  2): <span class=\"comment\">#回车</span></span><br><span class=\"line\">第一个扇区 (10487808-41943039, 默认 10487808): <span class=\"comment\">#回车</span></span><br><span class=\"line\">上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (10487808-41943039, 默认 41943039): <span class=\"comment\">#回车 将剩余空间全部分配给第二个分区</span></span><br><span class=\"line\"></span><br><span class=\"line\">创建了一个新分区 2，类型为“Linux”，大小为 15 GiB。</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：w <span class=\"comment\">#保存退出</span></span><br><span class=\"line\">分区表已调整。</span><br><span class=\"line\">将调用 ioctl() 来重新读分区表。</span><br><span class=\"line\">正在同步磁盘。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">补充：</span><br><span class=\"line\">q :不保存退出</span><br><span class=\"line\">d :删除分区，删除分区前要先 umount 掉挂载路径：umount /data</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-3-2-GPT分区-分区大小没有限制，主分区个数也没有限制\">4.3.2 GPT分区(分区大小没有限制，主分区个数也没有限制)</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对/dev/nvme3n1进行分区，如果parted命令不存在可以用 yum 安装</span></span><br><span class=\"line\">$ parted /dev/nvme3n1</span><br><span class=\"line\">GNU Parted 3.1</span><br><span class=\"line\">使用 /dev/nvme3n1</span><br><span class=\"line\">Welcome to GNU Parted! Type <span class=\"string\">&#x27;help&#x27;</span> to view a list of commands.</span><br><span class=\"line\">(parted) mklabel gpt            <span class=\"comment\">#将sdb磁盘改成大分区格式   ，改回MBR模式： mklabel msdos</span></span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                <span class=\"comment\">#打印信息，看到分区类型已经修改为gpt：Partition Table: gpt</span></span><br><span class=\"line\">Model: NVMe Device (nvme)</span><br><span class=\"line\">Disk /dev/nvme3n1: 21.5GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B <span class=\"comment\">#这里显示的是扇区大小</span></span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Disk Flags:</span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start  End  Size  File system  Name  标志</span><br><span class=\"line\"></span><br><span class=\"line\">(parted) mkpart primary 0 10gb             <span class=\"comment\">#设置第一块分区分配10G空间  start end    ，从0开始</span></span><br><span class=\"line\">警告: The resulting partition is not properly aligned <span class=\"keyword\">for</span> best performance.</span><br><span class=\"line\">忽略/Ignore/放弃/Cancel? c           <span class=\"comment\">#这里看到警告，输入  &#x27;放弃&#x27;或者&#x27;c&#x27;  ，经过反复尝试，发现设置分区的开始大小为 2048个扇区大小时不会抛出警告，一个扇区为512B</span></span><br><span class=\"line\">(parted) mkpart primary 1048576b 10gb             <span class=\"comment\">#设置第一块分区分配10G空间  start end ，从1048576b开始：2048 * 512b</span></span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                      <span class=\"comment\">#打印信息，看到第一个分区已经创建好了</span></span><br><span class=\"line\">Model: NVMe Device (nvme)</span><br><span class=\"line\">Disk /dev/nvme3n1: 21.5GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Disk Flags:</span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start   End     Size     File system  Name     标志</span><br><span class=\"line\"> 1      1049kB  10.0GB  10000MB               primary</span><br><span class=\"line\"></span><br><span class=\"line\">(parted) mkpart primary 10gb 21.5gb        <span class=\"comment\">#设置第二块分区分配剩余空间  start end    ，从10gb开始 ，print中显示 Disk /dev/nvme3n1: 21.5GB ，所以end设置为 21.5gb</span></span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                           <span class=\"comment\">#打印信息，看到第二个分区已经创建好了</span></span><br><span class=\"line\">Model: NVMe Device (nvme)</span><br><span class=\"line\">Disk /dev/nvme3n1: 21.5GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Disk Flags:</span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start   End     Size     File system  Name     标志</span><br><span class=\"line\"> 1      1049kB  10.0GB  10000MB               primary</span><br><span class=\"line\"> 2      10.0GB  21.5GB  11.5GB                primary</span><br><span class=\"line\"></span><br><span class=\"line\">(parted) quit                              <span class=\"comment\"># 退出即可</span></span><br><span class=\"line\">信息: You may need to update /etc/fstab.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">补充：</span><br><span class=\"line\">删除分区： 删除分区前要先 umount 掉挂载路径：umount /gtp_data</span><br><span class=\"line\">parted /dev/nvme3n1</span><br><span class=\"line\">(parted) <span class=\"built_in\">rm</span> 1  <span class=\"comment\">#要删除那个分区直接输入Number即可，通过print命令查看Number，这里表示删除第一块分区</span></span><br><span class=\"line\">(parted) quit</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-3-3-查看磁盘信息\">4.3.3 查看磁盘信息</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsblk</span><br><span class=\"line\">NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">nvme0n1       259:0    0    8G  0 disk</span><br><span class=\"line\">├─nvme0n1p1   259:1    0    8G  0 part /</span><br><span class=\"line\">└─nvme0n1p128 259:2    0    1M  0 part</span><br><span class=\"line\">nvme1n1       259:3    0   10G  0 disk /data</span><br><span class=\"line\">nvme2n1       259:4    0   20G  0 disk</span><br><span class=\"line\">├─nvme2n1p1   259:7    0    5G  0 part</span><br><span class=\"line\">└─nvme2n1p2   259:8    0   15G  0 part</span><br><span class=\"line\">nvme3n1       259:5    0   20G  0 disk</span><br><span class=\"line\">├─nvme3n1p1   259:10   0  9.3G  0 part</span><br><span class=\"line\">└─nvme3n1p2   259:11   0 10.7G  0 part</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过该命令，可以查看磁盘的分区类别。比如这里默认的系统盘的分区类型为GPT--磁盘标签类型：gpt。BMR：磁盘标签类型：dos</span></span><br><span class=\"line\">$ fdisk -l</span><br><span class=\"line\">Disk /dev/nvme0n1：8 GiB，8589934592 字节，16777216 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\">磁盘标识符：465F350B-EC19-47A2-9A1D-44ECF9FF38AC</span><br><span class=\"line\"></span><br><span class=\"line\">设备              起点     末尾     扇区 大小 类型</span><br><span class=\"line\">/dev/nvme0n1p1    4096 16777182 16773087   8G Linux 文件系统</span><br><span class=\"line\">/dev/nvme0n1p128  2048     4095     2048   1M BIOS 启动</span><br><span class=\"line\"></span><br><span class=\"line\">分区表记录没有按磁盘顺序。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme1n1：15 GiB，16106127360 字节，31457280 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme2n1：25 GiB，26843545600 字节，52428800 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x8b37421e</span><br><span class=\"line\"></span><br><span class=\"line\">设备           启动     起点     末尾     扇区 大小 Id 类型</span><br><span class=\"line\">/dev/nvme2n1p1          2048 10487807 10485760   5G 83 Linux</span><br><span class=\"line\">/dev/nvme2n1p2      10487808 52428766 41940959  20G 83 Linux</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme3n1：25 GiB，26843545600 字节，52428800 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\">磁盘标识符：6F603681-4682-445A-8F10-0095F7536D6B</span><br><span class=\"line\"></span><br><span class=\"line\">设备               起点     末尾     扇区  大小 类型</span><br><span class=\"line\">/dev/nvme3n1p1     2048 19531775 19529728  9.3G Microsoft 基本数据</span><br><span class=\"line\">/dev/nvme3n1p2 19531776 52426751 32894976 15.7G Microsoft 基本数据</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-3-4-分区后格式化，注意格式化时要指定分区名称，这里以mbr分区为例，gpt与其类似\">4.3.4 分区后格式化，注意格式化时要指定分区名称，这里以mbr分区为例，gpt与其类似</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 格式化第一个分区</span></span><br><span class=\"line\">$ mkfs.ext4 /dev/nvme2n1p1</span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">327680 inodes, 1310720 blocks</span><br><span class=\"line\">65536 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=1342177280</span><br><span class=\"line\">40 block <span class=\"built_in\">groups</span></span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">8192 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks:</span><br><span class=\"line\">    32768, 98304, 163840, 229376, 294912, 819200, 884736</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成</span><br><span class=\"line\">正在写入inode表: 完成</span><br><span class=\"line\">Creating journal (32768 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化第二个分区</span></span><br><span class=\"line\">$ mkfs.ext4 /dev/nvme2n1p2</span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">983040 inodes, 3931904 blocks</span><br><span class=\"line\">196595 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=2151677952</span><br><span class=\"line\">120 block <span class=\"built_in\">groups</span></span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">8192 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks:</span><br><span class=\"line\">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成</span><br><span class=\"line\">正在写入inode表: 完成</span><br><span class=\"line\">Creating journal (32768 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-创建新路径并将新卷挂载上\">5.创建新路径并将新卷挂载上</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> /data</span><br><span class=\"line\">$ mount /dev/xvdf /data</span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  2.0G     0  2.0G    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     2.0G     0  2.0G    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     2.0G  532K  2.0G    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     2.0G     0  2.0G    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/xvda1     xfs       100G   13G   88G   13% /</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1002</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1001</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1000</span><br><span class=\"line\">/dev/xvdf      xfs        10G   43M   10G    1% /data</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-永久挂载卷\">6.永久挂载卷</h3>\n<h4 id=\"6-1-xfs\">6.1 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/xvdf  /data xfs    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-2-ext4\">6.2 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/xvdf  /data ext4    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改ebs的大小后扩展磁盘\">修改ebs的大小后扩展磁盘</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用云盘作为数据盘时，磁盘空间不足的情况比较常见，日常维护大部分情况都是扩容磁盘，所以这里以扩容 aws 云盘为例，其他类型的云盘扩展方式基本类似。</p>\n</li>\n<li class=\"lvl-2\">\n<p>扩容前要先查看磁盘信息，确认磁盘是否进行了分区、格式化的方式以及挂载情况。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过如下命令都可以查看磁盘信息</span></span><br><span class=\"line\"><span class=\"comment\"># 简单看，包含挂载的路径和格式化类型</span></span><br><span class=\"line\">lsblk -f</span><br><span class=\"line\"><span class=\"built_in\">df</span> -hT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 详细看，包含挂载的路径和格式化类型，也包含分区类型</span></span><br><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-登录aws控制台–-卷–-找到指定的卷–-修改–修改卷大小-修改为20G-（只能调大），注意调整容量后要查看其状态变为正在使用，此时才能进行下面的操作\">1.登录aws控制台–&gt;卷–&gt;找到指定的卷–&gt;修改–修改卷大小(修改为20G)（只能调大），注意调整容量后要查看其状态变为正在使用，此时才能进行下面的操作</h3>\n<h3 id=\"2-ssh登录ec2\">2.ssh登录ec2</h3>\n<h3 id=\"3-扩展分区大小-不区分mbr与gpt\">3.扩展分区大小: 不区分mbr与gpt</h3>\n<h4 id=\"3-1-不分区时-什么都不用做\">3.1 不分区时: 什么都不用做</h4>\n<h4 id=\"3-2分区时-只能调整最后一个分区的大小\">3.2分区时: 只能调整最后一个分区的大小</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /dev/nvme2n1：磁盘名称 2：第几个分区，实测分两个区的时只能扩展第二个分区，扩展第一个分区会提示：NOCHANGE: partition 1 is size 10485760. it cannot be grown</span></span><br><span class=\"line\">$ growpart /dev/nvme2n1 2</span><br><span class=\"line\">CHANGED: partition=2 start=10487808 old: size=31455232 end=41943040 new: size=41940959 end=52428767</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>growpart</strong></em><br>\ngrowpart 命令是用于调整硬盘分区大小的工具，它基于 cloud-utils 包提供了一种扩展分区的方法。然而，growpart 命令确实有一个限制，它只能调整并扩展磁盘上最后一个分区的大小，而不能直接用于非最后一个分区的大小调整。<br>\n这个限制源于底层的分区表结构和文件系统布局。分区表通常是基于硬盘的特定格式（比如 MBR 或 GPT），这些格式决定了分区的组织方式。在这种结构下，非最后一个分区的大小调整可能会影响到其他分区的布局，这可能会导致数据丢失或破坏。<br>\n因此，growpart 仅专注于扩展最后一个分区是出于安全和数据完整性的考虑。如果你需要调整非最后一个分区的大小，可能需要采取其他方法，比如使用其他工具或者进行手动操作。但务必在这样做之前备份重要数据，因为调整分区大小可能会对数据安全带来风险。</p>\n<p><em><strong>PS:</strong></em><br>\n执行 growpart 可能会抛出如下错误提示：/bin/growpart:行242: 个扇区: 语法错误: 期待操作数 （错误符号是 “个扇区”）<br>\n解决方法：命令行输入 LANG=en_US.UTF-8 回车后再次运行 growpart 即可</p>\n</div>\n<h3 id=\"4-扩容后重置磁盘\">4.扩容后重置磁盘</h3>\n<h4 id=\"4-1-xfs\">4.1 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /data 就是 mount 对应的磁盘</span></span><br><span class=\"line\">$ xfs_growfs -d /data</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-ext4\">4.2 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不分区时是磁盘名称</span></span><br><span class=\"line\">$ resize2fs /dev/xvdf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#分区时是分区名称，可能会提示先执行 e2fsck -f /dev/nvme2n1p2 执行文件系统检查</span></span><br><span class=\"line\">$ resize2fs /dev/nvme2n1p2</span><br></pre></td></tr></table></figure>","content_text":"摘要 磁盘的挂载、分区、格式化、扩容等命令 本文基于AWS EC2 EBS CentOS8(x86_64) 添加新卷并绑定到新的路径下 1.aws控制台–&gt;卷–&gt;创建一个新卷（10G），注意选择可用区，然后点击操作–&gt;挂载卷–&gt;选择对应的ec2实例 2.ssh 登录 ec2，以下操作全责root下进行，初始磁盘情况如下 12345678910$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 2.0G 0 2.0G 0% /devtmpfs tmpfs 2.0G 0 2.0G 0% /dev/shmtmpfs tmpfs 2.0G 532K 2.0G 1% /runtmpfs tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup/dev/xvda1 xfs 100G 13G 88G 13% /tmpfs tmpfs 393M 0 393M 0% /run/user/1002tmpfs tmpfs 393M 0 393M 0% /run/user/1001tmpfs tmpfs 393M 0 393M 0% /run/user/1000 3.查看新挂载卷的名称，这里看到新挂载的卷名称为 xvdf 12345$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTxvda 202:0 0 100G 0 disk└─xvda1 202:1 0 100G 0 part /xvdf 202:80 0 10G 0 disk 4.格式化新卷 可以查看磁盘的格式化类型 注意这里的磁盘名称有可能不一样，这和云厂商提供的磁盘种类有关系，请根据实际情况进行修改 123456789101112131415161718192021222324252627#方法1，更简单，格式化类型目前最常用的就是ext4和xfs$ lsblk -fNAME FSTYPE LABEL UUID MOUNTPOINTxvda└─xvda1 ext4 / df24ba12-defa-4725-9a31-2ff9b332ae90 /$ lsblk -f # 注意这里是两个分区 ，这里 nvme0n1p128 是一个特殊的系统分区，其不用于存储文件数据，而是为启动管理提供支持,在aws上只有作为系统盘时才会有该分区。NAME FSTYPE LABEL UUID MOUNTPOINTnvme0n1├─nvme0n1p1 xfs / a79c006f-96af-49dc-a71a-2779441678a3 /└─nvme0n1p128#方法2，后面根磁盘名称或者分区名称# 磁盘格式化类型$ blkid /dev/xvda1/dev/xvda1: LABEL=&quot;/&quot; UUID=&quot;df24ba12-defa-4725-9a31-2ff9b332ae90&quot; TYPE=&quot;ext4&quot; PARTLABEL=&quot;Linux&quot; PARTUUID=&quot;d6311ca9-f51b-419d-9c8d-beac61c0403a&quot;$ blkid /dev/nvme0n1p1/dev/nvme0n1p1: LABEL=&quot;/&quot; UUID=&quot;a79c006f-96af-49dc-a71a-2779441678a3&quot; TYPE=&quot;xfs&quot; PARTLABEL=&quot;Linux&quot; PARTUUID=&quot;80232d14-a44a-48c8-844b-e54d7e6178eb&quot;# 磁盘分区类型，分区类型下文会有介绍$ blkid /dev/xvda/dev/xvda: PTTYPE=&quot;gpt&quot;blkid /dev/nvme0n1/dev/nvme0n1: PTUUID=&quot;0bcd4d37-a271-4b2c-a475-a2bdb05f5f0d&quot; PTTYPE=&quot;gpt&quot; 4.1 不分区xfs 12345678910$ mkfs.xfs /dev/xvdfmeta-data=/dev/xvdf isize=512 agcount=4, agsize=655360 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=0data = bsize=4096 blocks=2621440, imaxpct=25 = sunit=0 swidth=0 blksnaming =version 2 bsize=4096 ascii-ci=0 ftype=1log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0 4.2 不分区ext4 123456789101112131415161718192021$ mkfs.ext4 /dev/xvdfmke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks655360 inodes, 2620416 blocks131020 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=215167795280 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632Allocating group tables: 完成正在写入inode表: 完成Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成 4.3 分区后格式化，后续操作没有进行分区，一块盘最大可以申请16384GiB，对于一般的业务来说足够了 4.3.1 MBR分区（一个分区必须小于2.2T,且最多3个主分区） 123456789101112131415161718192021222324252627282930313233343536373839$ fdisk /dev/nvme2n1 # 磁盘名称欢迎使用 fdisk (util-linux 2.30.2)。更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。命令(输入 m 获取帮助)：n #创建新分区分区类型 p 主分区 (0个主分区，0个扩展分区，4空闲) e 扩展分区 (逻辑分区容器)选择 (默认 p)：p #创建主分区分区号 (1-4, 默认 1): #回车第一个扇区 (2048-41943039, 默认 2048): #回车上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (2048-41943039, 默认 41943039): +5120M #设置第一个分区大小为5G创建了一个新分区 1，类型为“Linux”，大小为 5 GiB。命令(输入 m 获取帮助)：n #创建新分区，设置第二个分区分区类型 p 主分区 (1个主分区，0个扩展分区，3空闲) e 扩展分区 (逻辑分区容器)选择 (默认 p)：p #创建主分区分区号 (2-4, 默认 2): #回车第一个扇区 (10487808-41943039, 默认 10487808): #回车上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (10487808-41943039, 默认 41943039): #回车 将剩余空间全部分配给第二个分区创建了一个新分区 2，类型为“Linux”，大小为 15 GiB。命令(输入 m 获取帮助)：w #保存退出分区表已调整。将调用 ioctl() 来重新读分区表。正在同步磁盘。补充：q :不保存退出d :删除分区，删除分区前要先 umount 掉挂载路径：umount /data 4.3.2 GPT分区(分区大小没有限制，主分区个数也没有限制) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# 对/dev/nvme3n1进行分区，如果parted命令不存在可以用 yum 安装$ parted /dev/nvme3n1GNU Parted 3.1使用 /dev/nvme3n1Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.(parted) mklabel gpt #将sdb磁盘改成大分区格式 ，改回MBR模式： mklabel msdos(parted) print #打印信息，看到分区类型已经修改为gpt：Partition Table: gptModel: NVMe Device (nvme)Disk /dev/nvme3n1: 21.5GBSector size (logical/physical): 512B/512B #这里显示的是扇区大小Partition Table: gptDisk Flags:Number Start End Size File system Name 标志(parted) mkpart primary 0 10gb #设置第一块分区分配10G空间 start end ，从0开始警告: The resulting partition is not properly aligned for best performance.忽略/Ignore/放弃/Cancel? c #这里看到警告，输入 &#x27;放弃&#x27;或者&#x27;c&#x27; ，经过反复尝试，发现设置分区的开始大小为 2048个扇区大小时不会抛出警告，一个扇区为512B(parted) mkpart primary 1048576b 10gb #设置第一块分区分配10G空间 start end ，从1048576b开始：2048 * 512b(parted) print #打印信息，看到第一个分区已经创建好了Model: NVMe Device (nvme)Disk /dev/nvme3n1: 21.5GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags:Number Start End Size File system Name 标志 1 1049kB 10.0GB 10000MB primary(parted) mkpart primary 10gb 21.5gb #设置第二块分区分配剩余空间 start end ，从10gb开始 ，print中显示 Disk /dev/nvme3n1: 21.5GB ，所以end设置为 21.5gb(parted) print #打印信息，看到第二个分区已经创建好了Model: NVMe Device (nvme)Disk /dev/nvme3n1: 21.5GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags:Number Start End Size File system Name 标志 1 1049kB 10.0GB 10000MB primary 2 10.0GB 21.5GB 11.5GB primary(parted) quit # 退出即可信息: You may need to update /etc/fstab.补充：删除分区： 删除分区前要先 umount 掉挂载路径：umount /gtp_dataparted /dev/nvme3n1(parted) rm 1 #要删除那个分区直接输入Number即可，通过print命令查看Number，这里表示删除第一块分区(parted) quit 4.3.3 查看磁盘信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 8G 0 disk├─nvme0n1p1 259:1 0 8G 0 part /└─nvme0n1p128 259:2 0 1M 0 partnvme1n1 259:3 0 10G 0 disk /datanvme2n1 259:4 0 20G 0 disk├─nvme2n1p1 259:7 0 5G 0 part└─nvme2n1p2 259:8 0 15G 0 partnvme3n1 259:5 0 20G 0 disk├─nvme3n1p1 259:10 0 9.3G 0 part└─nvme3n1p2 259:11 0 10.7G 0 part# 通过该命令，可以查看磁盘的分区类别。比如这里默认的系统盘的分区类型为GPT--磁盘标签类型：gpt。BMR：磁盘标签类型：dos$ fdisk -lDisk /dev/nvme0n1：8 GiB，8589934592 字节，16777216 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节磁盘标签类型：gpt磁盘标识符：465F350B-EC19-47A2-9A1D-44ECF9FF38AC设备 起点 末尾 扇区 大小 类型/dev/nvme0n1p1 4096 16777182 16773087 8G Linux 文件系统/dev/nvme0n1p128 2048 4095 2048 1M BIOS 启动分区表记录没有按磁盘顺序。Disk /dev/nvme1n1：15 GiB，16106127360 字节，31457280 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节Disk /dev/nvme2n1：25 GiB，26843545600 字节，52428800 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节磁盘标签类型：dos磁盘标识符：0x8b37421e设备 启动 起点 末尾 扇区 大小 Id 类型/dev/nvme2n1p1 2048 10487807 10485760 5G 83 Linux/dev/nvme2n1p2 10487808 52428766 41940959 20G 83 LinuxDisk /dev/nvme3n1：25 GiB，26843545600 字节，52428800 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节磁盘标签类型：gpt磁盘标识符：6F603681-4682-445A-8F10-0095F7536D6B设备 起点 末尾 扇区 大小 类型/dev/nvme3n1p1 2048 19531775 19529728 9.3G Microsoft 基本数据/dev/nvme3n1p2 19531776 52426751 32894976 15.7G Microsoft 基本数据 4.3.4 分区后格式化，注意格式化时要指定分区名称，这里以mbr分区为例，gpt与其类似 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 格式化第一个分区$ mkfs.ext4 /dev/nvme2n1p1mke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks327680 inodes, 1310720 blocks65536 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=134217728040 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736Allocating group tables: 完成正在写入inode表: 完成Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成# 格式化第二个分区$ mkfs.ext4 /dev/nvme2n1p2mke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks983040 inodes, 3931904 blocks196595 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=2151677952120 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208Allocating group tables: 完成正在写入inode表: 完成Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成 5.创建新路径并将新卷挂载上 12345678910111213$ mkdir /data$ mount /dev/xvdf /data$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 2.0G 0 2.0G 0% /devtmpfs tmpfs 2.0G 0 2.0G 0% /dev/shmtmpfs tmpfs 2.0G 532K 2.0G 1% /runtmpfs tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup/dev/xvda1 xfs 100G 13G 88G 13% /tmpfs tmpfs 393M 0 393M 0% /run/user/1002tmpfs tmpfs 393M 0 393M 0% /run/user/1001tmpfs tmpfs 393M 0 393M 0% /run/user/1000/dev/xvdf xfs 10G 43M 10G 1% /data 6.永久挂载卷 6.1 xfs 12$ echo &#x27;/dev/xvdf /data xfs defaults 0 0&#x27; &gt;&gt; /etc/fstab$ mount -a 6.2 ext4 12$ echo &#x27;/dev/xvdf /data ext4 defaults 0 0&#x27; &gt;&gt; /etc/fstab$ mount -a 修改ebs的大小后扩展磁盘 使用云盘作为数据盘时，磁盘空间不足的情况比较常见，日常维护大部分情况都是扩容磁盘，所以这里以扩容 aws 云盘为例，其他类型的云盘扩展方式基本类似。 扩容前要先查看磁盘信息，确认磁盘是否进行了分区、格式化的方式以及挂载情况。 1234567# 通过如下命令都可以查看磁盘信息# 简单看，包含挂载的路径和格式化类型lsblk -fdf -hT# 详细看，包含挂载的路径和格式化类型，也包含分区类型fdisk -l 1.登录aws控制台–&gt;卷–&gt;找到指定的卷–&gt;修改–修改卷大小(修改为20G)（只能调大），注意调整容量后要查看其状态变为正在使用，此时才能进行下面的操作 2.ssh登录ec2 3.扩展分区大小: 不区分mbr与gpt 3.1 不分区时: 什么都不用做 3.2分区时: 只能调整最后一个分区的大小 123# /dev/nvme2n1：磁盘名称 2：第几个分区，实测分两个区的时只能扩展第二个分区，扩展第一个分区会提示：NOCHANGE: partition 1 is size 10485760. it cannot be grown$ growpart /dev/nvme2n1 2CHANGED: partition=2 start=10487808 old: size=31455232 end=41943040 new: size=41940959 end=52428767 growpart growpart 命令是用于调整硬盘分区大小的工具，它基于 cloud-utils 包提供了一种扩展分区的方法。然而，growpart 命令确实有一个限制，它只能调整并扩展磁盘上最后一个分区的大小，而不能直接用于非最后一个分区的大小调整。 这个限制源于底层的分区表结构和文件系统布局。分区表通常是基于硬盘的特定格式（比如 MBR 或 GPT），这些格式决定了分区的组织方式。在这种结构下，非最后一个分区的大小调整可能会影响到其他分区的布局，这可能会导致数据丢失或破坏。 因此，growpart 仅专注于扩展最后一个分区是出于安全和数据完整性的考虑。如果你需要调整非最后一个分区的大小，可能需要采取其他方法，比如使用其他工具或者进行手动操作。但务必在这样做之前备份重要数据，因为调整分区大小可能会对数据安全带来风险。 PS: 执行 growpart 可能会抛出如下错误提示：/bin/growpart:行242: 个扇区: 语法错误: 期待操作数 （错误符号是 “个扇区”） 解决方法：命令行输入 LANG=en_US.UTF-8 回车后再次运行 growpart 即可 4.扩容后重置磁盘 4.1 xfs 12# /data 就是 mount 对应的磁盘$ xfs_growfs -d /data 4.2 ext4 123456# 不分区时是磁盘名称$ resize2fs /dev/xvdf#分区时是分区名称，可能会提示先执行 e2fsck -f /dev/nvme2n1p2 执行文件系统检查$ resize2fs /dev/nvme2n1p2","summary":"摘要 磁盘的挂载、分区、格式化、扩容等命令 本文基于AWS EC2 EBS CentOS8(x86_64)","date_published":"2023-11-06T13:30:05.000Z","tags":["技术","linux","linux常用命令","linux常用命令"]},{"id":"https://blog.hanqunfeng.com/2023/09/05/spring-boot-r2dbc-mysql/","url":"https://blog.hanqunfeng.com/2023/09/05/spring-boot-r2dbc-mysql/","title":"聊一聊 SpringBoot R2DBC","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文聊聊SpringBoot R2dbc</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于SpringBoot-3.1.2</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/\">Github代码地址</a> <code>web-flux-mysql-redis-demo</code>,<code>webflux-mysql-multi-demo</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"打印SQL\">打印SQL</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>方式一: 开启 <code>debug</code> 日志</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以打印sql，但不能打印参数值</span></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">org.springframework.r2dbc:</span> <span class=\"string\">DEBUG</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>方式二: 使用 <code>r2dbc-proxy</code></p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.r2dbc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>r2dbc-proxy<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">r2dbc:</span></span><br><span class=\"line\">    <span class=\"comment\"># url: r2dbc:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class=\"line\">    <span class=\"comment\"># 开启代理，目的是打印sql，生产环境不建议，http://r2dbc.io/r2dbc-proxy/docs/current/docs/html/</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">r2dbc:proxy:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8&amp;proxyListener=com.example.r2dbc.LogExecutionListener</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.r2dbc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.proxy.core.QueryExecutionInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.proxy.listener.ProxyMethodExecutionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.proxy.support.QueryExecutionInfoFormatter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogExecutionListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ProxyMethodExecutionListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">QueryExecutionInfoFormatter</span> <span class=\"variable\">queryFormatter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QueryExecutionInfoFormatter</span>()</span><br><span class=\"line\">            .newLine()</span><br><span class=\"line\">            .showTime().showType().showSuccess().showTransaction().showBatchSize().showConnection().showThread()</span><br><span class=\"line\">            .newLine()</span><br><span class=\"line\">            .showQuery()</span><br><span class=\"line\">            .newLine()</span><br><span class=\"line\">            .showBindingsSize().showBindings()</span><br><span class=\"line\">            .newLine();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterExecuteOnStatement</span><span class=\"params\">(QueryExecutionInfo queryExecutionInfo)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">stringBuilder</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.queryFormatter.format(queryExecutionInfo);</span><br><span class=\"line\">        log.info(stringBuilder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"条件查询\">条件查询</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>springboot为我们提供了几个<code>Repository</code>，如<code>R2dbcRepository</code>、<code>ReactiveCrudRepository</code>、<code>ReactiveSortingRepository</code>等等，我们自己的<code>Repository</code>通过继承这些父接口，可以获得相应的CURD的能力，但是其没有对条件查询提供支持，此时可以通过自定义<code>Repository</code>接口及其实现类的方式实现扩展</p>\n</li>\n<li class=\"lvl-2\">\n<p>自定义<code>Repository</code>接口</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.r2dbc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.Row;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.RowMetadata;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Page;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Pageable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Sort;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.core.R2dbcEntityOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.repository.R2dbcRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.relational.core.query.Criteria;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.relational.core.query.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.repository.NoRepositoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.r2dbc.core.DatabaseClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reactor.core.publisher.Flux;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reactor.core.publisher.Mono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.BiFunction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoRepositoryBean</span> <span class=\"comment\">//接口不参与jpa的代理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BaseR2dbcRepository</span>&lt;T, ID <span class=\"keyword\">extends</span> <span class=\"title class_\">Serializable</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">R2dbcRepository</span>&lt;T, ID&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    R2dbcEntityOperations <span class=\"title function_\">getR2dbcEntityOperations</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Mono&lt;Page&lt;T&gt;&gt; <span class=\"title function_\">pageByQuery</span><span class=\"params\">(Criteria criteria, Pageable pageable)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Mono&lt;Long&gt; <span class=\"title function_\">countByQuery</span><span class=\"params\">(Criteria criteria)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria, Sort sort)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria, <span class=\"type\">int</span> limit)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria, Sort sort, <span class=\"type\">int</span> limit)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Query query)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Mono&lt;T&gt; <span class=\"title function_\">findOneByQuery</span><span class=\"params\">(Query query)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Mono&lt;T&gt; <span class=\"title function_\">findOneByQuery</span><span class=\"params\">(Criteria criteria)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;R&gt; Mono&lt;R&gt; <span class=\"title function_\">execSqlToMono</span><span class=\"params\">(String sql, Map&lt;String, Object&gt; bindMap, BiFunction&lt;Row, RowMetadata, R&gt; mappingFunction)</span> &#123;</span><br><span class=\"line\">        DatabaseClient.<span class=\"type\">GenericExecuteSpec</span> <span class=\"variable\">genericExecuteSpec</span> <span class=\"operator\">=</span> getR2dbcEntityOperations().getDatabaseClient().sql(sql);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bindMap != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;String, Object&gt; entry : bindMap.entrySet()) &#123;</span><br><span class=\"line\">                genericExecuteSpec = genericExecuteSpec.bind(entry.getKey(), entry.getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> genericExecuteSpec.map(mappingFunction).first();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;R&gt; Flux&lt;R&gt; <span class=\"title function_\">execSqlToFlux</span><span class=\"params\">(String sql, Map&lt;String, Object&gt; bindMap, BiFunction&lt;Row, RowMetadata, R&gt; mappingFunction)</span> &#123;</span><br><span class=\"line\">        DatabaseClient.<span class=\"type\">GenericExecuteSpec</span> <span class=\"variable\">genericExecuteSpec</span> <span class=\"operator\">=</span> getR2dbcEntityOperations().getDatabaseClient().sql(sql);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bindMap != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;String, Object&gt; entry : bindMap.entrySet()) &#123;</span><br><span class=\"line\">                genericExecuteSpec = genericExecuteSpec.bind(entry.getKey(), entry.getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> genericExecuteSpec.map(mappingFunction).all();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>自定义<code>Repository</code>接口的实现类</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.r2dbc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Page;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.PageImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Pageable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Sort;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.convert.R2dbcConverter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.core.R2dbcEntityOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.repository.support.SimpleR2dbcRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.relational.core.query.Criteria;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.relational.core.query.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.relational.repository.query.RelationalEntityInformation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reactor.core.publisher.Flux;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reactor.core.publisher.Mono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleBaseR2dbcRepository</span>&lt;T, ID <span class=\"keyword\">extends</span> <span class=\"title class_\">Serializable</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">SimpleR2dbcRepository</span>&lt;T, ID&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">BaseR2dbcRepository</span>&lt;T, ID&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> R2dbcEntityOperations r2dbcEntityOperations;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RelationalEntityInformation&lt;T, ID&gt; entity;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SimpleBaseR2dbcRepository</span><span class=\"params\">(RelationalEntityInformation&lt;T, ID&gt; entity, R2dbcEntityOperations entityOperations, R2dbcConverter converter)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(entity, entityOperations, converter);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.r2dbcEntityOperations = entityOperations;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.entity = entity;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;SimpleBaseR2dbcRepository&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R2dbcEntityOperations <span class=\"title function_\">getR2dbcEntityOperations</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;Page&lt;T&gt;&gt; <span class=\"title function_\">pageByQuery</span><span class=\"params\">(Criteria criteria, Pageable pageable)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.count(query, entity.getJavaType()).flatMap(total -&gt;</span><br><span class=\"line\">                r2dbcEntityOperations.select(query.with(pageable), entity.getJavaType())</span><br><span class=\"line\">                        .collectList()</span><br><span class=\"line\">                        .map(list -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">PageImpl</span>&lt;&gt;(list, pageable, total)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;Long&gt; <span class=\"title function_\">countByQuery</span><span class=\"params\">(Criteria criteria)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.count(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.select(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria, Sort sort)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria).sort(sort);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.select(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria, <span class=\"type\">int</span> limit)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria).limit(limit);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.select(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria, Sort sort, <span class=\"type\">int</span> limit)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria).sort(sort).limit(limit);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.select(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Query query)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.select(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;T&gt; <span class=\"title function_\">findOneByQuery</span><span class=\"params\">(Query query)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.selectOne(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;T&gt; <span class=\"title function_\">findOneByQuery</span><span class=\"params\">(Criteria criteria)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.selectOne(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>我们需要告知springboot使用我们自定义的<code>Repository</code></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.r2dbc.SimpleBaseR2dbcRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">// 这里必须指定 basePackages，否则 repositoryBaseClass 指定的实现类不能被关联到 各个 Repository 中</span></span><br><span class=\"line\"><span class=\"meta\">@EnableR2dbcRepositories(basePackages = &quot;com.example.mysql&quot;, repositoryBaseClass = SimpleBaseR2dbcRepository.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReactiveR2dbcConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时我们在创建业务<code>Repository</code>时就可以继承我们自定义的<code>Repository</code>了</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SysUserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseR2dbcRepository</span>&lt;SysUser, String&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>可以看到我们自定义的<code>Repository</code>中，主要是通过<code>Criteria</code>来提供查询条件的封装，我了便于创建<code>Criteria</code>对象，这里提供了一个工具类 <code>CustomCriteria</code>，其主要功能是根据条件来拼接查询条件，代码比较多，就不在这里粘贴了，自行去<a href=\"https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/web-flux-mysql-redis-demo\">Github代码地址</a>中查看吧。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;CustomCriteria&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Criteria 构造器</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by hanqf on 2023/9/4 11:47.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 示例：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.and 关系: select * from tbl_table where (username like &#x27;%admin%&#x27; or username like &#x27;lisi%&#x27;) and enable = 1</span></span><br><span class=\"line\"><span class=\"comment\"> * Criteria criteria = CustomCriteria.and()</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .eq(true, &quot;enable&quot;, 1)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .build();</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.or 关系: select * from tbl_table where (username like &#x27;%admin%&#x27; or username like &#x27;lisi%&#x27;) or enable = 1</span></span><br><span class=\"line\"><span class=\"comment\"> * Criteria criteria = CustomCriteria.or()</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .eq(true, &quot;enable&quot;, 1)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .build();</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.复合关系：</span></span><br><span class=\"line\"><span class=\"comment\"> * Criteria criteria1 = CustomCriteria.and()</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .eq(true, &quot;enable&quot;, 1)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .build();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * Criteria criteria2 = CustomCriteria.or()</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .eq(true, &quot;enable&quot;, 1)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .build();</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Criteria criteria = criteria1.and(criteria2);  // or： criteria1.or(criteria2);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.复杂查询建议直接使用 sql 进行查询，可以使用  BaseR2dbcRepository 中的 execSqlToMono 和 execSqlToFlux</span></span><br><span class=\"line\"><span class=\"comment\"> * 示例：</span></span><br><span class=\"line\"><span class=\"comment\"> *  public Mono&lt;TestOrder&gt; getOne(String orderId) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        String sql = &quot;select id, order_id from test_order where order_id = :orderId&quot;;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        return testOrderRepository.execSqlToMono(sql, Map.of(&quot;orderId&quot;, orderId), (row, rowMetadata) -&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            final TestOrder testOrder = new TestOrder();</span></span><br><span class=\"line\"><span class=\"comment\">            testOrder.setId(row.get(&quot;id&quot;, Long.class));</span></span><br><span class=\"line\"><span class=\"comment\">            testOrder.setOrderId(row.get(&quot;order_id&quot;, String.class));</span></span><br><span class=\"line\"><span class=\"comment\">            return testOrder;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 说明：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.eq(true, &quot;enable&quot;, 1)：第一个参数为真时当前条件加入查询，默认为真</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.支持条件方法详见代码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"新增\">新增</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>R2dbc提供的<code>&lt;S extends T&gt; Mono&lt;S&gt; save(S entity);</code>方法，要求<code>table</code>必须含有主键，其根据实体类中主键是否被填充来判断是新增还是修改操作，如果我们是自定义主键，而非数据库自动填充主键，此时就不能使用<code>save</code>方法新增记录，解决方法是在业务<code>Repository</code>中创建一个新增方法，比如：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实体类在进行新增时会判断主键是否填充，如果没有填充就认为是新数据，采取真正的新增操作，主键需要数据库来自动填充；</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果主键存在值则认为是旧数据则调用更新操作。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于自定义主键的情况，可以使用如下方式进行新增对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象形式传参：:#&#123;#对象名.字段名&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * 字段传参：:字段名(<span class=\"doctag\">@param</span>定义)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Modifying</span></span><br><span class=\"line\"><span class=\"meta\">@Query(&quot;insert into sys_user (id,username,password,enable) values (:#&#123;#sysUser.id&#125;,:#&#123;#sysUser.username&#125;,:#&#123;#sysUser.password&#125;,:#&#123;#sysUser.enable&#125;)&quot;)</span></span><br><span class=\"line\">Mono&lt;Integer&gt; <span class=\"title function_\">addSysUser</span><span class=\"params\">(SysUser sysUser)</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"事务\">事务</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>注解式事务</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/tx&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Mono&lt;Integer&gt; <span class=\"title function_\">tx</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">SysUser</span> <span class=\"variable\">sysUser</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SysUser</span>();</span><br><span class=\"line\">    sysUser.setId(UUID.randomUUID().toString());</span><br><span class=\"line\">    sysUser.setUsername(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    sysUser.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    sysUser.setEnable(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 主键重复</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sysUserRepository.addSysUser(sysUser).then(sysUserRepository.addSysUser(sysUser));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>编程式事务</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> TransactionalOperator transactionalOperator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/tx2&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Mono&lt;Integer&gt; <span class=\"title function_\">tx2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">SysUser</span> <span class=\"variable\">sysUser</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SysUser</span>();</span><br><span class=\"line\">    sysUser.setId(UUID.randomUUID().toString());</span><br><span class=\"line\">    sysUser.setUsername(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    sysUser.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    sysUser.setEnable(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 主键重复</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sysUserRepository.addSysUser(sysUser).then(sysUserRepository.addSysUser(sysUser))</span><br><span class=\"line\">            .as(transactionalOperator::transactional);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多数据源\">多数据源</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>application.yaml</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"comment\">#r2dbc mysql</span></span><br><span class=\"line\">  <span class=\"attr\">r2dbc:</span></span><br><span class=\"line\">    <span class=\"attr\">one:</span></span><br><span class=\"line\">      <span class=\"comment\">#url: r2dbc:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class=\"line\">      <span class=\"comment\"># 开启代理，目的是打印sql，生产环境不建议，http://r2dbc.io/r2dbc-proxy/docs/current/docs/html/</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">r2dbc:proxy:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8&amp;proxyListener=com.example.r2dbc.LogExecutionListener</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">testUser</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">initial-size:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"number\">20</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle-time:</span> <span class=\"string\">30m</span></span><br><span class=\"line\">    <span class=\"attr\">two:</span></span><br><span class=\"line\">      <span class=\"comment\">#url: r2dbc:mysql://mysql.test.db:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">r2dbc:proxy:mysql://mysql.test.db:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;proxyListener=com.example.r2dbc.LogExecutionListener</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">testUser</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">initial-size:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"number\">20</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle-time:</span> <span class=\"string\">30m</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>one:配置类</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.r2dbc.SimpleBaseR2dbcRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.ConnectionFactories;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.ConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.ConnectionFactoryOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.Option;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Primary;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.core.R2dbcEntityTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.r2dbc.connection.R2dbcTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.ReactiveTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.reactive.TransactionalOperator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.support.DefaultTransactionDefinition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">// 这里必须指定 basePackages，否则 repositoryBaseClass 指定的实现类不能被关联到 各个 Repository 中</span></span><br><span class=\"line\"><span class=\"meta\">@EnableR2dbcRepositories(basePackages = &quot;com.example.mysql.one.repository&quot;, repositoryBaseClass = SimpleBaseR2dbcRepository.class, entityOperationsRef = &quot;oneR2dbcEntityTemplate&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OneReactiveR2dbcConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;oneR2dbcProperties&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.r2dbc.one&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R2dbcProperties <span class=\"title function_\">oneR2dbcProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">R2dbcProperties</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;oneR2dbcEntityTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R2dbcEntityTemplate <span class=\"title function_\">oneR2dbcEntityTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;oneR2dbcEntityTemplate&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">R2dbcEntityTemplate</span>(oneConnectionFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;oneConnectionFactory&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConnectionFactory <span class=\"title function_\">oneConnectionFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;oneConnectionFactory&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">R2dbcProperties</span> <span class=\"variable\">r2dbcProperties</span> <span class=\"operator\">=</span> oneR2dbcProperties();</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactoryOptions</span> <span class=\"variable\">urlOptions</span> <span class=\"operator\">=</span> ConnectionFactoryOptions.parse(r2dbcProperties.getUrl());</span><br><span class=\"line\">        ConnectionFactoryOptions.<span class=\"type\">Builder</span> <span class=\"variable\">optionsBuilder</span> <span class=\"operator\">=</span> urlOptions.mutate();</span><br><span class=\"line\"></span><br><span class=\"line\">        configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.USER, r2dbcProperties::getUsername,</span><br><span class=\"line\">                StringUtils::hasText);</span><br><span class=\"line\">        configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.PASSWORD, r2dbcProperties::getPassword,</span><br><span class=\"line\">                StringUtils::hasText);</span><br><span class=\"line\">        configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.DATABASE,</span><br><span class=\"line\">                () -&gt; determineDatabaseName(r2dbcProperties), StringUtils::hasText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r2dbcProperties.getProperties() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            r2dbcProperties.getProperties()</span><br><span class=\"line\">                    .forEach((key, value) -&gt; optionsBuilder.option(Option.valueOf(key), value));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">ConnectionFactoryOptions</span> <span class=\"variable\">options</span> <span class=\"operator\">=</span> optionsBuilder.build();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConnectionFactories.get(options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;oneR2dbcTransactionManager&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ReactiveTransactionManager <span class=\"title function_\">oneR2dbcTransactionManager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">R2dbcTransactionManager</span>(oneConnectionFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;oneTransactionalOperator&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TransactionalOperator <span class=\"title function_\">oneTransactionalOperator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DefaultTransactionDefinition</span> <span class=\"variable\">transactionDefinition</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultTransactionDefinition</span>();</span><br><span class=\"line\">        transactionDefinition.setName(<span class=\"string\">&quot;oneTransactionalOperator&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 这是默认行为</span></span><br><span class=\"line\">        transactionDefinition.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TransactionalOperator.create(oneR2dbcTransactionManager(), transactionDefinition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">CharSequence</span>&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">configureIf</span><span class=\"params\">(ConnectionFactoryOptions.Builder optionsBuilder,</span></span><br><span class=\"line\"><span class=\"params\">                                                      ConnectionFactoryOptions originalOptions, Option&lt;T&gt; option, Supplier&lt;T&gt; valueSupplier,</span></span><br><span class=\"line\"><span class=\"params\">                                                      Predicate&lt;T&gt; setIf)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (originalOptions.hasOption(option)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> valueSupplier.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (setIf.test(value)) &#123;</span><br><span class=\"line\">            optionsBuilder.option(option, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">determineDatabaseName</span><span class=\"params\">(R2dbcProperties properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (properties.isGenerateUniqueName()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> properties.determineUniqueName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(properties.getName())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> properties.getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>two:配置类</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.r2dbc.SimpleBaseR2dbcRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.ConnectionFactories;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.ConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.ConnectionFactoryOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.Option;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.core.R2dbcEntityTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.r2dbc.connection.R2dbcTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.ReactiveTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.reactive.TransactionalOperator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.support.DefaultTransactionDefinition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">// 这里必须指定 basePackages，否则 repositoryBaseClass 指定的实现类不能被关联到 各个 Repository 中</span></span><br><span class=\"line\"><span class=\"meta\">@EnableR2dbcRepositories(basePackages = &quot;com.example.mysql.two.repository&quot;, repositoryBaseClass = SimpleBaseR2dbcRepository.class, entityOperationsRef = &quot;twoR2dbcEntityTemplate&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TwoReactiveR2dbcConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;twoR2dbcProperties&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.r2dbc.two&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R2dbcProperties <span class=\"title function_\">twoR2dbcProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">R2dbcProperties</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;twoR2dbcEntityTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R2dbcEntityTemplate <span class=\"title function_\">twoR2dbcEntityTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;twoR2dbcEntityTemplate&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">R2dbcEntityTemplate</span>(twoConnectionFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;twoConnectionFactory&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConnectionFactory <span class=\"title function_\">twoConnectionFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;twoConnectionFactory&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">R2dbcProperties</span> <span class=\"variable\">r2dbcProperties</span> <span class=\"operator\">=</span> twoR2dbcProperties();</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactoryOptions</span> <span class=\"variable\">urlOptions</span> <span class=\"operator\">=</span> ConnectionFactoryOptions.parse(r2dbcProperties.getUrl());</span><br><span class=\"line\">        ConnectionFactoryOptions.<span class=\"type\">Builder</span> <span class=\"variable\">optionsBuilder</span> <span class=\"operator\">=</span> urlOptions.mutate();</span><br><span class=\"line\"></span><br><span class=\"line\">        configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.USER, r2dbcProperties::getUsername,</span><br><span class=\"line\">                StringUtils::hasText);</span><br><span class=\"line\">        configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.PASSWORD, r2dbcProperties::getPassword,</span><br><span class=\"line\">                StringUtils::hasText);</span><br><span class=\"line\">        configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.DATABASE,</span><br><span class=\"line\">                () -&gt; determineDatabaseName(r2dbcProperties), StringUtils::hasText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r2dbcProperties.getProperties() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            r2dbcProperties.getProperties()</span><br><span class=\"line\">                    .forEach((key, value) -&gt; optionsBuilder.option(Option.valueOf(key), value));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">ConnectionFactoryOptions</span> <span class=\"variable\">options</span> <span class=\"operator\">=</span> optionsBuilder.build();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConnectionFactories.get(options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;twoR2dbcTransactionManager&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ReactiveTransactionManager <span class=\"title function_\">twoR2dbcTransactionManager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">R2dbcTransactionManager</span>(twoConnectionFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;twoTransactionalOperator&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TransactionalOperator <span class=\"title function_\">twoTransactionalOperator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DefaultTransactionDefinition</span> <span class=\"variable\">transactionDefinition</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultTransactionDefinition</span>();</span><br><span class=\"line\">        transactionDefinition.setName(<span class=\"string\">&quot;twoTransactionalOperator&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 这是默认行为</span></span><br><span class=\"line\">        transactionDefinition.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TransactionalOperator.create(twoR2dbcTransactionManager(), transactionDefinition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">CharSequence</span>&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">configureIf</span><span class=\"params\">(ConnectionFactoryOptions.Builder optionsBuilder,</span></span><br><span class=\"line\"><span class=\"params\">                                                      ConnectionFactoryOptions originalOptions, Option&lt;T&gt; option, Supplier&lt;T&gt; valueSupplier,</span></span><br><span class=\"line\"><span class=\"params\">                                                      Predicate&lt;T&gt; setIf)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (originalOptions.hasOption(option)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> valueSupplier.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (setIf.test(value)) &#123;</span><br><span class=\"line\">            optionsBuilder.option(option, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">determineDatabaseName</span><span class=\"params\">(R2dbcProperties properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (properties.isGenerateUniqueName()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> properties.determineUniqueName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(properties.getName())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> properties.getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>主要注意如下几点：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">基于配置文件中数据源的信息创建各自的 <code>R2dbcEntityTemplate</code>，<code>R2dbcTransactionManager</code></li>\n<li class=\"lvl-6\"><code>basePackages</code> 指定不同的扫描路径</li>\n<li class=\"lvl-6\"><code>entityOperationsRef</code> 指定各自的 <code>R2dbcEntityTemplate</code></li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>完整代码参考 <a href=\"https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/webflux-mysql-multi-demo\">Github代码地址</a></p>\n</li>\n</ul>\n","content_text":"摘要 本文聊聊SpringBoot R2dbc 本文基于SpringBoot-3.1.2 Github代码地址 web-flux-mysql-redis-demo,webflux-mysql-multi-demo 打印SQL 方式一: 开启 debug 日志 1234# 可以打印sql，但不能打印参数值logging: level: org.springframework.r2dbc: DEBUG 方式二: 使用 r2dbc-proxy 1234&lt;dependency&gt; &lt;groupId&gt;io.r2dbc&lt;/groupId&gt; &lt;artifactId&gt;r2dbc-proxy&lt;/artifactId&gt;&lt;/dependency&gt; 12345spring: r2dbc: # url: r2dbc:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8 # 开启代理，目的是打印sql，生产环境不建议，http://r2dbc.io/r2dbc-proxy/docs/current/docs/html/ url: r2dbc:proxy:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8&amp;proxyListener=com.example.r2dbc.LogExecutionListener 123456789101112131415161718192021222324package com.example.r2dbc;import io.r2dbc.proxy.core.QueryExecutionInfo;import io.r2dbc.proxy.listener.ProxyMethodExecutionListener;import io.r2dbc.proxy.support.QueryExecutionInfoFormatter;import lombok.extern.slf4j.Slf4j;@Slf4jpublic class LogExecutionListener implements ProxyMethodExecutionListener &#123; private final QueryExecutionInfoFormatter queryFormatter = new QueryExecutionInfoFormatter() .newLine() .showTime().showType().showSuccess().showTransaction().showBatchSize().showConnection().showThread() .newLine() .showQuery() .newLine() .showBindingsSize().showBindings() .newLine(); @Override public void afterExecuteOnStatement(QueryExecutionInfo queryExecutionInfo) &#123; String stringBuilder = this.queryFormatter.format(queryExecutionInfo); log.info(stringBuilder); &#125;&#125; 条件查询 springboot为我们提供了几个Repository，如R2dbcRepository、ReactiveCrudRepository、ReactiveSortingRepository等等，我们自己的Repository通过继承这些父接口，可以获得相应的CURD的能力，但是其没有对条件查询提供支持，此时可以通过自定义Repository接口及其实现类的方式实现扩展 自定义Repository接口 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package com.example.r2dbc;import io.r2dbc.spi.Row;import io.r2dbc.spi.RowMetadata;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.data.r2dbc.core.R2dbcEntityOperations;import org.springframework.data.r2dbc.repository.R2dbcRepository;import org.springframework.data.relational.core.query.Criteria;import org.springframework.data.relational.core.query.Query;import org.springframework.data.repository.NoRepositoryBean;import org.springframework.r2dbc.core.DatabaseClient;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;import java.io.Serializable;import java.util.Map;import java.util.function.BiFunction;@NoRepositoryBean //接口不参与jpa的代理public interface BaseR2dbcRepository&lt;T, ID extends Serializable&gt; extends R2dbcRepository&lt;T, ID&gt; &#123; R2dbcEntityOperations getR2dbcEntityOperations(); /** * 分页查询 */ Mono&lt;Page&lt;T&gt;&gt; pageByQuery(Criteria criteria, Pageable pageable); Mono&lt;Long&gt; countByQuery(Criteria criteria); Flux&lt;T&gt; findByQuery(Criteria criteria); Flux&lt;T&gt; findByQuery(Criteria criteria, Sort sort); Flux&lt;T&gt; findByQuery(Criteria criteria, int limit); Flux&lt;T&gt; findByQuery(Criteria criteria, Sort sort, int limit); Flux&lt;T&gt; findByQuery(Query query); Mono&lt;T&gt; findOneByQuery(Query query); Mono&lt;T&gt; findOneByQuery(Criteria criteria); default &lt;R&gt; Mono&lt;R&gt; execSqlToMono(String sql, Map&lt;String, Object&gt; bindMap, BiFunction&lt;Row, RowMetadata, R&gt; mappingFunction) &#123; DatabaseClient.GenericExecuteSpec genericExecuteSpec = getR2dbcEntityOperations().getDatabaseClient().sql(sql); if (bindMap != null) &#123; for (Map.Entry&lt;String, Object&gt; entry : bindMap.entrySet()) &#123; genericExecuteSpec = genericExecuteSpec.bind(entry.getKey(), entry.getValue()); &#125; &#125; return genericExecuteSpec.map(mappingFunction).first(); &#125; default &lt;R&gt; Flux&lt;R&gt; execSqlToFlux(String sql, Map&lt;String, Object&gt; bindMap, BiFunction&lt;Row, RowMetadata, R&gt; mappingFunction) &#123; DatabaseClient.GenericExecuteSpec genericExecuteSpec = getR2dbcEntityOperations().getDatabaseClient().sql(sql); if (bindMap != null) &#123; for (Map.Entry&lt;String, Object&gt; entry : bindMap.entrySet()) &#123; genericExecuteSpec = genericExecuteSpec.bind(entry.getKey(), entry.getValue()); &#125; &#125; return genericExecuteSpec.map(mappingFunction).all(); &#125;&#125; 自定义Repository接口的实现类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192package com.example.r2dbc;import lombok.extern.slf4j.Slf4j;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.data.r2dbc.convert.R2dbcConverter;import org.springframework.data.r2dbc.core.R2dbcEntityOperations;import org.springframework.data.r2dbc.repository.support.SimpleR2dbcRepository;import org.springframework.data.relational.core.query.Criteria;import org.springframework.data.relational.core.query.Query;import org.springframework.data.relational.repository.query.RelationalEntityInformation;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;import java.io.Serializable;@Slf4jpublic class SimpleBaseR2dbcRepository&lt;T, ID extends Serializable&gt; extends SimpleR2dbcRepository&lt;T, ID&gt; implements BaseR2dbcRepository&lt;T, ID&gt; &#123; private final R2dbcEntityOperations r2dbcEntityOperations; private final RelationalEntityInformation&lt;T, ID&gt; entity; public SimpleBaseR2dbcRepository(RelationalEntityInformation&lt;T, ID&gt; entity, R2dbcEntityOperations entityOperations, R2dbcConverter converter) &#123; super(entity, entityOperations, converter); this.r2dbcEntityOperations = entityOperations; this.entity = entity; log.info(&quot;SimpleBaseR2dbcRepository&quot;); &#125; @Override public R2dbcEntityOperations getR2dbcEntityOperations() &#123; return r2dbcEntityOperations; &#125; @Override public Mono&lt;Page&lt;T&gt;&gt; pageByQuery(Criteria criteria, Pageable pageable) &#123; final Query query = Query.query(criteria); return r2dbcEntityOperations.count(query, entity.getJavaType()).flatMap(total -&gt; r2dbcEntityOperations.select(query.with(pageable), entity.getJavaType()) .collectList() .map(list -&gt; new PageImpl&lt;&gt;(list, pageable, total))); &#125; @Override public Mono&lt;Long&gt; countByQuery(Criteria criteria) &#123; final Query query = Query.query(criteria); return r2dbcEntityOperations.count(query, entity.getJavaType()); &#125; @Override public Flux&lt;T&gt; findByQuery(Criteria criteria) &#123; final Query query = Query.query(criteria); return r2dbcEntityOperations.select(query, entity.getJavaType()); &#125; @Override public Flux&lt;T&gt; findByQuery(Criteria criteria, Sort sort) &#123; final Query query = Query.query(criteria).sort(sort); return r2dbcEntityOperations.select(query, entity.getJavaType()); &#125; @Override public Flux&lt;T&gt; findByQuery(Criteria criteria, int limit) &#123; final Query query = Query.query(criteria).limit(limit); return r2dbcEntityOperations.select(query, entity.getJavaType()); &#125; @Override public Flux&lt;T&gt; findByQuery(Criteria criteria, Sort sort, int limit) &#123; final Query query = Query.query(criteria).sort(sort).limit(limit); return r2dbcEntityOperations.select(query, entity.getJavaType()); &#125; @Override public Flux&lt;T&gt; findByQuery(Query query) &#123; return r2dbcEntityOperations.select(query, entity.getJavaType()); &#125; @Override public Mono&lt;T&gt; findOneByQuery(Query query) &#123; return r2dbcEntityOperations.selectOne(query, entity.getJavaType()); &#125; @Override public Mono&lt;T&gt; findOneByQuery(Criteria criteria) &#123; final Query query = Query.query(criteria); return r2dbcEntityOperations.selectOne(query, entity.getJavaType()); &#125;&#125; 我们需要告知springboot使用我们自定义的Repository 1234567891011121314package com.example.config;import com.example.r2dbc.SimpleBaseR2dbcRepository;import lombok.extern.slf4j.Slf4j;import org.springframework.context.annotation.Configuration;import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;@Slf4j@Configuration// 这里必须指定 basePackages，否则 repositoryBaseClass 指定的实现类不能被关联到 各个 Repository 中@EnableR2dbcRepositories(basePackages = &quot;com.example.mysql&quot;, repositoryBaseClass = SimpleBaseR2dbcRepository.class)public class ReactiveR2dbcConfig &#123;&#125; 此时我们在创建业务Repository时就可以继承我们自定义的Repository了 123public interface SysUserRepository extends BaseR2dbcRepository&lt;SysUser, String&gt; &#123;&#125; 可以看到我们自定义的Repository中，主要是通过Criteria来提供查询条件的封装，我了便于创建Criteria对象，这里提供了一个工具类 CustomCriteria，其主要功能是根据条件来拼接查询条件，代码比较多，就不在这里粘贴了，自行去Github代码地址中查看吧。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * &lt;h1&gt;CustomCriteria&lt;/h1&gt; * Criteria 构造器 * Created by hanqf on 2023/9/4 11:47. * * * 示例： * 1.and 关系: select * from tbl_table where (username like &#x27;%admin%&#x27; or username like &#x27;lisi%&#x27;) and enable = 1 * Criteria criteria = CustomCriteria.and() * .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;) * .eq(true, &quot;enable&quot;, 1) * .build(); * * 2.or 关系: select * from tbl_table where (username like &#x27;%admin%&#x27; or username like &#x27;lisi%&#x27;) or enable = 1 * Criteria criteria = CustomCriteria.or() * .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;) * .eq(true, &quot;enable&quot;, 1) * .build(); * * 3.复合关系： * Criteria criteria1 = CustomCriteria.and() * .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;) * .eq(true, &quot;enable&quot;, 1) * .build(); * Criteria criteria2 = CustomCriteria.or() * .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;) * .eq(true, &quot;enable&quot;, 1) * .build(); * * Criteria criteria = criteria1.and(criteria2); // or： criteria1.or(criteria2); * * 4.复杂查询建议直接使用 sql 进行查询，可以使用 BaseR2dbcRepository 中的 execSqlToMono 和 execSqlToFlux * 示例： * public Mono&lt;TestOrder&gt; getOne(String orderId) &#123; String sql = &quot;select id, order_id from test_order where order_id = :orderId&quot;; return testOrderRepository.execSqlToMono(sql, Map.of(&quot;orderId&quot;, orderId), (row, rowMetadata) -&gt; &#123; final TestOrder testOrder = new TestOrder(); testOrder.setId(row.get(&quot;id&quot;, Long.class)); testOrder.setOrderId(row.get(&quot;order_id&quot;, String.class)); return testOrder; &#125;); &#125; * * * 说明： * 1.eq(true, &quot;enable&quot;, 1)：第一个参数为真时当前条件加入查询，默认为真 * 2.支持条件方法详见代码 */ 新增 R2dbc提供的&lt;S extends T&gt; Mono&lt;S&gt; save(S entity);方法，要求table必须含有主键，其根据实体类中主键是否被填充来判断是新增还是修改操作，如果我们是自定义主键，而非数据库自动填充主键，此时就不能使用save方法新增记录，解决方法是在业务Repository中创建一个新增方法，比如： 1234567891011/** * 实体类在进行新增时会判断主键是否填充，如果没有填充就认为是新数据，采取真正的新增操作，主键需要数据库来自动填充； * 如果主键存在值则认为是旧数据则调用更新操作。 * 对于自定义主键的情况，可以使用如下方式进行新增对象 * * 对象形式传参：:#&#123;#对象名.字段名&#125; * 字段传参：:字段名(@param定义)*/@Modifying@Query(&quot;insert into sys_user (id,username,password,enable) values (:#&#123;#sysUser.id&#125;,:#&#123;#sysUser.username&#125;,:#&#123;#sysUser.password&#125;,:#&#123;#sysUser.enable&#125;)&quot;)Mono&lt;Integer&gt; addSysUser(SysUser sysUser); 事务 注解式事务 1234567891011@Transactional@RequestMapping(&quot;/tx&quot;)public Mono&lt;Integer&gt; tx() &#123; final SysUser sysUser = new SysUser(); sysUser.setId(UUID.randomUUID().toString()); sysUser.setUsername(&quot;test&quot;); sysUser.setPassword(&quot;123456&quot;); sysUser.setEnable(true); // 主键重复 return sysUserRepository.addSysUser(sysUser).then(sysUserRepository.addSysUser(sysUser));&#125; 编程式事务 1234567891011121314@Autowiredprivate TransactionalOperator transactionalOperator;@RequestMapping(&quot;/tx2&quot;)public Mono&lt;Integer&gt; tx2() &#123; final SysUser sysUser = new SysUser(); sysUser.setId(UUID.randomUUID().toString()); sysUser.setUsername(&quot;test&quot;); sysUser.setPassword(&quot;123456&quot;); sysUser.setEnable(true); // 主键重复 return sysUserRepository.addSysUser(sysUser).then(sysUserRepository.addSysUser(sysUser)) .as(transactionalOperator::transactional);&#125; 多数据源 application.yaml 123456789101112131415161718192021222324spring: #r2dbc mysql r2dbc: one: #url: r2dbc:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8 # 开启代理，目的是打印sql，生产环境不建议，http://r2dbc.io/r2dbc-proxy/docs/current/docs/html/ url: r2dbc:proxy:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8&amp;proxyListener=com.example.r2dbc.LogExecutionListener username: testUser password: 123456 pool: enabled: true initial-size: 5 max-size: 20 max-idle-time: 30m two: #url: r2dbc:mysql://mysql.test.db:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8 url: r2dbc:proxy:mysql://mysql.test.db:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;proxyListener=com.example.r2dbc.LogExecutionListener username: testUser password: 123456 pool: enabled: true initial-size: 5 max-size: 20 max-idle-time: 30m one:配置类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108package com.example.config;import com.example.r2dbc.SimpleBaseR2dbcRepository;import io.r2dbc.spi.ConnectionFactories;import io.r2dbc.spi.ConnectionFactory;import io.r2dbc.spi.ConnectionFactoryOptions;import io.r2dbc.spi.Option;import lombok.extern.slf4j.Slf4j;import org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;import org.springframework.r2dbc.connection.R2dbcTransactionManager;import org.springframework.transaction.ReactiveTransactionManager;import org.springframework.transaction.TransactionDefinition;import org.springframework.transaction.reactive.TransactionalOperator;import org.springframework.transaction.support.DefaultTransactionDefinition;import org.springframework.util.StringUtils;import java.util.function.Predicate;import java.util.function.Supplier;@Slf4j@Configuration// 这里必须指定 basePackages，否则 repositoryBaseClass 指定的实现类不能被关联到 各个 Repository 中@EnableR2dbcRepositories(basePackages = &quot;com.example.mysql.one.repository&quot;, repositoryBaseClass = SimpleBaseR2dbcRepository.class, entityOperationsRef = &quot;oneR2dbcEntityTemplate&quot;)public class OneReactiveR2dbcConfig &#123; @Primary @Bean(&quot;oneR2dbcProperties&quot;) @ConfigurationProperties(prefix = &quot;spring.r2dbc.one&quot;) public R2dbcProperties oneR2dbcProperties() &#123; return new R2dbcProperties(); &#125; @Primary @Bean(&quot;oneR2dbcEntityTemplate&quot;) public R2dbcEntityTemplate oneR2dbcEntityTemplate() &#123; log.info(&quot;oneR2dbcEntityTemplate&quot;); return new R2dbcEntityTemplate(oneConnectionFactory()); &#125; @Primary @Bean(&quot;oneConnectionFactory&quot;) public ConnectionFactory oneConnectionFactory() &#123; log.info(&quot;oneConnectionFactory&quot;); R2dbcProperties r2dbcProperties = oneR2dbcProperties(); ConnectionFactoryOptions urlOptions = ConnectionFactoryOptions.parse(r2dbcProperties.getUrl()); ConnectionFactoryOptions.Builder optionsBuilder = urlOptions.mutate(); configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.USER, r2dbcProperties::getUsername, StringUtils::hasText); configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.PASSWORD, r2dbcProperties::getPassword, StringUtils::hasText); configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.DATABASE, () -&gt; determineDatabaseName(r2dbcProperties), StringUtils::hasText); if (r2dbcProperties.getProperties() != null) &#123; r2dbcProperties.getProperties() .forEach((key, value) -&gt; optionsBuilder.option(Option.valueOf(key), value)); &#125; final ConnectionFactoryOptions options = optionsBuilder.build(); return ConnectionFactories.get(options); &#125; @Primary @Bean(&quot;oneR2dbcTransactionManager&quot;) public ReactiveTransactionManager oneR2dbcTransactionManager() &#123; return new R2dbcTransactionManager(oneConnectionFactory()); &#125; @Primary @Bean(&quot;oneTransactionalOperator&quot;) public TransactionalOperator oneTransactionalOperator() &#123; DefaultTransactionDefinition transactionDefinition = new DefaultTransactionDefinition(); transactionDefinition.setName(&quot;oneTransactionalOperator&quot;); // 这是默认行为 transactionDefinition.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED); return TransactionalOperator.create(oneR2dbcTransactionManager(), transactionDefinition); &#125; private &lt;T extends CharSequence&gt; void configureIf(ConnectionFactoryOptions.Builder optionsBuilder, ConnectionFactoryOptions originalOptions, Option&lt;T&gt; option, Supplier&lt;T&gt; valueSupplier, Predicate&lt;T&gt; setIf) &#123; if (originalOptions.hasOption(option)) &#123; return; &#125; T value = valueSupplier.get(); if (setIf.test(value)) &#123; optionsBuilder.option(option, value); &#125; &#125; private String determineDatabaseName(R2dbcProperties properties) &#123; if (properties.isGenerateUniqueName()) &#123; return properties.determineUniqueName(); &#125; if (StringUtils.hasLength(properties.getName())) &#123; return properties.getName(); &#125; return null; &#125;&#125; two:配置类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101package com.example.config;import com.example.r2dbc.SimpleBaseR2dbcRepository;import io.r2dbc.spi.ConnectionFactories;import io.r2dbc.spi.ConnectionFactory;import io.r2dbc.spi.ConnectionFactoryOptions;import io.r2dbc.spi.Option;import lombok.extern.slf4j.Slf4j;import org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;import org.springframework.r2dbc.connection.R2dbcTransactionManager;import org.springframework.transaction.ReactiveTransactionManager;import org.springframework.transaction.TransactionDefinition;import org.springframework.transaction.reactive.TransactionalOperator;import org.springframework.transaction.support.DefaultTransactionDefinition;import org.springframework.util.StringUtils;import java.util.function.Predicate;import java.util.function.Supplier;@Slf4j@Configuration// 这里必须指定 basePackages，否则 repositoryBaseClass 指定的实现类不能被关联到 各个 Repository 中@EnableR2dbcRepositories(basePackages = &quot;com.example.mysql.two.repository&quot;, repositoryBaseClass = SimpleBaseR2dbcRepository.class, entityOperationsRef = &quot;twoR2dbcEntityTemplate&quot;)public class TwoReactiveR2dbcConfig &#123; @Bean(&quot;twoR2dbcProperties&quot;) @ConfigurationProperties(prefix = &quot;spring.r2dbc.two&quot;) public R2dbcProperties twoR2dbcProperties() &#123; return new R2dbcProperties(); &#125; @Bean(&quot;twoR2dbcEntityTemplate&quot;) public R2dbcEntityTemplate twoR2dbcEntityTemplate() &#123; log.info(&quot;twoR2dbcEntityTemplate&quot;); return new R2dbcEntityTemplate(twoConnectionFactory()); &#125; @Bean(&quot;twoConnectionFactory&quot;) public ConnectionFactory twoConnectionFactory() &#123; log.info(&quot;twoConnectionFactory&quot;); R2dbcProperties r2dbcProperties = twoR2dbcProperties(); ConnectionFactoryOptions urlOptions = ConnectionFactoryOptions.parse(r2dbcProperties.getUrl()); ConnectionFactoryOptions.Builder optionsBuilder = urlOptions.mutate(); configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.USER, r2dbcProperties::getUsername, StringUtils::hasText); configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.PASSWORD, r2dbcProperties::getPassword, StringUtils::hasText); configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.DATABASE, () -&gt; determineDatabaseName(r2dbcProperties), StringUtils::hasText); if (r2dbcProperties.getProperties() != null) &#123; r2dbcProperties.getProperties() .forEach((key, value) -&gt; optionsBuilder.option(Option.valueOf(key), value)); &#125; final ConnectionFactoryOptions options = optionsBuilder.build(); return ConnectionFactories.get(options); &#125; @Bean(&quot;twoR2dbcTransactionManager&quot;) public ReactiveTransactionManager twoR2dbcTransactionManager() &#123; return new R2dbcTransactionManager(twoConnectionFactory()); &#125; @Bean(&quot;twoTransactionalOperator&quot;) public TransactionalOperator twoTransactionalOperator() &#123; DefaultTransactionDefinition transactionDefinition = new DefaultTransactionDefinition(); transactionDefinition.setName(&quot;twoTransactionalOperator&quot;); // 这是默认行为 transactionDefinition.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED); return TransactionalOperator.create(twoR2dbcTransactionManager(), transactionDefinition); &#125; private &lt;T extends CharSequence&gt; void configureIf(ConnectionFactoryOptions.Builder optionsBuilder, ConnectionFactoryOptions originalOptions, Option&lt;T&gt; option, Supplier&lt;T&gt; valueSupplier, Predicate&lt;T&gt; setIf) &#123; if (originalOptions.hasOption(option)) &#123; return; &#125; T value = valueSupplier.get(); if (setIf.test(value)) &#123; optionsBuilder.option(option, value); &#125; &#125; private String determineDatabaseName(R2dbcProperties properties) &#123; if (properties.isGenerateUniqueName()) &#123; return properties.determineUniqueName(); &#125; if (StringUtils.hasLength(properties.getName())) &#123; return properties.getName(); &#125; return null; &#125;&#125; 主要注意如下几点： 基于配置文件中数据源的信息创建各自的 R2dbcEntityTemplate，R2dbcTransactionManager basePackages 指定不同的扫描路径 entityOperationsRef 指定各自的 R2dbcEntityTemplate 完整代码参考 Github代码地址","summary":"摘要 本文聊聊SpringBoot R2dbc 本文基于SpringBoot-3.1.2 Github代码地址 web-flux-mysql-redis-demo,webflux-mysql-multi-demo","date_published":"2023-09-05T14:30:05.000Z","tags":["技术","springboot","r2dbc","java"]}]}