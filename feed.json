{"version":"https://jsonfeed.org/version/1","name":"飘逸峰的博客","home_page_url":"https://blog.hanqunfeng.com","feed_url":"https://blog.hanqunfeng.com/feed.json","author":{"name":"飘逸峰"},"items":[{"id":"https://blog.hanqunfeng.com/2024/03/26/ansible-role-publish/","url":"https://blog.hanqunfeng.com/2024/03/26/ansible-role-publish/","title":"Ansible Role Publish To Galaxy","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍如何将Ansible Role发布到Galaxy。</p>\n</li>\n<li class=\"lvl-2\">\n<p>关于Ansible的介绍可以参看 <a href=\"/2024/03/19/linux-command15-ansible/\" title=\"Linux常用命令--Ansible\">Linux常用命令--Ansible</a></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"创建Role\">创建Role</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在当前目录下创建一个名称为<code>mongodb-install</code>的role，实际上就是创建一个名称为<code>mongodb-install</code>的目录结构</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-galaxy init mongodb-install</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建完成后，目录结构如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb-install</span><br><span class=\"line\">├── defaults</span><br><span class=\"line\">│  └── main.yml</span><br><span class=\"line\">├── files</span><br><span class=\"line\">├── handlers</span><br><span class=\"line\">│  └── main.yml</span><br><span class=\"line\">├── meta</span><br><span class=\"line\">│  └── main.yml</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── tasks</span><br><span class=\"line\">│  └── main.yml</span><br><span class=\"line\">├── templates</span><br><span class=\"line\">├── tests</span><br><span class=\"line\">│  ├── inventory</span><br><span class=\"line\">│  └── test.yml</span><br><span class=\"line\">└── vars</span><br><span class=\"line\">   └── main.yml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>编辑role，相关代码参考<a href=\"https://github.com/hanqunfeng/ansible-role-mongodb\">https://github.com/hanqunfeng/ansible-role-mongodb</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>这里我们要注意两个文件</p>\n</li>\n</ul>\n<blockquote>\n<p><code>README.md</code>: 这里面配置的是role的描述信息，其会显示在<code>文档</code>一栏中<br>\n<code>meta/main.yml</code>，这里面配置的是role的作者信息</p>\n</blockquote>\n<h2 id=\"上传Role到Github\">上传Role到Github</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> mongodb-install</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;init&quot;</span></span><br><span class=\"line\">git branch -M main</span><br><span class=\"line\">git remote add origin https://github.com/hanqunfeng/ansible-role-mongodb.git</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布Role到Galaxy\">发布Role到Galaxy</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>登录<a href=\"https://galaxy.ansible.com/\">https://galaxy.ansible.com/</a>，点击<code>登录</code>，使用Github账号登录。</p>\n</li>\n<li class=\"lvl-2\">\n<p>导入Role<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/w1UxvL.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>填写Role信息<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/OnIT3a.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>查看导入状态<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/7Dghla.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>搜索Role<br>\n此时我们在角色列表中搜索关键字<code>hanqunfeng</code>，就可以搜索到我们刚刚上传的那个role了<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/lx7rCg.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>点击进去我们就可以查看角色的详细信息了</p>\n</li>\n</ul>\n<h2 id=\"修改Role\">修改Role</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>修改了role信息后，重新上传到github即可</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果同时修改了<code>README.md</code>等role信息，可以在galaxy中重新上传即可<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/PVNRGz.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"安装Role\">安装Role</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">$ ansible-galaxy role install hanqunfeng.mongodb-install</span><br><span class=\"line\">Starting galaxy role install process</span><br><span class=\"line\">- downloading role <span class=\"string\">&#x27;mongodb-install&#x27;</span>, owned by hanqunfeng</span><br><span class=\"line\">- downloading role from https://github.com/hanqunfeng/ansible-role-mongodb/archive/main.tar.gz</span><br><span class=\"line\">- extracting hanqunfeng.mongodb-install to /Users/hanqf/.ansible/roles/hanqunfeng.mongodb-install</span><br><span class=\"line\">- hanqunfeng.mongodb-install (main) was installed successfully</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新安装</span></span><br><span class=\"line\">ansible-galaxy role install --force hanqunfeng.mongodb-install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看已安装的role</span></span><br><span class=\"line\">ansible-galaxy role list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除</span></span><br><span class=\"line\">$ ansible-galaxy role remove hanqunfeng.mongodb-install</span><br><span class=\"line\">- successfully removed hanqunfeng.mongodb-install</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用Role\">使用Role</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在<code>playbook</code>中引用role</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test-mongo</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">roles:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">hanqunfeng.mongodb-install</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>执行playbook</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i hosts playbook.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换默认的变量</span></span><br><span class=\"line\">ansible-playbook -i hosts --extra-vars <span class=\"string\">&quot;mongo_port=27019&quot;</span> --extra-vars <span class=\"string\">&quot;mongo_replica_set_name=rs1&quot;</span> playbook.yml</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布指定版本到Galaxy\">发布指定版本到Galaxy</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>给角色代码打tag</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建tag，名称为 v1.0.0</span></span><br><span class=\"line\">git tag -a v1.0.0 -m <span class=\"string\">&quot;v1.0.0&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 提交tag</span></span><br><span class=\"line\">git push origin v1.0.0</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在galaxy中重新上传，注意此时在要指定tag名称<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/sESeVk.png\" alt=\"\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>上传成功后，就可以在galaxy中查看到对应的版本了<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/R18rBY.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"下载指定版本的角色\">下载指定版本的角色</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意role和版本号之间用逗号隔开</span></span><br><span class=\"line\">$ ansible-galaxy role install hanqunfeng.mongodb-install,v1.0.0</span><br><span class=\"line\">Starting galaxy role install process</span><br><span class=\"line\">- downloading role <span class=\"string\">&#x27;mongodb-install&#x27;</span>, owned by hanqunfeng</span><br><span class=\"line\">- downloading role from https://github.com/hanqunfeng/ansible-role-mongodb/archive/v1.0.0.tar.gz</span><br><span class=\"line\">- extracting hanqunfeng.mongodb-install to /Users/hanqf/.ansible/roles/hanqunfeng.mongodb-install</span><br><span class=\"line\">- hanqunfeng.mongodb-install (v1.0.0) was installed successfully</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍如何将Ansible Role发布到Galaxy。 关于Ansible的介绍可以参看 Linux常用命令--Ansible 创建Role 在当前目录下创建一个名称为mongodb-install的role，实际上就是创建一个名称为mongodb-install的目录结构 1ansible-galaxy init mongodb-install 创建完成后，目录结构如下： 1234567891011121314151617mongodb-install├── defaults│ └── main.yml├── files├── handlers│ └── main.yml├── meta│ └── main.yml├── README.md├── tasks│ └── main.yml├── templates├── tests│ ├── inventory│ └── test.yml└── vars └── main.yml 编辑role，相关代码参考https://github.com/hanqunfeng/ansible-role-mongodb 这里我们要注意两个文件 README.md: 这里面配置的是role的描述信息，其会显示在文档一栏中 meta/main.yml，这里面配置的是role的作者信息 上传Role到Github 1234567cd mongodb-installgit initgit add .git commit -m &quot;init&quot;git branch -M maingit remote add origin https://github.com/hanqunfeng/ansible-role-mongodb.gitgit push -u origin main 发布Role到Galaxy 登录https://galaxy.ansible.com/，点击登录，使用Github账号登录。 导入Role 填写Role信息 查看导入状态 搜索Role 此时我们在角色列表中搜索关键字hanqunfeng，就可以搜索到我们刚刚上传的那个role了 点击进去我们就可以查看角色的详细信息了 修改Role 修改了role信息后，重新上传到github即可 如果同时修改了README.md等role信息，可以在galaxy中重新上传即可 安装Role 1234567891011121314151617# 安装$ ansible-galaxy role install hanqunfeng.mongodb-installStarting galaxy role install process- downloading role &#x27;mongodb-install&#x27;, owned by hanqunfeng- downloading role from https://github.com/hanqunfeng/ansible-role-mongodb/archive/main.tar.gz- extracting hanqunfeng.mongodb-install to /Users/hanqf/.ansible/roles/hanqunfeng.mongodb-install- hanqunfeng.mongodb-install (main) was installed successfully# 重新安装ansible-galaxy role install --force hanqunfeng.mongodb-install# 查看已安装的roleansible-galaxy role list# 删除$ ansible-galaxy role remove hanqunfeng.mongodb-install- successfully removed hanqunfeng.mongodb-install 使用Role 在playbook中引用role 12345---- hosts: test-mongo become: yes # 切换到root用户下执行 roles: - hanqunfeng.mongodb-install 执行playbook 1234ansible-playbook -i hosts playbook.yml# 替换默认的变量ansible-playbook -i hosts --extra-vars &quot;mongo_port=27019&quot; --extra-vars &quot;mongo_replica_set_name=rs1&quot; playbook.yml 发布指定版本到Galaxy 给角色代码打tag 1234# 创建tag，名称为 v1.0.0git tag -a v1.0.0 -m &quot;v1.0.0&quot;# 提交taggit push origin v1.0.0 在galaxy中重新上传，注意此时在要指定tag名称 上传成功后，就可以在galaxy中查看到对应的版本了 下载指定版本的角色 1234567# 注意role和版本号之间用逗号隔开$ ansible-galaxy role install hanqunfeng.mongodb-install,v1.0.0Starting galaxy role install process- downloading role &#x27;mongodb-install&#x27;, owned by hanqunfeng- downloading role from https://github.com/hanqunfeng/ansible-role-mongodb/archive/v1.0.0.tar.gz- extracting hanqunfeng.mongodb-install to /Users/hanqf/.ansible/roles/hanqunfeng.mongodb-install- hanqunfeng.mongodb-install (v1.0.0) was installed successfully","summary":"摘要 本文介绍如何将Ansible Role发布到Galaxy。 关于Ansible的介绍可以参看 Linux常用命令--Ansible","date_published":"2024-03-26T13:30:05.000Z","tags":["技术","linux","linux常用命令","Ansible","linux常用命令","Ansible"]},{"id":"https://blog.hanqunfeng.com/2024/03/19/linux-command15-ansible/","url":"https://blog.hanqunfeng.com/2024/03/19/linux-command15-ansible/","title":"Linux常用命令--Ansible","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍Ansible的安装和使用。</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于CentOS8。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"Ansible简介\">Ansible简介</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible 是一个开源的自动化运维工具，它基于 Python 语言开发，支持跨平台，可以运行在 Linux、Unix、Mac OS X、Windows 等多种系统环境。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Ansible简单易用，只需要在控制主机上安装 Ansible 并在被管理主机上安装 Python 2.6 或更高版本即可（现有的开源Linux系统基本都自带了Python ，所以相当于远程主机什么都不需要安装），就可以管理远程主机对其进行自动化配置、编排高级工作流程以支持应用程序部署、系统更新等。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Ansible可以用来管理Linux、Unix、Windows、OpenStack、AWS、GCP、OpenShift、Kubernetes等系统环境。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Ansible官网文档：<a href=\"https://docs.ansible.com/ansible/latest/\">https://docs.ansible.com/ansible/latest/</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>Ansible中文权威指南：<a href=\"https://ansible-tran.readthedocs.io/en/latest/index.html\">https://ansible-tran.readthedocs.io/en/latest/index.html</a></p>\n</li>\n</ul>\n<h2 id=\"Ansible安装\">Ansible安装</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible安装方式有多种，这里介绍通过pip安装，当前系统中的python版本为python3.9。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install ansible</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>如果尚未安装pip，可以通过下面的方法进行安装</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\">python3 get-pip.py</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装完成后，可以查看一下版本</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible --version</span><br><span class=\"line\">ansible [core 2.15.9]</span><br><span class=\"line\">  config file = None</span><br><span class=\"line\">  configured module search path = [<span class=\"string\">&#x27;/root/.ansible/plugins/modules&#x27;</span>, <span class=\"string\">&#x27;/usr/share/ansible/plugins/modules&#x27;</span>]</span><br><span class=\"line\">  ansible python module location = /usr/local/lib/python3.9/site-packages/ansible</span><br><span class=\"line\">  ansible collection location = /root/.ansible/collections:/usr/share/ansible/collections</span><br><span class=\"line\">  executable location = /usr/local/bin/ansible</span><br><span class=\"line\">  python version = 3.9.16 (main, Sep  8 2023, 00:00:00) [GCC 11.4.1 20230605 (Red Hat 11.4.1-2)] (/usr/bin/python3)</span><br><span class=\"line\">  jinja version = 3.1.3</span><br><span class=\"line\">  libyaml = True</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible常用参数：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-u</td>\n<td>指定连接到主机的用户名</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>指定连接hosts文件的路径</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>指定连接到主机的密码</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>指定模块名称，可以指定模块的参数，比如指定shell模块的参数：-m shell -a ‘ls -l’</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>指定模块的参数，比如指定shell模块的参数：-m shell -a ‘ls -l’</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>指定附加参数，比如指定shell端口： -e ‘ansible_port=22’</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>切换到root权限</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>指定并发连接数，默认为5，即可以同时管理5台主机</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Ansible的配置文件\">Ansible的配置文件</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ansible的相关配置都是通过一个名为<code>ansible.cfg</code>的配置文件进行配置的，但我们通过pip安装是不会默认创建它的，实际上不创建这个配置文件也不影响ansible的执行，因为其会使用一些默认的配置，并且在大多数场景下默认的配置就能满足需求。</p>\n</li>\n<li class=\"lvl-2\">\n<p>ansible查找配置文件的顺序，优先级由上到下逐渐降低</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* ANSIBLE_CONFIG (一个环境变量)</span><br><span class=\"line\">* ansible.cfg (位于当前目录中)</span><br><span class=\"line\">* .ansible.cfg (位于家目录中)</span><br><span class=\"line\">* /etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>如果需要修改默认配置，我们可以通过如下命令创建一份配置文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此时会创建一份所有配置项都以 ; 开头的配置文件，我们要修改那个配置，就删除其前面的 ; ，然后修改其值即可</span></span><br><span class=\"line\">ansible-config init --disabled &gt; ansible.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前的生效配置，注意绿色为默认配置，黄色为被修改的配置</span></span><br><span class=\"line\">ansible-config dump</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看帮助文件</span></span><br><span class=\"line\">ansible-config list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看默认配置项的值和注释说明</span></span><br><span class=\"line\">ansible-config init list</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用配置详解</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通用默认配置段；</span></span><br><span class=\"line\">[defaults]</span><br><span class=\"line\"><span class=\"comment\"># 被控端IP或者DNS列表；</span></span><br><span class=\"line\">inventory=/etc/ansible/hosts</span><br><span class=\"line\"><span class=\"comment\"># Ansible默认搜寻模块的位置；</span></span><br><span class=\"line\">library=&#123;&#123; ANSIBLE_HOME ~ <span class=\"string\">&quot;/plugins/modules:/usr/share/ansible/plugins/modules&quot;</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"comment\"># 并行进程数；</span></span><br><span class=\"line\">forks=5</span><br><span class=\"line\"><span class=\"comment\"># 是否允许切换为其它用户</span></span><br><span class=\"line\">become=False</span><br><span class=\"line\"><span class=\"comment\"># become=True时，通过sudo进行切换</span></span><br><span class=\"line\">become_method=sudo</span><br><span class=\"line\"><span class=\"comment\"># 切换为root</span></span><br><span class=\"line\">become_user=root</span><br><span class=\"line\"><span class=\"comment\"># 搜索roles的路径</span></span><br><span class=\"line\">roles_path=&#123;&#123; ANSIBLE_HOME ~ <span class=\"string\">&quot;/roles:/usr/share/ansible/roles:/etc/ansible/roles&quot;</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"comment\"># 日志路径，默认不输出</span></span><br><span class=\"line\">log_path=</span><br><span class=\"line\"><span class=\"comment\"># Ansible命令执行默认的模块；</span></span><br><span class=\"line\">module_name=<span class=\"built_in\">command</span></span><br><span class=\"line\"><span class=\"comment\"># 是否检查远程主机密钥，默认为True，如果希望不检查可以将其设为False，可以加快连接速度</span></span><br><span class=\"line\">host_key_checking=True</span><br></pre></td></tr></table></figure>\n<h2 id=\"Ansible的hosts配置\">Ansible的hosts配置</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>需要创建hosts文件，使用ansible时，ansible会到hosts文件中查找对应的远程主机配置，默认的查找路径为<code>/etc/ansible/hosts</code>，也可以通过<code>ansible.cfg</code>修改默认配置</p>\n</li>\n</ul>\n<h3 id=\"hosts文件格式1\">hosts文件格式1</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>hosts文件格式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以配置ip或主机名</span></span><br><span class=\"line\">[webservers] <span class=\"comment\"># 分组名称</span></span><br><span class=\"line\">10.10.2.45</span><br><span class=\"line\">10.10.2.46</span><br><span class=\"line\">[dbservers]</span><br><span class=\"line\">10.10.2.47</span><br><span class=\"line\">10.10.2.48</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>命令行里加上连接参数</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行命令，多个ip逗号分隔</span></span><br><span class=\"line\">ansible -u username -m ping --private-key=~/.ssh/id_rsa -e <span class=\"string\">&#x27;ansible_port=22&#x27;</span> 10.10.2.45,10.10.2.46</span><br><span class=\"line\"><span class=\"comment\"># 指定hosts文件路径</span></span><br><span class=\"line\">ansible -i hosts -u username -m ping --private-key=~/.ssh/id_rsa -e <span class=\"string\">&#x27;ansible_port=22&#x27;</span> 10.10.2.45,10.10.2.46</span><br></pre></td></tr></table></figure>\n<h3 id=\"hosts文件格式2\">hosts文件格式2</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>hosts文件里也可以配置连接参数</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[webservers]</span><br><span class=\"line\">10.10.2.45 ansible_ssh_user=username ansible_ssh_private_key=~/.ssh/id_rsa ansible_ssh_port=22</span><br><span class=\"line\">10.10.2.46 ansible_ssh_user=username ansible_ssh_private_key=~/.ssh/id_rsa ansible_ssh_port=22</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时命令行连接时就不需要指定连接参数了</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible -i hosts -u username -m ping 10.10.2.45,10.10.2.46</span><br></pre></td></tr></table></figure>\n<h3 id=\"hosts文件格式3\">hosts文件格式3</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ansible是基于ssh建立连接的，所以只要ssh能连上远程主机，ansible就可以管理远程主机，如果我们为ssh配置config文件，那么ansible就可以直接将config里的Host名称配置到hosts文件里，这样就不需要配置连接参数了，同时此时也可以支持跳板机。关于ssh的config详细说明可以参考<a href=\"/2023/02/28/linux-command02-ssh/\" title=\"Linux常用命令--ssh、scp与免密登录\">Linux常用命令--ssh、scp与免密登录</a></p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">配置~/.ssh/config</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 跳板机</span></span><br><span class=\"line\">Host forward</span><br><span class=\"line\">    User ec2-user</span><br><span class=\"line\">    HostName 53.22.227.200</span><br><span class=\"line\">    Port 22</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程主机</span></span><br><span class=\"line\">Host remote-host</span><br><span class=\"line\">    User ec2-user</span><br><span class=\"line\">    HostName 10.9.5.123</span><br><span class=\"line\">    Port 22</span><br><span class=\"line\">    IdentityFile ~/.ssh/key.pem</span><br><span class=\"line\">    ProxyCommand ssh forward -W %h:%p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程主机 ,10.9网段的所有主机</span></span><br><span class=\"line\">Host 10.9.*</span><br><span class=\"line\">    User ec2-user</span><br><span class=\"line\">    Port 22</span><br><span class=\"line\">    IdentityFile ~/.ssh/key.pem</span><br><span class=\"line\">    ProxyCommand ssh forward -W %h:%p</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">hosts文件</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[webservers]</span><br><span class=\"line\">forward     <span class=\"comment\"># 与config中配置的Host名称一致</span></span><br><span class=\"line\">remote-host <span class=\"comment\"># 与config中配置的Host名称一致</span></span><br><span class=\"line\">10.9.5.123     <span class=\"comment\"># 匹配config中的网段</span></span><br><span class=\"line\">10.9.5.124     <span class=\"comment\"># 匹配config中的网段</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">命令行</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过指定主机名或ip</span></span><br><span class=\"line\">ansible -m ping remote-host</span><br><span class=\"line\">ansible -m ping 10.9.5.123</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通配符匹配，此时在匹配hosts中123和124</span></span><br><span class=\"line\">ansible -m ping  <span class=\"string\">&quot;10.9.5.*&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过分组名</span></span><br><span class=\"line\">ansible -m ping  webservers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过all指定hosts里的全部主机</span></span><br><span class=\"line\">ansible -m ping  all</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"查看hosts配置相关命令\">查看hosts配置相关命令</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>列出所有组的配置ip信息</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all --list-hosts</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看当前hosts中配置所有组名称</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible localhost -m debug -a <span class=\"string\">&#x27;var=groups.keys()&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>列出指定组的配置ip信息</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible dbservers --list-hosts</span><br></pre></td></tr></table></figure>\n<h2 id=\"Ansible模块\">Ansible模块</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>列出所有模块</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-doc -l</span><br><span class=\"line\"><span class=\"comment\"># 也可以指定模块名称</span></span><br><span class=\"line\">ansible-doc -l | grep -i shell</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看指定模块的参数信息，如下查看shell模块的参数说明</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-doc -s shell</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看模块的帮助信息，如下查看shell模块的帮助信息，这与官方文档一致:<a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html#ansible-collections-ansible-builtin-shell-module\">shell模块</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-doc shell</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible管理工具常用的模块：<code>command、shell、file、user、copy、service、yum、synchronze、cron、setup、ping</code>等。可以在命令行里指定各个模块的参数(<code>ansible</code>命令)，也可以将参数配置到yml文件里，然后在命令行里指定yml文件(<code>ansible-playbook</code>命令)，下面会结合两种方式一块介绍。网上有大把的关于ansible命令的使用说明，这里只简单介绍几个模块的使用方法，其他模块的使用方法可以参考<a href=\"https://docs.ansible.com/ansible/latest/collections/index.html#plugin-list\">ansible模块</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>下面介绍的都是<a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/index.html#plugins-in-ansible-builtin\">ansible核心模块:ansible-core</a></p>\n</li>\n</ul>\n<h3 id=\"ping模块\">ping模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/ping_module.html#ansible-collections-ansible-builtin-ping-module\">ping模块</a>用于测试主机的连通性，它会尝试连接到主机，验证可用的python，并在成功时返回“pong”，可以指定主机名或ip，也可以指定分组名，也可以指定all</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过命令行执行命令</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m ping</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通过yml文件执行命令</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ping.yml</span></span><br><span class=\"line\"><span class=\"string\">---</span>  <span class=\"comment\"># yml文件的开头，规定playbook的yml文件格式，必须以---开头(必须)，...结尾(非必须)</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Ping</span> <span class=\"string\">web</span> <span class=\"string\">servers</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span>  <span class=\"comment\"># ip或组名，也可以配置all：匹配全部主机</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Ping</span> <span class=\"string\">the</span> <span class=\"string\">servers</span></span><br><span class=\"line\">      <span class=\"attr\">ping:</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">command_output</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">显示命令输出</span></span><br><span class=\"line\">      <span class=\"attr\">debug:</span></span><br><span class=\"line\">        <span class=\"attr\">var:</span> <span class=\"string\">command_output.stdout_lines</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>ansible-playbook</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">通过ansible-playbook命令，可以指定yml文件</li>\n<li class=\"lvl-2\">ansible-playbook相关命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查yml文件语法格式</span></span><br><span class=\"line\">ansible-playbook --syntax-check ping.yml</span><br><span class=\"line\"><span class=\"comment\"># 列出hosts</span></span><br><span class=\"line\">ansible-playbook --list-hosts ping.yml</span><br><span class=\"line\"><span class=\"comment\"># 列出tags</span></span><br><span class=\"line\">ansible-playbook --list-tags ping.yml</span><br><span class=\"line\"><span class=\"comment\"># 列出task</span></span><br><span class=\"line\">ansible-playbook --list-tasks ping.yml</span><br><span class=\"line\"><span class=\"comment\"># 指定执行主机：--limit 或 -l，其必须是yml中hosts指定的子集</span></span><br><span class=\"line\">ansible-playbook ping.yml --<span class=\"built_in\">limit</span> 192.168.20.23</span><br><span class=\"line\"><span class=\"comment\"># 执行命令</span></span><br><span class=\"line\">ansible-playbook ping.yml</span><br><span class=\"line\"><span class=\"comment\"># 模拟执行，Ansible 会模拟执行任务，并输出执行结果，但不会对目标主机做出任何更改</span></span><br><span class=\"line\"><span class=\"comment\"># 注意这个命令运行不报错并不能说明一定可以执行成功，因为这个命令是模拟执行的</span></span><br><span class=\"line\">ansible-playbook ping.yml --check</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"setup模块\">setup模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>该模块用于采集被管理设备信息并返回给服务端，后面跟<code>--tree &lt;目录&gt;</code>，可以将采集信息以ip为文件名保存至指定目录下</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看全部信息</span></span><br><span class=\"line\">ansible all -m setup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只查看内存信息</span></span><br><span class=\"line\">ansible all -m setup -a <span class=\"string\">&quot;filter=*mem*&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只查看网络信息</span></span><br><span class=\"line\">ansible all -m setup -a <span class=\"string\">&quot;gather_subset=network&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存信息至指定目录，这样会每个ip对应一个文件</span></span><br><span class=\"line\">ansible all -m setup --tree ./</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s setup</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gather_subset</td>\n<td>指定要收集的系统信息的子集。可以是 all（所有信息）、network（网络信息）、hardware（硬件信息）等。默认为 all。</td>\n</tr>\n<tr>\n<td>gather_timeout</td>\n<td>设置信息收集的超时时间，单位为秒。默认为 10 秒。</td>\n</tr>\n<tr>\n<td>filter</td>\n<td>指定要收集的系统信息的过滤条件。可以是一个或多个标签，只收集匹配的信息。</td>\n</tr>\n<tr>\n<td>fact_path</td>\n<td>指定自定义 facts 文件的路径。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>这里重点介绍一下gather_subset</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all: 收集所有可用的系统信息。</span><br><span class=\"line\">all_ipv4_addresses: 收集所有 IPv4 地址信息。</span><br><span class=\"line\">all_ipv6_addresses: 收集所有 IPv6 地址信息。</span><br><span class=\"line\">apparmor: 收集 AppArmor 相关信息。</span><br><span class=\"line\">architecture: 收集系统架构信息。</span><br><span class=\"line\">caps: 收集进程的 capabilities 信息。</span><br><span class=\"line\">chroot: 收集 chroot 环境的信息。</span><br><span class=\"line\">cmdline: 收集内核命令行参数信息。</span><br><span class=\"line\">date_time: 收集日期和时间信息。</span><br><span class=\"line\">default_ipv4: 收集默认的 IPv4 地址信息。</span><br><span class=\"line\">default_ipv6: 收集默认的 IPv6 地址信息。</span><br><span class=\"line\">devices: 收集系统设备信息。</span><br><span class=\"line\">distribution: 收集发行版信息。</span><br><span class=\"line\">distribution_major_version: 收集发行版主版本号。</span><br><span class=\"line\">distribution_release: 收集发行版发行号。</span><br><span class=\"line\">distribution_version: 收集发行版版本信息。</span><br><span class=\"line\">dns: 收集 DNS 配置信息。</span><br><span class=\"line\">effective_group_ids: 收集有效组 ID 信息。</span><br><span class=\"line\">effective_user_id: 收集有效用户 ID 信息。</span><br><span class=\"line\">env: 收集环境变量信息。</span><br><span class=\"line\">facter: 收集 Facter 信息。</span><br><span class=\"line\">fips: 收集 FIPS 相关信息。</span><br><span class=\"line\">hardware: 收集硬件信息。</span><br><span class=\"line\">interfaces: 收集网络接口信息。</span><br><span class=\"line\">is_chroot: 收集是否处于 chroot 环境的信息。</span><br><span class=\"line\">iscsi: 收集 iSCSI 配置信息。</span><br><span class=\"line\">kernel: 收集内核信息。</span><br><span class=\"line\">local: 收集本地配置信息。</span><br><span class=\"line\">lsb: 收集 LSB 发行版信息。</span><br><span class=\"line\">machine: 收集机器信息。</span><br><span class=\"line\">machine_id: 收集机器 ID 信息。</span><br><span class=\"line\">mounts: 收集挂载点信息。</span><br><span class=\"line\">network: 收集网络相关信息。</span><br><span class=\"line\">ohai: 收集 Ohai 信息。</span><br><span class=\"line\">os_family: 收集操作系统家族信息。</span><br><span class=\"line\">pkg_mgr: 收集包管理器信息。</span><br><span class=\"line\">platform: 收集平台信息。</span><br><span class=\"line\">processor: 收集处理器信息。</span><br><span class=\"line\">processor_cores: 收集处理器核心数信息。</span><br><span class=\"line\">processor_count: 收集处理器数量信息。</span><br><span class=\"line\">python: 收集 Python 相关信息。</span><br><span class=\"line\">python_version: 收集 Python 版本信息。</span><br><span class=\"line\">real_user_id: 收集真实用户 ID 信息。</span><br><span class=\"line\">selinux: 收集 SELinux 配置信息。</span><br><span class=\"line\">service_mgr: 收集服务管理器信息。</span><br><span class=\"line\">ssh_host_key_dsa_public: 收集 SSH DSA 公钥信息。</span><br><span class=\"line\">ssh_host_key_ecdsa_public: 收集 SSH ECDSA 公钥信息。</span><br><span class=\"line\">ssh_host_key_ed25519_public: 收集 SSH ED25519 公钥信息。</span><br><span class=\"line\">ssh_host_key_rsa_public: 收集 SSH RSA 公钥信息。</span><br><span class=\"line\">ssh_host_pub_keys: 收集 SSH 主机公钥信息。</span><br><span class=\"line\">ssh_pub_keys: 收集 SSH 用户公钥信息。</span><br><span class=\"line\">system: 收集系统相关信息。</span><br><span class=\"line\">system_capabilities: 收集系统能力信息。</span><br><span class=\"line\">system_capabilities_enforced: 收集系统能力强制信息。</span><br><span class=\"line\">user: 收集用户账户信息。</span><br><span class=\"line\">user_dir: 收集用户目录信息。</span><br><span class=\"line\">user_gecos: 收集用户 GECOS 信息。</span><br><span class=\"line\">user_gid: 收集用户组 ID 信息。</span><br><span class=\"line\">user_id: 收集用户 ID 信息。</span><br><span class=\"line\">user_shell: 收集用户 Shell 信息。</span><br><span class=\"line\">user_uid: 收集用户 UID 信息。</span><br><span class=\"line\">virtual: 收集虚拟化相关信息。</span><br><span class=\"line\">virtualization_role: 收集虚拟化角色信息。</span><br><span class=\"line\">virtualization_type: 收集虚拟化类型信息。</span><br></pre></td></tr></table></figure>\n<h3 id=\"command模块\">command模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html#ansible-collections-ansible-builtin-command-module\">command模块</a>为ansible默认模块，主要用于执行Linux基础命令，可以执行远程服务器命令执行、任务执行等操作。</p>\n</li>\n<li class=\"lvl-2\">\n<p>command模块不支持管道符号、变量，只能运行简单命令，复杂命令需要使用shell模块</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例1</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;df -hT&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># command.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上运行</span> <span class=\"string\">df</span> <span class=\"string\">-hT</span> <span class=\"string\">命令</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">执行</span> <span class=\"string\">df</span> <span class=\"string\">-hT</span> <span class=\"string\">命令</span></span><br><span class=\"line\">      <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">&quot;df -hT&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">command_output</span> <span class=\"comment\"># 保存命令执行结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">显示命令输出</span></span><br><span class=\"line\">      <span class=\"attr\">debug:</span></span><br><span class=\"line\">        <span class=\"attr\">var:</span> <span class=\"string\">command_output.stdout_lines</span> <span class=\"comment\"># 输出命令执行结果</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>示例2：参数chdir：切换到指定目录后再运行命令</p>\n</li>\n</ul>\n<blockquote>\n<p>可以通过<code>ansible-doc -s command</code>查看其支持的参数</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m <span class=\"built_in\">command</span> -a <span class=\"string\">&quot;chdir=/tmp ls -l&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># command2.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上列出</span> <span class=\"string\">/tmp</span> <span class=\"string\">目录的内容</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">切换到</span> <span class=\"string\">/tmp</span> <span class=\"string\">目录并列出内容</span></span><br><span class=\"line\">      <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/tmp</span>       <span class=\"comment\"># 切换到 /tmp 目录</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">ls</span> <span class=\"string\">-l</span>        <span class=\"comment\"># 执行命令</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">command_output</span>  <span class=\"comment\"># 保存命令执行结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">显示命令输出</span></span><br><span class=\"line\">      <span class=\"attr\">debug:</span></span><br><span class=\"line\">        <span class=\"attr\">var:</span> <span class=\"string\">command_output.stdout_lines</span> <span class=\"comment\"># 输出命令执行结果</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s command</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>argv</td>\n<td>要执行的命令，可以是字符串形式或列表形式。</td>\n</tr>\n<tr>\n<td>chdir</td>\n<td>在执行命令之前切换到的目录。</td>\n</tr>\n<tr>\n<td>cmd</td>\n<td>要执行的命令。</td>\n</tr>\n<tr>\n<td>creates</td>\n<td>指定一个文件名或模式，如果匹配的文件已经存在，则不执行命令。</td>\n</tr>\n<tr>\n<td>expand_argument_vars</td>\n<td>是否展开作为变量的参数。默认为 true，表示展开变量。</td>\n</tr>\n<tr>\n<td>free_form</td>\n<td>以字符串形式指定要执行的命令。这个参数并不存在，但是 command 模块接受自由形式的字符串作为命令。</td>\n</tr>\n<tr>\n<td>removes</td>\n<td>指定一个文件名或模式，如果匹配的文件存在，则执行命令。</td>\n</tr>\n<tr>\n<td>stdin</td>\n<td>将命令的标准输入设置为指定的值。</td>\n</tr>\n<tr>\n<td>stdin_add_newline</td>\n<td>是否在标准输入数据后添加换行符。</td>\n</tr>\n<tr>\n<td>strip_empty_ends</td>\n<td>是否从标准输出的末尾剥离空行。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"shell模块\">shell模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html#ansible-collections-ansible-builtin-shell-module\">shell模块</a>与command模块类似，可以执行远程服务器命令执行、任务执行等操作，但是shell模块支持管道符号、变量，可以执行复杂命令</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看进程</span></span><br><span class=\"line\">ansible webservers -m shell -a <span class=\"string\">&quot;ps -ef | grep java | grep -v &#x27;grep&#x27;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改密码</span></span><br><span class=\"line\">ansible webservers -m shell -a <span class=\"string\">&quot; echo 123456 | passwd --stdin ansible&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># shell.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上查找</span> <span class=\"string\">Java</span> <span class=\"string\">进程</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">执行</span> <span class=\"string\">ps</span> <span class=\"string\">-ef</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">java</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">&#x27;grep&#x27;</span> <span class=\"string\">命令</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">ps</span> <span class=\"string\">-ef</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">java</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">&#x27;grep&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">command_output</span>  <span class=\"comment\"># 保存命令执行结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">显示命令输出</span></span><br><span class=\"line\">      <span class=\"attr\">debug:</span></span><br><span class=\"line\">        <span class=\"attr\">var:</span> <span class=\"string\">command_output.stdout_lines</span> <span class=\"comment\"># 输出命令执行结果</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s shell</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>argv</td>\n<td>要执行的命令，可以是字符串形式或列表形式。</td>\n</tr>\n<tr>\n<td>chdir</td>\n<td>在执行命令之前切换到的目录。</td>\n</tr>\n<tr>\n<td>cmd</td>\n<td>要执行的命令。</td>\n</tr>\n<tr>\n<td>creates</td>\n<td>指定一个文件名或模式，如果匹配的文件已经存在，则不执行命令。</td>\n</tr>\n<tr>\n<td>executable</td>\n<td>用于执行命令的可执行程序，默认情况下为 /bin/sh。</td>\n</tr>\n<tr>\n<td>free_form</td>\n<td>以字符串形式指定要执行的命令。这个参数并不存在，但是 shell 模块接受自由形式的字符串作为命令。</td>\n</tr>\n<tr>\n<td>removes</td>\n<td>指定一个文件名或模式，如果匹配的文件存在，则执行命令。</td>\n</tr>\n<tr>\n<td>stdin</td>\n<td>将命令的标准输入设置为指定的值。</td>\n</tr>\n<tr>\n<td>stdin_add_newline</td>\n<td>是否在标准输入数据后添加换行符。</td>\n</tr>\n<tr>\n<td>strip_empty_ends</td>\n<td>是否从标准输出的末尾剥离空行。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"file模块\">file模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html#ansible-collections-ansible-builtin-file-module\">file模块</a>主要用于文件和目录的管理，可以创建、删除、修改文件和目录，可以指定文件或目录的属性，可以指定文件或目录的权限，可以指定文件或目录的owner、group、mode等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：创建目录</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m file -a <span class=\"string\">&quot;path=/tmp/`date +%F`  state=directory  mode=755&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># file.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上创建日期格式的目录</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">创建目录</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&quot;/tmp/<span class=\"template-variable\">&#123;&#123; ansible_date_time.date &#125;&#125;</span>&quot;</span> <span class=\"comment\"># ansible_date_time.date表示当前时间获取的日期，格式为YYYY-MM-DD</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">directory</span> <span class=\"comment\"># 创建目录，如果目录已经存在则不创建</span></span><br><span class=\"line\">        <span class=\"attr\">mode:</span> <span class=\"string\">&quot;755&quot;</span> <span class=\"comment\"># 设置目录权限</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s file</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>path</td>\n<td>文件或目录的路径。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>文件或目录的状态。可选值包括 file（文件）、directory（目录）、link（符号链接）。默认为 file。</td>\n</tr>\n<tr>\n<td>owner</td>\n<td>文件或目录的所有者。</td>\n</tr>\n<tr>\n<td>group</td>\n<td>文件或目录的所属组。</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>文件或目录的权限。</td>\n</tr>\n<tr>\n<td>src</td>\n<td>源文件路径，用于复制文件或创建链接。</td>\n</tr>\n<tr>\n<td>dest</td>\n<td>目标文件路径，用于复制文件或创建链接。</td>\n</tr>\n<tr>\n<td>follow</td>\n<td>是否遵循符号链接。如果为 yes，则会遵循符号链接进行操作。默认为 yes。</td>\n</tr>\n<tr>\n<td>selevel</td>\n<td>文件或目录的 SELinux 安全上下文。</td>\n</tr>\n<tr>\n<td>serole</td>\n<td>文件或目录的 SELinux 角色。</td>\n</tr>\n<tr>\n<td>setype</td>\n<td>文件或目录的 SELinux 类型。</td>\n</tr>\n<tr>\n<td>seuser</td>\n<td>文件或目录的 SELinux 用户。</td>\n</tr>\n<tr>\n<td>unsafe_writes</td>\n<td>是否启用不安全的写入模式。如果为 yes，则在写入文件之前不会创建备份。默认为 no。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>这里重点说一下<code>state</code></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file：表示要求目标主机上存在指定的文件。如果文件已经存在，则不执行任何操作；如果文件不存在，则会创建它。</span><br><span class=\"line\">directory：表示要求目标主机上存在指定的目录。如果目录已经存在，则不执行任何操作；如果目录不存在，则会创建它。</span><br><span class=\"line\">link：表示要求目标主机上存在指定的符号链接。如果符号链接已经存在，则不执行任何操作；如果符号链接不存在，则会创建它。</span><br><span class=\"line\">hard：创建硬链接</span><br><span class=\"line\">touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间</span><br><span class=\"line\">absent：删除目录、文件或者取消链接文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"copy模块\">copy模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.html#ansible-collections-ansible-builtin-copy-module\">copy模块</a>主要用于将文件复制到远程服务器，可以指定文件的源路径、目标路径、owner、group、mode等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：复制文件到指定目录</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -b 切换到root用户下执行</span></span><br><span class=\"line\">ansible webservers -m copy -a <span class=\"string\">&quot;src=/tmp/a.txt dest=/tmp/ owner=root group=root mode=755&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># copy.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上复制文件</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span> <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">复制文件</span></span><br><span class=\"line\">      <span class=\"attr\">copy:</span></span><br><span class=\"line\">        <span class=\"attr\">src:</span> <span class=\"string\">&quot;/tmp/a.txt&quot;</span> <span class=\"comment\"># 源文件路径</span></span><br><span class=\"line\">        <span class=\"attr\">dest:</span> <span class=\"string\">&quot;/tmp/&quot;</span>     <span class=\"comment\"># 目标文件路径</span></span><br><span class=\"line\">        <span class=\"attr\">owner:</span> <span class=\"string\">root</span>       <span class=\"comment\"># 指定文件owner</span></span><br><span class=\"line\">        <span class=\"attr\">group:</span> <span class=\"string\">root</span>       <span class=\"comment\"># 指定文件group</span></span><br><span class=\"line\">        <span class=\"attr\">mode:</span> <span class=\"string\">&quot;755&quot;</span>       <span class=\"comment\"># 指定文件权限</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s copy</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>src</td>\n<td>源文件的路径。</td>\n</tr>\n<tr>\n<td>dest</td>\n<td>目标文件的路径。</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>是否备份目标文件。如果为 yes，则在复制目标文件之前会创建一个备份文件。默认为 yes。</td>\n</tr>\n<tr>\n<td>content</td>\n<td>要写入目标文件的内容。</td>\n</tr>\n<tr>\n<td>directory_mode</td>\n<td>目标目录的权限。只有当目标是一个目录时才会生效。</td>\n</tr>\n<tr>\n<td>follow</td>\n<td>是否跟随符号链接。如果为 yes，则会跟随符号链接进行操作。默认为 yes。</td>\n</tr>\n<tr>\n<td>force</td>\n<td>是否强制覆盖目标文件。如果为 yes，则强制复制源文件，即使目标文件已经存在。默认为 no。</td>\n</tr>\n<tr>\n<td>group</td>\n<td>目标文件的所属组。</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>目标文件的权限。</td>\n</tr>\n<tr>\n<td>owner</td>\n<td>目标文件的所有者。</td>\n</tr>\n<tr>\n<td>remote_src</td>\n<td>指定源文件是否在远程主机上。如果为 yes，表示源文件在远程主机上。默认为 no。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"fetch模块\">fetch模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fetch_module.html#ansible-collections-ansible-builtin-fetch-module\">fetch模块</a>主要用于将文件从远程服务器复制到本地，可以指定文件的源路径、目标路径、owner、group、mode等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：将文件从远程服务器复制到本地</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m fetch -a <span class=\"string\">&quot;src=/tmp/a.txt dest=/tmp/ flat=yes&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># fetch.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上将文件从远程服务器复制到本地</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">复制文件</span></span><br><span class=\"line\">      <span class=\"attr\">fetch:</span></span><br><span class=\"line\">        <span class=\"attr\">src:</span> <span class=\"string\">&quot;/tmp/a.txt&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">dest:</span> <span class=\"string\">&quot;/tmp/&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">flat:</span> <span class=\"literal\">yes</span> <span class=\"comment\"># flat: yes  # 将文件复制到dest目录下，不创建目录结构</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s fetch</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>src</td>\n<td>远程主机上要拉取的文件的路径。</td>\n</tr>\n<tr>\n<td>dest</td>\n<td>本地主机上文件的目标路径。</td>\n</tr>\n<tr>\n<td>flat</td>\n<td>是否将文件放置在顶层目录中。如果为 yes，则所有文件都将放置在一个目录中。默认为 no。</td>\n</tr>\n<tr>\n<td>fail_on_missing</td>\n<td>如果为 yes，则在源文件不存在时失败。默认为 yes。</td>\n</tr>\n<tr>\n<td>validate_checksum</td>\n<td>是否验证远程文件的校验和。默认为 no。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"cron模块\">cron模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/cron_module.html#ansible-collections-ansible-builtin-cron-module\">cron模块</a>主要用于在远程服务器上创建、修改、删除定时任务</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：创建定时任务</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m cron -a <span class=\"string\">&#x27;name=&quot;restart httpd&quot; hour=*/5 job=&quot;systemctl restart httpd&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cron.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上创建定时任务</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">创建定时任务</span></span><br><span class=\"line\">      <span class=\"attr\">cron:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">&quot;restart httpd&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">hour:</span> <span class=\"string\">&quot;*/5&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">job:</span> <span class=\"string\">&quot;systemctl restart httpd&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明：<code>ansible-doc -s cron</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>cron 任务的名称。</td>\n</tr>\n<tr>\n<td>minute</td>\n<td>cron 任务执行的分钟。</td>\n</tr>\n<tr>\n<td>hour</td>\n<td>cron 任务执行的小时。</td>\n</tr>\n<tr>\n<td>day</td>\n<td>cron 任务执行的日期。</td>\n</tr>\n<tr>\n<td>month</td>\n<td>cron 任务执行的月份。</td>\n</tr>\n<tr>\n<td>weekday</td>\n<td>cron 任务执行的星期几。</td>\n</tr>\n<tr>\n<td>job</td>\n<td>要执行的命令或脚本。</td>\n</tr>\n<tr>\n<td>cron_file</td>\n<td>要操作的 cron 文件的路径。默认为 /etc/crontab。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>cron 任务的状态。可选值包括 present（默认）和 absent。表示要求任务存在或不存在。</td>\n</tr>\n<tr>\n<td>user</td>\n<td>cron 任务的执行用户。默认为 root。</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>是否备份 cron 文件。可选值包括 true 和 false。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>state</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">present：表示要求指定的 cron 任务存在。如果指定的 cron 任务不存在，则 Ansible 将会创建它。如果已经存在，则不执行任何操作。</span><br><span class=\"line\">absent：表示要求指定的 cron 任务不存在。如果指定的 cron 任务存在，则 Ansible 将会删除它。如果不存在，则不执行任何操作。</span><br></pre></td></tr></table></figure>\n<h3 id=\"yum模块\">yum模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/yum_module.html#ansible-collections-ansible-builtin-yum-module\">yum模块</a>主要用于在远程服务器上安装、卸载、更新软件包，可以指定软件包的名称、版本、repo等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：安装软件包</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装软件包，相当于 yum install httpd</span></span><br><span class=\"line\">ansible webservers -m yum -a <span class=\"string\">&quot;name=httpd state=present&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上安装</span> <span class=\"string\">httpd</span> <span class=\"string\">软件包</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装</span> <span class=\"string\">httpd</span> <span class=\"string\">软件包</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">httpd</span> <span class=\"comment\"># 软件包名称，相当于 yum install httpd</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span> <span class=\"comment\"># 安装软件包，如果软件包已经安装则不安装</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明:<code>ansible-doc -s yum</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>指定要操作的包的名称。</td>\n</tr>\n<tr>\n<td>update_cache</td>\n<td>指定是否在执行操作之前更新 yum 缓存。可选值为 <code>yes</code> 或 <code>no</code>。默认为 <code>yes</code>。</td>\n</tr>\n<tr>\n<td>disable_gpg_check</td>\n<td>指定是否禁用 GPG 检查。如果为 <code>yes</code>，则禁用 GPG 检查。默认为 <code>no</code>。</td>\n</tr>\n<tr>\n<td>disable_plugin</td>\n<td>指定是否禁用指定的 yum 插件。可以是一个插件名称的列表。</td>\n</tr>\n<tr>\n<td>enablerepo</td>\n<td>指定要启用的仓库。可以是一个仓库名称的列表。</td>\n</tr>\n<tr>\n<td>disablerepo</td>\n<td>指定要禁用的仓库。可以是一个仓库名称的列表。</td>\n</tr>\n<tr>\n<td>installroot</td>\n<td>指定要安装软件包的根目录。</td>\n</tr>\n<tr>\n<td>security</td>\n<td>指定是否只安装安全更新。如果为 <code>yes</code>，则只安装安全更新。默认为 <code>no</code>。</td>\n</tr>\n<tr>\n<td>list</td>\n<td>指定是否列出所有已安装的包。如果为 <code>yes</code>，则列出已安装的包。默认为 <code>no</code>。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>指定软件包的状态。可选值为 <code>present</code>、<code>latest</code>、<code>absent</code>、<code>installed</code>、<code>removed</code>。默认为 <code>present</code>。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>这里重点说一下<code>state</code></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">present: 表示要求目标主机上存在指定的软件包。如果软件包已经安装，则不执行任何操作；如果软件包未安装，则会安装它。</span><br><span class=\"line\">latest: 表示要求目标主机上存在指定的软件包，并且希望保持为最新版本。如果软件包已经安装，但不是最新版本，则会更新到最新版本；如果软件包未安装，则会安装最新版本。</span><br><span class=\"line\">absent: 表示要求目标主机上不存在指定的软件包。如果软件包已安装，则会将其卸载；如果软件包未安装，则不执行任何操作。</span><br><span class=\"line\">installed: 与 present 意义相同，用于明确表达希望软件包已经安装在目标主机上。</span><br><span class=\"line\">removed: 与 absent 意义相同，用于明确表达希望软件包已从目标主机上卸载。</span><br></pre></td></tr></table></figure>\n<h3 id=\"service模块-调用的是service命令\">service模块:调用的是<code>service</code>命令</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/service_module.html#ansible-collections-ansible-builtin-service-module\">service模块</a>主要用于在远程服务器上启动、停止、重启、重新加载、启用、禁用、检查服务，可以指定服务的名称、状态、启动方式等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：启动服务</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m service -a <span class=\"string\">&quot;name=httpd state=started&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># service.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上启动</span> <span class=\"string\">httpd</span> <span class=\"string\">服务</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动</span> <span class=\"string\">httpd</span> <span class=\"string\">服务</span></span><br><span class=\"line\">      <span class=\"attr\">service:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">httpd</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">started</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明:<code>ansible-doc -s service</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>服务的名称。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>服务的状态。可选值包括 started（已启动）、stopped（已停止）、restarted（已重启）。</td>\n</tr>\n<tr>\n<td>enabled</td>\n<td>是否在启动时自动启用服务。如果为 yes，则在系统启动时自动启动服务。默认为 yes。</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td>匹配服务的模式。默认情况下为服务名称。</td>\n</tr>\n<tr>\n<td>sleep</td>\n<td>在重新启动服务之前等待的秒数。</td>\n</tr>\n<tr>\n<td>arguments</td>\n<td>启动或停止服务时要传递的参数。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>state</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">started：表示要求服务处于已启动状态。如果指定的服务未启动，则 Ansible 将尝试启动该服务。如果服务已经处于运行状态，则不执行任何操作。</span><br><span class=\"line\">stopped：表示要求服务处于已停止状态。如果指定的服务正在运行，则 Ansible 将尝试停止该服务。如果服务已经停止，则不执行任何操作。</span><br><span class=\"line\">restarted：表示要求重启服务。无论服务当前处于运行状态还是停止状态，Ansible 都会尝试重新启动该服务。</span><br></pre></td></tr></table></figure>\n<h3 id=\"systemd模块-支持centos7-，调用的是systemctl\">systemd模块:支持<code>centos7+</code>，调用的是<code>systemctl</code></h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/systemd_service_module.html#ansible-collections-ansible-builtin-systemd-service-module\">systemd模块</a>用于控制 systemd 后台服务，允许你启动、重新启动、停止或者重新加载 systemd 服务。此外，你也可以使用它来使服务在系统启动时自动启动或禁止自动启动。除此之外，systemd 模块还允许你检查服务的状态。</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m systemd -a <span class=\"string\">&quot;name=httpd state=restarted&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># systemd.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上重新启动</span> <span class=\"string\">httpd</span> <span class=\"string\">服务</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">重新启动</span> <span class=\"string\">httpd</span> <span class=\"string\">服务</span></span><br><span class=\"line\">      <span class=\"attr\">systemd:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">httpd</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">restarted</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>主要参数说明：<code>ansible-doc -s systemd</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>enabled</td>\n<td>指定服务是否应该在启动时自动启用。可选值为 yes 或 no。默认为 yes。</td>\n</tr>\n<tr>\n<td>masked</td>\n<td>指定服务是否应该被置为 masked 状态，禁止手动启动。可选值为 yes 或 no。默认为 no。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>服务的名称。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>指定服务的状态。可选值为 started（启动）、stopped（停止）、restarted（重新启动）、reloaded（重新加载）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"script模块\">script模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/script_module.html#ansible-collections-ansible-builtin-script-module\">script模块</a>主要用于在远程服务器上执行本地的脚本</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：执行脚本</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m script -a <span class=\"string\">&quot;chdir=/tmp /tmp/a.sh&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># script.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">web</span> <span class=\"string\">服务器上运行脚本</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">在</span> <span class=\"string\">/tmp</span> <span class=\"string\">目录中运行脚本</span></span><br><span class=\"line\">      <span class=\"attr\">script:</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/tmp</span> <span class=\"comment\"># 指定脚本的执行目录</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">/tmp/a.sh</span> <span class=\"comment\"># 本地脚本的路径</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明:<code>ansible-doc -s script</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>chdir</td>\n<td>在远程主机上执行脚本之前切换到的目录。</td>\n</tr>\n<tr>\n<td>free_form</td>\n<td>要在远程主机上执行的脚本内容。</td>\n</tr>\n<tr>\n<td>creates</td>\n<td>如果指定的文件已经存在，则不执行脚本。</td>\n</tr>\n<tr>\n<td>executable</td>\n<td>指定要使用的脚本解释器。</td>\n</tr>\n<tr>\n<td>removes</td>\n<td>在执行脚本之后，如果指定的文件存在，则删除该文件。</td>\n</tr>\n<tr>\n<td>cmd</td>\n<td>指定要执行的命令。</td>\n</tr>\n<tr>\n<td>decrypt</td>\n<td>指定要解密的源文件。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"user模块\">user模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/user_module.html#ansible-collections-ansible-builtin-user-module\">user模块</a>主要用于在远程服务器上创建、修改、删除用户，可以指定用户的名称、密码、uid、gid、home、shell等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：创建用户</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m user -a <span class=\"string\">&quot;name=nginx group=nginx shell=/sbin/nologin create_home=no&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># user.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">创建用户</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加用户</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span> <span class=\"comment\"># 用户名称</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span> <span class=\"comment\"># 指定用户shell,非登录用户</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span> <span class=\"comment\"># 不创建用户主目录</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用参数说明:<code>ansible-doc -s user</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>append</td>\n<td>是否将用户添加到现有组，而不是替换组。</td>\n</tr>\n<tr>\n<td>comment</td>\n<td>对用户的注释信息。</td>\n</tr>\n<tr>\n<td>createhome</td>\n<td>是否创建用户的家目录。</td>\n</tr>\n<tr>\n<td>expires</td>\n<td>用户帐户过期日期。</td>\n</tr>\n<tr>\n<td>force</td>\n<td>是否强制创建或更改用户帐户。</td>\n</tr>\n<tr>\n<td>generate_ssh_key</td>\n<td>是否生成用户的 SSH 密钥对。</td>\n</tr>\n<tr>\n<td>group</td>\n<td>用户所属组的名称或 ID。</td>\n</tr>\n<tr>\n<td>groups</td>\n<td>用户所属的其他组。</td>\n</tr>\n<tr>\n<td>home</td>\n<td>用户的家目录路径。</td>\n</tr>\n<tr>\n<td>login_class</td>\n<td>用户登录类。</td>\n</tr>\n<tr>\n<td>move_home</td>\n<td>是否在更改用户家目录路径时移动其内容。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>用户的名称。</td>\n</tr>\n<tr>\n<td>non_unique</td>\n<td>允许用户具有非唯一的数字 ID。</td>\n</tr>\n<tr>\n<td>password</td>\n<td>用户的密码哈希值或加密后的密码。</td>\n</tr>\n<tr>\n<td>remove</td>\n<td>是否删除用户。</td>\n</tr>\n<tr>\n<td>shell</td>\n<td>用户的 shell。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>用户帐户的状态。</td>\n</tr>\n<tr>\n<td>system</td>\n<td>是否为系统用户。</td>\n</tr>\n<tr>\n<td>uid</td>\n<td>用户的数字 ID。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>state</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">present：表示要求指定的用户账户存在。如果指定的用户账户不存在，则 Ansible 将会创建该账户。如果用户账户已经存在，则不执行任何操作。</span><br><span class=\"line\">absent：表示要求指定的用户账户不存在。如果指定的用户账户存在，则 Ansible 将会删除该账户。如果用户账户不存在，则不执行任何操作。</span><br></pre></td></tr></table></figure>\n<h3 id=\"get-url模块\">get_url模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/get_url_module.html#ansible-collections-ansible-builtin-get-url-module\">get_url模块</a>负责下载文件到目标主机。</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m get_url -a <span class=\"string\">&quot;url=https://www.example.com dest=/tmp&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># get_url.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">下载文件到目标主机的指定目录</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Download</span> <span class=\"string\">files</span> <span class=\"string\">from</span> <span class=\"string\">remote</span> <span class=\"string\">host</span></span><br><span class=\"line\">      <span class=\"attr\">get_url:</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">https://www.example.com/file.conf</span></span><br><span class=\"line\">        <span class=\"attr\">dest:</span> <span class=\"string\">/tmp</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>主要参数说明:<code>ansible-doc -s get_url</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>要下载的文件的 URL 地址。</td>\n</tr>\n<tr>\n<td>dest</td>\n<td>下载文件保存的目标路径。</td>\n</tr>\n<tr>\n<td>force</td>\n<td>是否强制覆盖目标路径中的文件。可选值为 yes 或 no。默认为 yes。</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>下载超时时间，单位为秒。默认为 10 秒。</td>\n</tr>\n<tr>\n<td>validate_certs</td>\n<td>是否验证 SSL 证书。可选值为 yes 或 no。默认为 yes。</td>\n</tr>\n<tr>\n<td>owner</td>\n<td>下载后文件的所有者。</td>\n</tr>\n<tr>\n<td>group</td>\n<td>下载后文件的所属组。</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>下载后文件的权限模式。</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>是否创建备份文件。可选值为 yes 或 no。默认为 no。</td>\n</tr>\n<tr>\n<td>headers</td>\n<td>附加的 HTTP 请求头。</td>\n</tr>\n<tr>\n<td>force_basic_auth</td>\n<td>是否强制使用 HTTP 基本身份验证。可选值为 yes 或 no。默认为 yes。</td>\n</tr>\n<tr>\n<td>http_agent</td>\n<td>用于 HTTP 请求的代理。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"lineinfile模块\">lineinfile模块</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html#ansible-collections-ansible-builtin-lineinfile-module\">lineinfile模块</a>主要用于在远程主机上查找和替换文件中的行，可以指定要查找的行、要替换的行、要添加的行等信息，等等</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：设置环境变量，需要注意的是此时环境变量在剧本的上下文中是不生效的，如果需要在剧本上下文生效的环境变量，可以使用 <code>shell</code> 模块</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webservers -m lineinfile -a <span class=\"string\">&quot;path=/etc/profile line=&#x27;PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin&#x27; state=present backup=yes&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># lineinfile.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">设置环境变量</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">设置环境变量</span></span><br><span class=\"line\">      <span class=\"attr\">lineinfile:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/etc/profile</span></span><br><span class=\"line\">        <span class=\"attr\">line:</span> <span class=\"string\">&#x27;PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">backup:</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>主要参数说明:<code>ansible-doc -s lineinfile</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>path</td>\n<td>要修改的文件的路径。</td>\n</tr>\n<tr>\n<td>line</td>\n<td>要添加、修改或删除的行内容。</td>\n</tr>\n<tr>\n<td>state</td>\n<td>指定要执行的操作。</td>\n</tr>\n<tr>\n<td>regexp</td>\n<td>用于匹配行的正则表达式。</td>\n</tr>\n<tr>\n<td>search_string</td>\n<td>用于匹配行的字符串。</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>是否创建备份文件。可选值为 yes 或 no。默认为 no。</td>\n</tr>\n<tr>\n<td>backrefs</td>\n<td>是否允许在 <code>regexp</code> 中使用反向引用。</td>\n</tr>\n<tr>\n<td>insertbefore</td>\n<td>指定一个行，将新行插入到它之前。</td>\n</tr>\n<tr>\n<td>insertafter</td>\n<td>指定一个行，将新行插入到它之后。</td>\n</tr>\n<tr>\n<td>firstmatch</td>\n<td>是否只匹配第一个匹配项。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>state说明</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">present：确保指定的行存在于文件中。如果文件中不存在指定的行，则会添加该行。如果文件中已经存在该行，则不做任何改变。</span><br><span class=\"line\">absent：确保指定的行不存在于文件中。如果文件中存在指定的行，则会将该行删除。如果文件中不存在该行，则不做任何改变。</span><br></pre></td></tr></table></figure>\n<h2 id=\"ansible-playbook-剧本\">ansible-playbook:剧本</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html#ansible-playbook\">ansible-playbook</a>是Ansible的核心命令，用于执行playbook文件，playbook文件是Ansible执行任务的最小单元，一个playbook文件可以包含多个play，每个play可以包含多个task，每个task可以包含多个module，每个module可以执行一个操作，比如创建目录、安装软件包、启动服务、执行脚本等</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://ansible-tran.readthedocs.io/en/latest/docs/playbooks_intro.html\">Ansible中文全文指南–Playbooks</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>上面在介绍ansible模块时，我们已经编写了一些playbook文件，就是那些yml文件，运行时也是通过ansible-playbook命令执行的，但是基本上都是单个任务单个模块，下面我们来看一个复杂一些的示例</p>\n</li>\n<li class=\"lvl-2\">\n<p>示例：安装nginx并配置</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># playbook.yml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">gcc,zlib-devel,pcre-devel,openssl-devel</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">installed</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wget</span> <span class=\"string\">nginx</span> <span class=\"string\">tar.gz</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">wget</span> <span class=\"string\">https://nginx.org/download/nginx-1.22.1.tar.gz</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tar</span> <span class=\"string\">-zxvf</span> <span class=\"string\">nginx-1.22.1.tar.gz</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">tar</span> <span class=\"string\">-zxvf</span> <span class=\"string\">nginx-1.22.1.tar.gz</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">add</span> <span class=\"string\">user</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">configure</span> <span class=\"string\">,make</span> <span class=\"string\">and</span> <span class=\"string\">make</span> <span class=\"string\">install</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">cd</span> <span class=\"string\">nginx-1.22.1;./configure</span> <span class=\"string\">--prefix=/usr/local/nginx</span> <span class=\"string\">--with-http_stub_status_module</span> <span class=\"string\">--with-http_ssl_module</span> <span class=\"string\">--user=nginx;make</span> <span class=\"string\">-j4;make</span> <span class=\"string\">-j4</span> <span class=\"string\">install;</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">start</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">/usr/local/nginx/sbin/nginx</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>优化1</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>问题</strong>: 上面的剧本有个问题，就是如果系统已经安装了nginx，则运行这个剧本还是会重新安装<br>\n<strong>解决方法</strong>: 先判断nginx是否已经安装，如果已经安装，直接跳过安装步骤，直接执行启动命令，否则执行安装步骤，然后再执行启动命令</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已安装Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">/usr/local/nginx/sbin/nginx</span> <span class=\"string\">-v</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_installed</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">      <span class=\"attr\">loop:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">gcc</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">pcre-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl-devel</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_installed.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未安装时执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已启动Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">ps</span> <span class=\"string\">aux</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">nginx</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">grep</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_status</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">下载Nginx源码包</span></span><br><span class=\"line\">      <span class=\"attr\">get_url:</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">https://nginx.org/download/nginx-1.22.1.tar.gz</span></span><br><span class=\"line\">        <span class=\"attr\">dest:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_installed.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未安装时执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">解压Nginx源码包</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">tar</span> <span class=\"string\">-zxvf</span> <span class=\"string\">nginx-1.22.1.tar.gz</span></span><br><span class=\"line\">        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_installed.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未安装时执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">编译Nginx并安装</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          cd nginx-1.22.1</span></span><br><span class=\"line\"><span class=\"string\">          ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx</span></span><br><span class=\"line\"><span class=\"string\">          make -j4</span></span><br><span class=\"line\"><span class=\"string\">          make -j4 install</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_installed.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未安装时执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">/usr/local/nginx/sbin/nginx</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_status.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未启动时执行</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>register :用于将命令执行的结果保存到变量中，我们可以调用变量的属性，比如rc表示命令返回的状态码($?)，stdout表示命令的输出，stderr表示命令的错误输出<br>\nignore_errors :用于忽略错误<br>\nloop :用于循环列表<br>\nwhen :用于判断条件，只有条件满足时才执行</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>优化2</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>问题</strong>: 上面的步骤有点多，比如下载、解压、编译nginx，这些都是在没有安装nginx的情况下要运行的任务<br>\n<strong>解决方法</strong>: 使用shell模块可以将这些步骤封装成一个任务</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已安装Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">/usr/local/nginx/sbin/nginx</span> <span class=\"string\">-v</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_installed</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">      <span class=\"attr\">loop:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">gcc</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">pcre-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl-devel</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_installed.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未安装时执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已启动Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">ps</span> <span class=\"string\">aux</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">nginx</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">grep</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_status</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Nginx并安装</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          wget https://nginx.org/download/nginx-1.22.1.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          tar -zxvf nginx-1.22.1.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          cd nginx-1.22.1</span></span><br><span class=\"line\"><span class=\"string\">          ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx</span></span><br><span class=\"line\"><span class=\"string\">          make -j4</span></span><br><span class=\"line\"><span class=\"string\">          make -j4 install</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_installed.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未安装时执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">/usr/local/nginx/sbin/nginx</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_status.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span>  <span class=\"comment\"># 只有当Nginx未启动时执行</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>优化3</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>问题</strong>: 上面的剧本虽然已经满足了我的需求，但是不够简练，因为很多任务并不是主要任务，我需要在每个任务中进行条件判断来决定是否执行该任务，能否只保留主要任务，其它任务只有当这些主要任务成功运行了才会被运行呢？比如这里的主要任务就是两个：1-判断是否安装了nginx，没安装就去安装，2-判断是否启动了nginx，没启动就去启动<br>\n<strong>解决方法</strong>: 使用基于handlers的notify语句，这样可以减少重复执行任务的次数</p>\n</blockquote>\n<blockquote>\n<p><strong>何为handlers</strong><br>\nHandler 本身是一种非同步的 callback function ，在这里则是指关连于特定 tasks 的事件 (event) 触发机制。当关联 handler 的 tasks 状态为被改变 (changed) 且都已被执行时，才会触发一次</p>\n</blockquote>\n<blockquote>\n<p><strong>何为 tasks 状态为被改变 (changed)</strong><br>\n在Ansible中，task的状态会根据任务执行的结果而改变。当一个任务成功完成并且使得系统的状态与预期不同（即执行了一些更改），那么这个任务的状态就会被标记为&quot;changed&quot;。<br>\n具体来说，task状态为&quot;changed&quot;的条件包括但不限于以下情况：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件变更：例如复制、创建、删除文件等操作导致了文件系统的变更。</span><br><span class=\"line\">服务状态变更：例如启动、停止、重启服务等操作导致了服务状态的改变。</span><br><span class=\"line\">配置更改：例如修改配置文件、添加配置项等操作导致了系统配置的改变。</span><br><span class=\"line\">软件包安装/卸载：例如安装新的软件包或者删除已安装的软件包导致了系统软件状态的改变。</span><br><span class=\"line\">权限变更：例如修改文件权限、更改用户组、更改用户等操作导致了系统权限的改变。</span><br><span class=\"line\">当一个或多个任务的状态被标记为&quot;changed&quot;时，与这些任务关联的handlers会被触发执行。这样可以确保在所有相关的任务都完成并且导致了系统状态的改变时，才执行后续的处理操作，从而保证了任务的一致性和可靠性。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">判断是否存在nginx安装目录，不存在就安装nginx</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/usr/local/nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">directory</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span>  <span class=\"comment\"># 执行通知任务，顺序为从下到上</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">Nginx安装</span> <span class=\"comment\"># 匹配任务name</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已启动Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">ps</span> <span class=\"string\">aux</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">nginx</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">grep</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_status</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查是否需要启动nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;start nginx&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_status.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span> <span class=\"comment\"># 只有当条件满足时才会运行该任务</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span>  <span class=\"comment\"># 运行任务后只有状态为changed才会发送notify给handler</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span>  <span class=\"comment\"># handlers是一类特殊任务，当有notify时，会自动执行该任务</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">      <span class=\"attr\">loop:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">gcc</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">pcre-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl-devel</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Nginx安装</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          wget https://nginx.org/download/nginx-1.22.1.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          tar -zxvf nginx-1.22.1.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          cd nginx-1.22.1</span></span><br><span class=\"line\"><span class=\"string\">          ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx</span></span><br><span class=\"line\"><span class=\"string\">          make -j4</span></span><br><span class=\"line\"><span class=\"string\">          make -j4 install</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">chdir:</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">/usr/local/nginx/sbin/nginx</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>优化4</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>问题</strong>: 上面的剧本中nginx的安装版本和安装路径都是写死的，能否动态配置呢？<br>\n<strong>解决方法</strong>: 提取变量，使用vars</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">vars:</span> <span class=\"comment\"># 定义变量</span></span><br><span class=\"line\">    <span class=\"attr\">nginx_version:</span> <span class=\"string\">&quot;1.22.1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">work_dir:</span> <span class=\"string\">&quot;/usr/local&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx_install_path:</span> <span class=\"string\">&quot;/usr/local/nginx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">判断是否存在nginx安装目录，不存在就安装nginx</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>&quot;</span> <span class=\"comment\"># 变量一定要双括号</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">directory</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span>  <span class=\"comment\"># 执行通知任务，顺序为从下到上</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">Nginx安装</span> <span class=\"comment\"># 匹配任务name</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已启动Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">ps</span> <span class=\"string\">aux</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">nginx</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">grep</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_status</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查是否需要启动nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;start nginx&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_status.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span>  <span class=\"comment\"># handlers是一类特殊任务，当有notify时，会自动执行该任务</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">      <span class=\"attr\">loop:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">gcc</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">pcre-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl-devel</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Nginx安装</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          wget https://nginx.org/download/nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          tar -zxvf nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          cd nginx-&#123;&#123; nginx_version &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">          ./configure --prefix=&#123;&#123; nginx_install_path &#125;&#125; --with-http_stub_status_module --with-http_ssl_module --user=nginx</span></span><br><span class=\"line\"><span class=\"string\">          make -j4</span></span><br><span class=\"line\"><span class=\"string\">          make -j4 install</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">chdir:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; work_dir &#125;&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/sbin/nginx&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认</span></span><br><span class=\"line\">ansible-playbook nginx.yml</span><br><span class=\"line\"><span class=\"comment\"># 修改变量</span></span><br><span class=\"line\">ansible-playbook nginx.yml -e <span class=\"string\">&quot;nginx_version=1.24.0&quot;</span> -e <span class=\"string\">&quot;work_dir=/root&quot;</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">除了我们自己定义的变量，我们也可以使用Ansible内置的变量，如<code>ansible_hostname</code>、<code>ansible_fqdn</code>等。</li>\n<li class=\"lvl-2\">我们可以基于<code>ansible_facts</code>变量获取主机信息，如IP地址、MAC地址、操作系统版本等。也就是通过<code>setup</code>模块获取的信息。</li>\n<li class=\"lvl-2\">Ansible内置的变量可以参考<a href=\"https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html\">官方文档</a>。</li>\n</ul>\n</div>\n<h2 id=\"ansible-playbook-Template\">ansible-playbook:Template</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible Playbook Template是一种Ansible的特性，它允许您在Playbook中使用<code>Jinja2</code>模板语言来动态生成配置文件或其他文本文件。通过使用模板，您可以根据变量、条件、循环等动态信息来生成目标文件，从而使配置文件更具可扩展性和灵活性。</p>\n</li>\n<li class=\"lvl-2\">\n<p>下面是使用Ansible Playbook Template的一些常见用法和特性：</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Jinja2模板语言: Ansible Playbook Template使用Jinja2模板语言，这是一种功能强大的模板引擎，支持变量替换、条件语句、循环语句等功能。</span><br><span class=\"line\">变量替换: 您可以在模板中使用Ansible的变量来替换文本中的占位符。这使得您可以根据不同的环境或条件生成不同的配置文件。</span><br><span class=\"line\">条件语句: 您可以在模板中使用条件语句来根据不同的条件生成不同的文本。这允许您根据需要灵活地调整生成的配置文件。</span><br><span class=\"line\">循环语句: 您可以在模板中使用循环语句来对列表或字典中的元素进行迭代，从而生成重复的文本块。</span><br><span class=\"line\">包含其他模板文件: 您可以在一个模板中包含其他模板文件，从而使模板更加模块化和易于管理。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Jinja2模板文件后缀为<code>.j2</code>，常用语法如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印变量</span></span><br><span class=\"line\">&#123;&#123; index_title &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># for循环</span></span><br><span class=\"line\">&#123;% <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> index_for_array %&#125;</span><br><span class=\"line\">&lt;p&gt;show &#123;&#123; key &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if判断</span></span><br><span class=\"line\">&#123;% <span class=\"keyword\">if</span> blog_href_show %&#125;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">&lt;a href=<span class=\"string\">&quot;&#123;&#123; blog_href &#125;&#125;&quot;</span>&gt;&#123;&#123; index_title &#125;&#125;&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you <span class=\"keyword\">for</span> using &#123;&#123; index_title &#125;&#125;.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>结合上面部署nginx的示例，我这里增加一个任务，就是替换nginx发布目录下的index.html，然后重启nginx，这里给出<code>index.html.j2</code></p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&#123;&#123; index_title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">html</span> &#123; <span class=\"attribute\">color</span>-scheme: light dark; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">35em</span>; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"attribute\">font-family</span>: Tahoma, Verdana, Arial, sans-serif; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123;&#123; blog_img &#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% for key in index_for_array %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>show &#123;&#123; key &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% if blog_href_show %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123;&#123; blog_href &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; index_title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>Thank you for using &#123;&#123; index_title &#125;&#125;.<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>接着我们修改剧本yml</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">vars:</span> <span class=\"comment\"># 定义变量</span></span><br><span class=\"line\">    <span class=\"attr\">nginx_version:</span> <span class=\"string\">&quot;1.22.1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">work_dir:</span> <span class=\"string\">&quot;/usr/local&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx_install_path:</span> <span class=\"string\">&quot;/usr/local/nginx&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">index_title:</span> <span class=\"string\">&quot;hanqf&#x27;s blog&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">index_for_array:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">hello</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">world</span></span><br><span class=\"line\">    <span class=\"attr\">blog_href_show:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">blog_href:</span> <span class=\"string\">&quot;https://blog.hanqunfeng.com&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">blog_img:</span> <span class=\"string\">&quot;me.png&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">判断是否存在nginx安装目录，不存在就安装nginx</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>&quot;</span> <span class=\"comment\"># 变量一定要双括号</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">directory</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span>  <span class=\"comment\"># 执行通知任务，顺序为从下到上</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">Nginx安装</span> <span class=\"comment\"># 匹配任务name</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已启动Nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">ps</span> <span class=\"string\">aux</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">nginx</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">grep</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">nginx_status</span></span><br><span class=\"line\">      <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查是否需要启动nginx</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;start nginx&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">when:</span> <span class=\"string\">nginx_status.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">上传图片</span></span><br><span class=\"line\">      <span class=\"attr\">copy:</span></span><br><span class=\"line\">        <span class=\"attr\">src:</span> <span class=\"string\">me.png</span> <span class=\"comment\"># 与yml在同一目录</span></span><br><span class=\"line\">        <span class=\"attr\">dest:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/html/me.png&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">发布index.html</span></span><br><span class=\"line\">      <span class=\"attr\">template:</span></span><br><span class=\"line\">        <span class=\"attr\">src:</span> <span class=\"string\">index.html.j2</span> <span class=\"comment\"># 与yml在同一目录</span></span><br><span class=\"line\">        <span class=\"attr\">dest:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/html/index.html&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">force:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 强制覆盖</span></span><br><span class=\"line\">        <span class=\"attr\">backup:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 覆盖前备份</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">重启Nginx服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span>  <span class=\"comment\"># handlers是一类特殊任务，当有notify时，会自动执行该任务</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">        <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">        <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">      <span class=\"attr\">yum:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">      <span class=\"attr\">loop:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">gcc</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">zlib-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">pcre-devel</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">openssl-devel</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Nginx安装</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          wget https://nginx.org/download/nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          tar -zxvf nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">          cd nginx-&#123;&#123; nginx_version &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">          ./configure --prefix=&#123;&#123; nginx_install_path &#125;&#125; --with-http_stub_status_module --with-http_ssl_module --user=nginx</span></span><br><span class=\"line\"><span class=\"string\">          make -j4</span></span><br><span class=\"line\"><span class=\"string\">          make -j4 install</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">chdir:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; work_dir &#125;&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/sbin/nginx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">重启Nginx服务</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span></span><br><span class=\"line\">        <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          pkill nginx</span></span><br><span class=\"line\"><span class=\"string\">          &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>替换之后的效果</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hanqf&#x27;s blog<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">html</span> &#123; <span class=\"attribute\">color</span>-scheme: light dark; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">35em</span>; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"attribute\">font-family</span>: Tahoma, Verdana, Arial, sans-serif; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;me.png&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>show hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>show world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://blog.hanqunfeng.com&quot;</span>&gt;</span>hanqf&#x27;s blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>Thank you for using hanqf&#x27;s blog.<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>template模块</code>的常用参数说明 <code>ansible-doc  -s template</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>必需</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>src</td>\n<td>是</td>\n<td>无</td>\n<td>模板文件的路径。</td>\n</tr>\n<tr>\n<td>dest</td>\n<td>是</td>\n<td>无</td>\n<td>目标文件的路径。</td>\n</tr>\n<tr>\n<td>force</td>\n<td>否</td>\n<td>false</td>\n<td>如果目标文件已经存在，是否强制覆盖。</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>否</td>\n<td>false</td>\n<td>如果设置为true，则在覆盖目标文件之前创建备份。</td>\n</tr>\n<tr>\n<td>unsafe_writes</td>\n<td>否</td>\n<td>false</td>\n<td>如果设置为true，则会跳过文件的暂时性写入保护（如确保在写入文件之前不会更改其内容）。</td>\n</tr>\n<tr>\n<td>newline_sequence</td>\n<td>否</td>\n<td>\\n</td>\n<td>用于生成文件时的换行符序列。</td>\n</tr>\n<tr>\n<td>validate</td>\n<td>否</td>\n<td>无</td>\n<td>要应用于生成文件的验证器脚本的路径。</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>否</td>\n<td>无</td>\n<td>目标文件的权限模式。</td>\n</tr>\n<tr>\n<td>owner</td>\n<td>否</td>\n<td>无</td>\n<td>目标文件的所有者。</td>\n</tr>\n<tr>\n<td>group</td>\n<td>否</td>\n<td>无</td>\n<td>目标文件的所属组。</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这里要注意<code>template模块</code>与<code>copy</code>模块的区别，前者在上传时会进行变量替换。</p>\n</li>\n</ul>\n<h2 id=\"ansible-playbook-Role\">ansible-playbook:Role</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible中的Role是一种组织和管理剧本的方法，它允许您将相关的任务、变量、文件和处理程序组合到一个可重用的单元中。Role使得您可以更轻松地管理和组织大型的Ansible项目，并促进了可维护性和复用性。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Role的特性</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组织性：Role允许您将相关的任务和文件组织在一起，使得代码更易于理解和维护。每个Role通常都有一个特定的目的，例如安装特定的软件、配置服务或执行特定的系统管理任务。</span><br><span class=\"line\"></span><br><span class=\"line\">可重用性：Role可以被设计成可重用的组件，可以在不同的项目中多次使用。这样一来，您可以将常见的功能和配置封装到Role中，并在需要时轻松地调用它们，从而提高了代码的复用性和可移植性。</span><br><span class=\"line\"></span><br><span class=\"line\">结构化布局：Ansible推荐一种特定的目录结构来组织Role，包括tasks、handlers、templates、files、vars和defaults等目录。这种结构化布局有助于更清晰地分离任务、变量、文件和处理程序，并使Role更易于管理和维护。</span><br><span class=\"line\"></span><br><span class=\"line\">参数化：Role可以使用变量来接受外部输入，从而使其更加灵活和通用。通过参数化，您可以定制Role的行为，使其适用于不同的环境和需求。</span><br><span class=\"line\"></span><br><span class=\"line\">依赖关系：Role可以定义依赖关系，即一个Role可能依赖于另一个Role。这种依赖关系使得您可以构建复杂的系统配置，而不必重复编写相同的代码。</span><br><span class=\"line\"></span><br><span class=\"line\">可测试性：由于Role是可重用的组件，因此它们也是可测试的。您可以编写测试用例来验证Role的行为是否符合预期，并确保在修改代码时不会破坏现有功能。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://github.com/ansible/ansible-examples\">ansible-examples</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>创建role</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录下创建一个名称为nginx-install的role，实际上就是创建一个名称为nginx-install的目录结构</span></span><br><span class=\"line\">ansible-galaxy init nginx-install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在指定目录下创建role</span></span><br><span class=\"line\">ansible-galaxy init --init-path /usr/local nginx-install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># nginx-install目录结构</span></span><br><span class=\"line\">$ tree nginx-install/</span><br><span class=\"line\">nginx-install/</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── defaults</span><br><span class=\"line\">│   └── main.yml</span><br><span class=\"line\">├── files</span><br><span class=\"line\">├── handlers</span><br><span class=\"line\">│   └── main.yml</span><br><span class=\"line\">├── meta</span><br><span class=\"line\">│   └── main.yml</span><br><span class=\"line\">├── tasks</span><br><span class=\"line\">│   └── main.yml</span><br><span class=\"line\">├── templates</span><br><span class=\"line\">├── tests</span><br><span class=\"line\">│   ├── inventory</span><br><span class=\"line\">│   └── test.yml</span><br><span class=\"line\">└── vars</span><br><span class=\"line\">    └── main.yml</span><br><span class=\"line\"></span><br><span class=\"line\">8 directories, 8 files</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">files：存放由copy或script模块等调用的文件</span><br><span class=\"line\">templates：template模块查找所需要模板文件的目录</span><br><span class=\"line\">tasks：定义task、role的基本元素，至少应该包含一个名为main.yml的文件。其他文件需要在此文件中通过include进行包含</span><br><span class=\"line\">handlers：至少应该包含一个名为main.yml的文件，其他文件需要在此文件中通过include进行包含</span><br><span class=\"line\">vars：定义变量，至少应该包含一个名为main.yml的文件，其他文件需要在此文件中通过include进行包含</span><br><span class=\"line\">meta：定义当前角色的特殊设定及其依赖关系，至少应该包含一个名为main.yml的文件，其他文件需在此文件中通过include进行包含</span><br><span class=\"line\">default：设定默认变量时使用此目录中的main.yml文件，比vars的优先级低</span><br><span class=\"line\">tests：定义测试用例，至少应该包含一个名为inventory的文件，其他文件需要在此文件中通过include进行包含</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ansible查找role的路径，推荐放到<code>/etc/ansible/roles</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">pwd</span>)/roles</span><br><span class=\"line\">/$(<span class=\"built_in\">whoami</span>)/.ansible/roles</span><br><span class=\"line\">/usr/share/ansible/roles</span><br><span class=\"line\">/etc/ansible/roles</span><br><span class=\"line\">$(<span class=\"built_in\">pwd</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"我们将上面安装nginx那个剧本修改为role的方式\">我们将上面安装nginx那个剧本修改为role的方式</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>nginx-install/tasks/main.yml</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># tasks file for nginx-install</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">判断是否存在nginx安装目录，不存在就安装nginx</span></span><br><span class=\"line\">  <span class=\"attr\">file:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">state:</span> <span class=\"string\">directory</span></span><br><span class=\"line\">  <span class=\"attr\">notify:</span>  <span class=\"comment\"># 执行通知任务，顺序为从下到上</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Nginx安装</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查系统是否已启动Nginx</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span> <span class=\"string\">ps</span> <span class=\"string\">aux</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">nginx</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">-v</span> <span class=\"string\">grep</span></span><br><span class=\"line\">  <span class=\"attr\">register:</span> <span class=\"string\">nginx_status</span></span><br><span class=\"line\">  <span class=\"attr\">ignore_errors:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">检查是否需要启动nginx</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;start nginx&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">nginx_status.rc</span> <span class=\"type\">!=</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">notify:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">上传图片</span></span><br><span class=\"line\">  <span class=\"attr\">copy:</span></span><br><span class=\"line\">    <span class=\"attr\">src:</span> <span class=\"string\">me.png</span> <span class=\"comment\"># 与yml在同一目录</span></span><br><span class=\"line\">    <span class=\"attr\">dest:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/html/me.png&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">发布index.html</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">src:</span> <span class=\"string\">index.html.j2</span> <span class=\"comment\"># 与yml在同一目录</span></span><br><span class=\"line\">    <span class=\"attr\">dest:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/html/index.html&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">force:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 强制覆盖</span></span><br><span class=\"line\">    <span class=\"attr\">backup:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 覆盖前备份</span></span><br><span class=\"line\">  <span class=\"attr\">notify:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">重启Nginx服务</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>nginx-install/handlers/main.yml</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># handlers file for nginx-install</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">添加nginx用户</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">/sbin/nologin</span></span><br><span class=\"line\">    <span class=\"attr\">createhome:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装Nginx依赖软件包</span></span><br><span class=\"line\">  <span class=\"attr\">yum:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">state:</span> <span class=\"string\">present</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">gcc</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">zlib</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">zlib-devel</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">pcre-devel</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">openssl</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">openssl-devel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Nginx安装</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span></span><br><span class=\"line\">    <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">      wget https://nginx.org/download/nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">      tar -zxvf nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz</span></span><br><span class=\"line\"><span class=\"string\">      cd nginx-&#123;&#123; nginx_version &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      ./configure --prefix=&#123;&#123; nginx_install_path &#125;&#125; --with-http_stub_status_module --with-http_ssl_module --user=nginx</span></span><br><span class=\"line\"><span class=\"string\">      make -j4</span></span><br><span class=\"line\"><span class=\"string\">      make -j4 install</span></span><br><span class=\"line\"><span class=\"string\"></span>    <span class=\"attr\">chdir:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; work_dir &#125;&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">启动Nginx服务</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span></span><br><span class=\"line\">    <span class=\"attr\">cmd:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; nginx_install_path &#125;&#125;</span>/sbin/nginx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">重启Nginx服务</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span></span><br><span class=\"line\">    <span class=\"attr\">cmd:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">      pkill nginx</span></span><br><span class=\"line\"><span class=\"string\">      &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>nginx-install/vars/main.yml</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># vars file for nginx-install</span></span><br><span class=\"line\"><span class=\"attr\">nginx_version:</span> <span class=\"string\">&quot;1.22.1&quot;</span></span><br><span class=\"line\"><span class=\"attr\">work_dir:</span> <span class=\"string\">&quot;/usr/local&quot;</span></span><br><span class=\"line\"><span class=\"attr\">nginx_install_path:</span> <span class=\"string\">&quot;/usr/local/nginx&quot;</span></span><br><span class=\"line\"><span class=\"attr\">index_title:</span> <span class=\"string\">&quot;hanqf&#x27;s blog&quot;</span></span><br><span class=\"line\"><span class=\"attr\">index_for_array:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">hello</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">world</span></span><br><span class=\"line\"><span class=\"attr\">blog_href_show:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">blog_href:</span> <span class=\"string\">&quot;https://blog.hanqunfeng.com&quot;</span></span><br><span class=\"line\"><span class=\"attr\">blog_img:</span> <span class=\"string\">&quot;me.png&quot;</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">上面介绍的<code>tasks</code>、<code>handlers</code>，其目录中都含有一个main.yml文件，这个文件是必须存在的</li>\n<li class=\"lvl-2\">但是如果配置的内容比较多，都写在main.yml文件中，那么这个文件就显得有点臃肿，所以可以将这些内容拆分成多个文件，然后在main.yml文件中通过<code>include</code>进行包含</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include:</span> <span class=\"string\">other1.yml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include:</span> <span class=\"string\">other2.yml</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\"><code>tasks</code>或者<code>handlers中</code>还可以使用<code>include_tasks</code>进行包含</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include_tasks:</span> <span class=\"string\">other1.yml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include_tasks:</span> <span class=\"string\">other2.yml</span></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include_tasks:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">other1.yml</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">other2.yml</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p><code>vars</code>里也可以定义多个yml文件存储变量，然后在tasks中通过<code>include_vars</code>进行包含，注意，必须放在task的yml文件中</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此时不需要加上vars路径，会自动从vars目录下查找</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include_vars:</span> <span class=\"string\">&quot;v-other1.yml&quot;</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include_vars:</span> <span class=\"string\">&quot;v-other2.yml&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">include_vars:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">v-other1.yml</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">v-other2.yml</span></span><br></pre></td></tr></table></figure>\n</div>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将模板文件和图片文本保存到对应的路径</p>\n</li>\n</ul>\n<blockquote>\n<p>nginx-install/templates/index.html.j2<br>\nnginx-install/files/me.png</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>执行<br>\n<em><strong>假设我们将创建的角色安装到了<code>/etc/ansible/roles</code>下</strong></em></p>\n</li>\n</ul>\n<blockquote>\n<p>创建启动剧本<code>nginx-install-start.yml</code>，我们也可以修改<code>tests/test.yml</code></p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">安装nginx并配置</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span> <span class=\"string\">webservers</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">yes</span>  <span class=\"comment\"># 切换到root用户下执行</span></span><br><span class=\"line\">  <span class=\"attr\">roles:</span> <span class=\"comment\"># 调用role</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">nginx-install</span> <span class=\"comment\"># role名称</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>执行role</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook nginx-install-start.yml</span><br></pre></td></tr></table></figure>\n<h2 id=\"ansible-galaxy\">ansible-galaxy</h2>\n<h3 id=\"什么是ansible-galaxy\">什么是ansible-galaxy</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>用于从<a href=\"https://galaxy.ansible.com\">ansible-galaxy官网</a>上查找，下载<code>role</code>和<code>collection</code>的工具，如何下载和使用网站上都有说明。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://ansible.readthedocs.io/projects/galaxy-ng/en/latest/community/userguide/\">ansible-galaxy用户指南</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>我们也可以将自己创建好的<code>role</code>发布到<code>ansible-galaxy</code>上，可以参考 <a href=\"/2024/03/26/ansible-role-publish/\" title=\"Ansible Role Publish To Galaxy\">Ansible Role Publish To Galaxy</a></p>\n</li>\n</ul>\n<h3 id=\"role\">role</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 搜索role</span></span><br><span class=\"line\">ansible-galaxy search mysql</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">ansible-galaxy role search mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看已经安装的role</span></span><br><span class=\"line\">ansible-galaxy list</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">ansible-galaxy role list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装role，默认安装到 ~/.ansible/roles 下</span></span><br><span class=\"line\">ansible-galaxy role install shaneholloman.redis</span><br><span class=\"line\"><span class=\"comment\"># 安装到指定路径</span></span><br><span class=\"line\">ansible-galaxy role install &lt;role-name&gt; -p &lt;path&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"collection\">collection</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ansible-galaxy同时支持下载 collection</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看已经安装的collection</span></span><br><span class=\"line\">ansible-galaxy collection list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装collection，，默认安装到 ~/.ansible/collections/ansible_collections 下</span></span><br><span class=\"line\">ansible-galaxy collection install saiello.kafka</span><br><span class=\"line\"><span class=\"comment\"># 安装到指定路径</span></span><br><span class=\"line\">ansible-galaxy collection install &lt;collection-name&gt; -p &lt;path&gt;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ansible Collection 是 Ansible 社区为了更好地管理和组织 Ansible 角色、模块、插件等内容而引入的概念。它可以被视为一种打包机制，用于将相关的 Ansible 内容打包成单独的单元，使得其更易于分享、安装和维护。</p>\n</li>\n<li class=\"lvl-2\">\n<p>具体来说，Ansible Collection 具有以下作用：</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组织和管理角色、模块和插件：通过 Collection，可以将相关的角色、模块和插件打包在一起，形成逻辑上的单元，提高了内容的组织性和可管理性。</span><br><span class=\"line\"></span><br><span class=\"line\">易于分享和分发：Ansible Collection 可以被轻松地分享和分发给其他用户。开发人员可以将自己的角色、模块打包成 Collection，并将其发布到 Ansible Galaxy 或其他集中式的仓库中，供其他用户使用。</span><br><span class=\"line\"></span><br><span class=\"line\">版本控制和更新：与角色相比，Collection 更容易进行版本控制和更新。开发人员可以为 Collection 指定版本，并在更新内容时发布新的版本，使得用户可以选择使用特定版本或者升级到最新版本。</span><br><span class=\"line\"></span><br><span class=\"line\">依赖管理：Collection 支持依赖管理，可以在 Collection 中指定依赖关系，确保相关的角色、模块和插件能够正常工作。</span><br><span class=\"line\"></span><br><span class=\"line\">提供文档和示例：开发人员可以将文档和示例代码与 Collection 打包在一起，使得用户更容易理解和使用其中的内容。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>总的来说，Ansible Collection 提供了一种更高级别的组织和管理方式，使得 Ansible 内容更易于分享、使用和维护，从而提高了 Ansible 的整体生态系统的健壮性和可用性。</p>\n</li>\n</ul>\n<h2 id=\"后记\">后记</h2>\n<p>关于ansible的知识点还有很多没有研究到，后面会慢慢补吧……</p>\n","content_text":"摘要 本文介绍Ansible的安装和使用。 本文基于CentOS8。 Ansible简介 Ansible 是一个开源的自动化运维工具，它基于 Python 语言开发，支持跨平台，可以运行在 Linux、Unix、Mac OS X、Windows 等多种系统环境。 Ansible简单易用，只需要在控制主机上安装 Ansible 并在被管理主机上安装 Python 2.6 或更高版本即可（现有的开源Linux系统基本都自带了Python ，所以相当于远程主机什么都不需要安装），就可以管理远程主机对其进行自动化配置、编排高级工作流程以支持应用程序部署、系统更新等。 Ansible可以用来管理Linux、Unix、Windows、OpenStack、AWS、GCP、OpenShift、Kubernetes等系统环境。 Ansible官网文档：https://docs.ansible.com/ansible/latest/ Ansible中文权威指南：https://ansible-tran.readthedocs.io/en/latest/index.html Ansible安装 Ansible安装方式有多种，这里介绍通过pip安装，当前系统中的python版本为python3.9。 1python3 -m pip install ansible 如果尚未安装pip，可以通过下面的方法进行安装 12wget https://bootstrap.pypa.io/get-pip.pypython3 get-pip.py 安装完成后，可以查看一下版本 12345678910ansible --versionansible [core 2.15.9] config file = None configured module search path = [&#x27;/root/.ansible/plugins/modules&#x27;, &#x27;/usr/share/ansible/plugins/modules&#x27;] ansible python module location = /usr/local/lib/python3.9/site-packages/ansible ansible collection location = /root/.ansible/collections:/usr/share/ansible/collections executable location = /usr/local/bin/ansible python version = 3.9.16 (main, Sep 8 2023, 00:00:00) [GCC 11.4.1 20230605 (Red Hat 11.4.1-2)] (/usr/bin/python3) jinja version = 3.1.3 libyaml = True Ansible常用参数： 参数 说明 -u 指定连接到主机的用户名 -i 指定连接hosts文件的路径 -k 指定连接到主机的密码 -m 指定模块名称，可以指定模块的参数，比如指定shell模块的参数：-m shell -a ‘ls -l’ -a 指定模块的参数，比如指定shell模块的参数：-m shell -a ‘ls -l’ -e 指定附加参数，比如指定shell端口： -e ‘ansible_port=22’ -b 切换到root权限 -f 指定并发连接数，默认为5，即可以同时管理5台主机 Ansible的配置文件 ansible的相关配置都是通过一个名为ansible.cfg的配置文件进行配置的，但我们通过pip安装是不会默认创建它的，实际上不创建这个配置文件也不影响ansible的执行，因为其会使用一些默认的配置，并且在大多数场景下默认的配置就能满足需求。 ansible查找配置文件的顺序，优先级由上到下逐渐降低 1234* ANSIBLE_CONFIG (一个环境变量)* ansible.cfg (位于当前目录中)* .ansible.cfg (位于家目录中)* /etc/ansible/ansible.cfg 如果需要修改默认配置，我们可以通过如下命令创建一份配置文件 1234567891011# 此时会创建一份所有配置项都以 ; 开头的配置文件，我们要修改那个配置，就删除其前面的 ; ，然后修改其值即可ansible-config init --disabled &gt; ansible.cfg# 查看当前的生效配置，注意绿色为默认配置，黄色为被修改的配置ansible-config dump# 查看帮助文件ansible-config list# 查看默认配置项的值和注释说明ansible-config init list 常用配置详解 12345678910111213141516171819202122# 通用默认配置段；[defaults]# 被控端IP或者DNS列表；inventory=/etc/ansible/hosts# Ansible默认搜寻模块的位置；library=&#123;&#123; ANSIBLE_HOME ~ &quot;/plugins/modules:/usr/share/ansible/plugins/modules&quot; &#125;&#125;# 并行进程数；forks=5# 是否允许切换为其它用户become=False# become=True时，通过sudo进行切换become_method=sudo# 切换为rootbecome_user=root# 搜索roles的路径roles_path=&#123;&#123; ANSIBLE_HOME ~ &quot;/roles:/usr/share/ansible/roles:/etc/ansible/roles&quot; &#125;&#125;# 日志路径，默认不输出log_path=# Ansible命令执行默认的模块；module_name=command# 是否检查远程主机密钥，默认为True，如果希望不检查可以将其设为False，可以加快连接速度host_key_checking=True Ansible的hosts配置 需要创建hosts文件，使用ansible时，ansible会到hosts文件中查找对应的远程主机配置，默认的查找路径为/etc/ansible/hosts，也可以通过ansible.cfg修改默认配置 hosts文件格式1 hosts文件格式如下： 1234567# 可以配置ip或主机名[webservers] # 分组名称10.10.2.4510.10.2.46[dbservers]10.10.2.4710.10.2.48 命令行里加上连接参数 1234# 执行命令，多个ip逗号分隔ansible -u username -m ping --private-key=~/.ssh/id_rsa -e &#x27;ansible_port=22&#x27; 10.10.2.45,10.10.2.46# 指定hosts文件路径ansible -i hosts -u username -m ping --private-key=~/.ssh/id_rsa -e &#x27;ansible_port=22&#x27; 10.10.2.45,10.10.2.46 hosts文件格式2 hosts文件里也可以配置连接参数 123[webservers]10.10.2.45 ansible_ssh_user=username ansible_ssh_private_key=~/.ssh/id_rsa ansible_ssh_port=2210.10.2.46 ansible_ssh_user=username ansible_ssh_private_key=~/.ssh/id_rsa ansible_ssh_port=22 此时命令行连接时就不需要指定连接参数了 1ansible -i hosts -u username -m ping 10.10.2.45,10.10.2.46 hosts文件格式3 ansible是基于ssh建立连接的，所以只要ssh能连上远程主机，ansible就可以管理远程主机，如果我们为ssh配置config文件，那么ansible就可以直接将config里的Host名称配置到hosts文件里，这样就不需要配置连接参数了，同时此时也可以支持跳板机。关于ssh的config详细说明可以参考Linux常用命令--ssh、scp与免密登录 配置~/.ssh/config 123456789101112131415161718192021# 跳板机Host forward User ec2-user HostName 53.22.227.200 Port 22 IdentityFile ~/.ssh/id_rsa# 远程主机Host remote-host User ec2-user HostName 10.9.5.123 Port 22 IdentityFile ~/.ssh/key.pem ProxyCommand ssh forward -W %h:%p# 远程主机 ,10.9网段的所有主机Host 10.9.* User ec2-user Port 22 IdentityFile ~/.ssh/key.pem ProxyCommand ssh forward -W %h:%p hosts文件 12345[webservers]forward # 与config中配置的Host名称一致remote-host # 与config中配置的Host名称一致10.9.5.123 # 匹配config中的网段10.9.5.124 # 匹配config中的网段 命令行 12345678910111213# 通过指定主机名或ipansible -m ping remote-hostansible -m ping 10.9.5.123# 通配符匹配，此时在匹配hosts中123和124ansible -m ping &quot;10.9.5.*&quot;# 通过分组名ansible -m ping webservers# 通过all指定hosts里的全部主机ansible -m ping all 查看hosts配置相关命令 列出所有组的配置ip信息 1ansible all --list-hosts 查看当前hosts中配置所有组名称 1ansible localhost -m debug -a &#x27;var=groups.keys()&#x27; 列出指定组的配置ip信息 1ansible dbservers --list-hosts Ansible模块 列出所有模块 123ansible-doc -l# 也可以指定模块名称ansible-doc -l | grep -i shell 查看指定模块的参数信息，如下查看shell模块的参数说明 1ansible-doc -s shell 查看模块的帮助信息，如下查看shell模块的帮助信息，这与官方文档一致:shell模块 1ansible-doc shell Ansible管理工具常用的模块：command、shell、file、user、copy、service、yum、synchronze、cron、setup、ping等。可以在命令行里指定各个模块的参数(ansible命令)，也可以将参数配置到yml文件里，然后在命令行里指定yml文件(ansible-playbook命令)，下面会结合两种方式一块介绍。网上有大把的关于ansible命令的使用说明，这里只简单介绍几个模块的使用方法，其他模块的使用方法可以参考ansible模块 下面介绍的都是ansible核心模块:ansible-core ping模块 ping模块用于测试主机的连通性，它会尝试连接到主机，验证可用的python，并在成功时返回“pong”，可以指定主机名或ip，也可以指定分组名，也可以指定all 通过命令行执行命令 1ansible webservers -m ping 通过yml文件执行命令 123456789101112# ping.yml--- # yml文件的开头，规定playbook的yml文件格式，必须以---开头(必须)，...结尾(非必须)- name: Ping web servers hosts: webservers # ip或组名，也可以配置all：匹配全部主机 tasks: - name: Ping the servers ping: register: command_output - name: 显示命令输出 debug: var: command_output.stdout_lines ansible-playbook 通过ansible-playbook命令，可以指定yml文件 ansible-playbook相关命令 123456789101112131415# 检查yml文件语法格式ansible-playbook --syntax-check ping.yml# 列出hostsansible-playbook --list-hosts ping.yml# 列出tagsansible-playbook --list-tags ping.yml# 列出taskansible-playbook --list-tasks ping.yml# 指定执行主机：--limit 或 -l，其必须是yml中hosts指定的子集ansible-playbook ping.yml --limit 192.168.20.23# 执行命令ansible-playbook ping.yml# 模拟执行，Ansible 会模拟执行任务，并输出执行结果，但不会对目标主机做出任何更改# 注意这个命令运行不报错并不能说明一定可以执行成功，因为这个命令是模拟执行的ansible-playbook ping.yml --check setup模块 该模块用于采集被管理设备信息并返回给服务端，后面跟--tree &lt;目录&gt;，可以将采集信息以ip为文件名保存至指定目录下 1234567891011# 查看全部信息ansible all -m setup# 只查看内存信息ansible all -m setup -a &quot;filter=*mem*&quot;# 只查看网络信息ansible all -m setup -a &quot;gather_subset=network&quot;# 保存信息至指定目录，这样会每个ip对应一个文件ansible all -m setup --tree ./ 常用参数说明：ansible-doc -s setup 参数 描述 gather_subset 指定要收集的系统信息的子集。可以是 all（所有信息）、network（网络信息）、hardware（硬件信息）等。默认为 all。 gather_timeout 设置信息收集的超时时间，单位为秒。默认为 10 秒。 filter 指定要收集的系统信息的过滤条件。可以是一个或多个标签，只收集匹配的信息。 fact_path 指定自定义 facts 文件的路径。 这里重点介绍一下gather_subset 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364all: 收集所有可用的系统信息。all_ipv4_addresses: 收集所有 IPv4 地址信息。all_ipv6_addresses: 收集所有 IPv6 地址信息。apparmor: 收集 AppArmor 相关信息。architecture: 收集系统架构信息。caps: 收集进程的 capabilities 信息。chroot: 收集 chroot 环境的信息。cmdline: 收集内核命令行参数信息。date_time: 收集日期和时间信息。default_ipv4: 收集默认的 IPv4 地址信息。default_ipv6: 收集默认的 IPv6 地址信息。devices: 收集系统设备信息。distribution: 收集发行版信息。distribution_major_version: 收集发行版主版本号。distribution_release: 收集发行版发行号。distribution_version: 收集发行版版本信息。dns: 收集 DNS 配置信息。effective_group_ids: 收集有效组 ID 信息。effective_user_id: 收集有效用户 ID 信息。env: 收集环境变量信息。facter: 收集 Facter 信息。fips: 收集 FIPS 相关信息。hardware: 收集硬件信息。interfaces: 收集网络接口信息。is_chroot: 收集是否处于 chroot 环境的信息。iscsi: 收集 iSCSI 配置信息。kernel: 收集内核信息。local: 收集本地配置信息。lsb: 收集 LSB 发行版信息。machine: 收集机器信息。machine_id: 收集机器 ID 信息。mounts: 收集挂载点信息。network: 收集网络相关信息。ohai: 收集 Ohai 信息。os_family: 收集操作系统家族信息。pkg_mgr: 收集包管理器信息。platform: 收集平台信息。processor: 收集处理器信息。processor_cores: 收集处理器核心数信息。processor_count: 收集处理器数量信息。python: 收集 Python 相关信息。python_version: 收集 Python 版本信息。real_user_id: 收集真实用户 ID 信息。selinux: 收集 SELinux 配置信息。service_mgr: 收集服务管理器信息。ssh_host_key_dsa_public: 收集 SSH DSA 公钥信息。ssh_host_key_ecdsa_public: 收集 SSH ECDSA 公钥信息。ssh_host_key_ed25519_public: 收集 SSH ED25519 公钥信息。ssh_host_key_rsa_public: 收集 SSH RSA 公钥信息。ssh_host_pub_keys: 收集 SSH 主机公钥信息。ssh_pub_keys: 收集 SSH 用户公钥信息。system: 收集系统相关信息。system_capabilities: 收集系统能力信息。system_capabilities_enforced: 收集系统能力强制信息。user: 收集用户账户信息。user_dir: 收集用户目录信息。user_gecos: 收集用户 GECOS 信息。user_gid: 收集用户组 ID 信息。user_id: 收集用户 ID 信息。user_shell: 收集用户 Shell 信息。user_uid: 收集用户 UID 信息。virtual: 收集虚拟化相关信息。virtualization_role: 收集虚拟化角色信息。virtualization_type: 收集虚拟化类型信息。 command模块 command模块为ansible默认模块，主要用于执行Linux基础命令，可以执行远程服务器命令执行、任务执行等操作。 command模块不支持管道符号、变量，只能运行简单命令，复杂命令需要使用shell模块 示例1 1ansible webservers -m command -a &quot;df -hT&quot; 12345678910111213# command.yml---- name: 在 web 服务器上运行 df -hT 命令 hosts: webservers tasks: - name: 执行 df -hT 命令 command: cmd: &quot;df -hT&quot; register: command_output # 保存命令执行结果 - name: 显示命令输出 debug: var: command_output.stdout_lines # 输出命令执行结果 示例2：参数chdir：切换到指定目录后再运行命令 可以通过ansible-doc -s command查看其支持的参数 1ansible webservers -m command -a &quot;chdir=/tmp ls -l&quot; 1234567891011121314# command2.yml---- name: 在 web 服务器上列出 /tmp 目录的内容 hosts: webservers tasks: - name: 切换到 /tmp 目录并列出内容 command: chdir: /tmp # 切换到 /tmp 目录 cmd: ls -l # 执行命令 register: command_output # 保存命令执行结果 - name: 显示命令输出 debug: var: command_output.stdout_lines # 输出命令执行结果 常用参数说明：ansible-doc -s command 参数 描述 argv 要执行的命令，可以是字符串形式或列表形式。 chdir 在执行命令之前切换到的目录。 cmd 要执行的命令。 creates 指定一个文件名或模式，如果匹配的文件已经存在，则不执行命令。 expand_argument_vars 是否展开作为变量的参数。默认为 true，表示展开变量。 free_form 以字符串形式指定要执行的命令。这个参数并不存在，但是 command 模块接受自由形式的字符串作为命令。 removes 指定一个文件名或模式，如果匹配的文件存在，则执行命令。 stdin 将命令的标准输入设置为指定的值。 stdin_add_newline 是否在标准输入数据后添加换行符。 strip_empty_ends 是否从标准输出的末尾剥离空行。 shell模块 shell模块与command模块类似，可以执行远程服务器命令执行、任务执行等操作，但是shell模块支持管道符号、变量，可以执行复杂命令 示例： 12345# 查看进程ansible webservers -m shell -a &quot;ps -ef | grep java | grep -v &#x27;grep&#x27;&quot;# 修改密码ansible webservers -m shell -a &quot; echo 123456 | passwd --stdin ansible&quot; 12345678910111213# shell.yml---- name: 在 web 服务器上查找 Java 进程 hosts: webservers tasks: - name: 执行 ps -ef | grep java | grep -v &#x27;grep&#x27; 命令 shell: cmd: ps -ef | grep java | grep -v &#x27;grep&#x27; register: command_output # 保存命令执行结果 - name: 显示命令输出 debug: var: command_output.stdout_lines # 输出命令执行结果 常用参数说明：ansible-doc -s shell 参数 描述 argv 要执行的命令，可以是字符串形式或列表形式。 chdir 在执行命令之前切换到的目录。 cmd 要执行的命令。 creates 指定一个文件名或模式，如果匹配的文件已经存在，则不执行命令。 executable 用于执行命令的可执行程序，默认情况下为 /bin/sh。 free_form 以字符串形式指定要执行的命令。这个参数并不存在，但是 shell 模块接受自由形式的字符串作为命令。 removes 指定一个文件名或模式，如果匹配的文件存在，则执行命令。 stdin 将命令的标准输入设置为指定的值。 stdin_add_newline 是否在标准输入数据后添加换行符。 strip_empty_ends 是否从标准输出的末尾剥离空行。 file模块 file模块主要用于文件和目录的管理，可以创建、删除、修改文件和目录，可以指定文件或目录的属性，可以指定文件或目录的权限，可以指定文件或目录的owner、group、mode等信息，等等 示例：创建目录 1ansible webservers -m file -a &quot;path=/tmp/`date +%F` state=directory mode=755&quot; 12345678910# file.yml---- name: 在 web 服务器上创建日期格式的目录 hosts: webservers tasks: - name: 创建目录 file: path: &quot;/tmp/&#123;&#123; ansible_date_time.date &#125;&#125;&quot; # ansible_date_time.date表示当前时间获取的日期，格式为YYYY-MM-DD state: directory # 创建目录，如果目录已经存在则不创建 mode: &quot;755&quot; # 设置目录权限 常用参数说明：ansible-doc -s file 参数 描述 path 文件或目录的路径。 state 文件或目录的状态。可选值包括 file（文件）、directory（目录）、link（符号链接）。默认为 file。 owner 文件或目录的所有者。 group 文件或目录的所属组。 mode 文件或目录的权限。 src 源文件路径，用于复制文件或创建链接。 dest 目标文件路径，用于复制文件或创建链接。 follow 是否遵循符号链接。如果为 yes，则会遵循符号链接进行操作。默认为 yes。 selevel 文件或目录的 SELinux 安全上下文。 serole 文件或目录的 SELinux 角色。 setype 文件或目录的 SELinux 类型。 seuser 文件或目录的 SELinux 用户。 unsafe_writes 是否启用不安全的写入模式。如果为 yes，则在写入文件之前不会创建备份。默认为 no。 这里重点说一下state 123456file：表示要求目标主机上存在指定的文件。如果文件已经存在，则不执行任何操作；如果文件不存在，则会创建它。directory：表示要求目标主机上存在指定的目录。如果目录已经存在，则不执行任何操作；如果目录不存在，则会创建它。link：表示要求目标主机上存在指定的符号链接。如果符号链接已经存在，则不执行任何操作；如果符号链接不存在，则会创建它。hard：创建硬链接touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间absent：删除目录、文件或者取消链接文件 copy模块 copy模块主要用于将文件复制到远程服务器，可以指定文件的源路径、目标路径、owner、group、mode等信息，等等 示例：复制文件到指定目录 12# -b 切换到root用户下执行ansible webservers -m copy -a &quot;src=/tmp/a.txt dest=/tmp/ owner=root group=root mode=755&quot; 12345678910111213# copy.yml---- name: 在 web 服务器上复制文件 hosts: webservers become: yes # 切换到root用户下执行 tasks: - name: 复制文件 copy: src: &quot;/tmp/a.txt&quot; # 源文件路径 dest: &quot;/tmp/&quot; # 目标文件路径 owner: root # 指定文件owner group: root # 指定文件group mode: &quot;755&quot; # 指定文件权限 常用参数说明：ansible-doc -s copy 参数 描述 src 源文件的路径。 dest 目标文件的路径。 backup 是否备份目标文件。如果为 yes，则在复制目标文件之前会创建一个备份文件。默认为 yes。 content 要写入目标文件的内容。 directory_mode 目标目录的权限。只有当目标是一个目录时才会生效。 follow 是否跟随符号链接。如果为 yes，则会跟随符号链接进行操作。默认为 yes。 force 是否强制覆盖目标文件。如果为 yes，则强制复制源文件，即使目标文件已经存在。默认为 no。 group 目标文件的所属组。 mode 目标文件的权限。 owner 目标文件的所有者。 remote_src 指定源文件是否在远程主机上。如果为 yes，表示源文件在远程主机上。默认为 no。 fetch模块 fetch模块主要用于将文件从远程服务器复制到本地，可以指定文件的源路径、目标路径、owner、group、mode等信息，等等 示例：将文件从远程服务器复制到本地 1ansible webservers -m fetch -a &quot;src=/tmp/a.txt dest=/tmp/ flat=yes&quot; 12345678910# fetch.yml---- name: 在 web 服务器上将文件从远程服务器复制到本地 hosts: webservers tasks: - name: 复制文件 fetch: src: &quot;/tmp/a.txt&quot; dest: &quot;/tmp/&quot; flat: yes # flat: yes # 将文件复制到dest目录下，不创建目录结构 常用参数说明：ansible-doc -s fetch 参数 描述 src 远程主机上要拉取的文件的路径。 dest 本地主机上文件的目标路径。 flat 是否将文件放置在顶层目录中。如果为 yes，则所有文件都将放置在一个目录中。默认为 no。 fail_on_missing 如果为 yes，则在源文件不存在时失败。默认为 yes。 validate_checksum 是否验证远程文件的校验和。默认为 no。 cron模块 cron模块主要用于在远程服务器上创建、修改、删除定时任务 示例：创建定时任务 1ansible webservers -m cron -a &#x27;name=&quot;restart httpd&quot; hour=*/5 job=&quot;systemctl restart httpd&quot;&#x27; 12345678910# cron.yml---- name: 在 web 服务器上创建定时任务 hosts: webservers tasks: - name: 创建定时任务 cron: name: &quot;restart httpd&quot; hour: &quot;*/5&quot; job: &quot;systemctl restart httpd&quot; 常用参数说明：ansible-doc -s cron 参数 描述 name cron 任务的名称。 minute cron 任务执行的分钟。 hour cron 任务执行的小时。 day cron 任务执行的日期。 month cron 任务执行的月份。 weekday cron 任务执行的星期几。 job 要执行的命令或脚本。 cron_file 要操作的 cron 文件的路径。默认为 /etc/crontab。 state cron 任务的状态。可选值包括 present（默认）和 absent。表示要求任务存在或不存在。 user cron 任务的执行用户。默认为 root。 backup 是否备份 cron 文件。可选值包括 true 和 false。 state 12present：表示要求指定的 cron 任务存在。如果指定的 cron 任务不存在，则 Ansible 将会创建它。如果已经存在，则不执行任何操作。absent：表示要求指定的 cron 任务不存在。如果指定的 cron 任务存在，则 Ansible 将会删除它。如果不存在，则不执行任何操作。 yum模块 yum模块主要用于在远程服务器上安装、卸载、更新软件包，可以指定软件包的名称、版本、repo等信息，等等 示例：安装软件包 12# 安装软件包，相当于 yum install httpdansible webservers -m yum -a &quot;name=httpd state=present&quot; 123456789# yum.yml---- name: 在 web 服务器上安装 httpd 软件包 hosts: webservers tasks: - name: 安装 httpd 软件包 yum: name: httpd # 软件包名称，相当于 yum install httpd state: present # 安装软件包，如果软件包已经安装则不安装 常用参数说明:ansible-doc -s yum 参数 解释 name 指定要操作的包的名称。 update_cache 指定是否在执行操作之前更新 yum 缓存。可选值为 yes 或 no。默认为 yes。 disable_gpg_check 指定是否禁用 GPG 检查。如果为 yes，则禁用 GPG 检查。默认为 no。 disable_plugin 指定是否禁用指定的 yum 插件。可以是一个插件名称的列表。 enablerepo 指定要启用的仓库。可以是一个仓库名称的列表。 disablerepo 指定要禁用的仓库。可以是一个仓库名称的列表。 installroot 指定要安装软件包的根目录。 security 指定是否只安装安全更新。如果为 yes，则只安装安全更新。默认为 no。 list 指定是否列出所有已安装的包。如果为 yes，则列出已安装的包。默认为 no。 state 指定软件包的状态。可选值为 present、latest、absent、installed、removed。默认为 present。 这里重点说一下state 12345present: 表示要求目标主机上存在指定的软件包。如果软件包已经安装，则不执行任何操作；如果软件包未安装，则会安装它。latest: 表示要求目标主机上存在指定的软件包，并且希望保持为最新版本。如果软件包已经安装，但不是最新版本，则会更新到最新版本；如果软件包未安装，则会安装最新版本。absent: 表示要求目标主机上不存在指定的软件包。如果软件包已安装，则会将其卸载；如果软件包未安装，则不执行任何操作。installed: 与 present 意义相同，用于明确表达希望软件包已经安装在目标主机上。removed: 与 absent 意义相同，用于明确表达希望软件包已从目标主机上卸载。 service模块:调用的是service命令 service模块主要用于在远程服务器上启动、停止、重启、重新加载、启用、禁用、检查服务，可以指定服务的名称、状态、启动方式等信息，等等 示例：启动服务 1ansible webservers -m service -a &quot;name=httpd state=started&quot; 123456789# service.yml---- name: 在 web 服务器上启动 httpd 服务 hosts: webservers tasks: - name: 启动 httpd 服务 service: name: httpd state: started 常用参数说明:ansible-doc -s service 参数 描述 name 服务的名称。 state 服务的状态。可选值包括 started（已启动）、stopped（已停止）、restarted（已重启）。 enabled 是否在启动时自动启用服务。如果为 yes，则在系统启动时自动启动服务。默认为 yes。 pattern 匹配服务的模式。默认情况下为服务名称。 sleep 在重新启动服务之前等待的秒数。 arguments 启动或停止服务时要传递的参数。 state 123started：表示要求服务处于已启动状态。如果指定的服务未启动，则 Ansible 将尝试启动该服务。如果服务已经处于运行状态，则不执行任何操作。stopped：表示要求服务处于已停止状态。如果指定的服务正在运行，则 Ansible 将尝试停止该服务。如果服务已经停止，则不执行任何操作。restarted：表示要求重启服务。无论服务当前处于运行状态还是停止状态，Ansible 都会尝试重新启动该服务。 systemd模块:支持centos7+，调用的是systemctl systemd模块用于控制 systemd 后台服务，允许你启动、重新启动、停止或者重新加载 systemd 服务。此外，你也可以使用它来使服务在系统启动时自动启动或禁止自动启动。除此之外，systemd 模块还允许你检查服务的状态。 示例 1ansible webservers -m systemd -a &quot;name=httpd state=restarted&quot; 123456789# systemd.yml---- name: 在 web 服务器上重新启动 httpd 服务 hosts: webservers tasks: - name: 重新启动 httpd 服务 systemd: name: httpd state: restarted 主要参数说明：ansible-doc -s systemd 参数 描述 enabled 指定服务是否应该在启动时自动启用。可选值为 yes 或 no。默认为 yes。 masked 指定服务是否应该被置为 masked 状态，禁止手动启动。可选值为 yes 或 no。默认为 no。 name 服务的名称。 state 指定服务的状态。可选值为 started（启动）、stopped（停止）、restarted（重新启动）、reloaded（重新加载） script模块 script模块主要用于在远程服务器上执行本地的脚本 示例：执行脚本 1ansible webservers -m script -a &quot;chdir=/tmp /tmp/a.sh&quot; 123456789# script.yml---- name: 在 web 服务器上运行脚本 hosts: webservers tasks: - name: 在 /tmp 目录中运行脚本 script: chdir: /tmp # 指定脚本的执行目录 cmd: /tmp/a.sh # 本地脚本的路径 常用参数说明:ansible-doc -s script 参数 描述 chdir 在远程主机上执行脚本之前切换到的目录。 free_form 要在远程主机上执行的脚本内容。 creates 如果指定的文件已经存在，则不执行脚本。 executable 指定要使用的脚本解释器。 removes 在执行脚本之后，如果指定的文件存在，则删除该文件。 cmd 指定要执行的命令。 decrypt 指定要解密的源文件。 user模块 user模块主要用于在远程服务器上创建、修改、删除用户，可以指定用户的名称、密码、uid、gid、home、shell等信息，等等 示例：创建用户 1ansible webservers -m user -a &quot;name=nginx group=nginx shell=/sbin/nologin create_home=no&quot; 12345678910# user.yml---- name: 创建用户 nginx hosts: webservers tasks: - name: 添加用户 nginx user: name: nginx # 用户名称 shell: /sbin/nologin # 指定用户shell,非登录用户 createhome: no # 不创建用户主目录 常用参数说明:ansible-doc -s user 参数 描述 append 是否将用户添加到现有组，而不是替换组。 comment 对用户的注释信息。 createhome 是否创建用户的家目录。 expires 用户帐户过期日期。 force 是否强制创建或更改用户帐户。 generate_ssh_key 是否生成用户的 SSH 密钥对。 group 用户所属组的名称或 ID。 groups 用户所属的其他组。 home 用户的家目录路径。 login_class 用户登录类。 move_home 是否在更改用户家目录路径时移动其内容。 name 用户的名称。 non_unique 允许用户具有非唯一的数字 ID。 password 用户的密码哈希值或加密后的密码。 remove 是否删除用户。 shell 用户的 shell。 state 用户帐户的状态。 system 是否为系统用户。 uid 用户的数字 ID。 state 12present：表示要求指定的用户账户存在。如果指定的用户账户不存在，则 Ansible 将会创建该账户。如果用户账户已经存在，则不执行任何操作。absent：表示要求指定的用户账户不存在。如果指定的用户账户存在，则 Ansible 将会删除该账户。如果用户账户不存在，则不执行任何操作。 get_url模块 get_url模块负责下载文件到目标主机。 示例 1ansible webservers -m get_url -a &quot;url=https://www.example.com dest=/tmp&quot; 123456789# get_url.yml---- name: 下载文件到目标主机的指定目录 hosts: webservers tasks: - name: Download files from remote host get_url: url: https://www.example.com/file.conf dest: /tmp 主要参数说明:ansible-doc -s get_url 参数 描述 url 要下载的文件的 URL 地址。 dest 下载文件保存的目标路径。 force 是否强制覆盖目标路径中的文件。可选值为 yes 或 no。默认为 yes。 timeout 下载超时时间，单位为秒。默认为 10 秒。 validate_certs 是否验证 SSL 证书。可选值为 yes 或 no。默认为 yes。 owner 下载后文件的所有者。 group 下载后文件的所属组。 mode 下载后文件的权限模式。 backup 是否创建备份文件。可选值为 yes 或 no。默认为 no。 headers 附加的 HTTP 请求头。 force_basic_auth 是否强制使用 HTTP 基本身份验证。可选值为 yes 或 no。默认为 yes。 http_agent 用于 HTTP 请求的代理。 lineinfile模块 lineinfile模块主要用于在远程主机上查找和替换文件中的行，可以指定要查找的行、要替换的行、要添加的行等信息，等等 示例：设置环境变量，需要注意的是此时环境变量在剧本的上下文中是不生效的，如果需要在剧本上下文生效的环境变量，可以使用 shell 模块 1ansible webservers -m lineinfile -a &quot;path=/etc/profile line=&#x27;PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin&#x27; state=present backup=yes&quot; 1234567891011# lineinfile.yml---- name: 设置环境变量 hosts: webservers tasks: - name: 设置环境变量 lineinfile: path: /etc/profile line: &#x27;PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin&#x27; state: present backup: yes 主要参数说明:ansible-doc -s lineinfile 参数 描述 path 要修改的文件的路径。 line 要添加、修改或删除的行内容。 state 指定要执行的操作。 regexp 用于匹配行的正则表达式。 search_string 用于匹配行的字符串。 backup 是否创建备份文件。可选值为 yes 或 no。默认为 no。 backrefs 是否允许在 regexp 中使用反向引用。 insertbefore 指定一个行，将新行插入到它之前。 insertafter 指定一个行，将新行插入到它之后。 firstmatch 是否只匹配第一个匹配项。 state说明 12present：确保指定的行存在于文件中。如果文件中不存在指定的行，则会添加该行。如果文件中已经存在该行，则不做任何改变。absent：确保指定的行不存在于文件中。如果文件中存在指定的行，则会将该行删除。如果文件中不存在该行，则不做任何改变。 ansible-playbook:剧本 ansible-playbook是Ansible的核心命令，用于执行playbook文件，playbook文件是Ansible执行任务的最小单元，一个playbook文件可以包含多个play，每个play可以包含多个task，每个task可以包含多个module，每个module可以执行一个操作，比如创建目录、安装软件包、启动服务、执行脚本等 Ansible中文全文指南–Playbooks 上面在介绍ansible模块时，我们已经编写了一些playbook文件，就是那些yml文件，运行时也是通过ansible-playbook命令执行的，但是基本上都是单个任务单个模块，下面我们来看一个复杂一些的示例 示例：安装nginx并配置 12345678910111213141516171819202122232425262728293031# playbook.yml---- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 tasks: - name: install nginx yum: name: gcc,zlib-devel,pcre-devel,openssl-devel state: installed - name: wget nginx tar.gz shell: cmd: wget https://nginx.org/download/nginx-1.22.1.tar.gz chdir: /usr/local - name: tar -zxvf nginx-1.22.1.tar.gz shell: cmd: tar -zxvf nginx-1.22.1.tar.gz chdir: /usr/local - name: add user nginx user: name: nginx state: present shell: /sbin/nologin createhome: no - name: configure ,make and make install shell: cmd: cd nginx-1.22.1;./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx;make -j4;make -j4 install; chdir: /usr/local - name: start nginx shell: cmd: /usr/local/nginx/sbin/nginx 优化1 问题: 上面的剧本有个问题，就是如果系统已经安装了nginx，则运行这个剧本还是会重新安装 解决方法: 先判断nginx是否已经安装，如果已经安装，直接跳过安装步骤，直接执行启动命令，否则执行安装步骤，然后再执行启动命令 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061---- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 tasks: - name: 检查系统是否已安装Nginx shell: /usr/local/nginx/sbin/nginx -v register: nginx_installed ignore_errors: yes - name: 安装Nginx依赖软件包 yum: name: &quot;&#123;&#123; item &#125;&#125;&quot; state: present loop: - gcc - zlib - zlib-devel - pcre-devel - openssl - openssl-devel when: nginx_installed.rc != 0 # 只有当Nginx未安装时执行 - name: 检查系统是否已启动Nginx shell: ps aux | grep nginx | grep -v grep register: nginx_status ignore_errors: yes - name: 下载Nginx源码包 get_url: url: https://nginx.org/download/nginx-1.22.1.tar.gz dest: /usr/local when: nginx_installed.rc != 0 # 只有当Nginx未安装时执行 - name: 解压Nginx源码包 shell: cmd: tar -zxvf nginx-1.22.1.tar.gz chdir: /usr/local when: nginx_installed.rc != 0 # 只有当Nginx未安装时执行 - name: 添加nginx用户 user: name: nginx state: present shell: /sbin/nologin createhome: no - name: 编译Nginx并安装 shell: cmd: | cd nginx-1.22.1 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx make -j4 make -j4 install chdir: /usr/local when: nginx_installed.rc != 0 # 只有当Nginx未安装时执行 - name: 启动Nginx服务 shell: cmd: /usr/local/nginx/sbin/nginx when: nginx_status.rc != 0 # 只有当Nginx未启动时执行 register :用于将命令执行的结果保存到变量中，我们可以调用变量的属性，比如rc表示命令返回的状态码($?)，stdout表示命令的输出，stderr表示命令的错误输出 ignore_errors :用于忽略错误 loop :用于循环列表 when :用于判断条件，只有条件满足时才执行 优化2 问题: 上面的步骤有点多，比如下载、解压、编译nginx，这些都是在没有安装nginx的情况下要运行的任务 解决方法: 使用shell模块可以将这些步骤封装成一个任务 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051---- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 tasks: - name: 检查系统是否已安装Nginx shell: /usr/local/nginx/sbin/nginx -v register: nginx_installed ignore_errors: yes - name: 安装Nginx依赖软件包 yum: name: &quot;&#123;&#123; item &#125;&#125;&quot; state: present loop: - gcc - zlib - zlib-devel - pcre-devel - openssl - openssl-devel when: nginx_installed.rc != 0 # 只有当Nginx未安装时执行 - name: 检查系统是否已启动Nginx shell: ps aux | grep nginx | grep -v grep register: nginx_status ignore_errors: yes - name: 添加nginx用户 user: name: nginx state: present shell: /sbin/nologin createhome: no - name: Nginx并安装 shell: cmd: | wget https://nginx.org/download/nginx-1.22.1.tar.gz tar -zxvf nginx-1.22.1.tar.gz cd nginx-1.22.1 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx make -j4 make -j4 install chdir: /usr/local when: nginx_installed.rc != 0 # 只有当Nginx未安装时执行 - name: 启动Nginx服务 shell: cmd: /usr/local/nginx/sbin/nginx when: nginx_status.rc != 0 # 只有当Nginx未启动时执行 优化3 问题: 上面的剧本虽然已经满足了我的需求，但是不够简练，因为很多任务并不是主要任务，我需要在每个任务中进行条件判断来决定是否执行该任务，能否只保留主要任务，其它任务只有当这些主要任务成功运行了才会被运行呢？比如这里的主要任务就是两个：1-判断是否安装了nginx，没安装就去安装，2-判断是否启动了nginx，没启动就去启动 解决方法: 使用基于handlers的notify语句，这样可以减少重复执行任务的次数 何为handlers Handler 本身是一种非同步的 callback function ，在这里则是指关连于特定 tasks 的事件 (event) 触发机制。当关联 handler 的 tasks 状态为被改变 (changed) 且都已被执行时，才会触发一次 何为 tasks 状态为被改变 (changed) 在Ansible中，task的状态会根据任务执行的结果而改变。当一个任务成功完成并且使得系统的状态与预期不同（即执行了一些更改），那么这个任务的状态就会被标记为&quot;changed&quot;。 具体来说，task状态为&quot;changed&quot;的条件包括但不限于以下情况： 123456文件变更：例如复制、创建、删除文件等操作导致了文件系统的变更。服务状态变更：例如启动、停止、重启服务等操作导致了服务状态的改变。配置更改：例如修改配置文件、添加配置项等操作导致了系统配置的改变。软件包安装/卸载：例如安装新的软件包或者删除已安装的软件包导致了系统软件状态的改变。权限变更：例如修改文件权限、更改用户组、更改用户等操作导致了系统权限的改变。当一个或多个任务的状态被标记为&quot;changed&quot;时，与这些任务关联的handlers会被触发执行。这样可以确保在所有相关的任务都完成并且导致了系统状态的改变时，才执行后续的处理操作，从而保证了任务的一致性和可靠性。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859---- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 tasks: - name: 判断是否存在nginx安装目录，不存在就安装nginx file: path: /usr/local/nginx state: directory notify: # 执行通知任务，顺序为从下到上 - Nginx安装 # 匹配任务name - 安装Nginx依赖软件包 - 添加nginx用户 - name: 检查系统是否已启动Nginx shell: ps aux | grep nginx | grep -v grep register: nginx_status ignore_errors: yes - name: 检查是否需要启动nginx shell: echo &quot;start nginx&quot; when: nginx_status.rc != 0 # 只有当条件满足时才会运行该任务 notify: # 运行任务后只有状态为changed才会发送notify给handler - 启动Nginx服务 handlers: # handlers是一类特殊任务，当有notify时，会自动执行该任务 - name: 添加nginx用户 user: name: nginx state: present shell: /sbin/nologin createhome: no - name: 安装Nginx依赖软件包 yum: name: &quot;&#123;&#123; item &#125;&#125;&quot; state: present loop: - gcc - zlib - zlib-devel - pcre-devel - openssl - openssl-devel - name: Nginx安装 shell: cmd: | wget https://nginx.org/download/nginx-1.22.1.tar.gz tar -zxvf nginx-1.22.1.tar.gz cd nginx-1.22.1 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --user=nginx make -j4 make -j4 install chdir: /usr/local - name: 启动Nginx服务 shell: cmd: /usr/local/nginx/sbin/nginx 优化4 问题: 上面的剧本中nginx的安装版本和安装路径都是写死的，能否动态配置呢？ 解决方法: 提取变量，使用vars 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465---- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 vars: # 定义变量 nginx_version: &quot;1.22.1&quot; work_dir: &quot;/usr/local&quot; nginx_install_path: &quot;/usr/local/nginx&quot; tasks: - name: 判断是否存在nginx安装目录，不存在就安装nginx file: path: &quot;&#123;&#123; nginx_install_path &#125;&#125;&quot; # 变量一定要双括号 state: directory notify: # 执行通知任务，顺序为从下到上 - Nginx安装 # 匹配任务name - 安装Nginx依赖软件包 - 添加nginx用户 - name: 检查系统是否已启动Nginx shell: ps aux | grep nginx | grep -v grep register: nginx_status ignore_errors: yes - name: 检查是否需要启动nginx shell: echo &quot;start nginx&quot; when: nginx_status.rc != 0 notify: - 启动Nginx服务 handlers: # handlers是一类特殊任务，当有notify时，会自动执行该任务 - name: 添加nginx用户 user: name: nginx state: present shell: /sbin/nologin createhome: no - name: 安装Nginx依赖软件包 yum: name: &quot;&#123;&#123; item &#125;&#125;&quot; state: present loop: - gcc - zlib - zlib-devel - pcre-devel - openssl - openssl-devel - name: Nginx安装 shell: cmd: | wget https://nginx.org/download/nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz tar -zxvf nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz cd nginx-&#123;&#123; nginx_version &#125;&#125; ./configure --prefix=&#123;&#123; nginx_install_path &#125;&#125; --with-http_stub_status_module --with-http_ssl_module --user=nginx make -j4 make -j4 install chdir: &quot;&#123;&#123; work_dir &#125;&#125;&quot; - name: 启动Nginx服务 shell: cmd: &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot; 1234# 默认ansible-playbook nginx.yml# 修改变量ansible-playbook nginx.yml -e &quot;nginx_version=1.24.0&quot; -e &quot;work_dir=/root&quot; 小贴士 除了我们自己定义的变量，我们也可以使用Ansible内置的变量，如ansible_hostname、ansible_fqdn等。 我们可以基于ansible_facts变量获取主机信息，如IP地址、MAC地址、操作系统版本等。也就是通过setup模块获取的信息。 Ansible内置的变量可以参考官方文档。 ansible-playbook:Template Ansible Playbook Template是一种Ansible的特性，它允许您在Playbook中使用Jinja2模板语言来动态生成配置文件或其他文本文件。通过使用模板，您可以根据变量、条件、循环等动态信息来生成目标文件，从而使配置文件更具可扩展性和灵活性。 下面是使用Ansible Playbook Template的一些常见用法和特性： 12345Jinja2模板语言: Ansible Playbook Template使用Jinja2模板语言，这是一种功能强大的模板引擎，支持变量替换、条件语句、循环语句等功能。变量替换: 您可以在模板中使用Ansible的变量来替换文本中的占位符。这使得您可以根据不同的环境或条件生成不同的配置文件。条件语句: 您可以在模板中使用条件语句来根据不同的条件生成不同的文本。这允许您根据需要灵活地调整生成的配置文件。循环语句: 您可以在模板中使用循环语句来对列表或字典中的元素进行迭代，从而生成重复的文本块。包含其他模板文件: 您可以在一个模板中包含其他模板文件，从而使模板更加模块化和易于管理。 Jinja2模板文件后缀为.j2，常用语法如下： 123456789101112131415# 打印变量&#123;&#123; index_title &#125;&#125;# for循环&#123;% for key in index_for_array %&#125;&lt;p&gt;show &#123;&#123; key &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125;# if判断&#123;% if blog_href_show %&#125;&lt;p&gt;&lt;a href=&quot;&#123;&#123; blog_href &#125;&#125;&quot;&gt;&#123;&#123; index_title &#125;&#125;&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using &#123;&#123; index_title &#125;&#125;.&lt;/em&gt;&lt;/p&gt;&#123;% endif %&#125; 结合上面部署nginx的示例，我这里增加一个任务，就是替换nginx发布目录下的index.html，然后重启nginx，这里给出index.html.j2 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;&#123;&#123; index_title &#125;&#125;&lt;/title&gt;&lt;style&gt;html &#123; color-scheme: light dark; &#125;body &#123; width: 35em; margin: 0 auto;font-family: Tahoma, Verdana, Arial, sans-serif; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello World!&lt;/h1&gt;&lt;img src=&quot;&#123;&#123; blog_img &#125;&#125;&quot;&gt;&#123;% for key in index_for_array %&#125;&lt;p&gt;show &#123;&#123; key &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125;&#123;% if blog_href_show %&#125;&lt;p&gt;&lt;a href=&quot;&#123;&#123; blog_href &#125;&#125;&quot;&gt;&#123;&#123; index_title &#125;&#125;&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using &#123;&#123; index_title &#125;&#125;.&lt;/em&gt;&lt;/p&gt;&#123;% endif %&#125;&lt;/body&gt;&lt;/html&gt; 接着我们修改剧本yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293---- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 vars: # 定义变量 nginx_version: &quot;1.22.1&quot; work_dir: &quot;/usr/local&quot; nginx_install_path: &quot;/usr/local/nginx&quot; index_title: &quot;hanqf&#x27;s blog&quot; index_for_array: - hello - world blog_href_show: true blog_href: &quot;https://blog.hanqunfeng.com&quot; blog_img: &quot;me.png&quot; tasks: - name: 判断是否存在nginx安装目录，不存在就安装nginx file: path: &quot;&#123;&#123; nginx_install_path &#125;&#125;&quot; # 变量一定要双括号 state: directory notify: # 执行通知任务，顺序为从下到上 - Nginx安装 # 匹配任务name - 安装Nginx依赖软件包 - 添加nginx用户 - name: 检查系统是否已启动Nginx shell: ps aux | grep nginx | grep -v grep register: nginx_status ignore_errors: yes - name: 检查是否需要启动nginx shell: echo &quot;start nginx&quot; when: nginx_status.rc != 0 notify: - 启动Nginx服务 - name: 上传图片 copy: src: me.png # 与yml在同一目录 dest: &quot;&#123;&#123; nginx_install_path &#125;&#125;/html/me.png&quot; - name: 发布index.html template: src: index.html.j2 # 与yml在同一目录 dest: &quot;&#123;&#123; nginx_install_path &#125;&#125;/html/index.html&quot; force: true # 强制覆盖 backup: true # 覆盖前备份 notify: - 重启Nginx服务 handlers: # handlers是一类特殊任务，当有notify时，会自动执行该任务 - name: 添加nginx用户 user: name: nginx state: present shell: /sbin/nologin createhome: no - name: 安装Nginx依赖软件包 yum: name: &quot;&#123;&#123; item &#125;&#125;&quot; state: present loop: - gcc - zlib - zlib-devel - pcre-devel - openssl - openssl-devel - name: Nginx安装 shell: cmd: | wget https://nginx.org/download/nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz tar -zxvf nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz cd nginx-&#123;&#123; nginx_version &#125;&#125; ./configure --prefix=&#123;&#123; nginx_install_path &#125;&#125; --with-http_stub_status_module --with-http_ssl_module --user=nginx make -j4 make -j4 install chdir: &quot;&#123;&#123; work_dir &#125;&#125;&quot; - name: 启动Nginx服务 shell: cmd: &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot; - name: 重启Nginx服务 shell: cmd: | pkill nginx &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot; 替换之后的效果 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;hanqf&#x27;s blog&lt;/title&gt;&lt;style&gt;html &#123; color-scheme: light dark; &#125;body &#123; width: 35em; margin: 0 auto;font-family: Tahoma, Verdana, Arial, sans-serif; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello World!&lt;/h1&gt;&lt;img src=&quot;me.png&quot;&gt;&lt;p&gt;show hello&lt;/p&gt;&lt;p&gt;show world&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blog.hanqunfeng.com&quot;&gt;hanqf&#x27;s blog&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using hanqf&#x27;s blog.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; template模块的常用参数说明 ansible-doc -s template 参数 必需 默认值 描述 src 是 无 模板文件的路径。 dest 是 无 目标文件的路径。 force 否 false 如果目标文件已经存在，是否强制覆盖。 backup 否 false 如果设置为true，则在覆盖目标文件之前创建备份。 unsafe_writes 否 false 如果设置为true，则会跳过文件的暂时性写入保护（如确保在写入文件之前不会更改其内容）。 newline_sequence 否 \\n 用于生成文件时的换行符序列。 validate 否 无 要应用于生成文件的验证器脚本的路径。 mode 否 无 目标文件的权限模式。 owner 否 无 目标文件的所有者。 group 否 无 目标文件的所属组。 这里要注意template模块与copy模块的区别，前者在上传时会进行变量替换。 ansible-playbook:Role Ansible中的Role是一种组织和管理剧本的方法，它允许您将相关的任务、变量、文件和处理程序组合到一个可重用的单元中。Role使得您可以更轻松地管理和组织大型的Ansible项目，并促进了可维护性和复用性。 Role的特性 1234567891011组织性：Role允许您将相关的任务和文件组织在一起，使得代码更易于理解和维护。每个Role通常都有一个特定的目的，例如安装特定的软件、配置服务或执行特定的系统管理任务。可重用性：Role可以被设计成可重用的组件，可以在不同的项目中多次使用。这样一来，您可以将常见的功能和配置封装到Role中，并在需要时轻松地调用它们，从而提高了代码的复用性和可移植性。结构化布局：Ansible推荐一种特定的目录结构来组织Role，包括tasks、handlers、templates、files、vars和defaults等目录。这种结构化布局有助于更清晰地分离任务、变量、文件和处理程序，并使Role更易于管理和维护。参数化：Role可以使用变量来接受外部输入，从而使其更加灵活和通用。通过参数化，您可以定制Role的行为，使其适用于不同的环境和需求。依赖关系：Role可以定义依赖关系，即一个Role可能依赖于另一个Role。这种依赖关系使得您可以构建复杂的系统配置，而不必重复编写相同的代码。可测试性：由于Role是可重用的组件，因此它们也是可测试的。您可以编写测试用例来验证Role的行为是否符合预期，并确保在修改代码时不会破坏现有功能。 ansible-examples 创建role 123456789101112131415161718192021222324252627# 在当前目录下创建一个名称为nginx-install的role，实际上就是创建一个名称为nginx-install的目录结构ansible-galaxy init nginx-install# 在指定目录下创建roleansible-galaxy init --init-path /usr/local nginx-install# nginx-install目录结构$ tree nginx-install/nginx-install/├── README.md├── defaults│ └── main.yml├── files├── handlers│ └── main.yml├── meta│ └── main.yml├── tasks│ └── main.yml├── templates├── tests│ ├── inventory│ └── test.yml└── vars └── main.yml8 directories, 8 files 12345678files：存放由copy或script模块等调用的文件templates：template模块查找所需要模板文件的目录tasks：定义task、role的基本元素，至少应该包含一个名为main.yml的文件。其他文件需要在此文件中通过include进行包含handlers：至少应该包含一个名为main.yml的文件，其他文件需要在此文件中通过include进行包含vars：定义变量，至少应该包含一个名为main.yml的文件，其他文件需要在此文件中通过include进行包含meta：定义当前角色的特殊设定及其依赖关系，至少应该包含一个名为main.yml的文件，其他文件需在此文件中通过include进行包含default：设定默认变量时使用此目录中的main.yml文件，比vars的优先级低tests：定义测试用例，至少应该包含一个名为inventory的文件，其他文件需要在此文件中通过include进行包含 ansible查找role的路径，推荐放到/etc/ansible/roles 12345$(pwd)/roles/$(whoami)/.ansible/roles/usr/share/ansible/roles/etc/ansible/roles$(pwd) 我们将上面安装nginx那个剧本修改为role的方式 nginx-install/tasks/main.yml 1234567891011121314151617181920212223242526272829303132333435---# tasks file for nginx-install- name: 判断是否存在nginx安装目录，不存在就安装nginx file: path: &quot;&#123;&#123; nginx_install_path &#125;&#125;&quot; state: directory notify: # 执行通知任务，顺序为从下到上 - Nginx安装 - 安装Nginx依赖软件包 - 添加nginx用户- name: 检查系统是否已启动Nginx shell: ps aux | grep nginx | grep -v grep register: nginx_status ignore_errors: yes- name: 检查是否需要启动nginx shell: echo &quot;start nginx&quot; when: nginx_status.rc != 0 notify: - 启动Nginx服务- name: 上传图片 copy: src: me.png # 与yml在同一目录 dest: &quot;&#123;&#123; nginx_install_path &#125;&#125;/html/me.png&quot;- name: 发布index.html template: src: index.html.j2 # 与yml在同一目录 dest: &quot;&#123;&#123; nginx_install_path &#125;&#125;/html/index.html&quot; force: true # 强制覆盖 backup: true # 覆盖前备份 notify: - 重启Nginx服务 nginx-install/handlers/main.yml 1234567891011121314151617181920212223242526272829303132333435363738394041---# handlers file for nginx-install- name: 添加nginx用户 user: name: nginx state: present shell: /sbin/nologin createhome: no- name: 安装Nginx依赖软件包 yum: name: &quot;&#123;&#123; item &#125;&#125;&quot; state: present loop: - gcc - zlib - zlib-devel - pcre-devel - openssl - openssl-devel- name: Nginx安装 shell: cmd: | wget https://nginx.org/download/nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz tar -zxvf nginx-&#123;&#123; nginx_version &#125;&#125;.tar.gz cd nginx-&#123;&#123; nginx_version &#125;&#125; ./configure --prefix=&#123;&#123; nginx_install_path &#125;&#125; --with-http_stub_status_module --with-http_ssl_module --user=nginx make -j4 make -j4 install chdir: &quot;&#123;&#123; work_dir &#125;&#125;&quot;- name: 启动Nginx服务 shell: cmd: &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot;- name: 重启Nginx服务 shell: cmd: | pkill nginx &quot;&#123;&#123; nginx_install_path &#125;&#125;/sbin/nginx&quot; nginx-install/vars/main.yml 123456789101112---# vars file for nginx-installnginx_version: &quot;1.22.1&quot;work_dir: &quot;/usr/local&quot;nginx_install_path: &quot;/usr/local/nginx&quot;index_title: &quot;hanqf&#x27;s blog&quot;index_for_array: - hello - worldblog_href_show: trueblog_href: &quot;https://blog.hanqunfeng.com&quot;blog_img: &quot;me.png&quot; 小贴士 上面介绍的tasks、handlers，其目录中都含有一个main.yml文件，这个文件是必须存在的 但是如果配置的内容比较多，都写在main.yml文件中，那么这个文件就显得有点臃肿，所以可以将这些内容拆分成多个文件，然后在main.yml文件中通过include进行包含 123---- include: other1.yml- include: other2.yml tasks或者handlers中还可以使用include_tasks进行包含 12345678---- include_tasks: other1.yml- include_tasks: other2.yml# 或者- include_tasks: &quot;&#123;&#123; item &#125;&#125;&quot; loop: - other1.yml - other2.yml vars里也可以定义多个yml文件存储变量，然后在tasks中通过include_vars进行包含，注意，必须放在task的yml文件中 12345678# 此时不需要加上vars路径，会自动从vars目录下查找- include_vars: &quot;v-other1.yml&quot;- include_vars: &quot;v-other2.yml&quot;# 或者- include_vars: &quot;&#123;&#123; item &#125;&#125;&quot; loop: - v-other1.yml - v-other2.yml 将模板文件和图片文本保存到对应的路径 nginx-install/templates/index.html.j2 nginx-install/files/me.png 执行 假设我们将创建的角色安装到了/etc/ansible/roles下 创建启动剧本nginx-install-start.yml，我们也可以修改tests/test.yml 12345- name: 安装nginx并配置 hosts: webservers become: yes # 切换到root用户下执行 roles: # 调用role - nginx-install # role名称 执行role 1ansible-playbook nginx-install-start.yml ansible-galaxy 什么是ansible-galaxy 用于从ansible-galaxy官网上查找，下载role和collection的工具，如何下载和使用网站上都有说明。 ansible-galaxy用户指南 我们也可以将自己创建好的role发布到ansible-galaxy上，可以参考 Ansible Role Publish To Galaxy role 1234567891011121314# 搜索roleansible-galaxy search mysql# 或者ansible-galaxy role search mysql# 查看已经安装的roleansible-galaxy list# 或者ansible-galaxy role list# 安装role，默认安装到 ~/.ansible/roles 下ansible-galaxy role install shaneholloman.redis# 安装到指定路径ansible-galaxy role install &lt;role-name&gt; -p &lt;path&gt; collection ansible-galaxy同时支持下载 collection 1234567# 查看已经安装的collectionansible-galaxy collection list# 安装collection，，默认安装到 ~/.ansible/collections/ansible_collections 下ansible-galaxy collection install saiello.kafka# 安装到指定路径ansible-galaxy collection install &lt;collection-name&gt; -p &lt;path&gt; Ansible Collection 是 Ansible 社区为了更好地管理和组织 Ansible 角色、模块、插件等内容而引入的概念。它可以被视为一种打包机制，用于将相关的 Ansible 内容打包成单独的单元，使得其更易于分享、安装和维护。 具体来说，Ansible Collection 具有以下作用： 123456789组织和管理角色、模块和插件：通过 Collection，可以将相关的角色、模块和插件打包在一起，形成逻辑上的单元，提高了内容的组织性和可管理性。易于分享和分发：Ansible Collection 可以被轻松地分享和分发给其他用户。开发人员可以将自己的角色、模块打包成 Collection，并将其发布到 Ansible Galaxy 或其他集中式的仓库中，供其他用户使用。版本控制和更新：与角色相比，Collection 更容易进行版本控制和更新。开发人员可以为 Collection 指定版本，并在更新内容时发布新的版本，使得用户可以选择使用特定版本或者升级到最新版本。依赖管理：Collection 支持依赖管理，可以在 Collection 中指定依赖关系，确保相关的角色、模块和插件能够正常工作。提供文档和示例：开发人员可以将文档和示例代码与 Collection 打包在一起，使得用户更容易理解和使用其中的内容。 总的来说，Ansible Collection 提供了一种更高级别的组织和管理方式，使得 Ansible 内容更易于分享、使用和维护，从而提高了 Ansible 的整体生态系统的健壮性和可用性。 后记 关于ansible的知识点还有很多没有研究到，后面会慢慢补吧……","summary":"摘要 本文介绍Ansible的安装和使用。 本文基于CentOS8。","date_published":"2024-03-19T13:30:05.000Z","tags":["技术","linux","linux常用命令","linux常用命令"]},{"id":"https://blog.hanqunfeng.com/2024/03/14/mongodb7-mtools/","url":"https://blog.hanqunfeng.com/2024/03/14/mongodb7-mtools/","title":"MongoDB本地测试环境搭建工具--mtools之mlaunch使用方法","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍mtools工具的使用</p>\n</li>\n<li class=\"lvl-2\">\n<p>mtools<a href=\"https://rueckstiess.github.io/mtools/\">官方文档</a>，<a href=\"https://github.com/rueckstiess/mtools\">mtools-github</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>mtools提供的<code>mlaunch</code>是一个基于python的mongo环境管理工具，可以方便的启动、停止、重启、kill mongo进程，还可以查看mongo进程的运行状态，可以方便初学者快速搭建本地mongo环境，但是其只能在一台机器上运行。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"mtools安装\">mtools安装</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>mtools基于python3，支持mongo4+以上版本，但是mtools并且不会为我们安装mongodb，所以需要我们自己先在系统中安装好mongodb，mongodb的安装可以参考<a href=\"/2024/03/01/mongodb7/\" title=\"MongoDB7.0的安装\">MongoDB7.0的安装</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>按照官网的说法，mtools支持的Python版本为 3.7|3.8|3.9|3.10，其他版本的Python目前不受支持或测试，但作者的python版本为3.11.3，并没有出现兼容性问题。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ python3 --version</span><br><span class=\"line\">Python 3.11.3</span><br><span class=\"line\">➜  ~ pip3 -V</span><br><span class=\"line\">pip 24.0 from /usr/local/lib/python3.11/site-packages/pip (python 3.11)</span><br><span class=\"line\">➜  ~ pip3 list</span><br><span class=\"line\">Package           Version</span><br><span class=\"line\">----------------- ------------</span><br><span class=\"line\">certifi           2023.11.17</span><br><span class=\"line\">cffi              1.16.0</span><br><span class=\"line\">cryptography      41.0.7</span><br><span class=\"line\">docutils          0.20.1</span><br><span class=\"line\">idna              3.6</span><br><span class=\"line\">Jinja2            3.1.2</span><br><span class=\"line\">MarkupSafe        2.1.3</span><br><span class=\"line\">packaging         23.2</span><br><span class=\"line\">pip               24.0</span><br><span class=\"line\">pycparser         2.21</span><br><span class=\"line\">Pygments          2.17.2</span><br><span class=\"line\">pyparsing         3.1.1</span><br><span class=\"line\">pytz              2023.3.post1</span><br><span class=\"line\">requests          2.31.0</span><br><span class=\"line\">setuptools        68.2.2</span><br><span class=\"line\">six               1.16.0</span><br><span class=\"line\">tabulate          0.0.0</span><br><span class=\"line\">typing_extensions 4.9.0</span><br><span class=\"line\">urllib3           2.1.0</span><br><span class=\"line\">wheel             0.41.2</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装mtools依赖</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install python-dateutil psutil pymongo</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装mtools</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install mtools</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装mtools会同时为我们安装mtools的所有工具，如果只希望安装mlaunch，可以使用下面的命令<br>\n<em><strong>mtools提供的其它工具，如<code>mlogfilter</code>,<code>mloginfo</code>,<code>mplotqueries</code>等并不支持<code>logv2</code>格式的日志，<code>logv2</code>是<code>mongodb4.4+</code>以后的加入的，从<code>mongodb5.0</code>以后<code>logv2</code>为默认的日志格式，所以这里不做介绍。</strong></em></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install <span class=\"string\">&#x27;mtools[mlaunch]&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"mlaunch\">mlaunch</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看mlaunch版本</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ <span class=\"built_in\">which</span> mlaunch</span><br><span class=\"line\">/usr/local/bin/mlaunch</span><br><span class=\"line\">➜  ~ mlaunch --version</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">mtools version 1.7.2 || Python 3.11.6 (main, Oct 3 2023, 02:51:45) [Clang 14.0.3 (clang-1403.0.22.14.1)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"init-构建环境\">init :构建环境</h3>\n<p><em><strong>此命令初始化并启动MongoDB独立实例、副本集或分片集群，它只需要为每个环境调用一次。</strong></em></p>\n<h4 id=\"构建独立实例\">构建独立实例</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快速构建一个单节点，数据目录在当前路径下的data目录下</span></span><br><span class=\"line\">$ mlaunch init --single --auth</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">Generating keyfile: /mongodb/mtools/single/data/keyfile</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27017</span><br><span class=\"line\">Username <span class=\"string\">&quot;user&quot;</span>, password <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数说明</span></span><br><span class=\"line\"><span class=\"comment\"># --single ：启动单节点</span></span><br><span class=\"line\"><span class=\"comment\"># --auth ：开启默认认证，默认用户名/密码:user/password，并授予如下角色</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123; role: &#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123; role: &#x27;readWriteAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123; role: &#x27;dbAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123; role: &#x27;clusterAdmin&#x27;, db: &#x27;admin&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"># --dir ：指定数据目录，默认为当前路径下的data目录</span></span><br><span class=\"line\"><span class=\"comment\"># --bind_ip：指定监听ip，默认为127.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"># --port：指定监听端口，默认为27017</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构建复制集\">构建复制集</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快速构建一个3节点的复制集</span></span><br><span class=\"line\">$ mlaunch init --replicaset --nodes 3 --auth --port 27040</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">Generating keyfile: /mongodb/mtools/replicaset/data/keyfile</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27040</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27041</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27042</span><br><span class=\"line\">replica <span class=\"built_in\">set</span> <span class=\"string\">&#x27;replset&#x27;</span> initialized.</span><br><span class=\"line\">waiting <span class=\"keyword\">for</span> primary to add a user.</span><br><span class=\"line\">Username <span class=\"string\">&quot;user&quot;</span>, password <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --replicaset ：创建副本集，默认3个节点</span></span><br><span class=\"line\"><span class=\"comment\"># --nodes 3 ：指定副本集节点个数，默认3个节点</span></span><br><span class=\"line\"><span class=\"comment\"># --auth : 开启默认认证，同单节点</span></span><br><span class=\"line\"><span class=\"comment\"># --port 27040 : 指定复制集的起始端口，默认从27017开始，依次递增</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构建分片集群\">构建分片集群</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快速构建一个2个分片的分片集群，每个分片是一个包含3每个节点的复制集，包含一个3个节点配置复制集，并且启动3个mongos路由</span></span><br><span class=\"line\">$ mlaunch init --sharded 2 --replicaset --node 3 --config 3 --csrs --mongos 3 --auth --port 27050</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">Generating keyfile: /mongodb/mtools/sharded/data/keyfile</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27053</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27054</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27055</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27056</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27057</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27058</span><br><span class=\"line\">launching: config server on port 27059</span><br><span class=\"line\">launching: config server on port 27060</span><br><span class=\"line\">launching: config server on port 27061</span><br><span class=\"line\">replica <span class=\"built_in\">set</span> <span class=\"string\">&#x27;configRepl&#x27;</span> initialized.</span><br><span class=\"line\">replica <span class=\"built_in\">set</span> <span class=\"string\">&#x27;shard01&#x27;</span> initialized.</span><br><span class=\"line\">replica <span class=\"built_in\">set</span> <span class=\"string\">&#x27;shard02&#x27;</span> initialized.</span><br><span class=\"line\">launching: mongos on port 27050</span><br><span class=\"line\">launching: mongos on port 27051</span><br><span class=\"line\">launching: mongos on port 27052</span><br><span class=\"line\">adding shards. can take up to 30 seconds...</span><br><span class=\"line\">sent signal 15 to 12 processes.</span><br><span class=\"line\">launching: config server on port 27059</span><br><span class=\"line\">launching: config server on port 27060</span><br><span class=\"line\">launching: config server on port 27061</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27053</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27054</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27055</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27056</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27057</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27058</span><br><span class=\"line\">launching: mongos on port 27050</span><br><span class=\"line\">launching: mongos on port 27051</span><br><span class=\"line\">launching: mongos on port 27052</span><br><span class=\"line\">Username <span class=\"string\">&quot;user&quot;</span>, password <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --sharded 2：启用分片集群模式，分片数为2。</span></span><br><span class=\"line\"><span class=\"comment\"># --replicaset : 创建副本集，默认3个节点，可以通过 --nodes 指定复制集节点个数</span></span><br><span class=\"line\"><span class=\"comment\"># --nodes 3：采用3节点的复制集架构，默认就是3个节点。</span></span><br><span class=\"line\"><span class=\"comment\"># --config 3：配置服务器采用3节点的复制集架构模式</span></span><br><span class=\"line\"><span class=\"comment\"># --csrs：指Config Server as a Replica Set，这个也是默认配置</span></span><br><span class=\"line\"><span class=\"comment\"># --mongos 3：启动3个mongos实例进程。</span></span><br><span class=\"line\"><span class=\"comment\"># --auth : 开启默认认证，同单节点</span></span><br><span class=\"line\"><span class=\"comment\"># --port 27050：集群将以27050作为起始端口，集群中的各个实例基于该端口向上递增。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下命令运行时必须指定数据目录，默认为当前路径下的data目录，可以使用<code>--dir</code>指定数据目录，因为需要通过<code>./data/.mlaunch_startup</code>来获取mongo的构建信息。以分片集群举例：</p>\n</blockquote>\n<h3 id=\"list-查看启动信息\">list: 查看启动信息</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看集群状态</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示mongo进程的列表</span></span><br><span class=\"line\">$ mlaunch list</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\"></span><br><span class=\"line\">PROCESS          PORT     STATUS     PID</span><br><span class=\"line\"></span><br><span class=\"line\">mongos           27050    running    61988</span><br><span class=\"line\">mongos           27051    running    61991</span><br><span class=\"line\">mongos           27052    running    61999</span><br><span class=\"line\"></span><br><span class=\"line\">config server    27059    running    61903</span><br><span class=\"line\">config server    27060    running    61911</span><br><span class=\"line\">config server    27061    running    61914</span><br><span class=\"line\"></span><br><span class=\"line\">shard01</span><br><span class=\"line\">    mongod       27053    running    61922</span><br><span class=\"line\">    mongod       27054    running    61947</span><br><span class=\"line\">    mongod       27055    running    61955</span><br><span class=\"line\"></span><br><span class=\"line\">shard02</span><br><span class=\"line\">    mongod       27056    running    61964</span><br><span class=\"line\">    mongod       27057    running    61972</span><br><span class=\"line\">    mongod       27058    running    61980</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看启动命令</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mlaunch list --startup</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\"></span><br><span class=\"line\">PROCESS          PORT     STATUS     PID      STARTUP COMMAND</span><br><span class=\"line\"></span><br><span class=\"line\">mongos           27050    running    61988    mongos --logpath /mongodb/mtools/sharded/data/mongos/mongos_27050.<span class=\"built_in\">log</span> --port 27050 --configdb configRepl/localhost:27059,localhost:27060,localhost:27061 --keyFile /mongodb/mtools/sharded/data/keyfile --fork</span><br><span class=\"line\">mongos           27051    running    61991    mongos --logpath /mongodb/mtools/sharded/data/mongos/mongos_27051.<span class=\"built_in\">log</span> --port 27051 --configdb configRepl/localhost:27059,localhost:27060,localhost:27061 --keyFile /mongodb/mtools/sharded/data/keyfile --fork</span><br><span class=\"line\">mongos           27052    running    61999    mongos --logpath /mongodb/mtools/sharded/data/mongos/mongos_27052.<span class=\"built_in\">log</span> --port 27052 --configdb configRepl/localhost:27059,localhost:27060,localhost:27061 --keyFile /mongodb/mtools/sharded/data/keyfile --fork</span><br><span class=\"line\"></span><br><span class=\"line\">config server    27059    running    61903    mongod --replSet configRepl --dbpath /mongodb/mtools/sharded/data/configRepl/rs1/db --logpath /mongodb/mtools/sharded/data/configRepl/rs1/mongod.log --port 27059 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --configsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\">config server    27060    running    61911    mongod --replSet configRepl --dbpath /mongodb/mtools/sharded/data/configRepl/rs2/db --logpath /mongodb/mtools/sharded/data/configRepl/rs2/mongod.log --port 27060 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --configsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\">config server    27061    running    61914    mongod --replSet configRepl --dbpath /mongodb/mtools/sharded/data/configRepl/rs3/db --logpath /mongodb/mtools/sharded/data/configRepl/rs3/mongod.log --port 27061 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --configsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\"></span><br><span class=\"line\">shard01</span><br><span class=\"line\">    mongod       27053    running    61922    mongod --replSet shard01 --dbpath /mongodb/mtools/sharded/data/shard01/rs1/db --logpath /mongodb/mtools/sharded/data/shard01/rs1/mongod.log --port 27053 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\">    mongod       27054    running    61947    mongod --replSet shard01 --dbpath /mongodb/mtools/sharded/data/shard01/rs2/db --logpath /mongodb/mtools/sharded/data/shard01/rs2/mongod.log --port 27054 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\">    mongod       27055    running    61955    mongod --replSet shard01 --dbpath /mongodb/mtools/sharded/data/shard01/rs3/db --logpath /mongodb/mtools/sharded/data/shard01/rs3/mongod.log --port 27055 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\"></span><br><span class=\"line\">shard02</span><br><span class=\"line\">    mongod       27056    running    61964    mongod --replSet shard02 --dbpath /mongodb/mtools/sharded/data/shard02/rs1/db --logpath /mongodb/mtools/sharded/data/shard02/rs1/mongod.log --port 27056 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\">    mongod       27057    running    61972    mongod --replSet shard02 --dbpath /mongodb/mtools/sharded/data/shard02/rs2/db --logpath /mongodb/mtools/sharded/data/shard02/rs2/mongod.log --port 27057 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\">    mongod       27058    running    61980    mongod --replSet shard02 --dbpath /mongodb/mtools/sharded/data/shard02/rs3/db --logpath /mongodb/mtools/sharded/data/shard02/rs3/mongod.log --port 27058 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    auth: <span class=\"string\">&quot;user:password&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"stop-关闭-mongo进程\">stop: 关闭 mongo进程</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭全部mongo进程，注意：如果开启了认证，stop会使用默认的用户名和密码进行认证（user/password），否则需要使用 kill</span></span><br><span class=\"line\">$ mlaunch stop</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">sent signal 15 to 11 processes.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只关闭mongos进程，这里mongos是tag</span></span><br><span class=\"line\">$ mlaunch stop mongos</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">sent signal 15 to 2 processes.</span><br><span class=\"line\"><span class=\"comment\"># 查看当前mongo进程状态</span></span><br><span class=\"line\">$ mlaunch list</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\"></span><br><span class=\"line\">PROCESS          PORT     STATUS     PID</span><br><span class=\"line\"></span><br><span class=\"line\">mongos           27050    down       -</span><br><span class=\"line\">mongos           27051    down       -</span><br><span class=\"line\"></span><br><span class=\"line\">config server    27058    running    23284</span><br><span class=\"line\">config server    27059    running    23287</span><br><span class=\"line\">config server    27060    running    23295</span><br><span class=\"line\"></span><br><span class=\"line\">shard01</span><br><span class=\"line\">    mongod       27052    running    23303</span><br><span class=\"line\">    mongod       27053    running    23326</span><br><span class=\"line\">    mongod       27054    running    23334</span><br><span class=\"line\"></span><br><span class=\"line\">shard02</span><br><span class=\"line\">    mongod       27055    running    23342</span><br><span class=\"line\">    mongod       27056    running    23345</span><br><span class=\"line\">    mongod       27057    running    23353</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tauth: <span class=\"string\">&quot;user:password&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"start-启动-mongo进程\">start: 启动 mongo进程</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动全部mongo进程</span></span><br><span class=\"line\">$ mlaunch start</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">launching: config server on port 27058</span><br><span class=\"line\">launching: config server on port 27059</span><br><span class=\"line\">launching: config server on port 27060</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27052</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27053</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27054</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27055</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27056</span><br><span class=\"line\">launching: <span class=\"string\">&quot;mongod&quot;</span> on port 27057</span><br><span class=\"line\">launching: mongos on port 27050</span><br><span class=\"line\">launching: mongos on port 27051</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只启动当前关闭的mongo进程</span></span><br><span class=\"line\">$ mlaunch start down</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">launching: mongos on port 27050</span><br><span class=\"line\">launching: mongos on port 27051</span><br></pre></td></tr></table></figure>\n<h3 id=\"restart-重启-mongo进程\">restart: 重启 mongo进程</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启，不推荐使用，除了单实例，复制集和分片集群都会出问题</span></span><br><span class=\"line\">$ mlaunch restart</span><br><span class=\"line\"><span class=\"comment\"># 以下是分片集群重启后的报错信息，猜测原因是并没有完全关闭mongo分片集群中的所有节点时就启动了</span></span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">sent signal 15 to 11 processes.</span><br><span class=\"line\">b<span class=\"string\">&#x27;about to fork child process, waiting until server is ready for connections.\\nforked process: 20202\\nERROR: child process failed, exited with 1\\nTo see additional information in this output, start without the &quot;--fork&quot; option.\\n&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"kill-杀掉-mongo进程\">kill: 杀掉 mongo进程</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 杀掉全部mongo进程</span></span><br><span class=\"line\">$ mlaunch <span class=\"built_in\">kill</span></span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">sent signal 15 to 11 processes.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 杀掉某个端口的mongo进程</span></span><br><span class=\"line\">$ mlaunch <span class=\"built_in\">kill</span> 27050</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\">sent signal 15 to 1 process.</span><br><span class=\"line\"><span class=\"comment\"># 可以看到27050端口的mongo进程的状态为down</span></span><br><span class=\"line\">$ mlaunch list</span><br><span class=\"line\">Detected mongod version: 7.0.6</span><br><span class=\"line\"></span><br><span class=\"line\">PROCESS          PORT     STATUS     PID</span><br><span class=\"line\"></span><br><span class=\"line\">mongos           27050    down       -</span><br><span class=\"line\">mongos           27051    running    23369</span><br><span class=\"line\"></span><br><span class=\"line\">config server    27058    running    23284</span><br><span class=\"line\">config server    27059    running    23287</span><br><span class=\"line\">config server    27060    running    23295</span><br><span class=\"line\"></span><br><span class=\"line\">shard01</span><br><span class=\"line\">    mongod       27052    running    23303</span><br><span class=\"line\">    mongod       27053    running    23326</span><br><span class=\"line\">    mongod       27054    running    23334</span><br><span class=\"line\"></span><br><span class=\"line\">shard02</span><br><span class=\"line\">    mongod       27055    running    23342</span><br><span class=\"line\">    mongod       27056    running    23345</span><br><span class=\"line\">    mongod       27057    running    23353</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tauth: <span class=\"string\">&quot;user:password&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭全部mongos进程</span></span><br><span class=\"line\">$ mlaunch <span class=\"built_in\">kill</span> mongos</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>支持的tags</strong></em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all：环境中的所有节点。</span><br><span class=\"line\">running：所有当前运行的节点。</span><br><span class=\"line\">down：目前所有关闭的节点。</span><br><span class=\"line\">mongos：所有mongos进程都带有此标签。</span><br><span class=\"line\">mongod：所有mongod进程（包括仲裁者和配置服务器）。</span><br><span class=\"line\">config：所有配置服务器</span><br><span class=\"line\">&lt;shard name&gt;：对于分片环境，分片的每个成员都带有分片名称作为标签，例如“shard-a”。</span><br><span class=\"line\">&lt;port number&gt;：每个节点都带有其端口号作为标签。</span><br></pre></td></tr></table></figure>\n</div>\n","content_text":"摘要 本文介绍mtools工具的使用 mtools官方文档，mtools-github mtools提供的mlaunch是一个基于python的mongo环境管理工具，可以方便的启动、停止、重启、kill mongo进程，还可以查看mongo进程的运行状态，可以方便初学者快速搭建本地mongo环境，但是其只能在一台机器上运行。 mtools安装 mtools基于python3，支持mongo4+以上版本，但是mtools并且不会为我们安装mongodb，所以需要我们自己先在系统中安装好mongodb，mongodb的安装可以参考MongoDB7.0的安装 按照官网的说法，mtools支持的Python版本为 3.7|3.8|3.9|3.10，其他版本的Python目前不受支持或测试，但作者的python版本为3.11.3，并没有出现兼容性问题。 123456789101112131415161718192021222324252627➜ ~ python3 --versionPython 3.11.3➜ ~ pip3 -Vpip 24.0 from /usr/local/lib/python3.11/site-packages/pip (python 3.11)➜ ~ pip3 listPackage Version----------------- ------------certifi 2023.11.17cffi 1.16.0cryptography 41.0.7docutils 0.20.1idna 3.6Jinja2 3.1.2MarkupSafe 2.1.3packaging 23.2pip 24.0pycparser 2.21Pygments 2.17.2pyparsing 3.1.1pytz 2023.3.post1requests 2.31.0setuptools 68.2.2six 1.16.0tabulate 0.0.0typing_extensions 4.9.0urllib3 2.1.0wheel 0.41.2 安装mtools依赖 1pip3 install python-dateutil psutil pymongo 安装mtools 1pip3 install mtools 安装mtools会同时为我们安装mtools的所有工具，如果只希望安装mlaunch，可以使用下面的命令 mtools提供的其它工具，如mlogfilter,mloginfo,mplotqueries等并不支持logv2格式的日志，logv2是mongodb4.4+以后的加入的，从mongodb5.0以后logv2为默认的日志格式，所以这里不做介绍。 1pip3 install &#x27;mtools[mlaunch]&#x27; mlaunch 查看mlaunch版本 12345➜ ~ which mlaunch/usr/local/bin/mlaunch➜ ~ mlaunch --versionDetected mongod version: 7.0.6mtools version 1.7.2 || Python 3.11.6 (main, Oct 3 2023, 02:51:45) [Clang 14.0.3 (clang-1403.0.22.14.1)] init :构建环境 此命令初始化并启动MongoDB独立实例、副本集或分片集群，它只需要为每个环境调用一次。 构建独立实例 123456789101112131415161718# 快速构建一个单节点，数据目录在当前路径下的data目录下$ mlaunch init --single --authDetected mongod version: 7.0.6Generating keyfile: /mongodb/mtools/single/data/keyfilelaunching: &quot;mongod&quot; on port 27017Username &quot;user&quot;, password &quot;password&quot;# 参数说明# --single ：启动单节点# --auth ：开启默认认证，默认用户名/密码:user/password，并授予如下角色 # &#123; role: &#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;, # &#123; role: &#x27;readWriteAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;, # &#123; role: &#x27;dbAdminAnyDatabase&#x27;, db: &#x27;admin&#x27; &#125;, # &#123; role: &#x27;clusterAdmin&#x27;, db: &#x27;admin&#x27; &#125;# --dir ：指定数据目录，默认为当前路径下的data目录# --bind_ip：指定监听ip，默认为127.0.0.1# --port：指定监听端口，默认为27017 构建复制集 123456789101112131415# 快速构建一个3节点的复制集$ mlaunch init --replicaset --nodes 3 --auth --port 27040Detected mongod version: 7.0.6Generating keyfile: /mongodb/mtools/replicaset/data/keyfilelaunching: &quot;mongod&quot; on port 27040launching: &quot;mongod&quot; on port 27041launching: &quot;mongod&quot; on port 27042replica set &#x27;replset&#x27; initialized.waiting for primary to add a user.Username &quot;user&quot;, password &quot;password&quot;# --replicaset ：创建副本集，默认3个节点# --nodes 3 ：指定副本集节点个数，默认3个节点# --auth : 开启默认认证，同单节点# --port 27040 : 指定复制集的起始端口，默认从27017开始，依次递增 构建分片集群 12345678910111213141516171819202122232425262728293031323334353637383940414243# 快速构建一个2个分片的分片集群，每个分片是一个包含3每个节点的复制集，包含一个3个节点配置复制集，并且启动3个mongos路由$ mlaunch init --sharded 2 --replicaset --node 3 --config 3 --csrs --mongos 3 --auth --port 27050Detected mongod version: 7.0.6Generating keyfile: /mongodb/mtools/sharded/data/keyfilelaunching: &quot;mongod&quot; on port 27053launching: &quot;mongod&quot; on port 27054launching: &quot;mongod&quot; on port 27055launching: &quot;mongod&quot; on port 27056launching: &quot;mongod&quot; on port 27057launching: &quot;mongod&quot; on port 27058launching: config server on port 27059launching: config server on port 27060launching: config server on port 27061replica set &#x27;configRepl&#x27; initialized.replica set &#x27;shard01&#x27; initialized.replica set &#x27;shard02&#x27; initialized.launching: mongos on port 27050launching: mongos on port 27051launching: mongos on port 27052adding shards. can take up to 30 seconds...sent signal 15 to 12 processes.launching: config server on port 27059launching: config server on port 27060launching: config server on port 27061launching: &quot;mongod&quot; on port 27053launching: &quot;mongod&quot; on port 27054launching: &quot;mongod&quot; on port 27055launching: &quot;mongod&quot; on port 27056launching: &quot;mongod&quot; on port 27057launching: &quot;mongod&quot; on port 27058launching: mongos on port 27050launching: mongos on port 27051launching: mongos on port 27052Username &quot;user&quot;, password &quot;password&quot;# --sharded 2：启用分片集群模式，分片数为2。# --replicaset : 创建副本集，默认3个节点，可以通过 --nodes 指定复制集节点个数# --nodes 3：采用3节点的复制集架构，默认就是3个节点。# --config 3：配置服务器采用3节点的复制集架构模式# --csrs：指Config Server as a Replica Set，这个也是默认配置# --mongos 3：启动3个mongos实例进程。# --auth : 开启默认认证，同单节点# --port 27050：集群将以27050作为起始端口，集群中的各个实例基于该端口向上递增。 以下命令运行时必须指定数据目录，默认为当前路径下的data目录，可以使用--dir指定数据目录，因为需要通过./data/.mlaunch_startup来获取mongo的构建信息。以分片集群举例： list: 查看启动信息 查看集群状态 1234567891011121314151617181920212223# 显示mongo进程的列表$ mlaunch listDetected mongod version: 7.0.6PROCESS PORT STATUS PIDmongos 27050 running 61988mongos 27051 running 61991mongos 27052 running 61999config server 27059 running 61903config server 27060 running 61911config server 27061 running 61914shard01 mongod 27053 running 61922 mongod 27054 running 61947 mongod 27055 running 61955shard02 mongod 27056 running 61964 mongod 27057 running 61972 mongod 27058 running 61980 查看启动命令 12345678910111213141516171819202122232425$ mlaunch list --startupDetected mongod version: 7.0.6PROCESS PORT STATUS PID STARTUP COMMANDmongos 27050 running 61988 mongos --logpath /mongodb/mtools/sharded/data/mongos/mongos_27050.log --port 27050 --configdb configRepl/localhost:27059,localhost:27060,localhost:27061 --keyFile /mongodb/mtools/sharded/data/keyfile --forkmongos 27051 running 61991 mongos --logpath /mongodb/mtools/sharded/data/mongos/mongos_27051.log --port 27051 --configdb configRepl/localhost:27059,localhost:27060,localhost:27061 --keyFile /mongodb/mtools/sharded/data/keyfile --forkmongos 27052 running 61999 mongos --logpath /mongodb/mtools/sharded/data/mongos/mongos_27052.log --port 27052 --configdb configRepl/localhost:27059,localhost:27060,localhost:27061 --keyFile /mongodb/mtools/sharded/data/keyfile --forkconfig server 27059 running 61903 mongod --replSet configRepl --dbpath /mongodb/mtools/sharded/data/configRepl/rs1/db --logpath /mongodb/mtools/sharded/data/configRepl/rs1/mongod.log --port 27059 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --configsvr --wiredTigerCacheSizeGB 1config server 27060 running 61911 mongod --replSet configRepl --dbpath /mongodb/mtools/sharded/data/configRepl/rs2/db --logpath /mongodb/mtools/sharded/data/configRepl/rs2/mongod.log --port 27060 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --configsvr --wiredTigerCacheSizeGB 1config server 27061 running 61914 mongod --replSet configRepl --dbpath /mongodb/mtools/sharded/data/configRepl/rs3/db --logpath /mongodb/mtools/sharded/data/configRepl/rs3/mongod.log --port 27061 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --configsvr --wiredTigerCacheSizeGB 1shard01 mongod 27053 running 61922 mongod --replSet shard01 --dbpath /mongodb/mtools/sharded/data/shard01/rs1/db --logpath /mongodb/mtools/sharded/data/shard01/rs1/mongod.log --port 27053 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1 mongod 27054 running 61947 mongod --replSet shard01 --dbpath /mongodb/mtools/sharded/data/shard01/rs2/db --logpath /mongodb/mtools/sharded/data/shard01/rs2/mongod.log --port 27054 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1 mongod 27055 running 61955 mongod --replSet shard01 --dbpath /mongodb/mtools/sharded/data/shard01/rs3/db --logpath /mongodb/mtools/sharded/data/shard01/rs3/mongod.log --port 27055 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1shard02 mongod 27056 running 61964 mongod --replSet shard02 --dbpath /mongodb/mtools/sharded/data/shard02/rs1/db --logpath /mongodb/mtools/sharded/data/shard02/rs1/mongod.log --port 27056 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1 mongod 27057 running 61972 mongod --replSet shard02 --dbpath /mongodb/mtools/sharded/data/shard02/rs2/db --logpath /mongodb/mtools/sharded/data/shard02/rs2/mongod.log --port 27057 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1 mongod 27058 running 61980 mongod --replSet shard02 --dbpath /mongodb/mtools/sharded/data/shard02/rs3/db --logpath /mongodb/mtools/sharded/data/shard02/rs3/mongod.log --port 27058 --fork --keyFile /mongodb/mtools/sharded/data/keyfile --shardsvr --wiredTigerCacheSizeGB 1 auth: &quot;user:password&quot; stop: 关闭 mongo进程 12345678910111213141516171819202122232425262728293031323334# 关闭全部mongo进程，注意：如果开启了认证，stop会使用默认的用户名和密码进行认证（user/password），否则需要使用 kill$ mlaunch stopDetected mongod version: 7.0.6sent signal 15 to 11 processes.# 只关闭mongos进程，这里mongos是tag$ mlaunch stop mongosDetected mongod version: 7.0.6sent signal 15 to 2 processes.# 查看当前mongo进程状态$ mlaunch listDetected mongod version: 7.0.6PROCESS PORT STATUS PIDmongos 27050 down -mongos 27051 down -config server 27058 running 23284config server 27059 running 23287config server 27060 running 23295shard01 mongod 27052 running 23303 mongod 27053 running 23326 mongod 27054 running 23334shard02 mongod 27055 running 23342 mongod 27056 running 23345 mongod 27057 running 23353 auth: &quot;user:password&quot; start: 启动 mongo进程 1234567891011121314151617181920# 启动全部mongo进程$ mlaunch startDetected mongod version: 7.0.6launching: config server on port 27058launching: config server on port 27059launching: config server on port 27060launching: &quot;mongod&quot; on port 27052launching: &quot;mongod&quot; on port 27053launching: &quot;mongod&quot; on port 27054launching: &quot;mongod&quot; on port 27055launching: &quot;mongod&quot; on port 27056launching: &quot;mongod&quot; on port 27057launching: mongos on port 27050launching: mongos on port 27051# 只启动当前关闭的mongo进程$ mlaunch start downDetected mongod version: 7.0.6launching: mongos on port 27050launching: mongos on port 27051 restart: 重启 mongo进程 123456# 重启，不推荐使用，除了单实例，复制集和分片集群都会出问题$ mlaunch restart# 以下是分片集群重启后的报错信息，猜测原因是并没有完全关闭mongo分片集群中的所有节点时就启动了Detected mongod version: 7.0.6sent signal 15 to 11 processes.b&#x27;about to fork child process, waiting until server is ready for connections.\\nforked process: 20202\\nERROR: child process failed, exited with 1\\nTo see additional information in this output, start without the &quot;--fork&quot; option.\\n&#x27; kill: 杀掉 mongo进程 12345678910111213141516171819202122232425262728293031323334353637# 杀掉全部mongo进程$ mlaunch killDetected mongod version: 7.0.6sent signal 15 to 11 processes.# 杀掉某个端口的mongo进程$ mlaunch kill 27050Detected mongod version: 7.0.6sent signal 15 to 1 process.# 可以看到27050端口的mongo进程的状态为down$ mlaunch listDetected mongod version: 7.0.6PROCESS PORT STATUS PIDmongos 27050 down -mongos 27051 running 23369config server 27058 running 23284config server 27059 running 23287config server 27060 running 23295shard01 mongod 27052 running 23303 mongod 27053 running 23326 mongod 27054 running 23334shard02 mongod 27055 running 23342 mongod 27056 running 23345 mongod 27057 running 23353 auth: &quot;user:password&quot;# 关闭全部mongos进程$ mlaunch kill mongos 支持的tags 12345678all：环境中的所有节点。running：所有当前运行的节点。down：目前所有关闭的节点。mongos：所有mongos进程都带有此标签。mongod：所有mongod进程（包括仲裁者和配置服务器）。config：所有配置服务器&lt;shard name&gt;：对于分片环境，分片的每个成员都带有分片名称作为标签，例如“shard-a”。&lt;port number&gt;：每个节点都带有其端口号作为标签。","summary":"摘要 本文介绍mtools工具的使用 mtools官方文档，mtools-github mtools提供的mlaunch是一个基于python的mongo环境管理工具，可以方便的启动、停止、重启、kill mongo进程，还可以查看mongo进程的运行状态，可以方便初学者快速搭建本地mongo环境，但是其只能在一台机器上运行。","date_published":"2024-03-14T13:30:05.000Z","tags":["技术","mac","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/03/13/linux-command14-setting/","url":"https://blog.hanqunfeng.com/2024/03/13/linux-command14-setting/","title":"Linux常用命令--常用设置","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装完linux后，一些常用的设置可以方便我们今后的使用，比如关闭SELinux，增加文件描述符限制，等等。</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于CentOS8。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"关闭SELinux\">关闭SELinux</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>SELinux（Security-Enhanced Linux）是一种基于安全策略的 Linux 安全模块，其主要目的是提供对各种应用程序和进程的更细粒度的访问控制。</p>\n</li>\n<li class=\"lvl-2\">\n<p>SELinux 的安全方案主要基于以下两个策略：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">强制访问控制（Mandatory Access Control, MAC）：MAC 策略不允许用户在他们拥有的文件和进程上设置安全访问控制，而是根据一个由系统管理员和/或操作系统开发商定义的集中安全策略进行访问控制。</li>\n<li class=\"lvl-6\">类型强制访问控制（Type Enforcement）：通过将文件、目录和其他资源分配到类型，并定义它们之间的交互，限制进程在资源之间的信息流。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>在实际工作中，SELinux 可以用来阻止或限制恶意或损坏的应用程序对系统造成的损害。当配置正确时，SELinux 提供的强大安全机制可以显著提高系统的安全性。</p>\n</li>\n<li class=\"lvl-2\">\n<p>但是，SELinux 也可能会带来一些问题，例如，它可能会导致某些应用程序无法正常工作，或者它可能会在某些情况下导致性能下降。因此，许多 Linux 发行版默认会关闭 SELinux，以避免这些问题。</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过以下命令，可以查看当前的 SELinux 状态：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果当前状态为 Enforcing，表示 SELinux 已启用，否则为 Disabled。</span></span><br><span class=\"line\">$ sestatus</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>临时关闭 SELinux，可以使用以下命令：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ setenforce 0</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>永久关闭 SELinux，可以使用以下命令：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi /etc/selinux/config</span><br><span class=\"line\">    <span class=\"comment\"># 在文件中找到以下行，将值改为 disabled。</span></span><br><span class=\"line\">    SELINUX=disabled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启系统，SELinux 就会关闭。</span></span><br><span class=\"line\">$ reboot</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>临时开启 SELinux，可以使用以下命令：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ setenforce 1</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>永久开启 SELinux，可以使用以下命令：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi /etc/selinux/config</span><br><span class=\"line\">    <span class=\"comment\"># 在文件中找到以下行，将值改为 enforcing。</span></span><br><span class=\"line\">    SELINUX=enforcing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启系统，SELinux 就会开启。</span></span><br><span class=\"line\">$ reboot</span><br></pre></td></tr></table></figure>\n<h2 id=\"增加文件描述符限制\">增加文件描述符限制</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>每个运行中的进程都有一个限制，即它可以同时打开的最大文件描述符数量。这个限制对于避免过度使用系统资源非常重要。然而，在某些情况下，你可能需要增加这个限制来满足应用的需求。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Linux 服务器默认的文件描述符限制为 1024，如果需要使用更多的文件描述符，可以使用以下命令来增加限制：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时设置，即刻生效</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -n 65535</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 永久设置</span></span><br><span class=\"line\">$ vi /etc/security/limits.conf</span><br><span class=\"line\">    <span class=\"comment\"># 在文件中找到以下行，将值改为 65535</span></span><br><span class=\"line\">    <span class=\"comment\"># 如果不存在对应的配置则在文件末尾添加即可</span></span><br><span class=\"line\">    <span class=\"comment\"># root用户限制</span></span><br><span class=\"line\">    root soft nofile 65535</span><br><span class=\"line\">    root hard nofile 65535</span><br><span class=\"line\">    <span class=\"comment\"># 其它用户限制</span></span><br><span class=\"line\">    * soft nofile 65535</span><br><span class=\"line\">    * hard nofile 65535</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启系统，文件描述符限制就变了。</span></span><br><span class=\"line\">$ reboot</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这样的设置既为 root 用户设置了文件描述符（句柄）的软硬限制数量为65535，也为系统中所有其他用户设置了同样的限制。所谓“软限制”是指用户可以达到但不能超过的限制，而“硬限制”是指系统设置的绝对限制。即软限制不能大于硬限制的值。</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过以下命令，可以查看当前的文件描述符限制：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看的是当前 bash 的“软”文件描述符限制</span></span><br><span class=\"line\">$ <span class=\"built_in\">ulimit</span> -n</span><br><span class=\"line\"><span class=\"comment\"># 查看软限制，在大多数情况下，ulimit -n 和 ulimit -Sn 是相同的</span></span><br><span class=\"line\">$ <span class=\"built_in\">ulimit</span> -Sn</span><br><span class=\"line\"><span class=\"comment\"># 查看硬限制</span></span><br><span class=\"line\">$ <span class=\"built_in\">ulimit</span> -Hn</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 安装完linux后，一些常用的设置可以方便我们今后的使用，比如关闭SELinux，增加文件描述符限制，等等。 本文基于CentOS8。 关闭SELinux SELinux（Security-Enhanced Linux）是一种基于安全策略的 Linux 安全模块，其主要目的是提供对各种应用程序和进程的更细粒度的访问控制。 SELinux 的安全方案主要基于以下两个策略： 强制访问控制（Mandatory Access Control, MAC）：MAC 策略不允许用户在他们拥有的文件和进程上设置安全访问控制，而是根据一个由系统管理员和/或操作系统开发商定义的集中安全策略进行访问控制。 类型强制访问控制（Type Enforcement）：通过将文件、目录和其他资源分配到类型，并定义它们之间的交互，限制进程在资源之间的信息流。 在实际工作中，SELinux 可以用来阻止或限制恶意或损坏的应用程序对系统造成的损害。当配置正确时，SELinux 提供的强大安全机制可以显著提高系统的安全性。 但是，SELinux 也可能会带来一些问题，例如，它可能会导致某些应用程序无法正常工作，或者它可能会在某些情况下导致性能下降。因此，许多 Linux 发行版默认会关闭 SELinux，以避免这些问题。 通过以下命令，可以查看当前的 SELinux 状态： 12# 如果当前状态为 Enforcing，表示 SELinux 已启用，否则为 Disabled。$ sestatus 临时关闭 SELinux，可以使用以下命令： 1$ setenforce 0 永久关闭 SELinux，可以使用以下命令： 123456$ vi /etc/selinux/config # 在文件中找到以下行，将值改为 disabled。 SELINUX=disabled# 重启系统，SELinux 就会关闭。$ reboot 临时开启 SELinux，可以使用以下命令： 1$ setenforce 1 永久开启 SELinux，可以使用以下命令： 123456$ vi /etc/selinux/config # 在文件中找到以下行，将值改为 enforcing。 SELINUX=enforcing# 重启系统，SELinux 就会开启。$ reboot 增加文件描述符限制 每个运行中的进程都有一个限制，即它可以同时打开的最大文件描述符数量。这个限制对于避免过度使用系统资源非常重要。然而，在某些情况下，你可能需要增加这个限制来满足应用的需求。 Linux 服务器默认的文件描述符限制为 1024，如果需要使用更多的文件描述符，可以使用以下命令来增加限制： 12345678910111213141516# 临时设置，即刻生效ulimit -n 65535# 永久设置$ vi /etc/security/limits.conf # 在文件中找到以下行，将值改为 65535 # 如果不存在对应的配置则在文件末尾添加即可 # root用户限制 root soft nofile 65535 root hard nofile 65535 # 其它用户限制 * soft nofile 65535 * hard nofile 65535# 重启系统，文件描述符限制就变了。$ reboot 这样的设置既为 root 用户设置了文件描述符（句柄）的软硬限制数量为65535，也为系统中所有其他用户设置了同样的限制。所谓“软限制”是指用户可以达到但不能超过的限制，而“硬限制”是指系统设置的绝对限制。即软限制不能大于硬限制的值。 通过以下命令，可以查看当前的文件描述符限制： 123456# 查看的是当前 bash 的“软”文件描述符限制$ ulimit -n# 查看软限制，在大多数情况下，ulimit -n 和 ulimit -Sn 是相同的$ ulimit -Sn# 查看硬限制$ ulimit -Hn","summary":"摘要 安装完linux后，一些常用的设置可以方便我们今后的使用，比如关闭SELinux，增加文件描述符限制，等等。 本文基于CentOS8。","date_published":"2024-03-13T13:30:05.000Z","tags":["技术","linux","linux常用命令","linux常用命令"]},{"id":"https://blog.hanqunfeng.com/2024/03/11/mongodb7-index/","url":"https://blog.hanqunfeng.com/2024/03/11/mongodb7-index/","title":"MongoDB7.0--索引","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍如何使用MongoDB7.0的索引</p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB版本7.0.6</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/v7.0/indexes/\">MongoDB Indexes</a></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"MongoDB索引简介\">MongoDB索引简介</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>索引支持在MongoDB中高效执行查询。如果没有索引，MongoDB必须扫描集合中的每个文档才能返回查询结果。如果查询存在适当的索引，MongoDB使用该索引来限制它必须扫描的文档数量。</p>\n</li>\n<li class=\"lvl-2\">\n<p>虽然索引可以提高查询性能，但添加索引对写入操作的性能有负面影响。对于写入读数比较高的集合，索引很昂贵，因为每个插入还必须更新任何索引。</p>\n</li>\n<li class=\"lvl-2\">\n<p>所以合理的创建索引，即可以提升查询性能，又不会对写操作造成太大的影响。</p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB采用 <code>B-Tree (准确的说是 B+Tree)</code> 做索引，索引创建在colletions上。</p>\n</li>\n</ul>\n<h2 id=\"创建索引语法\">创建索引语法</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.createIndex( keys, options )</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Key 值为你要创建的索引字段，1 按升序创建索引， -1 按降序创建索引</p>\n</li>\n<li class=\"lvl-2\">\n<p>options 选项</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>background</td>\n<td>Boolean</td>\n<td>建索引过程是否阻塞其它数据库操作，设置为 true 则以后台方式创建索引</td>\n</tr>\n<tr>\n<td>unique</td>\n<td>Boolean</td>\n<td>建立的索引是否唯一，设置为 true 则创建唯一索引</td>\n</tr>\n<tr>\n<td>name</td>\n<td>string</td>\n<td>索引的名称</td>\n</tr>\n<tr>\n<td>dropDups</td>\n<td>Boolean</td>\n<td>3.0+版本已废弃，在建立唯一索引时是否删除重复记录</td>\n</tr>\n<tr>\n<td>sparse</td>\n<td>Boolean</td>\n<td>对文档中不存在的字段数据是否启用索引</td>\n</tr>\n<tr>\n<td>expireAfterSeconds</td>\n<td>integer</td>\n<td>指定一个以秒为单位的数值，完成 TTL 设定，设定集合的生存时间</td>\n</tr>\n<tr>\n<td>v</td>\n<td>index version</td>\n<td>索引的版本号</td>\n</tr>\n<tr>\n<td>weights</td>\n<td>document</td>\n<td>索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重</td>\n</tr>\n<tr>\n<td>default_language</td>\n<td>string</td>\n<td>对于文本索引，该参数决定了停用词及词干和词器的规则的列表</td>\n</tr>\n<tr>\n<td>language_override</td>\n<td>string</td>\n<td>对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的 language</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"索引类型\">索引类型</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>与大多数数据库一样，MongoDB支持各种丰富的索引类型，包括单键索引、复合索引，唯一索引等一些常用的结构。由于采用了灵活可变的文档类型，因此它也同样支持对嵌套字段、数组进行索引。通过建立合适的索引，我们可以极大地提升数据的检索速度。在一些特殊应用场景，MongoDB还支持地理空间索引、文本检索索引、TTL索引等不同的特性。</p>\n</li>\n</ul>\n<h3 id=\"单键索引-Single-Field-Indexes\">单键索引(Single Field Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>单键索引是MongoDB最简单的索引类型，它将一个字段作为索引键，索引键值唯一。</p>\n</li>\n<li class=\"lvl-2\">\n<p>默认情况下，MongoDB会在ID字段上创建一个单键索引，ID字段是文档的唯一标识符，MongoDB会自动创建一个ID字段，如果用户自己创建ID字段，MongoDB会自动将ID字段作为单键索引。</p>\n</li>\n<li class=\"lvl-2\">\n<p>单键索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1表示正序，-1表示倒序</span></span><br><span class=\"line\">db.books.createIndex(&#123;title:1&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 对内嵌文档字段创建索引：</span></span><br><span class=\"line\">db.books.createIndex(&#123;<span class=\"string\">&quot;author.name&quot;</span>:1&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"复合索引-Compound-Index\">复合索引(Compound Index)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>复合索引是将多个字段作为索引键，其性质和单字段索引类似。但不同的是，复合索引中字段的顺序、字段的升降序对查询性能有直接的影响，因此在设计复合索引时则需要考虑不同的查询场景。</p>\n</li>\n<li class=\"lvl-2\">\n<p>复合索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.books.createIndex(&#123;title:1, author.name:1&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 对内嵌文档字段创建索引：</span></span><br><span class=\"line\">db.books.createIndex(&#123;<span class=\"string\">&quot;author.name&quot;</span>:1, <span class=\"string\">&quot;author.age&quot;</span>:1&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"多键-数组-索引-Multikey-Index\">多键(数组)索引(Multikey Index)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>多键索引是将一个字段作为索引键，该字段可以是嵌套文档、数组等复杂数据类型。</p>\n</li>\n<li class=\"lvl-2\">\n<p>多键索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tags字段为数组</span></span><br><span class=\"line\">db.books.createIndex(&#123;<span class=\"string\">&quot;tags&quot;</span>:1&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 创建复合多值索引，这里仅能有一个字段是数组，MongoDB并不支持一个复合索引中同时出现多个数组字段</span></span><br><span class=\"line\">db.books.createIndex(&#123;title:1, tags:1&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例数据格式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _id: 1,</span><br><span class=\"line\">  item: <span class=\"string\">&quot;abc&quot;</span>,</span><br><span class=\"line\">  stock: [</span><br><span class=\"line\">    &#123; size: <span class=\"string\">&quot;S&quot;</span>, color: <span class=\"string\">&quot;red&quot;</span>, quantity: 25 &#125;,</span><br><span class=\"line\">    &#123; size: <span class=\"string\">&quot;S&quot;</span>, color: <span class=\"string\">&quot;blue&quot;</span>, quantity: 10 &#125;,</span><br><span class=\"line\">    &#123; size: <span class=\"string\">&quot;M&quot;</span>, color: <span class=\"string\">&quot;blue&quot;</span>, quantity: 50 &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 可以对嵌入文档创建多键索引</span></span><br><span class=\"line\">db.collection.createIndex( &#123; <span class=\"string\">&quot;stock.size&quot;</span>: 1, <span class=\"string\">&quot;stock.quantity&quot;</span>: 1 &#125; )</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hash索引-Hashed-Indexes\">Hash索引(Hashed Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Hash索引是MongoDB中的一种特殊的索引类型，它将字段的值计算出一个哈希值，然后将该哈希值作为索引键。由于哈希值的唯一性，因此MongoDB在创建Hash索引时，不会对索引键值进行排序。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Hash索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.books.createIndex(&#123;title:<span class=\"string\">&quot;hashed&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 对内嵌文档字段创建索引：</span></span><br><span class=\"line\">db.books.createIndex(&#123;<span class=\"string\">&quot;author.name&quot;</span>:<span class=\"string\">&quot;hashed&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"通配符索引-Wildcard-Indexes\">通配符索引(Wildcard Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通配符索引是MongoDB中的一种特殊的索引类型，它允许在索引键值中包含通配符，从而支持对通配符匹配的查询。</p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB 4.2 引入了通配符索</p>\n</li>\n<li class=\"lvl-2\">\n<p>通配符索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例数据</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;product_name&quot;</span> : <span class=\"string\">&quot;Spy Coat&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;product_attributes&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;material&quot;</span> : [ <span class=\"string\">&quot;Tweed&quot;</span>, <span class=\"string\">&quot;Wool&quot;</span>, <span class=\"string\">&quot;Leather&quot;</span> ],</span><br><span class=\"line\">        <span class=\"string\">&quot;size&quot;</span> : &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;length&quot;</span> : 72,</span><br><span class=\"line\">            <span class=\"string\">&quot;units&quot;</span> : <span class=\"string\">&quot;inches&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.products.createIndex( &#123; <span class=\"string\">&quot;product_attributes.$**&quot;</span> : 1 &#125; )</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通配符索引是稀疏的，不索引空字段。因此，通配符索引不能支持查询字段不存在的文档。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通配符索引不能支持以下查询</span></span><br><span class=\"line\">db.products.find( &#123;<span class=\"string\">&quot;product_attributes&quot;</span> : &#123; <span class=\"variable\">$exists</span> : <span class=\"literal\">false</span> &#125; &#125; )</span><br><span class=\"line\">db.products.aggregate([</span><br><span class=\"line\">  &#123; <span class=\"variable\">$match</span> : &#123; <span class=\"string\">&quot;product_attributes&quot;</span> : &#123; <span class=\"variable\">$exists</span> : <span class=\"literal\">false</span> &#125; &#125; &#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通配符索引为文档或数组的内容生成条目，而不是文档/数组本身。因此通配符索引不能支持精确的文档/数组相等匹配。通配符索引可以支持查询字段等于空文档{}的情况</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#通配符索引不能支持以下查询:</span></span><br><span class=\"line\">db.products.find(&#123; <span class=\"string\">&quot;product_attributes.colors&quot;</span> : [ <span class=\"string\">&quot;Blue&quot;</span>, <span class=\"string\">&quot;Black&quot;</span> ] &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\">db.products.aggregate([&#123;</span><br><span class=\"line\">  <span class=\"variable\">$match</span> : &#123; <span class=\"string\">&quot;product_attributes.colors&quot;</span> : [ <span class=\"string\">&quot;Blue&quot;</span>, <span class=\"string\">&quot;Black&quot;</span> ] &#125;</span><br><span class=\"line\">&#125;])</span><br></pre></td></tr></table></figure>\n<h2 id=\"索引属性\">索引属性</h2>\n<h3 id=\"唯一索引-Unique-Indexes\">唯一索引(Unique Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>唯一索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单键索引支持唯一约束</span></span><br><span class=\"line\">db.books.createIndex(&#123;title:1&#125;, &#123;unique:<span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 复合索引支持唯一性约束</span></span><br><span class=\"line\">db.books.createIndex(&#123;title:1，<span class=\"built_in\">type</span>:1&#125;, &#123;unique:<span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 多键索引支持唯一性约束，这里tags是数组</span></span><br><span class=\"line\">db.books.createIndex(&#123;<span class=\"string\">&quot;tags&quot;</span>:1&#125;, &#123;unique:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>唯一性索引对于文档中缺失的字段，会使用null值代替，因此不允许存在多个文档缺失索引字段的情况。</p>\n</li>\n<li class=\"lvl-2\">\n<p>对于分片的集合，唯一性约束必须匹配分片规则。换句话说，为了保证全局的唯一性，分片键必须作为唯一性索引的前缀字段。</p>\n</li>\n</ul>\n<h3 id=\"部分索引-Partial-Indexes\">部分索引(Partial Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>部分索引仅对满足指定过滤器表达式的文档进行索引。通过在一个集合中为文档的一个子集建立索引，部分索引具有更低的存储需求和更低的索引创建和维护的性能成本。</p>\n</li>\n<li class=\"lvl-2\">\n<p>部分索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 符合条件&#123;author: &#123;$exists: true&#125;&#125;，即存在作者，才对title创建升序索引</span></span><br><span class=\"line\">db.books.createIndex(&#123;title:1&#125;, &#123;partialFilterExpression: &#123;author: &#123;<span class=\"variable\">$exists</span>: <span class=\"literal\">true</span>&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>partialFilterExpression(筛选器表达式)选项接受指定过滤条件的文档:<br>\n- 等式表达式(例如:field: value或使用$eq操作符)<br>\n- $exists: true<br>\n- $gt， $gte， $lt， $lte<br>\n- $type<br>\n- 顶层的$and</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>注意：如果同时指定了partialFilterExpression和唯一约束，那么唯一约束只适用于满足筛选器表达式的文档。如果文档不满足筛选条件，那么带有惟一约束的部分索引不会阻止插入不满足惟一约束的文档。</p>\n</li>\n</ul>\n<h3 id=\"稀疏索引-Sparse-Indexes\">稀疏索引(Sparse Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>索引的稀疏属性确保索引只包含具有索引字段的文档的条目，索引将跳过没有索引字段的文档。即只对存在字段的文档进行索引（包括字段值为null的文档）。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果稀疏索引会导致查询和排序操作的结果集不完整，MongoDB将不会使用该索引，除非hint()明确指定索引。</p>\n</li>\n<li class=\"lvl-2\">\n<p>稀疏索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据准备</span></span><br><span class=\"line\">db.scores.insertMany([</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;userid&quot;</span> : <span class=\"string\">&quot;newbie&quot;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;userid&quot;</span> : <span class=\"string\">&quot;abby&quot;</span>, <span class=\"string\">&quot;score&quot;</span> : 82&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;userid&quot;</span> : <span class=\"string\">&quot;nina&quot;</span>, <span class=\"string\">&quot;score&quot;</span> : 90&#125;</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建稀疏索引</span></span><br><span class=\"line\">db.scores.createIndex( &#123; score: 1 &#125; , &#123; sparse: <span class=\"literal\">true</span> &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试</span></span><br><span class=\"line\"><span class=\"comment\"># 使用稀疏索引</span></span><br><span class=\"line\">db.scores.find( &#123; score: &#123; <span class=\"variable\">$lt</span>: 90 &#125; &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 即使排序是通过索引字段，MongoDB也不会选择稀疏索引来完成查询，以返回完整的结果</span></span><br><span class=\"line\">db.scores.find().<span class=\"built_in\">sort</span>( &#123; score: -1 &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 要使用稀疏索引，使用hint()显式指定索引</span></span><br><span class=\"line\">db.scores.find().<span class=\"built_in\">sort</span>( &#123; score: -1 &#125; ).hint( &#123; score: 1 &#125; )</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>同时具有稀疏性和唯一性的索引可以防止集合中存在字段值重复的文档，但允许不包含此索引字段的文档插入。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除之前创建的索引</span></span><br><span class=\"line\">db.scores.dropIndex(&#123;score:1&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 创建具有唯一约束的稀疏索引</span></span><br><span class=\"line\">db.scores.createIndex( &#123; score: 1 &#125; , &#123; sparse: <span class=\"literal\">true</span>, unique: <span class=\"literal\">true</span> &#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试插入</span></span><br><span class=\"line\">db.scores.insertMany( [</span><br><span class=\"line\">   &#123; <span class=\"string\">&quot;userid&quot;</span>: <span class=\"string\">&quot;AAAAAAA&quot;</span>, <span class=\"string\">&quot;score&quot;</span>: 50 &#125;,</span><br><span class=\"line\">   &#123; <span class=\"string\">&quot;userid&quot;</span>: <span class=\"string\">&quot;BBBBBBB&quot;</span>, <span class=\"string\">&quot;score&quot;</span>: 64 &#125;,</span><br><span class=\"line\">   &#123; <span class=\"string\">&quot;userid&quot;</span>: <span class=\"string\">&quot;CCCCCCC&quot;</span> &#125;,</span><br><span class=\"line\">   &#123; <span class=\"string\">&quot;userid&quot;</span>: <span class=\"string\">&quot;CCCCCCC&quot;</span> &#125;</span><br><span class=\"line\">] )</span><br></pre></td></tr></table></figure>\n<h3 id=\"TTL索引-TTL-Indexes\">TTL索引(TTL Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>MongoDB 可以使用它在一定时间或特定时钟时间后自动从集合中删除文档，就是带有过期时间的索引，到期后，MongoDB会自动删除这些过期的文档。</p>\n</li>\n<li class=\"lvl-2\">\n<p>TTL索引只能创建在日期字段上，当文档过期后，MongoDB会自动删除这些文档。</p>\n</li>\n<li class=\"lvl-2\">\n<p>TTL索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据准备</span></span><br><span class=\"line\">db.log_events.insertOne( &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;createdAt&quot;</span>: new Date(),</span><br><span class=\"line\">   <span class=\"string\">&quot;logEvent&quot;</span>: 2,</span><br><span class=\"line\">   <span class=\"string\">&quot;logMessage&quot;</span>: <span class=\"string\">&quot;Success!&quot;</span></span><br><span class=\"line\">&#125; )</span><br><span class=\"line\"><span class=\"comment\"># 创建TTL索引</span></span><br><span class=\"line\">db.scores.createIndex( &#123; <span class=\"string\">&quot;createdAt&quot;</span>: 1 &#125;, &#123; expireAfterSeconds: 3600 &#125; )</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>TTL 索引不保证过期数据会在过期后立即被删除。文档过期和 MongoDB 从数据库中删除文档的时间之间可能存在延迟。删除过期文档的后台任务每 60 秒运行一次。因此，在文档到期和后台任务运行之间的时间段内，文档可能会保留在集合中。</p>\n</li>\n<li class=\"lvl-2\">\n<p>TTL索引在创建之后，仍然可以对过期时间进行修改。这需要使用collMod命令对索引的定义进行变更</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.runCommand( &#123;</span><br><span class=\"line\">    collMod: <span class=\"string\">&quot;log_events&quot;</span>,</span><br><span class=\"line\">    index: &#123;</span><br><span class=\"line\">        keyPattern: &#123; createdAt: 1 &#125;,</span><br><span class=\"line\">        expireAfterSeconds: 3600</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; )</span><br></pre></td></tr></table></figure>\n<h3 id=\"隐藏索引-Hidden-Indexes\">隐藏索引(Hidden Indexes)</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>隐藏索引对查询规划器不可见，不能用于查询。</p>\n</li>\n<li class=\"lvl-2\">\n<p>通过对规划器隐藏索引，用户可以在不实际删除索引的情况下评估删除索引的潜在影响。如果影响是负面的，用户可以取消隐藏索引，而不必重新创建已删除的索引。</p>\n</li>\n<li class=\"lvl-2\">\n<p>隐藏索引的创建方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建隐藏索引</span></span><br><span class=\"line\">db.restaurants.createIndex(&#123; borough: 1 &#125;,&#123; hidden: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\"># 隐藏现有索引</span></span><br><span class=\"line\">db.restaurants.hideIndex( &#123; borough: 1&#125; );</span><br><span class=\"line\">db.restaurants.hideIndex( <span class=\"string\">&quot;索引名称&quot;</span> )</span><br><span class=\"line\"><span class=\"comment\"># 取消隐藏索引</span></span><br><span class=\"line\">db.restaurants.unhideIndex( &#123; borough: 1&#125; );</span><br><span class=\"line\">db.restaurants.unhideIndex( <span class=\"string\">&quot;索引名称&quot;</span> );</span><br></pre></td></tr></table></figure>\n<h2 id=\"索引其它操作\">索引其它操作</h2>\n<h3 id=\"查看索引\">查看索引</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看索引信息</span></span><br><span class=\"line\">db.books.getIndexes()</span><br><span class=\"line\"><span class=\"comment\"># 查看索引键</span></span><br><span class=\"line\">db.books.getIndexKeys()</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除索引\">删除索引</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除集合指定索引</span></span><br><span class=\"line\">db.col.dropIndex(<span class=\"string\">&quot;索引名称&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 删除集合所有索引,不能删除主键索引</span></span><br><span class=\"line\">db.col.dropIndexes()</span><br></pre></td></tr></table></figure>\n<h2 id=\"索引使用建议\">索引使用建议</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>为每一个查询建立合适的索引</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">这个是针对于数据量较大比如说超过几十上百万（文档数目）数量级的集合。</li>\n<li class=\"lvl-6\">如果没有索引MongoDB需要把所有的Document从盘上读到内存，这会对MongoDB服务器造成较大的压力并影响到其他请求的执行。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>创建合适的复合索引，不要依赖于交叉索引</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">如果你的查询会使用到多个字段，MongoDB有两个索引技术可以使用：交叉索引和复合索引。</li>\n<li class=\"lvl-6\">交叉索引就是针对每个字段单独建立一个单字段索引，然后在查询执行时候使用相应的单字段索引进行索引交叉而得到查询结果。</li>\n<li class=\"lvl-6\">交叉索引目前触发率较低，所以如果你有一个多字段查询的时候，建议使用复合索引能够保证索引正常的使用。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查找所有年龄小于30岁的深圳市马拉松运动员</span></span><br><span class=\"line\">db.athelets.find(&#123;sport: <span class=\"string\">&quot;marathon&quot;</span>, location: <span class=\"string\">&quot;sz&quot;</span>, age: &#123;<span class=\"variable\">$lt</span>: 30&#125;&#125;&#125;)</span><br><span class=\"line\"><span class=\"comment\">#创建复合索引</span></span><br><span class=\"line\">db.athelets.createIndex(&#123;sport:1, location:1, age:1&#125;)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>复合索引字段顺序：匹配条件在前，范围条件在后（Equality First, Range After）</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">前面的例子，在创建复合索引时如果条件有匹配和范围之分，那么匹配条件（sport: “marathon”) 应该在复合索引的前面。范围条件(age: &lt;30)字段应该放在复合索引的后面。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>尽可能使用覆盖索引（Covered Index）</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">建议只返回需要的字段，同时，利用覆盖索引来提升性能。</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>建索引要在后台运行</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">在对一个集合创建索引时，该集合所在的数据库将不接受其他读写操作。对大数据量的集合建索引，建议使用后台运行选项 {background: true}</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>避免设计过长的数组索引</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">数组索引是多值的，在存储时需要使用更多的空间。如果索引的数组长度特别长，或者数组的增长不受控制，则可能导致索引空间急剧膨胀。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"explain执行计划\">explain执行计划</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>explain执行计划的作用是：查看MongoDB执行查询时的执行计划。</p>\n</li>\n<li class=\"lvl-2\">\n<p>explain执行计划的使用方式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\">db.collection.find().explain(&lt;verbose&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">db.books.find(&#123;title: <span class=\"string\">&quot;MongoDB 教程&quot;</span>&#125;).explain()</span><br><span class=\"line\">db.books.find(&#123;title: <span class=\"string\">&quot;MongoDB 教程&quot;</span>&#125;).explain(<span class=\"string\">&quot;executionStats&quot;</span>)</span><br><span class=\"line\">db.books.find(&#123;title: <span class=\"string\">&quot;MongoDB 教程&quot;</span>&#125;).explain(<span class=\"string\">&quot;allPlansExecution&quot;</span>)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>verbose :可选参数，表示执行计划的输出模式，默认queryPlanner</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>模式名字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>queryPlanner</td>\n<td>执行计划的详细信息，包括查询计划、集合信息、查询条件、最佳执行计划、查询方式和 MongoDB 服务信息等</td>\n</tr>\n<tr>\n<td>executionStats</td>\n<td>最佳执行计划的执行情况和被拒绝的计划等信息</td>\n</tr>\n<tr>\n<td>allPlansExecution</td>\n<td>选择并执行最佳执行计划，并返回最佳执行计划和其他执行计划的执行情况</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>输出结果中重点查看<code>stage</code>,比如<code>queryPlanner</code>下的<code>winningPlan.stage</code></p>\n</li>\n<li class=\"lvl-2\">\n<p><code>stage</code>类型</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>COLLSCAN</td>\n<td>全表扫描</td>\n</tr>\n<tr>\n<td>IXSCAN</td>\n<td>索引扫描</td>\n</tr>\n<tr>\n<td>FETCH</td>\n<td>根据索引检索指定文档</td>\n</tr>\n<tr>\n<td>SHARD_MERGE</td>\n<td>将各个分片返回数据进行合并</td>\n</tr>\n<tr>\n<td>SORT</td>\n<td>在内存中进行了排序</td>\n</tr>\n<tr>\n<td>LIMIT</td>\n<td>使用 limit 限制返回数</td>\n</tr>\n<tr>\n<td>SKIP</td>\n<td>使用 skip 进行跳过</td>\n</tr>\n<tr>\n<td>IDHACK</td>\n<td>对 _id 进行查询</td>\n</tr>\n<tr>\n<td>SHARDING_FILTER</td>\n<td>通过 mongos 对分片数据进行查询</td>\n</tr>\n<tr>\n<td>COUNTSCAN</td>\n<td>count 不使用索引进行 count 时的 stage 返回</td>\n</tr>\n<tr>\n<td>COUNT_SCAN</td>\n<td>count 使用了索引进行 count 时的 stage 返回</td>\n</tr>\n<tr>\n<td>SUBPLAN</td>\n<td>未使用到索引的 $or 查询的 stage 返回</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>使用全文索引进行查询时候的 stage 返回</td>\n</tr>\n<tr>\n<td>PROJECTION</td>\n<td>限定返回字段时候 stage 的返回</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>执行计划的返回结果中尽量不要出现以下<code>stage</code>:</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- COLLSCAN(全表扫描)</span><br><span class=\"line\">- SORT(使用sort但是无index)</span><br><span class=\"line\">- 不合理的SKIP</span><br><span class=\"line\">- SUBPLA(未用到index的$or)</span><br><span class=\"line\">- COUNTSCAN(不使用index进行count)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"实战\">实战</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>下面是一个结合各种索引类型的示例，假设我们正在为一个电商应用创建和管理一个MongoDB集合products，其中包含以下字段：</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_id: 默认的ObjectId类型，作为主键（已自动带有唯一性索引）。</span><br><span class=\"line\">category: 商品分类，字符串类型。</span><br><span class=\"line\">brand: 商品品牌，字符串类型。</span><br><span class=\"line\">tags: 商品标签数组，包含多个字符串元素。</span><br><span class=\"line\">price: 商品价格，数字类型。</span><br><span class=\"line\">lastUpdated: 商品最后更新时间，日期类型。</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建集合与插入文档</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 假设已经连接到数据库并选择了一个database</span><br><span class=\"line\">db.createCollection(<span class=\"string\">&quot;products&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">// 插入一些示例数据</span><br><span class=\"line\">db.products.insertMany([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    category: <span class=\"string\">&quot;Electronics&quot;</span>,</span><br><span class=\"line\">    brand: <span class=\"string\">&quot;Apple&quot;</span>,</span><br><span class=\"line\">    tags: [<span class=\"string\">&quot;smartphone&quot;</span>, <span class=\"string\">&quot;ios&quot;</span>],</span><br><span class=\"line\">    price: 999,</span><br><span class=\"line\">    lastUpdated: ISODate(<span class=\"string\">&quot;2023-03-01T00:00:00Z&quot;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // ...其他商品文档</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>单键索引 - 查询商品按价格排序</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">createIndex</span>(&#123; <span class=\"attr\">price</span>: <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">find</span>().<span class=\"title function_\">sort</span>(&#123; <span class=\"attr\">price</span>: <span class=\"number\">1</span> &#125;); <span class=\"comment\">// 获取所有商品按价格升序排列</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>复合索引 - 按品牌和价格查询，并进行排序：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">createIndex</span>(&#123; <span class=\"attr\">brand</span>: <span class=\"number\">1</span>, <span class=\"attr\">price</span>: -<span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">brand</span>: <span class=\"string\">&quot;Apple&quot;</span> &#125;).<span class=\"title function_\">sort</span>(&#123; <span class=\"attr\">price</span>: -<span class=\"number\">1</span> &#125;); <span class=\"comment\">// 获取指定品牌的商品并按价格降序排列</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>多键索引 - 根据商品标签进行搜索</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">createIndex</span>(&#123; <span class=\"string\">&quot;tags&quot;</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"string\">&quot;sparse&quot;</span>: <span class=\"literal\">true</span> &#125;); <span class=\"comment\">// 如果不是每个文档都有tags，可以使用sparse选项以节省空间</span></span><br><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"string\">&quot;tags&quot;</span>: <span class=\"string\">&quot;smartphone&quot;</span> &#125;); <span class=\"comment\">// 找到所有带有“smartphone”标签的商品</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>唯一索引 - 确保品牌名称不重复</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">createIndex</span>(&#123; <span class=\"attr\">brand</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"attr\">unique</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 尝试插入重复记录时</span></span><br><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">insertOne</span>(&#123; <span class=\"attr\">category</span>: <span class=\"string\">&quot;Electronics&quot;</span>, <span class=\"attr\">brand</span>: <span class=\"string\">&quot;Apple&quot;</span>, ... &#125;); <span class=\"comment\">// 正常插入</span></span><br><span class=\"line\">db.<span class=\"property\">products</span>.<span class=\"title function_\">insertOne</span>(&#123; <span class=\"attr\">category</span>: <span class=\"string\">&quot;Computers&quot;</span>, <span class=\"attr\">brand</span>: <span class=\"string\">&quot;Apple&quot;</span>, ... &#125;); <span class=\"comment\">// 若数据库中已有Apple品牌，则会因违反唯一性而报错</span></span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍如何使用MongoDB7.0的索引 MongoDB版本7.0.6 MongoDB Indexes MongoDB索引简介 索引支持在MongoDB中高效执行查询。如果没有索引，MongoDB必须扫描集合中的每个文档才能返回查询结果。如果查询存在适当的索引，MongoDB使用该索引来限制它必须扫描的文档数量。 虽然索引可以提高查询性能，但添加索引对写入操作的性能有负面影响。对于写入读数比较高的集合，索引很昂贵，因为每个插入还必须更新任何索引。 所以合理的创建索引，即可以提升查询性能，又不会对写操作造成太大的影响。 MongoDB采用 B-Tree (准确的说是 B+Tree) 做索引，索引创建在colletions上。 创建索引语法 1db.collection.createIndex( keys, options ) Key 值为你要创建的索引字段，1 按升序创建索引， -1 按降序创建索引 options 选项 参数 类型 描述 background Boolean 建索引过程是否阻塞其它数据库操作，设置为 true 则以后台方式创建索引 unique Boolean 建立的索引是否唯一，设置为 true 则创建唯一索引 name string 索引的名称 dropDups Boolean 3.0+版本已废弃，在建立唯一索引时是否删除重复记录 sparse Boolean 对文档中不存在的字段数据是否启用索引 expireAfterSeconds integer 指定一个以秒为单位的数值，完成 TTL 设定，设定集合的生存时间 v index version 索引的版本号 weights document 索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重 default_language string 对于文本索引，该参数决定了停用词及词干和词器的规则的列表 language_override string 对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的 language 索引类型 与大多数数据库一样，MongoDB支持各种丰富的索引类型，包括单键索引、复合索引，唯一索引等一些常用的结构。由于采用了灵活可变的文档类型，因此它也同样支持对嵌套字段、数组进行索引。通过建立合适的索引，我们可以极大地提升数据的检索速度。在一些特殊应用场景，MongoDB还支持地理空间索引、文本检索索引、TTL索引等不同的特性。 单键索引(Single Field Indexes) 单键索引是MongoDB最简单的索引类型，它将一个字段作为索引键，索引键值唯一。 默认情况下，MongoDB会在ID字段上创建一个单键索引，ID字段是文档的唯一标识符，MongoDB会自动创建一个ID字段，如果用户自己创建ID字段，MongoDB会自动将ID字段作为单键索引。 单键索引的创建方式如下： 1234# 1表示正序，-1表示倒序db.books.createIndex(&#123;title:1&#125;)# 对内嵌文档字段创建索引：db.books.createIndex(&#123;&quot;author.name&quot;:1&#125;) 复合索引(Compound Index) 复合索引是将多个字段作为索引键，其性质和单字段索引类似。但不同的是，复合索引中字段的顺序、字段的升降序对查询性能有直接的影响，因此在设计复合索引时则需要考虑不同的查询场景。 复合索引的创建方式如下： 123db.books.createIndex(&#123;title:1, author.name:1&#125;)# 对内嵌文档字段创建索引：db.books.createIndex(&#123;&quot;author.name&quot;:1, &quot;author.age&quot;:1&#125;) 多键(数组)索引(Multikey Index) 多键索引是将一个字段作为索引键，该字段可以是嵌套文档、数组等复杂数据类型。 多键索引的创建方式如下： 1234567891011121314151617# tags字段为数组db.books.createIndex(&#123;&quot;tags&quot;:1&#125;)# 创建复合多值索引，这里仅能有一个字段是数组，MongoDB并不支持一个复合索引中同时出现多个数组字段db.books.createIndex(&#123;title:1, tags:1&#125;)# 示例数据格式&#123; _id: 1, item: &quot;abc&quot;, stock: [ &#123; size: &quot;S&quot;, color: &quot;red&quot;, quantity: 25 &#125;, &#123; size: &quot;S&quot;, color: &quot;blue&quot;, quantity: 10 &#125;, &#123; size: &quot;M&quot;, color: &quot;blue&quot;, quantity: 50 &#125; ]&#125;# 可以对嵌入文档创建多键索引db.collection.createIndex( &#123; &quot;stock.size&quot;: 1, &quot;stock.quantity&quot;: 1 &#125; ) Hash索引(Hashed Indexes) Hash索引是MongoDB中的一种特殊的索引类型，它将字段的值计算出一个哈希值，然后将该哈希值作为索引键。由于哈希值的唯一性，因此MongoDB在创建Hash索引时，不会对索引键值进行排序。 Hash索引的创建方式如下： 123db.books.createIndex(&#123;title:&quot;hashed&quot;&#125;)# 对内嵌文档字段创建索引：db.books.createIndex(&#123;&quot;author.name&quot;:&quot;hashed&quot;&#125;) 通配符索引(Wildcard Indexes) 通配符索引是MongoDB中的一种特殊的索引类型，它允许在索引键值中包含通配符，从而支持对通配符匹配的查询。 MongoDB 4.2 引入了通配符索 通配符索引的创建方式如下： 12345678910111213# 示例数据&#123; &quot;product_name&quot; : &quot;Spy Coat&quot;, &quot;product_attributes&quot; : &#123; &quot;material&quot; : [ &quot;Tweed&quot;, &quot;Wool&quot;, &quot;Leather&quot; ], &quot;size&quot; : &#123; &quot;length&quot; : 72, &quot;units&quot; : &quot;inches&quot; &#125; &#125;&#125;db.products.createIndex( &#123; &quot;product_attributes.$**&quot; : 1 &#125; ) 通配符索引是稀疏的，不索引空字段。因此，通配符索引不能支持查询字段不存在的文档。 12345# 通配符索引不能支持以下查询db.products.find( &#123;&quot;product_attributes&quot; : &#123; $exists : false &#125; &#125; )db.products.aggregate([ &#123; $match : &#123; &quot;product_attributes&quot; : &#123; $exists : false &#125; &#125; &#125;]) 通配符索引为文档或数组的内容生成条目，而不是文档/数组本身。因此通配符索引不能支持精确的文档/数组相等匹配。通配符索引可以支持查询字段等于空文档{}的情况 123456#通配符索引不能支持以下查询:db.products.find(&#123; &quot;product_attributes.colors&quot; : [ &quot;Blue&quot;, &quot;Black&quot; ] &#125; )db.products.aggregate([&#123; $match : &#123; &quot;product_attributes.colors&quot; : [ &quot;Blue&quot;, &quot;Black&quot; ] &#125;&#125;]) 索引属性 唯一索引(Unique Indexes) 唯一索引的创建方式如下： 123456# 单键索引支持唯一约束db.books.createIndex(&#123;title:1&#125;, &#123;unique:true&#125;)# 复合索引支持唯一性约束db.books.createIndex(&#123;title:1，type:1&#125;, &#123;unique:true&#125;)# 多键索引支持唯一性约束，这里tags是数组db.books.createIndex(&#123;&quot;tags&quot;:1&#125;, &#123;unique:true&#125;) 唯一性索引对于文档中缺失的字段，会使用null值代替，因此不允许存在多个文档缺失索引字段的情况。 对于分片的集合，唯一性约束必须匹配分片规则。换句话说，为了保证全局的唯一性，分片键必须作为唯一性索引的前缀字段。 部分索引(Partial Indexes) 部分索引仅对满足指定过滤器表达式的文档进行索引。通过在一个集合中为文档的一个子集建立索引，部分索引具有更低的存储需求和更低的索引创建和维护的性能成本。 部分索引的创建方式如下： 12# 符合条件&#123;author: &#123;$exists: true&#125;&#125;，即存在作者，才对title创建升序索引db.books.createIndex(&#123;title:1&#125;, &#123;partialFilterExpression: &#123;author: &#123;$exists: true&#125;&#125;&#125;) partialFilterExpression(筛选器表达式)选项接受指定过滤条件的文档: - 等式表达式(例如:field: value或使用$eq操作符) - $exists: true - $gt， $gte， $lt， $lte - $type - 顶层的$and 注意：如果同时指定了partialFilterExpression和唯一约束，那么唯一约束只适用于满足筛选器表达式的文档。如果文档不满足筛选条件，那么带有惟一约束的部分索引不会阻止插入不满足惟一约束的文档。 稀疏索引(Sparse Indexes) 索引的稀疏属性确保索引只包含具有索引字段的文档的条目，索引将跳过没有索引字段的文档。即只对存在字段的文档进行索引（包括字段值为null的文档）。 如果稀疏索引会导致查询和排序操作的结果集不完整，MongoDB将不会使用该索引，除非hint()明确指定索引。 稀疏索引的创建方式如下： 12345678910111213141516171819# 数据准备db.scores.insertMany([ &#123;&quot;userid&quot; : &quot;newbie&quot;&#125;, &#123;&quot;userid&quot; : &quot;abby&quot;, &quot;score&quot; : 82&#125;, &#123;&quot;userid&quot; : &quot;nina&quot;, &quot;score&quot; : 90&#125;])# 创建稀疏索引db.scores.createIndex( &#123; score: 1 &#125; , &#123; sparse: true &#125; )# 测试# 使用稀疏索引db.scores.find( &#123; score: &#123; $lt: 90 &#125; &#125; )# 即使排序是通过索引字段，MongoDB也不会选择稀疏索引来完成查询，以返回完整的结果db.scores.find().sort( &#123; score: -1 &#125; )# 要使用稀疏索引，使用hint()显式指定索引db.scores.find().sort( &#123; score: -1 &#125; ).hint( &#123; score: 1 &#125; ) 同时具有稀疏性和唯一性的索引可以防止集合中存在字段值重复的文档，但允许不包含此索引字段的文档插入。 123456789101112# 删除之前创建的索引db.scores.dropIndex(&#123;score:1&#125;)# 创建具有唯一约束的稀疏索引db.scores.createIndex( &#123; score: 1 &#125; , &#123; sparse: true, unique: true &#125; )# 测试插入db.scores.insertMany( [ &#123; &quot;userid&quot;: &quot;AAAAAAA&quot;, &quot;score&quot;: 50 &#125;, &#123; &quot;userid&quot;: &quot;BBBBBBB&quot;, &quot;score&quot;: 64 &#125;, &#123; &quot;userid&quot;: &quot;CCCCCCC&quot; &#125;, &#123; &quot;userid&quot;: &quot;CCCCCCC&quot; &#125;] ) TTL索引(TTL Indexes) MongoDB 可以使用它在一定时间或特定时钟时间后自动从集合中删除文档，就是带有过期时间的索引，到期后，MongoDB会自动删除这些过期的文档。 TTL索引只能创建在日期字段上，当文档过期后，MongoDB会自动删除这些文档。 TTL索引的创建方式如下： 12345678# 数据准备db.log_events.insertOne( &#123; &quot;createdAt&quot;: new Date(), &quot;logEvent&quot;: 2, &quot;logMessage&quot;: &quot;Success!&quot;&#125; )# 创建TTL索引db.scores.createIndex( &#123; &quot;createdAt&quot;: 1 &#125;, &#123; expireAfterSeconds: 3600 &#125; ) TTL 索引不保证过期数据会在过期后立即被删除。文档过期和 MongoDB 从数据库中删除文档的时间之间可能存在延迟。删除过期文档的后台任务每 60 秒运行一次。因此，在文档到期和后台任务运行之间的时间段内，文档可能会保留在集合中。 TTL索引在创建之后，仍然可以对过期时间进行修改。这需要使用collMod命令对索引的定义进行变更 1234567db.runCommand( &#123; collMod: &quot;log_events&quot;, index: &#123; keyPattern: &#123; createdAt: 1 &#125;, expireAfterSeconds: 3600 &#125;&#125; ) 隐藏索引(Hidden Indexes) 隐藏索引对查询规划器不可见，不能用于查询。 通过对规划器隐藏索引，用户可以在不实际删除索引的情况下评估删除索引的潜在影响。如果影响是负面的，用户可以取消隐藏索引，而不必重新创建已删除的索引。 隐藏索引的创建方式如下： 12345678# 创建隐藏索引db.restaurants.createIndex(&#123; borough: 1 &#125;,&#123; hidden: true &#125;);# 隐藏现有索引db.restaurants.hideIndex( &#123; borough: 1&#125; );db.restaurants.hideIndex( &quot;索引名称&quot; )# 取消隐藏索引db.restaurants.unhideIndex( &#123; borough: 1&#125; );db.restaurants.unhideIndex( &quot;索引名称&quot; ); 索引其它操作 查看索引 1234# 查看索引信息db.books.getIndexes()# 查看索引键db.books.getIndexKeys() 删除索引 1234# 删除集合指定索引db.col.dropIndex(&quot;索引名称&quot;)# 删除集合所有索引,不能删除主键索引db.col.dropIndexes() 索引使用建议 为每一个查询建立合适的索引 这个是针对于数据量较大比如说超过几十上百万（文档数目）数量级的集合。 如果没有索引MongoDB需要把所有的Document从盘上读到内存，这会对MongoDB服务器造成较大的压力并影响到其他请求的执行。 创建合适的复合索引，不要依赖于交叉索引 如果你的查询会使用到多个字段，MongoDB有两个索引技术可以使用：交叉索引和复合索引。 交叉索引就是针对每个字段单独建立一个单字段索引，然后在查询执行时候使用相应的单字段索引进行索引交叉而得到查询结果。 交叉索引目前触发率较低，所以如果你有一个多字段查询的时候，建议使用复合索引能够保证索引正常的使用。 1234#查找所有年龄小于30岁的深圳市马拉松运动员db.athelets.find(&#123;sport: &quot;marathon&quot;, location: &quot;sz&quot;, age: &#123;$lt: 30&#125;&#125;&#125;)#创建复合索引db.athelets.createIndex(&#123;sport:1, location:1, age:1&#125;) 复合索引字段顺序：匹配条件在前，范围条件在后（Equality First, Range After） 前面的例子，在创建复合索引时如果条件有匹配和范围之分，那么匹配条件（sport: “marathon”) 应该在复合索引的前面。范围条件(age: &lt;30)字段应该放在复合索引的后面。 尽可能使用覆盖索引（Covered Index） 建议只返回需要的字段，同时，利用覆盖索引来提升性能。 建索引要在后台运行 在对一个集合创建索引时，该集合所在的数据库将不接受其他读写操作。对大数据量的集合建索引，建议使用后台运行选项 {background: true} 避免设计过长的数组索引 数组索引是多值的，在存储时需要使用更多的空间。如果索引的数组长度特别长，或者数组的增长不受控制，则可能导致索引空间急剧膨胀。 explain执行计划 explain执行计划的作用是：查看MongoDB执行查询时的执行计划。 explain执行计划的使用方式如下： 1234567# 语法db.collection.find().explain(&lt;verbose&gt;)# 示例db.books.find(&#123;title: &quot;MongoDB 教程&quot;&#125;).explain()db.books.find(&#123;title: &quot;MongoDB 教程&quot;&#125;).explain(&quot;executionStats&quot;)db.books.find(&#123;title: &quot;MongoDB 教程&quot;&#125;).explain(&quot;allPlansExecution&quot;) verbose :可选参数，表示执行计划的输出模式，默认queryPlanner 模式名字 描述 queryPlanner 执行计划的详细信息，包括查询计划、集合信息、查询条件、最佳执行计划、查询方式和 MongoDB 服务信息等 executionStats 最佳执行计划的执行情况和被拒绝的计划等信息 allPlansExecution 选择并执行最佳执行计划，并返回最佳执行计划和其他执行计划的执行情况 输出结果中重点查看stage,比如queryPlanner下的winningPlan.stage stage类型 状态 描述 COLLSCAN 全表扫描 IXSCAN 索引扫描 FETCH 根据索引检索指定文档 SHARD_MERGE 将各个分片返回数据进行合并 SORT 在内存中进行了排序 LIMIT 使用 limit 限制返回数 SKIP 使用 skip 进行跳过 IDHACK 对 _id 进行查询 SHARDING_FILTER 通过 mongos 对分片数据进行查询 COUNTSCAN count 不使用索引进行 count 时的 stage 返回 COUNT_SCAN count 使用了索引进行 count 时的 stage 返回 SUBPLAN 未使用到索引的 $or 查询的 stage 返回 TEXT 使用全文索引进行查询时候的 stage 返回 PROJECTION 限定返回字段时候 stage 的返回 执行计划的返回结果中尽量不要出现以下stage: 12345- COLLSCAN(全表扫描)- SORT(使用sort但是无index)- 不合理的SKIP- SUBPLA(未用到index的$or)- COUNTSCAN(不使用index进行count) 实战 下面是一个结合各种索引类型的示例，假设我们正在为一个电商应用创建和管理一个MongoDB集合products，其中包含以下字段： 123456_id: 默认的ObjectId类型，作为主键（已自动带有唯一性索引）。category: 商品分类，字符串类型。brand: 商品品牌，字符串类型。tags: 商品标签数组，包含多个字符串元素。price: 商品价格，数字类型。lastUpdated: 商品最后更新时间，日期类型。 创建集合与插入文档 1234567891011121314// 假设已经连接到数据库并选择了一个databasedb.createCollection(&quot;products&quot;);// 插入一些示例数据db.products.insertMany([ &#123; category: &quot;Electronics&quot;, brand: &quot;Apple&quot;, tags: [&quot;smartphone&quot;, &quot;ios&quot;], price: 999, lastUpdated: ISODate(&quot;2023-03-01T00:00:00Z&quot;) &#125;, // ...其他商品文档]); 单键索引 - 查询商品按价格排序 12db.products.createIndex(&#123; price: 1 &#125;);db.products.find().sort(&#123; price: 1 &#125;); // 获取所有商品按价格升序排列 复合索引 - 按品牌和价格查询，并进行排序： 12db.products.createIndex(&#123; brand: 1, price: -1 &#125;);db.products.find(&#123; brand: &quot;Apple&quot; &#125;).sort(&#123; price: -1 &#125;); // 获取指定品牌的商品并按价格降序排列 多键索引 - 根据商品标签进行搜索 12db.products.createIndex(&#123; &quot;tags&quot;: 1 &#125;, &#123; &quot;sparse&quot;: true &#125;); // 如果不是每个文档都有tags，可以使用sparse选项以节省空间db.products.find(&#123; &quot;tags&quot;: &quot;smartphone&quot; &#125;); // 找到所有带有“smartphone”标签的商品 唯一索引 - 确保品牌名称不重复 1234db.products.createIndex(&#123; brand: 1 &#125;, &#123; unique: true &#125;);// 尝试插入重复记录时db.products.insertOne(&#123; category: &quot;Electronics&quot;, brand: &quot;Apple&quot;, ... &#125;); // 正常插入db.products.insertOne(&#123; category: &quot;Computers&quot;, brand: &quot;Apple&quot;, ... &#125;); // 若数据库中已有Apple品牌，则会因违反唯一性而报错","summary":"摘要 本文介绍如何使用MongoDB7.0的索引 MongoDB版本7.0.6 MongoDB Indexes","date_published":"2024-03-11T13:30:05.000Z","tags":["技术","linux","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/03/07/mongodb7-springboot-aggregate/","url":"https://blog.hanqunfeng.com/2024/03/07/mongodb7-springboot-aggregate/","title":"MongoDB7.0--SpringBoot聚合操作","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍如何使用SpringBoot实现MongoDB7.0的聚合操作</p>\n</li>\n<li class=\"lvl-2\">\n<p>SpringBoot版本3.2.3，MongoDB版本7.0.6</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/v7.0/aggregation/\">MongoDB Aggregation Operations</a></p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/v7.0/reference/sql-aggregation-comparison/\">SQL to Aggregation Mapping Chart</a></p>\n</li>\n<li class=\"lvl-2\">\n<a href=\"/2024/03/05/mongodb7-springboot/\" title=\"MongoDB7.0--SpringBoot单集合操作\">MongoDB7.0--SpringBoot单集合操作</a>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"聚合操作简介\">聚合操作简介</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>聚合操作允许用户处理多个文档并返回计算结果</p>\n</li>\n<li class=\"lvl-2\">\n<p>聚合操作包含三类</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">单文档聚合：针对单个集合，如：<code>db.collection.countDocument()</code>, <code>db.collection.distinct()</code></li>\n<li class=\"lvl-6\">聚合管道：它可以作用在一个或几个集合上，对集合中的数据进行的一系列运算，并将这些数据转化为用户期望的形式，本文主要介绍管道操作</li>\n<li class=\"lvl-6\">MapReduce：从MongoDB 5.0开始，map-reduce操作已被弃用，本文不做介绍。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"聚合管道\">聚合管道</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>聚合管道是MongoDB中非常强大的功能，它允许用户将多个操作组合在一起，以实现复杂的数据处理。</p>\n</li>\n<li class=\"lvl-2\">\n<p>从效果而言，聚合管道相当于 SQL 查询中的 GROUP BY、 LEFT OUTER JOIN 、 AS等。</p>\n</li>\n<li class=\"lvl-2\">\n<p>整个聚合运算过程称为管道（Pipeline），它是由多个阶段（Stage）组成的， 每个管道：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">接受一系列文档（原始数据）</li>\n<li class=\"lvl-6\">每个阶段对这些文档进行一系列运算</li>\n<li class=\"lvl-6\">结果文档输出给下一个阶段</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/cHlDgv.png\" alt=\"\"></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>聚合管道操作语法</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">pipelines 一组数据聚合阶段。除$out、$Merge和$geonear阶段之外，每个阶段都可以在管道中出现多次。</li>\n<li class=\"lvl-6\">options 可选，聚合操作的其他参数。包含：查询计划、是否使用临时文件、 游标、最大操作时间、读写策略、强制索引等等</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline = [<span class=\"variable\">$stage1</span>, <span class=\"variable\">$stage2</span>, ...<span class=\"variable\">$stageN</span>];</span><br><span class=\"line\">db.collection.aggregate(pipeline, &#123;options&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/reMhNx.png\" alt=\"聚合管道\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>常用的聚合阶段运算符</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>阶段运算符</th>\n<th>描述</th>\n<th>SQL等价运算符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$match</td>\n<td>过滤文档</td>\n<td>WHERE</td>\n</tr>\n<tr>\n<td>$project</td>\n<td>投影，改变文档的形状和内容</td>\n<td>SELECT filedName AS newName</td>\n</tr>\n<tr>\n<td>$group</td>\n<td>将文档分组</td>\n<td>GROUP BY</td>\n</tr>\n<tr>\n<td>$sort</td>\n<td>对文档进行排序</td>\n<td>ORDER BY</td>\n</tr>\n<tr>\n<td>$limit</td>\n<td>限制结果集的大小</td>\n<td>LIMIT</td>\n</tr>\n<tr>\n<td>$skip</td>\n<td>跳过指定数量的文档</td>\n<td>OFFSET</td>\n</tr>\n<tr>\n<td>$unwind</td>\n<td>展开数组</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$lookup</td>\n<td>从其他集合中获取相关文档,左外连接</td>\n<td>LEFT OUTER JOIN</td>\n</tr>\n<tr>\n<td>$out</td>\n<td>将结果集输出到新的集合</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$geoNear</td>\n<td>按照地理位置附近的顺序返回文档</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$graphLookup</td>\n<td>执行递归查询</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$addFields</td>\n<td>添加新字段</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$bucket</td>\n<td>根据指定条件将文档分组成桶</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$facet</td>\n<td>允许在单个聚合阶段内执行多个独立的子聚合</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/BqWIi9.png\" alt=\"\"></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>聚合表达式</p>\n</li>\n</ul>\n<blockquote>\n<p>获取字段信息</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&lt;field&gt;  ： 用 $ 指示字段路径</span><br><span class=\"line\">$&lt;field&gt;.&lt;subfield&gt;  ： 使用 $  和 .  来指示内嵌文档的路径</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>常量表达式</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$literal</span> :&lt;value&gt; ： 指示常量 &lt;value&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>系统变量表达式</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$&lt;variable&gt;  使用 $$ 指示系统变量</span><br><span class=\"line\">$<span class=\"variable\">$CURRENT</span>  指示管道中当前操作的文档</span><br></pre></td></tr></table></figure>\n<h2 id=\"聚合管道示例\">聚合管道示例</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本示例使用SpringBoot实现MongoDB7.0的聚合操作</p>\n</li>\n<li class=\"lvl-2\">\n<p>初始化数据</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">var tags = [&quot;nosql&quot;,&quot;mongodb&quot;,&quot;document&quot;,&quot;developer&quot;,&quot;popular&quot;];</span></span><br><span class=\"line\"><span class=\"comment\">var types = [&quot;technology&quot;,&quot;sociality&quot;,&quot;travel&quot;,&quot;novel&quot;,&quot;literature&quot;];</span></span><br><span class=\"line\"><span class=\"comment\">var books=[];</span></span><br><span class=\"line\"><span class=\"comment\">for(var i=0;i&lt;50;i++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    var typeIdx = Math.floor(Math.random()*types.length);</span></span><br><span class=\"line\"><span class=\"comment\">    var tagIdx = Math.floor(Math.random()*tags.length);</span></span><br><span class=\"line\"><span class=\"comment\">    var tagIdx2 = Math.floor(Math.random()*tags.length);</span></span><br><span class=\"line\"><span class=\"comment\">    var favCount = Math.floor(Math.random()*100);</span></span><br><span class=\"line\"><span class=\"comment\">    var username = &quot;xx00&quot;+Math.floor(Math.random()*10);</span></span><br><span class=\"line\"><span class=\"comment\">    var age = 20 + Math.floor(Math.random()*15);</span></span><br><span class=\"line\"><span class=\"comment\">    var book = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        title: &quot;book-&quot;+i,</span></span><br><span class=\"line\"><span class=\"comment\">        type: types[typeIdx],</span></span><br><span class=\"line\"><span class=\"comment\">        tag: [tags[tagIdx],tags[tagIdx2]],</span></span><br><span class=\"line\"><span class=\"comment\">        favCount: favCount,</span></span><br><span class=\"line\"><span class=\"comment\">        author: &#123;name:username,age:age&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;;</span></span><br><span class=\"line\"><span class=\"comment\">    books.push(book)</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">db.books.insertMany(books);</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">String[] tags = &#123;<span class=\"string\">&quot;nosql&quot;</span>, <span class=\"string\">&quot;mongodb&quot;</span>, <span class=\"string\">&quot;document&quot;</span>, <span class=\"string\">&quot;developer&quot;</span>, <span class=\"string\">&quot;popular&quot;</span>&#125;;</span><br><span class=\"line\">String[] types = &#123;<span class=\"string\">&quot;technology&quot;</span>, <span class=\"string\">&quot;sociality&quot;</span>, <span class=\"string\">&quot;travel&quot;</span>, <span class=\"string\">&quot;novel&quot;</span>, <span class=\"string\">&quot;literature&quot;</span>&#125;;</span><br><span class=\"line\">List&lt;Document&gt; books = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">typeIdx</span> <span class=\"operator\">=</span> random.nextInt(types.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">tagIdx</span> <span class=\"operator\">=</span> random.nextInt(tags.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">tagIdx2</span> <span class=\"operator\">=</span> random.nextInt(tags.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">favCount</span> <span class=\"operator\">=</span> random.nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xx00&quot;</span> + random.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">20</span> + random.nextInt(<span class=\"number\">15</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Document</span> <span class=\"variable\">book</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(<span class=\"string\">&quot;title&quot;</span>, <span class=\"string\">&quot;book-&quot;</span> + i)</span><br><span class=\"line\">            .append(<span class=\"string\">&quot;type&quot;</span>, types[typeIdx])</span><br><span class=\"line\">            .append(<span class=\"string\">&quot;tag&quot;</span>, List.of(tags[tagIdx], tags[tagIdx2]))</span><br><span class=\"line\">            .append(<span class=\"string\">&quot;favCount&quot;</span>, favCount)</span><br><span class=\"line\">            .append(<span class=\"string\">&quot;author&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(<span class=\"string\">&quot;name&quot;</span>, username).append(<span class=\"string\">&quot;age&quot;</span>, age));</span><br><span class=\"line\">    books.add(book);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mongoTemplate.insert(books, <span class=\"string\">&quot;books&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"project-投影操作\">$project:投影操作</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将原始字段投影成指定名称， 如将集合中的 title 投影成 name</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.books.aggregate([&#123;$project:&#123;name:&quot;$title&quot;&#125;&#125;])</span></span><br><span class=\"line\"><span class=\"type\">ProjectionOperation</span> <span class=\"variable\">projectOperation</span> <span class=\"operator\">=</span> Aggregation.project()</span><br><span class=\"line\">        .andExpression(<span class=\"string\">&quot;title&quot;</span>).as(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(projectOperation);</span><br><span class=\"line\">System.out.println(aggregation);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Document document : result) &#123;</span><br><span class=\"line\">    System.out.println(document.toJson());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>剔除不需要的字段</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.books.aggregate([&#123;$project:&#123;name:&quot;$title&quot;,_id:0,type:1,author.name:1&#125;&#125;])</span></span><br><span class=\"line\"><span class=\"type\">ProjectionOperation</span> <span class=\"variable\">projectOperation</span> <span class=\"operator\">=</span> Aggregation.project()</span><br><span class=\"line\">        .andExclude(<span class=\"string\">&quot;_id&quot;</span>)</span><br><span class=\"line\">        .andInclude(<span class=\"string\">&quot;type&quot;</span>)</span><br><span class=\"line\">        .andExpression(<span class=\"string\">&quot;author.name&quot;</span>).as(<span class=\"string\">&quot;author.name&quot;</span>) <span class=\"comment\">// 这里必须使用as重新命名，否则只会用name做字段名称，这就和后面的title的别名冲突了</span></span><br><span class=\"line\">        .andExpression(<span class=\"string\">&quot;title&quot;</span>).as(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(projectOperation);</span><br><span class=\"line\">System.out.println(aggregation);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Document document : results) &#123;</span><br><span class=\"line\">    System.out.println(document.toJson());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"match-过滤操作\">$match:过滤操作</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>过滤出指定条件的文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.books.aggregate([&#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;])</span></span><br><span class=\"line\"><span class=\"type\">MatchOperation</span> <span class=\"variable\">matchOperation</span> <span class=\"operator\">=</span> Aggregation.match(Criteria.where(<span class=\"string\">&quot;type&quot;</span>).is(<span class=\"string\">&quot;technology&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(matchOperation);</span><br><span class=\"line\">System.out.println(aggregation);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Document document : results) &#123;</span><br><span class=\"line\">    System.out.println(document.toJson());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>组合其它管道</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$project:&#123;name:&quot;$title&quot;,_id:0,type:1,author:&#123;name:1&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">MatchOperation</span> <span class=\"variable\">matchOperation</span> <span class=\"operator\">=</span> Aggregation.match(Criteria.where(<span class=\"string\">&quot;type&quot;</span>).is(<span class=\"string\">&quot;technology&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">ProjectionOperation</span> <span class=\"variable\">projectOperation</span> <span class=\"operator\">=</span> Aggregation.project(<span class=\"string\">&quot;title&quot;</span>).andExclude(<span class=\"string\">&quot;_id&quot;</span>).andInclude(<span class=\"string\">&quot;type&quot;</span>).and(<span class=\"string\">&quot;author.name&quot;</span>).as(<span class=\"string\">&quot;author.name&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(matchOperation, projectOperation);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<h3 id=\"count-计数操作\">$count:计数操作</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$count: &quot;type_count&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// MatchOperation to filter documents by type: &quot;technology&quot;</span></span><br><span class=\"line\"><span class=\"type\">MatchOperation</span> <span class=\"variable\">matchAggregation</span> <span class=\"operator\">=</span> Aggregation.match(Criteria.where(<span class=\"string\">&quot;type&quot;</span>).is(<span class=\"string\">&quot;technology&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">// CountOperation to count the matched documents</span></span><br><span class=\"line\"><span class=\"type\">CountOperation</span> <span class=\"variable\">countAggregation</span> <span class=\"operator\">=</span> Aggregation.count().as(<span class=\"string\">&quot;type_count&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Combine the match and count operations</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(matchAggregation, countAggregation);</span><br><span class=\"line\">System.out.println(aggregation);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<h3 id=\"group-分组操作\">$group:分组操作</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>按指定的表达式对文档进行分组，并将每个不同分组的文档输出到下一个阶段。输出文档包含一个_id字段，该字段按键包含不同的组。</p>\n</li>\n<li class=\"lvl-2\">\n<p>输出文档还可以包含计算字段，该字段保存由$group的_id字段分组的一些accumulator表达式的值。 $group不会输出具体的文档而只是统计信息。</p>\n</li>\n<li class=\"lvl-2\">\n<p>语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"variable\">$group</span>: &#123; _id: &lt;expression&gt;, &lt;field1&gt;: &#123; &lt;accumulator1&gt; : &lt;expression1&gt; &#125;, ... &#125; &#125;</span><br><span class=\"line\"><span class=\"comment\"># _id字段是必填的;但是，可以指定_id值为null来为整个输入文档计算累计值。</span></span><br><span class=\"line\"><span class=\"comment\"># 剩余的计算字段是可选的，并使用&lt;accumulator&gt;运算符进行计算。</span></span><br><span class=\"line\"><span class=\"comment\"># _id和&lt;accumulator&gt;表达式可以接受任何有效的表达式。</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>accumulator操作符</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n<th>类比sql</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>avg</code></td>\n<td>计算均值</td>\n<td>avg</td>\n</tr>\n<tr>\n<td><code>first</code></td>\n<td>返回每组第一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的第一个文档。</td>\n<td>limit 0,1</td>\n</tr>\n<tr>\n<td><code>last</code></td>\n<td>返回每组最后一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的最后个文档。</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>max</code></td>\n<td>根据分组，获取集合中所有文档对应值得最大值。</td>\n<td>max</td>\n</tr>\n<tr>\n<td><code>min</code></td>\n<td>根据分组，获取集合中所有文档对应值得最小值。</td>\n<td>min</td>\n</tr>\n<tr>\n<td><code>push</code></td>\n<td>将指定的表达式的值添加到一个数组中。</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>addToSet</code></td>\n<td>将表达式的值添加到一个集合中（无重复值，无序）。</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>sum</code></td>\n<td>计算总和</td>\n<td>sum</td>\n</tr>\n<tr>\n<td><code>stdDevPop</code></td>\n<td>返回输入值的总体标准偏差（population standard deviation）</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>stdDevSamp</code></td>\n<td>返回输入值的样本标准偏差（the sample standard deviation）</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/EVvswC.png\" alt=\"\"></p>\n<h4 id=\"示例\">示例</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>book的数量，收藏总数和平均值</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:null,count:&#123;$sum:1&#125;,pop:&#123;$sum:&quot;$favCount&quot;&#125;,avg:&#123;$avg:&quot;$favCount&quot;&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.group().count().as(<span class=\"string\">&quot;count&quot;</span>).sum(<span class=\"string\">&quot;favCount&quot;</span>).as(<span class=\"string\">&quot;pop&quot;</span>).avg(<span class=\"string\">&quot;favCount&quot;</span>).as(<span class=\"string\">&quot;avg&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class);</span><br><span class=\"line\">List&lt;Document&gt; mappedResults = results.getMappedResults();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Assuming that there will be only one result due to grouping by null (_id: null)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!mappedResults.isEmpty()) &#123;</span><br><span class=\"line\">    System.out.println(mappedResults.get(<span class=\"number\">0</span>).toJson());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;&#123;&#125;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>统计每个作者的book收藏总数</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:&quot;$author.name&quot;,pop:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.group(<span class=\"string\">&quot;author.name&quot;</span>).sum(<span class=\"string\">&quot;favCount&quot;</span>).as(<span class=\"string\">&quot;pop&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class);</span><br><span class=\"line\">List&lt;Document&gt; mappedResults = results.getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>统计每个作者的每本book的收藏数</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:&#123;name:&quot;$author.name&quot;,title:&quot;$title&quot;&#125;,pop:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.group(<span class=\"string\">&quot;author.name&quot;</span>, <span class=\"string\">&quot;title&quot;</span>).sum(<span class=\"string\">&quot;favCount&quot;</span>).as(<span class=\"string\">&quot;pop&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class);</span><br><span class=\"line\">List&lt;Document&gt; mappedResults = results.getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>每个作者的book的type合集</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:&quot;$author.name&quot;,types:&#123;$addToSet:&quot;$type&quot;&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">GroupOperation</span> <span class=\"variable\">groupOperation</span> <span class=\"operator\">=</span> Aggregation.group(<span class=\"string\">&quot;author.name&quot;</span>).addToSet(<span class=\"string\">&quot;type&quot;</span>).as(<span class=\"string\">&quot;types&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(groupOperation);</span><br><span class=\"line\">AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class);</span><br><span class=\"line\">List&lt;Document&gt; mappedResults = results.getMappedResults();</span><br></pre></td></tr></table></figure>\n<h3 id=\"unwind\">$unwind</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>可以将数组拆分为单独的文档</p>\n</li>\n<li class=\"lvl-2\">\n<p>语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"variable\">$unwind</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">#要指定字段路径，在字段名称前加上$符并用引号括起来。</span></span><br><span class=\"line\">      path: &lt;field path&gt;,</span><br><span class=\"line\">      <span class=\"comment\">#可选,一个新字段的名称用于存放元素的数组索引。该名称不能以$开头。</span></span><br><span class=\"line\">      includeArrayIndex: &lt;string&gt;,</span><br><span class=\"line\">      <span class=\"comment\">#可选，default :false，若为true,如果路径为空，缺少或为空数组，则$unwind输出文档</span></span><br><span class=\"line\">      preserveNullAndEmptyArrays: &lt;boolean&gt;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例-2\">示例</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>姓名为xx006的作者的book的tag数组拆分为多个文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$unwind:&quot;$tag&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.match(Criteria.where(<span class=\"string\">&quot;author.name&quot;</span>).is(<span class=\"string\">&quot;xx006&quot;</span>)),</span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">&quot;tag&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用<code>includeArrayIndex</code>选项来输出数组元素的数组索引</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$unwind:&#123;path:&quot;$tag&quot;, includeArrayIndex: &quot;arrayIndex&quot;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.match(Criteria.where(<span class=\"string\">&quot;author.name&quot;</span>).is(<span class=\"string\">&quot;xx006&quot;</span>)),</span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"string\">&quot;arrayIndex&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>每个作者的book的tag合集</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$unwind:&quot;$tag&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:&quot;$author.name&quot;,types:&#123;$addToSet:&quot;$tag&quot;&#125;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">UnwindOperation</span> <span class=\"variable\">unwindOperation</span> <span class=\"operator\">=</span> Aggregation.unwind(<span class=\"string\">&quot;tag&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">GroupOperation</span> <span class=\"variable\">groupOperation</span> <span class=\"operator\">=</span> Aggregation.group(<span class=\"string\">&quot;author.name&quot;</span>).addToSet(<span class=\"string\">&quot;tag&quot;</span>).as(<span class=\"string\">&quot;types&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(unwindOperation, groupOperation);</span><br><span class=\"line\">AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class);</span><br><span class=\"line\">List&lt;Document&gt; mappedResults = results.getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用<code>preserveNullAndEmptyArrays</code>选项在输出中包含缺少tag字段，null或空数组的文档</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化数据，加入一些tag为空数组或不存在tag的文档</span></span><br><span class=\"line\">db.books.insertMany([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;title&quot;</span> : <span class=\"string\">&quot;book-51&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;type&quot;</span> : <span class=\"string\">&quot;technology&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;favCount&quot;</span> : 11,</span><br><span class=\"line\">        <span class=\"string\">&quot;tag&quot;</span>:[],</span><br><span class=\"line\">        <span class=\"string\">&quot;author&quot;</span> : &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;xx006&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;age&quot;</span> : 28</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;title&quot;</span> : <span class=\"string\">&quot;book-52&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;type&quot;</span> : <span class=\"string\">&quot;technology&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;favCount&quot;</span> : 15,</span><br><span class=\"line\">        <span class=\"string\">&quot;author&quot;</span> : &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;xx006&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;age&quot;</span> : 28</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$unwind:&#123;path:&quot;$tag&quot;, preserveNullAndEmptyArrays: true&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.match(Criteria.where(<span class=\"string\">&quot;author.name&quot;</span>).is(<span class=\"string\">&quot;xx006&quot;</span>)),</span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<h3 id=\"limit-skip-sort\">$limit/$skip/$sort</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>$limit:限制传递到管道中下一阶段的文档数</p>\n</li>\n<li class=\"lvl-2\">\n<p>$skip:跳过传递到管道中下一阶段的文档数</p>\n</li>\n<li class=\"lvl-2\">\n<p>$sort:对传递到管道中下一阶段的文档进行排序</p>\n</li>\n</ul>\n<h4 id=\"示例-3\">示例</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>姓名为xx006的作者的book的tag数组拆分为多个文档，按照收藏数降序排序，跳过2个文档，取5个文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$unwind:&#123;path:&quot;$tag&quot;, preserveNullAndEmptyArrays: true&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$sort:&#123;&quot;favCount&quot;:-1&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$limit : 5 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$skip : 2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.match(Criteria.where(<span class=\"string\">&quot;author.name&quot;</span>).is(<span class=\"string\">&quot;xx006&quot;</span>)),</span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">&quot;tag&quot;</span>, <span class=\"literal\">true</span>),</span><br><span class=\"line\">        Aggregation.sort(Sort.by(Sort.Direction.DESC, <span class=\"string\">&quot;favCount&quot;</span>)),</span><br><span class=\"line\">        Aggregation.skip(<span class=\"number\">2</span>),</span><br><span class=\"line\">        Aggregation.limit(<span class=\"number\">5</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br><span class=\"line\">``</span><br><span class=\"line\">* 统计每个分类的book文档数量</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:&quot;$type&quot;,total:&#123;$sum:1&#125;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$sort:&#123;total:-1&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.group(<span class=\"string\">&quot;type&quot;</span>).count().as(<span class=\"string\">&quot;total&quot;</span>),</span><br><span class=\"line\">        Aggregation.sort(Sort.by(Sort.Direction.DESC, <span class=\"string\">&quot;total&quot;</span>))</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>标签的热度排行，标签的热度则按其关联book文档的收藏数（favCount）来计算</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$match:&#123;favCount:&#123;$gt:0&#125;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$unwind:&quot;$tag&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$group:&#123;_id:&quot;$tag&quot;,total:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$sort:&#123;total:-1&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.match(Criteria.where(<span class=\"string\">&quot;favCount&quot;</span>).gt(<span class=\"number\">0</span>)),</span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">&quot;tag&quot;</span>),</span><br><span class=\"line\">        Aggregation.group(<span class=\"string\">&quot;tag&quot;</span>).sum(<span class=\"string\">&quot;favCount&quot;</span>).as(<span class=\"string\">&quot;total&quot;</span>),</span><br><span class=\"line\">        Aggregation.sort(Sort.by(Sort.Direction.DESC, <span class=\"string\">&quot;total&quot;</span>))</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<h3 id=\"bucket\">$bucket</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>$bucket:根据指定的条件和边界，将文档分组到不同的桶中</p>\n</li>\n</ul>\n<h4 id=\"示例-4\">示例</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>统计book文档收藏数[0,10),[10,60),[60,80),[80,100),[100,+∞）</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.books.aggregate([&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    $bucket:&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        groupBy:&quot;$favCount&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">        boundaries:[0,10,60,80,100],</span></span><br><span class=\"line\"><span class=\"comment\">        default:&quot;other&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">        output:&#123;&quot;count&quot;:&#123;$sum:1&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;])</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">[</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 0, count: 3 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 10, count: 27 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 60, count: 11 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 80, count: 11 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">groupBy: 指定用于分组的字段。在此示例中，根据 favCount 字段的值进行分组。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">boundaries: 定义分桶的边界，即每个桶的范围。文档的值将根据这些边界被分配到不同的桶中。边界应按升序排列。在这个命令中，边界 [0, 10, 60, 80, 100] 表示将文档分成六个桶：小于等于0、大于0小于等于10、大于10小于等于60、大于60小于等于80、大于80小于等于100、大于100。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">default: 这是一个可选参数，用于指定默认桶的名称。如果文档的值不在指定的边界范围内，则会被放入该桶中。在这个命令中，如果 favCount 的值不在指定的边界范围内，将会被放入名为 &quot;other&quot; 的桶中。比如这里设置边界 [10, 60, 80, 100]，即表示从10开始分组，则0~10的数据会被分组到名为 &quot;other&quot; 的桶中。</span></span><br><span class=\"line\"><span class=\"comment\">[</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 10, count: 27 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 60, count: 11 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: 80, count: 11 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; _id: &#x27;other&#x27;, count: 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">output: 定义了每个桶的输出内容。这是一个子文档，它指定了在每个桶中计算的聚合操作。在这个示例中，使用 $sum 聚合操作符来计算每个桶中的文档数量，并将结果存储在名为 &quot;count&quot; 的字段中。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.bucket(<span class=\"string\">&quot;$favCount&quot;</span>)</span><br><span class=\"line\">                .withBoundaries(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">60</span>,<span class=\"number\">80</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">                .withDefaultBucket(<span class=\"string\">&quot;other&quot;</span>)</span><br><span class=\"line\">                .andOutput(context -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(<span class=\"string\">&quot;$sum&quot;</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">                .as(<span class=\"string\">&quot;count&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;books&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<h3 id=\"lookup\">$lookup</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>$lookup:将文档中的一个字段的值与另一个集合中的文档进行匹配，然后将匹配的文档添加到当前文档中</p>\n</li>\n<li class=\"lvl-2\">\n<p>语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.aggregate([&#123;</span><br><span class=\"line\">    <span class=\"variable\">$lookup</span>: &#123;</span><br><span class=\"line\">            from: <span class=\"string\">&quot;&lt;collection to join&gt;&quot;</span>,</span><br><span class=\"line\">            localField: <span class=\"string\">&quot;&lt;field from the input documents&gt;&quot;</span>,</span><br><span class=\"line\">            foreignField: <span class=\"string\">&quot;&lt;field from the documents of the from collection&gt;&quot;</span>,</span><br><span class=\"line\">            as: <span class=\"string\">&quot;&lt;output array field&gt;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>from</code></td>\n<td>同一个数据库下等待被Join的集合。</td>\n</tr>\n<tr>\n<td><code>localField</code></td>\n<td>源集合中的match值，如果输入的集合中，某文档没有 localField这个Key（Field），在处理的过程中，会默认为此文档含有 localField：null的键值对。</td>\n</tr>\n<tr>\n<td><code>foreignField</code></td>\n<td>待Join的集合的match值，如果待Join的集合中，文档没有foreignField值，在处理的过程中，会默认为此文档含有 foreignField：null的键值对。</td>\n</tr>\n<tr>\n<td><code>as</code></td>\n<td>为输出文档的新增值命名。如果输入的集合中已存在该值，则会覆盖掉。</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>其语法功能类似于下面的伪SQL语句</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span>, <span class=\"operator\">&lt;</span>output <span class=\"keyword\">array</span> field<span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> collection</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>output <span class=\"keyword\">array</span> field<span class=\"operator\">&gt;</span> <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\">                               <span class=\"keyword\">FROM</span> <span class=\"operator\">&lt;</span>collection <span class=\"keyword\">to</span> <span class=\"keyword\">join</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\">                               <span class=\"keyword\">WHERE</span> <span class=\"operator\">&lt;</span>foreignField<span class=\"operator\">&gt;</span> <span class=\"operator\">=</span> <span class=\"operator\">&lt;</span>collection.localField<span class=\"operator\">&gt;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例-5\">示例</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>准备数据</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 顾客信息</span></span><br><span class=\"line\">db.customer.insertOne(&#123;customerCode:1,name:<span class=\"string\">&quot;customer1&quot;</span>,phone:<span class=\"string\">&quot;13112345678&quot;</span>,address:<span class=\"string\">&quot;test1&quot;</span>&#125;)</span><br><span class=\"line\">db.customer.insertOne(&#123;customerCode:2,name:<span class=\"string\">&quot;customer2&quot;</span>,phone:<span class=\"string\">&quot;13112345679&quot;</span>,address:<span class=\"string\">&quot;test2&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 订单信息</span></span><br><span class=\"line\">db.order.insertOne(&#123;orderId:1,orderCode:<span class=\"string\">&quot;order001&quot;</span>,customerCode:1,price:200&#125;)</span><br><span class=\"line\">db.order.insertOne(&#123;orderId:2,orderCode:<span class=\"string\">&quot;order002&quot;</span>,customerCode:2,price:400&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 订单明细</span></span><br><span class=\"line\">db.orderItem.insertOne(&#123;itemId:1,productName:<span class=\"string\">&quot;apples&quot;</span>,qutity:2,orderId:1&#125;)</span><br><span class=\"line\">db.orderItem.insertOne(&#123;itemId:2,productName:<span class=\"string\">&quot;oranges&quot;</span>,qutity:2,orderId:1&#125;)</span><br><span class=\"line\">db.orderItem.insertOne(&#123;itemId:3,productName:<span class=\"string\">&quot;mangoes&quot;</span>,qutity:2,orderId:1&#125;)</span><br><span class=\"line\">db.orderItem.insertOne(&#123;itemId:4,productName:<span class=\"string\">&quot;apples&quot;</span>,qutity:2,orderId:2&#125;)</span><br><span class=\"line\">db.orderItem.insertOne(&#123;itemId:5,productName:<span class=\"string\">&quot;oranges&quot;</span>,qutity:2,orderId:2&#125;)</span><br><span class=\"line\">db.orderItem.insertOne(&#123;itemId:6,productName:<span class=\"string\">&quot;mangoes&quot;</span>,qutity:2,orderId:2&#125;)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查询顾客的订单信息，关联字段为customerCode顾客号码</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.customer.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$lookup: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">       from: &quot;order&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">       localField: &quot;customerCode&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">       foreignField: &quot;customerCode&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">       as: &quot;customerOrder&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.lookup(<span class=\"string\">&quot;order&quot;</span>, <span class=\"string\">&quot;customerCode&quot;</span>, <span class=\"string\">&quot;customerCode&quot;</span>, <span class=\"string\">&quot;customerOrder&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;customer&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>根据订单信息关联顾客信息和订单明细</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.order.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$lookup: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">               from: &quot;customer&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">               localField: &quot;customerCode&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">               foreignField: &quot;customerCode&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">               as: &quot;curstomer&quot;</span></span><br><span class=\"line\"><span class=\"comment\">             &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;$lookup: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">               from: &quot;orderItem&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">               localField: &quot;orderId&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">               foreignField: &quot;orderId&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">               as: &quot;orderItem&quot;</span></span><br><span class=\"line\"><span class=\"comment\">             &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">        Aggregation.lookup(<span class=\"string\">&quot;customer&quot;</span>, <span class=\"string\">&quot;customerCode&quot;</span>, <span class=\"string\">&quot;customerCode&quot;</span>, <span class=\"string\">&quot;curstomer&quot;</span>),</span><br><span class=\"line\">        Aggregation.lookup(<span class=\"string\">&quot;orderItem&quot;</span>, <span class=\"string\">&quot;orderId&quot;</span>, <span class=\"string\">&quot;orderId&quot;</span>, <span class=\"string\">&quot;orderItem&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;order&quot;</span>, Document.class).getMappedResults();</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍如何使用SpringBoot实现MongoDB7.0的聚合操作 SpringBoot版本3.2.3，MongoDB版本7.0.6 MongoDB Aggregation Operations SQL to Aggregation Mapping Chart MongoDB7.0--SpringBoot单集合操作 聚合操作简介 聚合操作允许用户处理多个文档并返回计算结果 聚合操作包含三类 单文档聚合：针对单个集合，如：db.collection.countDocument(), db.collection.distinct() 聚合管道：它可以作用在一个或几个集合上，对集合中的数据进行的一系列运算，并将这些数据转化为用户期望的形式，本文主要介绍管道操作 MapReduce：从MongoDB 5.0开始，map-reduce操作已被弃用，本文不做介绍。 聚合管道 聚合管道是MongoDB中非常强大的功能，它允许用户将多个操作组合在一起，以实现复杂的数据处理。 从效果而言，聚合管道相当于 SQL 查询中的 GROUP BY、 LEFT OUTER JOIN 、 AS等。 整个聚合运算过程称为管道（Pipeline），它是由多个阶段（Stage）组成的， 每个管道： 接受一系列文档（原始数据） 每个阶段对这些文档进行一系列运算 结果文档输出给下一个阶段 聚合管道操作语法 pipelines 一组数据聚合阶段。除$out、$Merge和$geonear阶段之外，每个阶段都可以在管道中出现多次。 options 可选，聚合操作的其他参数。包含：查询计划、是否使用临时文件、 游标、最大操作时间、读写策略、强制索引等等 12pipeline = [$stage1, $stage2, ...$stageN];db.collection.aggregate(pipeline, &#123;options&#125;) 常用的聚合阶段运算符 阶段运算符 描述 SQL等价运算符 $match 过滤文档 WHERE $project 投影，改变文档的形状和内容 SELECT filedName AS newName $group 将文档分组 GROUP BY $sort 对文档进行排序 ORDER BY $limit 限制结果集的大小 LIMIT $skip 跳过指定数量的文档 OFFSET $unwind 展开数组 - $lookup 从其他集合中获取相关文档,左外连接 LEFT OUTER JOIN $out 将结果集输出到新的集合 - $geoNear 按照地理位置附近的顺序返回文档 - $graphLookup 执行递归查询 - $addFields 添加新字段 - $bucket 根据指定条件将文档分组成桶 - $facet 允许在单个聚合阶段内执行多个独立的子聚合 - 聚合表达式 获取字段信息 12$&lt;field&gt; ： 用 $ 指示字段路径$&lt;field&gt;.&lt;subfield&gt; ： 使用 $ 和 . 来指示内嵌文档的路径 常量表达式 1$literal :&lt;value&gt; ： 指示常量 &lt;value&gt; 系统变量表达式 12$$&lt;variable&gt; 使用 $$ 指示系统变量$$CURRENT 指示管道中当前操作的文档 聚合管道示例 本示例使用SpringBoot实现MongoDB7.0的聚合操作 初始化数据 1234567891011121314151617181920212223242526272829303132333435363738394041424344/*var tags = [&quot;nosql&quot;,&quot;mongodb&quot;,&quot;document&quot;,&quot;developer&quot;,&quot;popular&quot;];var types = [&quot;technology&quot;,&quot;sociality&quot;,&quot;travel&quot;,&quot;novel&quot;,&quot;literature&quot;];var books=[];for(var i=0;i&lt;50;i++)&#123; var typeIdx = Math.floor(Math.random()*types.length); var tagIdx = Math.floor(Math.random()*tags.length); var tagIdx2 = Math.floor(Math.random()*tags.length); var favCount = Math.floor(Math.random()*100); var username = &quot;xx00&quot;+Math.floor(Math.random()*10); var age = 20 + Math.floor(Math.random()*15); var book = &#123; title: &quot;book-&quot;+i, type: types[typeIdx], tag: [tags[tagIdx],tags[tagIdx2]], favCount: favCount, author: &#123;name:username,age:age&#125; &#125;; books.push(book)&#125;db.books.insertMany(books);*/String[] tags = &#123;&quot;nosql&quot;, &quot;mongodb&quot;, &quot;document&quot;, &quot;developer&quot;, &quot;popular&quot;&#125;;String[] types = &#123;&quot;technology&quot;, &quot;sociality&quot;, &quot;travel&quot;, &quot;novel&quot;, &quot;literature&quot;&#125;;List&lt;Document&gt; books = new ArrayList&lt;&gt;();Random random = new Random();for (int i = 0; i &lt; 50; i++) &#123; int typeIdx = random.nextInt(types.length); int tagIdx = random.nextInt(tags.length); int tagIdx2 = random.nextInt(tags.length); int favCount = random.nextInt(100); String username = &quot;xx00&quot; + random.nextInt(10); int age = 20 + random.nextInt(15); Document book = new Document(&quot;title&quot;, &quot;book-&quot; + i) .append(&quot;type&quot;, types[typeIdx]) .append(&quot;tag&quot;, List.of(tags[tagIdx], tags[tagIdx2])) .append(&quot;favCount&quot;, favCount) .append(&quot;author&quot;, new Document(&quot;name&quot;, username).append(&quot;age&quot;, age)); books.add(book);&#125;mongoTemplate.insert(books, &quot;books&quot;); $project:投影操作 将原始字段投影成指定名称， 如将集合中的 title 投影成 name 12345678910// db.books.aggregate([&#123;$project:&#123;name:&quot;$title&quot;&#125;&#125;])ProjectionOperation projectOperation = Aggregation.project() .andExpression(&quot;title&quot;).as(&quot;name&quot;);Aggregation aggregation = Aggregation.newAggregation(projectOperation);System.out.println(aggregation);List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults();for (Document document : result) &#123; System.out.println(document.toJson());&#125; 剔除不需要的字段 12345678910111213// db.books.aggregate([&#123;$project:&#123;name:&quot;$title&quot;,_id:0,type:1,author.name:1&#125;&#125;])ProjectionOperation projectOperation = Aggregation.project() .andExclude(&quot;_id&quot;) .andInclude(&quot;type&quot;) .andExpression(&quot;author.name&quot;).as(&quot;author.name&quot;) // 这里必须使用as重新命名，否则只会用name做字段名称，这就和后面的title的别名冲突了 .andExpression(&quot;title&quot;).as(&quot;name&quot;);Aggregation aggregation = Aggregation.newAggregation(projectOperation);System.out.println(aggregation);List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults();for (Document document : results) &#123; System.out.println(document.toJson());&#125; $match:过滤操作 过滤出指定条件的文档 12345678// db.books.aggregate([&#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;])MatchOperation matchOperation = Aggregation.match(Criteria.where(&quot;type&quot;).is(&quot;technology&quot;));Aggregation aggregation = Aggregation.newAggregation(matchOperation);System.out.println(aggregation);List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults();for (Document document : results) &#123; System.out.println(document.toJson());&#125; 组合其它管道 12345678910/*db.books.aggregate([ &#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;, &#123;$project:&#123;name:&quot;$title&quot;,_id:0,type:1,author:&#123;name:1&#125;&#125;&#125;])*/MatchOperation matchOperation = Aggregation.match(Criteria.where(&quot;type&quot;).is(&quot;technology&quot;));ProjectionOperation projectOperation = Aggregation.project(&quot;title&quot;).andExclude(&quot;_id&quot;).andInclude(&quot;type&quot;).and(&quot;author.name&quot;).as(&quot;author.name&quot;);Aggregation aggregation = Aggregation.newAggregation(matchOperation, projectOperation);List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); $count:计数操作 1234567891011121314/*db.books.aggregate([ &#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;, &#123;$count: &quot;type_count&quot;&#125;])*/// MatchOperation to filter documents by type: &quot;technology&quot;MatchOperation matchAggregation = Aggregation.match(Criteria.where(&quot;type&quot;).is(&quot;technology&quot;));// CountOperation to count the matched documentsCountOperation countAggregation = Aggregation.count().as(&quot;type_count&quot;);// Combine the match and count operationsAggregation aggregation = Aggregation.newAggregation(matchAggregation, countAggregation);System.out.println(aggregation);List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); $group:分组操作 按指定的表达式对文档进行分组，并将每个不同分组的文档输出到下一个阶段。输出文档包含一个_id字段，该字段按键包含不同的组。 输出文档还可以包含计算字段，该字段保存由$group的_id字段分组的一些accumulator表达式的值。 $group不会输出具体的文档而只是统计信息。 语法 1234&#123; $group: &#123; _id: &lt;expression&gt;, &lt;field1&gt;: &#123; &lt;accumulator1&gt; : &lt;expression1&gt; &#125;, ... &#125; &#125;# _id字段是必填的;但是，可以指定_id值为null来为整个输入文档计算累计值。# 剩余的计算字段是可选的，并使用&lt;accumulator&gt;运算符进行计算。# _id和&lt;accumulator&gt;表达式可以接受任何有效的表达式。 accumulator操作符 名称 描述 类比sql avg 计算均值 avg first 返回每组第一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的第一个文档。 limit 0,1 last 返回每组最后一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的最后个文档。 - max 根据分组，获取集合中所有文档对应值得最大值。 max min 根据分组，获取集合中所有文档对应值得最小值。 min push 将指定的表达式的值添加到一个数组中。 - addToSet 将表达式的值添加到一个集合中（无重复值，无序）。 - sum 计算总和 sum stdDevPop 返回输入值的总体标准偏差（population standard deviation） - stdDevSamp 返回输入值的样本标准偏差（the sample standard deviation） - 示例 book的数量，收藏总数和平均值 123456789101112131415161718/*db.books.aggregate([ &#123;$group:&#123;_id:null,count:&#123;$sum:1&#125;,pop:&#123;$sum:&quot;$favCount&quot;&#125;,avg:&#123;$avg:&quot;$favCount&quot;&#125;&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.group().count().as(&quot;count&quot;).sum(&quot;favCount&quot;).as(&quot;pop&quot;).avg(&quot;favCount&quot;).as(&quot;avg&quot;));AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class);List&lt;Document&gt; mappedResults = results.getMappedResults();// Assuming that there will be only one result due to grouping by null (_id: null)if (!mappedResults.isEmpty()) &#123; System.out.println(mappedResults.get(0).toJson());&#125; else &#123; System.out.println(&quot;&#123;&#125;&quot;);&#125; 统计每个作者的book收藏总数 1234567891011/*db.books.aggregate([ &#123;$group:&#123;_id:&quot;$author.name&quot;,pop:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.group(&quot;author.name&quot;).sum(&quot;favCount&quot;).as(&quot;pop&quot;));AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class);List&lt;Document&gt; mappedResults = results.getMappedResults(); 统计每个作者的每本book的收藏数 1234567891011/*db.books.aggregate([ &#123;$group:&#123;_id:&#123;name:&quot;$author.name&quot;,title:&quot;$title&quot;&#125;,pop:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.group(&quot;author.name&quot;, &quot;title&quot;).sum(&quot;favCount&quot;).as(&quot;pop&quot;));AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class);List&lt;Document&gt; mappedResults = results.getMappedResults(); 每个作者的book的type合集 123456789/*db.books.aggregate([ &#123;$group:&#123;_id:&quot;$author.name&quot;,types:&#123;$addToSet:&quot;$type&quot;&#125;&#125;&#125;])*/GroupOperation groupOperation = Aggregation.group(&quot;author.name&quot;).addToSet(&quot;type&quot;).as(&quot;types&quot;);Aggregation aggregation = Aggregation.newAggregation(groupOperation);AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class);List&lt;Document&gt; mappedResults = results.getMappedResults(); $unwind 可以将数组拆分为单独的文档 语法 1234567891011&#123; $unwind: &#123; #要指定字段路径，在字段名称前加上$符并用引号括起来。 path: &lt;field path&gt;, #可选,一个新字段的名称用于存放元素的数组索引。该名称不能以$开头。 includeArrayIndex: &lt;string&gt;, #可选，default :false，若为true,如果路径为空，缺少或为空数组，则$unwind输出文档 preserveNullAndEmptyArrays: &lt;boolean&gt; &#125;&#125; 示例 姓名为xx006的作者的book的tag数组拆分为多个文档 1234567891011/*db.books.aggregate([ &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;, &#123;$unwind:&quot;$tag&quot;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.match(Criteria.where(&quot;author.name&quot;).is(&quot;xx006&quot;)), Aggregation.unwind(&quot;tag&quot;));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); 使用includeArrayIndex选项来输出数组元素的数组索引 1234567891011/*db.books.aggregate([ &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;, &#123;$unwind:&#123;path:&quot;$tag&quot;, includeArrayIndex: &quot;arrayIndex&quot;&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.match(Criteria.where(&quot;author.name&quot;).is(&quot;xx006&quot;)), Aggregation.unwind(&quot;tag&quot;, &quot;arrayIndex&quot;));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); 每个作者的book的tag合集 1234567891011/*db.books.aggregate([ &#123;$unwind:&quot;$tag&quot;&#125;, &#123;$group:&#123;_id:&quot;$author.name&quot;,types:&#123;$addToSet:&quot;$tag&quot;&#125;&#125;&#125;])*/UnwindOperation unwindOperation = Aggregation.unwind(&quot;tag&quot;);GroupOperation groupOperation = Aggregation.group(&quot;author.name&quot;).addToSet(&quot;tag&quot;).as(&quot;types&quot;);Aggregation aggregation = Aggregation.newAggregation(unwindOperation, groupOperation);AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class);List&lt;Document&gt; mappedResults = results.getMappedResults(); 使用preserveNullAndEmptyArrays选项在输出中包含缺少tag字段，null或空数组的文档 12345678910111213141516171819202122# 初始化数据，加入一些tag为空数组或不存在tag的文档db.books.insertMany([ &#123; &quot;title&quot; : &quot;book-51&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;favCount&quot; : 11, &quot;tag&quot;:[], &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx006&quot;, &quot;age&quot; : 28 &#125; &#125;, &#123; &quot;title&quot; : &quot;book-52&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;favCount&quot; : 15, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx006&quot;, &quot;age&quot; : 28 &#125; &#125;]) 1234567891011/*db.books.aggregate([ &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;, &#123;$unwind:&#123;path:&quot;$tag&quot;, preserveNullAndEmptyArrays: true&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.match(Criteria.where(&quot;author.name&quot;).is(&quot;xx006&quot;)), Aggregation.unwind(&quot;tag&quot;, true));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); $limit/$skip/$sort $limit:限制传递到管道中下一阶段的文档数 $skip:跳过传递到管道中下一阶段的文档数 $sort:对传递到管道中下一阶段的文档进行排序 示例 姓名为xx006的作者的book的tag数组拆分为多个文档，按照收藏数降序排序，跳过2个文档，取5个文档 12345678910111213141516171819202122232425262728293031/*db.books.aggregate([ &#123;$match:&#123;&quot;author.name&quot;:&quot;xx006&quot;&#125;&#125;, &#123;$unwind:&#123;path:&quot;$tag&quot;, preserveNullAndEmptyArrays: true&#125;&#125;, &#123;$sort:&#123;&quot;favCount&quot;:-1&#125;&#125;, &#123;$limit : 5 &#125;, &#123;$skip : 2&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.match(Criteria.where(&quot;author.name&quot;).is(&quot;xx006&quot;)), Aggregation.unwind(&quot;tag&quot;, true), Aggregation.sort(Sort.by(Sort.Direction.DESC, &quot;favCount&quot;)), Aggregation.skip(2), Aggregation.limit(5));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults();``* 统计每个分类的book文档数量```java/*db.books.aggregate([ &#123;$group:&#123;_id:&quot;$type&quot;,total:&#123;$sum:1&#125;&#125;&#125;, &#123;$sort:&#123;total:-1&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.group(&quot;type&quot;).count().as(&quot;total&quot;), Aggregation.sort(Sort.by(Sort.Direction.DESC, &quot;total&quot;)));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); 标签的热度排行，标签的热度则按其关联book文档的收藏数（favCount）来计算 123456789101112131415/*db.books.aggregate([ &#123;$match:&#123;favCount:&#123;$gt:0&#125;&#125;&#125;, &#123;$unwind:&quot;$tag&quot;&#125;, &#123;$group:&#123;_id:&quot;$tag&quot;,total:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;, &#123;$sort:&#123;total:-1&#125;&#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.match(Criteria.where(&quot;favCount&quot;).gt(0)), Aggregation.unwind(&quot;tag&quot;), Aggregation.group(&quot;tag&quot;).sum(&quot;favCount&quot;).as(&quot;total&quot;), Aggregation.sort(Sort.by(Sort.Direction.DESC, &quot;total&quot;)));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); $bucket $bucket:根据指定的条件和边界，将文档分组到不同的桶中 示例 统计book文档收藏数[0,10),[10,60),[60,80),[80,100),[100,+∞） 123456789101112131415161718192021222324252627282930313233343536373839/*db.books.aggregate([&#123; $bucket:&#123; groupBy:&quot;$favCount&quot;, boundaries:[0,10,60,80,100], default:&quot;other&quot;, output:&#123;&quot;count&quot;:&#123;$sum:1&#125;&#125; &#125;&#125;])[ &#123; _id: 0, count: 3 &#125;, &#123; _id: 10, count: 27 &#125;, &#123; _id: 60, count: 11 &#125;, &#123; _id: 80, count: 11 &#125;]groupBy: 指定用于分组的字段。在此示例中，根据 favCount 字段的值进行分组。boundaries: 定义分桶的边界，即每个桶的范围。文档的值将根据这些边界被分配到不同的桶中。边界应按升序排列。在这个命令中，边界 [0, 10, 60, 80, 100] 表示将文档分成六个桶：小于等于0、大于0小于等于10、大于10小于等于60、大于60小于等于80、大于80小于等于100、大于100。default: 这是一个可选参数，用于指定默认桶的名称。如果文档的值不在指定的边界范围内，则会被放入该桶中。在这个命令中，如果 favCount 的值不在指定的边界范围内，将会被放入名为 &quot;other&quot; 的桶中。比如这里设置边界 [10, 60, 80, 100]，即表示从10开始分组，则0~10的数据会被分组到名为 &quot;other&quot; 的桶中。[ &#123; _id: 10, count: 27 &#125;, &#123; _id: 60, count: 11 &#125;, &#123; _id: 80, count: 11 &#125;, &#123; _id: &#x27;other&#x27;, count: 3 &#125;]output: 定义了每个桶的输出内容。这是一个子文档，它指定了在每个桶中计算的聚合操作。在这个示例中，使用 $sum 聚合操作符来计算每个桶中的文档数量，并将结果存储在名为 &quot;count&quot; 的字段中。*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.bucket(&quot;$favCount&quot;) .withBoundaries(0,10,60,80,100) .withDefaultBucket(&quot;other&quot;) .andOutput(context -&gt; new Document(&quot;$sum&quot;, 1)) .as(&quot;count&quot;));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;books&quot;, Document.class).getMappedResults(); $lookup $lookup:将文档中的一个字段的值与另一个集合中的文档进行匹配，然后将匹配的文档添加到当前文档中 语法 12345678db.collection.aggregate([&#123; $lookup: &#123; from: &quot;&lt;collection to join&gt;&quot;, localField: &quot;&lt;field from the input documents&gt;&quot;, foreignField: &quot;&lt;field from the documents of the from collection&gt;&quot;, as: &quot;&lt;output array field&gt;&quot; &#125;&#125;) 名称 描述 from 同一个数据库下等待被Join的集合。 localField 源集合中的match值，如果输入的集合中，某文档没有 localField这个Key（Field），在处理的过程中，会默认为此文档含有 localField：null的键值对。 foreignField 待Join的集合的match值，如果待Join的集合中，文档没有foreignField值，在处理的过程中，会默认为此文档含有 foreignField：null的键值对。 as 为输出文档的新增值命名。如果输入的集合中已存在该值，则会覆盖掉。 其语法功能类似于下面的伪SQL语句 12345SELECT *, &lt;output array field&gt;FROM collectionWHERE &lt;output array field&gt; IN (SELECT * FROM &lt;collection to join&gt; WHERE &lt;foreignField&gt; = &lt;collection.localField&gt;); 示例 准备数据 123456789101112131415# 顾客信息db.customer.insertOne(&#123;customerCode:1,name:&quot;customer1&quot;,phone:&quot;13112345678&quot;,address:&quot;test1&quot;&#125;)db.customer.insertOne(&#123;customerCode:2,name:&quot;customer2&quot;,phone:&quot;13112345679&quot;,address:&quot;test2&quot;&#125;)# 订单信息db.order.insertOne(&#123;orderId:1,orderCode:&quot;order001&quot;,customerCode:1,price:200&#125;)db.order.insertOne(&#123;orderId:2,orderCode:&quot;order002&quot;,customerCode:2,price:400&#125;)# 订单明细db.orderItem.insertOne(&#123;itemId:1,productName:&quot;apples&quot;,qutity:2,orderId:1&#125;)db.orderItem.insertOne(&#123;itemId:2,productName:&quot;oranges&quot;,qutity:2,orderId:1&#125;)db.orderItem.insertOne(&#123;itemId:3,productName:&quot;mangoes&quot;,qutity:2,orderId:1&#125;)db.orderItem.insertOne(&#123;itemId:4,productName:&quot;apples&quot;,qutity:2,orderId:2&#125;)db.orderItem.insertOne(&#123;itemId:5,productName:&quot;oranges&quot;,qutity:2,orderId:2&#125;)db.orderItem.insertOne(&#123;itemId:6,productName:&quot;mangoes&quot;,qutity:2,orderId:2&#125;) 查询顾客的订单信息，关联字段为customerCode顾客号码 123456789101112131415/*db.customer.aggregate([ &#123;$lookup: &#123; from: &quot;order&quot;, localField: &quot;customerCode&quot;, foreignField: &quot;customerCode&quot;, as: &quot;customerOrder&quot; &#125; &#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.lookup(&quot;order&quot;, &quot;customerCode&quot;, &quot;customerCode&quot;, &quot;customerOrder&quot;));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;customer&quot;, Document.class).getMappedResults(); 根据订单信息关联顾客信息和订单明细 123456789101112131415161718192021222324/*db.order.aggregate([ &#123;$lookup: &#123; from: &quot;customer&quot;, localField: &quot;customerCode&quot;, foreignField: &quot;customerCode&quot;, as: &quot;curstomer&quot; &#125; &#125;, &#123;$lookup: &#123; from: &quot;orderItem&quot;, localField: &quot;orderId&quot;, foreignField: &quot;orderId&quot;, as: &quot;orderItem&quot; &#125; &#125;])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.lookup(&quot;customer&quot;, &quot;customerCode&quot;, &quot;customerCode&quot;, &quot;curstomer&quot;), Aggregation.lookup(&quot;orderItem&quot;, &quot;orderId&quot;, &quot;orderId&quot;, &quot;orderItem&quot;));List&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;order&quot;, Document.class).getMappedResults();","summary":"摘要 本文介绍如何使用SpringBoot实现MongoDB7.0的聚合操作 SpringBoot版本3.2.3，MongoDB版本7.0.6 MongoDB Aggregation Operations SQL to Aggregation Mapping Chart MongoDB7.0--SpringBoot单集合操作","date_published":"2024-03-07T13:30:05.000Z","tags":["技术","linux","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/03/05/mongodb7-springboot/","url":"https://blog.hanqunfeng.com/2024/03/05/mongodb7-springboot/","title":"MongoDB7.0--SpringBoot单集合操作","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍如何使用SpringBoot实现MongoDB7.0的单集合的CURD操作</p>\n</li>\n<li class=\"lvl-2\">\n<p>SpringBoot版本3.2.3，MongoDB版本7.0.6</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/v7.0/crud/\">MongoDB CRUD Operations</a></p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/v7.0/reference/sql-comparison/\">SQL to MongoDB Mapping Chart</a></p>\n</li>\n<li class=\"lvl-2\">\n<a href=\"/2024/03/07/mongodb7-springboot-aggregate/\" title=\"MongoDB7.0--SpringBoot聚合操作\">MongoDB7.0--SpringBoot聚合操作</a>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"spring-boot-与-MongoDB-的版本对应关系\">spring-boot 与 MongoDB 的版本对应关系</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>spring-data-mongodb</code>与<code>MongoDB</code>版本对应关系可以参看<a href=\"https://docs.spring.io/spring-data/mongodb/reference/preface.html\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p><code>spring-boot-starter-data-mongodb</code> 与 <code>spring-data-mongodb</code> 版本对应关系</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>spring-boot-starter-data-mongodb 版本</th>\n<th>spring-data-mongodb 版本</th>\n<th>MongoDB Server 版本</th>\n<th>Java Driver Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3.2.x</td>\n<td>4.2.x</td>\n<td>6.0.x,7.0.x</td>\n<td>4.11.x</td>\n</tr>\n<tr>\n<td>3.1.x</td>\n<td>4.1.x</td>\n<td>6.0.x,7.0.x</td>\n<td>4.9.x</td>\n</tr>\n<tr>\n<td>3.0.x</td>\n<td>4.0.x</td>\n<td>6.0.x</td>\n<td>4.7.x</td>\n</tr>\n<tr>\n<td>2.7.x</td>\n<td>3.4.x</td>\n<td>5.0.x</td>\n<td>4.6.x</td>\n</tr>\n<tr>\n<td>2.6.x</td>\n<td>3.3.x</td>\n<td>5.0.x</td>\n<td>4.4.x</td>\n</tr>\n<tr>\n<td>2.5.x</td>\n<td>3.2.x</td>\n<td>4.4.x</td>\n<td>4.1.x</td>\n</tr>\n<tr>\n<td>2.4.x</td>\n<td>3.1.x</td>\n<td>4.4.x</td>\n<td>4.1.x</td>\n</tr>\n<tr>\n<td>2.3.x</td>\n<td>3.0.x</td>\n<td>4.4.x</td>\n<td>4.0.x</td>\n</tr>\n<tr>\n<td>2.2.x</td>\n<td>2.2.x</td>\n<td>4.2.x</td>\n<td>3.11.x</td>\n</tr>\n<tr>\n<td>2.1.x</td>\n<td>2.1.x</td>\n<td>4.0.x</td>\n<td>3.8.x</td>\n</tr>\n<tr>\n<td>2.0.x</td>\n<td>2.0.x</td>\n<td>3.4.x</td>\n<td>3.5.x</td>\n</tr>\n<tr>\n<td>1.10.x</td>\n<td>1.10.x</td>\n<td>2.4.x</td>\n<td>2.10.x,2.11.x</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Mongo的Java驱动，在<code>3.7.x</code>及以后的版本叫做<a href=\"https://mvnrepository.com/artifact/org.mongodb/mongodb-driver-sync\">mongodb-driver-sync</a>，以前的版本叫做<a href=\"https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver\">mongo-java-driver</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB 与 Java Driver 兼容性<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/FZeH9j.png\" alt=\"\" width=\"800\" height=\"800\"></p>\n</li>\n</ul>\n<h2 id=\"SpringBoot整合MongoDB\">SpringBoot整合MongoDB</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>引入依赖</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>配置yml</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">mongodb:</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">mongodb://root:password@127.0.0.1:27017/mytest?authSource=admin</span></span><br><span class=\"line\">      <span class=\"comment\">#uri等同于下面的配置</span></span><br><span class=\"line\">      <span class=\"comment\">#database: mytest # 数据库名</span></span><br><span class=\"line\">      <span class=\"comment\">#host: 127.0.0.1</span></span><br><span class=\"line\">      <span class=\"comment\">#port: 27017</span></span><br><span class=\"line\">      <span class=\"comment\">#username: root</span></span><br><span class=\"line\">      <span class=\"comment\">#password: password</span></span><br><span class=\"line\">      <span class=\"comment\">#authentication-database: admin</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>配置类:去掉<code>_class</code>属性</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MongoConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定制TypeMapper去掉_class属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    MappingMongoConverter <span class=\"title function_\">mappingMongoConverter</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            MongoDatabaseFactory mongoDatabaseFactory,</span></span><br><span class=\"line\"><span class=\"params\">            MongoMappingContext context, MongoCustomConversions conversions)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">DbRefResolver</span> <span class=\"variable\">dbRefResolver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultDbRefResolver</span>(mongoDatabaseFactory);</span><br><span class=\"line\">        <span class=\"type\">MappingMongoConverter</span> <span class=\"variable\">mappingMongoConverter</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">MappingMongoConverter</span>(dbRefResolver, context);</span><br><span class=\"line\">        mappingMongoConverter.setCustomConversions(conversions);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//构造DefaultMongoTypeMapper，将typeKey设置为空值</span></span><br><span class=\"line\">        mappingMongoConverter.setTypeMapper(<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultMongoTypeMapper</span>(<span class=\"literal\">null</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mappingMongoConverter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询\">查询</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Mongo语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询集合中的若干文档</span></span><br><span class=\"line\">db.collection.find(query, projection)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询集合中的第一个文档</span></span><br><span class=\"line\">db.collection.findOne(query, projection)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果你需要以易读的方式来读取数据，可以使用pretty()方法</span></span><br><span class=\"line\">db.collection.find().pretty()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 排序，1 为升序排列，而 -1 是用于降序排列</span></span><br><span class=\"line\">db.collection.find(query, projection).<span class=\"built_in\">sort</span>(&#123;field:-1&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分页</span></span><br><span class=\"line\"><span class=\"comment\"># .skip(16) 表示跳过前面 16 条记录，即前两页的所有记录.</span></span><br><span class=\"line\"><span class=\"comment\"># .limit(8) 表示返回 8 条记录，即第三页的所有记录。</span></span><br><span class=\"line\">db.collection.find().skip(16).<span class=\"built_in\">limit</span>(8)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询记录数</span></span><br><span class=\"line\">db.collection.countDocuments()</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>query ：可选，使用查询操作符指定查询条件</p>\n</li>\n<li class=\"lvl-4\">\n<p>projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。投影时，_id为1的时候，其他字段必须是1；_id是0的时候，其他字段可以是0；如果没有_id字段约束，多个其他字段必须同为0或同为1。</p>\n</li>\n</ul>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查询操作符</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>解释</th>\n<th>示例</th>\n<th>示例解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$lt</code></td>\n<td>小于</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;)</code></td>\n<td>查询年龄小于 25 的文档</td>\n</tr>\n<tr>\n<td><code>$lte</code></td>\n<td>小于等于</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;)</code></td>\n<td>查询年龄小于等于 25 的文档</td>\n</tr>\n<tr>\n<td><code>$gt</code></td>\n<td>大于</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;)</code></td>\n<td>查询年龄大于 25 的文档</td>\n</tr>\n<tr>\n<td><code>$gte</code></td>\n<td>大于等于</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;)</code></td>\n<td>查询年龄大于等于 25 的文档</td>\n</tr>\n<tr>\n<td><code>$ne</code></td>\n<td>不等于</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;)</code></td>\n<td>查询年龄不等于 25 的文档</td>\n</tr>\n<tr>\n<td><code>$in</code></td>\n<td>在指定数组中</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;)</code></td>\n<td>查询年龄存在并且在指定数组中的文档</td>\n</tr>\n<tr>\n<td><code>$nin</code></td>\n<td>不在指定数组中</td>\n<td><code>db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;)</code></td>\n<td>查询年龄不存在或者不在指定数组中的文档</td>\n</tr>\n<tr>\n<td><code>$or</code></td>\n<td>匹配两个或多个条件中的一个</td>\n<td><code>db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</code></td>\n<td>查询年龄为 20 或者薪资大于 8000 的文档</td>\n</tr>\n<tr>\n<td><code>$and</code></td>\n<td>匹配全部条件</td>\n<td><code>db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</code></td>\n<td>查询年龄为 20 并且薪资大于 8000 的文档</td>\n</tr>\n<tr>\n<td><code>$all</code></td>\n<td>匹配数组中所有元素满足指定条件</td>\n<td><code>db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;, &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125; ] &#125; &#125;)</code></td>\n<td>查询包含 tagKey 为 “color”，tagValue 为 “red” 的标签，并且包含 tagKey 为 “size”，tagValue 为 “XL” 的标签的文档</td>\n</tr>\n<tr>\n<td><code>$elemMatch</code></td>\n<td>匹配数组中至少一个元素满足指定条件</td>\n<td><code>db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;blue&quot; &#125; &#125; &#125;)</code></td>\n<td>查询包含 tagKey 为 “color”，tagValue 包含 “blue” 的标签的文档</td>\n</tr>\n<tr>\n<td><code>$text</code></td>\n<td>全文搜索</td>\n<td><code>db.collection.find(&#123; &quot;$text&quot;: &#123; &quot;$search&quot;: &quot;searchTerm&quot; &#125; &#125;)</code></td>\n<td>进行全文搜索，查找包含 “searchTerm” 的文档</td>\n</tr>\n<tr>\n<td><code>$type</code></td>\n<td>指定字段类型</td>\n<td><code>db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$type&quot;: &quot;string&quot; &#125; &#125;)</code></td>\n<td>查询指定字段类型为字符串的文档</td>\n</tr>\n<tr>\n<td><code>$size</code></td>\n<td>数组长度</td>\n<td><code>db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$size&quot;: sizeValue &#125; &#125;)</code></td>\n<td>查询指定字段数组长度为 sizeValue 的文档</td>\n</tr>\n<tr>\n<td><code>$exists</code></td>\n<td>字段存在</td>\n<td><code>db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$exists&quot;: true &#125; &#125;)</code></td>\n<td>查询指定字段存在的文档</td>\n</tr>\n<tr>\n<td><code>$mod</code></td>\n<td>取模</td>\n<td><code>db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$mod&quot;: [divisor, remainder] &#125; &#125;)</code></td>\n<td>查询指定字段取模后符合给定除数和余数的文档</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"SpringBoot代码示例\">SpringBoot代码示例</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>操作<code>org.bson.Document</code>对象，无需创建实体映射对象，但操作时需要指定集合名称</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.bson.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.BasicQuery;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasicTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MongoTemplate mongoTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    // 初始化数据</span></span><br><span class=\"line\"><span class=\"comment\">    db.collection.insertMany([</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;name&quot;: &quot;item1&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;age&quot;: 20,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;salary&quot;: 5000,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;colors&quot;: [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;sizes&quot;: [&quot;S&quot;, &quot;M&quot;, &quot;L&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;tags&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;M&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            ]</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;name&quot;: &quot;item2&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;age&quot;: 30,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;salary&quot;: 8000,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;colors&quot;: [&quot;green&quot;, &quot;yellow&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;sizes&quot;: [&quot;M&quot;, &quot;L&quot;, &quot;XL&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;tags&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;blue&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;formal&quot; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            ]</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;name&quot;: &quot;item3&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;age&quot;: 25,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;salary&quot;: 10000,</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;colors&quot;: [&quot;red&quot;, &quot;green&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;sizes&quot;: [&quot;L&quot;, &quot;XL&quot;],</span></span><br><span class=\"line\"><span class=\"comment\">            &quot;tags&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;green&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;L&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            ]</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    ]);</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">initializeData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        List&lt;Document&gt; documents = Arrays.asList(</span><br><span class=\"line\">                <span class=\"comment\">// 文档1</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;item1&quot;</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;salary&quot;</span>, <span class=\"number\">5000</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;colors&quot;</span>, Arrays.asList(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;green&quot;</span>))</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;sizes&quot;</span>, Arrays.asList(<span class=\"string\">&quot;S&quot;</span>, <span class=\"string\">&quot;M&quot;</span>, <span class=\"string\">&quot;L&quot;</span>))</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;tags&quot;</span>, Arrays.asList(</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;color&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;red&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;size&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;M&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;style&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;casual&quot;</span>)</span><br><span class=\"line\">                        )),</span><br><span class=\"line\">                <span class=\"comment\">// 文档2</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;item2&quot;</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;salary&quot;</span>, <span class=\"number\">8000</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;colors&quot;</span>, Arrays.asList(<span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>))</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;sizes&quot;</span>, Arrays.asList(<span class=\"string\">&quot;M&quot;</span>, <span class=\"string\">&quot;L&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>))</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;tags&quot;</span>, Arrays.asList(</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;color&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;size&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;style&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;formal&quot;</span>)</span><br><span class=\"line\">                        )),</span><br><span class=\"line\">                <span class=\"comment\">// 文档3</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;item3&quot;</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;salary&quot;</span>, <span class=\"number\">10000</span>)</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;colors&quot;</span>, Arrays.asList(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>))</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;sizes&quot;</span>, Arrays.asList(<span class=\"string\">&quot;L&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>))</span><br><span class=\"line\">                        .append(<span class=\"string\">&quot;tags&quot;</span>, Arrays.asList(</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;color&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;green&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;size&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;L&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>().append(<span class=\"string\">&quot;tagKey&quot;</span>, <span class=\"string\">&quot;style&quot;</span>)</span><br><span class=\"line\">                                        .append(<span class=\"string\">&quot;tagValue&quot;</span>, <span class=\"string\">&quot;casual&quot;</span>)</span><br><span class=\"line\">                        ))</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"comment\">// 这里要指定集合名称</span></span><br><span class=\"line\">        mongoTemplate.insert(documents, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 也可以通过json来构建Document对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">initializeData2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; jsonList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        jsonList.add(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;name&quot;: &quot;item1&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;age&quot;: 20,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;salary&quot;: 5000,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;colors&quot;: [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;],</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;sizes&quot;: [&quot;S&quot;, &quot;M&quot;, &quot;L&quot;],</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;tags&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;M&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125;</span></span><br><span class=\"line\"><span class=\"string\">                    ]</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>);</span><br><span class=\"line\">        jsonList.add(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;name&quot;: &quot;item2&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;age&quot;: 30,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;salary&quot;: 8000,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;colors&quot;: [&quot;green&quot;, &quot;yellow&quot;],</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;sizes&quot;: [&quot;M&quot;, &quot;L&quot;, &quot;XL&quot;],</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;tags&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;blue&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;formal&quot; &#125;</span></span><br><span class=\"line\"><span class=\"string\">                    ]</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>);</span><br><span class=\"line\">        jsonList.add(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;name&quot;: &quot;item3&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;age&quot;: 25,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;salary&quot;: 10000,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;colors&quot;: [&quot;red&quot;, &quot;green&quot;],</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;sizes&quot;: [&quot;L&quot;, &quot;XL&quot;],</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;tags&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;green&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;L&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125;</span></span><br><span class=\"line\"><span class=\"string\">                    ]</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Document&gt; documents = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String json : jsonList) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 通过Document.parse()方法将json字符串转换为Document对象</span></span><br><span class=\"line\">            documents.add(Document.parse(json));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mongoTemplate.insert(documents, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testQueries</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">QueryExecutor</span> <span class=\"variable\">queryExecutor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QueryExecutor</span>(mongoTemplate);</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeLessThan25&quot;</span>, queryExecutor.findAgeLessThan25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeLessThanOrEqualTo25&quot;</span>, queryExecutor.findAgeLessThanOrEqualTo25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeGreaterThan25&quot;</span>, queryExecutor.findAgeGreaterThan25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeGreaterThanOrEqualTo25&quot;</span>, queryExecutor.findAgeGreaterThanOrEqualTo25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeNotEqualTo25&quot;</span>, queryExecutor.findAgeNotEqualTo25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeInArray&quot;</span>, queryExecutor.findAgeInArray(List.of(<span class=\"number\">20</span>, <span class=\"number\">25</span>)));</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeNotInArray&quot;</span>, queryExecutor.findAgeNotInArray(List.of(<span class=\"number\">20</span>, <span class=\"number\">25</span>)));</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeOrSalary&quot;</span>, queryExecutor.findAgeOrSalary());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeAndSalary&quot;</span>, queryExecutor.findAgeAndSalary());</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findTagsWithColorAndSize&quot;</span>, queryExecutor.findTagsWithColorAndSize());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findTagsWithColorContainingBlue&quot;</span>, queryExecutor.findTagsWithColorContainingBlue());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findTagsWithColor&quot;</span>, queryExecutor.findTagsWithColor());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findDocumentWithTagsSizeThree&quot;</span>, queryExecutor.findDocumentWithTagsSizeThree());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findDocumentWithSpecificTag&quot;</span>, queryExecutor.findDocumentWithSpecificTag());</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAllElementsWithSpecificTag&quot;</span>, queryExecutor.findAllElementsWithSpecificTag());</span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAllElementsWithSpecificTagByJson&quot;</span>, queryExecutor.findAllElementsWithSpecificTagByJson());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printResult</span><span class=\"params\">(String queryName, List&lt;Document&gt; result)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Query: &quot;</span> + queryName + <span class=\"string\">&quot; ###################################################&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Document document : result) &#123;</span><br><span class=\"line\">            System.out.println(document);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QueryExecutor</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MongoTemplate mongoTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">QueryExecutor</span><span class=\"params\">(MongoTemplate mongoTemplate)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mongoTemplate = mongoTemplate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄小于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeLessThan25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).lt(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄小于等于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeLessThanOrEqualTo25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).lte(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄大于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeGreaterThan25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).gt(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄大于等于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeGreaterThanOrEqualTo25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).gte(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄不等于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeNotEqualTo25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).ne(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄存在并且在指定数组中的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeInArray</span><span class=\"params\">(List&lt;Integer&gt; ages)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).in(ages));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄不存在或者不在指定数组中的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeNotInArray</span><span class=\"params\">(List&lt;Integer&gt; ages)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).nin(ages));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄存在并且为 20，或者薪资大于 8000 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeOrSalary</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().orOperator(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).is(<span class=\"number\">20</span>), Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gt(<span class=\"number\">8000</span>)));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄为 20，并且薪资大于 8000 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAgeAndSalary</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().andOperator(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).is(<span class=\"number\">20</span>), Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gt(<span class=\"number\">8000</span>)));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签，并且包含 tagKey 为 &quot;size&quot;，tagValue 为 &quot;XL&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findTagsWithColorAndSize</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Criteria</span> <span class=\"variable\">criteria</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().andOperator(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).is(<span class=\"string\">&quot;red&quot;</span>)), Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;size&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).is(<span class=\"string\">&quot;XL&quot;</span>)));</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(criteria);</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;blue&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findTagsWithColorContainingBlue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).regex(<span class=\"string\">&quot;blue&quot;</span>)));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findTagsWithColor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags.tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询 tags 数组长度为 3 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findDocumentWithTagsSizeThree</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).size(<span class=\"number\">3</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findDocumentWithSpecificTag</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).is(<span class=\"string\">&quot;red&quot;</span>)));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAllElementsWithSpecificTag</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).regex(<span class=\"string\">&quot;green&quot;</span>)));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用 BasicQuery，可以使用 json 字符串，这样就可以直接使用 mongo 的查询语法</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Document&gt; <span class=\"title function_\">findAllElementsWithSpecificTagByJson</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    &#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                                &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125;</span></span><br><span class=\"line\"><span class=\"string\">                            ]&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BasicQuery</span>(json);</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Document.class, <span class=\"string\">&quot;collection&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>操作实体类</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>相关注解</th>\n<th>修饰范围</th>\n<th>作用</th>\n<th>属性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Document</td>\n<td>类</td>\n<td>映射类对象为Mongo文档</td>\n<td>value, collection</td>\n</tr>\n<tr>\n<td>@Id</td>\n<td>成员变量、方法</td>\n<td>将成员变量值映射为文档的_id的值</td>\n<td></td>\n</tr>\n<tr>\n<td>@Field</td>\n<td>成员变量、方法</td>\n<td>将成员变量及值映射为文档中key:value对</td>\n<td>name, value</td>\n</tr>\n<tr>\n<td>@Transient</td>\n<td>成员变量、方法</td>\n<td>指定成员变量不参与文档的序列化</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>使用 @Document 注解指定集合名</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.mongo.model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.annotation.Id;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.mapping.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Document(collection = &quot;collection&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Item</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; colors;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; sizes;</span><br><span class=\"line\">    <span class=\"meta\">@Field</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Tag&gt; tags;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Item</span><span class=\"params\">(String name, <span class=\"type\">int</span> age, <span class=\"type\">double</span> salary, List&lt;String&gt; colors, List&lt;String&gt; sizes, List&lt;Tag&gt; tags)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.salary = salary;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.colors = colors;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sizes = sizes;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tags = tags;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\">    <span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tag</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String tagKey;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String tagValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>查询示例</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.mongo.model.Item;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.BasicQuery;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasicTests2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MongoTemplate mongoTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">initializeData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Initialize data</span></span><br><span class=\"line\">        List&lt;Item&gt; items = Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"string\">&quot;item1&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">5000</span>,</span><br><span class=\"line\">                        Arrays.asList(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;green&quot;</span>),</span><br><span class=\"line\">                        Arrays.asList(<span class=\"string\">&quot;S&quot;</span>, <span class=\"string\">&quot;M&quot;</span>, <span class=\"string\">&quot;L&quot;</span>),</span><br><span class=\"line\">                        Arrays.asList(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;color&quot;</span>, <span class=\"string\">&quot;red&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;size&quot;</span>, <span class=\"string\">&quot;M&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;style&quot;</span>, <span class=\"string\">&quot;casual&quot;</span>))),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"string\">&quot;item2&quot;</span>, <span class=\"number\">30</span>, <span class=\"number\">8000</span>,</span><br><span class=\"line\">                        Arrays.asList(<span class=\"string\">&quot;green&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>),</span><br><span class=\"line\">                        Arrays.asList(<span class=\"string\">&quot;M&quot;</span>, <span class=\"string\">&quot;L&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>),</span><br><span class=\"line\">                        Arrays.asList(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;color&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;size&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;style&quot;</span>, <span class=\"string\">&quot;formal&quot;</span>))),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>(<span class=\"string\">&quot;item3&quot;</span>, <span class=\"number\">25</span>, <span class=\"number\">10000</span>,</span><br><span class=\"line\">                        Arrays.asList(<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;green&quot;</span>),</span><br><span class=\"line\">                        Arrays.asList(<span class=\"string\">&quot;L&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>),</span><br><span class=\"line\">                        Arrays.asList(<span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;color&quot;</span>, <span class=\"string\">&quot;green&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;size&quot;</span>, <span class=\"string\">&quot;L&quot;</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">Item</span>.Tag(<span class=\"string\">&quot;style&quot;</span>, <span class=\"string\">&quot;casual&quot;</span>)))</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        mongoTemplate.insertAll(items);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testQueries</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        BasicTests2.<span class=\"type\">QueryExecutor</span> <span class=\"variable\">queryExecutor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BasicTests2</span>.QueryExecutor(mongoTemplate);</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeLessThan25&quot;</span>, queryExecutor.findAgeLessThan25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeLessThanOrEqualTo25&quot;</span>, queryExecutor.findAgeLessThanOrEqualTo25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeGreaterThan25&quot;</span>, queryExecutor.findAgeGreaterThan25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeGreaterThanOrEqualTo25&quot;</span>, queryExecutor.findAgeGreaterThanOrEqualTo25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeNotEqualTo25&quot;</span>, queryExecutor.findAgeNotEqualTo25());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeInArray&quot;</span>, queryExecutor.findAgeInArray(List.of(<span class=\"number\">20</span>, <span class=\"number\">25</span>)));</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeNotInArray&quot;</span>, queryExecutor.findAgeNotInArray(List.of(<span class=\"number\">20</span>, <span class=\"number\">25</span>)));</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeOrSalary&quot;</span>, queryExecutor.findAgeOrSalary());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAgeAndSalary&quot;</span>, queryExecutor.findAgeAndSalary());</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findTagsWithColorAndSize&quot;</span>, queryExecutor.findTagsWithColorAndSize());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findTagsWithColorContainingBlue&quot;</span>, queryExecutor.findTagsWithColorContainingBlue());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findTagsWithColor&quot;</span>, queryExecutor.findTagsWithColor());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findDocumentWithTagsSizeThree&quot;</span>, queryExecutor.findDocumentWithTagsSizeThree());</span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;)</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findDocumentWithSpecificTag&quot;</span>, queryExecutor.findDocumentWithSpecificTag());</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAllElementsWithSpecificTag&quot;</span>, queryExecutor.findAllElementsWithSpecificTag());</span><br><span class=\"line\">        printResult(<span class=\"string\">&quot;findAllElementsWithSpecificTagByJson&quot;</span>, queryExecutor.findAllElementsWithSpecificTagByJson());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printResult</span><span class=\"params\">(String queryName, List&lt;Item&gt; result)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Query: &quot;</span> + queryName + <span class=\"string\">&quot; ###################################################&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Item item : result) &#123;</span><br><span class=\"line\">            System.out.println(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QueryExecutor</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MongoTemplate mongoTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">QueryExecutor</span><span class=\"params\">(MongoTemplate mongoTemplate)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mongoTemplate = mongoTemplate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄小于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeLessThan25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).lt(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄小于等于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeLessThanOrEqualTo25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).lte(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄大于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeGreaterThan25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).gt(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄大于等于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeGreaterThanOrEqualTo25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).gte(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄不等于 25 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeNotEqualTo25</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).ne(<span class=\"number\">25</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄存在并且在指定数组中的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeInArray</span><span class=\"params\">(List&lt;Integer&gt; ages)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).in(ages));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄不存在或者不在指定数组中的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeNotInArray</span><span class=\"params\">(List&lt;Integer&gt; ages)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).nin(ages));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄存在并且为 20，或者薪资大于 8000 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeOrSalary</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().orOperator(</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;age&quot;</span>).is(<span class=\"number\">20</span>),</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gt(<span class=\"number\">8000</span>)</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询年龄为 20，并且薪资大于 8000 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAgeAndSalary</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().andOperator(</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;age&quot;</span>).is(<span class=\"number\">20</span>),</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gt(<span class=\"number\">8000</span>)</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签，并且包含 tagKey 为 &quot;size&quot;，tagValue 为 &quot;XL&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findTagsWithColorAndSize</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Criteria</span> <span class=\"variable\">criteria</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().andOperator(</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(</span><br><span class=\"line\">                            Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).is(<span class=\"string\">&quot;red&quot;</span>)</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(</span><br><span class=\"line\">                            Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;size&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).is(<span class=\"string\">&quot;XL&quot;</span>)</span><br><span class=\"line\">                    )</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(criteria);</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;blue&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findTagsWithColorContainingBlue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).regex(<span class=\"string\">&quot;blue&quot;</span>)</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findTagsWithColor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags.tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询 tags 数组长度为 3 的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findDocumentWithTagsSizeThree</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).size(<span class=\"number\">3</span>));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findDocumentWithSpecificTag</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).is(<span class=\"string\">&quot;red&quot;</span>)</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">            &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        ]&#125;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAllElementsWithSpecificTag</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;tags&quot;</span>).elemMatch(</span><br><span class=\"line\">                    Criteria.where(<span class=\"string\">&quot;tagKey&quot;</span>).is(<span class=\"string\">&quot;color&quot;</span>).and(<span class=\"string\">&quot;tagValue&quot;</span>).regex(<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">            ));</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用 BasicQuery，可以使用 json 字符串，这样就可以直接使用 mongo 的查询语法</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;Item&gt; <span class=\"title function_\">findAllElementsWithSpecificTagByJson</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    &#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                                &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125;</span></span><br><span class=\"line\"><span class=\"string\">                            ]&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BasicQuery</span>(json);</span><br><span class=\"line\">            System.out.println(query); <span class=\"comment\">// 打印出生成的查询字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mongoTemplate.find(query, Item.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用的查询方法\">常用的查询方法</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>查询所有文档</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.employee.find()</span></span><br><span class=\"line\">List&lt;Employee&gt; list = mongoTemplate.findAll(Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>根据_id查询</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.employee.findOne(&#123; &quot;_id&quot;: 1 &#125;)|</span></span><br><span class=\"line\"><span class=\"type\">Employee</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> mongoTemplate.findById(<span class=\"number\">1</span>, Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>查询第一个文档</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.employee.findOne(&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"type\">Employee</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> mongoTemplate.findOne(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(), Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>条件查询，排序及分页</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.employee.find(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;$or&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">              &#123; &quot;username&quot;: &quot;张三&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">              &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 5000 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">          ]</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;).sort(&#123; &quot;salary&quot;: -1 &#125;).skip(2).limit(4)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Criteria</span>().orOperator(Criteria.where(<span class=\"string\">&quot;name&quot;</span>).is(<span class=\"string\">&quot;张三&quot;</span>), Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gt(<span class=\"number\">5000</span>)););</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你不熟悉 Criteria，但是熟悉 mongo 的查询语法，可以使用 BasicQuery</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  String json = &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">          &#123;</span></span><br><span class=\"line\"><span class=\"comment\">              &quot;$or&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">                  &#123; &quot;username&quot;: &quot;张三&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">                  &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 5000 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">              ]</span></span><br><span class=\"line\"><span class=\"comment\">          &#125;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;&quot;&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">  Query query = new BasicQuery(json);</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//skip limit 分页  skip用于指定跳过记录数，limit则用于限定返回结果数量。</span></span><br><span class=\"line\">query.with(Sort.by(Sort.Order.desc(<span class=\"string\">&quot;salary&quot;</span>)))</span><br><span class=\"line\">        .skip(<span class=\"number\">2</span>)  <span class=\"comment\">//指定跳过记录数</span></span><br><span class=\"line\">        .limit(<span class=\"number\">4</span>);  <span class=\"comment\">//每页显示记录数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询结果</span></span><br><span class=\"line\">List&lt;Employee&gt; employees = mongoTemplate.find(</span><br><span class=\"line\">        query, Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>只返回部分字段</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.employee.find(</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 18 &#125; &#125;,  // 筛选条件，年龄大于等于18岁的文档</span></span><br><span class=\"line\"><span class=\"comment\">  &#123; &quot;name&quot;: 1, &quot;age&quot;: 1 &#125;      // 指定返回的字段，只包含&quot;name&quot;和&quot;age&quot;，其中1表示包含该字段，0表示不包含</span></span><br><span class=\"line\"><span class=\"comment\">)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>();</span><br><span class=\"line\">query.addCriteria(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).gte(<span class=\"number\">18</span>)); <span class=\"comment\">// 筛选条件，年龄大于等于18岁的文档</span></span><br><span class=\"line\">query.fields().include(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;age&quot;</span>).exclude(<span class=\"string\">&quot;id&quot;</span>);<span class=\"comment\">// 指定返回的字段，只包含&quot;name&quot;和&quot;age&quot;，要去除id，否则默认会返回id</span></span><br><span class=\"line\">List&lt;Employee&gt; results = mongoTemplate.find(query, Employee.class);</span><br><span class=\"line\"><span class=\"comment\">// Employee(id=null, name=张三, age=21, salary=null, entryDay=null)</span></span><br><span class=\"line\">results.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>去重</p>\n</li>\n</ul>\n<blockquote>\n<p>distinct 方法只能直接获取唯一值，并不能在查询过程中进行其他的聚合操作，使用场景非常受限，推荐使用聚合方式进行查询</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//语法：db.collectionName.distinct(&quot;fieldName&quot;, &#123; /* 过滤条件 */ &#125;)，这将返回指定字段 fieldName 的唯一值数组。</span></span><br><span class=\"line\"><span class=\"comment\">// 示例：db.collection.distinct(&quot;name&quot;,&#123;age:&#123;$gte:25&#125;&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式1</span></span><br><span class=\"line\">DistinctIterable&lt;String&gt; distinctIterable = mongoTemplate.getCollection(<span class=\"string\">&quot;collection&quot;</span>)</span><br><span class=\"line\">        .distinct(<span class=\"string\">&quot;name&quot;</span>, BsonDocument.parse(<span class=\"string\">&quot;&#123;age:&#123;$gte:25&#125;&#125;&quot;</span>), String.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式2</span></span><br><span class=\"line\"><span class=\"comment\">// DistinctIterable&lt;String&gt; distinctIterable = mongoTemplate.getCollection(&quot;collection&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//        .distinct(&quot;name&quot;, new Document(&quot;age&quot;, new Document(&quot;$gte&quot;, 25)), String.class);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将DistinctIterable转换为List</span></span><br><span class=\"line\">List&lt;String&gt; distinctNames = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">distinctIterable.iterator().forEachRemaining(distinctNames::add);</span><br><span class=\"line\"><span class=\"comment\">// 打印输出</span></span><br><span class=\"line\">distinctNames.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 聚合方式，聚合方式的详细说明会在下一篇博客中介绍</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.collection.aggregate([</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          $match: &#123; age: &#123; $gte: 25 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          $group: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">              _id: &quot;$name&quot;</span></span><br><span class=\"line\"><span class=\"comment\">          &#125;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  ])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">              Aggregation.match(Criteria.where(<span class=\"string\">&quot;age&quot;</span>).gte(<span class=\"number\">25</span>)),</span><br><span class=\"line\">              Aggregation.group(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\"></span><br><span class=\"line\">      AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, <span class=\"string\">&quot;collection&quot;</span>, Document.class);</span><br><span class=\"line\">      List&lt;String&gt; distinctNames = results.getMappedResults().stream()</span><br><span class=\"line\">              .map(document -&gt; document.getString(<span class=\"string\">&quot;_id&quot;</span>))</span><br><span class=\"line\">              .toList();</span><br><span class=\"line\"></span><br><span class=\"line\">      distinctNames.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SpringBoot对Mongo的查询，其实就是如何通过Criteria来构建一个Query，所以我们的目标就是要熟练掌握Criteria的语法。当然，如果你熟悉Mongo的查询语法，也可以直接使用BasicQuery来实现Mongo的查询。</p>\n</blockquote>\n<h2 id=\"插入\">插入</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Mongo语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 插入单个文档</span></span><br><span class=\"line\">db.collection.insertOne(</span><br><span class=\"line\">   &lt;document&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      writeConcern: &lt;document&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">db.demo.insertOne(</span><br><span class=\"line\">   &#123; name: <span class=\"string\">&quot;张三&quot;</span>, age: 35&#125;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      writeConcern: &#123; w: <span class=\"string\">&quot;majority&quot;</span>, j: <span class=\"literal\">true</span>, wtimeout: 5000 &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入多个文档</span></span><br><span class=\"line\">db.collection.insertMany(</span><br><span class=\"line\">   [ &lt;document 1&gt; , &lt;document 2&gt;, ... ],</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      writeConcern: &lt;document&gt;,</span><br><span class=\"line\">      ordered: &lt;boolean&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>writeConcern 是 MongoDB 中用来控制写入确认的选项，可选。以下是 writeConcern 参数的一些常见选项：</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>w：指定写入确认级别。如果指定为数字，则表示要等待写入操作完成的节点数。如果指定为 majority，则表示等待大多数节点完成写入操作。默认为 1，表示等待写入操作完成的节点数为 1。</p>\n</li>\n<li class=\"lvl-4\">\n<p>j：表示写入操作是否要求持久化到磁盘。如果设置为 true，则表示写入操作必须持久化到磁盘后才返回成功。如果设置为 false，则表示写入操作可能在数据被持久化到磁盘之前返回成功。默认为 false。</p>\n</li>\n<li class=\"lvl-4\">\n<p>wtimeout：表示等待写入操作完成的超时时间，单位为毫秒。如果超过指定的时间仍然没有返回确认信息，则返回错误。默认为 0，表示不设置超时时间。</p>\n</li>\n</ul>\n<blockquote>\n<p>ordered：指定是否按顺序写入，默认 true，按顺序写入。</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>插入单个文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.employee.insertOne(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">      &quot;_id&quot;: 1,</span></span><br><span class=\"line\"><span class=\"comment\">      &quot;username&quot;: &quot;小明&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">      &quot;age&quot;: 30,</span></span><br><span class=\"line\"><span class=\"comment\">      &quot;salary&quot;: 10000.00,</span></span><br><span class=\"line\"><span class=\"comment\">      &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;小明&quot;</span>, <span class=\"number\">30</span>, <span class=\"number\">10000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">mongoTemplate.insert(employee);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>插入多个文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.employee.insertMany([</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;_id&quot;: 2,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;username&quot;: &quot;张三&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;age&quot;: 21,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;salary&quot;: 5000.00,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;_id&quot;: 3,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;username&quot;: &quot;李四&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;age&quot;: 26,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;salary&quot;: 8000.00,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;_id&quot;: 4,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;username&quot;: &quot;王五&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;age&quot;: 22,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;salary&quot;: 8000.00,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;_id&quot;: 5,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;username&quot;: &quot;张龙&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;age&quot;: 28,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;salary&quot;: 6000.00,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;_id&quot;: 6,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;username&quot;: &quot;赵虎&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;age&quot;: 24,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;salary&quot;: 7000.00,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;_id&quot;: 7,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;username&quot;: &quot;赵六&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;age&quot;: 28,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;salary&quot;: 12000.00,</span></span><br><span class=\"line\"><span class=\"comment\">          &quot;entryDay&quot;: new Date()</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  ])</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">List&lt;Employee&gt; list = Arrays.asList(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">21</span>, <span class=\"number\">5000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">3</span>, <span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">26</span>, <span class=\"number\">8000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">4</span>, <span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">22</span>, <span class=\"number\">8000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">5</span>, <span class=\"string\">&quot;张龙&quot;</span>, <span class=\"number\">28</span>, <span class=\"number\">6000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">6</span>, <span class=\"string\">&quot;赵虎&quot;</span>, <span class=\"number\">24</span>, <span class=\"number\">7000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">7</span>, <span class=\"string\">&quot;赵六&quot;</span>, <span class=\"number\">28</span>, <span class=\"number\">12000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()));</span><br><span class=\"line\"><span class=\"comment\">//插入多条数据</span></span><br><span class=\"line\">mongoTemplate.insert(list, Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>id存在时更新，不存在时插入</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.employee.updateOne(</span></span><br><span class=\"line\"><span class=\"comment\">   &#123; &quot;_id&quot;: 1 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">   &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      $set: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         &quot;name&quot;: &quot;小明&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">         &quot;age&quot;: 30,</span></span><br><span class=\"line\"><span class=\"comment\">         &quot;salary&quot;: 10000.00,</span></span><br><span class=\"line\"><span class=\"comment\">         &quot;entryDay&quot;: ISODate(&quot;2024-03-05T00:00:00Z&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">   &#123; upsert: true &#125;</span></span><br><span class=\"line\"><span class=\"comment\">)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Employee</span> <span class=\"variable\">employee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;小明&quot;</span>, <span class=\"number\">30</span>, <span class=\"number\">10000.00</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\"><span class=\"comment\">//save方法会根据对象的id是否存在来判断是更新还是插入</span></span><br><span class=\"line\">mongoTemplate.save(employee);</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新\">更新</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Mongo语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新单个或多个文档</span></span><br><span class=\"line\">db.collection.update[One|Many](</span><br><span class=\"line\">   &lt;filter&gt;,</span><br><span class=\"line\">   &lt;update&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     upsert: &lt;boolean&gt;,</span><br><span class=\"line\">     writeConcern: &lt;document&gt;,</span><br><span class=\"line\">     collation: &lt;document&gt;,</span><br><span class=\"line\">     arrayFilters: [ &lt;filterdocument1&gt;, ... ],</span><br><span class=\"line\">     hint:  &lt;document|string&gt;        // Available starting <span class=\"keyword\">in</span> MongoDB 4.2.1</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># findAndModify,只能更新单个文档</span></span><br><span class=\"line\">db.collection.findAndModify(&#123;</span><br><span class=\"line\">    query:&lt;filter&gt;,</span><br><span class=\"line\">    update:&lt;update&gt;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 示例，该操作会返回符合查询条件的文档数据，并完成对文档的修改</span></span><br><span class=\"line\"><span class=\"comment\"># 将某个book文档的收藏数（favCount）加1</span></span><br><span class=\"line\">db.books.findAndModify(&#123;</span><br><span class=\"line\">    query:&#123;_id:ObjectId(<span class=\"string\">&quot;6457a39c817728350ec83b9d&quot;</span>)&#125;,</span><br><span class=\"line\">    update:&#123;<span class=\"variable\">$inc</span>:&#123;favCount:1&#125;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 默认情况下，findAndModify会返回修改前的“旧”数据。如果希望返回修改后的数据，则可以指定new选项</span></span><br><span class=\"line\">db.books.findAndModify(&#123;</span><br><span class=\"line\">    query:&#123;_id:ObjectId(<span class=\"string\">&quot;6457a39c817728350ec83b9d&quot;</span>)&#125;,</span><br><span class=\"line\">    update:&#123;<span class=\"variable\">$inc</span>:&#123;favCount:1&#125;&#125;,</span><br><span class=\"line\">    new: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;filter&gt;</td>\n<td>一个筛选器对象，用于指定要更新的文档。</td>\n</tr>\n<tr>\n<td>&lt;update&gt;</td>\n<td>一个更新操作对象，用于指定如何更新文档。可以使用一些操作符，例如$set、$inc、$unset等，以更新文档中的特定字段。</td>\n</tr>\n<tr>\n<td>upsert</td>\n<td>一个布尔值，用于指定如果找不到与筛选器匹配的文档时是否应插入一个新文档。如果upsert为true，则会插入一个新文档。默认值为false。</td>\n</tr>\n<tr>\n<td>writeConcern</td>\n<td>一个文档，用于指定写入操作的安全级别。可以指定写入操作需要到达的节点数或等待写入操作的时间。</td>\n</tr>\n<tr>\n<td>collation</td>\n<td>一个文档，用于指定用于查询的排序规则。例如，可以通过指定locale属性来指定语言环境，从而实现基于区域设置的排序。</td>\n</tr>\n<tr>\n<td>arrayFilters</td>\n<td>一个数组，用于指定要更新的数组元素。数组元素是通过使用更新操作符$[]和$来指定的。</td>\n</tr>\n<tr>\n<td>hint</td>\n<td>一个文档或字符串，用于指定查询使用的索引。该参数仅在MongoDB 4.2.1及以上版本中可用。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>更新操作符</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$set</td>\n<td>{ $set: { field: value } }</td>\n<td>指定一个键并更新值，若键不存在则创建。</td>\n</tr>\n<tr>\n<td>$unset</td>\n<td>{ $unset : { field : 1 } }</td>\n<td>删除一个键。</td>\n</tr>\n<tr>\n<td>$inc</td>\n<td>{ $inc : { field : value } }</td>\n<td>对数值类型进行增减。</td>\n</tr>\n<tr>\n<td>$rename</td>\n<td>{ $rename : { old_field_name : new_field_name } }</td>\n<td>修改字段名称。</td>\n</tr>\n<tr>\n<td>$push</td>\n<td>{ $push : { field : value } }</td>\n<td>将数值追加到数组中，若数组不存在则会进行初始化。</td>\n</tr>\n<tr>\n<td>$pushAll</td>\n<td>{ $pushAll : { field : value_array } }</td>\n<td>追加多个值到一个数组字段内。</td>\n</tr>\n<tr>\n<td>$pull</td>\n<td>{ $pull : { field : _value } }</td>\n<td>从数组中删除指定的元素。</td>\n</tr>\n<tr>\n<td>$addToSet</td>\n<td>{ $addToSet : { field : value } }</td>\n<td>添加元素到数组中，具有排重功能。</td>\n</tr>\n<tr>\n<td>$pop</td>\n<td>{ $pop : { field : 1 } }</td>\n<td>删除数组的第一个或最后一个元素。</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>只更新满足条件的第一条记录</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.employee.updateOne(</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 8000 &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;$set&quot;: &#123; &quot;salary&quot;: 13000 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  )</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gte(<span class=\"number\">8000</span>));</span><br><span class=\"line\"><span class=\"type\">Update</span> <span class=\"variable\">update</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Update</span>();</span><br><span class=\"line\"><span class=\"comment\">//设置更新属性</span></span><br><span class=\"line\">update.set(<span class=\"string\">&quot;salary&quot;</span>, <span class=\"number\">13000</span>);</span><br><span class=\"line\"><span class=\"type\">UpdateResult</span> <span class=\"variable\">updateResult</span> <span class=\"operator\">=</span> mongoTemplate.updateFirst(query, update, Employee.class);</span><br><span class=\"line\"><span class=\"comment\">//返回修改的记录数</span></span><br><span class=\"line\">System.out.println(updateResult.getModifiedCount());</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>更新所有满足条件的记录</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.employee.updateMany(</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 8000 &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;$set&quot;: &#123; &quot;salary&quot;: 13000 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gte(<span class=\"number\">8000</span>));</span><br><span class=\"line\"><span class=\"type\">Update</span> <span class=\"variable\">update</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Update</span>();</span><br><span class=\"line\"><span class=\"comment\">//设置更新属性</span></span><br><span class=\"line\">update.set(<span class=\"string\">&quot;salary&quot;</span>, <span class=\"number\">13000</span>);</span><br><span class=\"line\"><span class=\"type\">UpdateResult</span> <span class=\"variable\">updateResult</span> <span class=\"operator\">=</span> mongoTemplate.updateMulti(query, update, Employee.class);</span><br><span class=\"line\"><span class=\"comment\">//返回修改的记录数</span></span><br><span class=\"line\">System.out.println(updateResult.getModifiedCount());</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>没有符合条件的记录则插入数据</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  db.employee.updateOne(</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 8000 &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;$set&quot;: &#123; &quot;salary&quot;: 13000 &#125;, &quot;$setOnInsert&quot;: &#123; &quot;id&quot;: 11 &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; &quot;upsert&quot;: true &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gte(<span class=\"number\">8000</span>));</span><br><span class=\"line\"><span class=\"type\">Update</span> <span class=\"variable\">update</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Update</span>();</span><br><span class=\"line\"><span class=\"comment\">//设置更新属性</span></span><br><span class=\"line\">update.set(<span class=\"string\">&quot;salary&quot;</span>, <span class=\"number\">13000</span>);</span><br><span class=\"line\">update.setOnInsert(<span class=\"string\">&quot;id&quot;</span>,<span class=\"number\">11</span>);  <span class=\"comment\">//指定_id，只有没有匹配到时才插入</span></span><br><span class=\"line\"><span class=\"type\">UpdateResult</span> <span class=\"variable\">updateResult</span> <span class=\"operator\">=</span> mongoTemplate.upsert(query, update, Employee.class);</span><br><span class=\"line\"><span class=\"comment\">//返回修改的记录数</span></span><br><span class=\"line\">System.out.println(updateResult.getModifiedCount());</span><br></pre></td></tr></table></figure>\n<h2 id=\"替换\">替换</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Mongo语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.replaceOne(</span><br><span class=\"line\">   &lt;filter&gt;,</span><br><span class=\"line\">   &lt;replacement&gt;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     upsert: &lt;boolean&gt;,</span><br><span class=\"line\">     writeConcern: &lt;document&gt;,</span><br><span class=\"line\">     collation: &lt;document&gt;,</span><br><span class=\"line\">     hint: &lt;document|string&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>replaceOne</code>操作会首先使用指定的筛选条件来查找匹配的文档，然后用提供的新文档完全替换掉原始文档，也就是说<code>replaceOne</code>是整体替换，而不是修改文档中的某些字段。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;filter&gt;</td>\n<td>一个筛选器对象，用于指定要替换的文档。只有与筛选器对象匹配的第一个文档才会被替换。</td>\n</tr>\n<tr>\n<td>&lt;replacement&gt;</td>\n<td>一个替换文档对象，用于指定用于替换原始文档的新文档。替换文档必须包含所有要在原始文档中修改或替换的字段。</td>\n</tr>\n<tr>\n<td>upsert</td>\n<td>一个布尔值，表示如果找不到与筛选器匹配的文档时是否应插入一个新文档。如果设置为true，则会插入一个新文档。默认为false。</td>\n</tr>\n<tr>\n<td>writeConcern</td>\n<td>一个文档，用于指定写入操作的安全级别。可以指定写入操作需要到达的节点数或等待写入操作的时间。</td>\n</tr>\n<tr>\n<td>collation</td>\n<td>一个文档，用于指定用于查询的排序规则。例如，可以通过指定locale属性来指定语言环境，从而实现基于区域设置的排序。</td>\n</tr>\n<tr>\n<td>hint</td>\n<td>一个文档或字符串，用于指定查询使用的索引。该参数仅在MongoDB 4.2.1及以上版本中可用</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>示例</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">db.collection.replaceOne(</span></span><br><span class=\"line\"><span class=\"comment\">   &#123; &quot;name&quot;: &quot;John&quot; &#125;,  // 筛选条件，匹配name为John的文档</span></span><br><span class=\"line\"><span class=\"comment\">   &#123;                     // 替换文档，用于替换匹配到的文档</span></span><br><span class=\"line\"><span class=\"comment\">     &quot;name&quot;: &quot;Peter&quot;,    // 新的name字段值为Peter</span></span><br><span class=\"line\"><span class=\"comment\">     &quot;age&quot;: 30           // 新增age字段，值为30</span></span><br><span class=\"line\"><span class=\"comment\">   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;name&quot;</span>).is(<span class=\"string\">&quot;John&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">Employee</span> <span class=\"variable\">replacement</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">replacement.setName(<span class=\"string\">&quot;Peter&quot;</span>);</span><br><span class=\"line\">replacement.setAge(<span class=\"number\">30</span>);</span><br><span class=\"line\">mongoTemplate.findAndReplace(query, replacement);</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除\">删除</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Mongo语法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按条件删除多个文档</span></span><br><span class=\"line\">db.collection.deleteMany(&lt;filter&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按条件删除单个文档</span></span><br><span class=\"line\">db.collection.deleteOne(&lt;filter&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 先查询后删除，返回查询条件对应的文档，sort是可选项</span></span><br><span class=\"line\">db.collection.findOneAndDelete(&lt;filter&gt;,&#123;<span class=\"built_in\">sort</span>:&#123;field:1&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除所有文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.employee.deleteMany(&#123;&#125;)</span></span><br><span class=\"line\">mongoTemplate.remove(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(),Employee.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// db.employee.drop()</span></span><br><span class=\"line\"><span class=\"comment\">// 清空数据也可以使用drop方法，但是这样会删除索引</span></span><br><span class=\"line\">mongoTemplate.dropCollection(Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>按条件删除文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.employee.deleteMany(&#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 10000 &#125; &#125;)</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gte(<span class=\"number\">10000</span>));</span><br><span class=\"line\">mongoTemplate.remove(query, Employee.class);</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除查询到的第一个文档</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.employee.deleteOne(&#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 10000 &#125; &#125;)</span></span><br><span class=\"line\"><span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(Criteria.where(<span class=\"string\">&quot;salary&quot;</span>).gte(<span class=\"number\">10000</span>));</span><br><span class=\"line\">query.limit(<span class=\"number\">1</span>);</span><br><span class=\"line\">mongoTemplate.remove(query, Employee.class);</span><br></pre></td></tr></table></figure>\n<h2 id=\"批量操作\">批量操作</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>bulkwrite()方法提供了执行批量插入、更新和删除操作的能力。</p>\n</li>\n<li class=\"lvl-2\">\n<p>bulkWrite()支持以下写操作:</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">insertOne</li>\n<li class=\"lvl-4\">updateOne</li>\n<li class=\"lvl-4\">updateMany</li>\n<li class=\"lvl-4\">replaceOne</li>\n<li class=\"lvl-4\">deleteOne</li>\n<li class=\"lvl-4\">deleteMany</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>示例</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.annotation.Id;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.BulkOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.mongodb.core.query.Update;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BulkWriteTests</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MongoTemplate mongoTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    db.pizzas.insertMany( [</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; _id: 0, type: &quot;pepperoni&quot;, size: &quot;small&quot;, price: 4 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; _id: 1, type: &quot;cheese&quot;, size: &quot;medium&quot;, price: 7 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; _id: 2, type: &quot;vegan&quot;, size: &quot;large&quot;, price: 8 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    ] )</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">insertManyPizzas</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mongoTemplate.insertAll(Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;pepperoni&quot;</span>, <span class=\"string\">&quot;small&quot;</span>, <span class=\"number\">4</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;cheese&quot;</span>, <span class=\"string\">&quot;medium&quot;</span>, <span class=\"number\">7</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;vegan&quot;</span>, <span class=\"string\">&quot;large&quot;</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    db.pizzas.bulkWrite( [</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; insertOne: &#123; document: &#123; _id: 3, type: &quot;beef&quot;, size: &quot;medium&quot;, price: 6 &#125; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; insertOne: &#123; document: &#123; _id: 4, type: &quot;sausage&quot;, size: &quot;large&quot;, price: 10 &#125; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; updateOne: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          filter: &#123; type: &quot;cheese&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">          update: &#123; $set: &#123; price: 8 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; deleteOne: &#123; filter: &#123; type: &quot;pepperoni&quot;&#125; &#125; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">      &#123; replaceOne: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          filter: &#123; type: &quot;vegan&quot; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">          replacement: &#123; type: &quot;tofu&quot;, size: &quot;small&quot;, price: 4 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    ] )</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">performBulkWrite</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BulkOperations</span> <span class=\"variable\">bulkOperations</span> <span class=\"operator\">=</span> mongoTemplate.bulkOps(BulkOperations.BulkMode.ORDERED, Pizza.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        bulkOperations.insert(Arrays.asList(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"number\">3</span>, <span class=\"string\">&quot;beef&quot;</span>, <span class=\"string\">&quot;medium&quot;</span>, <span class=\"number\">6</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"number\">4</span>, <span class=\"string\">&quot;sausage&quot;</span>, <span class=\"string\">&quot;large&quot;</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        ));</span><br><span class=\"line\"></span><br><span class=\"line\">        bulkOperations.updateOne(</span><br><span class=\"line\">                Query.query(Criteria.where(<span class=\"string\">&quot;type&quot;</span>).is(<span class=\"string\">&quot;cheese&quot;</span>)),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Update</span>().set(<span class=\"string\">&quot;price&quot;</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        bulkOperations.remove(</span><br><span class=\"line\">                Query.query(Criteria.where(<span class=\"string\">&quot;type&quot;</span>).is(<span class=\"string\">&quot;pepperoni&quot;</span>)).limit(<span class=\"number\">1</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        bulkOperations.replaceOne(</span><br><span class=\"line\">                Query.query(Criteria.where(<span class=\"string\">&quot;type&quot;</span>).is(<span class=\"string\">&quot;vegan&quot;</span>)),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"literal\">null</span>, <span class=\"string\">&quot;tofu&quot;</span>, <span class=\"string\">&quot;small&quot;</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        bulkOperations.execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\">    <span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\">    <span class=\"meta\">@Document(&quot;pizza&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pizza</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Id</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Integer _id;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String size;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Integer price;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍如何使用SpringBoot实现MongoDB7.0的单集合的CURD操作 SpringBoot版本3.2.3，MongoDB版本7.0.6 MongoDB CRUD Operations SQL to MongoDB Mapping Chart MongoDB7.0--SpringBoot聚合操作 spring-boot 与 MongoDB 的版本对应关系 spring-data-mongodb与MongoDB版本对应关系可以参看官方文档 spring-boot-starter-data-mongodb 与 spring-data-mongodb 版本对应关系 spring-boot-starter-data-mongodb 版本 spring-data-mongodb 版本 MongoDB Server 版本 Java Driver Version 3.2.x 4.2.x 6.0.x,7.0.x 4.11.x 3.1.x 4.1.x 6.0.x,7.0.x 4.9.x 3.0.x 4.0.x 6.0.x 4.7.x 2.7.x 3.4.x 5.0.x 4.6.x 2.6.x 3.3.x 5.0.x 4.4.x 2.5.x 3.2.x 4.4.x 4.1.x 2.4.x 3.1.x 4.4.x 4.1.x 2.3.x 3.0.x 4.4.x 4.0.x 2.2.x 2.2.x 4.2.x 3.11.x 2.1.x 2.1.x 4.0.x 3.8.x 2.0.x 2.0.x 3.4.x 3.5.x 1.10.x 1.10.x 2.4.x 2.10.x,2.11.x Mongo的Java驱动，在3.7.x及以后的版本叫做mongodb-driver-sync，以前的版本叫做mongo-java-driver MongoDB 与 Java Driver 兼容性 SpringBoot整合MongoDB 引入依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;&lt;/dependency&gt; 配置yml 1234567891011spring: data: mongodb: uri: mongodb://root:password@127.0.0.1:27017/mytest?authSource=admin #uri等同于下面的配置 #database: mytest # 数据库名 #host: 127.0.0.1 #port: 27017 #username: root #password: password #authentication-database: admin 配置类:去掉_class属性 12345678910111213141516171819202122@Configurationpublic class MongoConfig &#123; /** * 定制TypeMapper去掉_class属性 */ @Bean MappingMongoConverter mappingMongoConverter( MongoDatabaseFactory mongoDatabaseFactory, MongoMappingContext context, MongoCustomConversions conversions) &#123; DbRefResolver dbRefResolver = new DefaultDbRefResolver(mongoDatabaseFactory); MappingMongoConverter mappingMongoConverter = new MappingMongoConverter(dbRefResolver, context); mappingMongoConverter.setCustomConversions(conversions); //构造DefaultMongoTypeMapper，将typeKey设置为空值 mappingMongoConverter.setTypeMapper(new DefaultMongoTypeMapper(null)); return mappingMongoConverter; &#125;&#125; 查询 Mongo语法 12345678910111213141516171819# 查询集合中的若干文档db.collection.find(query, projection)# 查询集合中的第一个文档db.collection.findOne(query, projection)# 如果你需要以易读的方式来读取数据，可以使用pretty()方法db.collection.find().pretty()# 排序，1 为升序排列，而 -1 是用于降序排列db.collection.find(query, projection).sort(&#123;field:-1&#125;)# 分页# .skip(16) 表示跳过前面 16 条记录，即前两页的所有记录.# .limit(8) 表示返回 8 条记录，即第三页的所有记录。db.collection.find().skip(16).limit(8)# 查询记录数db.collection.countDocuments() query ：可选，使用查询操作符指定查询条件 projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。投影时，_id为1的时候，其他字段必须是1；_id是0的时候，其他字段可以是0；如果没有_id字段约束，多个其他字段必须同为0或同为1。 查询操作符 操作符 解释 示例 示例解释 $lt 小于 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;) 查询年龄小于 25 的文档 $lte 小于等于 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;) 查询年龄小于等于 25 的文档 $gt 大于 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;) 查询年龄大于 25 的文档 $gte 大于等于 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;) 查询年龄大于等于 25 的文档 $ne 不等于 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;) 查询年龄不等于 25 的文档 $in 在指定数组中 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;) 查询年龄存在并且在指定数组中的文档 $nin 不在指定数组中 db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;) 查询年龄不存在或者不在指定数组中的文档 $or 匹配两个或多个条件中的一个 db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) 查询年龄为 20 或者薪资大于 8000 的文档 $and 匹配全部条件 db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) 查询年龄为 20 并且薪资大于 8000 的文档 $all 匹配数组中所有元素满足指定条件 db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;, &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125; ] &#125; &#125;) 查询包含 tagKey 为 “color”，tagValue 为 “red” 的标签，并且包含 tagKey 为 “size”，tagValue 为 “XL” 的标签的文档 $elemMatch 匹配数组中至少一个元素满足指定条件 db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;blue&quot; &#125; &#125; &#125;) 查询包含 tagKey 为 “color”，tagValue 包含 “blue” 的标签的文档 $text 全文搜索 db.collection.find(&#123; &quot;$text&quot;: &#123; &quot;$search&quot;: &quot;searchTerm&quot; &#125; &#125;) 进行全文搜索，查找包含 “searchTerm” 的文档 $type 指定字段类型 db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$type&quot;: &quot;string&quot; &#125; &#125;) 查询指定字段类型为字符串的文档 $size 数组长度 db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$size&quot;: sizeValue &#125; &#125;) 查询指定字段数组长度为 sizeValue 的文档 $exists 字段存在 db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$exists&quot;: true &#125; &#125;) 查询指定字段存在的文档 $mod 取模 db.collection.find(&#123; &quot;field&quot;: &#123; &quot;$mod&quot;: [divisor, remainder] &#125; &#125;) 查询指定字段取模后符合给定除数和余数的文档 SpringBoot代码示例 操作org.bson.Document对象，无需创建实体映射对象，但操作时需要指定集合名称package com.hanqf;import org.bson.Document;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.data.mongodb.core.query.BasicQuery;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import java.util.Arrays;import java.util.List;import java.util.Map;@SpringBootTestclass BasicTests &#123; @Autowired private MongoTemplate mongoTemplate; /* // 初始化数据 db.collection.insertMany([ &#123; &quot;name&quot;: &quot;item1&quot;, &quot;age&quot;: 20, &quot;salary&quot;: 5000, &quot;colors&quot;: [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;], &quot;sizes&quot;: [&quot;S&quot;, &quot;M&quot;, &quot;L&quot;], &quot;tags&quot;: [ &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;M&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125; ] &#125;, &#123; &quot;name&quot;: &quot;item2&quot;, &quot;age&quot;: 30, &quot;salary&quot;: 8000, &quot;colors&quot;: [&quot;green&quot;, &quot;yellow&quot;], &quot;sizes&quot;: [&quot;M&quot;, &quot;L&quot;, &quot;XL&quot;], &quot;tags&quot;: [ &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;blue&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;formal&quot; &#125; ] &#125;, &#123; &quot;name&quot;: &quot;item3&quot;, &quot;age&quot;: 25, &quot;salary&quot;: 10000, &quot;colors&quot;: [&quot;red&quot;, &quot;green&quot;], &quot;sizes&quot;: [&quot;L&quot;, &quot;XL&quot;], &quot;tags&quot;: [ &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;green&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;L&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125; ] &#125; ]); */ @Test void initializeData() &#123; List&lt;Document&gt; documents = Arrays.asList( // 文档1 new Document().append(&quot;name&quot;, &quot;item1&quot;) .append(&quot;age&quot;, 20) .append(&quot;salary&quot;, 5000) .append(&quot;colors&quot;, Arrays.asList(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)) .append(&quot;sizes&quot;, Arrays.asList(&quot;S&quot;, &quot;M&quot;, &quot;L&quot;)) .append(&quot;tags&quot;, Arrays.asList( new Document().append(&quot;tagKey&quot;, &quot;color&quot;) .append(&quot;tagValue&quot;, &quot;red&quot;), new Document().append(&quot;tagKey&quot;, &quot;size&quot;) .append(&quot;tagValue&quot;, &quot;M&quot;), new Document().append(&quot;tagKey&quot;, &quot;style&quot;) .append(&quot;tagValue&quot;, &quot;casual&quot;) )), // 文档2 new Document().append(&quot;name&quot;, &quot;item2&quot;) .append(&quot;age&quot;, 30) .append(&quot;salary&quot;, 8000) .append(&quot;colors&quot;, Arrays.asList(&quot;green&quot;, &quot;yellow&quot;)) .append(&quot;sizes&quot;, Arrays.asList(&quot;M&quot;, &quot;L&quot;, &quot;XL&quot;)) .append(&quot;tags&quot;, Arrays.asList( new Document().append(&quot;tagKey&quot;, &quot;color&quot;) .append(&quot;tagValue&quot;, &quot;blue&quot;), new Document().append(&quot;tagKey&quot;, &quot;size&quot;) .append(&quot;tagValue&quot;, &quot;XL&quot;), new Document().append(&quot;tagKey&quot;, &quot;style&quot;) .append(&quot;tagValue&quot;, &quot;formal&quot;) )), // 文档3 new Document().append(&quot;name&quot;, &quot;item3&quot;) .append(&quot;age&quot;, 25) .append(&quot;salary&quot;, 10000) .append(&quot;colors&quot;, Arrays.asList(&quot;red&quot;, &quot;green&quot;)) .append(&quot;sizes&quot;, Arrays.asList(&quot;L&quot;, &quot;XL&quot;)) .append(&quot;tags&quot;, Arrays.asList( new Document().append(&quot;tagKey&quot;, &quot;color&quot;) .append(&quot;tagValue&quot;, &quot;green&quot;), new Document().append(&quot;tagKey&quot;, &quot;size&quot;) .append(&quot;tagValue&quot;, &quot;L&quot;), new Document().append(&quot;tagKey&quot;, &quot;style&quot;) .append(&quot;tagValue&quot;, &quot;casual&quot;) )) ); // 这里要指定集合名称 mongoTemplate.insert(documents, &quot;collection&quot;); &#125; /** * 也可以通过json来构建Document对象 */ @Test void initializeData2() &#123; List&lt;String&gt; jsonList = new ArrayList&lt;&gt;(); jsonList.add(&quot;&quot;&quot; &#123; &quot;name&quot;: &quot;item1&quot;, &quot;age&quot;: 20, &quot;salary&quot;: 5000, &quot;colors&quot;: [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;], &quot;sizes&quot;: [&quot;S&quot;, &quot;M&quot;, &quot;L&quot;], &quot;tags&quot;: [ &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;M&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125; ] &#125; &quot;&quot;&quot;); jsonList.add(&quot;&quot;&quot; &#123; &quot;name&quot;: &quot;item2&quot;, &quot;age&quot;: 30, &quot;salary&quot;: 8000, &quot;colors&quot;: [&quot;green&quot;, &quot;yellow&quot;], &quot;sizes&quot;: [&quot;M&quot;, &quot;L&quot;, &quot;XL&quot;], &quot;tags&quot;: [ &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;blue&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;formal&quot; &#125; ] &#125; &quot;&quot;&quot;); jsonList.add(&quot;&quot;&quot; &#123; &quot;name&quot;: &quot;item3&quot;, &quot;age&quot;: 25, &quot;salary&quot;: 10000, &quot;colors&quot;: [&quot;red&quot;, &quot;green&quot;], &quot;sizes&quot;: [&quot;L&quot;, &quot;XL&quot;], &quot;tags&quot;: [ &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;green&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;L&quot; &#125;, &#123; &quot;tagKey&quot;: &quot;style&quot;, &quot;tagValue&quot;: &quot;casual&quot; &#125; ] &#125; &quot;&quot;&quot;); List&lt;Document&gt; documents = new ArrayList&lt;&gt;(); for (String json : jsonList) &#123; // 通过Document.parse()方法将json字符串转换为Document对象 documents.add(Document.parse(json)); &#125; mongoTemplate.insert(documents, &quot;collection&quot;); &#125; @Test void testQueries() &#123; QueryExecutor queryExecutor = new QueryExecutor(mongoTemplate); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;) printResult(&quot;findAgeLessThan25&quot;, queryExecutor.findAgeLessThan25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;) printResult(&quot;findAgeLessThanOrEqualTo25&quot;, queryExecutor.findAgeLessThanOrEqualTo25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;) printResult(&quot;findAgeGreaterThan25&quot;, queryExecutor.findAgeGreaterThan25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;) printResult(&quot;findAgeGreaterThanOrEqualTo25&quot;, queryExecutor.findAgeGreaterThanOrEqualTo25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;) printResult(&quot;findAgeNotEqualTo25&quot;, queryExecutor.findAgeNotEqualTo25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;) printResult(&quot;findAgeInArray&quot;, queryExecutor.findAgeInArray(List.of(20, 25))); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;) printResult(&quot;findAgeNotInArray&quot;, queryExecutor.findAgeNotInArray(List.of(20, 25))); // db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) printResult(&quot;findAgeOrSalary&quot;, queryExecutor.findAgeOrSalary()); // db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) printResult(&quot;findAgeAndSalary&quot;, queryExecutor.findAgeAndSalary()); /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;, &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125; ]&#125;&#125;) */ printResult(&quot;findTagsWithColorAndSize&quot;, queryExecutor.findTagsWithColorAndSize()); // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;) printResult(&quot;findTagsWithColorContainingBlue&quot;, queryExecutor.findTagsWithColorContainingBlue()); // db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;) printResult(&quot;findTagsWithColor&quot;, queryExecutor.findTagsWithColor()); // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;) printResult(&quot;findDocumentWithTagsSizeThree&quot;, queryExecutor.findDocumentWithTagsSizeThree()); // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;) printResult(&quot;findDocumentWithSpecificTag&quot;, queryExecutor.findDocumentWithSpecificTag()); /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125; ]&#125;&#125;) */ printResult(&quot;findAllElementsWithSpecificTag&quot;, queryExecutor.findAllElementsWithSpecificTag()); printResult(&quot;findAllElementsWithSpecificTagByJson&quot;, queryExecutor.findAllElementsWithSpecificTagByJson()); &#125; private void printResult(String queryName, List&lt;Document&gt; result) &#123; System.out.println(&quot;Query: &quot; + queryName + &quot; ###################################################&quot;); for (Document document : result) &#123; System.out.println(document); &#125; System.out.println(); &#125; public static class QueryExecutor &#123; private final MongoTemplate mongoTemplate; public QueryExecutor(MongoTemplate mongoTemplate) &#123; this.mongoTemplate = mongoTemplate; &#125; // 查询年龄小于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;) public List&lt;Document&gt; findAgeLessThan25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).lt(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄小于等于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;) public List&lt;Document&gt; findAgeLessThanOrEqualTo25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).lte(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄大于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;) public List&lt;Document&gt; findAgeGreaterThan25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).gt(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄大于等于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;) public List&lt;Document&gt; findAgeGreaterThanOrEqualTo25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).gte(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄不等于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;) public List&lt;Document&gt; findAgeNotEqualTo25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).ne(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄存在并且在指定数组中的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;) public List&lt;Document&gt; findAgeInArray(List&lt;Integer&gt; ages) &#123; Query query = new Query(Criteria.where(&quot;age&quot;).in(ages)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄不存在或者不在指定数组中的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;) public List&lt;Document&gt; findAgeNotInArray(List&lt;Integer&gt; ages) &#123; Query query = new Query(Criteria.where(&quot;age&quot;).nin(ages)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄存在并且为 20，或者薪资大于 8000 的文档 // db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) public List&lt;Document&gt; findAgeOrSalary() &#123; Query query = new Query(new Criteria().orOperator(Criteria.where(&quot;age&quot;).is(20), Criteria.where(&quot;salary&quot;).gt(8000))); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询年龄为 20，并且薪资大于 8000 的文档 // db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) public List&lt;Document&gt; findAgeAndSalary() &#123; Query query = new Query(new Criteria().andOperator(Criteria.where(&quot;age&quot;).is(20), Criteria.where(&quot;salary&quot;).gt(8000))); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签，并且包含 tagKey 为 &quot;size&quot;，tagValue 为 &quot;XL&quot; 的标签的文档 /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;, &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125; ]&#125;&#125;) */ public List&lt;Document&gt; findTagsWithColorAndSize() &#123; Criteria criteria = new Criteria().andOperator(Criteria.where(&quot;tags&quot;).elemMatch(Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).is(&quot;red&quot;)), Criteria.where(&quot;tags&quot;).elemMatch(Criteria.where(&quot;tagKey&quot;).is(&quot;size&quot;).and(&quot;tagValue&quot;).is(&quot;XL&quot;))); Query query = new Query(criteria); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询包含 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;blue&quot; 的标签的文档 // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;) public List&lt;Document&gt; findTagsWithColorContainingBlue() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).elemMatch(Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).regex(&quot;blue&quot;))); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询包含 tagKey 为 &quot;color&quot; 的标签的文档 // db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;) public List&lt;Document&gt; findTagsWithColor() &#123; Query query = new Query(Criteria.where(&quot;tags.tagKey&quot;).is(&quot;color&quot;)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询 tags 数组长度为 3 的文档 // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;) public List&lt;Document&gt; findDocumentWithTagsSizeThree() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).size(3)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签的文档 // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;) public List&lt;Document&gt; findDocumentWithSpecificTag() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).elemMatch(Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).is(&quot;red&quot;))); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档 /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125; ]&#125;&#125;) */ public List&lt;Document&gt; findAllElementsWithSpecificTag() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).elemMatch(Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).regex(&quot;green&quot;))); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; // 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档 // 使用 BasicQuery，可以使用 json 字符串，这样就可以直接使用 mongo 的查询语法 public List&lt;Document&gt; findAllElementsWithSpecificTagByJson() &#123; String json = &quot;&quot;&quot; &#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125; ]&#125;&#125; &quot;&quot;&quot;; Query query = new BasicQuery(json); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Document.class, &quot;collection&quot;); &#125; &#125;&#125; 操作实体类 相关注解 修饰范围 作用 属性 @Document 类 映射类对象为Mongo文档 value, collection @Id 成员变量、方法 将成员变量值映射为文档的_id的值 @Field 成员变量、方法 将成员变量及值映射为文档中key:value对 name, value @Transient 成员变量、方法 指定成员变量不参与文档的序列化 使用 @Document 注解指定集合名 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.hanqf.mongo.model;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import org.springframework.data.annotation.Id;import org.springframework.data.mongodb.core.mapping.Document;import org.springframework.data.mongodb.core.mapping.Field;import java.util.List;@Data@AllArgsConstructor@NoArgsConstructor@Document(collection = &quot;collection&quot;)public class Item &#123; @Id private String id; @Field private String name; @Field private int age; @Field private double salary; @Field private List&lt;String&gt; colors; @Field private List&lt;String&gt; sizes; @Field private List&lt;Tag&gt; tags; public Item(String name, int age, double salary, List&lt;String&gt; colors, List&lt;String&gt; sizes, List&lt;Tag&gt; tags) &#123; this.name = name; this.age = age; this.salary = salary; this.colors = colors; this.sizes = sizes; this.tags = tags; &#125; @Data @AllArgsConstructor @NoArgsConstructor public static class Tag &#123; private String tagKey; private String tagValue; &#125;&#125; 查询示例package com.hanqf;import com.hanqf.mongo.model.Item;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.data.mongodb.core.query.BasicQuery;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import java.util.Arrays;import java.util.List;@SpringBootTestclass BasicTests2 &#123; @Autowired private MongoTemplate mongoTemplate; @Test void initializeData() &#123; // Initialize data List&lt;Item&gt; items = Arrays.asList( new Item(&quot;item1&quot;, 20, 5000, Arrays.asList(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), Arrays.asList(&quot;S&quot;, &quot;M&quot;, &quot;L&quot;), Arrays.asList(new Item.Tag(&quot;color&quot;, &quot;red&quot;), new Item.Tag(&quot;size&quot;, &quot;M&quot;), new Item.Tag(&quot;style&quot;, &quot;casual&quot;))), new Item(&quot;item2&quot;, 30, 8000, Arrays.asList(&quot;green&quot;, &quot;yellow&quot;), Arrays.asList(&quot;M&quot;, &quot;L&quot;, &quot;XL&quot;), Arrays.asList(new Item.Tag(&quot;color&quot;, &quot;blue&quot;), new Item.Tag(&quot;size&quot;, &quot;XL&quot;), new Item.Tag(&quot;style&quot;, &quot;formal&quot;))), new Item(&quot;item3&quot;, 25, 10000, Arrays.asList(&quot;red&quot;, &quot;green&quot;), Arrays.asList(&quot;L&quot;, &quot;XL&quot;), Arrays.asList(new Item.Tag(&quot;color&quot;, &quot;green&quot;), new Item.Tag(&quot;size&quot;, &quot;L&quot;), new Item.Tag(&quot;style&quot;, &quot;casual&quot;))) ); mongoTemplate.insertAll(items); &#125; @Test void testQueries() &#123; BasicTests2.QueryExecutor queryExecutor = new BasicTests2.QueryExecutor(mongoTemplate); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;) printResult(&quot;findAgeLessThan25&quot;, queryExecutor.findAgeLessThan25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;) printResult(&quot;findAgeLessThanOrEqualTo25&quot;, queryExecutor.findAgeLessThanOrEqualTo25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;) printResult(&quot;findAgeGreaterThan25&quot;, queryExecutor.findAgeGreaterThan25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;) printResult(&quot;findAgeGreaterThanOrEqualTo25&quot;, queryExecutor.findAgeGreaterThanOrEqualTo25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;) printResult(&quot;findAgeNotEqualTo25&quot;, queryExecutor.findAgeNotEqualTo25()); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;) printResult(&quot;findAgeInArray&quot;, queryExecutor.findAgeInArray(List.of(20, 25))); // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;) printResult(&quot;findAgeNotInArray&quot;, queryExecutor.findAgeNotInArray(List.of(20, 25))); // db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) printResult(&quot;findAgeOrSalary&quot;, queryExecutor.findAgeOrSalary()); // db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) printResult(&quot;findAgeAndSalary&quot;, queryExecutor.findAgeAndSalary()); /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;, &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125; ]&#125;&#125;) */ printResult(&quot;findTagsWithColorAndSize&quot;, queryExecutor.findTagsWithColorAndSize()); // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;) printResult(&quot;findTagsWithColorContainingBlue&quot;, queryExecutor.findTagsWithColorContainingBlue()); // db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;) printResult(&quot;findTagsWithColor&quot;, queryExecutor.findTagsWithColor()); // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;) printResult(&quot;findDocumentWithTagsSizeThree&quot;, queryExecutor.findDocumentWithTagsSizeThree()); // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;) printResult(&quot;findDocumentWithSpecificTag&quot;, queryExecutor.findDocumentWithSpecificTag()); /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125; ]&#125;&#125;) */ printResult(&quot;findAllElementsWithSpecificTag&quot;, queryExecutor.findAllElementsWithSpecificTag()); printResult(&quot;findAllElementsWithSpecificTagByJson&quot;, queryExecutor.findAllElementsWithSpecificTagByJson()); &#125; private void printResult(String queryName, List&lt;Item&gt; result) &#123; System.out.println(&quot;Query: &quot; + queryName + &quot; ###################################################&quot;); for (Item item : result) &#123; System.out.println(item); &#125; System.out.println(); &#125; public static class QueryExecutor &#123; private final MongoTemplate mongoTemplate; public QueryExecutor(MongoTemplate mongoTemplate) &#123; this.mongoTemplate = mongoTemplate; &#125; // 查询年龄小于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lt&quot;: 25 &#125; &#125;) public List&lt;Item&gt; findAgeLessThan25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).lt(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄小于等于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$lte&quot;: 25 &#125; &#125;) public List&lt;Item&gt; findAgeLessThanOrEqualTo25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).lte(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄大于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gt&quot;: 25 &#125; &#125;) public List&lt;Item&gt; findAgeGreaterThan25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).gt(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄大于等于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 25 &#125; &#125;) public List&lt;Item&gt; findAgeGreaterThanOrEqualTo25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).gte(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄不等于 25 的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$ne&quot;: 25 &#125; &#125;) public List&lt;Item&gt; findAgeNotEqualTo25() &#123; Query query = new Query(Criteria.where(&quot;age&quot;).ne(25)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄存在并且在指定数组中的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$in&quot;: [20, 25] &#125; &#125;) public List&lt;Item&gt; findAgeInArray(List&lt;Integer&gt; ages) &#123; Query query = new Query(Criteria.where(&quot;age&quot;).in(ages)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄不存在或者不在指定数组中的文档 // db.collection.find(&#123; &quot;age&quot;: &#123; &quot;$nin&quot;: [20, 25] &#125; &#125;) public List&lt;Item&gt; findAgeNotInArray(List&lt;Integer&gt; ages) &#123; Query query = new Query(Criteria.where(&quot;age&quot;).nin(ages)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄存在并且为 20，或者薪资大于 8000 的文档 // db.collection.find(&#123; &quot;$or&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) public List&lt;Item&gt; findAgeOrSalary() &#123; Query query = new Query(new Criteria().orOperator( Criteria.where(&quot;age&quot;).is(20), Criteria.where(&quot;salary&quot;).gt(8000) )); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询年龄为 20，并且薪资大于 8000 的文档 // db.collection.find(&#123; &quot;$and&quot;: [ &#123; &quot;age&quot;: 20 &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 8000 &#125; &#125; ] &#125;) public List&lt;Item&gt; findAgeAndSalary() &#123; Query query = new Query(new Criteria().andOperator( Criteria.where(&quot;age&quot;).is(20), Criteria.where(&quot;salary&quot;).gt(8000) )); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签，并且包含 tagKey 为 &quot;size&quot;，tagValue 为 &quot;XL&quot; 的标签的文档 /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125;, &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;size&quot;, &quot;tagValue&quot;: &quot;XL&quot; &#125; &#125; ]&#125;&#125;) */ public List&lt;Item&gt; findTagsWithColorAndSize() &#123; Criteria criteria = new Criteria().andOperator( Criteria.where(&quot;tags&quot;).elemMatch( Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).is(&quot;red&quot;) ), Criteria.where(&quot;tags&quot;).elemMatch( Criteria.where(&quot;tagKey&quot;).is(&quot;size&quot;).and(&quot;tagValue&quot;).is(&quot;XL&quot;) ) ); Query query = new Query(criteria); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询包含 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;blue&quot; 的标签的文档 // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /blue/ &#125; &#125; &#125;) public List&lt;Item&gt; findTagsWithColorContainingBlue() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).elemMatch( Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).regex(&quot;blue&quot;) )); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询包含 tagKey 为 &quot;color&quot; 的标签的文档 // db.collection.find(&#123; &quot;tags.tagKey&quot;: &quot;color&quot; &#125;) public List&lt;Item&gt; findTagsWithColor() &#123; Query query = new Query(Criteria.where(&quot;tags.tagKey&quot;).is(&quot;color&quot;)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询 tags 数组长度为 3 的文档 // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$size&quot;: 3 &#125; &#125;) public List&lt;Item&gt; findDocumentWithTagsSizeThree() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).size(3)); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询包含 tagKey 为 &quot;color&quot;，tagValue 为 &quot;red&quot; 的标签的文档 // db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: &quot;red&quot; &#125; &#125; &#125;) public List&lt;Item&gt; findDocumentWithSpecificTag() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).elemMatch( Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).is(&quot;red&quot;) )); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档 /* db.collection.find(&#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125; ]&#125;&#125;) */ public List&lt;Item&gt; findAllElementsWithSpecificTag() &#123; Query query = new Query(Criteria.where(&quot;tags&quot;).elemMatch( Criteria.where(&quot;tagKey&quot;).is(&quot;color&quot;).and(&quot;tagValue&quot;).regex(&quot;green&quot;) )); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; // 查询 tags 数组所有元素满足 tagKey 为 &quot;color&quot;，tagValue 包含 &quot;green&quot; 的标签的文档 // 使用 BasicQuery，可以使用 json 字符串，这样就可以直接使用 mongo 的查询语法 public List&lt;Item&gt; findAllElementsWithSpecificTagByJson() &#123; String json = &quot;&quot;&quot; &#123; &quot;tags&quot;: &#123; &quot;$all&quot;: [ &#123; &quot;$elemMatch&quot;: &#123; &quot;tagKey&quot;: &quot;color&quot;, &quot;tagValue&quot;: /green/ &#125; &#125; ]&#125;&#125; &quot;&quot;&quot;; Query query = new BasicQuery(json); System.out.println(query); // 打印出生成的查询字符串 return mongoTemplate.find(query, Item.class); &#125; &#125;&#125; 常用的查询方法 查询所有文档 12// db.employee.find()List&lt;Employee&gt; list = mongoTemplate.findAll(Employee.class); 根据_id查询 12// db.employee.findOne(&#123; &quot;_id&quot;: 1 &#125;)|Employee e = mongoTemplate.findById(1, Employee.class); 查询第一个文档 12// db.employee.findOne(&#123;&#125;)Employee e = mongoTemplate.findOne(new Query(), Employee.class); 条件查询，排序及分页 12345678910111213141516171819202122232425262728293031/*db.employee.find(&#123; &quot;$or&quot;: [ &#123; &quot;username&quot;: &quot;张三&quot; &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 5000 &#125; &#125; ] &#125;).sort(&#123; &quot;salary&quot;: -1 &#125;).skip(2).limit(4)*/Query query = new Query(new Criteria().orOperator(Criteria.where(&quot;name&quot;).is(&quot;张三&quot;), Criteria.where(&quot;salary&quot;).gt(5000)););// 如果你不熟悉 Criteria，但是熟悉 mongo 的查询语法，可以使用 BasicQuery/* String json = &quot;&quot;&quot; &#123; &quot;$or&quot;: [ &#123; &quot;username&quot;: &quot;张三&quot; &#125;, &#123; &quot;salary&quot;: &#123; &quot;$gt&quot;: 5000 &#125; &#125; ] &#125; &quot;&quot;&quot;; Query query = new BasicQuery(json);*///skip limit 分页 skip用于指定跳过记录数，limit则用于限定返回结果数量。query.with(Sort.by(Sort.Order.desc(&quot;salary&quot;))) .skip(2) //指定跳过记录数 .limit(4); //每页显示记录数//查询结果List&lt;Employee&gt; employees = mongoTemplate.find( query, Employee.class); 只返回部分字段 123456789101112/*db.employee.find( &#123; &quot;age&quot;: &#123; &quot;$gte&quot;: 18 &#125; &#125;, // 筛选条件，年龄大于等于18岁的文档 &#123; &quot;name&quot;: 1, &quot;age&quot;: 1 &#125; // 指定返回的字段，只包含&quot;name&quot;和&quot;age&quot;，其中1表示包含该字段，0表示不包含)*/Query query = new Query();query.addCriteria(Criteria.where(&quot;age&quot;).gte(18)); // 筛选条件，年龄大于等于18岁的文档query.fields().include(&quot;name&quot;, &quot;age&quot;).exclude(&quot;id&quot;);// 指定返回的字段，只包含&quot;name&quot;和&quot;age&quot;，要去除id，否则默认会返回idList&lt;Employee&gt; results = mongoTemplate.find(query, Employee.class);// Employee(id=null, name=张三, age=21, salary=null, entryDay=null)results.forEach(System.out::println); 去重 distinct 方法只能直接获取唯一值，并不能在查询过程中进行其他的聚合操作，使用场景非常受限，推荐使用聚合方式进行查询 12345678910111213141516171819202122232425262728293031323334353637383940414243//语法：db.collectionName.distinct(&quot;fieldName&quot;, &#123; /* 过滤条件 */ &#125;)，这将返回指定字段 fieldName 的唯一值数组。// 示例：db.collection.distinct(&quot;name&quot;,&#123;age:&#123;$gte:25&#125;&#125;)// 方式1DistinctIterable&lt;String&gt; distinctIterable = mongoTemplate.getCollection(&quot;collection&quot;) .distinct(&quot;name&quot;, BsonDocument.parse(&quot;&#123;age:&#123;$gte:25&#125;&#125;&quot;), String.class);// 方式2// DistinctIterable&lt;String&gt; distinctIterable = mongoTemplate.getCollection(&quot;collection&quot;)// .distinct(&quot;name&quot;, new Document(&quot;age&quot;, new Document(&quot;$gte&quot;, 25)), String.class);// 将DistinctIterable转换为ListList&lt;String&gt; distinctNames = new ArrayList&lt;&gt;();distinctIterable.iterator().forEachRemaining(distinctNames::add);// 打印输出distinctNames.forEach(System.out::println);// 聚合方式，聚合方式的详细说明会在下一篇博客中介绍/* db.collection.aggregate([ &#123; $match: &#123; age: &#123; $gte: 25 &#125; &#125; &#125;, &#123; $group: &#123; _id: &quot;$name&quot; &#125; &#125; ])*/Aggregation aggregation = Aggregation.newAggregation( Aggregation.match(Criteria.where(&quot;age&quot;).gte(25)), Aggregation.group(&quot;name&quot;) ); AggregationResults&lt;Document&gt; results = mongoTemplate.aggregate(aggregation, &quot;collection&quot;, Document.class); List&lt;String&gt; distinctNames = results.getMappedResults().stream() .map(document -&gt; document.getString(&quot;_id&quot;)) .toList(); distinctNames.forEach(System.out::println); SpringBoot对Mongo的查询，其实就是如何通过Criteria来构建一个Query，所以我们的目标就是要熟练掌握Criteria的语法。当然，如果你熟悉Mongo的查询语法，也可以直接使用BasicQuery来实现Mongo的查询。 插入 Mongo语法 1234567891011121314151617181920212223# 插入单个文档db.collection.insertOne( &lt;document&gt;, &#123; writeConcern: &lt;document&gt; &#125;)# 示例db.demo.insertOne( &#123; name: &quot;张三&quot;, age: 35&#125;, &#123; writeConcern: &#123; w: &quot;majority&quot;, j: true, wtimeout: 5000 &#125; &#125;)# 插入多个文档db.collection.insertMany( [ &lt;document 1&gt; , &lt;document 2&gt;, ... ], &#123; writeConcern: &lt;document&gt;, ordered: &lt;boolean&gt; &#125;) writeConcern 是 MongoDB 中用来控制写入确认的选项，可选。以下是 writeConcern 参数的一些常见选项： w：指定写入确认级别。如果指定为数字，则表示要等待写入操作完成的节点数。如果指定为 majority，则表示等待大多数节点完成写入操作。默认为 1，表示等待写入操作完成的节点数为 1。 j：表示写入操作是否要求持久化到磁盘。如果设置为 true，则表示写入操作必须持久化到磁盘后才返回成功。如果设置为 false，则表示写入操作可能在数据被持久化到磁盘之前返回成功。默认为 false。 wtimeout：表示等待写入操作完成的超时时间，单位为毫秒。如果超过指定的时间仍然没有返回确认信息，则返回错误。默认为 0，表示不设置超时时间。 ordered：指定是否按顺序写入，默认 true，按顺序写入。 插入单个文档 1234567891011/* db.employee.insertOne(&#123; &quot;_id&quot;: 1, &quot;username&quot;: &quot;小明&quot;, &quot;age&quot;: 30, &quot;salary&quot;: 10000.00, &quot;entryDay&quot;: new Date() &#125;)*/Employee employee = new Employee(1, &quot;小明&quot;, 30, 10000.00, new Date());mongoTemplate.insert(employee); 插入多个文档 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/* db.employee.insertMany([ &#123; &quot;_id&quot;: 2, &quot;username&quot;: &quot;张三&quot;, &quot;age&quot;: 21, &quot;salary&quot;: 5000.00, &quot;entryDay&quot;: new Date() &#125;, &#123; &quot;_id&quot;: 3, &quot;username&quot;: &quot;李四&quot;, &quot;age&quot;: 26, &quot;salary&quot;: 8000.00, &quot;entryDay&quot;: new Date() &#125;, &#123; &quot;_id&quot;: 4, &quot;username&quot;: &quot;王五&quot;, &quot;age&quot;: 22, &quot;salary&quot;: 8000.00, &quot;entryDay&quot;: new Date() &#125;, &#123; &quot;_id&quot;: 5, &quot;username&quot;: &quot;张龙&quot;, &quot;age&quot;: 28, &quot;salary&quot;: 6000.00, &quot;entryDay&quot;: new Date() &#125;, &#123; &quot;_id&quot;: 6, &quot;username&quot;: &quot;赵虎&quot;, &quot;age&quot;: 24, &quot;salary&quot;: 7000.00, &quot;entryDay&quot;: new Date() &#125;, &#123; &quot;_id&quot;: 7, &quot;username&quot;: &quot;赵六&quot;, &quot;age&quot;: 28, &quot;salary&quot;: 12000.00, &quot;entryDay&quot;: new Date() &#125; ])*/List&lt;Employee&gt; list = Arrays.asList( new Employee(2, &quot;张三&quot;, 21, 5000.00, new Date()), new Employee(3, &quot;李四&quot;, 26, 8000.00, new Date()), new Employee(4, &quot;王五&quot;, 22, 8000.00, new Date()), new Employee(5, &quot;张龙&quot;, 28, 6000.00, new Date()), new Employee(6, &quot;赵虎&quot;, 24, 7000.00, new Date()), new Employee(7, &quot;赵六&quot;, 28, 12000.00, new Date()));//插入多条数据mongoTemplate.insert(list, Employee.class); id存在时更新，不存在时插入 1234567891011121314151617/* db.employee.updateOne( &#123; &quot;_id&quot;: 1 &#125;, &#123; $set: &#123; &quot;name&quot;: &quot;小明&quot;, &quot;age&quot;: 30, &quot;salary&quot;: 10000.00, &quot;entryDay&quot;: ISODate(&quot;2024-03-05T00:00:00Z&quot;) &#125; &#125;, &#123; upsert: true &#125;)*/Employee employee = new Employee(1, &quot;小明&quot;, 30, 10000.00, new Date());//save方法会根据对象的id是否存在来判断是更新还是插入mongoTemplate.save(employee); 更新 Mongo语法 123456789101112131415161718192021222324252627282930# 更新单个或多个文档db.collection.update[One|Many]( &lt;filter&gt;, &lt;update&gt;, &#123; upsert: &lt;boolean&gt;, writeConcern: &lt;document&gt;, collation: &lt;document&gt;, arrayFilters: [ &lt;filterdocument1&gt;, ... ], hint: &lt;document|string&gt; // Available starting in MongoDB 4.2.1 &#125;)# findAndModify,只能更新单个文档db.collection.findAndModify(&#123; query:&lt;filter&gt;, update:&lt;update&gt;&#125;)# 示例，该操作会返回符合查询条件的文档数据，并完成对文档的修改# 将某个book文档的收藏数（favCount）加1db.books.findAndModify(&#123; query:&#123;_id:ObjectId(&quot;6457a39c817728350ec83b9d&quot;)&#125;, update:&#123;$inc:&#123;favCount:1&#125;&#125;&#125;)# 默认情况下，findAndModify会返回修改前的“旧”数据。如果希望返回修改后的数据，则可以指定new选项db.books.findAndModify(&#123; query:&#123;_id:ObjectId(&quot;6457a39c817728350ec83b9d&quot;)&#125;, update:&#123;$inc:&#123;favCount:1&#125;&#125;, new: true&#125;) 参数 描述 &lt;filter&gt; 一个筛选器对象，用于指定要更新的文档。 &lt;update&gt; 一个更新操作对象，用于指定如何更新文档。可以使用一些操作符，例如$set、$inc、$unset等，以更新文档中的特定字段。 upsert 一个布尔值，用于指定如果找不到与筛选器匹配的文档时是否应插入一个新文档。如果upsert为true，则会插入一个新文档。默认值为false。 writeConcern 一个文档，用于指定写入操作的安全级别。可以指定写入操作需要到达的节点数或等待写入操作的时间。 collation 一个文档，用于指定用于查询的排序规则。例如，可以通过指定locale属性来指定语言环境，从而实现基于区域设置的排序。 arrayFilters 一个数组，用于指定要更新的数组元素。数组元素是通过使用更新操作符$[]和$来指定的。 hint 一个文档或字符串，用于指定查询使用的索引。该参数仅在MongoDB 4.2.1及以上版本中可用。 更新操作符 操作符 格式 描述 $set { $set: { field: value } } 指定一个键并更新值，若键不存在则创建。 $unset { $unset : { field : 1 } } 删除一个键。 $inc { $inc : { field : value } } 对数值类型进行增减。 $rename { $rename : { old_field_name : new_field_name } } 修改字段名称。 $push { $push : { field : value } } 将数值追加到数组中，若数组不存在则会进行初始化。 $pushAll { $pushAll : { field : value_array } } 追加多个值到一个数组字段内。 $pull { $pull : { field : _value } } 从数组中删除指定的元素。 $addToSet { $addToSet : { field : value } } 添加元素到数组中，具有排重功能。 $pop { $pop : { field : 1 } } 删除数组的第一个或最后一个元素。 只更新满足条件的第一条记录 12345678910111213/* db.employee.updateOne( &#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 8000 &#125; &#125;, &#123; &quot;$set&quot;: &#123; &quot;salary&quot;: 13000 &#125; &#125; ) */Query query = new Query(Criteria.where(&quot;salary&quot;).gte(8000));Update update = new Update();//设置更新属性update.set(&quot;salary&quot;, 13000);UpdateResult updateResult = mongoTemplate.updateFirst(query, update, Employee.class);//返回修改的记录数System.out.println(updateResult.getModifiedCount()); 更新所有满足条件的记录 12345678910111213/* db.employee.updateMany( &#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 8000 &#125; &#125;, &#123; &quot;$set&quot;: &#123; &quot;salary&quot;: 13000 &#125; &#125; )*/Query query = new Query(Criteria.where(&quot;salary&quot;).gte(8000));Update update = new Update();//设置更新属性update.set(&quot;salary&quot;, 13000);UpdateResult updateResult = mongoTemplate.updateMulti(query, update, Employee.class);//返回修改的记录数System.out.println(updateResult.getModifiedCount()); 没有符合条件的记录则插入数据 123456789101112131415/* db.employee.updateOne( &#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 8000 &#125; &#125;, &#123; &quot;$set&quot;: &#123; &quot;salary&quot;: 13000 &#125;, &quot;$setOnInsert&quot;: &#123; &quot;id&quot;: 11 &#125; &#125;, &#123; &quot;upsert&quot;: true &#125; )*/Query query = new Query(Criteria.where(&quot;salary&quot;).gte(8000));Update update = new Update();//设置更新属性update.set(&quot;salary&quot;, 13000);update.setOnInsert(&quot;id&quot;,11); //指定_id，只有没有匹配到时才插入UpdateResult updateResult = mongoTemplate.upsert(query, update, Employee.class);//返回修改的记录数System.out.println(updateResult.getModifiedCount()); 替换 Mongo语法 1234567891011db.collection.replaceOne( &lt;filter&gt;, &lt;replacement&gt;, &#123; upsert: &lt;boolean&gt;, writeConcern: &lt;document&gt;, collation: &lt;document&gt;, hint: &lt;document|string&gt; &#125;) replaceOne操作会首先使用指定的筛选条件来查找匹配的文档，然后用提供的新文档完全替换掉原始文档，也就是说replaceOne是整体替换，而不是修改文档中的某些字段。 参数 描述 &lt;filter&gt; 一个筛选器对象，用于指定要替换的文档。只有与筛选器对象匹配的第一个文档才会被替换。 &lt;replacement&gt; 一个替换文档对象，用于指定用于替换原始文档的新文档。替换文档必须包含所有要在原始文档中修改或替换的字段。 upsert 一个布尔值，表示如果找不到与筛选器匹配的文档时是否应插入一个新文档。如果设置为true，则会插入一个新文档。默认为false。 writeConcern 一个文档，用于指定写入操作的安全级别。可以指定写入操作需要到达的节点数或等待写入操作的时间。 collation 一个文档，用于指定用于查询的排序规则。例如，可以通过指定locale属性来指定语言环境，从而实现基于区域设置的排序。 hint 一个文档或字符串，用于指定查询使用的索引。该参数仅在MongoDB 4.2.1及以上版本中可用 示例 1234567891011121314/*db.collection.replaceOne( &#123; &quot;name&quot;: &quot;John&quot; &#125;, // 筛选条件，匹配name为John的文档 &#123; // 替换文档，用于替换匹配到的文档 &quot;name&quot;: &quot;Peter&quot;, // 新的name字段值为Peter &quot;age&quot;: 30 // 新增age字段，值为30 &#125;)*/Query query = new Query(Criteria.where(&quot;name&quot;).is(&quot;John&quot;));Employee replacement = new Employee();replacement.setName(&quot;Peter&quot;);replacement.setAge(30);mongoTemplate.findAndReplace(query, replacement); 删除 Mongo语法 12345678# 按条件删除多个文档db.collection.deleteMany(&lt;filter&gt;)# 按条件删除单个文档db.collection.deleteOne(&lt;filter&gt;)# 先查询后删除，返回查询条件对应的文档，sort是可选项db.collection.findOneAndDelete(&lt;filter&gt;,&#123;sort:&#123;field:1&#125;&#125;) 删除所有文档 123456// db.employee.deleteMany(&#123;&#125;)mongoTemplate.remove(new Query(),Employee.class);// db.employee.drop()// 清空数据也可以使用drop方法，但是这样会删除索引mongoTemplate.dropCollection(Employee.class); 按条件删除文档 123// db.employee.deleteMany(&#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 10000 &#125; &#125;)Query query = new Query(Criteria.where(&quot;salary&quot;).gte(10000));mongoTemplate.remove(query, Employee.class); 删除查询到的第一个文档 1234// db.employee.deleteOne(&#123; &quot;salary&quot;: &#123; &quot;$gte&quot;: 10000 &#125; &#125;)Query query = new Query(Criteria.where(&quot;salary&quot;).gte(10000));query.limit(1);mongoTemplate.remove(query, Employee.class); 批量操作 bulkwrite()方法提供了执行批量插入、更新和删除操作的能力。 bulkWrite()支持以下写操作: insertOne updateOne updateMany replaceOne deleteOne deleteMany 示例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192package com.hanqf;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.annotation.Id;import org.springframework.data.mongodb.core.BulkOperations;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.data.mongodb.core.mapping.Document;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.data.mongodb.core.query.Update;import java.util.Arrays;@SpringBootTestclass BulkWriteTests &#123; @Autowired private MongoTemplate mongoTemplate; /* db.pizzas.insertMany( [ &#123; _id: 0, type: &quot;pepperoni&quot;, size: &quot;small&quot;, price: 4 &#125;, &#123; _id: 1, type: &quot;cheese&quot;, size: &quot;medium&quot;, price: 7 &#125;, &#123; _id: 2, type: &quot;vegan&quot;, size: &quot;large&quot;, price: 8 &#125; ] ) */ @Test void insertManyPizzas() &#123; mongoTemplate.insertAll(Arrays.asList( new Pizza(0, &quot;pepperoni&quot;, &quot;small&quot;, 4), new Pizza(1, &quot;cheese&quot;, &quot;medium&quot;, 7), new Pizza(2, &quot;vegan&quot;, &quot;large&quot;, 8) )); &#125; /* db.pizzas.bulkWrite( [ &#123; insertOne: &#123; document: &#123; _id: 3, type: &quot;beef&quot;, size: &quot;medium&quot;, price: 6 &#125; &#125; &#125;, &#123; insertOne: &#123; document: &#123; _id: 4, type: &quot;sausage&quot;, size: &quot;large&quot;, price: 10 &#125; &#125; &#125;, &#123; updateOne: &#123; filter: &#123; type: &quot;cheese&quot; &#125;, update: &#123; $set: &#123; price: 8 &#125; &#125; &#125; &#125;, &#123; deleteOne: &#123; filter: &#123; type: &quot;pepperoni&quot;&#125; &#125; &#125;, &#123; replaceOne: &#123; filter: &#123; type: &quot;vegan&quot; &#125;, replacement: &#123; type: &quot;tofu&quot;, size: &quot;small&quot;, price: 4 &#125; &#125; &#125; ] ) */ @Test void performBulkWrite() &#123; BulkOperations bulkOperations = mongoTemplate.bulkOps(BulkOperations.BulkMode.ORDERED, Pizza.class); bulkOperations.insert(Arrays.asList( new Pizza(3, &quot;beef&quot;, &quot;medium&quot;, 6), new Pizza(4, &quot;sausage&quot;, &quot;large&quot;, 10) )); bulkOperations.updateOne( Query.query(Criteria.where(&quot;type&quot;).is(&quot;cheese&quot;)), new Update().set(&quot;price&quot;, 8) ); bulkOperations.remove( Query.query(Criteria.where(&quot;type&quot;).is(&quot;pepperoni&quot;)).limit(1) ); bulkOperations.replaceOne( Query.query(Criteria.where(&quot;type&quot;).is(&quot;vegan&quot;)), new Pizza(null, &quot;tofu&quot;, &quot;small&quot;, 4) ); bulkOperations.execute(); &#125; @Data @AllArgsConstructor @NoArgsConstructor @Document(&quot;pizza&quot;) private static class Pizza &#123; @Id private Integer _id; private String type; private String size; private Integer price; &#125;&#125;","summary":"摘要 本文介绍如何使用SpringBoot实现MongoDB7.0的单集合的CURD操作 SpringBoot版本3.2.3，MongoDB版本7.0.6 MongoDB CRUD Operations SQL to MongoDB Mapping Chart MongoDB7.0--SpringBoot聚合操作","date_published":"2024-03-05T13:30:05.000Z","tags":["技术","linux","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/03/01/mongodb7/","url":"https://blog.hanqunfeng.com/2024/03/01/mongodb7/","title":"MongoDB7.0的安装","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n引用本地其它文章连接{}\n 大括号开始% post_link 文件名称(不包含.md) %大括号结束\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍Linux下MongoDB7.0的安装</p>\n</li>\n<li class=\"lvl-2\">\n<p>MongoDB<a href=\"https://www.mongodb.com/docs/v7.0/\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>CentOS8(x86_64)</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"MongoDB-7-0新特性\">MongoDB 7.0新特性</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>2024年8月15日，MongoDB正式发布7.0版本，截止目前最新版本为7.0.6。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/docs/v7.0/release-notes/7.0/\">MongoDB7.0特性</a></p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://help.aliyun.com/zh/mongodb/product-overview/features-of-mongodb-7-0?spm=a2c4g.11186623.0.0.2acc36f3yP2Mr9\">阿里云关于MongoDB7.0的特性说明</a>，该文档中也包含MongoDB其它版本的特性说明</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/legal/support-policy/lifecycles\">MongoDB Software Lifecycle Schedules</a></p>\n</li>\n</ul>\n<h2 id=\"安装MongoDB\">安装MongoDB</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>mongodb的安装方法可以查看<a href=\"https://www.mongodb.com/docs/v7.0/administration/install-community/\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/try/download/community\">MongoDB下载地址</a>，选择合适的版本、平台和包类型</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载MongoDB</span></span><br><span class=\"line\">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-7.0.6.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf mongodb-linux-x86_64-rhel80-7.0.6.tgz</span><br><span class=\"line\"><span class=\"comment\"># 方便起见，创建软连接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s mongodb-linux-x86_64-rhel80-7.0.6 mongodb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改/etc/profile，添加环境变量，方便执行MongoDB命令</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> MONGODB_HOME=/usr/local/soft/mongodb</span><br><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$MONGODB_HOME</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#重新加载环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看版本，检查命令是否可用</span></span><br><span class=\"line\">mongod --version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建dbpath和logpath的存储目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mongodb/data /mongodb/log</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装mongoDB时可能遇到的问题\">安装mongoDB时可能遇到的问题</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<ol>\n<li class=\"lvl-5\">启动mongodb服务时，提示<code>mongod: error while loading shared libraries: libcrypto.so.1.1: cannot open shared object file: No such file or directory</code></li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>解决方法：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget  https://www.openssl.org/source/openssl-1.1.1w.tar.gz</span><br><span class=\"line\">tar -zxvf openssl-1.1.1w.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> openssl-1.1.1w</span><br><span class=\"line\">./config</span><br><span class=\"line\"><span class=\"comment\"># 如果make时提示 /bin/sh: gcc: command not found，需要先安装gcc：sudo yum install gcc -y</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/lib64/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/lib64/libssl.so.1.1 /usr/lib64/libssl.so.1.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动mongodb服务\">启动mongodb服务</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>命令参数启动</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --port=27017 --dbpath=/mongodb/data --logpath=/mongodb/log/mongodb.log --bind_ip=0.0.0.0 --fork</span><br><span class=\"line\">    <span class=\"comment\"># 参数说明</span></span><br><span class=\"line\">    --port: 指定端口，默认为27017</span><br><span class=\"line\">    --dbpath: 指定数据文件存放目录</span><br><span class=\"line\">    --logpath: 指定日志文件，注意是指定文件不是目录</span><br><span class=\"line\">    --bind_ip: 默认只监听localhost网卡</span><br><span class=\"line\">    --fork: 后台启动</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>也可以将上面的参数写到配置文件中，如<code>/mongodb/conf/mongo.conf</code>文件，必须是yaml格式</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">systemLog:</span></span><br><span class=\"line\">  <span class=\"attr\">destination:</span> <span class=\"string\">file</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">/mongodb/log/mongodb.log</span> <span class=\"comment\"># log path</span></span><br><span class=\"line\">  <span class=\"attr\">logAppend:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">dbPath:</span> <span class=\"string\">/mongodb/data</span> <span class=\"comment\"># data directory</span></span><br><span class=\"line\">  <span class=\"attr\">engine:</span> <span class=\"string\">wiredTiger</span>  <span class=\"comment\">#存储引擎，默认值就是wiredTiger</span></span><br><span class=\"line\">  <span class=\"attr\">journal:</span>            <span class=\"comment\">#journal日志配置</span></span><br><span class=\"line\">    <span class=\"attr\">commitIntervalMs:</span> <span class=\"number\">1</span> <span class=\"comment\">#mongod进程在日志操作之间允许的最大时间（以毫秒为单位）。值可以从1到500毫秒不等。较低的值会增加日志的耐用性，而牺牲了磁盘性能。在WiredTiger上，默认的日志提交间隔是100毫秒。此外，包含或暗示j:true的写入将导致期刊立即同步。</span></span><br><span class=\"line\"><span class=\"attr\">net:</span></span><br><span class=\"line\">  <span class=\"attr\">bindIp:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\"><span class=\"attr\">processManagement:</span></span><br><span class=\"line\">  <span class=\"attr\">fork:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将命令行参数直接转换为yaml:<code>--outputConfig</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongod --port=27017 --dbpath=/mongodb/data --logpath=/mongodb/log/mongodb.log --bind_ip=0.0.0.0 --fork --outputConfig</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">net:</span></span><br><span class=\"line\">  <span class=\"attr\">bindIp:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\"><span class=\"attr\">outputConfig:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">processManagement:</span></span><br><span class=\"line\">  <span class=\"attr\">fork:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">dbPath:</span> <span class=\"string\">/mongodb/data</span></span><br><span class=\"line\"><span class=\"attr\">systemLog:</span></span><br><span class=\"line\">  <span class=\"attr\">destination:</span> <span class=\"string\">file</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">/mongodb/log/mongodb.log</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>删除<code>outputConfig: true</code>这一行，然后将其余内容复制到mongo.conf中</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>关于配置参数的详细信息可以查看<a href=\"https://www.mongodb.com/docs/v7.0/reference/configuration-options/\">官方文档</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动mongo服务</span></span><br><span class=\"line\">mongod -f /mongodb/conf/mongo.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭mongo服务，注意：macos下不支持 --shutdown</span></span><br><span class=\"line\">mongod -f /mongodb/conf/mongo.conf --shutdown</span><br></pre></td></tr></table></figure>\n<h2 id=\"shell客户端mongosh\">shell客户端mongosh</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>从mongodb6开始不再支持mongo命令，而是需要使用mongosh命令，关于mongosh命令的使用可以查看<a href=\"https://www.mongodb.com/docs/mongodb-shell/\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>mongosh命令的使用方式与mongo命令基本一致</p>\n</li>\n<li class=\"lvl-2\">\n<p>下载地址：<a href=\"https://www.mongodb.com/try/download/shell\">mongosh下载地址</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载安装包</span></span><br><span class=\"line\">wget https://downloads.mongodb.com/compass/mongodb-mongosh-2.1.5.x86_64.rpm</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install -y mongodb-mongosh-2.1.5.x86_64.rpm</span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">mongosh --version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接mongodb server端</span></span><br><span class=\"line\">mongosh --host=127.0.0.1 --port=27017</span><br><span class=\"line\"><span class=\"comment\"># --host: mongodb server端ip地址</span></span><br><span class=\"line\"><span class=\"comment\"># --port: mongodb server端口</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>mongosh常用命令</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>show dbs 或 show databases</td>\n<td>显示数据库</td>\n</tr>\n<tr>\n<td>use 数据库名</td>\n<td>切换数据库，如果不存在创建数据库</td>\n</tr>\n<tr>\n<td>db.dropDatabase()</td>\n<td>删除数据库</td>\n</tr>\n<tr>\n<td>show collections 或 show tables</td>\n<td>显示当前数据库的集合列表</td>\n</tr>\n<tr>\n<td>db.集合名.stats()</td>\n<td>查看集合详情</td>\n</tr>\n<tr>\n<td>db.集合名.drop()</td>\n<td>删除集合</td>\n</tr>\n<tr>\n<td>show users</td>\n<td>显示当前数据库的用户列表</td>\n</tr>\n<tr>\n<td>show roles</td>\n<td>显示当前数据库的角色列表</td>\n</tr>\n<tr>\n<td>show profile</td>\n<td>显示最近发生的操作</td>\n</tr>\n<tr>\n<td>load(“xxx.js”)</td>\n<td>执行一个JavaScript脚本文件</td>\n</tr>\n<tr>\n<td>exit 或 quit</td>\n<td>退出</td>\n</tr>\n<tr>\n<td>help</td>\n<td>查看mongodb支持哪些命令</td>\n</tr>\n<tr>\n<td>db.help()</td>\n<td>查询当前数据库支持的方法</td>\n</tr>\n<tr>\n<td>db.集合名.help()</td>\n<td>显示集合的帮助信息</td>\n</tr>\n<tr>\n<td>db.version()</td>\n<td>查看数据库版本</td>\n</tr>\n<tr>\n<td>cls</td>\n<td>清屏</td>\n</tr>\n<tr>\n<td>db.shutdownServer()</td>\n<td>关闭mongodb server端</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安全认证\">安全认证</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建管理员</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置管理员用户名密码需要切换到admin库</span></span><br><span class=\"line\">use admin</span><br><span class=\"line\"><span class=\"comment\">#显示可设置权限</span></span><br><span class=\"line\">show roles</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建管理员，授予root角色</span></span><br><span class=\"line\">db.createUser(&#123;user:<span class=\"string\">&quot;root&quot;</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">&quot;password&quot;</span>,roles:[<span class=\"string\">&quot;root&quot;</span>]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前数据库所有用户信息</span></span><br><span class=\"line\">show <span class=\"built_in\">users</span></span><br><span class=\"line\"><span class=\"comment\">#显示所有用户</span></span><br><span class=\"line\">db.system.users.find()</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>常用角色</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>权限名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>read</td>\n<td>允许用户读取指定数据库</td>\n</tr>\n<tr>\n<td>readWrite</td>\n<td>允许用户读写指定数据库</td>\n</tr>\n<tr>\n<td>dbAdmin</td>\n<td>允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</td>\n</tr>\n<tr>\n<td>dbOwner</td>\n<td>允许用户在指定数据库中执行任意操作，增、删、改、查等</td>\n</tr>\n<tr>\n<td>userAdmin</td>\n<td>允许用户向system.users集合写入，可以在指定数据库里创建、删除和管理用户</td>\n</tr>\n<tr>\n<td>clusterAdmin</td>\n<td>只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</td>\n</tr>\n<tr>\n<td>readAnyDatabase</td>\n<td>只在admin数据库中可用，赋予用户所有数据库的读权限</td>\n</tr>\n<tr>\n<td>readWriteAnyDatabase</td>\n<td>只在admin数据库中可用，赋予用户所有数据库的读写权限</td>\n</tr>\n<tr>\n<td>userAdminAnyDatabase</td>\n<td>只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</td>\n</tr>\n<tr>\n<td>dbAdminAnyDatabase</td>\n<td>只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限</td>\n</tr>\n<tr>\n<td>root</td>\n<td>只在admin数据库中可用。超级账号，超级权限</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建数据库用户</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin&gt; use mydb</span><br><span class=\"line\">switched to db mydb</span><br><span class=\"line\">mydb&gt; db.createUser(&#123;user:<span class=\"string\">&quot;mytest&quot;</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">&quot;123456&quot;</span>,roles:[<span class=\"string\">&quot;dbOwner&quot;</span>]&#125;)</span><br><span class=\"line\">&#123; ok: 1 &#125;</span><br><span class=\"line\">mydb&gt; show tables</span><br><span class=\"line\"></span><br><span class=\"line\">mydb&gt; show <span class=\"built_in\">users</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _id: <span class=\"string\">&#x27;mydb.mytest&#x27;</span>,</span><br><span class=\"line\">    userId: UUID(<span class=\"string\">&#x27;8bc42a74-5d84-4849-af25-09fdcbdfd03a&#x27;</span>),</span><br><span class=\"line\">    user: <span class=\"string\">&#x27;mytest&#x27;</span>,</span><br><span class=\"line\">    db: <span class=\"string\">&#x27;mydb&#x27;</span>,</span><br><span class=\"line\">    roles: [ &#123; role: <span class=\"string\">&#x27;dbOwner&#x27;</span>, db: <span class=\"string\">&#x27;mydb&#x27;</span> &#125; ],</span><br><span class=\"line\">    mechanisms: [ <span class=\"string\">&#x27;SCRAM-SHA-1&#x27;</span>, <span class=\"string\">&#x27;SCRAM-SHA-256&#x27;</span> ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>重置用户密码</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mydb&gt; db.changeUserPassword(<span class=\"string\">&quot;mytest&quot;</span>, <span class=\"string\">&quot;password&quot;</span>)</span><br><span class=\"line\">&#123; ok: 1 &#125;</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">mydb&gt; db.updateUser(<span class=\"string\">&quot;mytest&quot;</span>, &#123;<span class=\"built_in\">pwd</span>: <span class=\"string\">&quot;password&quot;</span>&#125;)</span><br><span class=\"line\">&#123; ok: 1 &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>重新赋予用户角色</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设已经创建了用户mytest，需要重新赋予其角色</span></span><br><span class=\"line\">db.grantRolesToUser( <span class=\"string\">&quot;mytest&quot;</span> , [</span><br><span class=\"line\"> &#123; role: <span class=\"string\">&quot;clusterAdmin&quot;</span>, db: <span class=\"string\">&quot;admin&quot;</span> &#125; ,</span><br><span class=\"line\"> &#123; role: <span class=\"string\">&quot;userAdminAnyDatabase&quot;</span>, db: <span class=\"string\">&quot;admin&quot;</span>&#125;,</span><br><span class=\"line\"> &#123; role: <span class=\"string\">&quot;readWriteAnyDatabase&quot;</span>, db: <span class=\"string\">&quot;admin&quot;</span>&#125;</span><br><span class=\"line\"> ])</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>删除用户</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mydb&gt; db.dropUser(<span class=\"string\">&quot;mytest&quot;</span>)</span><br><span class=\"line\">&#123; ok: 1 &#125;</span><br><span class=\"line\">mydb&gt; show <span class=\"built_in\">users</span></span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n<h2 id=\"MongoDB启用鉴权\">MongoDB启用鉴权</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>默认情况下，MongoDB不会启用鉴权，以鉴权模式启动MongoDB有两种方法</p>\n</li>\n</ul>\n<blockquote>\n<p>命令行参数增加 <code>--auth</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod -f /mongodb/conf/mongo.conf --auth</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置文件中加上如下内容</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\">  <span class=\"attr\">authorization:</span> <span class=\"string\">enabled</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>启用鉴权之后，连接MongoDB的相关操作都需要提供身份认证</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongosh --host=127.0.0.1 --port=27017 -u root -p password --authenticationDatabase=admin</span><br><span class=\"line\"><span class=\"comment\"># -u: 用户名</span></span><br><span class=\"line\"><span class=\"comment\"># -p: 密码</span></span><br><span class=\"line\"><span class=\"comment\"># --authenticationDatabase: 指定认证数据库</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"mongosh连接mongodb-server端的方式\">mongosh连接mongodb server端的方式</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>参数方式</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以通过 mongosh --help 查看帮助</span></span><br><span class=\"line\">mongosh --host=127.0.0.1 --port=27017 -u root -p password --authenticationDatabase=admin</span><br><span class=\"line\"><span class=\"comment\"># 指定连接的数据库，这里指定连接到mydb数据库，如果不指定，默认连接到test数据库</span></span><br><span class=\"line\">mongosh mydb --host=127.0.0.1 --port=27017 -u root -p password --authenticationDatabase=admin</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>混合方式</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ip+端口方式连接</span></span><br><span class=\"line\">mongosh 127.0.0.1:27017</span><br><span class=\"line\"><span class=\"comment\"># ip+端口方式连接，后面可以加上各种参数配置</span></span><br><span class=\"line\">mongosh 127.0.0.1:27017 -u root -p password --authenticationDatabase=admin</span><br><span class=\"line\"><span class=\"comment\"># ip+端口方式连接，同时可以指定连接的数据库，这里指定连接到mydb数据库，如果不指定，默认连接到test数据库</span></span><br><span class=\"line\">mongosh 127.0.0.1:27017/mydb</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>uri方式</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongosh mongodb://127.0.0.1:27017</span><br><span class=\"line\"><span class=\"comment\"># 指定连接数据库</span></span><br><span class=\"line\">mongosh mongodb://127.0.0.1:27017/mydb</span><br><span class=\"line\"><span class=\"comment\"># 带认证方式连接</span></span><br><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://root:password@127.0.0.1:27017/mydb?authSource=admin&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 带认证方式连接，同时指定readPreference为primaryPreferred，即读取数据时优先从主节点读取数据</span></span><br><span class=\"line\">mongosh <span class=\"string\">&quot;mongodb://root:password@127.0.0.1:27019/mydb?authSource=admin&amp;readPreference=primaryPreferred&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>如果只是连接本机的server端，而且端口为27017，可以省略host和port</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongosh</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决连接MongoDB时出现的-vm-max-map-count-is-too-low-的问题\">解决连接MongoDB时出现的 vm.max_map_count is too low 的问题</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>默认的<code>vm.max_map_count</code>值为<code>65530</code>，如果需要开启MongoDB的分片功能，需要将<code>vm.max_map_count</code>设置为较高的值，通常推荐为<code>1048576</code></p>\n</li>\n<li class=\"lvl-2\">\n<p>查看当前<code>vm.max_map_count</code>的值</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl vm.max_map_count</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>临时增加<code>vm.max_map_count</code>的值</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -w vm.max_map_count=1048576</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>永久增加<code>vm.max_map_count</code>的值</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改/etc/sysctl.conf文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;vm.max_map_count = 1048576&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"comment\"># 使配置生效</span></span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>重启MongoDB才会生效</p>\n</li>\n</ul>\n<h2 id=\"MongoDB-Database-Tools\">MongoDB Database Tools</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>MongoDB Database Tools是MongoDB官方提供的数据库管理工具，可以用于管理MongoDB数据库，包括MongoDB的备份、恢复、监控等功能。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://www.mongodb.com/try/download/database-tools\">MongoDB Database Tools的下载地址</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载安装包</span></span><br><span class=\"line\">wget https://fastdl.mongodb.org/tools/db/mongodb-database-tools-rhel80-x86_64-100.9.4.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压安装包</span></span><br><span class=\"line\">tar -xvzf mongodb-database-tools-rhel80-x86_64-100.9.4.tgz</span><br><span class=\"line\"><span class=\"comment\"># 创建软连接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s mongodb-database-tools-rhel80-x86_64-100.9.4 /mongodb/tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在/etc/profile文件中配置PATH环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/mongodb/tools/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"comment\"># 使配置生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>MongoDB Database Tools常用命令，使用方法请查看<a href=\"https://www.mongodb.com/docs/database-tools/\">官方文档</a></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>文件名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mongostat</td>\n<td>数据库性能监控工具</td>\n</tr>\n<tr>\n<td>mongotop</td>\n<td>热点表监控工具</td>\n</tr>\n<tr>\n<td>mongodump</td>\n<td>数据库逻辑备份工具</td>\n</tr>\n<tr>\n<td>mongorestore</td>\n<td>数据库逻辑恢复工具</td>\n</tr>\n<tr>\n<td>mongoexport</td>\n<td>数据导出工具</td>\n</tr>\n<tr>\n<td>mongoimport</td>\n<td>数据导入工具</td>\n</tr>\n<tr>\n<td>bsondump</td>\n<td>BSON格式转换工具</td>\n</tr>\n<tr>\n<td>mongofiles</td>\n<td>GridFS文件工具</td>\n</tr>\n</tbody>\n</table>\n","content_text":"摘要 本文介绍Linux下MongoDB7.0的安装 MongoDB官方文档 本文基于CentOS8(x86_64) MongoDB 7.0新特性 2024年8月15日，MongoDB正式发布7.0版本，截止目前最新版本为7.0.6。 MongoDB7.0特性 阿里云关于MongoDB7.0的特性说明，该文档中也包含MongoDB其它版本的特性说明 MongoDB Software Lifecycle Schedules 安装MongoDB mongodb的安装方法可以查看官方文档 MongoDB下载地址，选择合适的版本、平台和包类型 12345678910111213141516171819#下载MongoDBwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-7.0.6.tgz# 解压tar -zxvf mongodb-linux-x86_64-rhel80-7.0.6.tgz# 方便起见，创建软连接ln -s mongodb-linux-x86_64-rhel80-7.0.6 mongodb# 修改/etc/profile，添加环境变量，方便执行MongoDB命令export MONGODB_HOME=/usr/local/soft/mongodbPATH=$PATH:$MONGODB_HOME/bin#重新加载环境变量source /etc/profile#查看版本，检查命令是否可用mongod --version#创建dbpath和logpath的存储目录mkdir -p /mongodb/data /mongodb/log 安装mongoDB时可能遇到的问题 启动mongodb服务时，提示mongod: error while loading shared libraries: libcrypto.so.1.1: cannot open shared object file: No such file or directory 解决方法： 12345678wget https://www.openssl.org/source/openssl-1.1.1w.tar.gztar -zxvf openssl-1.1.1w.tar.gzcd openssl-1.1.1w./config# 如果make时提示 /bin/sh: gcc: command not found，需要先安装gcc：sudo yum install gcc -ymake &amp;&amp; make installln -s /usr/local/lib64/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1ln -s /usr/local/lib64/libssl.so.1.1 /usr/lib64/libssl.so.1.1 启动mongodb服务 命令参数启动 1234567mongod --port=27017 --dbpath=/mongodb/data --logpath=/mongodb/log/mongodb.log --bind_ip=0.0.0.0 --fork # 参数说明 --port: 指定端口，默认为27017 --dbpath: 指定数据文件存放目录 --logpath: 指定日志文件，注意是指定文件不是目录 --bind_ip: 默认只监听localhost网卡 --fork: 后台启动 也可以将上面的参数写到配置文件中，如/mongodb/conf/mongo.conf文件，必须是yaml格式 1234567891011121314systemLog: destination: file path: /mongodb/log/mongodb.log # log path logAppend: truestorage: dbPath: /mongodb/data # data directory engine: wiredTiger #存储引擎，默认值就是wiredTiger journal: #journal日志配置 commitIntervalMs: 1 #mongod进程在日志操作之间允许的最大时间（以毫秒为单位）。值可以从1到500毫秒不等。较低的值会增加日志的耐用性，而牺牲了磁盘性能。在WiredTiger上，默认的日志提交间隔是100毫秒。此外，包含或暗示j:true的写入将导致期刊立即同步。net: bindIp: 0.0.0.0 port: 27017processManagement: fork: true 将命令行参数直接转换为yaml:--outputConfig 1$ mongod --port=27017 --dbpath=/mongodb/data --logpath=/mongodb/log/mongodb.log --bind_ip=0.0.0.0 --fork --outputConfig 1234567891011net: bindIp: 0.0.0.0 port: 27017outputConfig: trueprocessManagement: fork: truestorage: dbPath: /mongodb/datasystemLog: destination: file path: /mongodb/log/mongodb.log 删除outputConfig: true这一行，然后将其余内容复制到mongo.conf中 关于配置参数的详细信息可以查看官方文档 12345# 启动mongo服务mongod -f /mongodb/conf/mongo.conf# 关闭mongo服务，注意：macos下不支持 --shutdownmongod -f /mongodb/conf/mongo.conf --shutdown shell客户端mongosh 从mongodb6开始不再支持mongo命令，而是需要使用mongosh命令，关于mongosh命令的使用可以查看官方文档 mongosh命令的使用方式与mongo命令基本一致 下载地址：mongosh下载地址 1234567891011# 下载安装包wget https://downloads.mongodb.com/compass/mongodb-mongosh-2.1.5.x86_64.rpm# 安装yum install -y mongodb-mongosh-2.1.5.x86_64.rpm# 查看版本mongosh --version# 连接mongodb server端mongosh --host=127.0.0.1 --port=27017# --host: mongodb server端ip地址# --port: mongodb server端口 mongosh常用命令 命令 说明 show dbs 或 show databases 显示数据库 use 数据库名 切换数据库，如果不存在创建数据库 db.dropDatabase() 删除数据库 show collections 或 show tables 显示当前数据库的集合列表 db.集合名.stats() 查看集合详情 db.集合名.drop() 删除集合 show users 显示当前数据库的用户列表 show roles 显示当前数据库的角色列表 show profile 显示最近发生的操作 load(“xxx.js”) 执行一个JavaScript脚本文件 exit 或 quit 退出 help 查看mongodb支持哪些命令 db.help() 查询当前数据库支持的方法 db.集合名.help() 显示集合的帮助信息 db.version() 查看数据库版本 cls 清屏 db.shutdownServer() 关闭mongodb server端 安全认证 创建管理员 123456789101112# 设置管理员用户名密码需要切换到admin库use admin#显示可设置权限show roles#创建管理员，授予root角色db.createUser(&#123;user:&quot;root&quot;,pwd:&quot;password&quot;,roles:[&quot;root&quot;]&#125;)#查看当前数据库所有用户信息show users#显示所有用户db.system.users.find() 常用角色 权限名 描述 read 允许用户读取指定数据库 readWrite 允许用户读写指定数据库 dbAdmin 允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile dbOwner 允许用户在指定数据库中执行任意操作，增、删、改、查等 userAdmin 允许用户向system.users集合写入，可以在指定数据库里创建、删除和管理用户 clusterAdmin 只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限 readAnyDatabase 只在admin数据库中可用，赋予用户所有数据库的读权限 readWriteAnyDatabase 只在admin数据库中可用，赋予用户所有数据库的读写权限 userAdminAnyDatabase 只在admin数据库中可用，赋予用户所有数据库的userAdmin权限 dbAdminAnyDatabase 只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限 root 只在admin数据库中可用。超级账号，超级权限 创建数据库用户 1234567891011121314151617admin&gt; use mydbswitched to db mydbmydb&gt; db.createUser(&#123;user:&quot;mytest&quot;,pwd:&quot;123456&quot;,roles:[&quot;dbOwner&quot;]&#125;)&#123; ok: 1 &#125;mydb&gt; show tablesmydb&gt; show users[ &#123; _id: &#x27;mydb.mytest&#x27;, userId: UUID(&#x27;8bc42a74-5d84-4849-af25-09fdcbdfd03a&#x27;), user: &#x27;mytest&#x27;, db: &#x27;mydb&#x27;, roles: [ &#123; role: &#x27;dbOwner&#x27;, db: &#x27;mydb&#x27; &#125; ], mechanisms: [ &#x27;SCRAM-SHA-1&#x27;, &#x27;SCRAM-SHA-256&#x27; ] &#125;] 重置用户密码 123456mydb&gt; db.changeUserPassword(&quot;mytest&quot;, &quot;password&quot;)&#123; ok: 1 &#125;# 或者mydb&gt; db.updateUser(&quot;mytest&quot;, &#123;pwd: &quot;password&quot;&#125;)&#123; ok: 1 &#125; 重新赋予用户角色 123456# 假设已经创建了用户mytest，需要重新赋予其角色db.grantRolesToUser( &quot;mytest&quot; , [ &#123; role: &quot;clusterAdmin&quot;, db: &quot;admin&quot; &#125; , &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot;&#125;, &#123; role: &quot;readWriteAnyDatabase&quot;, db: &quot;admin&quot;&#125; ]) 删除用户 1234mydb&gt; db.dropUser(&quot;mytest&quot;)&#123; ok: 1 &#125;mydb&gt; show users[] MongoDB启用鉴权 默认情况下，MongoDB不会启用鉴权，以鉴权模式启动MongoDB有两种方法 命令行参数增加 --auth 1mongod -f /mongodb/conf/mongo.conf --auth 配置文件中加上如下内容 12security: authorization: enabled 启用鉴权之后，连接MongoDB的相关操作都需要提供身份认证 1234mongosh --host=127.0.0.1 --port=27017 -u root -p password --authenticationDatabase=admin# -u: 用户名# -p: 密码# --authenticationDatabase: 指定认证数据库 mongosh连接mongodb server端的方式 参数方式 1234# 可以通过 mongosh --help 查看帮助mongosh --host=127.0.0.1 --port=27017 -u root -p password --authenticationDatabase=admin# 指定连接的数据库，这里指定连接到mydb数据库，如果不指定，默认连接到test数据库mongosh mydb --host=127.0.0.1 --port=27017 -u root -p password --authenticationDatabase=admin 混合方式 123456# ip+端口方式连接mongosh 127.0.0.1:27017# ip+端口方式连接，后面可以加上各种参数配置mongosh 127.0.0.1:27017 -u root -p password --authenticationDatabase=admin# ip+端口方式连接，同时可以指定连接的数据库，这里指定连接到mydb数据库，如果不指定，默认连接到test数据库mongosh 127.0.0.1:27017/mydb uri方式 1234567mongosh mongodb://127.0.0.1:27017# 指定连接数据库mongosh mongodb://127.0.0.1:27017/mydb# 带认证方式连接mongosh &quot;mongodb://root:password@127.0.0.1:27017/mydb?authSource=admin&quot;# 带认证方式连接，同时指定readPreference为primaryPreferred，即读取数据时优先从主节点读取数据mongosh &quot;mongodb://root:password@127.0.0.1:27019/mydb?authSource=admin&amp;readPreference=primaryPreferred&quot; 如果只是连接本机的server端，而且端口为27017，可以省略host和port 1mongosh 解决连接MongoDB时出现的 vm.max_map_count is too low 的问题 默认的vm.max_map_count值为65530，如果需要开启MongoDB的分片功能，需要将vm.max_map_count设置为较高的值，通常推荐为1048576 查看当前vm.max_map_count的值 1sysctl vm.max_map_count 临时增加vm.max_map_count的值 1sysctl -w vm.max_map_count=1048576 永久增加vm.max_map_count的值 1234# 修改/etc/sysctl.conf文件echo &quot;vm.max_map_count = 1048576&quot; &gt;&gt; /etc/sysctl.conf# 使配置生效sysctl -p 重启MongoDB才会生效 MongoDB Database Tools MongoDB Database Tools是MongoDB官方提供的数据库管理工具，可以用于管理MongoDB数据库，包括MongoDB的备份、恢复、监控等功能。 MongoDB Database Tools的下载地址 1234567891011# 下载安装包wget https://fastdl.mongodb.org/tools/db/mongodb-database-tools-rhel80-x86_64-100.9.4.tgz# 解压安装包tar -xvzf mongodb-database-tools-rhel80-x86_64-100.9.4.tgz# 创建软连接ln -s mongodb-database-tools-rhel80-x86_64-100.9.4 /mongodb/tools# 在/etc/profile文件中配置PATH环境变量export PATH=/mongodb/tools/bin:$PATH# 使配置生效source /etc/profile MongoDB Database Tools常用命令，使用方法请查看官方文档 文件名称 作用 mongostat 数据库性能监控工具 mongotop 热点表监控工具 mongodump 数据库逻辑备份工具 mongorestore 数据库逻辑恢复工具 mongoexport 数据导出工具 mongoimport 数据导入工具 bsondump BSON格式转换工具 mongofiles GridFS文件工具","summary":"摘要 本文介绍Linux下MongoDB7.0的安装 MongoDB官方文档 本文基于CentOS8(x86_64)","date_published":"2024-03-01T13:30:05.000Z","tags":["技术","linux","mongodb","mongodb"]},{"id":"https://blog.hanqunfeng.com/2024/02/28/linux-command13-echo-printf/","url":"https://blog.hanqunfeng.com/2024/02/28/linux-command13-echo-printf/","title":"Linux常用命令--echo与printf","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在编写 shell 脚本时，echo 和 printf 是两个常用的命令，用于输出信息到标准输出设备。虽然它们看似简单，但深入理解它们的使用方式和内部机制对于编写高效、可读性强的脚本至关重要。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"echo-命令\">echo 命令</h2>\n<h3 id=\"基本语法和用法\">基本语法和用法</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>echo</code> 命令的基本语法为：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> [选项] [字符串或变量]</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>参数和选项</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-n：不换行输出。</span><br><span class=\"line\">-e：解释转义字符。</span><br><span class=\"line\">-E：禁止解释转义字符。</span><br><span class=\"line\"></span><br><span class=\"line\">常见的转义字符包括 \\n（换行）、\\t（制表符）等。</span><br></pre></td></tr></table></figure>\n<h3 id=\"实际应用示例\">实际应用示例</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 打印一个文本消息。注意：引号是可选的</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 打印一个带环境变量的消息</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;My path is <span class=\"variable\">$PATH</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 打印一个不带尾随换行符的消息</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 将消息追加到文件中</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Hello World&quot;</span> &gt;&gt; file.txt</span><br><span class=\"line\"></span><br><span class=\"line\">- 启用反斜杠转义（特殊字符）的解释</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;Column 1\\tColumn 2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 打印最后一个执行命令的退出状态</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> $?</span><br></pre></td></tr></table></figure>\n<h3 id=\"echo输出颜色化文本\">echo输出颜色化文本</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\e[1;31mError:\\e[0m Something went wrong.&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[1;31mError:\\033[0m Something went wrong.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 说明：</span></span><br><span class=\"line\">\\e[1;31m：这部分控制文本的颜色和样式。</span><br><span class=\"line\">其中：</span><br><span class=\"line\">    \\e 表示这是一个转义字符，它是 ANSI 转义序列的起始，后跟一系列用于控制文本颜色、样式等的数字和字符。这里\\e也可以用\\033替代。</span><br><span class=\"line\">    1 表示设置文本为粗体（或者称为高亮）。</span><br><span class=\"line\">    31 表示设置文本颜色为红色。不同的数字代表不同的颜色，这里的 31 对应红色。</span><br><span class=\"line\"></span><br><span class=\"line\">\\e[0m：这部分重置文本格式为默认值。这样做是为了确保在之后的输出中文本样式不受之前的影响。</span><br><span class=\"line\"></span><br><span class=\"line\">因此，这条命令会输出一个红色的“Error:”，接着是一个空格，然后是普通文本“Something went wrong.”。整体效果是，错误消息以红色高亮显示，使其在输出中更加醒目。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">颜色：</span><br><span class=\"line\">    30：黑色</span><br><span class=\"line\">    31：红色</span><br><span class=\"line\">    32：绿色</span><br><span class=\"line\">    33：黄色</span><br><span class=\"line\">    34：蓝色</span><br><span class=\"line\">    35：紫色</span><br><span class=\"line\">    36：青色</span><br><span class=\"line\">    37：白色</span><br><span class=\"line\"></span><br><span class=\"line\">样式：</span><br><span class=\"line\">    0：重置所有样式（默认值）</span><br><span class=\"line\">    1：粗体（或高亮）</span><br><span class=\"line\">    2：暗色（不常见，视终端而定）</span><br><span class=\"line\">    3：斜体（不常见，视终端而定）</span><br><span class=\"line\">    4：下划线</span><br><span class=\"line\">    5：闪烁（不常见，视终端而定）</span><br><span class=\"line\">    7：反显（前景色与背景色交换）</span><br><span class=\"line\">    8：隐藏（文本不可见）</span><br><span class=\"line\"></span><br><span class=\"line\">这些数字和字符可以单独使用，比如\\e[1m 表示加粗，\\e[31m 表示设置文本颜色为红色。</span><br><span class=\"line\">也可以组合使用，比如 \\e[1;31m 表示设置文本为红色并加粗，中间用分号隔开。</span><br></pre></td></tr></table></figure>\n<h2 id=\"printf-命令\">printf 命令</h2>\n<h3 id=\"基本语法和用法-2\">基本语法和用法</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>printf</code> 命令的基本语法为：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> [格式化字符串] [参数]</span><br></pre></td></tr></table></figure>\n<h3 id=\"实际应用示例-2\">实际应用示例</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 打印文本消息：</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;%s\\n&quot;</span> <span class=\"string\">&quot;Hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 以蓝色粗体打印整数：使用方法同<span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\e[1;34m%.3d\\e[0m\\n&quot;</span> 42</span><br><span class=\"line\"></span><br><span class=\"line\">- 打印带有Unicode Euro符号的浮点数：</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\u20AC %.2f\\n&quot;</span> 123.4</span><br><span class=\"line\"></span><br><span class=\"line\">- 打印由变量组成的文本消息：</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;var1: %s\\tvar2: %s\\n&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$var1</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$var2</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 将格式化的消息存储在变量中：</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> -v myvar <span class=\"string\">&quot;This is %s = %d\\n&quot;</span> <span class=\"string\">&quot;a year&quot;</span> 2016</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$myvar</span></span><br><span class=\"line\">    This is a year = 2016</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p>在 printf 命令中，支持的格式化符号用于指定输出的格式，包括整数、浮点数、字符串等。<br>\n以下是常用的格式化符号及其使用示例：</p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>1.整数格式化符号：</p>\n<ul class=\"lvl-3\">\n<li class=\"lvl-6\">%d：以十进制形式输出整数。</li>\n<li class=\"lvl-6\">%.nd：指定数字占几位，不足部分前面补0。</li>\n<li class=\"lvl-6\">%o：以八进制形式输出整数。</li>\n<li class=\"lvl-6\">%x 或 %X：以十六进制形式输出整数（小写或大写）。</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d\\n&quot;</span> 42      <span class=\"comment\"># 输出：42</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%.3d\\n&quot;</span> 42    <span class=\"comment\"># 输出：042</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%o\\n&quot;</span> 42      <span class=\"comment\"># 输出：52</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%x\\n&quot;</span> 42      <span class=\"comment\"># 输出：2a</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%X\\n&quot;</span> 42      <span class=\"comment\"># 输出：2A</span></span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>2.浮点数格式化符号：</p>\n<ul class=\"lvl-3\">\n<li class=\"lvl-6\">%f：以十进制形式输出浮点数。</li>\n<li class=\"lvl-6\">%.nf：指定小数点后保留 n 位小数。</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%f\\n&quot;</span> 3.14159      <span class=\"comment\"># 输出：3.141590</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%.2f\\n&quot;</span> 3.14159    <span class=\"comment\"># 输出：3.14</span></span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>3.字符串格式化符号：</p>\n<ul class=\"lvl-3\">\n<li class=\"lvl-6\">%c：输出单个字符。</li>\n<li class=\"lvl-6\">%s：输出字符串。</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%c\\n&quot;</span> <span class=\"string\">&#x27;A&#x27;</span>      <span class=\"comment\"># 输出：A</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%s\\n&quot;</span> <span class=\"string\">&quot;Hello&quot;</span>  <span class=\"comment\"># 输出：Hello</span></span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>4.其他格式化符号：</p>\n<ul class=\"lvl-3\">\n<li class=\"lvl-6\">%p：以十六进制形式输出指针地址。</li>\n<li class=\"lvl-6\">%u：输出无符号整数。</li>\n<li class=\"lvl-6\">%e 或 %E：以科学计数法形式输出浮点数（小写或大写）。</li>\n<li class=\"lvl-6\">%g 或 %G：根据实际情况自动选择 %f 或 %e 格式输出浮点数（小写或大写）。</li>\n<li class=\"lvl-6\">%%：输出一个百分号。</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%p\\n&quot;</span> <span class=\"variable\">$var</span>           <span class=\"comment\"># 输出：0x7ffeefbff748 （变量 var 的地址）</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%u\\n&quot;</span> -42            <span class=\"comment\"># 输出：4294967254</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%e\\n&quot;</span> 123.456        <span class=\"comment\"># 输出：1.234560e+02</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%E\\n&quot;</span> 123.456        <span class=\"comment\"># 输出：1.234560E+02</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%g\\n&quot;</span> 123.456        <span class=\"comment\"># 输出：123.456</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%G\\n&quot;</span> 123.456        <span class=\"comment\"># 输出：123.456</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;100%%\\n&quot;</span>             <span class=\"comment\"># 输出：100%</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</div>\n<h2 id=\"不同进制之间进行相互转换\">不同进制之间进行相互转换</h2>\n<h3 id=\"10进制转其它进制\">10进制转其它进制</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 10进制转2进制，obase=2 指定输出进制为二进制，默认为10进制。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=2; 255&quot;</span> | bc <span class=\"comment\"># 11111111</span></span><br><span class=\"line\"><span class=\"comment\"># printf不支持到二进制的转换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 10进制转8进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=8; 255&quot;</span> | bc <span class=\"comment\"># 377</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%o\\n&quot;</span> 255 <span class=\"comment\"># 377，%o 表示八进制数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 10进制转16进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=16; 255&quot;</span> | bc <span class=\"comment\"># FF</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%x\\n&quot;</span> <span class=\"string\">&quot;255&quot;</span> <span class=\"comment\"># ff，%x 表示十六进制数，小写</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%X\\n&quot;</span> <span class=\"string\">&quot;255&quot;</span> <span class=\"comment\"># FF，%X 表示十六进制数，大写</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2进制转其它进制\">2进制转其它进制</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2进制转10进制，ibase=2 指定输入进制为二进制，默认为10进制。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;ibase=2; 11111111&quot;</span> | bc <span class=\"comment\"># 255</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $((<span class=\"number\">2#11111111</span>)) <span class=\"comment\"># 255，内置的算术运算 $((...))，可以实现其它进制转10进制</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d\\n&quot;</span> <span class=\"string\">&quot;0b11111111&quot;</span> <span class=\"comment\"># 255，%d 表示十进制数，对于二进制数，你需要在数字前面加上 0b 的前缀</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d\\n&quot;</span> $((<span class=\"number\">2#11111111</span>)) <span class=\"comment\"># 255</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2进制转16进制，两个同时出现时要先声明obase，再声明ibase，否则输出结果错误</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=16; ibase=2; 11111111&quot;</span> | bc  <span class=\"comment\"># FF</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%X\\n&quot;</span> <span class=\"string\">&quot;0b11111111&quot;</span> <span class=\"comment\"># FF</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%x\\n&quot;</span> <span class=\"string\">&quot;0b11111111&quot;</span> <span class=\"comment\"># ff</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%X\\n&quot;</span> $((<span class=\"number\">2#11111111</span>)) <span class=\"comment\"># FF</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%x\\n&quot;</span> $((<span class=\"number\">2#11111111</span>)) <span class=\"comment\"># ff</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2进制转8进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=8; ibase=2; 11111111&quot;</span> | bc <span class=\"comment\"># 377</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%o\\n&quot;</span> <span class=\"string\">&quot;0b11111111&quot;</span> <span class=\"comment\"># 377</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%o\\n&quot;</span> $((<span class=\"number\">2#11111111</span>)) <span class=\"comment\"># 377</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8进制转其它进制\">8进制转其它进制</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 8进制转10进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;ibase=8; 377&quot;</span> | bc <span class=\"comment\"># 255</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $((<span class=\"number\">8#377</span>)) <span class=\"comment\"># 255</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d\\n&quot;</span> $((<span class=\"number\">8#377</span>))  <span class=\"comment\"># 255</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 8进制转2进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=2; ibase=8; 377&quot;</span> | bc <span class=\"comment\"># 11111111</span></span><br><span class=\"line\"><span class=\"comment\"># printf不支持到二进制的转换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 8进制转16进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=16; ibase=8; 377&quot;</span> | bc <span class=\"comment\"># FF</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%X\\n&quot;</span> <span class=\"string\">&quot;<span class=\"subst\">$((8#377)</span>)&quot;</span> <span class=\"comment\"># FF</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%x\\n&quot;</span> <span class=\"string\">&quot;<span class=\"subst\">$((8#377)</span>)&quot;</span> <span class=\"comment\"># ff</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"16进制转其它进制\">16进制转其它进制</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 16进制转10进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;ibase=16; FF&quot;</span> | bc <span class=\"comment\"># 255</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $((<span class=\"number\">16</span>#FF)) <span class=\"comment\"># 255</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d\\n&quot;</span> <span class=\"string\">&quot;0xFF&quot;</span>  <span class=\"comment\"># 255，%d 表示十进制数，对于十六进制数，你需要在数字前面加上 0x 的前缀</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d\\n&quot;</span> $((<span class=\"number\">16</span>#FF)) <span class=\"comment\"># 255</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 16进制转2进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=2; ibase=16; FF&quot;</span> | bc <span class=\"comment\"># 11111111</span></span><br><span class=\"line\"><span class=\"comment\"># printf不支持到二进制的转换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 16进制转8进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=8; ibase=16; FF&quot;</span> | bc <span class=\"comment\"># 377</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%o\\n&quot;</span> <span class=\"string\">&quot;0xFF&quot;</span> <span class=\"comment\"># 377</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%o\\n&quot;</span> <span class=\"string\">&quot;<span class=\"subst\">$((16#FF)</span>)&quot;</span> <span class=\"comment\"># 377</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"echo-与-printf-的比较\">echo 与 printf 的比较</h2>\n<h3 id=\"输出效果的比较\">输出效果的比较</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>echo 会自动换行，而 printf 需要显式指定换行符。</p>\n</li>\n<li class=\"lvl-2\">\n<p>printf 提供更灵活的格式化输出方式。</p>\n</li>\n</ul>\n<h3 id=\"性能比较\">性能比较</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在大量输出时，echo 通常比 printf 更高效。</p>\n</li>\n</ul>\n<h3 id=\"适用场景的选择\">适用场景的选择</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>简单文本输出场景，使用 echo。</p>\n</li>\n<li class=\"lvl-2\">\n<p>需要格式化输出或者更精确控制输出格式时，使用 printf。</p>\n</li>\n</ul>\n","content_text":"摘要 在编写 shell 脚本时，echo 和 printf 是两个常用的命令，用于输出信息到标准输出设备。虽然它们看似简单，但深入理解它们的使用方式和内部机制对于编写高效、可读性强的脚本至关重要。 echo 命令 基本语法和用法 echo 命令的基本语法为： 1echo [选项] [字符串或变量] 参数和选项 12345-n：不换行输出。-e：解释转义字符。-E：禁止解释转义字符。常见的转义字符包括 \\n（换行）、\\t（制表符）等。 实际应用示例 1234567891011121314151617- 打印一个文本消息。注意：引号是可选的 echo &quot;Hello World&quot;- 打印一个带环境变量的消息 echo &quot;My path is $PATH&quot;- 打印一个不带尾随换行符的消息 echo -n &quot;Hello World&quot;- 将消息追加到文件中 echo &quot;Hello World&quot; &gt;&gt; file.txt- 启用反斜杠转义（特殊字符）的解释 echo -e &quot;Column 1\\tColumn 2&quot;- 打印最后一个执行命令的退出状态 echo $? echo输出颜色化文本 1234567891011121314151617181920212223242526272829303132333435363738echo -e &quot;\\e[1;31mError:\\e[0m Something went wrong.&quot;# 或echo -e &quot;\\033[1;31mError:\\033[0m Something went wrong.&quot;# 说明：\\e[1;31m：这部分控制文本的颜色和样式。其中： \\e 表示这是一个转义字符，它是 ANSI 转义序列的起始，后跟一系列用于控制文本颜色、样式等的数字和字符。这里\\e也可以用\\033替代。 1 表示设置文本为粗体（或者称为高亮）。 31 表示设置文本颜色为红色。不同的数字代表不同的颜色，这里的 31 对应红色。\\e[0m：这部分重置文本格式为默认值。这样做是为了确保在之后的输出中文本样式不受之前的影响。因此，这条命令会输出一个红色的“Error:”，接着是一个空格，然后是普通文本“Something went wrong.”。整体效果是，错误消息以红色高亮显示，使其在输出中更加醒目。颜色： 30：黑色 31：红色 32：绿色 33：黄色 34：蓝色 35：紫色 36：青色 37：白色样式： 0：重置所有样式（默认值） 1：粗体（或高亮） 2：暗色（不常见，视终端而定） 3：斜体（不常见，视终端而定） 4：下划线 5：闪烁（不常见，视终端而定） 7：反显（前景色与背景色交换） 8：隐藏（文本不可见）这些数字和字符可以单独使用，比如\\e[1m 表示加粗，\\e[31m 表示设置文本颜色为红色。也可以组合使用，比如 \\e[1;31m 表示设置文本为红色并加粗，中间用分号隔开。 printf 命令 基本语法和用法 printf 命令的基本语法为： 1printf [格式化字符串] [参数] 实际应用示例 12345678910111213141516- 打印文本消息： printf &quot;%s\\n&quot; &quot;Hello world&quot;- 以蓝色粗体打印整数：使用方法同echo printf &quot;\\e[1;34m%.3d\\e[0m\\n&quot; 42- 打印带有Unicode Euro符号的浮点数： printf &quot;\\u20AC %.2f\\n&quot; 123.4- 打印由变量组成的文本消息： printf &quot;var1: %s\\tvar2: %s\\n&quot; &quot;$var1&quot; &quot;$var2&quot;- 将格式化的消息存储在变量中： printf -v myvar &quot;This is %s = %d\\n&quot; &quot;a year&quot; 2016 echo $myvar This is a year = 2016 在 printf 命令中，支持的格式化符号用于指定输出的格式，包括整数、浮点数、字符串等。 以下是常用的格式化符号及其使用示例： 1.整数格式化符号： %d：以十进制形式输出整数。 %.nd：指定数字占几位，不足部分前面补0。 %o：以八进制形式输出整数。 %x 或 %X：以十六进制形式输出整数（小写或大写）。 12345printf &quot;%d\\n&quot; 42 # 输出：42printf &quot;%.3d\\n&quot; 42 # 输出：042printf &quot;%o\\n&quot; 42 # 输出：52printf &quot;%x\\n&quot; 42 # 输出：2aprintf &quot;%X\\n&quot; 42 # 输出：2A 2.浮点数格式化符号： %f：以十进制形式输出浮点数。 %.nf：指定小数点后保留 n 位小数。 12printf &quot;%f\\n&quot; 3.14159 # 输出：3.141590printf &quot;%.2f\\n&quot; 3.14159 # 输出：3.14 3.字符串格式化符号： %c：输出单个字符。 %s：输出字符串。 12printf &quot;%c\\n&quot; &#x27;A&#x27; # 输出：Aprintf &quot;%s\\n&quot; &quot;Hello&quot; # 输出：Hello 4.其他格式化符号： %p：以十六进制形式输出指针地址。 %u：输出无符号整数。 %e 或 %E：以科学计数法形式输出浮点数（小写或大写）。 %g 或 %G：根据实际情况自动选择 %f 或 %e 格式输出浮点数（小写或大写）。 %%：输出一个百分号。 1234567printf &quot;%p\\n&quot; $var # 输出：0x7ffeefbff748 （变量 var 的地址）printf &quot;%u\\n&quot; -42 # 输出：4294967254printf &quot;%e\\n&quot; 123.456 # 输出：1.234560e+02printf &quot;%E\\n&quot; 123.456 # 输出：1.234560E+02printf &quot;%g\\n&quot; 123.456 # 输出：123.456printf &quot;%G\\n&quot; 123.456 # 输出：123.456printf &quot;100%%\\n&quot; # 输出：100% 不同进制之间进行相互转换 10进制转其它进制 123456789101112# 10进制转2进制，obase=2 指定输出进制为二进制，默认为10进制。echo &quot;obase=2; 255&quot; | bc # 11111111# printf不支持到二进制的转换# 10进制转8进制echo &quot;obase=8; 255&quot; | bc # 377printf &quot;%o\\n&quot; 255 # 377，%o 表示八进制数# 10进制转16进制echo &quot;obase=16; 255&quot; | bc # FFprintf &quot;%x\\n&quot; &quot;255&quot; # ff，%x 表示十六进制数，小写printf &quot;%X\\n&quot; &quot;255&quot; # FF，%X 表示十六进制数，大写 2进制转其它进制 1234567891011121314151617# 2进制转10进制，ibase=2 指定输入进制为二进制，默认为10进制。echo &quot;ibase=2; 11111111&quot; | bc # 255echo $((2#11111111)) # 255，内置的算术运算 $((...))，可以实现其它进制转10进制printf &quot;%d\\n&quot; &quot;0b11111111&quot; # 255，%d 表示十进制数，对于二进制数，你需要在数字前面加上 0b 的前缀printf &quot;%d\\n&quot; $((2#11111111)) # 255# 2进制转16进制，两个同时出现时要先声明obase，再声明ibase，否则输出结果错误echo &quot;obase=16; ibase=2; 11111111&quot; | bc # FFprintf &quot;%X\\n&quot; &quot;0b11111111&quot; # FFprintf &quot;%x\\n&quot; &quot;0b11111111&quot; # ffprintf &quot;%X\\n&quot; $((2#11111111)) # FFprintf &quot;%x\\n&quot; $((2#11111111)) # ff# 2进制转8进制echo &quot;obase=8; ibase=2; 11111111&quot; | bc # 377printf &quot;%o\\n&quot; &quot;0b11111111&quot; # 377printf &quot;%o\\n&quot; $((2#11111111)) # 377 8进制转其它进制 12345678910111213# 8进制转10进制echo &quot;ibase=8; 377&quot; | bc # 255echo $((8#377)) # 255printf &quot;%d\\n&quot; $((8#377)) # 255# 8进制转2进制echo &quot;obase=2; ibase=8; 377&quot; | bc # 11111111# printf不支持到二进制的转换# 8进制转16进制echo &quot;obase=16; ibase=8; 377&quot; | bc # FFprintf &quot;%X\\n&quot; &quot;$((8#377))&quot; # FFprintf &quot;%x\\n&quot; &quot;$((8#377))&quot; # ff 16进制转其它进制 1234567891011121314# 16进制转10进制echo &quot;ibase=16; FF&quot; | bc # 255echo $((16#FF)) # 255printf &quot;%d\\n&quot; &quot;0xFF&quot; # 255，%d 表示十进制数，对于十六进制数，你需要在数字前面加上 0x 的前缀printf &quot;%d\\n&quot; $((16#FF)) # 255# 16进制转2进制echo &quot;obase=2; ibase=16; FF&quot; | bc # 11111111# printf不支持到二进制的转换# 16进制转8进制echo &quot;obase=8; ibase=16; FF&quot; | bc # 377printf &quot;%o\\n&quot; &quot;0xFF&quot; # 377printf &quot;%o\\n&quot; &quot;$((16#FF))&quot; # 377 echo 与 printf 的比较 输出效果的比较 echo 会自动换行，而 printf 需要显式指定换行符。 printf 提供更灵活的格式化输出方式。 性能比较 在大量输出时，echo 通常比 printf 更高效。 适用场景的选择 简单文本输出场景，使用 echo。 需要格式化输出或者更精确控制输出格式时，使用 printf。","summary":"摘要 在编写 shell 脚本时，echo 和 printf 是两个常用的命令，用于输出信息到标准输出设备。虽然它们看似简单，但深入理解它们的使用方式和内部机制对于编写高效、可读性强的脚本至关重要。","date_published":"2024-02-28T13:30:05.000Z","tags":["技术","linux","linux常用命令","linux常用命令"]},{"id":"https://blog.hanqunfeng.com/2024/02/23/macos-shell-useful/","url":"https://blog.hanqunfeng.com/2024/02/23/macos-shell-useful/","title":"MacOS下一些有用的脚本","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这里列举一些macos下一些有用的shell脚本</p>\n</li>\n<li class=\"lvl-2\">\n<p>与本文脚本对应的centos脚本可以参看<a href=\"https://gitee.com/hanqunfeng/centos-shell.git\">centos-shell</a></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"查看端口被哪个进程占用\">查看端口被哪个进程占用</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：port 授予执行权限</span></span><br><span class=\"line\"><span class=\"comment\">#功能：查询端口被哪个进程占用</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：port 8080</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\">port=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$port</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请加上端口作为参数，如：port 8080&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    lsof -i :<span class=\"variable\">$&#123;port&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"杀掉占用某个端口的进程\">杀掉占用某个端口的进程</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：killport 授予执行权限</span></span><br><span class=\"line\"><span class=\"comment\">#功能：关闭占用端口的进程</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：killport 8080</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请加上端口作为参数，如：killport 8080&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;kill  begin........&quot;</span></span><br><span class=\"line\">    pid=`port <span class=\"variable\">$1</span> | awk <span class=\"string\">&#x27;NR&gt;1 &#123;print $2&#125;&#x27;</span> | <span class=\"built_in\">sort</span> | <span class=\"built_in\">uniq</span>`</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$pid</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$pid</span>&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;No process running.&quot;</span></span><br><span class=\"line\">            <span class=\"comment\">#exit -1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;The process(<span class=\"variable\">$&#123;pid&#125;</span>) is running...&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">kill</span> <span class=\"variable\">$&#123;pid&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;kill process(<span class=\"variable\">$&#123;pid&#125;</span>) OK&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"本机端口通过跳板机转发到远程端口\">本机端口通过跳板机转发到远程端口</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：ssh_port 授予执行权限</span></span><br><span class=\"line\"><span class=\"comment\">#功能：本机端口通过跳板机转发到远程端口</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：</span></span><br><span class=\"line\"><span class=\"comment\"># ssh_port start 8080 10.10.2.2 80</span></span><br><span class=\"line\"><span class=\"comment\"># ssh_port stop 8080</span></span><br><span class=\"line\"><span class=\"comment\"># ssh_port status 8080</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">check</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">#验证参数是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;#@&#125;</span> &lt; 1 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入参数！&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;开启端口转发：ssh_port start 8080 10.10.2.2 80&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;关闭端口转发：ssh_port stop 8080&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;查看端口状态：ssh_port status 8080&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">check <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 工作目录</span></span><br><span class=\"line\">WORKDIR=<span class=\"string\">&quot;/Users/<span class=\"subst\">$(whoami)</span>/workdir&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 操作类型</span></span><br><span class=\"line\">operation=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地端口</span></span><br><span class=\"line\">local_port=<span class=\"string\">&quot;<span class=\"variable\">$2</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程 IP 地址</span></span><br><span class=\"line\">remote_ip=<span class=\"string\">&quot;<span class=\"variable\">$3</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 远程端口</span></span><br><span class=\"line\">remote_port=<span class=\"string\">&quot;<span class=\"variable\">$4</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SSH 控制套接字文件</span></span><br><span class=\"line\">sock_file=<span class=\"string\">&quot;<span class=\"variable\">$WORKDIR</span>/<span class=\"variable\">$local_port</span>.sock&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 跳板机，~/.ssh/config中的配置</span></span><br><span class=\"line\">jump_name=jump-machine</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;start port begin........&quot;</span></span><br><span class=\"line\">    pid=`port <span class=\"variable\">$local_port</span> | grep ssh | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$pid</span>&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\"># 建立连接</span></span><br><span class=\"line\">        ssh -nNT -S <span class=\"string\">&quot;<span class=\"variable\">$sock_file</span>&quot;</span> -L 127.0.0.1:<span class=\"variable\">$local_port</span>:<span class=\"variable\">$remote_ip</span>:<span class=\"variable\">$remote_port</span> <span class=\"variable\">$jump_name</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;ssh -nNT -S <span class=\"variable\">$&#123;sock_file&#125;</span> -L 127.0.0.1:<span class=\"variable\">$&#123;local_port&#125;</span>:<span class=\"variable\">$&#123;remote_ip&#125;</span>:<span class=\"variable\">$&#123;remote_port&#125;</span> <span class=\"variable\">$&#123;jump_name&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;start port success!&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;port is running.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;stop port begin........&quot;</span></span><br><span class=\"line\">    pid=`port <span class=\"variable\">$local_port</span> | grep ssh | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$pid</span>&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;No port running.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;The port (<span class=\"variable\">$&#123;pid&#125;</span>) is running...&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># kill -9 $pid</span></span><br><span class=\"line\">        ssh -S <span class=\"variable\">$sock_file</span> -O <span class=\"built_in\">exit</span> <span class=\"variable\">$jump_name</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;ssh -S <span class=\"variable\">$sock_file</span> -O exit <span class=\"variable\">$jump_name</span>&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;stop port (<span class=\"variable\">$&#123;pid&#125;</span>) success!&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">status</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;check status port begin........&quot;</span></span><br><span class=\"line\">    pid=`port <span class=\"variable\">$local_port</span> | grep ssh | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$pid</span>&quot;</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;No port running.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;The port (<span class=\"variable\">$&#123;pid&#125;</span>) is running...&quot;</span></span><br><span class=\"line\">        port <span class=\"variable\">$local_port</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$operation</span>&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># 判断操作类型</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$operation</span>&quot;</span> == <span class=\"string\">&quot;start&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\"># 建立连接</span></span><br><span class=\"line\">        start</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$operation</span>&quot;</span> == <span class=\"string\">&quot;stop&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">        stop</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$operation</span>&quot;</span> == <span class=\"string\">&quot;status&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">        status</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        check</span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看域名到期时间\">查看域名到期时间</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：check_domain 授予执行权限</span></span><br><span class=\"line\"><span class=\"comment\">#功能：检查域名到期时间</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：check_domain baidu.com google.com</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果：</span></span><br><span class=\"line\"><span class=\"comment\"># baidu.com，过期日期：2026-10-11</span></span><br><span class=\"line\"><span class=\"comment\"># 距离到期还有958天</span></span><br><span class=\"line\"><span class=\"comment\"># google.com，过期日期：2028-09-14</span></span><br><span class=\"line\"><span class=\"comment\"># 距离到期还有1662天</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#验证域名参数是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;#@&#125;</span> &lt; 1 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入域名，多个域名空格分隔，如：check_domain baidu.com google.com&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检测域名到期时间</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> domain <span class=\"keyword\">in</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span>;<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\">#取出域名过期时间</span></span><br><span class=\"line\">    expire_date=`whois <span class=\"variable\">$domain</span> | grep <span class=\"string\">&quot;Expiration Time&quot;</span> | awk <span class=\"string\">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$expire_date</span>&quot;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">        expire_date=`whois <span class=\"variable\">$domain</span> | grep <span class=\"string\">&#x27;Expiry Date&#x27;</span>| awk <span class=\"string\">&#x27;&#123;print $4&#125;&#x27;</span>| <span class=\"built_in\">cut</span> -d <span class=\"string\">&#x27;T&#x27;</span> -f 1`</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;domain&#125;</span>，过期日期：<span class=\"variable\">$&#123;expire_date&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#转换成时间戳</span></span><br><span class=\"line\">    <span class=\"comment\"># 1.linux</span></span><br><span class=\"line\">    <span class=\"comment\"># expire_date_timestamp=`date -d $expire_date +%s`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.macos</span></span><br><span class=\"line\">    <span class=\"comment\"># https://blog.csdn.net/zhw21w/article/details/126010972</span></span><br><span class=\"line\">    expire_date_timestamp=`<span class=\"built_in\">date</span> -j -f %Y-%m-%d <span class=\"variable\">$expire_date</span> +%s`</span><br><span class=\"line\">    <span class=\"comment\">#以时间戳的形式显示当前时间</span></span><br><span class=\"line\">    now=`<span class=\"built_in\">date</span> <span class=\"string\">&#x27;+%s&#x27;</span>`</span><br><span class=\"line\">    <span class=\"comment\">#域名到期剩余天数</span></span><br><span class=\"line\">    time_left=$[$[<span class=\"variable\">$expire_date_timestamp</span>-<span class=\"variable\">$now</span>]/86400]</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;距离到期还有<span class=\"variable\">$&#123;time_left&#125;</span>天&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看证书到期时间\">查看证书到期时间</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：ssl_check 授予执行权限</span></span><br><span class=\"line\"><span class=\"comment\">#功能：检查证书到期时间</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：ssl_check www.baidu.com www.google.com</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果：</span></span><br><span class=\"line\"><span class=\"comment\"># 证书：www.baidu.com，过期时间：2024-08-06 01:51:05</span></span><br><span class=\"line\"><span class=\"comment\"># 距离到期还有161天</span></span><br><span class=\"line\"><span class=\"comment\"># 证书：www.google.com，过期时间：2024-04-29 08:19:49</span></span><br><span class=\"line\"><span class=\"comment\"># 距离到期还有62天</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#验证证书参数是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;#@&#125;</span> &lt; 1 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;请输入证书，多个证书空格分隔，如：ssl_check www.baidu.com www.google.com&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取证书的有效时间</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> domain <span class=\"keyword\">in</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span>;<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\"># 这里在openssl x509 -noout -dates后面加上了2&gt;/dev/null，否则会打印告警信息：Warning: Reading certificate from stdin since no -in or -new option is given</span></span><br><span class=\"line\">    <span class=\"comment\"># 您可以忽略此警告。它只是表明您没有使用 -in 或 -new 选项指定输入文件，因此 OpenSSL 将从标准输入 (stdin) 读取证书。</span></span><br><span class=\"line\">    time=$(<span class=\"built_in\">echo</span> | openssl s_client  -connect  <span class=\"variable\">$domain</span>:443 2&gt;/dev/null | openssl x509 -noout -dates 2&gt;/dev/null |awk -F<span class=\"string\">&#x27;=&#x27;</span> <span class=\"string\">&#x27;NR==2&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">#echo $time</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#取出域名过期时间</span></span><br><span class=\"line\">    expire_date=`<span class=\"built_in\">env</span> LC_ALL=en_US.en <span class=\"built_in\">date</span> -j -f <span class=\"string\">&#x27;%b %d %H:%M:%S %Y GMT&#x27;</span> <span class=\"string\">&quot;<span class=\"variable\">$time</span>&quot;</span> <span class=\"string\">&#x27;+%Y-%m-%d %H:%M:%S&#x27;</span>`</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;证书：<span class=\"variable\">$domain</span>，过期时间：<span class=\"variable\">$expire_date</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    expire_date_timestamp=`<span class=\"built_in\">date</span> -j -f <span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span> <span class=\"variable\">$expire_date</span> +%s`</span><br><span class=\"line\">    <span class=\"comment\">#以时间戳的形式显示当前时间</span></span><br><span class=\"line\">    now=`<span class=\"built_in\">date</span> <span class=\"string\">&#x27;+%s&#x27;</span>`</span><br><span class=\"line\">    <span class=\"comment\">#证书到期剩余天数</span></span><br><span class=\"line\">    time_left=$[$[<span class=\"variable\">$expire_date_timestamp</span>-<span class=\"variable\">$now</span>]/86400]</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;距离到期还有<span class=\"variable\">$&#123;time_left&#125;</span>天&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看指定IP的详细信息\">查看指定IP的详细信息</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\"># filename：ip-info 授权执行权限</span></span><br><span class=\"line\"><span class=\"comment\"># 功能：查看IP信息</span></span><br><span class=\"line\"><span class=\"comment\"># 使用方法：ip-info 10.10.2.24/24</span></span><br><span class=\"line\"><span class=\"comment\"># 输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">#  网络地址: 10.10.2.0</span></span><br><span class=\"line\"><span class=\"comment\">#  网关地址: 10.10.2.1</span></span><br><span class=\"line\"><span class=\"comment\">#  广播地址: 10.10.2.255</span></span><br><span class=\"line\"><span class=\"comment\">#  主机地址范围: 10.10.2.1 到 10.10.2.254</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以使用 sipcalc 命令，用法更多，显示也会更为详细：</span></span><br><span class=\"line\"><span class=\"comment\"># 安装：brew install sipcalc</span></span><br><span class=\"line\"><span class=\"comment\"># 使用示例：</span></span><br><span class=\"line\"><span class=\"comment\">#  sipcalc 1.119.161.30/30</span></span><br><span class=\"line\"><span class=\"comment\">#  sipcalc 10.10.2.32 255.255.255.0</span></span><br><span class=\"line\"><span class=\"comment\">#  sipcalc 10.10.2.32 0xffffff00</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否提供了正确数量的参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> -ne 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;用法: <span class=\"variable\">$0</span> &lt;IP地址/子网掩码CIDR&gt;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取命令行参数</span></span><br><span class=\"line\">ip_cidr=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分割IP地址和子网掩码</span></span><br><span class=\"line\">IFS=<span class=\"string\">&#x27;/&#x27;</span> <span class=\"built_in\">read</span> -A ip_parts &lt;&lt;&lt; <span class=\"string\">&quot;<span class=\"variable\">$ip_cidr</span>&quot;</span></span><br><span class=\"line\">ip=<span class=\"variable\">$&#123;ip_parts[1]&#125;</span></span><br><span class=\"line\">subnet_cidr=<span class=\"variable\">$&#123;ip_parts[2]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算子网掩码的二进制表示</span></span><br><span class=\"line\">subnet_binary=$(<span class=\"built_in\">printf</span> <span class=\"string\">&#x27;1%.0s&#x27;</span> $(<span class=\"built_in\">seq</span> 1 <span class=\"string\">&quot;<span class=\"variable\">$subnet_cidr</span>&quot;</span>) &amp;&amp; <span class=\"built_in\">printf</span> <span class=\"string\">&#x27;0%.0s&#x27;</span> $(<span class=\"built_in\">seq</span> 1 $((<span class=\"number\">32</span> - <span class=\"variable\">$subnet_cidr</span>))))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将二进制子网掩码转换为点分十进制表示</span></span><br><span class=\"line\">subnet_mask_decimal=$(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d.%d.%d.%d&quot;</span> $((<span class=\"number\">2</span>#<span class=\"variable\">$&#123;subnet_binary:0:8&#125;</span>)) $((<span class=\"number\">2</span>#<span class=\"variable\">$&#123;subnet_binary:8:8&#125;</span>)) $((<span class=\"number\">2</span>#<span class=\"variable\">$&#123;subnet_binary:16:8&#125;</span>)) $((<span class=\"number\">2</span>#<span class=\"variable\">$&#123;subnet_binary:24:8&#125;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用按位与运算计算网络地址</span></span><br><span class=\"line\">network_address=$(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d.%d.%d.%d&quot;</span> $(( $(echo <span class=\"variable\">$ip</span> | cut -d. -f1) &amp; $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f1) )) $(( $(echo <span class=\"variable\">$ip</span> | cut -d. -f2) &amp; $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f2) )) $(( $(echo <span class=\"variable\">$ip</span> | cut -d. -f3) &amp; $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f3) )) $(( $(echo <span class=\"variable\">$ip</span> | cut -d. -f4) &amp; $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f4) )))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算广播地址和网关地址</span></span><br><span class=\"line\">broadcast_address=$(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d.%d.%d.%d&quot;</span> $(( $(echo <span class=\"variable\">$network_address</span> | cut -d. -f1) | (<span class=\"number\">255</span> - $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f1) % <span class=\"number\">256</span>) )) $(( $(echo <span class=\"variable\">$network_address</span> | cut -d. -f2) | (<span class=\"number\">255</span> - $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f2) % <span class=\"number\">256</span>) )) $(( $(echo <span class=\"variable\">$network_address</span> | cut -d. -f3) | (<span class=\"number\">255</span> - $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f3) % <span class=\"number\">256</span>) )) $(( $(echo <span class=\"variable\">$network_address</span> | cut -d. -f4) | (<span class=\"number\">255</span> - $(echo <span class=\"variable\">$subnet_mask_decimal</span> | cut -d. -f4) % <span class=\"number\">256</span>) )))</span><br><span class=\"line\"></span><br><span class=\"line\">gateway_address=$(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d.%d.%d.%d&quot;</span> $(<span class=\"built_in\">echo</span> <span class=\"variable\">$network_address</span> | <span class=\"built_in\">cut</span> -d. -f1) $(<span class=\"built_in\">echo</span> <span class=\"variable\">$network_address</span> | <span class=\"built_in\">cut</span> -d. -f2) $(<span class=\"built_in\">echo</span> <span class=\"variable\">$network_address</span> | <span class=\"built_in\">cut</span> -d. -f3) $(( $(echo <span class=\"variable\">$network_address</span> | cut -d. -f4) + <span class=\"number\">1</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;网络地址: <span class=\"variable\">$network_address</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;网关地址: <span class=\"variable\">$gateway_address</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;广播地址: <span class=\"variable\">$broadcast_address</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算主机地址范围</span></span><br><span class=\"line\">first_host=$(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d.%d.%d.%d&quot;</span> $(<span class=\"built_in\">echo</span> <span class=\"variable\">$network_address</span> | <span class=\"built_in\">cut</span> -d. -f1) $(<span class=\"built_in\">echo</span> <span class=\"variable\">$network_address</span> | <span class=\"built_in\">cut</span> -d. -f2) $(<span class=\"built_in\">echo</span> <span class=\"variable\">$network_address</span> | <span class=\"built_in\">cut</span> -d. -f3) $(( $(echo <span class=\"variable\">$network_address</span> | cut -d. -f4) + <span class=\"number\">1</span>)))</span><br><span class=\"line\">last_host=$(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%d.%d.%d.%d&quot;</span> $(<span class=\"built_in\">echo</span> <span class=\"variable\">$broadcast_address</span> | <span class=\"built_in\">cut</span> -d. -f1) $(<span class=\"built_in\">echo</span> <span class=\"variable\">$broadcast_address</span> | <span class=\"built_in\">cut</span> -d. -f2) $(<span class=\"built_in\">echo</span> <span class=\"variable\">$broadcast_address</span> | <span class=\"built_in\">cut</span> -d. -f3) $(( $(echo <span class=\"variable\">$broadcast_address</span> | cut -d. -f4) - <span class=\"number\">1</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;主机地址范围: <span class=\"variable\">$first_host</span> 到 <span class=\"variable\">$last_host</span>&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看本机网络信息\">查看本机网络信息</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：ip</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：ip</span></span><br><span class=\"line\"><span class=\"comment\">#功能：查看本机网络信息</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认获取外网ip超时3秒</span></span><br><span class=\"line\">maxtime=3</span><br><span class=\"line\"></span><br><span class=\"line\">net_ip=$(curl --max-time <span class=\"variable\">$maxtime</span> --silent https://ipv4.icanhazip.com)</span><br><span class=\"line\">MAC=$(ifconfig | grep en0: -A 7 | grep ether | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f 2)</span><br><span class=\"line\">local_ip=$(ifconfig | grep -A 1 <span class=\"string\">&quot;en&quot;</span> | grep broadcast | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f 2 | <span class=\"built_in\">tr</span> <span class=\"string\">&quot;\\\\n&quot;</span> <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">DNS=$(nslookup localhost | grep Server | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;MAC: <span class=\"variable\">$&#123;MAC&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;IP: <span class=\"variable\">$&#123;local_ip&#125;</span> <span class=\"variable\">$&#123;net_ip&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;DNS: <span class=\"variable\">$&#123;DNS&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ip=`ifconfig | grep -A 1 <span class=\"string\">&quot;en&quot;</span> | grep broadcast | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f 2`</span><br><span class=\"line\">netmask=`ifconfig | grep -A 1 <span class=\"string\">&quot;en&quot;</span> | grep broadcast | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f 4`</span><br><span class=\"line\">Network=$(ipcalc -b <span class=\"variable\">$ip</span> <span class=\"variable\">$netmask</span> | grep Network | sed <span class=\"string\">&#x27;s/   / /&#x27;</span> | awk -F <span class=\"string\">&#x27; &#x27;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\nIP详细信息:&quot;</span></span><br><span class=\"line\">ip-info <span class=\"variable\">$&#123;Network&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"将十进制IP地址转换为二进制形式\">将十进制IP地址转换为二进制形式</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#功能：将十进制IP地址转换为二进制形式</span></span><br><span class=\"line\"><span class=\"comment\">#filename：ipTo2</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：ipTo2 192.168.16.155</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果：11000000.10101000.00010000.10011011</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否提供了正确数量的参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> -ne 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;用法: ipTo2 192.168.16.155&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">ip=<span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;ip&#125;</span> | <span class=\"built_in\">tr</span> <span class=\"string\">&#x27;.&#x27;</span> <span class=\"string\">&#x27; &#x27;</span>); <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;obase=2 ; <span class=\"variable\">$i</span>&quot;</span> | bc; <span class=\"keyword\">done</span> | awk <span class=\"string\">&#x27;&#123;printf &quot;.%08d&quot;, $1&#125;&#x27;</span> | <span class=\"built_in\">cut</span> -c2-</span><br></pre></td></tr></table></figure>\n<h2 id=\"将二进制形式转换为十进制IP地址\">将二进制形式转换为十进制IP地址</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#功能：将十进制IP地址转换为二进制形式</span></span><br><span class=\"line\"><span class=\"comment\">#filename：2Toip</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：2Toip 11111111.11111111.11100000.00000000</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果：255.255.224.0</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否提供了正确数量的参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> -ne 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;用法: 2Toip 11111111.11111111.11100000.00000000&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$1</span>|awk -F. <span class=\"string\">&#x27;function bin2dec(a,b,i,c)&#123;b=length(a);c=0;for(i=1;i&lt;=b;i++)&#123;c+=c;if(substr(a,i,1)==&quot;1&quot;)c++&#125;return c&#125;&#123;for(j=1;j&lt;=NF;j++)printf(&quot;%d%s&quot;,bin2dec($j),j!=NF?&quot;.&quot;:&quot;\\n&quot;)&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串转ascii码\">字符串转ascii码</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：strtoascii</span></span><br><span class=\"line\"><span class=\"comment\">#功能：字符串转ascii码</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：strtoascii 你好hello</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果：\\u4f60\\u597d\\u68\\u65\\u6c\\u6c\\u6f</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否提供了正确数量的参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> -ne 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;用法: strtoascii 你好hello&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">str=<span class=\"variable\">$1</span></span><br><span class=\"line\">newstr=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ((i=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"variable\">$&#123;#str&#125;</span>;i=<span class=\"variable\">$i</span>+<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    text=<span class=\"string\">&quot;<span class=\"variable\">$&#123;str:$i:1&#125;</span>&quot;</span></span><br><span class=\"line\">    newtext=`<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%x&quot;</span> <span class=\"string\">&quot;&#x27;<span class=\"variable\">$text</span>&quot;</span>`;</span><br><span class=\"line\">    newstr=<span class=\"variable\">$newstr</span><span class=\"string\">&quot;\\\\\\\\u&quot;</span><span class=\"variable\">$newtext</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$newstr</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ascii码转字符串\">ascii码转字符串</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：asciitostr</span></span><br><span class=\"line\"><span class=\"comment\">#功能： ascii码转字符串</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：asciitostr \\u4f60\\u597d\\u68\\u65\\u6c\\u6c\\u6f</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果：你好hello</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否提供了正确数量的参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$#</span>&quot;</span> -ne 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;用法: asciitostr \\u4f60\\u597d\\u68\\u65\\u6c\\u6c\\u6f&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否包含\\u，如果不包含，添加双引号</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> != *\\\\u* ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  input=$(<span class=\"built_in\">echo</span> -e <span class=\"variable\">$1</span> | sed <span class=\"string\">&#x27;s/u/\\\\u/g&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  input=<span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\"># 将Unicode转义序列解析为中文字符</span></span><br><span class=\"line\">result=$(<span class=\"built_in\">echo</span> -e <span class=\"variable\">$input</span> | perl -pe <span class=\"string\">&#x27;s/\\\\u([0-9a-fA-F]&#123;4&#125;)/chr(hex($1))/eg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$result</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"获取java文件的jdk编译版本\">获取java文件的jdk编译版本</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env zsh</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"><span class=\"comment\">#filename：jdk_version</span></span><br><span class=\"line\"><span class=\"comment\">#功能：获取对应java文件的jdk编译版本</span></span><br><span class=\"line\"><span class=\"comment\"># 如果是jar，这里只会检索jar包中第一个class的jdk编译版本，所以也不一定准确</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#执行方法：jdk_version &lt;file_path:[.jar|.class|.war]&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 1.jar示例：</span></span><br><span class=\"line\"><span class=\"comment\">#  jdk_version xxl-job-admin-2.3.0.jar</span></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\">#  Build-Jdk: 1.8.0_271</span></span><br><span class=\"line\"><span class=\"comment\">#  file_path:[xxl-job-admin-2.3.0.jar]\tmajor_version:[52]\tjdk_version:[jdk1.8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.class示例</span></span><br><span class=\"line\"><span class=\"comment\">#  jdk_version XxlJobAdminConfig.class</span></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\">#  file_path:[XxlJobAdminConfig.class]\tmajor_version:[52]\tjdk_version:[jdk1.8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.war示例</span></span><br><span class=\"line\"><span class=\"comment\">#  jdk_version wardir/BOSS.war</span></span><br><span class=\"line\"><span class=\"comment\"># 输出：</span></span><br><span class=\"line\"><span class=\"comment\">#  file_path:[wardir/BOSS.war]\t\tjdk_version:[1.7.0_67-b01 (Oracle Corporation)]</span></span><br><span class=\"line\"><span class=\"comment\">#################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义关联数组</span></span><br><span class=\"line\"><span class=\"built_in\">typeset</span> -A my_map</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 向关联数组中添加键值对</span></span><br><span class=\"line\"><span class=\"comment\"># LTS:</span></span><br><span class=\"line\"><span class=\"comment\">#    8(2014年初发布，免费版本至8u202，从8u211开始商用收费，支持到2030年9月)</span></span><br><span class=\"line\"><span class=\"comment\">#    11(2018年9月发布，免费版本版本至11.0.2，后续版本商用收费，支持到2032年9月)</span></span><br><span class=\"line\"><span class=\"comment\">#    17(2021年9月发布，免费，支持到2029年9月)</span></span><br><span class=\"line\"><span class=\"comment\">#    21(2023年9月发布，免费，支持到2031年9月)</span></span><br><span class=\"line\"><span class=\"comment\">#    25(预计2025年9月发布，支持到2033年9月)</span></span><br><span class=\"line\"><span class=\"comment\"># 后续Oracle计划每半年发布一个新的大版本(3、9月)，每两年发布一次LTS(9月)，建议正式环境只使用LTS版本</span></span><br><span class=\"line\"><span class=\"comment\"># 此处可以查看jdk发布计划：https://www.java.com/en/releases/matrix/</span></span><br><span class=\"line\"><span class=\"comment\"># JDK下载地址：https://www.oracle.com/cn/java/technologies/downloads/</span></span><br><span class=\"line\">my_map=(</span><br><span class=\"line\">    [45]=<span class=\"string\">&quot;jdk1.1&quot;</span></span><br><span class=\"line\">    [46]=<span class=\"string\">&quot;jdk1.2&quot;</span></span><br><span class=\"line\">    [47]=<span class=\"string\">&quot;jdk1.3&quot;</span></span><br><span class=\"line\">    [48]=<span class=\"string\">&quot;jdk1.4&quot;</span></span><br><span class=\"line\">    [49]=<span class=\"string\">&quot;jdk1.5&quot;</span></span><br><span class=\"line\">    [50]=<span class=\"string\">&quot;jdk1.6&quot;</span></span><br><span class=\"line\">    [51]=<span class=\"string\">&quot;jdk1.7&quot;</span></span><br><span class=\"line\">    [52]=<span class=\"string\">&quot;jdk1.8&quot;</span></span><br><span class=\"line\">    [53]=<span class=\"string\">&quot;jdk9&quot;</span></span><br><span class=\"line\">    [54]=<span class=\"string\">&quot;jdk10&quot;</span></span><br><span class=\"line\">    [55]=<span class=\"string\">&quot;jdk11&quot;</span></span><br><span class=\"line\">    [56]=<span class=\"string\">&quot;jdk12&quot;</span></span><br><span class=\"line\">    [57]=<span class=\"string\">&quot;jdk13&quot;</span></span><br><span class=\"line\">    [58]=<span class=\"string\">&quot;jdk14&quot;</span></span><br><span class=\"line\">    [59]=<span class=\"string\">&quot;jdk15&quot;</span></span><br><span class=\"line\">    [60]=<span class=\"string\">&quot;jdk16&quot;</span></span><br><span class=\"line\">    [61]=<span class=\"string\">&quot;jdk17&quot;</span></span><br><span class=\"line\">    [62]=<span class=\"string\">&quot;jdk18&quot;</span></span><br><span class=\"line\">    [63]=<span class=\"string\">&quot;jdk19&quot;</span></span><br><span class=\"line\">    [64]=<span class=\"string\">&quot;jdk20&quot;</span></span><br><span class=\"line\">    [65]=<span class=\"string\">&quot;jdk21&quot;</span></span><br><span class=\"line\">    [66]=<span class=\"string\">&quot;jdk22&quot;</span></span><br><span class=\"line\">    [67]=<span class=\"string\">&quot;jdk23&quot;</span></span><br><span class=\"line\">    [68]=<span class=\"string\">&quot;jdk24&quot;</span></span><br><span class=\"line\">    [69]=<span class=\"string\">&quot;jdk25&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">original_string=<span class=\"string\">&quot;\\tmajor_version\\tjdk_version&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27; 将字符串中的小写字母转换为大写字母。输出结果将是 &quot;MAJOR_VERSION\\tJDK_VERSION&quot;</span></span><br><span class=\"line\">uppercase_string=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$original_string</span>&quot;</span> | <span class=\"built_in\">tr</span> <span class=\"string\">&#x27;[:lower:]&#x27;</span> <span class=\"string\">&#x27;[:upper:]&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印map</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">echo_map</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;uppercase_string&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key val <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;(kv)my_map&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\t<span class=\"variable\">$key</span>\\t\\t<span class=\"variable\">$val</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">error_message</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: jdk_version &lt;file_path:[.jar|.class|.war]&gt;&quot;</span></span><br><span class=\"line\">    echo_map</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否传递了参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    error_message</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">file_path=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查文件是否存在</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -e <span class=\"string\">&quot;<span class=\"variable\">$file_path</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;文件不存在:file_path:[<span class=\"variable\">$&#123;file_path&#125;</span>]&quot;</span></span><br><span class=\"line\">    error_message</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">greap_content=<span class=\"string\">&quot;major version&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$file_path</span> == *.class ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过javap命令获取class文件的详细信息，grep过滤出包含 “major version” 的行，awk取出其版本号</span></span><br><span class=\"line\">    key=$(javap -verbose <span class=\"variable\">$&#123;file_path&#125;</span> | grep <span class=\"string\">&quot;<span class=\"variable\">$&#123;greap_content&#125;</span>&quot;</span> | awk -F<span class=\"string\">&#x27;: &#x27;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [[ <span class=\"variable\">$file_path</span> == *.jar ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># 先通过“jar tf”命令获取jar包中的class文件，这里只取出第一个，注意这里class路径必须去掉“.class”，之后再通过javap命令获取“-classpath”所指定的jar中的这个第一个class文件的详细信息，grep过滤出包含 “major version” 的行，awk取出其版本号</span></span><br><span class=\"line\">    key=$(javap -classpath <span class=\"variable\">$&#123;file_path&#125;</span> -verbose $(jar tf <span class=\"variable\">$&#123;file_path&#125;</span> | grep <span class=\"string\">&quot;.class$&quot;</span> | <span class=\"built_in\">head</span> -n 1 | sed s/.class//) | grep <span class=\"string\">&quot;<span class=\"variable\">$&#123;greap_content&#125;</span>&quot;</span> | awk -F<span class=\"string\">&#x27;: &#x27;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 通过jar包中的MANIFEST.MF文件来判断打包的jdk版本</span></span><br><span class=\"line\">    result=$(unzip -p <span class=\"variable\">$&#123;file_path&#125;</span> $(jar tf <span class=\"variable\">$&#123;file_path&#125;</span> | grep <span class=\"string\">&quot;MANIFEST.MF$&quot;</span> | <span class=\"built_in\">head</span> -n 1) | grep <span class=\"string\">&quot;^Build-Jdk&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$result</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        result=$(unzip -p <span class=\"variable\">$&#123;file_path&#125;</span> $(jar tf <span class=\"variable\">$&#123;file_path&#125;</span> | grep <span class=\"string\">&quot;MANIFEST.MF$&quot;</span> | <span class=\"built_in\">head</span> -n 1) | grep <span class=\"string\">&quot;^Created-By&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$result</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$result</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;没有在 MANIFEST.MF 中发现jdk相关信息&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [[ <span class=\"variable\">$file_path</span> == *.war ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># 查找 Build-Jdk</span></span><br><span class=\"line\">    jdk_version=$(unzip -p <span class=\"string\">&quot;<span class=\"variable\">$&#123;file_path&#125;</span>&quot;</span> META-INF/MANIFEST.MF | grep -i <span class=\"string\">&quot;^Build-Jdk&quot;</span> | awk -F<span class=\"string\">&#x27;: &#x27;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 如果 Build-Jdk 未找到，则尝试查找 Created-By</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$jdk_version</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        jdk_version=$(unzip -p <span class=\"string\">&quot;<span class=\"variable\">$&#123;file_path&#125;</span>&quot;</span> META-INF/MANIFEST.MF | grep -i <span class=\"string\">&quot;^Created-By&quot;</span> | awk -F<span class=\"string\">&#x27;: &#x27;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    error_message</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印结果</span></span><br><span class=\"line\"><span class=\"comment\"># 输出 JDK 版本信息</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$key</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;file_path:[<span class=\"variable\">$&#123;file_path&#125;</span>]\\tmajor_version:[<span class=\"variable\">$key</span>]\\tjdk_version:[<span class=\"variable\">$&#123;my_map[$key]&#125;</span>]&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$jdk_version</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># jdk_version含有特殊字符，通过如下命令查看包含哪些特殊字符，结果发现包含\\r\\n</span></span><br><span class=\"line\">    <span class=\"comment\"># echo &quot;$&#123;jdk_version&#125;&quot; | od -c</span></span><br><span class=\"line\">    <span class=\"comment\"># 去掉特殊字符 \\r\\n</span></span><br><span class=\"line\">    jdk_version_cleaned=$(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;jdk_version&#125;</span>&quot;</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;\\r\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span>  <span class=\"string\">&quot;file_path:[<span class=\"variable\">$&#123;file_path&#125;</span>]\\t\\tjdk_version:[<span class=\"variable\">$&#123;jdk_version_cleaned&#125;</span>]&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;JDK Version information not found&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n","content_text":"摘要 这里列举一些macos下一些有用的shell脚本 与本文脚本对应的centos脚本可以参看centos-shell 查看端口被哪个进程占用 12345678910111213#!/usr/bin/env zsh##################################################filename：port 授予执行权限#功能：查询端口被哪个进程占用#执行方法：port 8080#################################################port=$1if [ -z &quot;$port&quot; ]; then echo &quot;请加上端口作为参数，如：port 8080&quot;else lsof -i :$&#123;port&#125;fi 杀掉占用某个端口的进程 123456789101112131415161718192021222324#!/usr/bin/env zsh##################################################filename：killport 授予执行权限#功能：关闭占用端口的进程#执行方法：killport 8080#################################################if [ -z &quot;$1&quot; ]; then echo &quot;请加上端口作为参数，如：killport 8080&quot;else echo &quot;kill begin........&quot; pid=`port $1 | awk &#x27;NR&gt;1 &#123;print $2&#125;&#x27; | sort | uniq` echo $pid if [ -z &quot;$pid&quot; ] ; then echo &quot;No process running.&quot; #exit -1; else echo &quot;The process($&#123;pid&#125;) is running...&quot; kill $&#123;pid&#125; echo &quot;kill process($&#123;pid&#125;) OK&quot; fifi 本机端口通过跳板机转发到远程端口 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#!/usr/bin/env zsh##################################################filename：ssh_port 授予执行权限#功能：本机端口通过跳板机转发到远程端口#执行方法：# ssh_port start 8080 10.10.2.2 80# ssh_port stop 8080# ssh_port status 8080#################################################check()&#123; #验证参数是否为空 if [[ $&#123;#@&#125; &lt; 1 ]];then echo &quot;请输入参数！&quot; echo &quot;开启端口转发：ssh_port start 8080 10.10.2.2 80&quot; echo &quot;关闭端口转发：ssh_port stop 8080&quot; echo &quot;查看端口状态：ssh_port status 8080&quot; exit 1 fi&#125;check $@# 工作目录WORKDIR=&quot;/Users/$(whoami)/workdir&quot;# 操作类型operation=&quot;$1&quot;# 本地端口local_port=&quot;$2&quot;# 远程 IP 地址remote_ip=&quot;$3&quot;# 远程端口remote_port=&quot;$4&quot;# SSH 控制套接字文件sock_file=&quot;$WORKDIR/$local_port.sock&quot;# 跳板机，~/.ssh/config中的配置jump_name=jump-machinestart()&#123; echo &quot;start port begin........&quot; pid=`port $local_port | grep ssh | awk &#x27;&#123;print $2&#125;&#x27;` if [ -z &quot;$pid&quot; ] ; then # 建立连接 ssh -nNT -S &quot;$sock_file&quot; -L 127.0.0.1:$local_port:$remote_ip:$remote_port $jump_name echo &quot;ssh -nNT -S $&#123;sock_file&#125; -L 127.0.0.1:$&#123;local_port&#125;:$&#123;remote_ip&#125;:$&#123;remote_port&#125; $&#123;jump_name&#125;&quot; echo &quot;start port success!&quot; sleep 1 else echo &quot;port is running.&quot; fi&#125;stop()&#123; echo &quot;stop port begin........&quot; pid=`port $local_port | grep ssh | awk &#x27;&#123;print $2&#125;&#x27;` if [ -z &quot;$pid&quot; ] ; then echo &quot;No port running.&quot; else echo &quot;The port ($&#123;pid&#125;) is running...&quot; # kill -9 $pid ssh -S $sock_file -O exit $jump_name echo &quot;ssh -S $sock_file -O exit $jump_name&quot; echo &quot;stop port ($&#123;pid&#125;) success!&quot; fi&#125;status()&#123; echo &quot;check status port begin........&quot; pid=`port $local_port | grep ssh | awk &#x27;&#123;print $2&#125;&#x27;` if [ -z &quot;$pid&quot; ] ; then echo &quot;No port running.&quot; else echo &quot;The port ($&#123;pid&#125;) is running...&quot; port $local_port fi&#125;if [ -n &quot;$operation&quot; ];then # 判断操作类型 if [[ &quot;$operation&quot; == &quot;start&quot; ]]; then # 建立连接 start elif [[ &quot;$operation&quot; == &quot;stop&quot; ]]; then # 关闭连接 stop elif [[ &quot;$operation&quot; == &quot;status&quot; ]]; then # 关闭连接 status else check exit 1 fifi 查看域名到期时间 123456789101112131415161718192021222324252627282930313233343536373839#!/usr/bin/env zsh##################################################filename：check_domain 授予执行权限#功能：检查域名到期时间#执行方法：check_domain baidu.com google.com#输出结果：# baidu.com，过期日期：2026-10-11# 距离到期还有958天# google.com，过期日期：2028-09-14# 距离到期还有1662天##################################################验证域名参数是否为空if [[ $&#123;#@&#125; &lt; 1 ]];then echo &quot;请输入域名，多个域名空格分隔，如：check_domain baidu.com google.com&quot;fi#检测域名到期时间for domain in &quot;$@&quot;;do #取出域名过期时间 expire_date=`whois $domain | grep &quot;Expiration Time&quot; | awk &#x27;&#123;print $3&#125;&#x27;` if [ -z &quot;$expire_date&quot; ];then expire_date=`whois $domain | grep &#x27;Expiry Date&#x27;| awk &#x27;&#123;print $4&#125;&#x27;| cut -d &#x27;T&#x27; -f 1` fi echo &quot;$&#123;domain&#125;，过期日期：$&#123;expire_date&#125;&quot; #转换成时间戳 # 1.linux # expire_date_timestamp=`date -d $expire_date +%s` # 2.macos # https://blog.csdn.net/zhw21w/article/details/126010972 expire_date_timestamp=`date -j -f %Y-%m-%d $expire_date +%s` #以时间戳的形式显示当前时间 now=`date &#x27;+%s&#x27;` #域名到期剩余天数 time_left=$[$[$expire_date_timestamp-$now]/86400] echo &quot;距离到期还有$&#123;time_left&#125;天&quot;done 查看证书到期时间 123456789101112131415161718192021222324252627282930313233343536#!/usr/bin/env zsh##################################################filename：ssl_check 授予执行权限#功能：检查证书到期时间#执行方法：ssl_check www.baidu.com www.google.com#输出结果：# 证书：www.baidu.com，过期时间：2024-08-06 01:51:05# 距离到期还有161天# 证书：www.google.com，过期时间：2024-04-29 08:19:49# 距离到期还有62天##################################################验证证书参数是否为空if [[ $&#123;#@&#125; &lt; 1 ]];then echo &quot;请输入证书，多个证书空格分隔，如：ssl_check www.baidu.com www.google.com&quot;fi#获取证书的有效时间for domain in &quot;$@&quot;;do # 这里在openssl x509 -noout -dates后面加上了2&gt;/dev/null，否则会打印告警信息：Warning: Reading certificate from stdin since no -in or -new option is given # 您可以忽略此警告。它只是表明您没有使用 -in 或 -new 选项指定输入文件，因此 OpenSSL 将从标准输入 (stdin) 读取证书。 time=$(echo | openssl s_client -connect $domain:443 2&gt;/dev/null | openssl x509 -noout -dates 2&gt;/dev/null |awk -F&#x27;=&#x27; &#x27;NR==2&#123;print $2&#125;&#x27;) #echo $time #取出域名过期时间 expire_date=`env LC_ALL=en_US.en date -j -f &#x27;%b %d %H:%M:%S %Y GMT&#x27; &quot;$time&quot; &#x27;+%Y-%m-%d %H:%M:%S&#x27;` echo &quot;证书：$domain，过期时间：$expire_date&quot; expire_date_timestamp=`date -j -f &#x27;%Y-%m-%d %H:%M:%S&#x27; $expire_date +%s` #以时间戳的形式显示当前时间 now=`date &#x27;+%s&#x27;` #证书到期剩余天数 time_left=$[$[$expire_date_timestamp-$now]/86400] echo &quot;距离到期还有$&#123;time_left&#125;天&quot;done 查看指定IP的详细信息 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#!/usr/bin/env zsh################################################## filename：ip-info 授权执行权限# 功能：查看IP信息# 使用方法：ip-info 10.10.2.24/24# 输出结果：# 网络地址: 10.10.2.0# 网关地址: 10.10.2.1# 广播地址: 10.10.2.255# 主机地址范围: 10.10.2.1 到 10.10.2.254# 也可以使用 sipcalc 命令，用法更多，显示也会更为详细：# 安装：brew install sipcalc# 使用示例：# sipcalc 1.119.161.30/30# sipcalc 10.10.2.32 255.255.255.0# sipcalc 10.10.2.32 0xffffff00################################################## 检查是否提供了正确数量的参数if [ &quot;$#&quot; -ne 1 ]; then echo &quot;用法: $0 &lt;IP地址/子网掩码CIDR&gt;&quot; exit 1fi# 获取命令行参数ip_cidr=&quot;$1&quot;# 分割IP地址和子网掩码IFS=&#x27;/&#x27; read -A ip_parts &lt;&lt;&lt; &quot;$ip_cidr&quot;ip=$&#123;ip_parts[1]&#125;subnet_cidr=$&#123;ip_parts[2]&#125;# 计算子网掩码的二进制表示subnet_binary=$(printf &#x27;1%.0s&#x27; $(seq 1 &quot;$subnet_cidr&quot;) &amp;&amp; printf &#x27;0%.0s&#x27; $(seq 1 $((32 - $subnet_cidr))))# 将二进制子网掩码转换为点分十进制表示subnet_mask_decimal=$(printf &quot;%d.%d.%d.%d&quot; $((2#$&#123;subnet_binary:0:8&#125;)) $((2#$&#123;subnet_binary:8:8&#125;)) $((2#$&#123;subnet_binary:16:8&#125;)) $((2#$&#123;subnet_binary:24:8&#125;)))# 使用按位与运算计算网络地址network_address=$(printf &quot;%d.%d.%d.%d&quot; $(( $(echo $ip | cut -d. -f1) &amp; $(echo $subnet_mask_decimal | cut -d. -f1) )) $(( $(echo $ip | cut -d. -f2) &amp; $(echo $subnet_mask_decimal | cut -d. -f2) )) $(( $(echo $ip | cut -d. -f3) &amp; $(echo $subnet_mask_decimal | cut -d. -f3) )) $(( $(echo $ip | cut -d. -f4) &amp; $(echo $subnet_mask_decimal | cut -d. -f4) )))# 计算广播地址和网关地址broadcast_address=$(printf &quot;%d.%d.%d.%d&quot; $(( $(echo $network_address | cut -d. -f1) | (255 - $(echo $subnet_mask_decimal | cut -d. -f1) % 256) )) $(( $(echo $network_address | cut -d. -f2) | (255 - $(echo $subnet_mask_decimal | cut -d. -f2) % 256) )) $(( $(echo $network_address | cut -d. -f3) | (255 - $(echo $subnet_mask_decimal | cut -d. -f3) % 256) )) $(( $(echo $network_address | cut -d. -f4) | (255 - $(echo $subnet_mask_decimal | cut -d. -f4) % 256) )))gateway_address=$(printf &quot;%d.%d.%d.%d&quot; $(echo $network_address | cut -d. -f1) $(echo $network_address | cut -d. -f2) $(echo $network_address | cut -d. -f3) $(( $(echo $network_address | cut -d. -f4) + 1)))# 输出结果echo &quot;网络地址: $network_address&quot;echo &quot;网关地址: $gateway_address&quot;echo &quot;广播地址: $broadcast_address&quot;# 计算主机地址范围first_host=$(printf &quot;%d.%d.%d.%d&quot; $(echo $network_address | cut -d. -f1) $(echo $network_address | cut -d. -f2) $(echo $network_address | cut -d. -f3) $(( $(echo $network_address | cut -d. -f4) + 1)))last_host=$(printf &quot;%d.%d.%d.%d&quot; $(echo $broadcast_address | cut -d. -f1) $(echo $broadcast_address | cut -d. -f2) $(echo $broadcast_address | cut -d. -f3) $(( $(echo $broadcast_address | cut -d. -f4) - 1)))echo &quot;主机地址范围: $first_host 到 $last_host&quot; 查看本机网络信息 12345678910111213141516171819202122232425#!/usr/bin/env zsh##################################################filename：ip#执行方法：ip#功能：查看本机网络信息################################################## 默认获取外网ip超时3秒maxtime=3net_ip=$(curl --max-time $maxtime --silent https://ipv4.icanhazip.com)MAC=$(ifconfig | grep en0: -A 7 | grep ether | cut -d &quot; &quot; -f 2)local_ip=$(ifconfig | grep -A 1 &quot;en&quot; | grep broadcast | cut -d &quot; &quot; -f 2 | tr &quot;\\\\n&quot; &quot; &quot;)DNS=$(nslookup localhost | grep Server | awk &#x27;&#123;print $2&#125;&#x27;)echo &quot;MAC: $&#123;MAC&#125;&quot;echo &quot;IP: $&#123;local_ip&#125; $&#123;net_ip&#125;&quot;echo &quot;DNS: $&#123;DNS&#125;&quot;ip=`ifconfig | grep -A 1 &quot;en&quot; | grep broadcast | cut -d &quot; &quot; -f 2`netmask=`ifconfig | grep -A 1 &quot;en&quot; | grep broadcast | cut -d &quot; &quot; -f 4`Network=$(ipcalc -b $ip $netmask | grep Network | sed &#x27;s/ / /&#x27; | awk -F &#x27; &#x27; &#x27;&#123;print $2&#125;&#x27;)echo &quot;\\nIP详细信息:&quot;ip-info $&#123;Network&#125; 将十进制IP地址转换为二进制形式 12345678910111213141516#!/usr/bin/env zsh##################################################功能：将十进制IP地址转换为二进制形式#filename：ipTo2#执行方法：ipTo2 192.168.16.155#输出结果：11000000.10101000.00010000.10011011################################################## 检查是否提供了正确数量的参数if [ &quot;$#&quot; -ne 1 ]; then echo &quot;用法: ipTo2 192.168.16.155&quot; exit 1fiip=$1for i in $(echo $&#123;ip&#125; | tr &#x27;.&#x27; &#x27; &#x27;); do echo &quot;obase=2 ; $i&quot; | bc; done | awk &#x27;&#123;printf &quot;.%08d&quot;, $1&#125;&#x27; | cut -c2- 将二进制形式转换为十进制IP地址 123456789101112131415#!/usr/bin/env zsh##################################################功能：将十进制IP地址转换为二进制形式#filename：2Toip#执行方法：2Toip 11111111.11111111.11100000.00000000#输出结果：255.255.224.0################################################## 检查是否提供了正确数量的参数if [ &quot;$#&quot; -ne 1 ]; then echo &quot;用法: 2Toip 11111111.11111111.11100000.00000000&quot; exit 1fiecho $1|awk -F. &#x27;function bin2dec(a,b,i,c)&#123;b=length(a);c=0;for(i=1;i&lt;=b;i++)&#123;c+=c;if(substr(a,i,1)==&quot;1&quot;)c++&#125;return c&#125;&#123;for(j=1;j&lt;=NF;j++)printf(&quot;%d%s&quot;,bin2dec($j),j!=NF?&quot;.&quot;:&quot;\\n&quot;)&#125;&#x27; 字符串转ascii码 123456789101112131415161718192021222324#!/usr/bin/env zsh##################################################filename：strtoascii#功能：字符串转ascii码#执行方法：strtoascii 你好hello#输出结果：\\u4f60\\u597d\\u68\\u65\\u6c\\u6c\\u6f################################################## 检查是否提供了正确数量的参数if [ &quot;$#&quot; -ne 1 ]; then echo &quot;用法: strtoascii 你好hello&quot; exit 1fistr=$1newstr=&quot;&quot;for ((i=0;$i&lt;$&#123;#str&#125;;i=$i+1));do text=&quot;$&#123;str:$i:1&#125;&quot; newtext=`printf &quot;%x&quot; &quot;&#x27;$text&quot;`; newstr=$newstr&quot;\\\\\\\\u&quot;$newtextdoneecho $newstr ascii码转字符串 12345678910111213141516171819202122232425#!/usr/bin/env zsh##################################################filename：asciitostr#功能： ascii码转字符串#执行方法：asciitostr \\u4f60\\u597d\\u68\\u65\\u6c\\u6c\\u6f#输出结果：你好hello################################################## 检查是否提供了正确数量的参数if [ &quot;$#&quot; -ne 1 ]; then echo &quot;用法: asciitostr \\u4f60\\u597d\\u68\\u65\\u6c\\u6c\\u6f&quot; exit 1fi# 检查是否包含\\u，如果不包含，添加双引号if [[ &quot;$1&quot; != *\\\\u* ]]; then input=$(echo -e $1 | sed &#x27;s/u/\\\\u/g&#x27;)else input=$1fi# 将Unicode转义序列解析为中文字符result=$(echo -e $input | perl -pe &#x27;s/\\\\u([0-9a-fA-F]&#123;4&#125;)/chr(hex($1))/eg&#x27;)# 输出结果echo &quot;$result&quot; 获取java文件的jdk编译版本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142#!/usr/bin/env zsh##################################################filename：jdk_version#功能：获取对应java文件的jdk编译版本# 如果是jar，这里只会检索jar包中第一个class的jdk编译版本，所以也不一定准确##执行方法：jdk_version &lt;file_path:[.jar|.class|.war]&gt;# 1.jar示例：# jdk_version xxl-job-admin-2.3.0.jar# 输出：# Build-Jdk: 1.8.0_271# file_path:[xxl-job-admin-2.3.0.jar] major_version:[52] jdk_version:[jdk1.8]# 2.class示例# jdk_version XxlJobAdminConfig.class# 输出：# file_path:[XxlJobAdminConfig.class] major_version:[52] jdk_version:[jdk1.8]# 3.war示例# jdk_version wardir/BOSS.war# 输出：# file_path:[wardir/BOSS.war] jdk_version:[1.7.0_67-b01 (Oracle Corporation)]################################################## 定义关联数组typeset -A my_map# 向关联数组中添加键值对# LTS:# 8(2014年初发布，免费版本至8u202，从8u211开始商用收费，支持到2030年9月)# 11(2018年9月发布，免费版本版本至11.0.2，后续版本商用收费，支持到2032年9月)# 17(2021年9月发布，免费，支持到2029年9月)# 21(2023年9月发布，免费，支持到2031年9月)# 25(预计2025年9月发布，支持到2033年9月)# 后续Oracle计划每半年发布一个新的大版本(3、9月)，每两年发布一次LTS(9月)，建议正式环境只使用LTS版本# 此处可以查看jdk发布计划：https://www.java.com/en/releases/matrix/# JDK下载地址：https://www.oracle.com/cn/java/technologies/downloads/my_map=( [45]=&quot;jdk1.1&quot; [46]=&quot;jdk1.2&quot; [47]=&quot;jdk1.3&quot; [48]=&quot;jdk1.4&quot; [49]=&quot;jdk1.5&quot; [50]=&quot;jdk1.6&quot; [51]=&quot;jdk1.7&quot; [52]=&quot;jdk1.8&quot; [53]=&quot;jdk9&quot; [54]=&quot;jdk10&quot; [55]=&quot;jdk11&quot; [56]=&quot;jdk12&quot; [57]=&quot;jdk13&quot; [58]=&quot;jdk14&quot; [59]=&quot;jdk15&quot; [60]=&quot;jdk16&quot; [61]=&quot;jdk17&quot; [62]=&quot;jdk18&quot; [63]=&quot;jdk19&quot; [64]=&quot;jdk20&quot; [65]=&quot;jdk21&quot; [66]=&quot;jdk22&quot; [67]=&quot;jdk23&quot; [68]=&quot;jdk24&quot; [69]=&quot;jdk25&quot;)original_string=&quot;\\tmajor_version\\tjdk_version&quot;# tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27; 将字符串中的小写字母转换为大写字母。输出结果将是 &quot;MAJOR_VERSION\\tJDK_VERSION&quot;uppercase_string=$(echo &quot;$original_string&quot; | tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27;)# 打印mapecho_map() &#123; echo &quot;$&#123;uppercase_string&#125;&quot; for key val in $&#123;(kv)my_map&#125;; do echo &quot;\\t$key\\t\\t$val&quot;done&#125;error_message() &#123; echo &quot;Usage: jdk_version &lt;file_path:[.jar|.class|.war]&gt;&quot; echo_map exit 1&#125;# 检查是否传递了参数if [ -z &quot;$1&quot; ]; then error_messagefifile_path=$1# 检查文件是否存在if [ ! -e &quot;$file_path&quot; ]; then echo &quot;文件不存在:file_path:[$&#123;file_path&#125;]&quot; error_messagefigreap_content=&quot;major version&quot;if [[ $file_path == *.class ]]; then # 通过javap命令获取class文件的详细信息，grep过滤出包含 “major version” 的行，awk取出其版本号 key=$(javap -verbose $&#123;file_path&#125; | grep &quot;$&#123;greap_content&#125;&quot; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)elif [[ $file_path == *.jar ]]; then # 先通过“jar tf”命令获取jar包中的class文件，这里只取出第一个，注意这里class路径必须去掉“.class”，之后再通过javap命令获取“-classpath”所指定的jar中的这个第一个class文件的详细信息，grep过滤出包含 “major version” 的行，awk取出其版本号 key=$(javap -classpath $&#123;file_path&#125; -verbose $(jar tf $&#123;file_path&#125; | grep &quot;.class$&quot; | head -n 1 | sed s/.class//) | grep &quot;$&#123;greap_content&#125;&quot; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;) # 通过jar包中的MANIFEST.MF文件来判断打包的jdk版本 result=$(unzip -p $&#123;file_path&#125; $(jar tf $&#123;file_path&#125; | grep &quot;MANIFEST.MF$&quot; | head -n 1) | grep &quot;^Build-Jdk&quot;) if [ -z &quot;$result&quot; ]; then result=$(unzip -p $&#123;file_path&#125; $(jar tf $&#123;file_path&#125; | grep &quot;MANIFEST.MF$&quot; | head -n 1) | grep &quot;^Created-By&quot;) fi if [ -n &quot;$result&quot; ]; then echo $result else echo &quot;没有在 MANIFEST.MF 中发现jdk相关信息&quot; fielif [[ $file_path == *.war ]]; then # 查找 Build-Jdk jdk_version=$(unzip -p &quot;$&#123;file_path&#125;&quot; META-INF/MANIFEST.MF | grep -i &quot;^Build-Jdk&quot; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;) # 如果 Build-Jdk 未找到，则尝试查找 Created-By if [ -z &quot;$jdk_version&quot; ]; then jdk_version=$(unzip -p &quot;$&#123;file_path&#125;&quot; META-INF/MANIFEST.MF | grep -i &quot;^Created-By&quot; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;) fielse error_messagefi# 打印结果# 输出 JDK 版本信息if [ -n &quot;$key&quot; ]; then echo &quot;file_path:[$&#123;file_path&#125;]\\tmajor_version:[$key]\\tjdk_version:[$&#123;my_map[$key]&#125;]&quot;elif [ -n &quot;$jdk_version&quot; ]; then # jdk_version含有特殊字符，通过如下命令查看包含哪些特殊字符，结果发现包含\\r\\n # echo &quot;$&#123;jdk_version&#125;&quot; | od -c # 去掉特殊字符 \\r\\n jdk_version_cleaned=$(echo &quot;$&#123;jdk_version&#125;&quot; | tr -d &#x27;\\r\\n&#x27;) echo &quot;file_path:[$&#123;file_path&#125;]\\t\\tjdk_version:[$&#123;jdk_version_cleaned&#125;]&quot;else echo &quot;JDK Version information not found&quot;fi","summary":"摘要 这里列举一些macos下一些有用的shell脚本 与本文脚本对应的centos脚本可以参看centos-shell","date_published":"2024-02-23T13:55:05.000Z","tags":["技术","macos","macos"]},{"id":"https://blog.hanqunfeng.com/2024/01/26/aws-s3-java/","url":"https://blog.hanqunfeng.com/2024/01/26/aws-s3-java/","title":"S3--AWS SDK for Java","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍如何使用AWS SDK for Java V2操作S3。</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/sdk-for-java/\">AWS SDK for Java 文档</a></li>\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/userguide/service_code_examples.html\">适用于使用 AWS 软件开发工具包的 Amazon S3 的代码示例</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"示例代码\">示例代码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.utils.AmazonS3V2Util;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.utils.MyIOUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.utils.S3ClientFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 文件下载，支持断点续传，支持分段下载</span></span><br><span class=\"line\"><span class=\"comment\">     * 分段下载的好处就是可以进行多线程下载，提高下载速度，下载完成后再将所有的分段文件进行合并成一个完整的文件</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 可以先下载一个字节的数据，此时可以获取文件总的字节数，然后基于这个总字节数决定分段大小</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/file-down-range&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fileDownRange</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 服务器上的文件路径，这里只是为了演示方便，实际使用时，需要根据文件的实际存储方式进行处理</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">localFileName</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;fileName&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(localFileName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;没有上传fileName！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(localFileName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(localFileName + <span class=\"string\">&quot;:文件不存在！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">contentLength</span> <span class=\"operator\">=</span> file.length();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">range</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;Range&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(range) &amp;&amp; (range.contains(<span class=\"string\">&quot;bytes=&quot;</span>) &amp;&amp; range.contains(<span class=\"string\">&quot;-&quot;</span>))) &#123;</span><br><span class=\"line\">            start = org.apache.commons.lang.StringUtils.substringBetween(range, <span class=\"string\">&quot;bytes=&quot;</span>, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">            end = org.apache.commons.lang.StringUtils.substringAfter(range, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">startIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">endIndex</span> <span class=\"operator\">=</span> contentLength - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(start)) &#123;</span><br><span class=\"line\">            startIndex = Long.parseLong(start);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(end)) &#123;</span><br><span class=\"line\">            endIndex = Long.parseLong(end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;range:&quot;</span> + startIndex + <span class=\"string\">&quot;~&quot;</span> + endIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> localFileName;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (localFileName.contains(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">            fileName = localFileName.substring(localFileName.lastIndexOf(<span class=\"string\">&quot;/&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(start)) &#123;</span><br><span class=\"line\">            fileName = fileName + <span class=\"string\">&quot;.&quot;</span> + startIndex + <span class=\"string\">&quot;-&quot;</span> + endIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> endIndex - startIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/octet-stream&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Accept-Ranges&quot;</span>, <span class=\"string\">&quot;bytes&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Range&quot;</span>, <span class=\"string\">&quot;bytes &quot;</span> + startIndex + <span class=\"string\">&quot;-&quot;</span> + endIndex + <span class=\"string\">&quot;/&quot;</span> + contentLength);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Length&quot;</span>, length + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        response.addHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>, <span class=\"string\">&quot;attachment;filename=&quot;</span> + fileName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取文件流</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">ServletOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> response.getOutputStream(); <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> Files.newInputStream(file.toPath())) &#123;</span><br><span class=\"line\">            MyIOUtil.copyDataFromInputStreamToOutputStream(inputStream, startIndex, length, outputStream, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * S3文件下载，分段下载</span></span><br><span class=\"line\"><span class=\"comment\">     * num 分段号，从1开始</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/s3-down/&#123;num&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">s3Down</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> <span class=\"type\">int</span> num, HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分段下载测试</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">remoteFileName</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;fileName&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(remoteFileName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(remoteFileName + <span class=\"string\">&quot;:文件不存在！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> remoteFileName;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remoteFileName.contains(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">            fileName = remoteFileName.substring(remoteFileName.lastIndexOf(<span class=\"string\">&quot;/&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fileName = fileName + <span class=\"string\">&quot;.&quot;</span> + num;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">contentLength</span> <span class=\"operator\">=</span> AmazonS3V2Util.getObjectInfo(S3ClientFactory.BUCKET_NAME, remoteFileName).contentLength();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> java.util.List&lt;Long&gt; positions = AmazonS3V2Util.positions(contentLength);</span><br><span class=\"line\">        positions.add(contentLength);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> positions.get(num - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> positions.get(num) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;range:&quot;</span> + start + <span class=\"string\">&quot;~&quot;</span> + end);</span><br><span class=\"line\"></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/octet-stream&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Accept-Ranges&quot;</span>, <span class=\"string\">&quot;bytes&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Range&quot;</span>, <span class=\"string\">&quot;bytes &quot;</span> + start + <span class=\"string\">&quot;-&quot;</span> + end + <span class=\"string\">&quot;/&quot;</span> + contentLength);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Length&quot;</span>, (end - start + <span class=\"number\">1</span>) + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        response.addHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>, <span class=\"string\">&quot;attachment;filename=&quot;</span> + fileName);</span><br><span class=\"line\">        <span class=\"type\">ServletOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> response.getOutputStream();</span><br><span class=\"line\">        AmazonS3V2Util.downloadSubsectionAndCloseOutputStream(S3ClientFactory.BUCKET_NAME, remoteFileName, start, end, outputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * S3文件下载，支持断点续传，支持分段下载</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/s3-down-range&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">s3DownRange</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分段下载测试</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">remoteFileName</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;fileName&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(remoteFileName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(remoteFileName + <span class=\"string\">&quot;:文件不存在！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">contentLength</span> <span class=\"operator\">=</span> AmazonS3V2Util.getObjectInfo(S3ClientFactory.BUCKET_NAME, remoteFileName).contentLength();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">range</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;Range&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(range) &amp;&amp; (range.contains(<span class=\"string\">&quot;bytes=&quot;</span>) &amp;&amp; range.contains(<span class=\"string\">&quot;-&quot;</span>))) &#123;</span><br><span class=\"line\">            start = org.apache.commons.lang.StringUtils.substringBetween(range, <span class=\"string\">&quot;bytes=&quot;</span>, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">            end = org.apache.commons.lang.StringUtils.substringAfter(range, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">startIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">endIndex</span> <span class=\"operator\">=</span> contentLength - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(start)) &#123;</span><br><span class=\"line\">            startIndex = Long.parseLong(start);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(end)) &#123;</span><br><span class=\"line\">            endIndex = Long.parseLong(end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;range:&quot;</span> + startIndex + <span class=\"string\">&quot;~&quot;</span> + endIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> remoteFileName;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remoteFileName.contains(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">            fileName = remoteFileName.substring(remoteFileName.lastIndexOf(<span class=\"string\">&quot;/&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(start)) &#123;</span><br><span class=\"line\">            fileName = fileName + <span class=\"string\">&quot;.&quot;</span> + startIndex + <span class=\"string\">&quot;-&quot;</span> + endIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/octet-stream&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Accept-Ranges&quot;</span>, <span class=\"string\">&quot;bytes&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Range&quot;</span>, <span class=\"string\">&quot;bytes &quot;</span> + startIndex + <span class=\"string\">&quot;-&quot;</span> + endIndex + <span class=\"string\">&quot;/&quot;</span> + contentLength);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Length&quot;</span>, (endIndex - startIndex + <span class=\"number\">1</span>) + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        response.addHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>, <span class=\"string\">&quot;attachment;filename=&quot;</span> + fileName);</span><br><span class=\"line\">        <span class=\"type\">ServletOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> response.getOutputStream();</span><br><span class=\"line\">        AmazonS3V2Util.downloadSubsectionAndCloseOutputStream(S3ClientFactory.BUCKET_NAME, remoteFileName, startIndex, endIndex, outputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上传文件到S3，支持分段上传</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/uploadToS3&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">uploadFileToS3</span><span class=\"params\">(MultipartFile file, String remoteFileName)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file != <span class=\"literal\">null</span> &amp;&amp; StringUtils.hasText(remoteFileName)) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;上传文件到S3：&quot;</span> + remoteFileName);</span><br><span class=\"line\">            AmazonS3V2Util.multipartUpload(S3ClientFactory.BUCKET_NAME, remoteFileName, file.getBytes(), <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;上传成功&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;上传失败&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"源码地址\">源码地址</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>V2版本：<a href=\"https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/aws-s3-v2\">https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/aws-s3-v2</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>V1版本：<a href=\"https://github.com/hanqunfeng/springbootchapter/blob/master/springboot3-demo/resumed-transfer-offset/src/main/java/com/hanqf/resumedtransferoffset/utils/AmazonS3Util.java\">https://github.com/hanqunfeng/springbootchapter/blob/master/springboot3-demo/resumed-transfer-offset/src/main/java/com/hanqf/resumedtransferoffset/utils/AmazonS3Util.java</a></p>\n</li>\n</ul>\n","content_text":"摘要 本文介绍如何使用AWS SDK for Java V2操作S3。 参考资料： AWS SDK for Java 文档 适用于使用 AWS 软件开发工具包的 Amazon S3 的代码示例 示例代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186package com.hanqf.controller;import com.hanqf.utils.AmazonS3V2Util;import com.hanqf.utils.MyIOUtil;import com.hanqf.utils.S3ClientFactory;import jakarta.servlet.ServletOutputStream;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import lombok.extern.slf4j.Slf4j;import org.springframework.util.StringUtils;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.nio.file.Files;@Slf4j@RestControllerpublic class DemoController &#123; /** * 文件下载，支持断点续传，支持分段下载 * 分段下载的好处就是可以进行多线程下载，提高下载速度，下载完成后再将所有的分段文件进行合并成一个完整的文件 * &lt;p&gt; * 可以先下载一个字节的数据，此时可以获取文件总的字节数，然后基于这个总字节数决定分段大小 */ @GetMapping(&quot;/file-down-range&quot;) public void fileDownRange(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; // 服务器上的文件路径，这里只是为了演示方便，实际使用时，需要根据文件的实际存储方式进行处理 String localFileName = request.getParameter(&quot;fileName&quot;); if (!StringUtils.hasText(localFileName)) &#123; throw new RuntimeException(&quot;没有上传fileName！&quot;); &#125; File file = new File(localFileName); if (!file.exists()) &#123; throw new RuntimeException(localFileName + &quot;:文件不存在！&quot;); &#125; final long contentLength = file.length(); String range = request.getHeader(&quot;Range&quot;); String start = null; String end = null; if (StringUtils.hasText(range) &amp;&amp; (range.contains(&quot;bytes=&quot;) &amp;&amp; range.contains(&quot;-&quot;))) &#123; start = org.apache.commons.lang.StringUtils.substringBetween(range, &quot;bytes=&quot;, &quot;-&quot;); end = org.apache.commons.lang.StringUtils.substringAfter(range, &quot;-&quot;); &#125; long startIndex = 0; long endIndex = contentLength - 1; if (StringUtils.hasText(start)) &#123; startIndex = Long.parseLong(start); &#125; if (StringUtils.hasText(end)) &#123; endIndex = Long.parseLong(end); &#125; log.info(&quot;range:&quot; + startIndex + &quot;~&quot; + endIndex); String fileName = localFileName; if (localFileName.contains(&quot;/&quot;)) &#123; fileName = localFileName.substring(localFileName.lastIndexOf(&quot;/&quot;) + 1); &#125; if (StringUtils.hasText(start)) &#123; fileName = fileName + &quot;.&quot; + startIndex + &quot;-&quot; + endIndex; &#125; long length = endIndex - startIndex + 1; response.setContentType(&quot;application/octet-stream&quot;); response.setHeader(&quot;Accept-Ranges&quot;, &quot;bytes&quot;); response.setHeader(&quot;Content-Range&quot;, &quot;bytes &quot; + startIndex + &quot;-&quot; + endIndex + &quot;/&quot; + contentLength); response.setHeader(&quot;Content-Length&quot;, length + &quot;&quot;); response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + fileName); // 读取文件流 try (ServletOutputStream outputStream = response.getOutputStream(); InputStream inputStream = Files.newInputStream(file.toPath())) &#123; MyIOUtil.copyDataFromInputStreamToOutputStream(inputStream, startIndex, length, outputStream, true); &#125; &#125; /** * S3文件下载，分段下载 * num 分段号，从1开始 */ @GetMapping(&quot;/s3-down/&#123;num&#125;&quot;) public void s3Down(@PathVariable int num, HttpServletRequest request, HttpServletResponse response) throws IOException &#123; // 分段下载测试 String remoteFileName = request.getParameter(&quot;fileName&quot;); if (!StringUtils.hasText(remoteFileName)) &#123; throw new RuntimeException(remoteFileName + &quot;:文件不存在！&quot;); &#125; String fileName = remoteFileName; if (remoteFileName.contains(&quot;/&quot;)) &#123; fileName = remoteFileName.substring(remoteFileName.lastIndexOf(&quot;/&quot;) + 1); &#125; fileName = fileName + &quot;.&quot; + num; final long contentLength = AmazonS3V2Util.getObjectInfo(S3ClientFactory.BUCKET_NAME, remoteFileName).contentLength(); final java.util.List&lt;Long&gt; positions = AmazonS3V2Util.positions(contentLength); positions.add(contentLength); long start = positions.get(num - 1); long end = positions.get(num) - 1; log.info(&quot;range:&quot; + start + &quot;~&quot; + end); response.setContentType(&quot;application/octet-stream&quot;); response.setHeader(&quot;Accept-Ranges&quot;, &quot;bytes&quot;); response.setHeader(&quot;Content-Range&quot;, &quot;bytes &quot; + start + &quot;-&quot; + end + &quot;/&quot; + contentLength); response.setHeader(&quot;Content-Length&quot;, (end - start + 1) + &quot;&quot;); response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + fileName); ServletOutputStream outputStream = response.getOutputStream(); AmazonS3V2Util.downloadSubsectionAndCloseOutputStream(S3ClientFactory.BUCKET_NAME, remoteFileName, start, end, outputStream); &#125; /** * S3文件下载，支持断点续传，支持分段下载 */ @GetMapping(&quot;/s3-down-range&quot;) public void s3DownRange(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; // 分段下载测试 String remoteFileName = request.getParameter(&quot;fileName&quot;); if (!StringUtils.hasText(remoteFileName)) &#123; throw new RuntimeException(remoteFileName + &quot;:文件不存在！&quot;); &#125; final long contentLength = AmazonS3V2Util.getObjectInfo(S3ClientFactory.BUCKET_NAME, remoteFileName).contentLength(); String range = request.getHeader(&quot;Range&quot;); String start = null; String end = null; if (StringUtils.hasText(range) &amp;&amp; (range.contains(&quot;bytes=&quot;) &amp;&amp; range.contains(&quot;-&quot;))) &#123; start = org.apache.commons.lang.StringUtils.substringBetween(range, &quot;bytes=&quot;, &quot;-&quot;); end = org.apache.commons.lang.StringUtils.substringAfter(range, &quot;-&quot;); &#125; long startIndex = 0; long endIndex = contentLength - 1; if (StringUtils.hasText(start)) &#123; startIndex = Long.parseLong(start); &#125; if (StringUtils.hasText(end)) &#123; endIndex = Long.parseLong(end); &#125; log.info(&quot;range:&quot; + startIndex + &quot;~&quot; + endIndex); String fileName = remoteFileName; if (remoteFileName.contains(&quot;/&quot;)) &#123; fileName = remoteFileName.substring(remoteFileName.lastIndexOf(&quot;/&quot;) + 1); &#125; if (StringUtils.hasText(start)) &#123; fileName = fileName + &quot;.&quot; + startIndex + &quot;-&quot; + endIndex; &#125; response.setContentType(&quot;application/octet-stream&quot;); response.setHeader(&quot;Accept-Ranges&quot;, &quot;bytes&quot;); response.setHeader(&quot;Content-Range&quot;, &quot;bytes &quot; + startIndex + &quot;-&quot; + endIndex + &quot;/&quot; + contentLength); response.setHeader(&quot;Content-Length&quot;, (endIndex - startIndex + 1) + &quot;&quot;); response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + fileName); ServletOutputStream outputStream = response.getOutputStream(); AmazonS3V2Util.downloadSubsectionAndCloseOutputStream(S3ClientFactory.BUCKET_NAME, remoteFileName, startIndex, endIndex, outputStream); &#125; /** * 上传文件到S3，支持分段上传 */ @PostMapping(&quot;/uploadToS3&quot;) public String uploadFileToS3(MultipartFile file, String remoteFileName) throws IOException &#123; if (file != null &amp;&amp; StringUtils.hasText(remoteFileName)) &#123; log.info(&quot;上传文件到S3：&quot; + remoteFileName); AmazonS3V2Util.multipartUpload(S3ClientFactory.BUCKET_NAME, remoteFileName, file.getBytes(), true); return &quot;上传成功&quot;; &#125; return &quot;上传失败&quot;; &#125;&#125; 源码地址 V2版本：https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/aws-s3-v2 V1版本：https://github.com/hanqunfeng/springbootchapter/blob/master/springboot3-demo/resumed-transfer-offset/src/main/java/com/hanqf/resumedtransferoffset/utils/AmazonS3Util.java","summary":"摘要 本文介绍如何使用AWS SDK for Java V2操作S3。 参考资料： AWS SDK for Java 文档 适用于使用 AWS 软件开发工具包的 Amazon S3 的代码示例","date_published":"2024-01-26T14:30:05.000Z","tags":["技术","aws","s3","s3"]},{"id":"https://blog.hanqunfeng.com/2023/11/06/linux-command12-disk-raid5/","url":"https://blog.hanqunfeng.com/2023/11/06/linux-command12-disk-raid5/","title":"Linux常用命令--磁盘管理之RAID5","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>磁盘的挂载、分区、格式化、扩容等命令</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>AWS EC2 EBS CentOS8(x86_64)</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"写在前面\">写在前面</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>raid后不支持重新挂载到EC2</p>\n</li>\n<li class=\"lvl-2\">\n<p>raid后同样支持分区和扩容，就把raid后的磁盘当作普通磁盘操作即可</p>\n</li>\n</ul>\n<h2 id=\"创建raid5\">创建raid5</h2>\n<h3 id=\"1-登录aws挂载好3块磁盘-raid5要求至少3块盘-这里每个10g\">1.登录aws挂载好3块磁盘,raid5要求至少3块盘,这里每个10g</h3>\n<h3 id=\"2-创建raid5\">2.创建raid5</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看磁盘名称，新挂载的磁盘为 nvme1n1，nvme2n1，nvme3n1</span></span><br><span class=\"line\">$ lsblk</span><br><span class=\"line\">NAME          MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">nvme0n1       259:0    0   8G  0 disk</span><br><span class=\"line\">├─nvme0n1p1   259:1    0   8G  0 part /</span><br><span class=\"line\">└─nvme0n1p128 259:2    0   1M  0 part</span><br><span class=\"line\">nvme1n1       259:3    0  10G  0 disk</span><br><span class=\"line\">nvme2n1       259:4    0  10G  0 disk</span><br><span class=\"line\">nvme3n1       259:5    0  10G  0 disk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 /dev/md0 的raid5逻辑卷</span></span><br><span class=\"line\">$ mdadm --create /dev/md0 --level=5 --raid-devices=3 /dev/nvme1n1 /dev/nvme2n1 /dev/nvme3n1</span><br><span class=\"line\">mdadm: Defaulting to version 1.2 metadata</span><br><span class=\"line\">mdadm: array /dev/md0 started.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分区情况，可以看到 /dev/md0 是20G</span></span><br><span class=\"line\">$ fdisk -l</span><br><span class=\"line\">Disk /dev/nvme0n1：8 GiB，8589934592 字节，16777216 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\">磁盘标识符：465F350B-EC19-47A2-9A1D-44ECF9FF38AC</span><br><span class=\"line\"></span><br><span class=\"line\">设备              起点     末尾     扇区 大小 类型</span><br><span class=\"line\">/dev/nvme0n1p1    4096 16777182 16773087   8G Linux 文件系统</span><br><span class=\"line\">/dev/nvme0n1p128  2048     4095     2048   1M BIOS 启动</span><br><span class=\"line\"></span><br><span class=\"line\">分区表记录没有按磁盘顺序。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme1n1：10 GiB，10737418240 字节，20971520 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme2n1：10 GiB，10737418240 字节，20971520 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme3n1：10 GiB，10737418240 字节，20971520 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/md0：20 GiB，21458059264 字节，41910272 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：524288 字节 / 1048576 字节</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-格式化\">3.格式化</h3>\n<h4 id=\"3-1-ext4\">3.1 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.ext4 /dev/md0</span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=128 blocks, Stripe width=256 blocks</span><br><span class=\"line\">1310720 inodes, 5238784 blocks</span><br><span class=\"line\">261939 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=2153775104</span><br><span class=\"line\">160 block <span class=\"built_in\">groups</span></span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">8192 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks:</span><br><span class=\"line\">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,</span><br><span class=\"line\">    4096000</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成</span><br><span class=\"line\">正在写入inode表: 完成</span><br><span class=\"line\">Creating journal (32768 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-xfs\">3.2 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.xfs /dev/md0</span><br><span class=\"line\"><span class=\"built_in\">log</span> stripe unit (524288 bytes) is too large (maximum is 256KiB)</span><br><span class=\"line\"><span class=\"built_in\">log</span> stripe unit adjusted to 32KiB</span><br><span class=\"line\">meta-data=/dev/md0               isize=512    agcount=16, agsize=327296 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class=\"line\">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=5236736, imaxpct=25</span><br><span class=\"line\">         =                       sunit=128    swidth=256 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=8 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-挂载\">4.挂载</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> /data</span><br><span class=\"line\">$ mount /dev/md0 /data</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  456M     0  456M    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     464M  436K  464M    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/nvme0n1p1 xfs       8.0G  1.7G  6.4G   21% /</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/1000</span><br><span class=\"line\">/dev/md0       ext4       20G   24K   19G    1% /data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开机自动挂载</span></span><br><span class=\"line\"><span class=\"comment\"># ext4</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/md0  /data ext4    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\"><span class=\"comment\"># xfs</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/md0  /data xfs    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a</span><br><span class=\"line\"></span><br><span class=\"line\">$ lsblk <span class=\"comment\"># 此时可以看到 TYPE 为 raid5</span></span><br><span class=\"line\">NAME          MAJ:MIN RM SIZE RO TYPE  MOUNTPOINT</span><br><span class=\"line\">nvme0n1       259:0    0   8G  0 disk</span><br><span class=\"line\">├─nvme0n1p1   259:1    0   8G  0 part  /</span><br><span class=\"line\">└─nvme0n1p128 259:2    0   1M  0 part</span><br><span class=\"line\">nvme1n1       259:3    0  10G  0 disk</span><br><span class=\"line\">└─md0           9:0    0  20G  0 raid5 /data</span><br><span class=\"line\">nvme2n1       259:4    0  10G  0 disk</span><br><span class=\"line\">└─md0           9:0    0  20G  0 raid5 /data</span><br><span class=\"line\">nvme3n1       259:5    0  10G  0 disk</span><br><span class=\"line\">└─md0           9:0    0  20G  0 raid5 /data</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-检查Raid5状态\">5.检查Raid5状态</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 RAID5 数组的状态，重点关注 Array Size 和 Used Dev Size，前者表示raid5中总的磁盘大小，后者表示实际使用的磁盘大小</span></span><br><span class=\"line\">$ mdadm --detail /dev/md0</span><br><span class=\"line\">/dev/md0:</span><br><span class=\"line\">           Version : 1.2</span><br><span class=\"line\">     Creation Time : Tue Oct 31 09:25:02 2023</span><br><span class=\"line\">        Raid Level : raid5</span><br><span class=\"line\">        Array Size : 20955136 (19.98 GiB 21.46 GB)</span><br><span class=\"line\">     Used Dev Size : 10477568 (9.99 GiB 10.73 GB)</span><br><span class=\"line\">      Raid Devices : 3</span><br><span class=\"line\">     Total Devices : 3</span><br><span class=\"line\">       Persistence : Superblock is persistent</span><br><span class=\"line\"></span><br><span class=\"line\">       Update Time : Tue Oct 31 09:45:35 2023</span><br><span class=\"line\">             State : clean</span><br><span class=\"line\">    Active Devices : 3</span><br><span class=\"line\">   Working Devices : 3</span><br><span class=\"line\">    Failed Devices : 0</span><br><span class=\"line\">     Spare Devices : 0</span><br><span class=\"line\"></span><br><span class=\"line\">            Layout : left-symmetric</span><br><span class=\"line\">        Chunk Size : 512K</span><br><span class=\"line\"></span><br><span class=\"line\">Consistency Policy : resync</span><br><span class=\"line\"></span><br><span class=\"line\">              Name : 0</span><br><span class=\"line\">              UUID : 765ad648:3d03a9e0:5a86106f:2e24b14d</span><br><span class=\"line\">            Events : 19</span><br><span class=\"line\"></span><br><span class=\"line\">    Number   Major   Minor   RaidDevice State</span><br><span class=\"line\">       0     259        3        0      active <span class=\"built_in\">sync</span>   /dev/sdf</span><br><span class=\"line\">       1     259        4        1      active <span class=\"built_in\">sync</span>   /dev/sdg</span><br><span class=\"line\">       3     259        5        2      active <span class=\"built_in\">sync</span>   /dev/sdh</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加新的磁盘到现有raid5\">添加新的磁盘到现有raid5</h2>\n<h3 id=\"1-登录aws挂载好1块磁盘-这里还是10g\">1.登录aws挂载好1块磁盘,这里还是10g</h3>\n<h3 id=\"2-查看磁盘名称\">2.查看磁盘名称</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsblk  <span class=\"comment\"># 这里新挂载的磁盘为 nvme4n1</span></span><br><span class=\"line\">NAME          MAJ:MIN RM SIZE RO TYPE  MOUNTPOINT</span><br><span class=\"line\">nvme0n1       259:0    0   8G  0 disk</span><br><span class=\"line\">├─nvme0n1p1   259:1    0   8G  0 part  /</span><br><span class=\"line\">└─nvme0n1p128 259:2    0   1M  0 part</span><br><span class=\"line\">nvme1n1       259:3    0  10G  0 disk</span><br><span class=\"line\">└─md0           9:0    0  20G  0 raid5 /data</span><br><span class=\"line\">nvme2n1       259:4    0  10G  0 disk</span><br><span class=\"line\">└─md0           9:0    0  20G  0 raid5 /data</span><br><span class=\"line\">nvme3n1       259:5    0  10G  0 disk</span><br><span class=\"line\">└─md0           9:0    0  20G  0 raid5 /data</span><br><span class=\"line\">nvme4n1       259:6    0  10G  0 disk</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-格式化-2\">3.格式化</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xfs</span></span><br><span class=\"line\">$ mkfs.xfs /dev/nvme4n1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ext4</span></span><br><span class=\"line\">$ mkfs.ext4 /dev/nvme4n1</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-加入raid5\">4.加入raid5</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mdadm --add /dev/md0 /dev/nvme4n1</span><br><span class=\"line\">mdadm: added /dev/nvme4n1</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-查看raid信息\">5.查看raid信息</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看raid信息，此时可以看到新加入的磁盘被当作了备用盘：Spare Devices : 1</span></span><br><span class=\"line\">$ mdadm --detail /dev/md0</span><br><span class=\"line\">/dev/md0:</span><br><span class=\"line\">           Version : 1.2</span><br><span class=\"line\">     Creation Time : Tue Oct 31 09:25:02 2023</span><br><span class=\"line\">        Raid Level : raid5</span><br><span class=\"line\">        Array Size : 20955136 (19.98 GiB 21.46 GB)</span><br><span class=\"line\">     Used Dev Size : 10477568 (9.99 GiB 10.73 GB)</span><br><span class=\"line\">      Raid Devices : 3</span><br><span class=\"line\">     Total Devices : 4</span><br><span class=\"line\">       Persistence : Superblock is persistent</span><br><span class=\"line\"></span><br><span class=\"line\">       Update Time : Tue Oct 31 09:45:35 2023</span><br><span class=\"line\">             State : clean</span><br><span class=\"line\">    Active Devices : 3</span><br><span class=\"line\">   Working Devices : 4</span><br><span class=\"line\">    Failed Devices : 0</span><br><span class=\"line\">     Spare Devices : 1</span><br><span class=\"line\"></span><br><span class=\"line\">            Layout : left-symmetric</span><br><span class=\"line\">        Chunk Size : 512K</span><br><span class=\"line\"></span><br><span class=\"line\">Consistency Policy : resync</span><br><span class=\"line\"></span><br><span class=\"line\">              Name : 0</span><br><span class=\"line\">              UUID : 765ad648:3d03a9e0:5a86106f:2e24b14d</span><br><span class=\"line\">            Events : 19</span><br><span class=\"line\"></span><br><span class=\"line\">    Number   Major   Minor   RaidDevice State</span><br><span class=\"line\">       0     259        3        0      active <span class=\"built_in\">sync</span>   /dev/sdf</span><br><span class=\"line\">       1     259        4        1      active <span class=\"built_in\">sync</span>   /dev/sdg</span><br><span class=\"line\">       3     259        5        2      active <span class=\"built_in\">sync</span>   /dev/sdh</span><br><span class=\"line\"></span><br><span class=\"line\">       4     259        6        -      spare   /dev/sdi</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-将备用盘加入raid\">6.将备用盘加入raid</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里扩容到4快盘</span></span><br><span class=\"line\">$ mdadm --grow /dev/md0 --raid-devices=4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次查看raid信息</span></span><br><span class=\"line\">$ mdadm --detail /dev/md0</span><br><span class=\"line\">/dev/md0:</span><br><span class=\"line\">           Version : 1.2</span><br><span class=\"line\">     Creation Time : Tue Oct 31 09:25:02 2023</span><br><span class=\"line\">        Raid Level : raid5</span><br><span class=\"line\">        Array Size : 20955136 (19.98 GiB 21.46 GB)</span><br><span class=\"line\">     Used Dev Size : 10477568 (9.99 GiB 10.73 GB)</span><br><span class=\"line\">      Raid Devices : 4</span><br><span class=\"line\">     Total Devices : 4</span><br><span class=\"line\">       Persistence : Superblock is persistent</span><br><span class=\"line\"></span><br><span class=\"line\">       Update Time : Tue Oct 31 10:04:18 2023</span><br><span class=\"line\">             State : clean, reshaping</span><br><span class=\"line\">    Active Devices : 4</span><br><span class=\"line\">   Working Devices : 4</span><br><span class=\"line\">    Failed Devices : 0</span><br><span class=\"line\">     Spare Devices : 0</span><br><span class=\"line\"></span><br><span class=\"line\">            Layout : left-symmetric</span><br><span class=\"line\">        Chunk Size : 512K</span><br><span class=\"line\"></span><br><span class=\"line\">Consistency Policy : resync</span><br><span class=\"line\"></span><br><span class=\"line\">    Reshape Status : 5% complete</span><br><span class=\"line\">     Delta Devices : 1, (3-&gt;4)</span><br><span class=\"line\"></span><br><span class=\"line\">              Name : 0</span><br><span class=\"line\">              UUID : 765ad648:3d03a9e0:5a86106f:2e24b14d</span><br><span class=\"line\">            Events : 39</span><br><span class=\"line\"></span><br><span class=\"line\">    Number   Major   Minor   RaidDevice State</span><br><span class=\"line\">       0     259        3        0      active <span class=\"built_in\">sync</span>   /dev/sdf</span><br><span class=\"line\">       1     259        4        1      active <span class=\"built_in\">sync</span>   /dev/sdg</span><br><span class=\"line\">       3     259        5        2      active <span class=\"built_in\">sync</span>   /dev/sdh</span><br><span class=\"line\">       4     259        6        3      active <span class=\"built_in\">sync</span>   /dev/sdi</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-监视同步过程：扩容后raid机制会将数据分配到新加入的磁盘\">7.监视同步过程：扩容后raid机制会将数据分配到新加入的磁盘</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> /proc/mdstat</span><br><span class=\"line\">Personalities : [raid6] [raid5] [raid4]</span><br><span class=\"line\">md0 : active raid5 nvme4n1[4] nvme3n1[3] nvme2n1[1] nvme1n1[0]</span><br><span class=\"line\">      20955136 blocks super 1.2 level 5, 512k chunk, algorithm 2 [4/4] [UUUU]</span><br><span class=\"line\">      [========&gt;............]  reshape = 42.7% (4484448/10477568) finish=3.9min speed=25563K/sec</span><br><span class=\"line\"></span><br><span class=\"line\">unused devices: &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以使用watch命令进行监控，这里设置为每隔1秒执行一次命令</span></span><br><span class=\"line\">$ watch -n 1 <span class=\"built_in\">cat</span> /proc/mdstat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 完成后的效果</span></span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> /proc/mdstat</span><br><span class=\"line\">Personalities : [raid6] [raid5] [raid4]</span><br><span class=\"line\">md0 : active raid5 nvme4n1[4] nvme3n1[3] nvme2n1[1] nvme1n1[0]</span><br><span class=\"line\">      31432704 blocks super 1.2 level 5, 512k chunk, algorithm 2 [4/4] [UUUU]</span><br><span class=\"line\"></span><br><span class=\"line\">unused devices: &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-扩展文件系统\">8.扩展文件系统</h3>\n<h4 id=\"8-1-ext4\">8.1 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ resize2fs /dev/md0</span><br><span class=\"line\">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">Filesystem at /dev/md0 is mounted on /data; on-line resizing required</span><br><span class=\"line\">old_desc_blocks = 3, new_desc_blocks = 4</span><br><span class=\"line\">The filesystem on /dev/md0 is now 7858176 blocks long.</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  456M     0  456M    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     464M  500K  464M    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/nvme0n1p1 xfs       8.0G  1.7G  6.4G   21% /</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/1000</span><br><span class=\"line\">/dev/md0       ext4       30G   24K   28G    1% /data</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/0</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-2-xfs\">8.2 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xfs_growfs /dev/md0</span><br><span class=\"line\">meta-data=/dev/md0               isize=512    agcount=17, agsize=327296 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class=\"line\">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=5238784, imaxpct=25</span><br><span class=\"line\">         =                       sunit=128    swidth=256 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=8 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\">data blocks changed from 5238784 to 7858176</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  456M     0  456M    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     464M  500K  464M    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/nvme0n1p1 xfs       8.0G  1.7G  6.4G   21% /</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/1000</span><br><span class=\"line\">/dev/md0       xfs        30G  248M   30G    1% /data</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/0</span><br></pre></td></tr></table></figure>\n<h2 id=\"raid5后进行分区\">raid5后进行分区</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>raid5后创建的逻辑卷同样支持分区，注意：如果已经mount，则分区前要先umount</p>\n</li>\n</ul>\n<h3 id=\"1-创建分区，这里以MBR举例\">1.创建分区，这里以MBR举例</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ fdisk /dev/md0</span><br><span class=\"line\"></span><br><span class=\"line\">欢迎使用 fdisk (util-linux 2.30.2)。</span><br><span class=\"line\">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class=\"line\">使用写入命令前请三思。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">分区号 (1-128, 默认  1):</span><br><span class=\"line\">第一个扇区 (34-83820510, 默认 4096):</span><br><span class=\"line\">上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (4096-83820510, 默认 83820510): +10G</span><br><span class=\"line\"></span><br><span class=\"line\">创建了一个新分区 1，类型为“Linux filesystem”，大小为 10 GiB。</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n</span><br><span class=\"line\">分区号 (2-128, 默认  2):</span><br><span class=\"line\">第一个扇区 (20975616-83820510, 默认 20975616):</span><br><span class=\"line\">上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (20975616-83820510, 默认 83820510):</span><br><span class=\"line\"></span><br><span class=\"line\">创建了一个新分区 2，类型为“Linux filesystem”，大小为 30 GiB。</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：p</span><br><span class=\"line\">Disk /dev/md0：40 GiB，42916118528 字节，83820544 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：524288 字节 / 2097152 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\">磁盘标识符：73A41633-30A2-47D5-B812-6C419C795D7C</span><br><span class=\"line\"></span><br><span class=\"line\">设备           起点     末尾     扇区 大小 类型</span><br><span class=\"line\">/dev/md0p1     4096 20975615 20971520  10G Linux 文件系统</span><br><span class=\"line\">/dev/md0p2 20975616 83820510 62844895  30G Linux 文件系统</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：w</span><br><span class=\"line\">分区表已调整。</span><br><span class=\"line\">将调用 ioctl() 来重新读分区表。</span><br><span class=\"line\">正在同步磁盘。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-格式化，这里以xfs举例\">2.格式化，这里以xfs举例</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.xfs /dev/md0p1</span><br><span class=\"line\"><span class=\"built_in\">log</span> stripe unit (524288 bytes) is too large (maximum is 256KiB)</span><br><span class=\"line\"><span class=\"built_in\">log</span> stripe unit adjusted to 32KiB</span><br><span class=\"line\">meta-data=/dev/md0p1             isize=512    agcount=16, agsize=152576 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class=\"line\">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=2441150, imaxpct=25</span><br><span class=\"line\">         =                       sunit=128    swidth=384 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=8 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\"></span><br><span class=\"line\">$ mkfs.xfs /dev/md0p2</span><br><span class=\"line\"><span class=\"built_in\">log</span> stripe unit (524288 bytes) is too large (maximum is 256KiB)</span><br><span class=\"line\"><span class=\"built_in\">log</span> stripe unit adjusted to 32KiB</span><br><span class=\"line\">meta-data=/dev/md0p2             isize=512    agcount=16, agsize=338560 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class=\"line\">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=5416320, imaxpct=25</span><br><span class=\"line\">         =                       sunit=128    swidth=384 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2648, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=8 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-mount到指定路径\">3.mount到指定路径</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> /data1</span><br><span class=\"line\">$ <span class=\"built_in\">mkdir</span> /data2</span><br><span class=\"line\">$ mount /dev/md0p1 /data1</span><br><span class=\"line\">$ mount /dev/md0p2 /data2</span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  456M     0  456M    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     464M  508K  464M    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/nvme0n1p1 xfs       8.0G  1.7G  6.4G   21% /</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/1000</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/0</span><br><span class=\"line\">/dev/md0p1     xfs       9.4G  100M  9.3G    2% /data1</span><br><span class=\"line\">/dev/md0p2     xfs        21G  181M   21G    1% /data2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开机自动挂载</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/md0p1  /data1 xfs    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/md0p2  /data2 xfs    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-扩容，添加新的磁盘，新的磁盘只能扩容最后一个分区，这里就是指的第二个分区\">4.扩容，添加新的磁盘，新的磁盘只能扩容最后一个分区，这里就是指的第二个分区</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>raid5中添加新的磁盘参考上面的内容，这里不再赘述，这里添加一个10g的新磁盘</p>\n</li>\n<li class=\"lvl-2\">\n<p>扩容最后一个分区</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ growpart /dev/md0 2</span><br><span class=\"line\">CHANGED: partition=2 start=19531776 old: size=43330560 end=62862336 new: size=64288735 end=83820511</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>同步文件系统</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xfs_growfs -d /data2</span><br><span class=\"line\">meta-data=/dev/md0p2             isize=512    agcount=16, agsize=338560 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class=\"line\">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=5416320, imaxpct=25</span><br><span class=\"line\">         =                       sunit=128    swidth=384 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2648, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=8 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\">data blocks changed from 5416320 to 8036091</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  456M     0  456M    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     464M  460K  464M    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     464M     0  464M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/nvme0n1p1 xfs       8.0G  1.7G  6.4G   21% /</span><br><span class=\"line\">tmpfs          tmpfs      93M     0   93M    0% /run/user/1000</span><br><span class=\"line\">/dev/md0p1     xfs       9.4G  100M  9.3G    2% /data1</span><br><span class=\"line\">/dev/md0p2     xfs        31G  253M   31G    1% /data2</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 磁盘的挂载、分区、格式化、扩容等命令 本文基于AWS EC2 EBS CentOS8(x86_64) 写在前面 raid后不支持重新挂载到EC2 raid后同样支持分区和扩容，就把raid后的磁盘当作普通磁盘操作即可 创建raid5 1.登录aws挂载好3块磁盘,raid5要求至少3块盘,这里每个10g 2.创建raid5 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# 查看磁盘名称，新挂载的磁盘为 nvme1n1，nvme2n1，nvme3n1$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 8G 0 disk├─nvme0n1p1 259:1 0 8G 0 part /└─nvme0n1p128 259:2 0 1M 0 partnvme1n1 259:3 0 10G 0 disknvme2n1 259:4 0 10G 0 disknvme3n1 259:5 0 10G 0 disk# 创建 /dev/md0 的raid5逻辑卷$ mdadm --create /dev/md0 --level=5 --raid-devices=3 /dev/nvme1n1 /dev/nvme2n1 /dev/nvme3n1mdadm: Defaulting to version 1.2 metadatamdadm: array /dev/md0 started.# 查看分区情况，可以看到 /dev/md0 是20G$ fdisk -lDisk /dev/nvme0n1：8 GiB，8589934592 字节，16777216 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节磁盘标签类型：gpt磁盘标识符：465F350B-EC19-47A2-9A1D-44ECF9FF38AC设备 起点 末尾 扇区 大小 类型/dev/nvme0n1p1 4096 16777182 16773087 8G Linux 文件系统/dev/nvme0n1p128 2048 4095 2048 1M BIOS 启动分区表记录没有按磁盘顺序。Disk /dev/nvme1n1：10 GiB，10737418240 字节，20971520 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节Disk /dev/nvme2n1：10 GiB，10737418240 字节，20971520 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节Disk /dev/nvme3n1：10 GiB，10737418240 字节，20971520 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节Disk /dev/md0：20 GiB，21458059264 字节，41910272 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：524288 字节 / 1048576 字节 3.格式化 3.1 ext4 12345678910111213141516171819202122$ mkfs.ext4 /dev/md0mke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=128 blocks, Stripe width=256 blocks1310720 inodes, 5238784 blocks261939 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=2153775104160 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000Allocating group tables: 完成正在写入inode表: 完成Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成 3.2 xfs 12345678910111213$ mkfs.xfs /dev/md0log stripe unit (524288 bytes) is too large (maximum is 256KiB)log stripe unit adjusted to 32KiBmeta-data=/dev/md0 isize=512 agcount=16, agsize=327296 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=1, rmapbt=0 = reflink=1 bigtime=0 inobtcount=0data = bsize=4096 blocks=5236736, imaxpct=25 = sunit=128 swidth=256 blksnaming =version 2 bsize=4096 ascii-ci=0, ftype=1log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=8 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0 4.挂载 12345678910111213141516171819202122232425262728293031$ mkdir /data$ mount /dev/md0 /data$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 456M 0 456M 0% /devtmpfs tmpfs 464M 0 464M 0% /dev/shmtmpfs tmpfs 464M 436K 464M 1% /runtmpfs tmpfs 464M 0 464M 0% /sys/fs/cgroup/dev/nvme0n1p1 xfs 8.0G 1.7G 6.4G 21% /tmpfs tmpfs 93M 0 93M 0% /run/user/1000/dev/md0 ext4 20G 24K 19G 1% /data# 开机自动挂载# ext4$ echo &#x27;/dev/md0 /data ext4 defaults 0 0&#x27; &gt;&gt; /etc/fstab# xfs$ echo &#x27;/dev/md0 /data xfs defaults 0 0&#x27; &gt;&gt; /etc/fstab$ mount -a$ lsblk # 此时可以看到 TYPE 为 raid5NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 8G 0 disk├─nvme0n1p1 259:1 0 8G 0 part /└─nvme0n1p128 259:2 0 1M 0 partnvme1n1 259:3 0 10G 0 disk└─md0 9:0 0 20G 0 raid5 /datanvme2n1 259:4 0 10G 0 disk└─md0 9:0 0 20G 0 raid5 /datanvme3n1 259:5 0 10G 0 disk└─md0 9:0 0 20G 0 raid5 /data 5.检查Raid5状态 1234567891011121314151617181920212223242526272829303132# 检查 RAID5 数组的状态，重点关注 Array Size 和 Used Dev Size，前者表示raid5中总的磁盘大小，后者表示实际使用的磁盘大小$ mdadm --detail /dev/md0/dev/md0: Version : 1.2 Creation Time : Tue Oct 31 09:25:02 2023 Raid Level : raid5 Array Size : 20955136 (19.98 GiB 21.46 GB) Used Dev Size : 10477568 (9.99 GiB 10.73 GB) Raid Devices : 3 Total Devices : 3 Persistence : Superblock is persistent Update Time : Tue Oct 31 09:45:35 2023 State : clean Active Devices : 3 Working Devices : 3 Failed Devices : 0 Spare Devices : 0 Layout : left-symmetric Chunk Size : 512KConsistency Policy : resync Name : 0 UUID : 765ad648:3d03a9e0:5a86106f:2e24b14d Events : 19 Number Major Minor RaidDevice State 0 259 3 0 active sync /dev/sdf 1 259 4 1 active sync /dev/sdg 3 259 5 2 active sync /dev/sdh 添加新的磁盘到现有raid5 1.登录aws挂载好1块磁盘,这里还是10g 2.查看磁盘名称 123456789101112$ lsblk # 这里新挂载的磁盘为 nvme4n1NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 8G 0 disk├─nvme0n1p1 259:1 0 8G 0 part /└─nvme0n1p128 259:2 0 1M 0 partnvme1n1 259:3 0 10G 0 disk└─md0 9:0 0 20G 0 raid5 /datanvme2n1 259:4 0 10G 0 disk└─md0 9:0 0 20G 0 raid5 /datanvme3n1 259:5 0 10G 0 disk└─md0 9:0 0 20G 0 raid5 /datanvme4n1 259:6 0 10G 0 disk 3.格式化 12345# xfs$ mkfs.xfs /dev/nvme4n1# ext4$ mkfs.ext4 /dev/nvme4n1 4.加入raid5 12$ mdadm --add /dev/md0 /dev/nvme4n1mdadm: added /dev/nvme4n1 5.查看raid信息 12345678910111213141516171819202122232425262728293031323334# 查看raid信息，此时可以看到新加入的磁盘被当作了备用盘：Spare Devices : 1$ mdadm --detail /dev/md0/dev/md0: Version : 1.2 Creation Time : Tue Oct 31 09:25:02 2023 Raid Level : raid5 Array Size : 20955136 (19.98 GiB 21.46 GB) Used Dev Size : 10477568 (9.99 GiB 10.73 GB) Raid Devices : 3 Total Devices : 4 Persistence : Superblock is persistent Update Time : Tue Oct 31 09:45:35 2023 State : clean Active Devices : 3 Working Devices : 4 Failed Devices : 0 Spare Devices : 1 Layout : left-symmetric Chunk Size : 512KConsistency Policy : resync Name : 0 UUID : 765ad648:3d03a9e0:5a86106f:2e24b14d Events : 19 Number Major Minor RaidDevice State 0 259 3 0 active sync /dev/sdf 1 259 4 1 active sync /dev/sdg 3 259 5 2 active sync /dev/sdh 4 259 6 - spare /dev/sdi 6.将备用盘加入raid 123456789101112131415161718192021222324252627282930313233343536373839# 这里扩容到4快盘$ mdadm --grow /dev/md0 --raid-devices=4# 再次查看raid信息$ mdadm --detail /dev/md0/dev/md0: Version : 1.2 Creation Time : Tue Oct 31 09:25:02 2023 Raid Level : raid5 Array Size : 20955136 (19.98 GiB 21.46 GB) Used Dev Size : 10477568 (9.99 GiB 10.73 GB) Raid Devices : 4 Total Devices : 4 Persistence : Superblock is persistent Update Time : Tue Oct 31 10:04:18 2023 State : clean, reshaping Active Devices : 4 Working Devices : 4 Failed Devices : 0 Spare Devices : 0 Layout : left-symmetric Chunk Size : 512KConsistency Policy : resync Reshape Status : 5% complete Delta Devices : 1, (3-&gt;4) Name : 0 UUID : 765ad648:3d03a9e0:5a86106f:2e24b14d Events : 39 Number Major Minor RaidDevice State 0 259 3 0 active sync /dev/sdf 1 259 4 1 active sync /dev/sdg 3 259 5 2 active sync /dev/sdh 4 259 6 3 active sync /dev/sdi 7.监视同步过程：扩容后raid机制会将数据分配到新加入的磁盘 123456789101112131415161718$ cat /proc/mdstatPersonalities : [raid6] [raid5] [raid4]md0 : active raid5 nvme4n1[4] nvme3n1[3] nvme2n1[1] nvme1n1[0] 20955136 blocks super 1.2 level 5, 512k chunk, algorithm 2 [4/4] [UUUU] [========&gt;............] reshape = 42.7% (4484448/10477568) finish=3.9min speed=25563K/secunused devices: &lt;none&gt;# 可以使用watch命令进行监控，这里设置为每隔1秒执行一次命令$ watch -n 1 cat /proc/mdstat# 完成后的效果$ cat /proc/mdstatPersonalities : [raid6] [raid5] [raid4]md0 : active raid5 nvme4n1[4] nvme3n1[3] nvme2n1[1] nvme1n1[0] 31432704 blocks super 1.2 level 5, 512k chunk, algorithm 2 [4/4] [UUUU]unused devices: &lt;none&gt; 8.扩展文件系统 8.1 ext4 12345678910111213141516$ resize2fs /dev/md0resize2fs 1.42.9 (28-Dec-2013)Filesystem at /dev/md0 is mounted on /data; on-line resizing requiredold_desc_blocks = 3, new_desc_blocks = 4The filesystem on /dev/md0 is now 7858176 blocks long.$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 456M 0 456M 0% /devtmpfs tmpfs 464M 0 464M 0% /dev/shmtmpfs tmpfs 464M 500K 464M 1% /runtmpfs tmpfs 464M 0 464M 0% /sys/fs/cgroup/dev/nvme0n1p1 xfs 8.0G 1.7G 6.4G 21% /tmpfs tmpfs 93M 0 93M 0% /run/user/1000/dev/md0 ext4 30G 24K 28G 1% /datatmpfs tmpfs 93M 0 93M 0% /run/user/0 8.2 xfs 1234567891011121314151617181920212223$ xfs_growfs /dev/md0meta-data=/dev/md0 isize=512 agcount=17, agsize=327296 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=1, rmapbt=0 = reflink=1 bigtime=0 inobtcount=0data = bsize=4096 blocks=5238784, imaxpct=25 = sunit=128 swidth=256 blksnaming =version 2 bsize=4096 ascii-ci=0, ftype=1log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=8 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0data blocks changed from 5238784 to 7858176$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 456M 0 456M 0% /devtmpfs tmpfs 464M 0 464M 0% /dev/shmtmpfs tmpfs 464M 500K 464M 1% /runtmpfs tmpfs 464M 0 464M 0% /sys/fs/cgroup/dev/nvme0n1p1 xfs 8.0G 1.7G 6.4G 21% /tmpfs tmpfs 93M 0 93M 0% /run/user/1000/dev/md0 xfs 30G 248M 30G 1% /datatmpfs tmpfs 93M 0 93M 0% /run/user/0 raid5后进行分区 raid5后创建的逻辑卷同样支持分区，注意：如果已经mount，则分区前要先umount 1.创建分区，这里以MBR举例 12345678910111213141516171819202122232425262728293031323334353637$ fdisk /dev/md0欢迎使用 fdisk (util-linux 2.30.2)。更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。命令(输入 m 获取帮助)：n分区号 (1-128, 默认 1):第一个扇区 (34-83820510, 默认 4096):上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (4096-83820510, 默认 83820510): +10G创建了一个新分区 1，类型为“Linux filesystem”，大小为 10 GiB。命令(输入 m 获取帮助)：n分区号 (2-128, 默认 2):第一个扇区 (20975616-83820510, 默认 20975616):上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (20975616-83820510, 默认 83820510):创建了一个新分区 2，类型为“Linux filesystem”，大小为 30 GiB。命令(输入 m 获取帮助)：pDisk /dev/md0：40 GiB，42916118528 字节，83820544 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：524288 字节 / 2097152 字节磁盘标签类型：gpt磁盘标识符：73A41633-30A2-47D5-B812-6C419C795D7C设备 起点 末尾 扇区 大小 类型/dev/md0p1 4096 20975615 20971520 10G Linux 文件系统/dev/md0p2 20975616 83820510 62844895 30G Linux 文件系统命令(输入 m 获取帮助)：w分区表已调整。将调用 ioctl() 来重新读分区表。正在同步磁盘。 2.格式化，这里以xfs举例 123456789101112131415161718192021222324252627$ mkfs.xfs /dev/md0p1log stripe unit (524288 bytes) is too large (maximum is 256KiB)log stripe unit adjusted to 32KiBmeta-data=/dev/md0p1 isize=512 agcount=16, agsize=152576 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=1, rmapbt=0 = reflink=1 bigtime=0 inobtcount=0data = bsize=4096 blocks=2441150, imaxpct=25 = sunit=128 swidth=384 blksnaming =version 2 bsize=4096 ascii-ci=0, ftype=1log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=8 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0$ mkfs.xfs /dev/md0p2log stripe unit (524288 bytes) is too large (maximum is 256KiB)log stripe unit adjusted to 32KiBmeta-data=/dev/md0p2 isize=512 agcount=16, agsize=338560 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=1, rmapbt=0 = reflink=1 bigtime=0 inobtcount=0data = bsize=4096 blocks=5416320, imaxpct=25 = sunit=128 swidth=384 blksnaming =version 2 bsize=4096 ascii-ci=0, ftype=1log =internal log bsize=4096 blocks=2648, version=2 = sectsz=512 sunit=8 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0 3.mount到指定路径 1234567891011121314151617181920$ mkdir /data1$ mkdir /data2$ mount /dev/md0p1 /data1$ mount /dev/md0p2 /data2$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 456M 0 456M 0% /devtmpfs tmpfs 464M 0 464M 0% /dev/shmtmpfs tmpfs 464M 508K 464M 1% /runtmpfs tmpfs 464M 0 464M 0% /sys/fs/cgroup/dev/nvme0n1p1 xfs 8.0G 1.7G 6.4G 21% /tmpfs tmpfs 93M 0 93M 0% /run/user/1000tmpfs tmpfs 93M 0 93M 0% /run/user/0/dev/md0p1 xfs 9.4G 100M 9.3G 2% /data1/dev/md0p2 xfs 21G 181M 21G 1% /data2# 开机自动挂载$ echo &#x27;/dev/md0p1 /data1 xfs defaults 0 0&#x27; &gt;&gt; /etc/fstab$ echo &#x27;/dev/md0p2 /data2 xfs defaults 0 0&#x27; &gt;&gt; /etc/fstab$ mount -a 4.扩容，添加新的磁盘，新的磁盘只能扩容最后一个分区，这里就是指的第二个分区 raid5中添加新的磁盘参考上面的内容，这里不再赘述，这里添加一个10g的新磁盘 扩容最后一个分区 12$ growpart /dev/md0 2CHANGED: partition=2 start=19531776 old: size=43330560 end=62862336 new: size=64288735 end=83820511 同步文件系统 1234567891011121314151617181920212223$ xfs_growfs -d /data2meta-data=/dev/md0p2 isize=512 agcount=16, agsize=338560 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=1, rmapbt=0 = reflink=1 bigtime=0 inobtcount=0data = bsize=4096 blocks=5416320, imaxpct=25 = sunit=128 swidth=384 blksnaming =version 2 bsize=4096 ascii-ci=0, ftype=1log =internal log bsize=4096 blocks=2648, version=2 = sectsz=512 sunit=8 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0data blocks changed from 5416320 to 8036091$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 456M 0 456M 0% /devtmpfs tmpfs 464M 0 464M 0% /dev/shmtmpfs tmpfs 464M 460K 464M 1% /runtmpfs tmpfs 464M 0 464M 0% /sys/fs/cgroup/dev/nvme0n1p1 xfs 8.0G 1.7G 6.4G 21% /tmpfs tmpfs 93M 0 93M 0% /run/user/1000/dev/md0p1 xfs 9.4G 100M 9.3G 2% /data1/dev/md0p2 xfs 31G 253M 31G 1% /data2","summary":"摘要 磁盘的挂载、分区、格式化、扩容等命令 本文基于AWS EC2 EBS CentOS8(x86_64)","date_published":"2023-11-06T15:30:05.000Z","tags":["技术","linux","linux常用命令","linux常用命令"]},{"id":"https://blog.hanqunfeng.com/2023/11/06/linux-command12-disk-lvs/","url":"https://blog.hanqunfeng.com/2023/11/06/linux-command12-disk-lvs/","title":"Linux常用命令--磁盘管理之逻辑卷","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>磁盘的挂载、分区、格式化、扩容等命令</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>AWS EC2 EBS CentOS8(x86_64)</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"写在前面\">写在前面</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>逻辑卷不支持<code>MBR</code>和<code>GPT</code>分区，但通过<code>MBR</code>和<code>GPT</code>分区后的子分区可以被加入到物理卷组，从而扩展原有逻辑分区或者创建新的逻辑分区</p>\n</li>\n<li class=\"lvl-2\">\n<p>逻辑卷与普通的磁盘和分区一样，同样支持重新挂载到ec2，不过要将组成逻辑卷和物理卷组的所有磁盘都挂载到ec2后才有效</p>\n</li>\n</ul>\n<h2 id=\"挂载新的逻辑卷\">挂载新的逻辑卷</h2>\n<h3 id=\"1-aws控制台–-卷–-创建一个新卷，注意选择可用区，然后点击操作–-挂载卷–选择对应的ec2实例\">1.aws控制台–&gt;卷–&gt;创建一个新卷，注意选择可用区，然后点击操作–&gt;挂载卷–选择对应的ec2实例</h3>\n<h3 id=\"2-ssh-登录-ec2，以下操作全责root下进行，初始磁盘情况如下\">2.ssh 登录 ec2，以下操作全责root下进行，初始磁盘情况如下</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  2.0G     0  2.0G    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     2.0G     0  2.0G    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     2.0G  532K  2.0G    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     2.0G     0  2.0G    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/xvda1     xfs       100G   13G   88G   13% /</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1002</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1001</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1000</span><br><span class=\"line\">/dev/xvdf      xfs        20G   53M   20G    1% /data</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-查看新挂载卷的名称，这里看到新挂载的卷名称为-xvdg\">3.查看新挂载卷的名称，这里看到新挂载的卷名称为 <code>xvdg</code></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsblk</span><br><span class=\"line\">NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">xvda    202:0    0  100G  0 disk</span><br><span class=\"line\">└─xvda1 202:1    0  100G  0 part /</span><br><span class=\"line\">xvdf    202:80   0   20G  0 disk /data</span><br><span class=\"line\">xvdg    202:96   0   10G  0 disk</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-创建新物理卷\">4.创建新物理卷</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新物理卷，可以先分区再创建，这里为了省事不进行分区，也就是说，物理卷可以通过磁盘或者磁盘的子分区进行创建</span></span><br><span class=\"line\">$ pvcreate /dev/xvdg</span><br><span class=\"line\"> Physical volume <span class=\"string\">&quot;/dev/xvdg&quot;</span> successfully created.</span><br><span class=\"line\"><span class=\"comment\"># 查看当期所有物理卷（或使用 pvdisplay 命令）</span></span><br><span class=\"line\">pvs</span><br><span class=\"line\">  PV         VG Fmt  Attr PSize  PFree</span><br><span class=\"line\">  /dev/sdg      lvm2 ---  10.00g 10.00g</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-创建新物理卷组\">5.创建新物理卷组</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新物理卷组，这里 vgnew 就是新卷组的名称</span></span><br><span class=\"line\">$ vgcreate vgnew /dev/xvdg</span><br><span class=\"line\">  Volume group <span class=\"string\">&quot;vgnew&quot;</span> successfully created</span><br><span class=\"line\"><span class=\"comment\"># 查看卷组（或使用  命令）</span></span><br><span class=\"line\">vgs</span><br><span class=\"line\">  VG    <span class=\"comment\">#PV #LV #SN Attr   VSize   VFree</span></span><br><span class=\"line\">  vgnew   1   0   0 wz--n- &lt;10.00g &lt;10.00g</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-创建新逻辑卷\">6.创建新逻辑卷</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新逻辑卷，lvnew 为自定义逻辑卷名称，一个物理卷组可以创建多个逻辑卷，重点看物理卷组的剩余空间</span></span><br><span class=\"line\">$ lvcreate -n lvnew -l 100%FREE vgnew   <span class=\"comment\"># 这里的含义是将物理卷组中100%的剩余可用空间分配给新的逻辑卷，也可以只使用卷组的部分空余空间，如50%FREE，或者指定具体的容量：lvcreate -n lvnew -L 5G vgnew</span></span><br><span class=\"line\">  Logical volume <span class=\"string\">&quot;lvnew&quot;</span> created.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前所有逻辑卷（或使用 lvdisplay 命令）</span></span><br><span class=\"line\">$ lvs</span><br><span class=\"line\">  LV    VG    Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class=\"line\">  lvnew vgnew -wi-a----- &lt;10.00g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看磁盘信息，注意此时创建的逻辑卷的全称为 vgnew-lvnew，与其对应的磁盘路径为 /dev/vgnew/lvnew ，其TYPE为 lvm，这里说一下TYPE: disk-磁盘卷，part-分区卷，lvm-逻辑卷</span></span><br><span class=\"line\">$ lsblk</span><br><span class=\"line\">NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">xvda          202:0    0  100G  0 disk</span><br><span class=\"line\">└─xvda1       202:1    0  100G  0 part /</span><br><span class=\"line\">xvdf          202:80   0   20G  0 disk /data</span><br><span class=\"line\">xvdg          202:96   0   10G  0 disk</span><br><span class=\"line\">└─vgnew-lvnew 253:0    0   10G  0 lvm  /new_data</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-格式化新卷\">7.格式化新卷</h3>\n<h4 id=\"7-1-xfs\">7.1 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.xfs /dev/vgnew/lvnew</span><br><span class=\"line\">meta-data=/dev/vgnew/lvnew       isize=512    agcount=4, agsize=655104 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=2620416, imaxpct=25</span><br><span class=\"line\">         =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-2-ext4\">7.2 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.ext4 /dev/vgnew/lvnew</span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">655360 inodes, 2620416 blocks</span><br><span class=\"line\">131020 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=2151677952</span><br><span class=\"line\">80 block <span class=\"built_in\">groups</span></span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">8192 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks:</span><br><span class=\"line\">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成</span><br><span class=\"line\">正在写入inode表: 完成</span><br><span class=\"line\">Creating journal (32768 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-创建新路径并将新卷挂载上\">8.创建新路径并将新卷挂载上</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> /new_data</span><br><span class=\"line\">$ mount /dev/vgnew/lvnew /new_data</span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统                类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs                devtmpfs  2.0G     0  2.0G    0% /dev</span><br><span class=\"line\">tmpfs                   tmpfs     2.0G     0  2.0G    0% /dev/shm</span><br><span class=\"line\">tmpfs                   tmpfs     2.0G  544K  2.0G    1% /run</span><br><span class=\"line\">tmpfs                   tmpfs     2.0G     0  2.0G    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/xvda1              xfs       100G   13G   88G   13% /</span><br><span class=\"line\">/dev/xvdf               xfs        20G   53M   20G    1% /data</span><br><span class=\"line\">tmpfs                   tmpfs     393M     0  393M    0% /run/user/1002</span><br><span class=\"line\">tmpfs                   tmpfs     393M     0  393M    0% /run/user/1001</span><br><span class=\"line\">tmpfs                   tmpfs     393M     0  393M    0% /run/user/1000</span><br><span class=\"line\">/dev/mapper/vgnew-lvnew xfs        10G   43M   10G    1% /new_data</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-永久挂载卷\">9.永久挂载卷</h3>\n<h4 id=\"9-1-xfs\">9.1 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/mapper/vgnew-lvnew  /new_data xfs    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n<h4 id=\"9-2-ext4\">9.2 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/mapper/vgnew-lvnew  /new_data ext4    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加新的磁盘到存在的逻辑卷\">添加新的磁盘到存在的逻辑卷</h2>\n<h3 id=\"1-添加新的磁盘，步骤同1，2，3，新卷名称-xvdh，注意物理卷的方式扩容只能添加新的磁盘，不支持修改ebs容量的方式进行扩容\">1.添加新的磁盘，步骤同1，2，3，新卷名称 xvdh，注意物理卷的方式扩容只能添加新的磁盘，不支持修改ebs容量的方式进行扩容</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsblk</span><br><span class=\"line\">NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">xvda          202:0    0  100G  0 disk</span><br><span class=\"line\">└─xvda1       202:1    0  100G  0 part /</span><br><span class=\"line\">xvdf          202:80   0   20G  0 disk /data</span><br><span class=\"line\">xvdg          202:96   0   10G  0 disk</span><br><span class=\"line\">└─vgnew-lvnew 253:0    0   10G  0 lvm  /new_data</span><br><span class=\"line\">xvdh          202:112  0   10G  0 disk</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-创建新物理卷\">2.创建新物理卷</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新物理卷，可以先分区再创建，这里为了省事不进行分区</span></span><br><span class=\"line\">$ pvcreate /dev/xvdh</span><br><span class=\"line\">  Physical volume <span class=\"string\">&quot;/dev/xvdh&quot;</span> successfully created.</span><br><span class=\"line\"><span class=\"comment\"># 查看当期所有物理卷（或使用 pvdisplay 命令）</span></span><br><span class=\"line\">$ pvs</span><br><span class=\"line\">  PV         VG    Fmt  Attr PSize   PFree</span><br><span class=\"line\">  /dev/sdg   vgnew lvm2 a--  &lt;10.00g     0</span><br><span class=\"line\">  /dev/sdh         lvm2 ---   10.00g 10.00g</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-扩展已有卷组\">3.扩展已有卷组</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将新的物理卷 /dev/sdh 加入卷组 vgnew</span></span><br><span class=\"line\">$ vgextend vgnew /dev/sdh</span><br><span class=\"line\">  Volume group <span class=\"string\">&quot;vgnew&quot;</span> successfully extended</span><br><span class=\"line\"><span class=\"comment\"># 查看当前所有物理卷（或使用 pvdisplay 命令）</span></span><br><span class=\"line\">$ pvs</span><br><span class=\"line\">  PV         VG    Fmt  Attr PSize   PFree</span><br><span class=\"line\">  /dev/sdg   vgnew lvm2 a--  &lt;10.00g      0</span><br><span class=\"line\">  /dev/sdh   vgnew lvm2 a--  &lt;10.00g &lt;10.00g</span><br><span class=\"line\"><span class=\"comment\"># 查看卷组（或使用 vgdisplay 命令），此次可以看到卷组中剩余可用空间 VFree和总大小 VSize</span></span><br><span class=\"line\">$ vgs</span><br><span class=\"line\">  VG    <span class=\"comment\">#PV #LV #SN Attr   VSize  VFree</span></span><br><span class=\"line\">  vgnew   2   1   0 wz--n- 19.99g &lt;10.00g</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-扩容已有逻辑卷\">4.扩容已有逻辑卷</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将卷组中的剩余空间添加到指定逻辑卷</span></span><br><span class=\"line\">$ lvextend -l +100%FREE /dev/vgnew/lvnew</span><br><span class=\"line\">  Size of logical volume vgnew/lvnew changed from &lt;10.00 GiB (2559 extents) to 19.99 GiB (5118 extents).</span><br><span class=\"line\">  Logical volume vgnew/lvnew successfully resized.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以加上 -r,自动更新文件系统</span></span><br><span class=\"line\">$ lvextend -r -l +100%FREE /dev/vgnew/lvnew</span><br><span class=\"line\">  Size of logical volume vgnew/lvnew changed from 509.99 GiB (130558 extents) to &lt;519.99 GiB (133117 extents).</span><br><span class=\"line\">  Logical volume vgnew/lvnew successfully resized.</span><br><span class=\"line\">meta-data=/dev/mapper/vgnew-lvnew isize=512    agcount=817, agsize=163776 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class=\"line\">         =                       reflink=1    bigtime=0 inobtcount=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=133691392, imaxpct=25</span><br><span class=\"line\">         =                       sunit=1      swidth=1 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=1 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\">data blocks changed from 133691392 to 136311808</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-更新文件系统，上面的扩展逻辑卷名称加上-r-后，就不需要执行的命令了\">5.更新文件系统，上面的扩展逻辑卷名称加上 <code>-r</code> 后，就不需要执行的命令了</h3>\n<h4 id=\"5-1-xfs\">5.1 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xfs_growfs /dev/vgnew/lvnew</span><br><span class=\"line\">meta-data=/dev/mapper/vgnew-lvnew isize=512    agcount=4, agsize=655104 blks</span><br><span class=\"line\">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">         =                       crc=1        finobt=1 spinodes=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=2620416, imaxpct=25</span><br><span class=\"line\">         =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal               bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class=\"line\">data blocks changed from 2620416 to 5240832</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2-ext4\">5.2 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ resize2fs /dev/mapper/vgnew-lvnew</span><br><span class=\"line\">resize2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">Filesystem at /dev/mapper/vgnew-lvnew is mounted on /new_data; on-line resizing required</span><br><span class=\"line\">old_desc_blocks = 2, new_desc_blocks = 3</span><br><span class=\"line\">The filesystem on /dev/mapper/vgnew-lvnew is now 5240832 blocks long.</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3-查看结果\">5.3 查看结果</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统                类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs                devtmpfs  2.0G     0  2.0G    0% /dev</span><br><span class=\"line\">tmpfs                   tmpfs     2.0G     0  2.0G    0% /dev/shm</span><br><span class=\"line\">tmpfs                   tmpfs     2.0G  548K  2.0G    1% /run</span><br><span class=\"line\">tmpfs                   tmpfs     2.0G     0  2.0G    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/xvda1              xfs       100G   13G   88G   13% /</span><br><span class=\"line\">/dev/xvdf               xfs        20G   53M   20G    1% /data</span><br><span class=\"line\">tmpfs                   tmpfs     393M     0  393M    0% /run/user/1002</span><br><span class=\"line\">tmpfs                   tmpfs     393M     0  393M    0% /run/user/1001</span><br><span class=\"line\">tmpfs                   tmpfs     393M     0  393M    0% /run/user/1000</span><br><span class=\"line\">/dev/mapper/vgnew-lvnew xfs        20G   53M   20G    1% /new_data</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 磁盘的挂载、分区、格式化、扩容等命令 本文基于AWS EC2 EBS CentOS8(x86_64) 写在前面 逻辑卷不支持MBR和GPT分区，但通过MBR和GPT分区后的子分区可以被加入到物理卷组，从而扩展原有逻辑分区或者创建新的逻辑分区 逻辑卷与普通的磁盘和分区一样，同样支持重新挂载到ec2，不过要将组成逻辑卷和物理卷组的所有磁盘都挂载到ec2后才有效 挂载新的逻辑卷 1.aws控制台–&gt;卷–&gt;创建一个新卷，注意选择可用区，然后点击操作–&gt;挂载卷–选择对应的ec2实例 2.ssh 登录 ec2，以下操作全责root下进行，初始磁盘情况如下 1234567891011$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 2.0G 0 2.0G 0% /devtmpfs tmpfs 2.0G 0 2.0G 0% /dev/shmtmpfs tmpfs 2.0G 532K 2.0G 1% /runtmpfs tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup/dev/xvda1 xfs 100G 13G 88G 13% /tmpfs tmpfs 393M 0 393M 0% /run/user/1002tmpfs tmpfs 393M 0 393M 0% /run/user/1001tmpfs tmpfs 393M 0 393M 0% /run/user/1000/dev/xvdf xfs 20G 53M 20G 1% /data 3.查看新挂载卷的名称，这里看到新挂载的卷名称为 xvdg 123456$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTxvda 202:0 0 100G 0 disk└─xvda1 202:1 0 100G 0 part /xvdf 202:80 0 20G 0 disk /dataxvdg 202:96 0 10G 0 disk 4.创建新物理卷 1234567# 创建新物理卷，可以先分区再创建，这里为了省事不进行分区，也就是说，物理卷可以通过磁盘或者磁盘的子分区进行创建$ pvcreate /dev/xvdg Physical volume &quot;/dev/xvdg&quot; successfully created.# 查看当期所有物理卷（或使用 pvdisplay 命令）pvs PV VG Fmt Attr PSize PFree /dev/sdg lvm2 --- 10.00g 10.00g 5.创建新物理卷组 1234567# 创建新物理卷组，这里 vgnew 就是新卷组的名称$ vgcreate vgnew /dev/xvdg Volume group &quot;vgnew&quot; successfully created# 查看卷组（或使用 命令）vgs VG #PV #LV #SN Attr VSize VFree vgnew 1 0 0 wz--n- &lt;10.00g &lt;10.00g 6.创建新逻辑卷 1234567891011121314151617# 创建新逻辑卷，lvnew 为自定义逻辑卷名称，一个物理卷组可以创建多个逻辑卷，重点看物理卷组的剩余空间$ lvcreate -n lvnew -l 100%FREE vgnew # 这里的含义是将物理卷组中100%的剩余可用空间分配给新的逻辑卷，也可以只使用卷组的部分空余空间，如50%FREE，或者指定具体的容量：lvcreate -n lvnew -L 5G vgnew Logical volume &quot;lvnew&quot; created.# 查看当前所有逻辑卷（或使用 lvdisplay 命令）$ lvs LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert lvnew vgnew -wi-a----- &lt;10.00g# 查看磁盘信息，注意此时创建的逻辑卷的全称为 vgnew-lvnew，与其对应的磁盘路径为 /dev/vgnew/lvnew ，其TYPE为 lvm，这里说一下TYPE: disk-磁盘卷，part-分区卷，lvm-逻辑卷$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTxvda 202:0 0 100G 0 disk└─xvda1 202:1 0 100G 0 part /xvdf 202:80 0 20G 0 disk /dataxvdg 202:96 0 10G 0 disk└─vgnew-lvnew 253:0 0 10G 0 lvm /new_data 7.格式化新卷 7.1 xfs 12345678910$ mkfs.xfs /dev/vgnew/lvnewmeta-data=/dev/vgnew/lvnew isize=512 agcount=4, agsize=655104 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=0data = bsize=4096 blocks=2620416, imaxpct=25 = sunit=0 swidth=0 blksnaming =version 2 bsize=4096 ascii-ci=0 ftype=1log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0 7.2 ext4 123456789101112131415161718192021$ mkfs.ext4 /dev/vgnew/lvnewmke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks655360 inodes, 2620416 blocks131020 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=215167795280 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632Allocating group tables: 完成正在写入inode表: 完成Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成 8.创建新路径并将新卷挂载上 1234567891011121314$ mkdir /new_data$ mount /dev/vgnew/lvnew /new_data$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 2.0G 0 2.0G 0% /devtmpfs tmpfs 2.0G 0 2.0G 0% /dev/shmtmpfs tmpfs 2.0G 544K 2.0G 1% /runtmpfs tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup/dev/xvda1 xfs 100G 13G 88G 13% //dev/xvdf xfs 20G 53M 20G 1% /datatmpfs tmpfs 393M 0 393M 0% /run/user/1002tmpfs tmpfs 393M 0 393M 0% /run/user/1001tmpfs tmpfs 393M 0 393M 0% /run/user/1000/dev/mapper/vgnew-lvnew xfs 10G 43M 10G 1% /new_data 9.永久挂载卷 9.1 xfs 12echo &#x27;/dev/mapper/vgnew-lvnew /new_data xfs defaults 0 0&#x27; &gt;&gt; /etc/fstabmount -a 9.2 ext4 12echo &#x27;/dev/mapper/vgnew-lvnew /new_data ext4 defaults 0 0&#x27; &gt;&gt; /etc/fstabmount -a 添加新的磁盘到存在的逻辑卷 1.添加新的磁盘，步骤同1，2，3，新卷名称 xvdh，注意物理卷的方式扩容只能添加新的磁盘，不支持修改ebs容量的方式进行扩容 12345678$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTxvda 202:0 0 100G 0 disk└─xvda1 202:1 0 100G 0 part /xvdf 202:80 0 20G 0 disk /dataxvdg 202:96 0 10G 0 disk└─vgnew-lvnew 253:0 0 10G 0 lvm /new_dataxvdh 202:112 0 10G 0 disk 2.创建新物理卷 12345678# 创建新物理卷，可以先分区再创建，这里为了省事不进行分区$ pvcreate /dev/xvdh Physical volume &quot;/dev/xvdh&quot; successfully created.# 查看当期所有物理卷（或使用 pvdisplay 命令）$ pvs PV VG Fmt Attr PSize PFree /dev/sdg vgnew lvm2 a-- &lt;10.00g 0 /dev/sdh lvm2 --- 10.00g 10.00g 3.扩展已有卷组 123456789101112# 将新的物理卷 /dev/sdh 加入卷组 vgnew$ vgextend vgnew /dev/sdh Volume group &quot;vgnew&quot; successfully extended# 查看当前所有物理卷（或使用 pvdisplay 命令）$ pvs PV VG Fmt Attr PSize PFree /dev/sdg vgnew lvm2 a-- &lt;10.00g 0 /dev/sdh vgnew lvm2 a-- &lt;10.00g &lt;10.00g# 查看卷组（或使用 vgdisplay 命令），此次可以看到卷组中剩余可用空间 VFree和总大小 VSize$ vgs VG #PV #LV #SN Attr VSize VFree vgnew 2 1 0 wz--n- 19.99g &lt;10.00g 4.扩容已有逻辑卷 1234567891011121314151617181920# 将卷组中的剩余空间添加到指定逻辑卷$ lvextend -l +100%FREE /dev/vgnew/lvnew Size of logical volume vgnew/lvnew changed from &lt;10.00 GiB (2559 extents) to 19.99 GiB (5118 extents). Logical volume vgnew/lvnew successfully resized.# 可以加上 -r,自动更新文件系统$ lvextend -r -l +100%FREE /dev/vgnew/lvnew Size of logical volume vgnew/lvnew changed from 509.99 GiB (130558 extents) to &lt;519.99 GiB (133117 extents). Logical volume vgnew/lvnew successfully resized.meta-data=/dev/mapper/vgnew-lvnew isize=512 agcount=817, agsize=163776 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=1, rmapbt=0 = reflink=1 bigtime=0 inobtcount=0data = bsize=4096 blocks=133691392, imaxpct=25 = sunit=1 swidth=1 blksnaming =version 2 bsize=4096 ascii-ci=0, ftype=1log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=1 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0data blocks changed from 133691392 to 136311808 5.更新文件系统，上面的扩展逻辑卷名称加上 -r 后，就不需要执行的命令了 5.1 xfs 1234567891011$ xfs_growfs /dev/vgnew/lvnewmeta-data=/dev/mapper/vgnew-lvnew isize=512 agcount=4, agsize=655104 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1 spinodes=0data = bsize=4096 blocks=2620416, imaxpct=25 = sunit=0 swidth=0 blksnaming =version 2 bsize=4096 ascii-ci=0 ftype=1log =internal bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0data blocks changed from 2620416 to 5240832 5.2 ext4 12345$ resize2fs /dev/mapper/vgnew-lvnewresize2fs 1.42.9 (28-Dec-2013)Filesystem at /dev/mapper/vgnew-lvnew is mounted on /new_data; on-line resizing requiredold_desc_blocks = 2, new_desc_blocks = 3The filesystem on /dev/mapper/vgnew-lvnew is now 5240832 blocks long. 5.3 查看结果 123456789101112$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 2.0G 0 2.0G 0% /devtmpfs tmpfs 2.0G 0 2.0G 0% /dev/shmtmpfs tmpfs 2.0G 548K 2.0G 1% /runtmpfs tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup/dev/xvda1 xfs 100G 13G 88G 13% //dev/xvdf xfs 20G 53M 20G 1% /datatmpfs tmpfs 393M 0 393M 0% /run/user/1002tmpfs tmpfs 393M 0 393M 0% /run/user/1001tmpfs tmpfs 393M 0 393M 0% /run/user/1000/dev/mapper/vgnew-lvnew xfs 20G 53M 20G 1% /new_data","summary":"摘要 磁盘的挂载、分区、格式化、扩容等命令 本文基于AWS EC2 EBS CentOS8(x86_64)","date_published":"2023-11-06T14:30:05.000Z","tags":["技术","linux","linux常用命令","linux常用命令"]},{"id":"https://blog.hanqunfeng.com/2023/11/06/linux-command12-disk/","url":"https://blog.hanqunfeng.com/2023/11/06/linux-command12-disk/","title":"Linux常用命令--磁盘管理之基础篇","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>磁盘的挂载、分区、格式化、扩容等命令</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于<code>AWS EC2 EBS CentOS8(x86_64)</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"添加新卷并绑定到新的路径下\">添加新卷并绑定到新的路径下</h2>\n<h3 id=\"1-aws控制台–-卷–-创建一个新卷（10G），注意选择可用区，然后点击操作–-挂载卷–-选择对应的ec2实例\">1.aws控制台–&gt;卷–&gt;创建一个新卷（10G），注意选择可用区，然后点击操作–&gt;挂载卷–&gt;选择对应的ec2实例</h3>\n<h3 id=\"2-ssh-登录-ec2，以下操作全责root下进行，初始磁盘情况如下\">2.ssh 登录 ec2，以下操作全责root下进行，初始磁盘情况如下</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  2.0G     0  2.0G    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     2.0G     0  2.0G    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     2.0G  532K  2.0G    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     2.0G     0  2.0G    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/xvda1     xfs       100G   13G   88G   13% /</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1002</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1001</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1000</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-查看新挂载卷的名称，这里看到新挂载的卷名称为-xvdf\">3.查看新挂载卷的名称，这里看到新挂载的卷名称为 <code>xvdf</code></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsblk</span><br><span class=\"line\">NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">xvda    202:0    0  100G  0 disk</span><br><span class=\"line\">└─xvda1 202:1    0  100G  0 part /</span><br><span class=\"line\">xvdf    202:80   0   10G  0 disk</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-格式化新卷\">4.格式化新卷</h3>\n<div class=\"tips\">\n<p><em><strong>可以查看磁盘的格式化类型</strong></em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方法1，更简单</span></span><br><span class=\"line\">$ lsblk -f</span><br><span class=\"line\">NAME          FSTYPE LABEL UUID                                 MOUNTPOINT</span><br><span class=\"line\">nvme0n1</span><br><span class=\"line\">├─nvme0n1p1   xfs    /     a79c006f-96af-49dc-a71a-2779441678a3 /</span><br><span class=\"line\">└─nvme0n1p128</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法2，后面根磁盘名称或者分区名称</span></span><br><span class=\"line\">$ blkid /dev/nvme0n1p1</span><br><span class=\"line\">/dev/nvme0n1p1: LABEL=<span class=\"string\">&quot;/&quot;</span> UUID=<span class=\"string\">&quot;a79c006f-96af-49dc-a71a-2779441678a3&quot;</span> TYPE=<span class=\"string\">&quot;xfs&quot;</span> PARTLABEL=<span class=\"string\">&quot;Linux&quot;</span> PARTUUID=<span class=\"string\">&quot;80232d14-a44a-48c8-844b-e54d7e6178eb&quot;</span></span><br><span class=\"line\">blkid /dev/nvme0n1</span><br><span class=\"line\">/dev/nvme0n1: PTUUID=<span class=\"string\">&quot;0bcd4d37-a271-4b2c-a475-a2bdb05f5f0d&quot;</span> PTTYPE=<span class=\"string\">&quot;gpt&quot;</span></span><br></pre></td></tr></table></figure>\n</div>\n<h4 id=\"4-1-xfs\">4.1 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.xfs /dev/xvdf</span><br><span class=\"line\">meta-data=/dev/xvdf              isize=512    agcount=4, agsize=655360 blks</span><br><span class=\"line\">        =                       sectsz=512   attr=2, projid32bit=1</span><br><span class=\"line\">        =                       crc=1        finobt=1, sparse=0</span><br><span class=\"line\">data     =                       bsize=4096   blocks=2621440, imaxpct=25</span><br><span class=\"line\">        =                       sunit=0      swidth=0 blks</span><br><span class=\"line\">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class=\"line\"><span class=\"built_in\">log</span>      =internal <span class=\"built_in\">log</span>           bsize=4096   blocks=2560, version=2</span><br><span class=\"line\">        =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class=\"line\">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-ext4\">4.2 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.ext4 /dev/xvdf</span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">655360 inodes, 2620416 blocks</span><br><span class=\"line\">131020 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=2151677952</span><br><span class=\"line\">80 block <span class=\"built_in\">groups</span></span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">8192 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks:</span><br><span class=\"line\">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成</span><br><span class=\"line\">正在写入inode表: 完成</span><br><span class=\"line\">Creating journal (32768 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-3-分区后格式化，后续操作没有进行分区，一块盘最大可以申请16384GiB，对于一般的业务来说足够了\">4.3 分区后格式化，后续操作没有进行分区，一块盘最大可以申请16384GiB，对于一般的业务来说足够了</h4>\n<h5 id=\"4-3-1-MBR分区（一个分区必须小于2-2T-且最多3个主分区）\">4.3.1 MBR分区（一个分区必须小于2.2T,且最多3个主分区）</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ fdisk /dev/nvme2n1</span><br><span class=\"line\"></span><br><span class=\"line\">欢迎使用 fdisk (util-linux 2.30.2)。</span><br><span class=\"line\">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class=\"line\">使用写入命令前请三思。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n <span class=\"comment\">#创建新分区</span></span><br><span class=\"line\">分区类型</span><br><span class=\"line\">   p   主分区 (0个主分区，0个扩展分区，4空闲)</span><br><span class=\"line\">   e   扩展分区 (逻辑分区容器)</span><br><span class=\"line\">选择 (默认 p)：p  <span class=\"comment\">#创建主分区</span></span><br><span class=\"line\">分区号 (1-4, 默认  1): <span class=\"comment\">#回车</span></span><br><span class=\"line\">第一个扇区 (2048-41943039, 默认 2048): <span class=\"comment\">#回车</span></span><br><span class=\"line\">上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (2048-41943039, 默认 41943039): +5120M <span class=\"comment\">#设置第一个分区大小为5G</span></span><br><span class=\"line\"></span><br><span class=\"line\">创建了一个新分区 1，类型为“Linux”，大小为 5 GiB。</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：n <span class=\"comment\">#创建新分区，设置第二个分区</span></span><br><span class=\"line\">分区类型</span><br><span class=\"line\">   p   主分区 (1个主分区，0个扩展分区，3空闲)</span><br><span class=\"line\">   e   扩展分区 (逻辑分区容器)</span><br><span class=\"line\">选择 (默认 p)：p  <span class=\"comment\">#创建主分区</span></span><br><span class=\"line\">分区号 (2-4, 默认  2): <span class=\"comment\">#回车</span></span><br><span class=\"line\">第一个扇区 (10487808-41943039, 默认 10487808): <span class=\"comment\">#回车</span></span><br><span class=\"line\">上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (10487808-41943039, 默认 41943039): <span class=\"comment\">#回车 将剩余空间全部分配给第二个分区</span></span><br><span class=\"line\"></span><br><span class=\"line\">创建了一个新分区 2，类型为“Linux”，大小为 15 GiB。</span><br><span class=\"line\"></span><br><span class=\"line\">命令(输入 m 获取帮助)：w <span class=\"comment\">#保存退出</span></span><br><span class=\"line\">分区表已调整。</span><br><span class=\"line\">将调用 ioctl() 来重新读分区表。</span><br><span class=\"line\">正在同步磁盘。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">补充：</span><br><span class=\"line\">q :不保存退出</span><br><span class=\"line\">d :删除分区，删除分区前要先 umount 掉挂载路径：umount /data</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-3-2-GPT分区-分区大小没有限制，主分区个数也没有限制\">4.3.2 GPT分区(分区大小没有限制，主分区个数也没有限制)</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对/dev/nvme3n1进行分区，如果parted命令不存在可以用 yum 安装</span></span><br><span class=\"line\">$ parted /dev/nvme3n1</span><br><span class=\"line\">GNU Parted 3.1</span><br><span class=\"line\">使用 /dev/nvme3n1</span><br><span class=\"line\">Welcome to GNU Parted! Type <span class=\"string\">&#x27;help&#x27;</span> to view a list of commands.</span><br><span class=\"line\">(parted) mklabel gpt            <span class=\"comment\">#将sdb磁盘改成大分区格式   ，改回MBR模式： mklabel msdos</span></span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                <span class=\"comment\">#打印信息，看到分区类型已经修改为gpt：Partition Table: gpt</span></span><br><span class=\"line\">Model: NVMe Device (nvme)</span><br><span class=\"line\">Disk /dev/nvme3n1: 21.5GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B <span class=\"comment\">#这里显示的是扇区大小</span></span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Disk Flags:</span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start  End  Size  File system  Name  标志</span><br><span class=\"line\"></span><br><span class=\"line\">(parted) mkpart primary 0 10gb             <span class=\"comment\">#设置第一块分区分配10G空间  start end    ，从0开始</span></span><br><span class=\"line\">警告: The resulting partition is not properly aligned <span class=\"keyword\">for</span> best performance.</span><br><span class=\"line\">忽略/Ignore/放弃/Cancel? c           <span class=\"comment\">#这里看到警告，输入  &#x27;放弃&#x27;或者&#x27;c&#x27;  ，经过反复尝试，发现设置分区的开始大小为 2048个扇区大小时不会抛出警告，一个扇区为512B</span></span><br><span class=\"line\">(parted) mkpart primary 1048576b 10gb             <span class=\"comment\">#设置第一块分区分配10G空间  start end ，从1048576b开始：2048 * 512b</span></span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                      <span class=\"comment\">#打印信息，看到第一个分区已经创建好了</span></span><br><span class=\"line\">Model: NVMe Device (nvme)</span><br><span class=\"line\">Disk /dev/nvme3n1: 21.5GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Disk Flags:</span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start   End     Size     File system  Name     标志</span><br><span class=\"line\"> 1      1049kB  10.0GB  10000MB               primary</span><br><span class=\"line\"></span><br><span class=\"line\">(parted) mkpart primary 10gb 21.5gb        <span class=\"comment\">#设置第二块分区分配剩余空间  start end    ，从10gb开始 ，print中显示 Disk /dev/nvme3n1: 21.5GB ，所以end设置为 21.5gb</span></span><br><span class=\"line\">(parted) <span class=\"built_in\">print</span>                           <span class=\"comment\">#打印信息，看到第二个分区已经创建好了</span></span><br><span class=\"line\">Model: NVMe Device (nvme)</span><br><span class=\"line\">Disk /dev/nvme3n1: 21.5GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Disk Flags:</span><br><span class=\"line\"></span><br><span class=\"line\">Number  Start   End     Size     File system  Name     标志</span><br><span class=\"line\"> 1      1049kB  10.0GB  10000MB               primary</span><br><span class=\"line\"> 2      10.0GB  21.5GB  11.5GB                primary</span><br><span class=\"line\"></span><br><span class=\"line\">(parted) quit                              <span class=\"comment\"># 退出即可</span></span><br><span class=\"line\">信息: You may need to update /etc/fstab.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">补充：</span><br><span class=\"line\">删除分区： 删除分区前要先 umount 掉挂载路径：umount /gtp_data</span><br><span class=\"line\">parted /dev/nvme3n1</span><br><span class=\"line\">(parted) <span class=\"built_in\">rm</span> 1  <span class=\"comment\">#要删除那个分区直接输入Number即可，通过print命令查看Number，这里表示删除第一块分区</span></span><br><span class=\"line\">(parted) quit</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-3-3-查看磁盘信息\">4.3.3 查看磁盘信息</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsblk</span><br><span class=\"line\">NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">nvme0n1       259:0    0    8G  0 disk</span><br><span class=\"line\">├─nvme0n1p1   259:1    0    8G  0 part /</span><br><span class=\"line\">└─nvme0n1p128 259:2    0    1M  0 part</span><br><span class=\"line\">nvme1n1       259:3    0   10G  0 disk /data</span><br><span class=\"line\">nvme2n1       259:4    0   20G  0 disk</span><br><span class=\"line\">├─nvme2n1p1   259:7    0    5G  0 part</span><br><span class=\"line\">└─nvme2n1p2   259:8    0   15G  0 part</span><br><span class=\"line\">nvme3n1       259:5    0   20G  0 disk</span><br><span class=\"line\">├─nvme3n1p1   259:10   0  9.3G  0 part</span><br><span class=\"line\">└─nvme3n1p2   259:11   0 10.7G  0 part</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过该命令，可以查看磁盘的分区类别。比如这里默认的系统盘的分区类型为GPT--磁盘标签类型：gpt。BMR：磁盘标签类型：dos</span></span><br><span class=\"line\">$ fdisk -l</span><br><span class=\"line\">Disk /dev/nvme0n1：8 GiB，8589934592 字节，16777216 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\">磁盘标识符：465F350B-EC19-47A2-9A1D-44ECF9FF38AC</span><br><span class=\"line\"></span><br><span class=\"line\">设备              起点     末尾     扇区 大小 类型</span><br><span class=\"line\">/dev/nvme0n1p1    4096 16777182 16773087   8G Linux 文件系统</span><br><span class=\"line\">/dev/nvme0n1p128  2048     4095     2048   1M BIOS 启动</span><br><span class=\"line\"></span><br><span class=\"line\">分区表记录没有按磁盘顺序。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme1n1：15 GiB，16106127360 字节，31457280 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme2n1：25 GiB，26843545600 字节，52428800 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0x8b37421e</span><br><span class=\"line\"></span><br><span class=\"line\">设备           启动     起点     末尾     扇区 大小 Id 类型</span><br><span class=\"line\">/dev/nvme2n1p1          2048 10487807 10485760   5G 83 Linux</span><br><span class=\"line\">/dev/nvme2n1p2      10487808 52428766 41940959  20G 83 Linux</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme3n1：25 GiB，26843545600 字节，52428800 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class=\"line\">磁盘标签类型：gpt</span><br><span class=\"line\">磁盘标识符：6F603681-4682-445A-8F10-0095F7536D6B</span><br><span class=\"line\"></span><br><span class=\"line\">设备               起点     末尾     扇区  大小 类型</span><br><span class=\"line\">/dev/nvme3n1p1     2048 19531775 19529728  9.3G Microsoft 基本数据</span><br><span class=\"line\">/dev/nvme3n1p2 19531776 52426751 32894976 15.7G Microsoft 基本数据</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-3-4-分区后格式化，注意格式化时要指定分区名称，这里自已mbr分区为例，gpt与其类似\">4.3.4 分区后格式化，注意格式化时要指定分区名称，这里自已mbr分区为例，gpt与其类似</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 格式化第一个分区</span></span><br><span class=\"line\">$ mkfs.ext4 /dev/nvme2n1p1</span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">327680 inodes, 1310720 blocks</span><br><span class=\"line\">65536 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=1342177280</span><br><span class=\"line\">40 block <span class=\"built_in\">groups</span></span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">8192 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks:</span><br><span class=\"line\">    32768, 98304, 163840, 229376, 294912, 819200, 884736</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成</span><br><span class=\"line\">正在写入inode表: 完成</span><br><span class=\"line\">Creating journal (32768 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化第二个分区</span></span><br><span class=\"line\">$ mkfs.ext4 /dev/nvme2n1p2</span><br><span class=\"line\">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class=\"line\">文件系统标签=</span><br><span class=\"line\">OS <span class=\"built_in\">type</span>: Linux</span><br><span class=\"line\">块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">分块大小=4096 (<span class=\"built_in\">log</span>=2)</span><br><span class=\"line\">Stride=0 blocks, Stripe width=0 blocks</span><br><span class=\"line\">983040 inodes, 3931904 blocks</span><br><span class=\"line\">196595 blocks (5.00%) reserved <span class=\"keyword\">for</span> the super user</span><br><span class=\"line\">第一个数据块=0</span><br><span class=\"line\">Maximum filesystem blocks=2151677952</span><br><span class=\"line\">120 block <span class=\"built_in\">groups</span></span><br><span class=\"line\">32768 blocks per group, 32768 fragments per group</span><br><span class=\"line\">8192 inodes per group</span><br><span class=\"line\">Superblock backups stored on blocks:</span><br><span class=\"line\">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: 完成</span><br><span class=\"line\">正在写入inode表: 完成</span><br><span class=\"line\">Creating journal (32768 blocks): 完成</span><br><span class=\"line\">Writing superblocks and filesystem accounting information: 完成</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-创建新路径并将新卷挂载上\">5.创建新路径并将新卷挂载上</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> /data</span><br><span class=\"line\">$ mount /dev/xvdf /data</span><br><span class=\"line\">$ <span class=\"built_in\">df</span> -hT</span><br><span class=\"line\">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs       devtmpfs  2.0G     0  2.0G    0% /dev</span><br><span class=\"line\">tmpfs          tmpfs     2.0G     0  2.0G    0% /dev/shm</span><br><span class=\"line\">tmpfs          tmpfs     2.0G  532K  2.0G    1% /run</span><br><span class=\"line\">tmpfs          tmpfs     2.0G     0  2.0G    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/xvda1     xfs       100G   13G   88G   13% /</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1002</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1001</span><br><span class=\"line\">tmpfs          tmpfs     393M     0  393M    0% /run/user/1000</span><br><span class=\"line\">/dev/xvdf      xfs        10G   43M   10G    1% /data</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-永久挂载卷\">6.永久挂载卷</h3>\n<h4 id=\"6-1-xfs\">6.1 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$echo</span> <span class=\"string\">&#x27;/dev/xvdf  /data xfs    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-2-ext4\">6.2 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/dev/xvdf  /data ext4    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改ebs的大小后扩展磁盘\">修改ebs的大小后扩展磁盘</h2>\n<h3 id=\"1-登录aws控制台–-卷–-找到指定的卷–-修改–修改卷大小-修改为20G-（只能调大），注意调整容量后要查看其状态变为正在使用，此时才能进行下面的操作\">1.登录aws控制台–&gt;卷–&gt;找到指定的卷–&gt;修改–修改卷大小(修改为20G)（只能调大），注意调整容量后要查看其状态变为正在使用，此时才能进行下面的操作</h3>\n<h3 id=\"2-ssh登录ec2\">2.ssh登录ec2</h3>\n<h3 id=\"3-扩展分区大小-不区分mbr与gpt\">3.扩展分区大小: 不区分mbr与gpt</h3>\n<h4 id=\"3-1-不分区时-什么都不用做\">3.1 不分区时: 什么都不用做</h4>\n<h4 id=\"3-2分区时-只能调整最后一个分区的大小\">3.2分区时: 只能调整最后一个分区的大小</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /dev/nvme2n1：磁盘名称 2：第几个分区，实测分两个区的时只能扩展第二个分区，扩展第一个分区会提示：NOCHANGE: partition 1 is size 10485760. it cannot be grown</span></span><br><span class=\"line\">$ growpart /dev/nvme2n1 2</span><br><span class=\"line\">CHANGED: partition=2 start=10487808 old: size=31455232 end=41943040 new: size=41940959 end=52428767</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>growpart</strong></em><br>\ngrowpart 命令是用于调整硬盘分区大小的工具，它基于 cloud-utils 包提供了一种扩展分区的方法。然而，growpart 命令确实有一个限制，它只能调整并扩展磁盘上最后一个分区的大小，而不能直接用于非最后一个分区的大小调整。<br>\n这个限制源于底层的分区表结构和文件系统布局。分区表通常是基于硬盘的特定格式（比如 MBR 或 GPT），这些格式决定了分区的组织方式。在这种结构下，非最后一个分区的大小调整可能会影响到其他分区的布局，这可能会导致数据丢失或破坏。<br>\n因此，growpart 仅专注于扩展最后一个分区是出于安全和数据完整性的考虑。如果你需要调整非最后一个分区的大小，可能需要采取其他方法，比如使用其他工具或者进行手动操作。但务必在这样做之前备份重要数据，因为调整分区大小可能会对数据安全带来风险。</p>\n<p><em><strong>PS:</strong></em><br>\n执行 growpart 可能会抛出如下错误提示：/bin/growpart:行242: 个扇区: 语法错误: 期待操作数 （错误符号是 “个扇区”）<br>\n解决方法：命令行输入 LANG=en_US.UTF-8 回车后再次运行 growpart 即可</p>\n</div>\n<h3 id=\"4-扩容后重置磁盘\">4.扩容后重置磁盘</h3>\n<h4 id=\"4-1-xfs-2\">4.1 xfs</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /data 就是 mount 对应的磁盘</span></span><br><span class=\"line\">$ xfs_growfs -d /data</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-ext4-2\">4.2 ext4</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不分区时是磁盘名称</span></span><br><span class=\"line\">$ resize2fs /dev/xvdf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#分区时是分区名称，可能会提示先执行 e2fsck -f /dev/nvme2n1p2 执行文件系统检查</span></span><br><span class=\"line\">$ resize2fs /dev/nvme2n1p2</span><br></pre></td></tr></table></figure>","content_text":"摘要 磁盘的挂载、分区、格式化、扩容等命令 本文基于AWS EC2 EBS CentOS8(x86_64) 添加新卷并绑定到新的路径下 1.aws控制台–&gt;卷–&gt;创建一个新卷（10G），注意选择可用区，然后点击操作–&gt;挂载卷–&gt;选择对应的ec2实例 2.ssh 登录 ec2，以下操作全责root下进行，初始磁盘情况如下 12345678910$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 2.0G 0 2.0G 0% /devtmpfs tmpfs 2.0G 0 2.0G 0% /dev/shmtmpfs tmpfs 2.0G 532K 2.0G 1% /runtmpfs tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup/dev/xvda1 xfs 100G 13G 88G 13% /tmpfs tmpfs 393M 0 393M 0% /run/user/1002tmpfs tmpfs 393M 0 393M 0% /run/user/1001tmpfs tmpfs 393M 0 393M 0% /run/user/1000 3.查看新挂载卷的名称，这里看到新挂载的卷名称为 xvdf 12345$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTxvda 202:0 0 100G 0 disk└─xvda1 202:1 0 100G 0 part /xvdf 202:80 0 10G 0 disk 4.格式化新卷 可以查看磁盘的格式化类型 123456789101112#方法1，更简单$ lsblk -fNAME FSTYPE LABEL UUID MOUNTPOINTnvme0n1├─nvme0n1p1 xfs / a79c006f-96af-49dc-a71a-2779441678a3 /└─nvme0n1p128#方法2，后面根磁盘名称或者分区名称$ blkid /dev/nvme0n1p1/dev/nvme0n1p1: LABEL=&quot;/&quot; UUID=&quot;a79c006f-96af-49dc-a71a-2779441678a3&quot; TYPE=&quot;xfs&quot; PARTLABEL=&quot;Linux&quot; PARTUUID=&quot;80232d14-a44a-48c8-844b-e54d7e6178eb&quot;blkid /dev/nvme0n1/dev/nvme0n1: PTUUID=&quot;0bcd4d37-a271-4b2c-a475-a2bdb05f5f0d&quot; PTTYPE=&quot;gpt&quot; 4.1 xfs 12345678910$ mkfs.xfs /dev/xvdfmeta-data=/dev/xvdf isize=512 agcount=4, agsize=655360 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=1, sparse=0data = bsize=4096 blocks=2621440, imaxpct=25 = sunit=0 swidth=0 blksnaming =version 2 bsize=4096 ascii-ci=0 ftype=1log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0 4.2 ext4 123456789101112131415161718192021$ mkfs.ext4 /dev/xvdfmke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks655360 inodes, 2620416 blocks131020 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=215167795280 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632Allocating group tables: 完成正在写入inode表: 完成Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成 4.3 分区后格式化，后续操作没有进行分区，一块盘最大可以申请16384GiB，对于一般的业务来说足够了 4.3.1 MBR分区（一个分区必须小于2.2T,且最多3个主分区） 123456789101112131415161718192021222324252627282930313233343536373839$ fdisk /dev/nvme2n1欢迎使用 fdisk (util-linux 2.30.2)。更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。命令(输入 m 获取帮助)：n #创建新分区分区类型 p 主分区 (0个主分区，0个扩展分区，4空闲) e 扩展分区 (逻辑分区容器)选择 (默认 p)：p #创建主分区分区号 (1-4, 默认 1): #回车第一个扇区 (2048-41943039, 默认 2048): #回车上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (2048-41943039, 默认 41943039): +5120M #设置第一个分区大小为5G创建了一个新分区 1，类型为“Linux”，大小为 5 GiB。命令(输入 m 获取帮助)：n #创建新分区，设置第二个分区分区类型 p 主分区 (1个主分区，0个扩展分区，3空闲) e 扩展分区 (逻辑分区容器)选择 (默认 p)：p #创建主分区分区号 (2-4, 默认 2): #回车第一个扇区 (10487808-41943039, 默认 10487808): #回车上个扇区，+sectors 或 +size&#123;K,M,G,T,P&#125; (10487808-41943039, 默认 41943039): #回车 将剩余空间全部分配给第二个分区创建了一个新分区 2，类型为“Linux”，大小为 15 GiB。命令(输入 m 获取帮助)：w #保存退出分区表已调整。将调用 ioctl() 来重新读分区表。正在同步磁盘。补充：q :不保存退出d :删除分区，删除分区前要先 umount 掉挂载路径：umount /data 4.3.2 GPT分区(分区大小没有限制，主分区个数也没有限制) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# 对/dev/nvme3n1进行分区，如果parted命令不存在可以用 yum 安装$ parted /dev/nvme3n1GNU Parted 3.1使用 /dev/nvme3n1Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.(parted) mklabel gpt #将sdb磁盘改成大分区格式 ，改回MBR模式： mklabel msdos(parted) print #打印信息，看到分区类型已经修改为gpt：Partition Table: gptModel: NVMe Device (nvme)Disk /dev/nvme3n1: 21.5GBSector size (logical/physical): 512B/512B #这里显示的是扇区大小Partition Table: gptDisk Flags:Number Start End Size File system Name 标志(parted) mkpart primary 0 10gb #设置第一块分区分配10G空间 start end ，从0开始警告: The resulting partition is not properly aligned for best performance.忽略/Ignore/放弃/Cancel? c #这里看到警告，输入 &#x27;放弃&#x27;或者&#x27;c&#x27; ，经过反复尝试，发现设置分区的开始大小为 2048个扇区大小时不会抛出警告，一个扇区为512B(parted) mkpart primary 1048576b 10gb #设置第一块分区分配10G空间 start end ，从1048576b开始：2048 * 512b(parted) print #打印信息，看到第一个分区已经创建好了Model: NVMe Device (nvme)Disk /dev/nvme3n1: 21.5GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags:Number Start End Size File system Name 标志 1 1049kB 10.0GB 10000MB primary(parted) mkpart primary 10gb 21.5gb #设置第二块分区分配剩余空间 start end ，从10gb开始 ，print中显示 Disk /dev/nvme3n1: 21.5GB ，所以end设置为 21.5gb(parted) print #打印信息，看到第二个分区已经创建好了Model: NVMe Device (nvme)Disk /dev/nvme3n1: 21.5GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags:Number Start End Size File system Name 标志 1 1049kB 10.0GB 10000MB primary 2 10.0GB 21.5GB 11.5GB primary(parted) quit # 退出即可信息: You may need to update /etc/fstab.补充：删除分区： 删除分区前要先 umount 掉挂载路径：umount /gtp_dataparted /dev/nvme3n1(parted) rm 1 #要删除那个分区直接输入Number即可，通过print命令查看Number，这里表示删除第一块分区(parted) quit 4.3.3 查看磁盘信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTnvme0n1 259:0 0 8G 0 disk├─nvme0n1p1 259:1 0 8G 0 part /└─nvme0n1p128 259:2 0 1M 0 partnvme1n1 259:3 0 10G 0 disk /datanvme2n1 259:4 0 20G 0 disk├─nvme2n1p1 259:7 0 5G 0 part└─nvme2n1p2 259:8 0 15G 0 partnvme3n1 259:5 0 20G 0 disk├─nvme3n1p1 259:10 0 9.3G 0 part└─nvme3n1p2 259:11 0 10.7G 0 part# 通过该命令，可以查看磁盘的分区类别。比如这里默认的系统盘的分区类型为GPT--磁盘标签类型：gpt。BMR：磁盘标签类型：dos$ fdisk -lDisk /dev/nvme0n1：8 GiB，8589934592 字节，16777216 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节磁盘标签类型：gpt磁盘标识符：465F350B-EC19-47A2-9A1D-44ECF9FF38AC设备 起点 末尾 扇区 大小 类型/dev/nvme0n1p1 4096 16777182 16773087 8G Linux 文件系统/dev/nvme0n1p128 2048 4095 2048 1M BIOS 启动分区表记录没有按磁盘顺序。Disk /dev/nvme1n1：15 GiB，16106127360 字节，31457280 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节Disk /dev/nvme2n1：25 GiB，26843545600 字节，52428800 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节磁盘标签类型：dos磁盘标识符：0x8b37421e设备 启动 起点 末尾 扇区 大小 Id 类型/dev/nvme2n1p1 2048 10487807 10485760 5G 83 Linux/dev/nvme2n1p2 10487808 52428766 41940959 20G 83 LinuxDisk /dev/nvme3n1：25 GiB，26843545600 字节，52428800 个扇区单元：扇区 / 1 * 512 = 512 字节扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：4096 字节 / 4096 字节磁盘标签类型：gpt磁盘标识符：6F603681-4682-445A-8F10-0095F7536D6B设备 起点 末尾 扇区 大小 类型/dev/nvme3n1p1 2048 19531775 19529728 9.3G Microsoft 基本数据/dev/nvme3n1p2 19531776 52426751 32894976 15.7G Microsoft 基本数据 4.3.4 分区后格式化，注意格式化时要指定分区名称，这里自已mbr分区为例，gpt与其类似 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 格式化第一个分区$ mkfs.ext4 /dev/nvme2n1p1mke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks327680 inodes, 1310720 blocks65536 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=134217728040 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736Allocating group tables: 完成正在写入inode表: 完成Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成# 格式化第二个分区$ mkfs.ext4 /dev/nvme2n1p2mke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks983040 inodes, 3931904 blocks196595 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=2151677952120 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208Allocating group tables: 完成正在写入inode表: 完成Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成 5.创建新路径并将新卷挂载上 12345678910111213$ mkdir /data$ mount /dev/xvdf /data$ df -hT文件系统 类型 容量 已用 可用 已用% 挂载点devtmpfs devtmpfs 2.0G 0 2.0G 0% /devtmpfs tmpfs 2.0G 0 2.0G 0% /dev/shmtmpfs tmpfs 2.0G 532K 2.0G 1% /runtmpfs tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup/dev/xvda1 xfs 100G 13G 88G 13% /tmpfs tmpfs 393M 0 393M 0% /run/user/1002tmpfs tmpfs 393M 0 393M 0% /run/user/1001tmpfs tmpfs 393M 0 393M 0% /run/user/1000/dev/xvdf xfs 10G 43M 10G 1% /data 6.永久挂载卷 6.1 xfs 12$echo &#x27;/dev/xvdf /data xfs defaults 0 0&#x27; &gt;&gt; /etc/fstab$ mount -a 6.2 ext4 12$ echo &#x27;/dev/xvdf /data ext4 defaults 0 0&#x27; &gt;&gt; /etc/fstab$ mount -a 修改ebs的大小后扩展磁盘 1.登录aws控制台–&gt;卷–&gt;找到指定的卷–&gt;修改–修改卷大小(修改为20G)（只能调大），注意调整容量后要查看其状态变为正在使用，此时才能进行下面的操作 2.ssh登录ec2 3.扩展分区大小: 不区分mbr与gpt 3.1 不分区时: 什么都不用做 3.2分区时: 只能调整最后一个分区的大小 123# /dev/nvme2n1：磁盘名称 2：第几个分区，实测分两个区的时只能扩展第二个分区，扩展第一个分区会提示：NOCHANGE: partition 1 is size 10485760. it cannot be grown$ growpart /dev/nvme2n1 2CHANGED: partition=2 start=10487808 old: size=31455232 end=41943040 new: size=41940959 end=52428767 growpart growpart 命令是用于调整硬盘分区大小的工具，它基于 cloud-utils 包提供了一种扩展分区的方法。然而，growpart 命令确实有一个限制，它只能调整并扩展磁盘上最后一个分区的大小，而不能直接用于非最后一个分区的大小调整。 这个限制源于底层的分区表结构和文件系统布局。分区表通常是基于硬盘的特定格式（比如 MBR 或 GPT），这些格式决定了分区的组织方式。在这种结构下，非最后一个分区的大小调整可能会影响到其他分区的布局，这可能会导致数据丢失或破坏。 因此，growpart 仅专注于扩展最后一个分区是出于安全和数据完整性的考虑。如果你需要调整非最后一个分区的大小，可能需要采取其他方法，比如使用其他工具或者进行手动操作。但务必在这样做之前备份重要数据，因为调整分区大小可能会对数据安全带来风险。 PS: 执行 growpart 可能会抛出如下错误提示：/bin/growpart:行242: 个扇区: 语法错误: 期待操作数 （错误符号是 “个扇区”） 解决方法：命令行输入 LANG=en_US.UTF-8 回车后再次运行 growpart 即可 4.扩容后重置磁盘 4.1 xfs 12# /data 就是 mount 对应的磁盘$ xfs_growfs -d /data 4.2 ext4 123456# 不分区时是磁盘名称$ resize2fs /dev/xvdf#分区时是分区名称，可能会提示先执行 e2fsck -f /dev/nvme2n1p2 执行文件系统检查$ resize2fs /dev/nvme2n1p2","summary":"摘要 磁盘的挂载、分区、格式化、扩容等命令 本文基于AWS EC2 EBS CentOS8(x86_64)","date_published":"2023-11-06T13:30:05.000Z","tags":["技术","linux","linux常用命令","linux常用命令"]},{"id":"https://blog.hanqunfeng.com/2023/09/05/spring-boot-r2dbc-mysql/","url":"https://blog.hanqunfeng.com/2023/09/05/spring-boot-r2dbc-mysql/","title":"聊一聊 SpringBoot R2DBC","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文聊聊SpringBoot R2dbc</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于SpringBoot-3.1.2</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/\">Github代码地址</a> <code>web-flux-mysql-redis-demo</code>,<code>webflux-mysql-multi-demo</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"打印SQL\">打印SQL</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>方式一: 开启 <code>debug</code> 日志</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以打印sql，但不能打印参数值</span></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">org.springframework.r2dbc:</span> <span class=\"string\">DEBUG</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>方式二: 使用 <code>r2dbc-proxy</code></p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.r2dbc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>r2dbc-proxy<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">r2dbc:</span></span><br><span class=\"line\">    <span class=\"comment\"># url: r2dbc:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class=\"line\">    <span class=\"comment\"># 开启代理，目的是打印sql，生产环境不建议，http://r2dbc.io/r2dbc-proxy/docs/current/docs/html/</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">r2dbc:proxy:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8&amp;proxyListener=com.example.r2dbc.LogExecutionListener</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.r2dbc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.proxy.core.QueryExecutionInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.proxy.listener.ProxyMethodExecutionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.proxy.support.QueryExecutionInfoFormatter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogExecutionListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ProxyMethodExecutionListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">QueryExecutionInfoFormatter</span> <span class=\"variable\">queryFormatter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QueryExecutionInfoFormatter</span>()</span><br><span class=\"line\">            .newLine()</span><br><span class=\"line\">            .showTime().showType().showSuccess().showTransaction().showBatchSize().showConnection().showThread()</span><br><span class=\"line\">            .newLine()</span><br><span class=\"line\">            .showQuery()</span><br><span class=\"line\">            .newLine()</span><br><span class=\"line\">            .showBindingsSize().showBindings()</span><br><span class=\"line\">            .newLine();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterExecuteOnStatement</span><span class=\"params\">(QueryExecutionInfo queryExecutionInfo)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">stringBuilder</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.queryFormatter.format(queryExecutionInfo);</span><br><span class=\"line\">        log.info(stringBuilder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"条件查询\">条件查询</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>springboot为我们提供了几个<code>Repository</code>，如<code>R2dbcRepository</code>、<code>ReactiveCrudRepository</code>、<code>ReactiveSortingRepository</code>等等，我们自己的<code>Repository</code>通过继承这些父接口，可以获得相应的CURD的能力，但是其没有对条件查询提供支持，此时可以通过自定义<code>Repository</code>接口及其实现类的方式实现扩展</p>\n</li>\n<li class=\"lvl-2\">\n<p>自定义<code>Repository</code>接口</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.r2dbc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.Row;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.RowMetadata;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Page;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Pageable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Sort;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.core.R2dbcEntityOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.repository.R2dbcRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.relational.core.query.Criteria;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.relational.core.query.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.repository.NoRepositoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.r2dbc.core.DatabaseClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reactor.core.publisher.Flux;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reactor.core.publisher.Mono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.BiFunction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoRepositoryBean</span> <span class=\"comment\">//接口不参与jpa的代理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BaseR2dbcRepository</span>&lt;T, ID <span class=\"keyword\">extends</span> <span class=\"title class_\">Serializable</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">R2dbcRepository</span>&lt;T, ID&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    R2dbcEntityOperations <span class=\"title function_\">getR2dbcEntityOperations</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Mono&lt;Page&lt;T&gt;&gt; <span class=\"title function_\">pageByQuery</span><span class=\"params\">(Criteria criteria, Pageable pageable)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Mono&lt;Long&gt; <span class=\"title function_\">countByQuery</span><span class=\"params\">(Criteria criteria)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria, Sort sort)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria, <span class=\"type\">int</span> limit)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria, Sort sort, <span class=\"type\">int</span> limit)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Query query)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Mono&lt;T&gt; <span class=\"title function_\">findOneByQuery</span><span class=\"params\">(Query query)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Mono&lt;T&gt; <span class=\"title function_\">findOneByQuery</span><span class=\"params\">(Criteria criteria)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;R&gt; Mono&lt;R&gt; <span class=\"title function_\">execSqlToMono</span><span class=\"params\">(String sql, Map&lt;String, Object&gt; bindMap, BiFunction&lt;Row, RowMetadata, R&gt; mappingFunction)</span> &#123;</span><br><span class=\"line\">        DatabaseClient.<span class=\"type\">GenericExecuteSpec</span> <span class=\"variable\">genericExecuteSpec</span> <span class=\"operator\">=</span> getR2dbcEntityOperations().getDatabaseClient().sql(sql);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bindMap != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;String, Object&gt; entry : bindMap.entrySet()) &#123;</span><br><span class=\"line\">                genericExecuteSpec = genericExecuteSpec.bind(entry.getKey(), entry.getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> genericExecuteSpec.map(mappingFunction).first();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;R&gt; Flux&lt;R&gt; <span class=\"title function_\">execSqlToFlux</span><span class=\"params\">(String sql, Map&lt;String, Object&gt; bindMap, BiFunction&lt;Row, RowMetadata, R&gt; mappingFunction)</span> &#123;</span><br><span class=\"line\">        DatabaseClient.<span class=\"type\">GenericExecuteSpec</span> <span class=\"variable\">genericExecuteSpec</span> <span class=\"operator\">=</span> getR2dbcEntityOperations().getDatabaseClient().sql(sql);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bindMap != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;String, Object&gt; entry : bindMap.entrySet()) &#123;</span><br><span class=\"line\">                genericExecuteSpec = genericExecuteSpec.bind(entry.getKey(), entry.getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> genericExecuteSpec.map(mappingFunction).all();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>自定义<code>Repository</code>接口的实现类</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.r2dbc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Page;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.PageImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Pageable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Sort;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.convert.R2dbcConverter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.core.R2dbcEntityOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.repository.support.SimpleR2dbcRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.relational.core.query.Criteria;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.relational.core.query.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.relational.repository.query.RelationalEntityInformation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reactor.core.publisher.Flux;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reactor.core.publisher.Mono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleBaseR2dbcRepository</span>&lt;T, ID <span class=\"keyword\">extends</span> <span class=\"title class_\">Serializable</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">SimpleR2dbcRepository</span>&lt;T, ID&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">BaseR2dbcRepository</span>&lt;T, ID&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> R2dbcEntityOperations r2dbcEntityOperations;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RelationalEntityInformation&lt;T, ID&gt; entity;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SimpleBaseR2dbcRepository</span><span class=\"params\">(RelationalEntityInformation&lt;T, ID&gt; entity, R2dbcEntityOperations entityOperations, R2dbcConverter converter)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(entity, entityOperations, converter);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.r2dbcEntityOperations = entityOperations;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.entity = entity;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;SimpleBaseR2dbcRepository&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R2dbcEntityOperations <span class=\"title function_\">getR2dbcEntityOperations</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;Page&lt;T&gt;&gt; <span class=\"title function_\">pageByQuery</span><span class=\"params\">(Criteria criteria, Pageable pageable)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.count(query, entity.getJavaType()).flatMap(total -&gt;</span><br><span class=\"line\">                r2dbcEntityOperations.select(query.with(pageable), entity.getJavaType())</span><br><span class=\"line\">                        .collectList()</span><br><span class=\"line\">                        .map(list -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">PageImpl</span>&lt;&gt;(list, pageable, total)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;Long&gt; <span class=\"title function_\">countByQuery</span><span class=\"params\">(Criteria criteria)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.count(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.select(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria, Sort sort)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria).sort(sort);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.select(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria, <span class=\"type\">int</span> limit)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria).limit(limit);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.select(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Criteria criteria, Sort sort, <span class=\"type\">int</span> limit)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria).sort(sort).limit(limit);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.select(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Flux&lt;T&gt; <span class=\"title function_\">findByQuery</span><span class=\"params\">(Query query)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.select(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;T&gt; <span class=\"title function_\">findOneByQuery</span><span class=\"params\">(Query query)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.selectOne(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;T&gt; <span class=\"title function_\">findOneByQuery</span><span class=\"params\">(Criteria criteria)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.query(criteria);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2dbcEntityOperations.selectOne(query, entity.getJavaType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>我们需要告知springboot使用我们自定义的<code>Repository</code></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.r2dbc.SimpleBaseR2dbcRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">// 这里必须指定 basePackages，否则 repositoryBaseClass 指定的实现类不能被关联到 各个 Repository 中</span></span><br><span class=\"line\"><span class=\"meta\">@EnableR2dbcRepositories(basePackages = &quot;com.example.mysql&quot;, repositoryBaseClass = SimpleBaseR2dbcRepository.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReactiveR2dbcConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时我们在创建业务<code>Repository</code>时就可以继承我们自定义的<code>Repository</code>了</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SysUserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseR2dbcRepository</span>&lt;SysUser, String&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>可以看到我们自定义的<code>Repository</code>中，主要是通过<code>Criteria</code>来提供查询条件的封装，我了便于创建<code>Criteria</code>对象，这里提供了一个工具类 <code>CustomCriteria</code>，其主要功能是根据条件来拼接查询条件，代码比较多，就不在这里粘贴了，自行去<a href=\"https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/web-flux-mysql-redis-demo\">Github代码地址</a>中查看吧。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;CustomCriteria&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Criteria 构造器</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by hanqf on 2023/9/4 11:47.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 示例：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.and 关系: select * from tbl_table where (username like &#x27;%admin%&#x27; or username like &#x27;lisi%&#x27;) and enable = 1</span></span><br><span class=\"line\"><span class=\"comment\"> * Criteria criteria = CustomCriteria.and()</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .eq(true, &quot;enable&quot;, 1)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .build();</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.or 关系: select * from tbl_table where (username like &#x27;%admin%&#x27; or username like &#x27;lisi%&#x27;) or enable = 1</span></span><br><span class=\"line\"><span class=\"comment\"> * Criteria criteria = CustomCriteria.or()</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .eq(true, &quot;enable&quot;, 1)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .build();</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.复合关系：</span></span><br><span class=\"line\"><span class=\"comment\"> * Criteria criteria1 = CustomCriteria.and()</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .eq(true, &quot;enable&quot;, 1)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .build();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * Criteria criteria2 = CustomCriteria.or()</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .eq(true, &quot;enable&quot;, 1)</span></span><br><span class=\"line\"><span class=\"comment\"> *                 .build();</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Criteria criteria = criteria1.and(criteria2);  // or： criteria1.or(criteria2);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.复杂查询建议直接使用 sql 进行查询，可以使用  BaseR2dbcRepository 中的 execSqlToMono 和 execSqlToFlux</span></span><br><span class=\"line\"><span class=\"comment\"> * 示例：</span></span><br><span class=\"line\"><span class=\"comment\"> *  public Mono&lt;TestOrder&gt; getOne(String orderId) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        String sql = &quot;select id, order_id from test_order where order_id = :orderId&quot;;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        return testOrderRepository.execSqlToMono(sql, Map.of(&quot;orderId&quot;, orderId), (row, rowMetadata) -&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            final TestOrder testOrder = new TestOrder();</span></span><br><span class=\"line\"><span class=\"comment\">            testOrder.setId(row.get(&quot;id&quot;, Long.class));</span></span><br><span class=\"line\"><span class=\"comment\">            testOrder.setOrderId(row.get(&quot;order_id&quot;, String.class));</span></span><br><span class=\"line\"><span class=\"comment\">            return testOrder;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 说明：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.eq(true, &quot;enable&quot;, 1)：第一个参数为真时当前条件加入查询，默认为真</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.支持条件方法详见代码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"新增\">新增</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>R2dbc提供的<code>&lt;S extends T&gt; Mono&lt;S&gt; save(S entity);</code>方法，要求<code>table</code>必须含有主键，其根据实体类中主键是否被填充来判断是新增还是修改操作，如果我们是自定义主键，而非数据库自动填充主键，此时就不能使用<code>save</code>方法新增记录，解决方法是在业务<code>Repository</code>中创建一个新增方法，比如：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实体类在进行新增时会判断主键是否填充，如果没有填充就认为是新数据，采取真正的新增操作，主键需要数据库来自动填充；</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果主键存在值则认为是旧数据则调用更新操作。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于自定义主键的情况，可以使用如下方式进行新增对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象形式传参：:#&#123;#对象名.字段名&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * 字段传参：:字段名(<span class=\"doctag\">@param</span>定义)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Modifying</span></span><br><span class=\"line\"><span class=\"meta\">@Query(&quot;insert into sys_user (id,username,password,enable) values (:#&#123;#sysUser.id&#125;,:#&#123;#sysUser.username&#125;,:#&#123;#sysUser.password&#125;,:#&#123;#sysUser.enable&#125;)&quot;)</span></span><br><span class=\"line\">Mono&lt;Integer&gt; <span class=\"title function_\">addSysUser</span><span class=\"params\">(SysUser sysUser)</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"事务\">事务</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>注解式事务</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/tx&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Mono&lt;Integer&gt; <span class=\"title function_\">tx</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">SysUser</span> <span class=\"variable\">sysUser</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SysUser</span>();</span><br><span class=\"line\">    sysUser.setId(UUID.randomUUID().toString());</span><br><span class=\"line\">    sysUser.setUsername(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    sysUser.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    sysUser.setEnable(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 主键重复</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sysUserRepository.addSysUser(sysUser).then(sysUserRepository.addSysUser(sysUser));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>编程式事务</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> TransactionalOperator transactionalOperator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/tx2&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Mono&lt;Integer&gt; <span class=\"title function_\">tx2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">SysUser</span> <span class=\"variable\">sysUser</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SysUser</span>();</span><br><span class=\"line\">    sysUser.setId(UUID.randomUUID().toString());</span><br><span class=\"line\">    sysUser.setUsername(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    sysUser.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    sysUser.setEnable(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 主键重复</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sysUserRepository.addSysUser(sysUser).then(sysUserRepository.addSysUser(sysUser))</span><br><span class=\"line\">            .as(transactionalOperator::transactional);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多数据源\">多数据源</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>application.yaml</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"comment\">#r2dbc mysql</span></span><br><span class=\"line\">  <span class=\"attr\">r2dbc:</span></span><br><span class=\"line\">    <span class=\"attr\">one:</span></span><br><span class=\"line\">      <span class=\"comment\">#url: r2dbc:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class=\"line\">      <span class=\"comment\"># 开启代理，目的是打印sql，生产环境不建议，http://r2dbc.io/r2dbc-proxy/docs/current/docs/html/</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">r2dbc:proxy:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8&amp;proxyListener=com.example.r2dbc.LogExecutionListener</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">testUser</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">initial-size:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"number\">20</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle-time:</span> <span class=\"string\">30m</span></span><br><span class=\"line\">    <span class=\"attr\">two:</span></span><br><span class=\"line\">      <span class=\"comment\">#url: r2dbc:mysql://mysql.test.db:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">r2dbc:proxy:mysql://mysql.test.db:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;proxyListener=com.example.r2dbc.LogExecutionListener</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">testUser</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">initial-size:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"number\">20</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle-time:</span> <span class=\"string\">30m</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>one:配置类</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.r2dbc.SimpleBaseR2dbcRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.ConnectionFactories;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.ConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.ConnectionFactoryOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.Option;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Primary;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.core.R2dbcEntityTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.r2dbc.connection.R2dbcTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.ReactiveTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.reactive.TransactionalOperator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.support.DefaultTransactionDefinition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">// 这里必须指定 basePackages，否则 repositoryBaseClass 指定的实现类不能被关联到 各个 Repository 中</span></span><br><span class=\"line\"><span class=\"meta\">@EnableR2dbcRepositories(basePackages = &quot;com.example.mysql.one.repository&quot;, repositoryBaseClass = SimpleBaseR2dbcRepository.class, entityOperationsRef = &quot;oneR2dbcEntityTemplate&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OneReactiveR2dbcConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;oneR2dbcProperties&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.r2dbc.one&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R2dbcProperties <span class=\"title function_\">oneR2dbcProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">R2dbcProperties</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;oneR2dbcEntityTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R2dbcEntityTemplate <span class=\"title function_\">oneR2dbcEntityTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;oneR2dbcEntityTemplate&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">R2dbcEntityTemplate</span>(oneConnectionFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;oneConnectionFactory&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConnectionFactory <span class=\"title function_\">oneConnectionFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;oneConnectionFactory&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">R2dbcProperties</span> <span class=\"variable\">r2dbcProperties</span> <span class=\"operator\">=</span> oneR2dbcProperties();</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactoryOptions</span> <span class=\"variable\">urlOptions</span> <span class=\"operator\">=</span> ConnectionFactoryOptions.parse(r2dbcProperties.getUrl());</span><br><span class=\"line\">        ConnectionFactoryOptions.<span class=\"type\">Builder</span> <span class=\"variable\">optionsBuilder</span> <span class=\"operator\">=</span> urlOptions.mutate();</span><br><span class=\"line\"></span><br><span class=\"line\">        configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.USER, r2dbcProperties::getUsername,</span><br><span class=\"line\">                StringUtils::hasText);</span><br><span class=\"line\">        configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.PASSWORD, r2dbcProperties::getPassword,</span><br><span class=\"line\">                StringUtils::hasText);</span><br><span class=\"line\">        configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.DATABASE,</span><br><span class=\"line\">                () -&gt; determineDatabaseName(r2dbcProperties), StringUtils::hasText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r2dbcProperties.getProperties() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            r2dbcProperties.getProperties()</span><br><span class=\"line\">                    .forEach((key, value) -&gt; optionsBuilder.option(Option.valueOf(key), value));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">ConnectionFactoryOptions</span> <span class=\"variable\">options</span> <span class=\"operator\">=</span> optionsBuilder.build();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConnectionFactories.get(options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;oneR2dbcTransactionManager&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ReactiveTransactionManager <span class=\"title function_\">oneR2dbcTransactionManager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">R2dbcTransactionManager</span>(oneConnectionFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;oneTransactionalOperator&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TransactionalOperator <span class=\"title function_\">oneTransactionalOperator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DefaultTransactionDefinition</span> <span class=\"variable\">transactionDefinition</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultTransactionDefinition</span>();</span><br><span class=\"line\">        transactionDefinition.setName(<span class=\"string\">&quot;oneTransactionalOperator&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 这是默认行为</span></span><br><span class=\"line\">        transactionDefinition.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TransactionalOperator.create(oneR2dbcTransactionManager(), transactionDefinition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">CharSequence</span>&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">configureIf</span><span class=\"params\">(ConnectionFactoryOptions.Builder optionsBuilder,</span></span><br><span class=\"line\"><span class=\"params\">                                                      ConnectionFactoryOptions originalOptions, Option&lt;T&gt; option, Supplier&lt;T&gt; valueSupplier,</span></span><br><span class=\"line\"><span class=\"params\">                                                      Predicate&lt;T&gt; setIf)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (originalOptions.hasOption(option)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> valueSupplier.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (setIf.test(value)) &#123;</span><br><span class=\"line\">            optionsBuilder.option(option, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">determineDatabaseName</span><span class=\"params\">(R2dbcProperties properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (properties.isGenerateUniqueName()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> properties.determineUniqueName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(properties.getName())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> properties.getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>two:配置类</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.r2dbc.SimpleBaseR2dbcRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.ConnectionFactories;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.ConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.ConnectionFactoryOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.r2dbc.spi.Option;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.core.R2dbcEntityTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.r2dbc.connection.R2dbcTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.ReactiveTransactionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.reactive.TransactionalOperator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.support.DefaultTransactionDefinition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">// 这里必须指定 basePackages，否则 repositoryBaseClass 指定的实现类不能被关联到 各个 Repository 中</span></span><br><span class=\"line\"><span class=\"meta\">@EnableR2dbcRepositories(basePackages = &quot;com.example.mysql.two.repository&quot;, repositoryBaseClass = SimpleBaseR2dbcRepository.class, entityOperationsRef = &quot;twoR2dbcEntityTemplate&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TwoReactiveR2dbcConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;twoR2dbcProperties&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.r2dbc.two&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R2dbcProperties <span class=\"title function_\">twoR2dbcProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">R2dbcProperties</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;twoR2dbcEntityTemplate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R2dbcEntityTemplate <span class=\"title function_\">twoR2dbcEntityTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;twoR2dbcEntityTemplate&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">R2dbcEntityTemplate</span>(twoConnectionFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;twoConnectionFactory&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConnectionFactory <span class=\"title function_\">twoConnectionFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;twoConnectionFactory&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">R2dbcProperties</span> <span class=\"variable\">r2dbcProperties</span> <span class=\"operator\">=</span> twoR2dbcProperties();</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactoryOptions</span> <span class=\"variable\">urlOptions</span> <span class=\"operator\">=</span> ConnectionFactoryOptions.parse(r2dbcProperties.getUrl());</span><br><span class=\"line\">        ConnectionFactoryOptions.<span class=\"type\">Builder</span> <span class=\"variable\">optionsBuilder</span> <span class=\"operator\">=</span> urlOptions.mutate();</span><br><span class=\"line\"></span><br><span class=\"line\">        configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.USER, r2dbcProperties::getUsername,</span><br><span class=\"line\">                StringUtils::hasText);</span><br><span class=\"line\">        configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.PASSWORD, r2dbcProperties::getPassword,</span><br><span class=\"line\">                StringUtils::hasText);</span><br><span class=\"line\">        configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.DATABASE,</span><br><span class=\"line\">                () -&gt; determineDatabaseName(r2dbcProperties), StringUtils::hasText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r2dbcProperties.getProperties() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            r2dbcProperties.getProperties()</span><br><span class=\"line\">                    .forEach((key, value) -&gt; optionsBuilder.option(Option.valueOf(key), value));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">ConnectionFactoryOptions</span> <span class=\"variable\">options</span> <span class=\"operator\">=</span> optionsBuilder.build();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConnectionFactories.get(options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;twoR2dbcTransactionManager&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ReactiveTransactionManager <span class=\"title function_\">twoR2dbcTransactionManager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">R2dbcTransactionManager</span>(twoConnectionFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;twoTransactionalOperator&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TransactionalOperator <span class=\"title function_\">twoTransactionalOperator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DefaultTransactionDefinition</span> <span class=\"variable\">transactionDefinition</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultTransactionDefinition</span>();</span><br><span class=\"line\">        transactionDefinition.setName(<span class=\"string\">&quot;twoTransactionalOperator&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 这是默认行为</span></span><br><span class=\"line\">        transactionDefinition.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TransactionalOperator.create(twoR2dbcTransactionManager(), transactionDefinition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">CharSequence</span>&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">configureIf</span><span class=\"params\">(ConnectionFactoryOptions.Builder optionsBuilder,</span></span><br><span class=\"line\"><span class=\"params\">                                                      ConnectionFactoryOptions originalOptions, Option&lt;T&gt; option, Supplier&lt;T&gt; valueSupplier,</span></span><br><span class=\"line\"><span class=\"params\">                                                      Predicate&lt;T&gt; setIf)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (originalOptions.hasOption(option)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> valueSupplier.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (setIf.test(value)) &#123;</span><br><span class=\"line\">            optionsBuilder.option(option, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">determineDatabaseName</span><span class=\"params\">(R2dbcProperties properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (properties.isGenerateUniqueName()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> properties.determineUniqueName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(properties.getName())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> properties.getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>主要注意如下几点：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">基于配置文件中数据源的信息创建各自的 <code>R2dbcEntityTemplate</code>，<code>R2dbcTransactionManager</code></li>\n<li class=\"lvl-6\"><code>basePackages</code> 指定不同的扫描路径</li>\n<li class=\"lvl-6\"><code>entityOperationsRef</code> 指定各自的 <code>R2dbcEntityTemplate</code></li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>完整代码参考 <a href=\"https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/webflux-mysql-multi-demo\">Github代码地址</a></p>\n</li>\n</ul>\n","content_text":"摘要 本文聊聊SpringBoot R2dbc 本文基于SpringBoot-3.1.2 Github代码地址 web-flux-mysql-redis-demo,webflux-mysql-multi-demo 打印SQL 方式一: 开启 debug 日志 1234# 可以打印sql，但不能打印参数值logging: level: org.springframework.r2dbc: DEBUG 方式二: 使用 r2dbc-proxy 1234&lt;dependency&gt; &lt;groupId&gt;io.r2dbc&lt;/groupId&gt; &lt;artifactId&gt;r2dbc-proxy&lt;/artifactId&gt;&lt;/dependency&gt; 12345spring: r2dbc: # url: r2dbc:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8 # 开启代理，目的是打印sql，生产环境不建议，http://r2dbc.io/r2dbc-proxy/docs/current/docs/html/ url: r2dbc:proxy:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8&amp;proxyListener=com.example.r2dbc.LogExecutionListener 123456789101112131415161718192021222324package com.example.r2dbc;import io.r2dbc.proxy.core.QueryExecutionInfo;import io.r2dbc.proxy.listener.ProxyMethodExecutionListener;import io.r2dbc.proxy.support.QueryExecutionInfoFormatter;import lombok.extern.slf4j.Slf4j;@Slf4jpublic class LogExecutionListener implements ProxyMethodExecutionListener &#123; private final QueryExecutionInfoFormatter queryFormatter = new QueryExecutionInfoFormatter() .newLine() .showTime().showType().showSuccess().showTransaction().showBatchSize().showConnection().showThread() .newLine() .showQuery() .newLine() .showBindingsSize().showBindings() .newLine(); @Override public void afterExecuteOnStatement(QueryExecutionInfo queryExecutionInfo) &#123; String stringBuilder = this.queryFormatter.format(queryExecutionInfo); log.info(stringBuilder); &#125;&#125; 条件查询 springboot为我们提供了几个Repository，如R2dbcRepository、ReactiveCrudRepository、ReactiveSortingRepository等等，我们自己的Repository通过继承这些父接口，可以获得相应的CURD的能力，但是其没有对条件查询提供支持，此时可以通过自定义Repository接口及其实现类的方式实现扩展 自定义Repository接口 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package com.example.r2dbc;import io.r2dbc.spi.Row;import io.r2dbc.spi.RowMetadata;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.data.r2dbc.core.R2dbcEntityOperations;import org.springframework.data.r2dbc.repository.R2dbcRepository;import org.springframework.data.relational.core.query.Criteria;import org.springframework.data.relational.core.query.Query;import org.springframework.data.repository.NoRepositoryBean;import org.springframework.r2dbc.core.DatabaseClient;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;import java.io.Serializable;import java.util.Map;import java.util.function.BiFunction;@NoRepositoryBean //接口不参与jpa的代理public interface BaseR2dbcRepository&lt;T, ID extends Serializable&gt; extends R2dbcRepository&lt;T, ID&gt; &#123; R2dbcEntityOperations getR2dbcEntityOperations(); /** * 分页查询 */ Mono&lt;Page&lt;T&gt;&gt; pageByQuery(Criteria criteria, Pageable pageable); Mono&lt;Long&gt; countByQuery(Criteria criteria); Flux&lt;T&gt; findByQuery(Criteria criteria); Flux&lt;T&gt; findByQuery(Criteria criteria, Sort sort); Flux&lt;T&gt; findByQuery(Criteria criteria, int limit); Flux&lt;T&gt; findByQuery(Criteria criteria, Sort sort, int limit); Flux&lt;T&gt; findByQuery(Query query); Mono&lt;T&gt; findOneByQuery(Query query); Mono&lt;T&gt; findOneByQuery(Criteria criteria); default &lt;R&gt; Mono&lt;R&gt; execSqlToMono(String sql, Map&lt;String, Object&gt; bindMap, BiFunction&lt;Row, RowMetadata, R&gt; mappingFunction) &#123; DatabaseClient.GenericExecuteSpec genericExecuteSpec = getR2dbcEntityOperations().getDatabaseClient().sql(sql); if (bindMap != null) &#123; for (Map.Entry&lt;String, Object&gt; entry : bindMap.entrySet()) &#123; genericExecuteSpec = genericExecuteSpec.bind(entry.getKey(), entry.getValue()); &#125; &#125; return genericExecuteSpec.map(mappingFunction).first(); &#125; default &lt;R&gt; Flux&lt;R&gt; execSqlToFlux(String sql, Map&lt;String, Object&gt; bindMap, BiFunction&lt;Row, RowMetadata, R&gt; mappingFunction) &#123; DatabaseClient.GenericExecuteSpec genericExecuteSpec = getR2dbcEntityOperations().getDatabaseClient().sql(sql); if (bindMap != null) &#123; for (Map.Entry&lt;String, Object&gt; entry : bindMap.entrySet()) &#123; genericExecuteSpec = genericExecuteSpec.bind(entry.getKey(), entry.getValue()); &#125; &#125; return genericExecuteSpec.map(mappingFunction).all(); &#125;&#125; 自定义Repository接口的实现类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192package com.example.r2dbc;import lombok.extern.slf4j.Slf4j;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.data.r2dbc.convert.R2dbcConverter;import org.springframework.data.r2dbc.core.R2dbcEntityOperations;import org.springframework.data.r2dbc.repository.support.SimpleR2dbcRepository;import org.springframework.data.relational.core.query.Criteria;import org.springframework.data.relational.core.query.Query;import org.springframework.data.relational.repository.query.RelationalEntityInformation;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;import java.io.Serializable;@Slf4jpublic class SimpleBaseR2dbcRepository&lt;T, ID extends Serializable&gt; extends SimpleR2dbcRepository&lt;T, ID&gt; implements BaseR2dbcRepository&lt;T, ID&gt; &#123; private final R2dbcEntityOperations r2dbcEntityOperations; private final RelationalEntityInformation&lt;T, ID&gt; entity; public SimpleBaseR2dbcRepository(RelationalEntityInformation&lt;T, ID&gt; entity, R2dbcEntityOperations entityOperations, R2dbcConverter converter) &#123; super(entity, entityOperations, converter); this.r2dbcEntityOperations = entityOperations; this.entity = entity; log.info(&quot;SimpleBaseR2dbcRepository&quot;); &#125; @Override public R2dbcEntityOperations getR2dbcEntityOperations() &#123; return r2dbcEntityOperations; &#125; @Override public Mono&lt;Page&lt;T&gt;&gt; pageByQuery(Criteria criteria, Pageable pageable) &#123; final Query query = Query.query(criteria); return r2dbcEntityOperations.count(query, entity.getJavaType()).flatMap(total -&gt; r2dbcEntityOperations.select(query.with(pageable), entity.getJavaType()) .collectList() .map(list -&gt; new PageImpl&lt;&gt;(list, pageable, total))); &#125; @Override public Mono&lt;Long&gt; countByQuery(Criteria criteria) &#123; final Query query = Query.query(criteria); return r2dbcEntityOperations.count(query, entity.getJavaType()); &#125; @Override public Flux&lt;T&gt; findByQuery(Criteria criteria) &#123; final Query query = Query.query(criteria); return r2dbcEntityOperations.select(query, entity.getJavaType()); &#125; @Override public Flux&lt;T&gt; findByQuery(Criteria criteria, Sort sort) &#123; final Query query = Query.query(criteria).sort(sort); return r2dbcEntityOperations.select(query, entity.getJavaType()); &#125; @Override public Flux&lt;T&gt; findByQuery(Criteria criteria, int limit) &#123; final Query query = Query.query(criteria).limit(limit); return r2dbcEntityOperations.select(query, entity.getJavaType()); &#125; @Override public Flux&lt;T&gt; findByQuery(Criteria criteria, Sort sort, int limit) &#123; final Query query = Query.query(criteria).sort(sort).limit(limit); return r2dbcEntityOperations.select(query, entity.getJavaType()); &#125; @Override public Flux&lt;T&gt; findByQuery(Query query) &#123; return r2dbcEntityOperations.select(query, entity.getJavaType()); &#125; @Override public Mono&lt;T&gt; findOneByQuery(Query query) &#123; return r2dbcEntityOperations.selectOne(query, entity.getJavaType()); &#125; @Override public Mono&lt;T&gt; findOneByQuery(Criteria criteria) &#123; final Query query = Query.query(criteria); return r2dbcEntityOperations.selectOne(query, entity.getJavaType()); &#125;&#125; 我们需要告知springboot使用我们自定义的Repository 1234567891011121314package com.example.config;import com.example.r2dbc.SimpleBaseR2dbcRepository;import lombok.extern.slf4j.Slf4j;import org.springframework.context.annotation.Configuration;import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;@Slf4j@Configuration// 这里必须指定 basePackages，否则 repositoryBaseClass 指定的实现类不能被关联到 各个 Repository 中@EnableR2dbcRepositories(basePackages = &quot;com.example.mysql&quot;, repositoryBaseClass = SimpleBaseR2dbcRepository.class)public class ReactiveR2dbcConfig &#123;&#125; 此时我们在创建业务Repository时就可以继承我们自定义的Repository了 123public interface SysUserRepository extends BaseR2dbcRepository&lt;SysUser, String&gt; &#123;&#125; 可以看到我们自定义的Repository中，主要是通过Criteria来提供查询条件的封装，我了便于创建Criteria对象，这里提供了一个工具类 CustomCriteria，其主要功能是根据条件来拼接查询条件，代码比较多，就不在这里粘贴了，自行去Github代码地址中查看吧。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * &lt;h1&gt;CustomCriteria&lt;/h1&gt; * Criteria 构造器 * Created by hanqf on 2023/9/4 11:47. * * * 示例： * 1.and 关系: select * from tbl_table where (username like &#x27;%admin%&#x27; or username like &#x27;lisi%&#x27;) and enable = 1 * Criteria criteria = CustomCriteria.and() * .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;) * .eq(true, &quot;enable&quot;, 1) * .build(); * * 2.or 关系: select * from tbl_table where (username like &#x27;%admin%&#x27; or username like &#x27;lisi%&#x27;) or enable = 1 * Criteria criteria = CustomCriteria.or() * .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;) * .eq(true, &quot;enable&quot;, 1) * .build(); * * 3.复合关系： * Criteria criteria1 = CustomCriteria.and() * .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;) * .eq(true, &quot;enable&quot;, 1) * .build(); * Criteria criteria2 = CustomCriteria.or() * .like(true, &quot;username&quot;, &quot;%admin%&quot;, &quot;lisi%&quot;) * .eq(true, &quot;enable&quot;, 1) * .build(); * * Criteria criteria = criteria1.and(criteria2); // or： criteria1.or(criteria2); * * 4.复杂查询建议直接使用 sql 进行查询，可以使用 BaseR2dbcRepository 中的 execSqlToMono 和 execSqlToFlux * 示例： * public Mono&lt;TestOrder&gt; getOne(String orderId) &#123; String sql = &quot;select id, order_id from test_order where order_id = :orderId&quot;; return testOrderRepository.execSqlToMono(sql, Map.of(&quot;orderId&quot;, orderId), (row, rowMetadata) -&gt; &#123; final TestOrder testOrder = new TestOrder(); testOrder.setId(row.get(&quot;id&quot;, Long.class)); testOrder.setOrderId(row.get(&quot;order_id&quot;, String.class)); return testOrder; &#125;); &#125; * * * 说明： * 1.eq(true, &quot;enable&quot;, 1)：第一个参数为真时当前条件加入查询，默认为真 * 2.支持条件方法详见代码 */ 新增 R2dbc提供的&lt;S extends T&gt; Mono&lt;S&gt; save(S entity);方法，要求table必须含有主键，其根据实体类中主键是否被填充来判断是新增还是修改操作，如果我们是自定义主键，而非数据库自动填充主键，此时就不能使用save方法新增记录，解决方法是在业务Repository中创建一个新增方法，比如： 1234567891011/** * 实体类在进行新增时会判断主键是否填充，如果没有填充就认为是新数据，采取真正的新增操作，主键需要数据库来自动填充； * 如果主键存在值则认为是旧数据则调用更新操作。 * 对于自定义主键的情况，可以使用如下方式进行新增对象 * * 对象形式传参：:#&#123;#对象名.字段名&#125; * 字段传参：:字段名(@param定义)*/@Modifying@Query(&quot;insert into sys_user (id,username,password,enable) values (:#&#123;#sysUser.id&#125;,:#&#123;#sysUser.username&#125;,:#&#123;#sysUser.password&#125;,:#&#123;#sysUser.enable&#125;)&quot;)Mono&lt;Integer&gt; addSysUser(SysUser sysUser); 事务 注解式事务 1234567891011@Transactional@RequestMapping(&quot;/tx&quot;)public Mono&lt;Integer&gt; tx() &#123; final SysUser sysUser = new SysUser(); sysUser.setId(UUID.randomUUID().toString()); sysUser.setUsername(&quot;test&quot;); sysUser.setPassword(&quot;123456&quot;); sysUser.setEnable(true); // 主键重复 return sysUserRepository.addSysUser(sysUser).then(sysUserRepository.addSysUser(sysUser));&#125; 编程式事务 1234567891011121314@Autowiredprivate TransactionalOperator transactionalOperator;@RequestMapping(&quot;/tx2&quot;)public Mono&lt;Integer&gt; tx2() &#123; final SysUser sysUser = new SysUser(); sysUser.setId(UUID.randomUUID().toString()); sysUser.setUsername(&quot;test&quot;); sysUser.setPassword(&quot;123456&quot;); sysUser.setEnable(true); // 主键重复 return sysUserRepository.addSysUser(sysUser).then(sysUserRepository.addSysUser(sysUser)) .as(transactionalOperator::transactional);&#125; 多数据源 application.yaml 123456789101112131415161718192021222324spring: #r2dbc mysql r2dbc: one: #url: r2dbc:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8 # 开启代理，目的是打印sql，生产环境不建议，http://r2dbc.io/r2dbc-proxy/docs/current/docs/html/ url: r2dbc:proxy:mysql://mysql.test.db:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8&amp;proxyListener=com.example.r2dbc.LogExecutionListener username: testUser password: 123456 pool: enabled: true initial-size: 5 max-size: 20 max-idle-time: 30m two: #url: r2dbc:mysql://mysql.test.db:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8 url: r2dbc:proxy:mysql://mysql.test.db:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;proxyListener=com.example.r2dbc.LogExecutionListener username: testUser password: 123456 pool: enabled: true initial-size: 5 max-size: 20 max-idle-time: 30m one:配置类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108package com.example.config;import com.example.r2dbc.SimpleBaseR2dbcRepository;import io.r2dbc.spi.ConnectionFactories;import io.r2dbc.spi.ConnectionFactory;import io.r2dbc.spi.ConnectionFactoryOptions;import io.r2dbc.spi.Option;import lombok.extern.slf4j.Slf4j;import org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;import org.springframework.r2dbc.connection.R2dbcTransactionManager;import org.springframework.transaction.ReactiveTransactionManager;import org.springframework.transaction.TransactionDefinition;import org.springframework.transaction.reactive.TransactionalOperator;import org.springframework.transaction.support.DefaultTransactionDefinition;import org.springframework.util.StringUtils;import java.util.function.Predicate;import java.util.function.Supplier;@Slf4j@Configuration// 这里必须指定 basePackages，否则 repositoryBaseClass 指定的实现类不能被关联到 各个 Repository 中@EnableR2dbcRepositories(basePackages = &quot;com.example.mysql.one.repository&quot;, repositoryBaseClass = SimpleBaseR2dbcRepository.class, entityOperationsRef = &quot;oneR2dbcEntityTemplate&quot;)public class OneReactiveR2dbcConfig &#123; @Primary @Bean(&quot;oneR2dbcProperties&quot;) @ConfigurationProperties(prefix = &quot;spring.r2dbc.one&quot;) public R2dbcProperties oneR2dbcProperties() &#123; return new R2dbcProperties(); &#125; @Primary @Bean(&quot;oneR2dbcEntityTemplate&quot;) public R2dbcEntityTemplate oneR2dbcEntityTemplate() &#123; log.info(&quot;oneR2dbcEntityTemplate&quot;); return new R2dbcEntityTemplate(oneConnectionFactory()); &#125; @Primary @Bean(&quot;oneConnectionFactory&quot;) public ConnectionFactory oneConnectionFactory() &#123; log.info(&quot;oneConnectionFactory&quot;); R2dbcProperties r2dbcProperties = oneR2dbcProperties(); ConnectionFactoryOptions urlOptions = ConnectionFactoryOptions.parse(r2dbcProperties.getUrl()); ConnectionFactoryOptions.Builder optionsBuilder = urlOptions.mutate(); configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.USER, r2dbcProperties::getUsername, StringUtils::hasText); configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.PASSWORD, r2dbcProperties::getPassword, StringUtils::hasText); configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.DATABASE, () -&gt; determineDatabaseName(r2dbcProperties), StringUtils::hasText); if (r2dbcProperties.getProperties() != null) &#123; r2dbcProperties.getProperties() .forEach((key, value) -&gt; optionsBuilder.option(Option.valueOf(key), value)); &#125; final ConnectionFactoryOptions options = optionsBuilder.build(); return ConnectionFactories.get(options); &#125; @Primary @Bean(&quot;oneR2dbcTransactionManager&quot;) public ReactiveTransactionManager oneR2dbcTransactionManager() &#123; return new R2dbcTransactionManager(oneConnectionFactory()); &#125; @Primary @Bean(&quot;oneTransactionalOperator&quot;) public TransactionalOperator oneTransactionalOperator() &#123; DefaultTransactionDefinition transactionDefinition = new DefaultTransactionDefinition(); transactionDefinition.setName(&quot;oneTransactionalOperator&quot;); // 这是默认行为 transactionDefinition.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED); return TransactionalOperator.create(oneR2dbcTransactionManager(), transactionDefinition); &#125; private &lt;T extends CharSequence&gt; void configureIf(ConnectionFactoryOptions.Builder optionsBuilder, ConnectionFactoryOptions originalOptions, Option&lt;T&gt; option, Supplier&lt;T&gt; valueSupplier, Predicate&lt;T&gt; setIf) &#123; if (originalOptions.hasOption(option)) &#123; return; &#125; T value = valueSupplier.get(); if (setIf.test(value)) &#123; optionsBuilder.option(option, value); &#125; &#125; private String determineDatabaseName(R2dbcProperties properties) &#123; if (properties.isGenerateUniqueName()) &#123; return properties.determineUniqueName(); &#125; if (StringUtils.hasLength(properties.getName())) &#123; return properties.getName(); &#125; return null; &#125;&#125; two:配置类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101package com.example.config;import com.example.r2dbc.SimpleBaseR2dbcRepository;import io.r2dbc.spi.ConnectionFactories;import io.r2dbc.spi.ConnectionFactory;import io.r2dbc.spi.ConnectionFactoryOptions;import io.r2dbc.spi.Option;import lombok.extern.slf4j.Slf4j;import org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;import org.springframework.r2dbc.connection.R2dbcTransactionManager;import org.springframework.transaction.ReactiveTransactionManager;import org.springframework.transaction.TransactionDefinition;import org.springframework.transaction.reactive.TransactionalOperator;import org.springframework.transaction.support.DefaultTransactionDefinition;import org.springframework.util.StringUtils;import java.util.function.Predicate;import java.util.function.Supplier;@Slf4j@Configuration// 这里必须指定 basePackages，否则 repositoryBaseClass 指定的实现类不能被关联到 各个 Repository 中@EnableR2dbcRepositories(basePackages = &quot;com.example.mysql.two.repository&quot;, repositoryBaseClass = SimpleBaseR2dbcRepository.class, entityOperationsRef = &quot;twoR2dbcEntityTemplate&quot;)public class TwoReactiveR2dbcConfig &#123; @Bean(&quot;twoR2dbcProperties&quot;) @ConfigurationProperties(prefix = &quot;spring.r2dbc.two&quot;) public R2dbcProperties twoR2dbcProperties() &#123; return new R2dbcProperties(); &#125; @Bean(&quot;twoR2dbcEntityTemplate&quot;) public R2dbcEntityTemplate twoR2dbcEntityTemplate() &#123; log.info(&quot;twoR2dbcEntityTemplate&quot;); return new R2dbcEntityTemplate(twoConnectionFactory()); &#125; @Bean(&quot;twoConnectionFactory&quot;) public ConnectionFactory twoConnectionFactory() &#123; log.info(&quot;twoConnectionFactory&quot;); R2dbcProperties r2dbcProperties = twoR2dbcProperties(); ConnectionFactoryOptions urlOptions = ConnectionFactoryOptions.parse(r2dbcProperties.getUrl()); ConnectionFactoryOptions.Builder optionsBuilder = urlOptions.mutate(); configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.USER, r2dbcProperties::getUsername, StringUtils::hasText); configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.PASSWORD, r2dbcProperties::getPassword, StringUtils::hasText); configureIf(optionsBuilder, urlOptions, ConnectionFactoryOptions.DATABASE, () -&gt; determineDatabaseName(r2dbcProperties), StringUtils::hasText); if (r2dbcProperties.getProperties() != null) &#123; r2dbcProperties.getProperties() .forEach((key, value) -&gt; optionsBuilder.option(Option.valueOf(key), value)); &#125; final ConnectionFactoryOptions options = optionsBuilder.build(); return ConnectionFactories.get(options); &#125; @Bean(&quot;twoR2dbcTransactionManager&quot;) public ReactiveTransactionManager twoR2dbcTransactionManager() &#123; return new R2dbcTransactionManager(twoConnectionFactory()); &#125; @Bean(&quot;twoTransactionalOperator&quot;) public TransactionalOperator twoTransactionalOperator() &#123; DefaultTransactionDefinition transactionDefinition = new DefaultTransactionDefinition(); transactionDefinition.setName(&quot;twoTransactionalOperator&quot;); // 这是默认行为 transactionDefinition.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED); return TransactionalOperator.create(twoR2dbcTransactionManager(), transactionDefinition); &#125; private &lt;T extends CharSequence&gt; void configureIf(ConnectionFactoryOptions.Builder optionsBuilder, ConnectionFactoryOptions originalOptions, Option&lt;T&gt; option, Supplier&lt;T&gt; valueSupplier, Predicate&lt;T&gt; setIf) &#123; if (originalOptions.hasOption(option)) &#123; return; &#125; T value = valueSupplier.get(); if (setIf.test(value)) &#123; optionsBuilder.option(option, value); &#125; &#125; private String determineDatabaseName(R2dbcProperties properties) &#123; if (properties.isGenerateUniqueName()) &#123; return properties.determineUniqueName(); &#125; if (StringUtils.hasLength(properties.getName())) &#123; return properties.getName(); &#125; return null; &#125;&#125; 主要注意如下几点： 基于配置文件中数据源的信息创建各自的 R2dbcEntityTemplate，R2dbcTransactionManager basePackages 指定不同的扫描路径 entityOperationsRef 指定各自的 R2dbcEntityTemplate 完整代码参考 Github代码地址","summary":"摘要 本文聊聊SpringBoot R2dbc 本文基于SpringBoot-3.1.2 Github代码地址 web-flux-mysql-redis-demo,webflux-mysql-multi-demo","date_published":"2023-09-05T14:30:05.000Z","tags":["技术","springboot","r2dbc","java"]},{"id":"https://blog.hanqunfeng.com/2023/08/08/spring-boot-security-session-rememberme/","url":"https://blog.hanqunfeng.com/2023/08/08/spring-boot-security-session-rememberme/","title":"SpringBoot Security--Session管理与RememberMe","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍在SpringBoot Security中的Session管理与RememberMe</p>\n</li>\n<li class=\"lvl-2\">\n<p>实现了基于内存、Jdbc和Redis三种配置方式</p>\n</li>\n<li class=\"lvl-2\">\n<p>本文基于SpringBoot-2.7.14和SpringBoot-3.1.2</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"Security配置类\">Security配置类</h2>\n<h3 id=\"SpringBoot-2-7-14\">SpringBoot-2.7.14</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.common.security.CP_UserDetailsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.common.support.CP_ImageFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.csrf.CookieCsrfTokenRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;springboot升级到2.7.x以后的配置方法&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringSecurityConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * session注册器，默认是基于内存的SessionRegistryImpl，也可以配置为jdbc或redis，下文会介绍</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SessionRegistry sessionRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Token存储库，用于记录remember me的用户信息，默认是基于内存的InMemoryTokenRepositoryImpl，也可以配置为jdbc或redis，下文会介绍</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PersistentTokenRepository persistentTokenRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 验证码过滤器，负责登录时验证用户提交的验证码是否有效，本文对此不做介绍</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CP_ImageFilter imageFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 不需要进行验证的url数组</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] ignorings = &#123; <span class=\"string\">&quot;/login.do*&quot;</span>, <span class=\"string\">&quot;/**/*.json*&quot;</span>, <span class=\"string\">&quot;/**/*.xml*&quot;</span>, <span class=\"string\">&quot;/druid/**&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;/forgotPassword.do&quot;</span>, <span class=\"string\">&quot;/forgotPasswordEmail.do&quot;</span>, <span class=\"string\">&quot;/resetPassword.do&quot;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * AuthenticationManager（认证管理器）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManager</span><span class=\"params\">(AuthenticationConfiguration authenticationConfiguration)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;AuthenticationManager&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义一个能够与 HttpServletRequest 匹配的过滤器链。以确定它是否适用于该请求。</span></span><br><span class=\"line\"><span class=\"comment\">     * springboot升级到2.7.x以后的配置方式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    SecurityFilterChain <span class=\"title function_\">filterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;HttpSecurity&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//解决不允许显示在iframe中的问题</span></span><br><span class=\"line\">        http.headers().frameOptions().disable();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置拦截规则</span></span><br><span class=\"line\">        http.authorizeRequests()</span><br><span class=\"line\">                <span class=\"comment\">// 不需要验证的url</span></span><br><span class=\"line\">                .antMatchers(ignorings).permitAll()</span><br><span class=\"line\">                <span class=\"comment\">// 登录即可访问的url</span></span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/&quot;</span>).authenticated()</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/index.do*&quot;</span>).authenticated()</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/welcome.do*&quot;</span>).authenticated()</span><br><span class=\"line\">                <span class=\"comment\">// 自定义规则进行验证,基于权限管理模型的认证,public Boolean hasPerssion(HttpServletRequest request, Authentication authentication)，本文不做介绍</span></span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/**/*.do*&quot;</span>).access(<span class=\"string\">&quot;@rbacService.hasPerssion(request,authentication)&quot;</span>)</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                <span class=\"comment\">// 登录成功但是权限验证失败后的跳转地址</span></span><br><span class=\"line\">                .exceptionHandling().accessDeniedPage(<span class=\"string\">&quot;/access/denied.do&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 开启默认登录页面</span></span><br><span class=\"line\">        <span class=\"comment\">// http.formLogin();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义登录页面</span></span><br><span class=\"line\">        http.formLogin()</span><br><span class=\"line\">                .loginPage(<span class=\"string\">&quot;/login.do&quot;</span>)  <span class=\"comment\">// 登录页面</span></span><br><span class=\"line\">                .failureUrl(<span class=\"string\">&quot;/login.do?login_error=1&quot;</span>) <span class=\"comment\">// 登录失败跳转页面</span></span><br><span class=\"line\">                .defaultSuccessUrl(<span class=\"string\">&quot;/index.do&quot;</span>, <span class=\"literal\">true</span>)  <span class=\"comment\">// 登录成功默认跳转页面，这里设置true表示无论请求哪个地址，登录成功后都跳转到该页面</span></span><br><span class=\"line\">                .loginProcessingUrl(<span class=\"string\">&quot;/j_spring_security_check&quot;</span>) <span class=\"comment\">// 登录页面中的提交登录验证url, 默认 /login</span></span><br><span class=\"line\">                .usernameParameter(<span class=\"string\">&quot;j_username&quot;</span>)  <span class=\"comment\">// 登录页面中的用户名参数，默认username</span></span><br><span class=\"line\">                .passwordParameter(<span class=\"string\">&quot;j_password&quot;</span>)  <span class=\"comment\">// 登录页面中的密码参数，默认password</span></span><br><span class=\"line\">                .permitAll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关闭csrf，如果默认开启csrf，则在生成页面时会自动在每个form中增加一个隐藏属性&lt;input type=&quot;hidden&quot; name=&quot;_csrf&quot; value=&quot;95e8706b-8d22-4d62-9a27-3da5993e0a7d&quot;&gt;，</span></span><br><span class=\"line\">        <span class=\"comment\">// 实际上就是&lt;input type=&quot;hidden&quot; th:name=&quot;$&#123;_csrf.parameterName&#125;&quot; th:value=&quot;$&#123;_csrf.token&#125;&quot; /&gt;，js中如果需要使用时也可以使用该属性</span></span><br><span class=\"line\">        <span class=\"comment\">//http.csrf().disable();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开启csrf，默认开启，csrf不会拦截get请求</span></span><br><span class=\"line\">        http.csrf()</span><br><span class=\"line\">                <span class=\"comment\">//.csrfTokenRepository(new CookieCsrfTokenRepository()) //令牌存储方式，CookieCsrfTokenRepository或者HttpSessionCsrfTokenRepository，默认HttpSessionCsrfTokenRepository</span></span><br><span class=\"line\">                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) <span class=\"comment\">//关闭仅支持http浏览器请求，这样ajax和postMan都可以访问，header需要带上X-CSRF-TOKEN</span></span><br><span class=\"line\">                .ignoringAntMatchers(<span class=\"string\">&quot;/**/json.do*&quot;</span>, <span class=\"string\">&quot;/**/xml.do*&quot;</span>); <span class=\"comment\">//哪些不需要csrf，非浏览器直接访问的地址需要进行屏蔽，因为csrf标签只有页面会自动生成，另外认证接口也需要屏蔽，因为需要第一次获取CSRF-TOKEN</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义注销，这里需要注意的是，如果启用了csrf(默认就是开启)，则logout只能是post提交，如果要get提交，则必须如下配置</span></span><br><span class=\"line\">        http.logout()</span><br><span class=\"line\">                <span class=\"comment\">// 在注销时清除认证信息</span></span><br><span class=\"line\">                .clearAuthentication(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                .logoutRequestMatcher(<span class=\"keyword\">new</span> <span class=\"title class_\">AntPathRequestMatcher</span>(<span class=\"string\">&quot;/logout.do&quot;</span>)) <span class=\"comment\">//get</span></span><br><span class=\"line\">                <span class=\"comment\">//.logoutUrl(&quot;/logout.do&quot;)  //post</span></span><br><span class=\"line\">                .logoutSuccessUrl(<span class=\"string\">&quot;/login.do&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 在注销时使HttpSession失效</span></span><br><span class=\"line\">                .invalidateHttpSession(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// session管理</span></span><br><span class=\"line\">        http.sessionManagement()</span><br><span class=\"line\">                <span class=\"comment\">//默认开启session</span></span><br><span class=\"line\">                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)</span><br><span class=\"line\">                <span class=\"comment\">//每次登录验证将创建一个新的session</span></span><br><span class=\"line\">                .sessionFixation().migrateSession()</span><br><span class=\"line\">                <span class=\"comment\">//同一个用户最大的登录数量</span></span><br><span class=\"line\">                .maximumSessions(<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"comment\">//true表示已经登录就不予许再次登录，false表示允许再次登录但是之前的登录会下线。</span></span><br><span class=\"line\">                .maxSessionsPreventsLogin(<span class=\"literal\">false</span>)</span><br><span class=\"line\">                <span class=\"comment\">//session被下线(超时)之后的显示页面</span></span><br><span class=\"line\">                .expiredUrl(<span class=\"string\">&quot;/access/sameLogin.do&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 会话注册器</span></span><br><span class=\"line\">                .sessionRegistry(sessionRegistry);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// sessionRegistry是session注册器，默认是基于内存的SessionRegistryImpl，此时当用户注销时，Spring Security的默认行为是不会主动从SessionRegistry中移除相关的SessionInformation对象。这意味着注销后，SessionRegistryImpl中仍然保留该用户的会话信息。</span></span><br><span class=\"line\">        <span class=\"comment\">// 但是SessionRegistryImpl里对session的销毁和改变进行了事件监听，我们只需要注册事件发布者HttpSessionEventPublisher即可实现session的自动清理。</span></span><br><span class=\"line\">        <span class=\"comment\">//SessionRegistryImpl使用map来维护session信息，这样在分布式系统(多个副本)中获取会话数就不准确了，</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以这里我们可以使用基于SpringSession的SpringSessionBackedSessionRegistry，其可以绑定基于jdbc的JdbcIndexedSessionRepository或者基于redis的RedisIndexedSessionRepository</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果使用SpringSessionBackedSessionRegistry，这里就不需要HttpSessionEventPublisher的Bean，因为这里Session管理全部交由SpringSession去管理，也就是Session的相关清理工作会自动帮助我们完成。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// RemeberMe</span></span><br><span class=\"line\">        <span class=\"comment\">//http.rememberMe().key(&quot;webmvc#FD637E6D9C0F1A5A67082AF56CE32485&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//两周内免登录</span></span><br><span class=\"line\">        http.rememberMe()</span><br><span class=\"line\">                .rememberMeParameter(<span class=\"string\">&quot;_spring_security_remember_me&quot;</span>) <span class=\"comment\">// 默认 remember-me</span></span><br><span class=\"line\">                .rememberMeCookieName(<span class=\"string\">&quot;remember-me-cookie&quot;</span>)  <span class=\"comment\">//保存在浏览器端的cookie的名称，如果不设置默认也是remember-me</span></span><br><span class=\"line\">                .tokenValiditySeconds(<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">14</span>) <span class=\"comment\">// 单位秒 两周=60*60*24*14</span></span><br><span class=\"line\">                .tokenRepository(persistentTokenRepository); <span class=\"comment\">//Token存储库，用于记录remember me的用户信息，默认内存，也可以配置为数据库或者redis;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 验证码过滤器</span></span><br><span class=\"line\">        http.addFilterBefore(imageFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">        <span class=\"comment\">// 设置userDetailsService</span></span><br><span class=\"line\">        http.userDetailsService(userDetailsService());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ignore的url</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果你需要忽略URL，请考虑通过HttpSecurity.authorizeHttpRequests的permitAll来实现。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//@Bean</span></span><br><span class=\"line\">    <span class=\"comment\">//public WebSecurityCustomizer webSecurityCustomizer() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//    return web -&gt; web.ignoring().antMatchers(ignorings);</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 登录的时候需要获取用户信息，只有登录的时候使用，其余时候使用http.authorizeRequests()中配置的验证规则（验证时，用户名和权限都确定了）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CP_UserDetailsService <span class=\"title function_\">userDetailsService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;CP_UserDetailsService&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">CP_UserDetailsService</span> <span class=\"variable\">userDetailsService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CP_UserDetailsService</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userDetailsService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 认证日志</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> org.springframework.security.authentication.event.LoggerListener <span class=\"title function_\">loggerListener</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;org.springframework.security.authentication.event.LoggerListener&quot;</span>);</span><br><span class=\"line\">        org.springframework.security.authentication.event.<span class=\"type\">LoggerListener</span> <span class=\"variable\">loggerListener</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">org</span>.springframework.security.authentication.event.LoggerListener();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loggerListener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求日志</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> org.springframework.security.access.event.LoggerListener <span class=\"title function_\">eventLoggerListener</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;org.springframework.security.access.event.LoggerListener&quot;</span>);</span><br><span class=\"line\">        org.springframework.security.access.event.<span class=\"type\">LoggerListener</span> <span class=\"variable\">eventLoggerListener</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">org</span>.springframework.security.access.event.LoggerListener();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eventLoggerListener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 密码加密，在进行登录验证时会自动将页面提交的密码通过其进行加密</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SpringBoot-3-1-2\">SpringBoot-3.1.2</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.support.security.CP_ImageFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.support.security.CP_RbacService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.event.LoggerListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authorization.AuthorizationDecision;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.csrf.CookieCsrfTokenRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;springboot升级到3.x.x以后的配置方法&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableMethodSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringSecurityConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SessionRegistry sessionRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PersistentTokenRepository persistentTokenRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CP_RbacService rbacService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CP_ImageFilter imageFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] ignorings = &#123;<span class=\"string\">&quot;/email/**&quot;</span>, <span class=\"string\">&quot;/actuator*/**&quot;</span>, <span class=\"string\">&quot;/admin*/**&quot;</span>, <span class=\"string\">&quot;/logger**&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;/rabbitmq/**&quot;</span>, <span class=\"string\">&quot;/checkcode/**&quot;</span>, <span class=\"string\">&quot;/resource/**&quot;</span>, <span class=\"string\">&quot;/**/*.jsp&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;/access/sameLogin.do&quot;</span>, <span class=\"string\">&quot;/**/*.json*&quot;</span>, <span class=\"string\">&quot;/**/*.xml*&quot;</span>, <span class=\"string\">&quot;/druid/**&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;/forgotPassword.do&quot;</span>, <span class=\"string\">&quot;/forgotPasswordEmail.do&quot;</span>, <span class=\"string\">&quot;/resetPassword.do&quot;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;AntPathRequestMatcher&gt; ignoringsMatcherList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">       ignoringsMatcherList = Arrays.stream(ignorings).map(AntPathRequestMatcher::antMatcher).toList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取AuthenticationManager（认证管理器），登录时认证使用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> authenticationConfiguration</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManager</span><span class=\"params\">(AuthenticationConfiguration authenticationConfiguration)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;AuthenticationManager&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    SecurityFilterChain <span class=\"title function_\">filterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;HttpSecurity&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//解决不允许显示在iframe的问题</span></span><br><span class=\"line\">        http.headers(httpSecurityHeadersConfigurer -&gt; httpSecurityHeadersConfigurer</span><br><span class=\"line\">                .frameOptions(HeadersConfigurer.FrameOptionsConfig::disable));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置拦截规则</span></span><br><span class=\"line\">        http.authorizeHttpRequests(authorizationManagerRequestMatcherRegistry -&gt; authorizationManagerRequestMatcherRegistry</span><br><span class=\"line\">                .requestMatchers(ignoringsMatcherList.toArray(AntPathRequestMatcher[]::<span class=\"keyword\">new</span>)).permitAll()</span><br><span class=\"line\">                .requestMatchers(AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/login.do*&quot;</span>)).permitAll() <span class=\"comment\">// 登录请求不拦截</span></span><br><span class=\"line\">                .requestMatchers(AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/index.do*&quot;</span>)).authenticated()</span><br><span class=\"line\">                .requestMatchers(AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/*.do*&quot;</span>), AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/**/*.do*&quot;</span>)).access((authentication, context) -&gt;</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">AuthorizationDecision</span>(rbacService.hasPerssion(context.getRequest(),authentication.get()))));</span><br><span class=\"line\">            <span class=\"comment\">// 这种方式效果同上，都是开启自定义认证</span></span><br><span class=\"line\">            <span class=\"comment\">//  .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/*.do*&quot;),AntPathRequestMatcher.antMatcher(&quot;/**/*.do*&quot;)).access(webExpressionAuthorizationManager()));</span></span><br><span class=\"line\"></span><br><span class=\"line\">        http.exceptionHandling(exceptionHandlingCustomizer -&gt; exceptionHandlingCustomizer</span><br><span class=\"line\">                .accessDeniedPage(<span class=\"string\">&quot;/access/denied.do&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 开启默认登录页面</span></span><br><span class=\"line\">        http.formLogin(httpSecurityFormLoginConfigurer -&gt; httpSecurityFormLoginConfigurer</span><br><span class=\"line\">                .loginPage(<span class=\"string\">&quot;/login.do&quot;</span>)</span><br><span class=\"line\">                .failureUrl(<span class=\"string\">&quot;/login.do?login_error=1&quot;</span>)</span><br><span class=\"line\">                .defaultSuccessUrl(<span class=\"string\">&quot;/index.do&quot;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">                .loginProcessingUrl(<span class=\"string\">&quot;/j_spring_security_check&quot;</span>) <span class=\"comment\">// 默认 /login</span></span><br><span class=\"line\">                .usernameParameter(<span class=\"string\">&quot;j_username&quot;</span>)  <span class=\"comment\">// 默认username</span></span><br><span class=\"line\">                .passwordParameter(<span class=\"string\">&quot;j_password&quot;</span>)  <span class=\"comment\">// 默认password</span></span><br><span class=\"line\">                .permitAll());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开启csrf，默认开启，csrf不会拦截get请求</span></span><br><span class=\"line\">        http.csrf(httpSecurityCsrfConfigurer -&gt; httpSecurityCsrfConfigurer</span><br><span class=\"line\">                <span class=\"comment\">//关闭仅支持http浏览器请求，这样ajax和postMan都可以访问，header需要带上X-CSRF-TOKEN</span></span><br><span class=\"line\">                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())</span><br><span class=\"line\">                <span class=\"comment\">//哪些不需要csrf，非浏览器直接访问的地址需要进行屏蔽，因为csrf标签只有页面会自动生成，另外认证接口也需要屏蔽，因为需要第一次获取CSRF-TOKEN</span></span><br><span class=\"line\">                .ignoringRequestMatchers(AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/**/json.do*&quot;</span>), AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/**/xml.do*&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义注销，这里需要注意的是，如果启用了csrf(默认就是开启)，则logout只能是post提交，如果要get提交，则必须如下配置</span></span><br><span class=\"line\">        http.logout(httpSecurityLogoutConfigurer -&gt; httpSecurityLogoutConfigurer</span><br><span class=\"line\">                <span class=\"comment\">// 在注销时清除认证信息</span></span><br><span class=\"line\">                .clearAuthentication(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                .logoutRequestMatcher(AntPathRequestMatcher.antMatcher(<span class=\"string\">&quot;/logout.do&quot;</span>)) <span class=\"comment\">//get</span></span><br><span class=\"line\">                <span class=\"comment\">//.logoutUrl(&quot;/logout.do&quot;)  //post</span></span><br><span class=\"line\">                .logoutSuccessUrl(<span class=\"string\">&quot;/login.do&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 在注销时使HttpSession失效</span></span><br><span class=\"line\">                .invalidateHttpSession(<span class=\"literal\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// session管理</span></span><br><span class=\"line\">        http.sessionManagement(httpSecuritySessionManagementConfigurer -&gt; httpSecuritySessionManagementConfigurer</span><br><span class=\"line\">                <span class=\"comment\">//默认开启session</span></span><br><span class=\"line\">                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)</span><br><span class=\"line\">                <span class=\"comment\">//每次登录验证将创建一个新的session</span></span><br><span class=\"line\">                .sessionFixation().migrateSession()</span><br><span class=\"line\">                <span class=\"comment\">//同一个用户最大的登录数量</span></span><br><span class=\"line\">                .maximumSessions(<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"comment\">//true表示已经登录就不予许再次登录，false表示允许再次登录但是之前的登录会下线。</span></span><br><span class=\"line\">                .maxSessionsPreventsLogin(<span class=\"literal\">false</span>)</span><br><span class=\"line\">                <span class=\"comment\">//session被下线(超时)之后的显示页面</span></span><br><span class=\"line\">                .expiredUrl(<span class=\"string\">&quot;/access/sameLogin.do&quot;</span>)</span><br><span class=\"line\">                .sessionRegistry(sessionRegistry));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// RemeberMe 两周内免登录</span></span><br><span class=\"line\">        http.rememberMe(httpSecurityRememberMeConfigurer -&gt; httpSecurityRememberMeConfigurer</span><br><span class=\"line\">                .rememberMeParameter(<span class=\"string\">&quot;_spring_security_remember_me&quot;</span>) <span class=\"comment\">// 默认 remember-me</span></span><br><span class=\"line\">                .rememberMeCookieName(<span class=\"string\">&quot;remember-me-cookie&quot;</span>)  <span class=\"comment\">//保存在浏览器端的cookie的名称，如果不设置默认也是remember-me</span></span><br><span class=\"line\">                .tokenValiditySeconds(<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">14</span>)</span><br><span class=\"line\">                .tokenRepository(persistentTokenRepository));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置userDetailsService</span></span><br><span class=\"line\">        http.userDetailsService(userDetailsService());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置过滤器，这里是验证码过滤器</span></span><br><span class=\"line\">        http.addFilterBefore(imageFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * web表达式认证管理器，支持自定义认证</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"comment\">//    private WebExpressionAuthorizationManager webExpressionAuthorizationManager() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        final var expressionHandler = new DefaultHttpSecurityExpressionHandler();</span></span><br><span class=\"line\"><span class=\"comment\">//        expressionHandler.setApplicationContext(applicationContext);</span></span><br><span class=\"line\"><span class=\"comment\">//        final var authorizationManager = new WebExpressionAuthorizationManager(&quot;@rbacService.hasPerssion(request,authentication)&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        // 一定要设置expressionHandler，否则不生效</span></span><br><span class=\"line\"><span class=\"comment\">//        authorizationManager.setExpressionHandler(expressionHandler);</span></span><br><span class=\"line\"><span class=\"comment\">//        return authorizationManager;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 基于内存的userDetailsService</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> InMemoryUserDetailsManager <span class=\"title function_\">userDetailsService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">UserDetails</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> User.builder()</span><br><span class=\"line\">                .username(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 123456</span></span><br><span class=\"line\">                .password(<span class=\"string\">&quot;$2a$10$JHj.XB.5RtpY60JEuTTGjuIT4m.hYT1yWoevJ6inU6Q7JE1qcvTYC&quot;</span>)</span><br><span class=\"line\">                .roles(<span class=\"string\">&quot;USER&quot;</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">UserDetails</span> <span class=\"variable\">admin</span> <span class=\"operator\">=</span> User.builder()</span><br><span class=\"line\">                .username(<span class=\"string\">&quot;admin&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 123456</span></span><br><span class=\"line\">                .password(<span class=\"string\">&quot;$2a$10$JHj.XB.5RtpY60JEuTTGjuIT4m.hYT1yWoevJ6inU6Q7JE1qcvTYC&quot;</span>)</span><br><span class=\"line\">                .roles(<span class=\"string\">&quot;ADMIN&quot;</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryUserDetailsManager</span>(user, admin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 认证日志</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LoggerListener <span class=\"title function_\">loggerListener</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;org.springframework.security.authentication.event.LoggerListener&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoggerListener</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 密码加密策略</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;BCryptPasswordEncoder&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SessionRegistry–Session注册器\">SessionRegistry–Session注册器</h2>\n<h3 id=\"基于内存–SessionRegistryImpl\">基于内存–SessionRegistryImpl</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.session.HttpSessionEventPublisher;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;CommonSessionSpringSecurityConfig&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonSessionSpringSecurityConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用于跟踪用户的会话信息，包括已经认证的用户和它们的会话（Session）。</span></span><br><span class=\"line\"><span class=\"comment\">     * 每当用户成功进行身份认证并建立了一个新的会话时，SessionRegistry将负责将该会话添加到其内部的数据结构中。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SessionRegistry <span class=\"title function_\">sessionRegistry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;CommonSessionRegistry&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SessionRegistryImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * session事件发布者</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果使用SpringSessionBackedSessionRegistry，这里就不需要HttpSessionEventPublisher的Bean，而是交由SpringSession来管理</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HttpSessionEventPublisher <span class=\"title function_\">httpSessionEventPublisher</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpSessionEventPublisher</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于Spring-Session的jdbc\">基于Spring-Session的jdbc</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>maven依赖</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>建表语句<br>\n建表语句可在<code>spring-session-jdbc-[version].jar</code>的<code>org.springframework.session.jdbc</code>包路径中查看</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.jdbc.config.annotation.web.http.EnableJdbcHttpSession;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;jdbc-session&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJdbcHttpSession</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcSessionConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.jdbc.JdbcIndexedSessionRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.security.SpringSessionBackedSessionRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;JdbcSessionSpringSecurityConfig&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(JdbcSessionConfig.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcSessionSpringSecurityConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JdbcIndexedSessionRepository sessionRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SessionRegistry <span class=\"title function_\">springSessionBackedSessionRegistry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;JdbcSessionRegistry&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringSessionBackedSessionRegistry</span>&lt;&gt;(sessionRepository);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于Spring-Session的redis\">基于Spring-Session的redis</h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * RedisSessionConfig</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableRedisHttpSession</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisSessionConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.data.redis.RedisIndexedSessionRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.security.SpringSessionBackedSessionRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;RedisSessionSpringSecurityConfig&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(RedisSessionConfig.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisSessionSpringSecurityConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisIndexedSessionRepository sessionRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SessionRegistry <span class=\"title function_\">springSessionBackedSessionRegistry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;RedisSessionRegistry&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringSessionBackedSessionRegistry</span>&lt;&gt;(sessionRepository);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取当前所有登录用户信息\">获取当前所有登录用户信息</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.common.session;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;h1&gt;HttpSession服务类&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HttpSessionService</span> &#123;</span><br><span class=\"line\">    Map&lt;String, Date&gt; <span class=\"title function_\">getAllPrincipals</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于内存–SessionRegistryImpl-2\">基于内存–SessionRegistryImpl</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.common.session.HttpSessionService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionInformation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.session.SessionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonHttpSessionService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HttpSessionService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    SessionRegistry sessionRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String, Date&gt; <span class=\"title function_\">getAllPrincipals</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Date&gt; lastActivityDates = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object principal : sessionRegistry.getAllPrincipals()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (principal <span class=\"keyword\">instanceof</span> User) &#123;</span><br><span class=\"line\">                username = ((User) principal).getUsername();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// a principal may have multiple active sessions</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (SessionInformation session : sessionRegistry.getAllSessions(</span><br><span class=\"line\">                    principal, <span class=\"literal\">false</span>)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// no last activity stored</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lastActivityDates.get(username) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    lastActivityDates.put(username, session.getLastRequest());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// check to see if this session is newer than the last</span></span><br><span class=\"line\">                    <span class=\"comment\">// stored</span></span><br><span class=\"line\">                    <span class=\"type\">Date</span> <span class=\"variable\">prevLastRequest</span> <span class=\"operator\">=</span> lastActivityDates.get(username);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (session.getLastRequest().after(prevLastRequest)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// update if so</span></span><br><span class=\"line\">                        lastActivityDates.put(username, session.getLastRequest());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastActivityDates;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于Spring-Session的jdbc-2\">基于Spring-Session的jdbc</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.common.session.HttpSessionService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.function.session.dao.SpringSessionJpaRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.function.session.model.SpringSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcHttpSessionService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HttpSessionService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 基于JPA的dao对象，对应表为spring_session</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SpringSessionJpaRepository springSessionJpaRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String, Date&gt; <span class=\"title function_\">getAllPrincipals</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Date&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> List&lt;SpringSession&gt; sessionList = springSessionJpaRepository.findSpringSessionsByExpiryTimeAfter(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().getTime());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (SpringSession springSession : sessionList) &#123;</span><br><span class=\"line\">                map.put(springSession.getPrincipalName(), <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(springSession.getLastAccessTime()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于Spring-Session的redis-2\">基于Spring-Session的redis</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.common.session.HttpSessionService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.session.data.redis.RedisIndexedSessionRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisHttpSessionService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HttpSessionService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SESSION_SESSIONS</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisIndexedSessionRepository sessionRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String, Date&gt; <span class=\"title function_\">getAllPrincipals</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Date&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Set&lt;String&gt; keys = redisTemplate.keys(SESSION_SESSIONS + <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">principalName</span> <span class=\"operator\">=</span> key.replace(SESSION_SESSIONS, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">Map</span> <span class=\"variable\">byPrincipalName</span> <span class=\"operator\">=</span> sessionRepository.findByPrincipalName(principalName);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (byPrincipalName != <span class=\"literal\">null</span> &amp;&amp; byPrincipalName.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> objectMapper.writeValueAsString(byPrincipalName);</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> Map&lt;String, RedisSessionPojo&gt; redisSessionMap = objectMapper.readerForMapOf(RedisSessionPojo.class).readValue(json);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (String mapKey : redisSessionMap.keySet()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"type\">RedisSessionPojo</span> <span class=\"variable\">redisSession</span> <span class=\"operator\">=</span> redisSessionMap.get(mapKey);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!redisSession.getExpired()) &#123;</span><br><span class=\"line\">                            map.put(principalName, redisSession.getLastAccessedTime());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisSessionPojo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object attributeNames;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String maxInactiveInterval;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean expired;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date lastAccessedTime;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String creationTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Remember-Me\">Remember-Me</h2>\n<h3 id=\"基于内存–InMemoryTokenRepositoryImpl\">基于内存–InMemoryTokenRepositoryImpl</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.InMemoryTokenRepositoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommonRememberMeConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PersistentTokenRepository <span class=\"title function_\">persistentTokenRepository</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;InMemoryTokenRepositoryImpl&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">InMemoryTokenRepositoryImpl</span> <span class=\"variable\">tokenRepository</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryTokenRepositoryImpl</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tokenRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于jdbc\">基于jdbc</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcRememberMeConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * RemeberMe</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置从数据库中获取token</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * CREATE TABLE `persistent_logins` (</span></span><br><span class=\"line\"><span class=\"comment\">     * `username` varchar(64) NOT NULL,</span></span><br><span class=\"line\"><span class=\"comment\">     * `series` varchar(64) NOT NULL,</span></span><br><span class=\"line\"><span class=\"comment\">     * `token` varchar(64) NOT NULL,</span></span><br><span class=\"line\"><span class=\"comment\">     * `last_used` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span></span><br><span class=\"line\"><span class=\"comment\">     * PRIMARY KEY (`series`)</span></span><br><span class=\"line\"><span class=\"comment\">     * ) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PersistentTokenRepository <span class=\"title function_\">persistentTokenRepository</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;JdbcTokenRepositoryImpl&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">JdbcTokenRepositoryImpl</span> <span class=\"variable\">tokenRepository</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JdbcTokenRepositoryImpl</span>();</span><br><span class=\"line\">        <span class=\"comment\">//自动创建表，第一次运行时可是设置为true，让其自动创建表</span></span><br><span class=\"line\">        tokenRepository.setCreateTableOnStartup(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        tokenRepository.setDataSource(dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tokenRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于redis\">基于redis</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hanqf.common.RedisTokenRepositoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(RedisConfig.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisRememberMeConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String ,Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * RemeberMe</span></span><br><span class=\"line\"><span class=\"comment\">     * redis，springSecurity没有提供基于redis的PersistentTokenRepository，需要我们自己创建</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PersistentTokenRepository <span class=\"title function_\">persistentTokenRepository</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;RedisTokenRepositoryImpl&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">RedisTokenRepositoryImpl</span> <span class=\"variable\">tokenRepository</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTokenRepositoryImpl</span>(redisTemplate);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tokenRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>自定义基于Redis的PersistentTokenRepository</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hanqf.common;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.dao.DataIntegrityViolationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentRememberMeToken;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisTokenRepositoryImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PersistentTokenRepository</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 默认14天：60 * 60 * 24 * 14</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;rememberMe.expireTime:1209600&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer rememberMeExpireTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SERIES_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring:security:rememberMe:series:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">USERNAME_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring:security:rememberMe:username:&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RedisTokenRepositoryImpl</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">generateKey</span><span class=\"params\">(String prefix, String <span class=\"keyword\">var</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prefix + <span class=\"keyword\">var</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createNewToken</span><span class=\"params\">(PersistentRememberMeToken token)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> generateKey(SERIES_PREFIX, token.getSeries());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Boolean.TRUE.equals(redisTemplate.persist(key))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataIntegrityViolationException</span>(<span class=\"string\">&quot;Series Id &#x27;&quot;</span> + token.getSeries() + <span class=\"string\">&quot;&#x27; already exists!&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建一个hashmap</span></span><br><span class=\"line\">            Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;username&quot;</span>, token.getUsername());</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;tokenValue&quot;</span>, token.getTokenValue());</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;date&quot;</span>, String.valueOf(token.getDate().getTime()));</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;series&quot;</span>, token.getSeries());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//这里不能直接将PersistentRememberMeToken对象存入redis，因为这里使用的RedisTemplate是基于json的，要求对象必须有无参构造方法以及属性的setter和getter方法</span></span><br><span class=\"line\">            redisTemplate.opsForValue().set(key, map);</span><br><span class=\"line\">            redisTemplate.expire(key, rememberMeExpireTime, TimeUnit.SECONDS);</span><br><span class=\"line\">            redisTemplate.opsForValue().set(generateKey(USERNAME_PREFIX, token.getUsername()), token.getSeries());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateToken</span><span class=\"params\">(String series, String tokenValue, Date lastUsed)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">PersistentRememberMeToken</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getTokenForSeries(series);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">PersistentRememberMeToken</span> <span class=\"variable\">newToken</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PersistentRememberMeToken</span>(token.getUsername(), series, tokenValue, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">            <span class=\"comment\">//创建一个hashmap</span></span><br><span class=\"line\">            Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;username&quot;</span>, newToken.getUsername());</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;tokenValue&quot;</span>, newToken.getTokenValue());</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;date&quot;</span>, String.valueOf(newToken.getDate().getTime()));</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;series&quot;</span>, newToken.getSeries());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> generateKey(SERIES_PREFIX, series);</span><br><span class=\"line\">            redisTemplate.opsForValue().set(key, map);</span><br><span class=\"line\">            redisTemplate.expire(key, rememberMeExpireTime, TimeUnit.SECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PersistentRememberMeToken <span class=\"title function_\">getTokenForSeries</span><span class=\"params\">(String seriesId)</span> &#123;</span><br><span class=\"line\">        Map&lt;String, String&gt; map = (Map) redisTemplate.opsForValue().get(generateKey(SERIES_PREFIX, seriesId));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> map.get(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">tokenValue</span> <span class=\"operator\">=</span> map.get(<span class=\"string\">&quot;tokenValue&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> map.get(<span class=\"string\">&quot;date&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == username || <span class=\"literal\">null</span> == tokenValue || <span class=\"literal\">null</span> == date) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">timestamp</span> <span class=\"operator\">=</span> Long.valueOf(date);</span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">time</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(timestamp);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">PersistentRememberMeToken</span> <span class=\"variable\">rememberMeToken</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PersistentRememberMeToken</span>(username, seriesId, tokenValue, time);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rememberMeToken;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeUserTokens</span><span class=\"params\">(String username)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//可能redis版本低于6用不了getAndDelete</span></span><br><span class=\"line\"><span class=\"comment\">//            String series = (String) redisTemplate.opsForValue().getAndDelete(generateKey(USERNAME_PREFIX, username));</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">series</span> <span class=\"operator\">=</span> (String) redisTemplate.opsForValue().get(generateKey(USERNAME_PREFIX, username));</span><br><span class=\"line\">            redisTemplate.delete(generateKey(USERNAME_PREFIX, username));</span><br><span class=\"line\">            redisTemplate.delete(generateKey(SERIES_PREFIX, series));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍在SpringBoot Security中的Session管理与RememberMe 实现了基于内存、Jdbc和Redis三种配置方式 本文基于SpringBoot-2.7.14和SpringBoot-3.1.2 Security配置类 SpringBoot-2.7.14 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214package com.hanqf.config;import com.hanqf.common.security.CP_UserDetailsService;import com.hanqf.common.support.CP_ImageFilter;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.session.SessionRegistry;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;import org.springframework.security.web.csrf.CookieCsrfTokenRepository;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;/** * &lt;h1&gt;springboot升级到2.7.x以后的配置方法&lt;/h1&gt; */@Slf4j@Configuration@EnableGlobalMethodSecurity(prePostEnabled = true)public class SpringSecurityConfig &#123; /** * session注册器，默认是基于内存的SessionRegistryImpl，也可以配置为jdbc或redis，下文会介绍 */ @Autowired private SessionRegistry sessionRegistry; /** * Token存储库，用于记录remember me的用户信息，默认是基于内存的InMemoryTokenRepositoryImpl，也可以配置为jdbc或redis，下文会介绍 */ @Autowired private PersistentTokenRepository persistentTokenRepository; /** * 验证码过滤器，负责登录时验证用户提交的验证码是否有效，本文对此不做介绍 */ @Autowired private CP_ImageFilter imageFilter; /** * 不需要进行验证的url数组 */ private String[] ignorings = &#123; &quot;/login.do*&quot;, &quot;/**/*.json*&quot;, &quot;/**/*.xml*&quot;, &quot;/druid/**&quot;, &quot;/forgotPassword.do&quot;, &quot;/forgotPasswordEmail.do&quot;, &quot;/resetPassword.do&quot; &#125;; /** * AuthenticationManager（认证管理器） */ @Bean public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception &#123; log.info(&quot;AuthenticationManager&quot;); return authenticationConfiguration.getAuthenticationManager(); &#125; /** * 定义一个能够与 HttpServletRequest 匹配的过滤器链。以确定它是否适用于该请求。 * springboot升级到2.7.x以后的配置方式 */ @Bean SecurityFilterChain filterChain(HttpSecurity http) throws Exception &#123; log.info(&quot;HttpSecurity&quot;); //解决不允许显示在iframe中的问题 http.headers().frameOptions().disable(); // 设置拦截规则 http.authorizeRequests() // 不需要验证的url .antMatchers(ignorings).permitAll() // 登录即可访问的url .antMatchers(&quot;/&quot;).authenticated() .antMatchers(&quot;/index.do*&quot;).authenticated() .antMatchers(&quot;/welcome.do*&quot;).authenticated() // 自定义规则进行验证,基于权限管理模型的认证,public Boolean hasPerssion(HttpServletRequest request, Authentication authentication)，本文不做介绍 .antMatchers(&quot;/**/*.do*&quot;).access(&quot;@rbacService.hasPerssion(request,authentication)&quot;) .and() // 登录成功但是权限验证失败后的跳转地址 .exceptionHandling().accessDeniedPage(&quot;/access/denied.do&quot;); // 开启默认登录页面 // http.formLogin(); // 自定义登录页面 http.formLogin() .loginPage(&quot;/login.do&quot;) // 登录页面 .failureUrl(&quot;/login.do?login_error=1&quot;) // 登录失败跳转页面 .defaultSuccessUrl(&quot;/index.do&quot;, true) // 登录成功默认跳转页面，这里设置true表示无论请求哪个地址，登录成功后都跳转到该页面 .loginProcessingUrl(&quot;/j_spring_security_check&quot;) // 登录页面中的提交登录验证url, 默认 /login .usernameParameter(&quot;j_username&quot;) // 登录页面中的用户名参数，默认username .passwordParameter(&quot;j_password&quot;) // 登录页面中的密码参数，默认password .permitAll(); //关闭csrf，如果默认开启csrf，则在生成页面时会自动在每个form中增加一个隐藏属性&lt;input type=&quot;hidden&quot; name=&quot;_csrf&quot; value=&quot;95e8706b-8d22-4d62-9a27-3da5993e0a7d&quot;&gt;， // 实际上就是&lt;input type=&quot;hidden&quot; th:name=&quot;$&#123;_csrf.parameterName&#125;&quot; th:value=&quot;$&#123;_csrf.token&#125;&quot; /&gt;，js中如果需要使用时也可以使用该属性 //http.csrf().disable(); //开启csrf，默认开启，csrf不会拦截get请求 http.csrf() //.csrfTokenRepository(new CookieCsrfTokenRepository()) //令牌存储方式，CookieCsrfTokenRepository或者HttpSessionCsrfTokenRepository，默认HttpSessionCsrfTokenRepository .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) //关闭仅支持http浏览器请求，这样ajax和postMan都可以访问，header需要带上X-CSRF-TOKEN .ignoringAntMatchers(&quot;/**/json.do*&quot;, &quot;/**/xml.do*&quot;); //哪些不需要csrf，非浏览器直接访问的地址需要进行屏蔽，因为csrf标签只有页面会自动生成，另外认证接口也需要屏蔽，因为需要第一次获取CSRF-TOKEN // 自定义注销，这里需要注意的是，如果启用了csrf(默认就是开启)，则logout只能是post提交，如果要get提交，则必须如下配置 http.logout() // 在注销时清除认证信息 .clearAuthentication(true) .logoutRequestMatcher(new AntPathRequestMatcher(&quot;/logout.do&quot;)) //get //.logoutUrl(&quot;/logout.do&quot;) //post .logoutSuccessUrl(&quot;/login.do&quot;) // 在注销时使HttpSession失效 .invalidateHttpSession(true); // session管理 http.sessionManagement() //默认开启session .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED) //每次登录验证将创建一个新的session .sessionFixation().migrateSession() //同一个用户最大的登录数量 .maximumSessions(1) //true表示已经登录就不予许再次登录，false表示允许再次登录但是之前的登录会下线。 .maxSessionsPreventsLogin(false) //session被下线(超时)之后的显示页面 .expiredUrl(&quot;/access/sameLogin.do&quot;) // 会话注册器 .sessionRegistry(sessionRegistry); // sessionRegistry是session注册器，默认是基于内存的SessionRegistryImpl，此时当用户注销时，Spring Security的默认行为是不会主动从SessionRegistry中移除相关的SessionInformation对象。这意味着注销后，SessionRegistryImpl中仍然保留该用户的会话信息。 // 但是SessionRegistryImpl里对session的销毁和改变进行了事件监听，我们只需要注册事件发布者HttpSessionEventPublisher即可实现session的自动清理。 //SessionRegistryImpl使用map来维护session信息，这样在分布式系统(多个副本)中获取会话数就不准确了， // 所以这里我们可以使用基于SpringSession的SpringSessionBackedSessionRegistry，其可以绑定基于jdbc的JdbcIndexedSessionRepository或者基于redis的RedisIndexedSessionRepository // 如果使用SpringSessionBackedSessionRegistry，这里就不需要HttpSessionEventPublisher的Bean，因为这里Session管理全部交由SpringSession去管理，也就是Session的相关清理工作会自动帮助我们完成。 // RemeberMe //http.rememberMe().key(&quot;webmvc#FD637E6D9C0F1A5A67082AF56CE32485&quot;); //两周内免登录 http.rememberMe() .rememberMeParameter(&quot;_spring_security_remember_me&quot;) // 默认 remember-me .rememberMeCookieName(&quot;remember-me-cookie&quot;) //保存在浏览器端的cookie的名称，如果不设置默认也是remember-me .tokenValiditySeconds(60 * 60 * 24 * 14) // 单位秒 两周=60*60*24*14 .tokenRepository(persistentTokenRepository); //Token存储库，用于记录remember me的用户信息，默认内存，也可以配置为数据库或者redis; // 验证码过滤器 http.addFilterBefore(imageFilter, UsernamePasswordAuthenticationFilter.class); // 设置userDetailsService http.userDetailsService(userDetailsService()); return http.build(); &#125; /** * ignore的url * 如果你需要忽略URL，请考虑通过HttpSecurity.authorizeHttpRequests的permitAll来实现。 */ //@Bean //public WebSecurityCustomizer webSecurityCustomizer() &#123; // return web -&gt; web.ignoring().antMatchers(ignorings); //&#125; /** * 登录的时候需要获取用户信息，只有登录的时候使用，其余时候使用http.authorizeRequests()中配置的验证规则（验证时，用户名和权限都确定了） */ @Bean public CP_UserDetailsService userDetailsService() &#123; log.info(&quot;CP_UserDetailsService&quot;); CP_UserDetailsService userDetailsService = new CP_UserDetailsService(); return userDetailsService; &#125; /** * 认证日志 */ @Bean public org.springframework.security.authentication.event.LoggerListener loggerListener() &#123; log.info(&quot;org.springframework.security.authentication.event.LoggerListener&quot;); org.springframework.security.authentication.event.LoggerListener loggerListener = new org.springframework.security.authentication.event.LoggerListener(); return loggerListener; &#125; /** * 请求日志 */ @Bean public org.springframework.security.access.event.LoggerListener eventLoggerListener() &#123; log.info(&quot;org.springframework.security.access.event.LoggerListener&quot;); org.springframework.security.access.event.LoggerListener eventLoggerListener = new org.springframework.security.access.event.LoggerListener(); return eventLoggerListener; &#125; /** * 密码加密，在进行登录验证时会自动将页面提交的密码通过其进行加密 */ @Bean public PasswordEncoder passwordEncoder() &#123; return new BCryptPasswordEncoder(); &#125;&#125; SpringBoot-3.1.2 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215package com.hanqf.config;import com.hanqf.support.security.CP_ImageFilter;import com.hanqf.support.security.CP_RbacService;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.event.LoggerListener;import org.springframework.security.authorization.AuthorizationDecision;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.session.SessionRegistry;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.provisioning.InMemoryUserDetailsManager;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;import org.springframework.security.web.csrf.CookieCsrfTokenRepository;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;import java.util.Arrays;import java.util.List;/** * &lt;h1&gt;springboot升级到3.x.x以后的配置方法&lt;/h1&gt; */@Slf4j@Configuration@EnableMethodSecuritypublic class SpringSecurityConfig &#123; @Autowired private SessionRegistry sessionRegistry; @Autowired private PersistentTokenRepository persistentTokenRepository; @Autowired private CP_RbacService rbacService; @Autowired private CP_ImageFilter imageFilter; private static String[] ignorings = &#123;&quot;/email/**&quot;, &quot;/actuator*/**&quot;, &quot;/admin*/**&quot;, &quot;/logger**&quot;, &quot;/rabbitmq/**&quot;, &quot;/checkcode/**&quot;, &quot;/resource/**&quot;, &quot;/**/*.jsp&quot;, &quot;/access/sameLogin.do&quot;, &quot;/**/*.json*&quot;, &quot;/**/*.xml*&quot;, &quot;/druid/**&quot;, &quot;/forgotPassword.do&quot;, &quot;/forgotPasswordEmail.do&quot;, &quot;/resetPassword.do&quot; &#125;; private static List&lt;AntPathRequestMatcher&gt; ignoringsMatcherList; static &#123; ignoringsMatcherList = Arrays.stream(ignorings).map(AntPathRequestMatcher::antMatcher).toList(); &#125; /** * 获取AuthenticationManager（认证管理器），登录时认证使用 * * @param authenticationConfiguration * @return * @throws Exception */ @Bean public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception &#123; log.info(&quot;AuthenticationManager&quot;); return authenticationConfiguration.getAuthenticationManager(); &#125; @Bean SecurityFilterChain filterChain(HttpSecurity http) throws Exception &#123; log.info(&quot;HttpSecurity&quot;); //解决不允许显示在iframe的问题 http.headers(httpSecurityHeadersConfigurer -&gt; httpSecurityHeadersConfigurer .frameOptions(HeadersConfigurer.FrameOptionsConfig::disable)); // 设置拦截规则 http.authorizeHttpRequests(authorizationManagerRequestMatcherRegistry -&gt; authorizationManagerRequestMatcherRegistry .requestMatchers(ignoringsMatcherList.toArray(AntPathRequestMatcher[]::new)).permitAll() .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/login.do*&quot;)).permitAll() // 登录请求不拦截 .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/index.do*&quot;)).authenticated() .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/*.do*&quot;), AntPathRequestMatcher.antMatcher(&quot;/**/*.do*&quot;)).access((authentication, context) -&gt; new AuthorizationDecision(rbacService.hasPerssion(context.getRequest(),authentication.get())))); // 这种方式效果同上，都是开启自定义认证 // .requestMatchers(AntPathRequestMatcher.antMatcher(&quot;/*.do*&quot;),AntPathRequestMatcher.antMatcher(&quot;/**/*.do*&quot;)).access(webExpressionAuthorizationManager())); http.exceptionHandling(exceptionHandlingCustomizer -&gt; exceptionHandlingCustomizer .accessDeniedPage(&quot;/access/denied.do&quot;)); // 开启默认登录页面 http.formLogin(httpSecurityFormLoginConfigurer -&gt; httpSecurityFormLoginConfigurer .loginPage(&quot;/login.do&quot;) .failureUrl(&quot;/login.do?login_error=1&quot;) .defaultSuccessUrl(&quot;/index.do&quot;, true) .loginProcessingUrl(&quot;/j_spring_security_check&quot;) // 默认 /login .usernameParameter(&quot;j_username&quot;) // 默认username .passwordParameter(&quot;j_password&quot;) // 默认password .permitAll()); //开启csrf，默认开启，csrf不会拦截get请求 http.csrf(httpSecurityCsrfConfigurer -&gt; httpSecurityCsrfConfigurer //关闭仅支持http浏览器请求，这样ajax和postMan都可以访问，header需要带上X-CSRF-TOKEN .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) //哪些不需要csrf，非浏览器直接访问的地址需要进行屏蔽，因为csrf标签只有页面会自动生成，另外认证接口也需要屏蔽，因为需要第一次获取CSRF-TOKEN .ignoringRequestMatchers(AntPathRequestMatcher.antMatcher(&quot;/**/json.do*&quot;), AntPathRequestMatcher.antMatcher(&quot;/**/xml.do*&quot;))); // 自定义注销，这里需要注意的是，如果启用了csrf(默认就是开启)，则logout只能是post提交，如果要get提交，则必须如下配置 http.logout(httpSecurityLogoutConfigurer -&gt; httpSecurityLogoutConfigurer // 在注销时清除认证信息 .clearAuthentication(true) .logoutRequestMatcher(AntPathRequestMatcher.antMatcher(&quot;/logout.do&quot;)) //get //.logoutUrl(&quot;/logout.do&quot;) //post .logoutSuccessUrl(&quot;/login.do&quot;) // 在注销时使HttpSession失效 .invalidateHttpSession(true)); // session管理 http.sessionManagement(httpSecuritySessionManagementConfigurer -&gt; httpSecuritySessionManagementConfigurer //默认开启session .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED) //每次登录验证将创建一个新的session .sessionFixation().migrateSession() //同一个用户最大的登录数量 .maximumSessions(1) //true表示已经登录就不予许再次登录，false表示允许再次登录但是之前的登录会下线。 .maxSessionsPreventsLogin(false) //session被下线(超时)之后的显示页面 .expiredUrl(&quot;/access/sameLogin.do&quot;) .sessionRegistry(sessionRegistry)); // RemeberMe 两周内免登录 http.rememberMe(httpSecurityRememberMeConfigurer -&gt; httpSecurityRememberMeConfigurer .rememberMeParameter(&quot;_spring_security_remember_me&quot;) // 默认 remember-me .rememberMeCookieName(&quot;remember-me-cookie&quot;) //保存在浏览器端的cookie的名称，如果不设置默认也是remember-me .tokenValiditySeconds(60 * 60 * 24 * 14) .tokenRepository(persistentTokenRepository)); //设置userDetailsService http.userDetailsService(userDetailsService()); // 设置过滤器，这里是验证码过滤器 http.addFilterBefore(imageFilter, UsernamePasswordAuthenticationFilter.class); return http.build(); &#125; /** * web表达式认证管理器，支持自定义认证 */// private WebExpressionAuthorizationManager webExpressionAuthorizationManager() &#123;// final var expressionHandler = new DefaultHttpSecurityExpressionHandler();// expressionHandler.setApplicationContext(applicationContext);// final var authorizationManager = new WebExpressionAuthorizationManager(&quot;@rbacService.hasPerssion(request,authentication)&quot;);// // 一定要设置expressionHandler，否则不生效// authorizationManager.setExpressionHandler(expressionHandler);// return authorizationManager;// &#125; /** * 基于内存的userDetailsService */ @Bean public InMemoryUserDetailsManager userDetailsService() &#123; UserDetails user = User.builder() .username(&quot;user&quot;) // 123456 .password(&quot;$2a$10$JHj.XB.5RtpY60JEuTTGjuIT4m.hYT1yWoevJ6inU6Q7JE1qcvTYC&quot;) .roles(&quot;USER&quot;) .build(); UserDetails admin = User.builder() .username(&quot;admin&quot;) // 123456 .password(&quot;$2a$10$JHj.XB.5RtpY60JEuTTGjuIT4m.hYT1yWoevJ6inU6Q7JE1qcvTYC&quot;) .roles(&quot;ADMIN&quot;) .build(); return new InMemoryUserDetailsManager(user, admin); &#125; /** * 认证日志 */ @Bean public LoggerListener loggerListener() &#123; log.info(&quot;org.springframework.security.authentication.event.LoggerListener&quot;); return new LoggerListener(); &#125; /** * 密码加密策略 */ @Bean public PasswordEncoder passwordEncoder() &#123; log.info(&quot;BCryptPasswordEncoder&quot;); return new BCryptPasswordEncoder(); &#125;&#125; SessionRegistry–Session注册器 基于内存–SessionRegistryImpl 12345678910111213141516171819202122232425262728293031323334353637package com.hanqf.config;import lombok.extern.slf4j.Slf4j;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.core.session.SessionRegistry;import org.springframework.security.core.session.SessionRegistryImpl;import org.springframework.security.web.session.HttpSessionEventPublisher;/** * &lt;h1&gt;CommonSessionSpringSecurityConfig&lt;/h1&gt; */@Configuration@Slf4jpublic class CommonSessionSpringSecurityConfig &#123; /** * 用于跟踪用户的会话信息，包括已经认证的用户和它们的会话（Session）。 * 每当用户成功进行身份认证并建立了一个新的会话时，SessionRegistry将负责将该会话添加到其内部的数据结构中。 */ @Bean public SessionRegistry sessionRegistry() &#123; log.info(&quot;CommonSessionRegistry&quot;); return new SessionRegistryImpl(); &#125; /** * session事件发布者 * 如果使用SpringSessionBackedSessionRegistry，这里就不需要HttpSessionEventPublisher的Bean，而是交由SpringSession来管理 */ @Bean public HttpSessionEventPublisher httpSessionEventPublisher() &#123; return new HttpSessionEventPublisher(); &#125;&#125; 基于Spring-Session的jdbc maven依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.session&lt;/groupId&gt; &lt;artifactId&gt;spring-session-jdbc&lt;/artifactId&gt;&lt;/dependency&gt; 建表语句 建表语句可在spring-session-jdbc-[version].jar的org.springframework.session.jdbc包路径中查看 123456789101112package com.hanqf.config;import org.springframework.context.annotation.Configuration;import org.springframework.session.jdbc.config.annotation.web.http.EnableJdbcHttpSession;/** * &lt;h1&gt;jdbc-session&lt;/h1&gt; */@Configuration@EnableJdbcHttpSessionpublic class JdbcSessionConfig &#123;&#125; 12345678910111213141516171819202122232425262728package com.hanqf.config;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.AutoConfigureAfter;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.core.session.SessionRegistry;import org.springframework.session.jdbc.JdbcIndexedSessionRepository;import org.springframework.session.security.SpringSessionBackedSessionRegistry;/** * &lt;h1&gt;JdbcSessionSpringSecurityConfig&lt;/h1&gt; */@Slf4j@Configuration@AutoConfigureAfter(JdbcSessionConfig.class)public class JdbcSessionSpringSecurityConfig &#123; @Autowired private JdbcIndexedSessionRepository sessionRepository; @Bean public SessionRegistry springSessionBackedSessionRegistry() &#123; log.info(&quot;JdbcSessionRegistry&quot;); return new SpringSessionBackedSessionRegistry&lt;&gt;(sessionRepository); &#125;&#125; 基于Spring-Session的redis 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.session&lt;/groupId&gt; &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; 1234567891011package com.hanqf.config;import org.springframework.context.annotation.Configuration;import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;/** * RedisSessionConfig */@Configuration@EnableRedisHttpSessionpublic class RedisSessionConfig &#123;&#125; 1234567891011121314151617181920212223242526272829package com.hanqf.config;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.AutoConfigureAfter;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.core.session.SessionRegistry;import org.springframework.session.data.redis.RedisIndexedSessionRepository;import org.springframework.session.security.SpringSessionBackedSessionRegistry;/** * &lt;h1&gt;RedisSessionSpringSecurityConfig&lt;/h1&gt; */@Slf4j@Configuration@AutoConfigureAfter(RedisSessionConfig.class)public class RedisSessionSpringSecurityConfig &#123; @Autowired private RedisIndexedSessionRepository sessionRepository; @Bean public SessionRegistry springSessionBackedSessionRegistry() &#123; log.info(&quot;RedisSessionRegistry&quot;); return new SpringSessionBackedSessionRegistry&lt;&gt;(sessionRepository); &#125;&#125; 获取当前所有登录用户信息 1234567891011package com.hanqf.common.session;import java.util.Date;import java.util.Map;/** * &lt;h1&gt;HttpSession服务类&lt;/h1&gt; */public interface HttpSessionService &#123; Map&lt;String, Date&gt; getAllPrincipals();&#125; 基于内存–SessionRegistryImpl 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.hanqf.config;import com.hanqf.common.session.HttpSessionService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.session.SessionInformation;import org.springframework.security.core.session.SessionRegistry;import org.springframework.security.core.userdetails.User;import org.springframework.stereotype.Component;import java.util.Date;import java.util.HashMap;import java.util.Map;@Componentpublic class CommonHttpSessionService implements HttpSessionService &#123; @Autowired SessionRegistry sessionRegistry; @Override public Map&lt;String, Date&gt; getAllPrincipals() &#123; Map&lt;String, Date&gt; lastActivityDates = new HashMap&lt;&gt;(); for (Object principal : sessionRegistry.getAllPrincipals()) &#123; String username = &quot;&quot;; if (principal instanceof User) &#123; username = ((User) principal).getUsername(); &#125; // a principal may have multiple active sessions for (SessionInformation session : sessionRegistry.getAllSessions( principal, false)) &#123; // no last activity stored if (lastActivityDates.get(username) == null) &#123; lastActivityDates.put(username, session.getLastRequest()); &#125; else &#123; // check to see if this session is newer than the last // stored Date prevLastRequest = lastActivityDates.get(username); if (session.getLastRequest().after(prevLastRequest)) &#123; // update if so lastActivityDates.put(username, session.getLastRequest()); &#125; &#125; &#125; &#125; return lastActivityDates; &#125;&#125; 基于Spring-Session的jdbc 12345678910111213141516171819202122232425262728293031323334353637package com.hanqf.config;import com.hanqf.common.session.HttpSessionService;import com.hanqf.function.session.dao.SpringSessionJpaRepository;import com.hanqf.function.session.model.SpringSession;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;@Componentpublic class JdbcHttpSessionService implements HttpSessionService &#123; /** * 基于JPA的dao对象，对应表为spring_session */ @Autowired private SpringSessionJpaRepository springSessionJpaRepository; @Override public Map&lt;String, Date&gt; getAllPrincipals() &#123; Map&lt;String, Date&gt; map = new HashMap&lt;&gt;(); try &#123; final List&lt;SpringSession&gt; sessionList = springSessionJpaRepository.findSpringSessionsByExpiryTimeAfter(new Date().getTime()); for (SpringSession springSession : sessionList) &#123; map.put(springSession.getPrincipalName(), new Date(springSession.getLastAccessTime())); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return map; &#125;&#125; 基于Spring-Session的redis 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.hanqf.config;import com.fasterxml.jackson.databind.ObjectMapper;import com.hanqf.common.session.HttpSessionService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.session.data.redis.RedisIndexedSessionRepository;import org.springframework.stereotype.Component;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.Set;@Componentpublic class RedisHttpSessionService implements HttpSessionService &#123; private final String SESSION_SESSIONS = &quot;spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:&quot;; @Autowired private RedisTemplate&lt;String, Object&gt; redisTemplate; @Autowired private RedisIndexedSessionRepository sessionRepository; @Autowired private ObjectMapper objectMapper; @Override public Map&lt;String, Date&gt; getAllPrincipals() &#123; Map&lt;String, Date&gt; map = new HashMap&lt;&gt;(); final Set&lt;String&gt; keys = redisTemplate.keys(SESSION_SESSIONS + &quot;*&quot;); try &#123; for (String key : keys) &#123; String principalName = key.replace(SESSION_SESSIONS, &quot;&quot;); final Map byPrincipalName = sessionRepository.findByPrincipalName(principalName); if (byPrincipalName != null &amp;&amp; byPrincipalName.size() &gt; 0) &#123; final String json = objectMapper.writeValueAsString(byPrincipalName); final Map&lt;String, RedisSessionPojo&gt; redisSessionMap = objectMapper.readerForMapOf(RedisSessionPojo.class).readValue(json); for (String mapKey : redisSessionMap.keySet()) &#123; final RedisSessionPojo redisSession = redisSessionMap.get(mapKey); if (!redisSession.getExpired()) &#123; map.put(principalName, redisSession.getLastAccessedTime()); &#125; &#125; &#125; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return map; &#125;&#125;@Datapublic class RedisSessionPojo &#123; private String id; private Object attributeNames; private String maxInactiveInterval; private Boolean expired; private Date lastAccessedTime; private String creationTime;&#125; Remember-Me 基于内存–InMemoryTokenRepositoryImpl 12345678910111213141516171819package com.hanqf.config;import lombok.extern.slf4j.Slf4j;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.web.authentication.rememberme.InMemoryTokenRepositoryImpl;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;@Slf4j@Configurationpublic class CommonRememberMeConfig &#123; @Bean public PersistentTokenRepository persistentTokenRepository() &#123; log.info(&quot;InMemoryTokenRepositoryImpl&quot;); InMemoryTokenRepositoryImpl tokenRepository = new InMemoryTokenRepositoryImpl(); return tokenRepository; &#125;&#125; 基于jdbc 123456789101112131415161718192021222324252627282930313233343536373839package com.hanqf.config;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;import javax.sql.DataSource;@Slf4j@Configurationpublic class JdbcRememberMeConfig &#123; @Autowired private DataSource dataSource; /** * RemeberMe * 配置从数据库中获取token * * CREATE TABLE `persistent_logins` ( * `username` varchar(64) NOT NULL, * `series` varchar(64) NOT NULL, * `token` varchar(64) NOT NULL, * `last_used` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, * PRIMARY KEY (`series`) * ) ENGINE=InnoDB DEFAULT CHARSET=utf8; */ @Bean public PersistentTokenRepository persistentTokenRepository() &#123; log.info(&quot;JdbcTokenRepositoryImpl&quot;); JdbcTokenRepositoryImpl tokenRepository = new JdbcTokenRepositoryImpl(); //自动创建表，第一次运行时可是设置为true，让其自动创建表 tokenRepository.setCreateTableOnStartup(false); tokenRepository.setDataSource(dataSource); return tokenRepository; &#125;&#125; 基于redis 123456789101112131415161718192021222324252627282930package com.hanqf.config;import com.hanqf.common.RedisTokenRepositoryImpl;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.AutoConfigureAfter;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;@Slf4j@Configuration@AutoConfigureAfter(RedisConfig.class)public class RedisRememberMeConfig &#123; @Autowired private RedisTemplate&lt;String ,Object&gt; redisTemplate; /** * RemeberMe * redis，springSecurity没有提供基于redis的PersistentTokenRepository，需要我们自己创建 */ @Bean public PersistentTokenRepository persistentTokenRepository() &#123; log.info(&quot;RedisTokenRepositoryImpl&quot;); RedisTokenRepositoryImpl tokenRepository = new RedisTokenRepositoryImpl(redisTemplate); return tokenRepository; &#125;&#125; 自定义基于Redis的PersistentTokenRepository 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106package com.hanqf.common;import lombok.extern.slf4j.Slf4j;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.security.web.authentication.rememberme.PersistentRememberMeToken;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.concurrent.TimeUnit;@Slf4jpublic class RedisTokenRepositoryImpl implements PersistentTokenRepository &#123; // 默认14天：60 * 60 * 24 * 14 @Value(&quot;$&#123;rememberMe.expireTime:1209600&#125;&quot;) private Integer rememberMeExpireTime; private final String SERIES_PREFIX = &quot;spring:security:rememberMe:series:&quot;; private final String USERNAME_PREFIX = &quot;spring:security:rememberMe:username:&quot;; private RedisTemplate&lt;String, Object&gt; redisTemplate; public RedisTokenRepositoryImpl(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123; this.redisTemplate = redisTemplate; &#125; private String generateKey(String prefix, String var) &#123; return prefix + var; &#125; @Override public void createNewToken(PersistentRememberMeToken token) &#123; String key = generateKey(SERIES_PREFIX, token.getSeries()); if (Boolean.TRUE.equals(redisTemplate.persist(key))) &#123; throw new DataIntegrityViolationException(&quot;Series Id &#x27;&quot; + token.getSeries() + &quot;&#x27; already exists!&quot;); &#125; else &#123; //创建一个hashmap Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); map.put(&quot;username&quot;, token.getUsername()); map.put(&quot;tokenValue&quot;, token.getTokenValue()); map.put(&quot;date&quot;, String.valueOf(token.getDate().getTime())); map.put(&quot;series&quot;, token.getSeries()); //这里不能直接将PersistentRememberMeToken对象存入redis，因为这里使用的RedisTemplate是基于json的，要求对象必须有无参构造方法以及属性的setter和getter方法 redisTemplate.opsForValue().set(key, map); redisTemplate.expire(key, rememberMeExpireTime, TimeUnit.SECONDS); redisTemplate.opsForValue().set(generateKey(USERNAME_PREFIX, token.getUsername()), token.getSeries()); &#125; &#125; @Override public void updateToken(String series, String tokenValue, Date lastUsed) &#123; PersistentRememberMeToken token = this.getTokenForSeries(series); if (token != null) &#123; PersistentRememberMeToken newToken = new PersistentRememberMeToken(token.getUsername(), series, tokenValue, new Date()); //创建一个hashmap Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); map.put(&quot;username&quot;, newToken.getUsername()); map.put(&quot;tokenValue&quot;, newToken.getTokenValue()); map.put(&quot;date&quot;, String.valueOf(newToken.getDate().getTime())); map.put(&quot;series&quot;, newToken.getSeries()); String key = generateKey(SERIES_PREFIX, series); redisTemplate.opsForValue().set(key, map); redisTemplate.expire(key, rememberMeExpireTime, TimeUnit.SECONDS); &#125; &#125; @Override public PersistentRememberMeToken getTokenForSeries(String seriesId) &#123; Map&lt;String, String&gt; map = (Map) redisTemplate.opsForValue().get(generateKey(SERIES_PREFIX, seriesId)); if (map == null) &#123; return null; &#125; String username = map.get(&quot;username&quot;); String tokenValue = map.get(&quot;tokenValue&quot;); String date = map.get(&quot;date&quot;); if (null == username || null == tokenValue || null == date) &#123; return null; &#125; Long timestamp = Long.valueOf(date); Date time = new Date(timestamp); PersistentRememberMeToken rememberMeToken = new PersistentRememberMeToken(username, seriesId, tokenValue, time); return rememberMeToken; &#125; @Override public void removeUserTokens(String username) &#123; try &#123; //可能redis版本低于6用不了getAndDelete// String series = (String) redisTemplate.opsForValue().getAndDelete(generateKey(USERNAME_PREFIX, username)); String series = (String) redisTemplate.opsForValue().get(generateKey(USERNAME_PREFIX, username)); redisTemplate.delete(generateKey(USERNAME_PREFIX, username)); redisTemplate.delete(generateKey(SERIES_PREFIX, series)); &#125; catch (Exception e) &#123; log.error(e.getMessage()); &#125; &#125;&#125;","summary":"摘要 本文介绍在SpringBoot Security中的Session管理与RememberMe 实现了基于内存、Jdbc和Redis三种配置方式 本文基于SpringBoot-2.7.14和SpringBoot-3.1.2","date_published":"2023-08-08T14:30:05.000Z","tags":["技术","springboot","springsecurity","java"]},{"id":"https://blog.hanqunfeng.com/2023/07/19/aws-eks19-autoscaler-karpenter/","url":"https://blog.hanqunfeng.com/2023/07/19/aws-eks19-autoscaler-karpenter/","title":"AWS-EKS-19--Autoscaling 之 Karpenter","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍EKS集群Autoscaling 之 Karpenter</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"Karperter是什么？\">Karperter是什么？</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://karpenter.sh/docs/\">Karpenter</a> 是一个开源集群自动缩放器，可以自动为不可安排的pod提供新节点。Karpenter评估了挂起的pod的聚合资源需求，并选择运行它们的最佳实例类型。它将自动扩展或终止没有任何非daemonset pod的实例，以减少浪费。它还支持整合功能，该功能将积极移动pod，并用更便宜的版本删除或替换节点，以降低集群成本。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Karpenter 是aws为 k8s 构建的能用于生产环境的开源的工作节点动态调度控制器。</p>\n</li>\n<li class=\"lvl-2\">\n<p>在Karpenter推出之前，Kubernetes用户主要依靠Amazon EC2 Auto Scaling组和Kubernetes Cluster Autoscaler（CAS）来动态调整其集群的计算容量。</p>\n</li>\n<li class=\"lvl-2\">\n<p>相较于传统的 Cluster Autoscaler 工具，Karpenter 具有调度速度快、更灵活、资源利用率高等众多优势，另外，Karpenter与Kubernetes版本没有那么紧密耦合（像CAS那样），所以其是 EKS 自动扩缩容的首选方案，两者的比较可以参考下图。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特 性</th>\n<th>Cluster Autoscaler</th>\n<th>Karpenter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>资源管理</td>\n<td>Cluster Autoscaler基于现有节点的资源利用率采用反应性方法来扩展节点。</td>\n<td>Karpenter基于未调度的Pod的当前资源需求采取主动方法来进行节点预配。</td>\n</tr>\n<tr>\n<td>节点管理</td>\n<td>Cluster Autoscaler根据当前工作负载的资源需求来管理节点，使用预定义的自动缩放组。</td>\n<td>Karpenter根据自定义预配程序的配置来扩展、预配和管理节点。</td>\n</tr>\n<tr>\n<td>扩展</td>\n<td>Cluster Autoscaler更专注于节点级别的扩展，这意味着它可以有效地添加更多的节点以满足需求的增加。 但这也意味着它在缩减资源方面可能不太有效。</td>\n<td>Karpenter根据特定的工作负载需求提供更有效和精细的扩展功能。换句话说，它根据实际使用情况进行扩展。它还允许用户指定特定的扩展策略或规则以满足其需求。</td>\n</tr>\n<tr>\n<td>调度</td>\n<td>使用Cluster Autoscaler进行调度更简单，因为它是根据工作负载的当前需求设计的进行扩展或缩减。</td>\n<td>Karpenter可以根据可用区和资源需求有效地调度工作负载。它可以尝试通过Spot实例来优化成本，但它不会知道你已经在aws帐号中做的任何承诺，如RI（预留实例）或Savings Plans（储蓄计划）。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Karpenter-运行环境准备\">Karpenter 运行环境准备</h2>\n<h3 id=\"设置环境变量\">设置环境变量</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># aws认证profile</span></span><br><span class=\"line\">$ AWS_PROFILE=eks-us-west-2</span><br><span class=\"line\"><span class=\"comment\"># EKS集群名称</span></span><br><span class=\"line\">$ CLUSTER_NAME=eks-lexing</span><br><span class=\"line\"><span class=\"comment\"># AWS分区</span></span><br><span class=\"line\"><span class=\"comment\"># if you are not using standard partitions, you may need to configure to aws-cn / aws-us-gov</span></span><br><span class=\"line\">$ AWS_PARTITION=<span class=\"string\">&quot;aws&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># EKS所在的Region</span></span><br><span class=\"line\">$ AWS_REGION=<span class=\"string\">&quot;<span class=\"subst\">$(aws configure list | grep region | tr -s <span class=\"string\">&quot; &quot;</span> | cut -d<span class=\"string\">&quot; &quot;</span> -f3)</span>&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># EKS配置OIDC的Endpoint</span></span><br><span class=\"line\">$ OIDC_ENDPOINT=<span class=\"string\">&quot;<span class=\"subst\">$(aws eks describe-cluster --name $&#123;CLUSTER_NAME&#125; --query <span class=\"string\">&quot;cluster.identity.oidc.issuer&quot;</span> --output text)</span>&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># aws帐号ID</span></span><br><span class=\"line\">$ AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query <span class=\"string\">&#x27;Account&#x27;</span> --output text)</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建-Karpenter-的-node-需要的-role\">创建 Karpenter 的 node 需要的 role</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>1.创建role</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;Statement&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Effect&quot;: &quot;Allow&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Principal&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;Service&quot;: &quot;ec2.amazonaws.com&quot;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Action&quot;: &quot;sts:AssumeRole&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span> &gt; node-trust-policy.json</span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam create-role --role-name <span class=\"string\">&quot;KarpenterNodeRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --assume-role-policy-document file://node-trust-policy.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Role&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Path&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;RoleName&quot;</span>: <span class=\"string\">&quot;KarpenterNodeRole-eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;RoleId&quot;</span>: <span class=\"string\">&quot;AROA22DP3G4GH4RZQFGR7&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreateDate&quot;</span>: <span class=\"string\">&quot;2023-07-19T07:20:17+00:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;AssumeRolePolicyDocument&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Version&quot;</span>: <span class=\"string\">&quot;2012-10-17&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Statement&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Effect&quot;</span>: <span class=\"string\">&quot;Allow&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Principal&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;Service&quot;</span>: <span class=\"string\">&quot;ec2.amazonaws.com&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Action&quot;</span>: <span class=\"string\">&quot;sts:AssumeRole&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>2.给这个 role 添加 policy</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws iam attach-role-policy --role-name <span class=\"string\">&quot;KarpenterNodeRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --policy-arn arn:<span class=\"variable\">$&#123;AWS_PARTITION&#125;</span>:iam::aws:policy/AmazonEKSWorkerNodePolicy</span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam attach-role-policy --role-name <span class=\"string\">&quot;KarpenterNodeRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --policy-arn arn:<span class=\"variable\">$&#123;AWS_PARTITION&#125;</span>:iam::aws:policy/AmazonEKS_CNI_Policy</span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam attach-role-policy --role-name <span class=\"string\">&quot;KarpenterNodeRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --policy-arn arn:<span class=\"variable\">$&#123;AWS_PARTITION&#125;</span>:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly</span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam attach-role-policy --role-name <span class=\"string\">&quot;KarpenterNodeRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --policy-arn arn:<span class=\"variable\">$&#123;AWS_PARTITION&#125;</span>:iam::aws:policy/AmazonSSMManagedInstanceCore</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>3.把 role 授予 EC2 的 instance profile</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws iam create-instance-profile \\</span><br><span class=\"line\">    --instance-profile-name <span class=\"string\">&quot;KarpenterNodeInstanceProfile-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;InstanceProfile&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Path&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;InstanceProfileName&quot;</span>: <span class=\"string\">&quot;KarpenterNodeInstanceProfile-eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;InstanceProfileId&quot;</span>: <span class=\"string\">&quot;AIPA22DP3G4GBMSNSBEQF&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:instance-profile/KarpenterNodeInstanceProfile-eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreateDate&quot;</span>: <span class=\"string\">&quot;2023-07-19T07:24:19+00:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Roles&quot;</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam add-role-to-instance-profile \\</span><br><span class=\"line\">    --instance-profile-name <span class=\"string\">&quot;KarpenterNodeInstanceProfile-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --role-name <span class=\"string\">&quot;KarpenterNodeRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建-Karpenter-controller-需要的-role\">创建 Karpenter controller 需要的 role</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>1.创建role</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; controller-trust-policy.json</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;Statement&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Effect&quot;: &quot;Allow&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Principal&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;Federated&quot;: &quot;arn:$&#123;AWS_PARTITION&#125;:iam::$&#123;AWS_ACCOUNT_ID&#125;:oidc-provider/$&#123;OIDC_ENDPOINT#*//&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Condition&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;StringEquals&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;$&#123;OIDC_ENDPOINT#*//&#125;:aud&quot;: &quot;sts.amazonaws.com&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;$&#123;OIDC_ENDPOINT#*//&#125;:sub&quot;: &quot;system:serviceaccount:karpenter:karpenter&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam create-role --role-name KarpenterControllerRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --assume-role-policy-document file://controller-trust-policy.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Role&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Path&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;RoleName&quot;</span>: <span class=\"string\">&quot;KarpenterControllerRole-eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;RoleId&quot;</span>: <span class=\"string\">&quot;AROA22DP3G4GLRLLAPW6T&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:role/KarpenterControllerRole-eks-lexing&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreateDate&quot;</span>: <span class=\"string\">&quot;2023-07-19T07:28:09+00:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;AssumeRolePolicyDocument&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Version&quot;</span>: <span class=\"string\">&quot;2012-10-17&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Statement&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Effect&quot;</span>: <span class=\"string\">&quot;Allow&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Principal&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;Federated&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Action&quot;</span>: <span class=\"string\">&quot;sts:AssumeRoleWithWebIdentity&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Condition&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;StringEquals&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;</span>: <span class=\"string\">&quot;sts.amazonaws.com&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;</span>: <span class=\"string\">&quot;system:serviceaccount:karpenter:karpenter&quot;</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>2.为role配置policy</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; controller-policy.json</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;Statement&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Action&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ssm:GetParameter&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeImages&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:RunInstances&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeSubnets&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeSecurityGroups&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeLaunchTemplates&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeInstances&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeInstanceTypes&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeInstanceTypeOfferings&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeAvailabilityZones&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DeleteLaunchTemplate&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:CreateTags&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:CreateLaunchTemplate&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:CreateFleet&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;ec2:DescribeSpotPriceHistory&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;pricing:GetProducts&quot;</span></span><br><span class=\"line\"><span class=\"string\">            ],</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Effect&quot;: &quot;Allow&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Resource&quot;: &quot;*&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Sid&quot;: &quot;Karpenter&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Action&quot;: &quot;ec2:TerminateInstances&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Condition&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;StringLike&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;ec2:ResourceTag/karpenter.sh/provisioner-name&quot;: &quot;*&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Effect&quot;: &quot;Allow&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Resource&quot;: &quot;*&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Sid&quot;: &quot;ConditionalEC2Termination&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Effect&quot;: &quot;Allow&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Action&quot;: &quot;iam:PassRole&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Resource&quot;: &quot;arn:$&#123;AWS_PARTITION&#125;:iam::$&#123;AWS_ACCOUNT_ID&#125;:role/KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Sid&quot;: &quot;PassNodeIAMRole&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Effect&quot;: &quot;Allow&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Action&quot;: &quot;eks:DescribeCluster&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Resource&quot;: &quot;arn:$&#123;AWS_PARTITION&#125;:eks:$&#123;AWS_REGION&#125;:$&#123;AWS_ACCOUNT_ID&#125;:cluster/$&#123;CLUSTER_NAME&#125;&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;Sid&quot;: &quot;EKSClusterEndpointLookup&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    &quot;Version&quot;: &quot;2012-10-17&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ aws iam put-role-policy --role-name KarpenterControllerRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --policy-name KarpenterControllerPolicy-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --policy-document file://controller-policy.json</span><br></pre></td></tr></table></figure>\n<h3 id=\"为所有子网和安全组添加标签\">为所有子网和安全组添加标签</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>1.为节点组内的子网打标签</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">for</span> NODEGROUP <span class=\"keyword\">in</span> $(aws eks list-nodegroups --cluster-name <span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> --query <span class=\"string\">&#x27;nodegroups&#x27;</span> --output text)</span><br><span class=\"line\">  <span class=\"keyword\">do</span> aws ec2 create-tags \\</span><br><span class=\"line\">        --tags <span class=\"string\">&quot;Key=karpenter.sh/discovery,Value=<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">        --resources $(aws eks describe-nodegroup --cluster-name <span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">        --nodegroup-name <span class=\"variable\">$NODEGROUP</span> --query <span class=\"string\">&#x27;nodegroup.subnets&#x27;</span> --output text )</span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>2.给托管节点组的运行模版的安全组打标签</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取节点组</span></span><br><span class=\"line\">$ NODEGROUP=$(aws eks list-nodegroups --cluster-name <span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --query <span class=\"string\">&#x27;nodegroups[0]&#x27;</span> --output text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取节点组的启动模板及其版本号</span></span><br><span class=\"line\">$ LAUNCH_TEMPLATE=$(aws eks describe-nodegroup --cluster-name <span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --nodegroup-name <span class=\"variable\">$&#123;NODEGROUP&#125;</span> --query <span class=\"string\">&#x27;nodegroup.launchTemplate.&#123;id:id,version:version&#125;&#x27;</span> \\</span><br><span class=\"line\">    --output text | <span class=\"built_in\">tr</span> -s <span class=\"string\">&quot;\\t&quot;</span> <span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取启动模板的安全组</span></span><br><span class=\"line\">$ SECURITY_GROUPS=$(aws ec2 describe-launch-template-versions \\</span><br><span class=\"line\">    --launch-template-id <span class=\"variable\">$&#123;LAUNCH_TEMPLATE%,*&#125;</span> --versions <span class=\"variable\">$&#123;LAUNCH_TEMPLATE#*,&#125;</span> \\</span><br><span class=\"line\">    --query <span class=\"string\">&#x27;LaunchTemplateVersions[0].LaunchTemplateData.[NetworkInterfaces[0].Groups||SecurityGroupIds]&#x27;</span> \\</span><br><span class=\"line\">    --output text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为安全组打标签</span></span><br><span class=\"line\">$ aws ec2 create-tags \\</span><br><span class=\"line\">    --tags <span class=\"string\">&quot;Key=karpenter.sh/discovery,Value=<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --resources <span class=\"variable\">$&#123;SECURITY_GROUPS&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"更新-aws-auth-ConfigMap\">更新 aws-auth ConfigMap</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将上面为node创建的role加入到集群权限</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl edit configmap aws-auth -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 mapRoles 下添加如下内容</span></span><br><span class=\"line\">- <span class=\"built_in\">groups</span>:</span><br><span class=\"line\">  - system:bootstrappers</span><br><span class=\"line\">  - system:nodes</span><br><span class=\"line\">  rolearn: arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing</span><br><span class=\"line\">  username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者通过命令行直接添加</span></span><br><span class=\"line\">$ eksctl create iamidentitymapping --cluster eks-lexing \\</span><br><span class=\"line\">  --arn arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing \\</span><br><span class=\"line\">  --username system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; \\</span><br><span class=\"line\">  --group system:bootstrappers \\</span><br><span class=\"line\">  --group system:nodes \\</span><br><span class=\"line\">  --no-duplicate-arns</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>编辑后完整的内容如下:</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">mapRoles:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    - groups:</span></span><br><span class=\"line\"><span class=\"string\">      - system:bootstrappers</span></span><br><span class=\"line\"><span class=\"string\">      - system:nodes</span></span><br><span class=\"line\"><span class=\"string\">      rolearn: arn:aws:iam::743263909644:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y28EPJO9XYDG</span></span><br><span class=\"line\"><span class=\"string\">      username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    - groups:</span></span><br><span class=\"line\"><span class=\"string\">      - system:bootstrappers</span></span><br><span class=\"line\"><span class=\"string\">      - system:nodes</span></span><br><span class=\"line\"><span class=\"string\">      rolearn: arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing</span></span><br><span class=\"line\"><span class=\"string\">      username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span>  <span class=\"attr\">mapUsers:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    - groups:</span></span><br><span class=\"line\"><span class=\"string\">      - eks-console-dashboard-full-access-group</span></span><br><span class=\"line\"><span class=\"string\">      userarn: arn:aws:iam::743263909644:user/ekstest</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"string\">&quot;2023-06-28T06:30:56Z&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">aws-auth</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">resourceVersion:</span> <span class=\"string\">&quot;7544319&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">uid:</span> <span class=\"string\">5e488d60-6ce0-4657-9a08-bbd17d048f0c</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看授权信息</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ eksctl get iamidentitymapping --cluster eks-lexing</span><br><span class=\"line\">ARN\t\t\t\t\t\t\t\t\t\t\t\tUSERNAME\t\t\t\tGROUPS\t\t\t\t\tACCOUNT</span><br><span class=\"line\">arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing\t\t\t\t\tsystem:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;\tsystem:bootstrappers,system:nodes</span><br><span class=\"line\">arn:aws:iam::743263909644:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y28EPJO9XYDG\tsystem:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;\tsystem:bootstrappers,system:nodes</span><br><span class=\"line\">arn:aws:iam::743263909644:user/ekstest\t\t\t\t\t\t\t\t\t\t\t\t\teks-console-dashboard-full-access-group</span><br></pre></td></tr></table></figure>\n<h2 id=\"部署-Karpenter\">部署 Karpenter</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>1.设置环境变量</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前最新版是 v0.29.1 , https://github.com/aws/karpenter/releases</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KARPENTER_VERSION=v0.29.1</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>2.创建 karpenter.yaml 模版</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm template karpenter oci://public.ecr.aws/karpenter/karpenter --version <span class=\"variable\">$&#123;KARPENTER_VERSION&#125;</span> \\</span><br><span class=\"line\">    --namespace karpenter \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> settings.aws.defaultInstanceProfile=KarpenterNodeInstanceProfile-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> settings.aws.clusterName=<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> serviceAccount.annotations.<span class=\"string\">&quot;eks\\.amazonaws\\.com/role-arn&quot;</span>=<span class=\"string\">&quot;arn:<span class=\"variable\">$&#123;AWS_PARTITION&#125;</span>:iam::<span class=\"variable\">$&#123;AWS_ACCOUNT_ID&#125;</span>:role/KarpenterControllerRole-<span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span>&quot;</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> controller.resources.requests.cpu=1 \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> controller.resources.requests.memory=1Gi \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> controller.resources.limits.cpu=1 \\</span><br><span class=\"line\">    --<span class=\"built_in\">set</span> controller.resources.limits.memory=1Gi &gt; karpenter.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>3.设置节点亲和性，编辑<code>karpenter.yaml</code>，找到karpenter deployment的亲和性配置，修改为如下内容，注意这里<code>ng-4d9024eb</code>要替换为你的<code>$&#123;NODEGROUP&#125;</code>。关节K8s<code>节点亲和性</code>的介绍可以参考官方文档<a href=\"https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\">亲和性与反亲和性</a></p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">affinity:</span></span><br><span class=\"line\">  <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">    <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">karpenter.sh/provisioner-name</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">DoesNotExist</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">eks.amazonaws.com/nodegroup</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">ng-4d9024eb</span></span><br><span class=\"line\">  <span class=\"attr\">podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">topologyKey:</span> <span class=\"string\">&quot;kubernetes.io/hostname&quot;</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>为其他关键集群工作负载设置nodeAffinity</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">例如 CoreDNS，Controller，CNI，CSI 和 Operator 等，这些 workload 对弹性要求不高但是稳定性要求比较高，建议部署在创建EKS时的节点组运行。</li>\n<li class=\"lvl-2\">为这些关键负载设置nodeAffinity</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">affinity:</span></span><br><span class=\"line\">  <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">    <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">eks.amazonaws.com/nodegroup</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">$&#123;NODEGROUP&#125;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">比如设置<code>k edit deploy ebs-csi-controller -n kube-system</code>，添加好<code>nodeAffinity</code>后保存，然后查看对应的pod是否重启成功，如果一只处于<code>pending</code>状态，可以试着重启</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k scale deploy ebs-csi-controller --replicas 0 -n kube-system</span><br><span class=\"line\">$ k scale deploy ebs-csi-controller --replicas 2 -n kube-system</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">设置好所有关键负载后，可以重启一下 karpenter</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k scale deploy karpenter --replicas 0 -n karpenter</span><br><span class=\"line\">$ k scale deploy karpenter --replicas 2 -n karpenter</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>查看 karpenter 日志是否正常</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k logs deployments/karpenter -f -n karpenter</span><br></pre></td></tr></table></figure>\n</div>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>4.部署 karpenter 及其 相关资源</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Namespace</span></span><br><span class=\"line\">$ kubectl create namespace karpenter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载karpenter 相关资源</span></span><br><span class=\"line\"><span class=\"comment\"># karpenter的版本分支，正常karpenter发布时都会打branch，比如：release-v0.28.1，不过我在github上没有找到v0.29.1的branch，所以这里就指定 main 了</span></span><br><span class=\"line\">$ KARPENTER_BRANCH=main</span><br><span class=\"line\">$ curl -O <span class=\"string\">&quot;https://raw.githubusercontent.com/aws/karpenter/<span class=\"variable\">$&#123;KARPENTER_BRANCH&#125;</span>/pkg/apis/crds/karpenter.sh_provisioners.yaml&quot;</span></span><br><span class=\"line\">$ curl -O <span class=\"string\">&quot;https://raw.githubusercontent.com/aws/karpenter/<span class=\"variable\">$&#123;KARPENTER_BRANCH&#125;</span>/pkg/apis/crds/karpenter.k8s.aws_awsnodetemplates.yaml&quot;</span></span><br><span class=\"line\">$ curl -O <span class=\"string\">&quot;https://raw.githubusercontent.com/aws/karpenter/<span class=\"variable\">$&#123;KARPENTER_BRANCH&#125;</span>/pkg/apis/crds/karpenter.sh_machines.yaml &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署karpenter 相关资源</span></span><br><span class=\"line\">$ kubectl apply -f karpenter.sh_provisioners.yaml</span><br><span class=\"line\">$ kubectl apply -f karpenter.k8s.aws_awsnodetemplates.yaml</span><br><span class=\"line\">$ kubectl apply -f karpenter.sh_machines.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署karpenter</span></span><br><span class=\"line\">$ k apply -f karpenter.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>5.创建默认的供应者(provisioner)</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://karpenter.sh/docs/concepts/provisioners/\">Provisioner</a>与<a href=\"https://karpenter.sh/docs/concepts/node-templates/\">AWSNodeTemplate</a>是karpenter在K8s中的自定义资源。</li>\n<li class=\"lvl-6\"><code>Provisioner</code> 对 Karpenter 可创建的节点以及可在这些节点上运行的 Pod 设置约束。如果没有配置至少一个<code>Provisioner</code>，Karpenter 将不会执行任何操作。</li>\n<li class=\"lvl-6\">关于<code>Provisioner</code>支持的配置项可以参考<a href=\"https://karpenter.sh/docs/concepts/provisioners/\">官方文档</a>，比如下面就限制了被管控的节点必须符合两个条件：</li>\n</ul>\n<blockquote>\n<p>1.实例类别必须在[c, m, r]中<br>\n2.实例的生成代次必须大于2。比如 实例类型为 <code>c1.xxx，m1.xxx，m2.xxx</code>就不符合要求</p>\n</blockquote>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><code>AWSNodeTemplate</code>节点模板启用AWS特定设置的配置。关于<code>AWSNodeTemplate</code>支持的配置项可以参考<a href=\"https://karpenter.sh/docs/concepts/node-templates/\">官方文档</a>，比如默认节点关联的存储为20G gp3，如果要修改为40G可以在spec下指定如下内容，先创建后编辑也可以，但只有修改后新创建的节点才会使用新的配置。</li>\n</ul>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">blockDeviceMappings:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">deviceName:</span> <span class=\"string\">/dev/xvda</span></span><br><span class=\"line\">  <span class=\"attr\">ebs:</span></span><br><span class=\"line\">    <span class=\"attr\">volumeType:</span> <span class=\"string\">gp3</span></span><br><span class=\"line\">    <span class=\"attr\">volumeSize:</span> <span class=\"string\">40Gi</span></span><br><span class=\"line\">    <span class=\"attr\">deleteOnTermination:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">\n<p><code>Provisioner</code>需要与<code>AWSNodeTemplate</code>关联使用，通过在<code>Provisioner</code>的<code>providerRef</code>中指定<code>AWSNodeTemplate</code>的<code>name</code>进行关联，一个<code>AWSNodeTemplate</code>可以被多个<code>Provisioner</code>关联。</p>\n</li>\n<li class=\"lvl-6\">\n<p>配置的每个 <code>Provisioner</code> 均由 Karpenter 循环遍历。在 <code>Provisioner</code> 中定义污点以限制可以在 Karpenter 创建的节点上运行的 Pod。建议创建互斥的 <code>Provisioner</code>。因此任何 Pod 都不应该匹配多个 <code>Provisioner</code>。如果匹配多个<code>Provisioner</code>，Karpenter将使用权重最高的<code>Provisioner</code> 。关于K8s中<code>污点</code>的介绍可以参考官方文档<a href=\"https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/taint-and-toleration/\">污点和容忍度</a></p>\n</li>\n<li class=\"lvl-6\">\n<p>下面是一个最基本的<code>Provisioner</code>定义，你可以根据需要创建自己的<code>Provisioner</code>，可以参考<a href=\"https://karpenter.sh/docs/concepts/provisioners/\">官方文档</a>或者查看<a href=\"https://github.com/aws/karpenter/tree/v0.29.1/examples/provisioner\">provisioner examples</a>中的示例。</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 default Provisioner</span></span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF | kubectl apply -f -</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: karpenter.sh/v1alpha5</span></span><br><span class=\"line\"><span class=\"string\">kind: Provisioner</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  name: default</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  requirements:</span></span><br><span class=\"line\"><span class=\"string\">    - key: karpenter.k8s.aws/instance-category</span></span><br><span class=\"line\"><span class=\"string\">      operator: In</span></span><br><span class=\"line\"><span class=\"string\">      values: [c, m, r]</span></span><br><span class=\"line\"><span class=\"string\">    - key: karpenter.k8s.aws/instance-generation</span></span><br><span class=\"line\"><span class=\"string\">      operator: Gt</span></span><br><span class=\"line\"><span class=\"string\">      values: [&quot;2&quot;]</span></span><br><span class=\"line\"><span class=\"string\">  providerRef:</span></span><br><span class=\"line\"><span class=\"string\">    name: default</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: karpenter.k8s.aws/v1alpha1</span></span><br><span class=\"line\"><span class=\"string\">kind: AWSNodeTemplate</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  name: default</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  subnetSelector:</span></span><br><span class=\"line\"><span class=\"string\">    karpenter.sh/discovery: &quot;$&#123;CLUSTER_NAME&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">  securityGroupSelector:</span></span><br><span class=\"line\"><span class=\"string\">    karpenter.sh/discovery: &quot;$&#123;CLUSTER_NAME&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看 karpenter 状态</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get pod -n karpenter</span><br><span class=\"line\">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">karpenter-789bbcbfd7-htj6z   1/1     Running   0          101s</span><br><span class=\"line\">karpenter-789bbcbfd7-rlxfp   1/1     Running   0          101s</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看 karpenter 日志是否正常</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k logs deployments/karpenter -f -n karpenter</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>karpenter创建新的节点时不会在原有的节点组中进行，所以为了摆脱从节点组添加的实例，我们可以将节点组缩小到最小大小</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果您有一个多AZ节点组，我们建议至少2个实例。</span></span><br><span class=\"line\">$ aws eks update-nodegroup-config --cluster-name <span class=\"variable\">$&#123;CLUSTER_NAME&#125;</span> \\</span><br><span class=\"line\">    --nodegroup-name <span class=\"variable\">$&#123;NODEGROUP&#125;</span> \\</span><br><span class=\"line\">    --scaling-config <span class=\"string\">&quot;minSize=2,maxSize=2,desiredSize=2&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>关停Cluster Autoscaler(CAS)<br>\n如果EKS中已经开启了CAS，则安装Karpenter后需要关闭CAS</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl scale deploy/cluster-autoscaler -n kube-system --replicas=0</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\">测试</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看当前node信息</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   19d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   19d   v1.26.4-eks-0a21954</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>采用 <a href=\"/2023/07/18/aws-eks18-autoscaler-cas/\" title=\"AWS-EKS-18--Autoscaling 之 Cluster Autoscaler(CAS)\">AWS-EKS-18--Autoscaling 之 Cluster Autoscaler(CAS)</a> 中的测试方法，将deploy的副本数设置为50，过一会查看node情况</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以看到node数量已经变为3了，说明扩容成功</span></span><br><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   19d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-34-126.us-west-2.compute.internal   Ready    &lt;none&gt;   47s   v1.26.6-eks-a5565ad</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   19d   v1.26.4-eks-0a21954</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/Rx3wJO.png\" alt=\"\" width=\"1000\" height=\"800\"></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>缩容测试用的deploy，副本数设置为1，过一会发现node节点并没有被终止，这是为什么呢？</p>\n</li>\n</ul>\n<blockquote>\n<p>默认情况下，Karpenter不会主动终止节点，需要为其设置终止节点的方式，参考<a href=\"https://karpenter.sh/docs/concepts/deprovisioning/\">Karpenter官方文档Deprovisioning部分</a></p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在<code>Provisioner</code>中设置节点终止的方式</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><code>spec.ttlSecondsAfterEmpty</code>: 当最后一个工作负载（非守护程序集）pod停止在节点上运行时，Karpenter会注意到。从那时起，Karpenter在提供程序中等待<code>ttlSecondsAfterEmpty</code>设置的秒数，然后Karpenter请求删除节点。此功能可以通过删除不再用于工作负载的节点来降低成本。</li>\n<li class=\"lvl-6\"><code>spec.ttlSecondsUntilExpired</code>: Karpenter 将根据<code>Provisioner</code>的<code>ttlSecondsUntilExpired</code>值将节点注释为过期，并在节点生存了设定秒数后取消配置节点。节点过期的一种用例是定期回收节点。</li>\n<li class=\"lvl-6\"><code>spec.consolidation.enabled</code>: 实现整合，通过删除不需要的节点和缩减无法删除的节点的规模来降低集群成本。与<code>ttlSecondsAfterEmpty</code>参数互斥。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 default provisioner，并为其指定 spec.ttlSecondsAfterEmpty: 30，表示空闲超过30秒则终止节点。</span></span><br><span class=\"line\">$ k edit provisioners.karpenter.sh default</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">karpenter.sh/v1alpha5</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Provisioner</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubectl.kubernetes.io/last-applied-configuration:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&quot;apiVersion&quot;:&quot;karpenter.sh/v1alpha5&quot;,&quot;kind&quot;:&quot;Provisioner&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;</span></span><br><span class=\"line\"><span class=\"string\"></span>  <span class=\"attr\">creationTimestamp:</span> <span class=\"string\">&quot;2023-07-19T09:49:43Z&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">generation:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">resourceVersion:</span> <span class=\"string\">&quot;7987578&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">uid:</span> <span class=\"string\">5716142b-2b9f-493c-a049-e4304cdf82d4</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">providerRef:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">requirements:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">karpenter.k8s.aws/instance-category</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">    <span class=\"attr\">values:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">c</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">m</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">r</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">karpenter.k8s.aws/instance-generation</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">Gt</span></span><br><span class=\"line\">    <span class=\"attr\">values:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">kubernetes.io/os</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">    <span class=\"attr\">values:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">linux</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">kubernetes.io/arch</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">    <span class=\"attr\">values:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">amd64</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">karpenter.sh/capacity-type</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">    <span class=\"attr\">values:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">on-demand</span></span><br><span class=\"line\">  <span class=\"attr\">ttlSecondsAfterEmpty:</span> <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attr\">status:</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ephemeral-storage:</span> <span class=\"string\">20959212Ki</span></span><br><span class=\"line\">    <span class=\"attr\">memory:</span> <span class=\"string\">3900360Ki</span></span><br><span class=\"line\">    <span class=\"attr\">pods:</span> <span class=\"string\">&quot;29&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>等待30秒后查看node情况，新创建的node已经成功终止</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   19d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   19d   v1.26.4-eks-0a21954</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建和终止节点的过程可以通过日志进行观察</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k logs deployments/karpenter -f -n karpenter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下创建节点的日志</span></span><br><span class=\"line\">2023-07-20T09:03:54.763Z\tINFO\tcontroller.provisioner\tfound provisionable pod(s)\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;pods&quot;</span>: 17&#125;</span><br><span class=\"line\">2023-07-20T09:03:54.763Z\tINFO\tcontroller.provisioner\tcomputed new machine(s) to fit pod(s)\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machines&quot;</span>: 1, <span class=\"string\">&quot;pods&quot;</span>: 17&#125;</span><br><span class=\"line\">2023-07-20T09:03:54.788Z\tINFO\tcontroller.provisioner\tcreated machine\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;requests&quot;</span>: &#123;<span class=\"string\">&quot;cpu&quot;</span>:<span class=\"string\">&quot;155m&quot;</span>,<span class=\"string\">&quot;memory&quot;</span>:<span class=\"string\">&quot;120Mi&quot;</span>,<span class=\"string\">&quot;pods&quot;</span>:<span class=\"string\">&quot;21&quot;</span>&#125;, <span class=\"string\">&quot;instance-types&quot;</span>: <span class=\"string\">&quot;c3.2xlarge, c3.large, c3.xlarge, c4.2xlarge, c4.large and 95 other(s)&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:03:54.978Z\tDEBUG\tcontroller.machine.lifecycle\tcreated launch template\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;launch-template-name&quot;</span>: <span class=\"string\">&quot;karpenter.k8s.aws/2892028901667059566&quot;</span>, <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;lt-0ef53ab2c4909f493&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:03:55.108Z\tDEBUG\tcontroller.machine.lifecycle\tcreated launch template\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;launch-template-name&quot;</span>: <span class=\"string\">&quot;karpenter.k8s.aws/1810058814439854165&quot;</span>, <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;lt-02cda7252a2d29e16&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:03:57.095Z\tINFO\tcontroller.machine.lifecycle\tlaunched machine\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;provider-id&quot;</span>: <span class=\"string\">&quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;</span>, <span class=\"string\">&quot;instance-type&quot;</span>: <span class=\"string\">&quot;c6a.large&quot;</span>, <span class=\"string\">&quot;zone&quot;</span>: <span class=\"string\">&quot;us-west-2d&quot;</span>, <span class=\"string\">&quot;capacity-type&quot;</span>: <span class=\"string\">&quot;on-demand&quot;</span>, <span class=\"string\">&quot;allocatable&quot;</span>: &#123;<span class=\"string\">&quot;cpu&quot;</span>:<span class=\"string\">&quot;1930m&quot;</span>,<span class=\"string\">&quot;ephemeral-storage&quot;</span>:<span class=\"string\">&quot;17Gi&quot;</span>,<span class=\"string\">&quot;memory&quot;</span>:<span class=\"string\">&quot;3114Mi&quot;</span>,<span class=\"string\">&quot;pods&quot;</span>:<span class=\"string\">&quot;29&quot;</span>&#125;&#125;</span><br><span class=\"line\">2023-07-20T09:04:14.473Z\tDEBUG\tcontroller.machine.lifecycle\tregistered machine\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;provider-id&quot;</span>: <span class=\"string\">&quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;</span>, <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;ip-192-168-79-236.us-west-2.compute.internal&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:04:28.620Z\tDEBUG\tcontroller.machine.lifecycle\tinitialized machine&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;provider-id&quot;</span>: <span class=\"string\">&quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;</span>, <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;ip-192-168-79-236.us-west-2.compute.internal&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下是终止节点的日志</span></span><br><span class=\"line\">2023-07-20T09:05:46.420Z\tDEBUG\tcontroller.machine.disruption\tmarking machine as empty\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:06:20.642Z\tINFO\tcontroller.deprovisioning\tdeprovisioning via emptiness delete, terminating 1 machines ip-192-168-79-236.us-west-2.compute.internal/c6a.large/on-demand\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:06:20.699Z\tINFO\tcontroller.termination\tcordoned node\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;ip-192-168-79-236.us-west-2.compute.internal&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:06:21.026Z\tINFO\tcontroller.termination\tdeleted node\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;ip-192-168-79-236.us-west-2.compute.internal&quot;</span>&#125;</span><br><span class=\"line\">2023-07-20T09:06:21.288Z\tINFO\tcontroller.machine.termination\tdeleted machine\t&#123;<span class=\"string\">&quot;commit&quot;</span>: <span class=\"string\">&quot;5b469b8-dirty&quot;</span>, <span class=\"string\">&quot;machine&quot;</span>: <span class=\"string\">&quot;default-c6jkx&quot;</span>, <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;ip-192-168-79-236.us-west-2.compute.internal&quot;</span>, <span class=\"string\">&quot;provisioner&quot;</span>: <span class=\"string\">&quot;default&quot;</span>, <span class=\"string\">&quot;provider-id&quot;</span>: <span class=\"string\">&quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em><br>\n当Karpenter管理的Node节点由于某种原因不可用时(比如我们在AWS控制台终止了EC2或通过命令行删除节点<code>k delete node nodeName</code>)，Karpenter会立刻为我们创建一个新的Node节点，并在其上重启Pod。</p>\n</div>\n<h2 id=\"参考资料\">参考资料</h2>\n<p><a href=\"https://karpenter.sh/docs/getting-started/migrating-from-cas/\">从Cluster Autoscaler迁移</a><br>\n<a href=\"https://aws.amazon.com/cn/blogs/china/migration-of-cluster-autoscaler-to-karpenter-on-eks/\">EKS Cluster Autoscaler 迁移 Karpenter 实践</a><br>\n<a href=\"https://aws.github.io/aws-eks-best-practices/karpenter/\">Karpenter Best Practices</a></p>\n","content_text":"摘要 本文介绍EKS集群Autoscaling 之 Karpenter 参考资料： Amazon EKS用户指南 Kubernetes 文档 Karperter是什么？ Karpenter 是一个开源集群自动缩放器，可以自动为不可安排的pod提供新节点。Karpenter评估了挂起的pod的聚合资源需求，并选择运行它们的最佳实例类型。它将自动扩展或终止没有任何非daemonset pod的实例，以减少浪费。它还支持整合功能，该功能将积极移动pod，并用更便宜的版本删除或替换节点，以降低集群成本。 Karpenter 是aws为 k8s 构建的能用于生产环境的开源的工作节点动态调度控制器。 在Karpenter推出之前，Kubernetes用户主要依靠Amazon EC2 Auto Scaling组和Kubernetes Cluster Autoscaler（CAS）来动态调整其集群的计算容量。 相较于传统的 Cluster Autoscaler 工具，Karpenter 具有调度速度快、更灵活、资源利用率高等众多优势，另外，Karpenter与Kubernetes版本没有那么紧密耦合（像CAS那样），所以其是 EKS 自动扩缩容的首选方案，两者的比较可以参考下图。 特 性 Cluster Autoscaler Karpenter 资源管理 Cluster Autoscaler基于现有节点的资源利用率采用反应性方法来扩展节点。 Karpenter基于未调度的Pod的当前资源需求采取主动方法来进行节点预配。 节点管理 Cluster Autoscaler根据当前工作负载的资源需求来管理节点，使用预定义的自动缩放组。 Karpenter根据自定义预配程序的配置来扩展、预配和管理节点。 扩展 Cluster Autoscaler更专注于节点级别的扩展，这意味着它可以有效地添加更多的节点以满足需求的增加。 但这也意味着它在缩减资源方面可能不太有效。 Karpenter根据特定的工作负载需求提供更有效和精细的扩展功能。换句话说，它根据实际使用情况进行扩展。它还允许用户指定特定的扩展策略或规则以满足其需求。 调度 使用Cluster Autoscaler进行调度更简单，因为它是根据工作负载的当前需求设计的进行扩展或缩减。 Karpenter可以根据可用区和资源需求有效地调度工作负载。它可以尝试通过Spot实例来优化成本，但它不会知道你已经在aws帐号中做的任何承诺，如RI（预留实例）或Savings Plans（储蓄计划）。 Karpenter 运行环境准备 设置环境变量 12345678910111213# aws认证profile$ AWS_PROFILE=eks-us-west-2# EKS集群名称$ CLUSTER_NAME=eks-lexing# AWS分区# if you are not using standard partitions, you may need to configure to aws-cn / aws-us-gov$ AWS_PARTITION=&quot;aws&quot;# EKS所在的Region$ AWS_REGION=&quot;$(aws configure list | grep region | tr -s &quot; &quot; | cut -d&quot; &quot; -f3)&quot;# EKS配置OIDC的Endpoint$ OIDC_ENDPOINT=&quot;$(aws eks describe-cluster --name $&#123;CLUSTER_NAME&#125; --query &quot;cluster.identity.oidc.issuer&quot; --output text)&quot;# aws帐号ID$ AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query &#x27;Account&#x27; --output text) 创建 Karpenter 的 node 需要的 role 1.创建role 123456789101112131415161718192021222324252627282930313233343536$ echo &#x27;&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Service&quot;: &quot;ec2.amazonaws.com&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRole&quot; &#125; ]&#125;&#x27; &gt; node-trust-policy.json$ aws iam create-role --role-name &quot;KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot; \\ --assume-role-policy-document file://node-trust-policy.json&#123; &quot;Role&quot;: &#123; &quot;Path&quot;: &quot;/&quot;, &quot;RoleName&quot;: &quot;KarpenterNodeRole-eks-lexing&quot;, &quot;RoleId&quot;: &quot;AROA22DP3G4GH4RZQFGR7&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing&quot;, &quot;CreateDate&quot;: &quot;2023-07-19T07:20:17+00:00&quot;, &quot;AssumeRolePolicyDocument&quot;: &#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Service&quot;: &quot;ec2.amazonaws.com&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRole&quot; &#125; ] &#125; &#125;&#125; 2.给这个 role 添加 policy 1234567891011$ aws iam attach-role-policy --role-name &quot;KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot; \\ --policy-arn arn:$&#123;AWS_PARTITION&#125;:iam::aws:policy/AmazonEKSWorkerNodePolicy$ aws iam attach-role-policy --role-name &quot;KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot; \\ --policy-arn arn:$&#123;AWS_PARTITION&#125;:iam::aws:policy/AmazonEKS_CNI_Policy$ aws iam attach-role-policy --role-name &quot;KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot; \\ --policy-arn arn:$&#123;AWS_PARTITION&#125;:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly$ aws iam attach-role-policy --role-name &quot;KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot; \\ --policy-arn arn:$&#123;AWS_PARTITION&#125;:iam::aws:policy/AmazonSSMManagedInstanceCore 3.把 role 授予 EC2 的 instance profile 12345678910111213141516$ aws iam create-instance-profile \\ --instance-profile-name &quot;KarpenterNodeInstanceProfile-$&#123;CLUSTER_NAME&#125;&quot;&#123; &quot;InstanceProfile&quot;: &#123; &quot;Path&quot;: &quot;/&quot;, &quot;InstanceProfileName&quot;: &quot;KarpenterNodeInstanceProfile-eks-lexing&quot;, &quot;InstanceProfileId&quot;: &quot;AIPA22DP3G4GBMSNSBEQF&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909644:instance-profile/KarpenterNodeInstanceProfile-eks-lexing&quot;, &quot;CreateDate&quot;: &quot;2023-07-19T07:24:19+00:00&quot;, &quot;Roles&quot;: [] &#125;&#125;$ aws iam add-role-to-instance-profile \\ --instance-profile-name &quot;KarpenterNodeInstanceProfile-$&#123;CLUSTER_NAME&#125;&quot; \\ --role-name &quot;KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot; 创建 Karpenter controller 需要的 role 1.创建role 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950$ cat &lt;&lt; EOF &gt; controller-trust-policy.json&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Federated&quot;: &quot;arn:$&#123;AWS_PARTITION&#125;:iam::$&#123;AWS_ACCOUNT_ID&#125;:oidc-provider/$&#123;OIDC_ENDPOINT#*//&#125;&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;, &quot;Condition&quot;: &#123; &quot;StringEquals&quot;: &#123; &quot;$&#123;OIDC_ENDPOINT#*//&#125;:aud&quot;: &quot;sts.amazonaws.com&quot;, &quot;$&#123;OIDC_ENDPOINT#*//&#125;:sub&quot;: &quot;system:serviceaccount:karpenter:karpenter&quot; &#125; &#125; &#125; ]&#125;EOF$ aws iam create-role --role-name KarpenterControllerRole-$&#123;CLUSTER_NAME&#125; \\ --assume-role-policy-document file://controller-trust-policy.json&#123; &quot;Role&quot;: &#123; &quot;Path&quot;: &quot;/&quot;, &quot;RoleName&quot;: &quot;KarpenterControllerRole-eks-lexing&quot;, &quot;RoleId&quot;: &quot;AROA22DP3G4GLRLLAPW6T&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909644:role/KarpenterControllerRole-eks-lexing&quot;, &quot;CreateDate&quot;: &quot;2023-07-19T07:28:09+00:00&quot;, &quot;AssumeRolePolicyDocument&quot;: &#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Federated&quot;: &quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;, &quot;Condition&quot;: &#123; &quot;StringEquals&quot;: &#123; &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;: &quot;sts.amazonaws.com&quot;, &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;: &quot;system:serviceaccount:karpenter:karpenter&quot; &#125; &#125; &#125; ] &#125; &#125;&#125; 2.为role配置policy 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657$ cat &lt;&lt; EOF &gt; controller-policy.json&#123; &quot;Statement&quot;: [ &#123; &quot;Action&quot;: [ &quot;ssm:GetParameter&quot;, &quot;ec2:DescribeImages&quot;, &quot;ec2:RunInstances&quot;, &quot;ec2:DescribeSubnets&quot;, &quot;ec2:DescribeSecurityGroups&quot;, &quot;ec2:DescribeLaunchTemplates&quot;, &quot;ec2:DescribeInstances&quot;, &quot;ec2:DescribeInstanceTypes&quot;, &quot;ec2:DescribeInstanceTypeOfferings&quot;, &quot;ec2:DescribeAvailabilityZones&quot;, &quot;ec2:DeleteLaunchTemplate&quot;, &quot;ec2:CreateTags&quot;, &quot;ec2:CreateLaunchTemplate&quot;, &quot;ec2:CreateFleet&quot;, &quot;ec2:DescribeSpotPriceHistory&quot;, &quot;pricing:GetProducts&quot; ], &quot;Effect&quot;: &quot;Allow&quot;, &quot;Resource&quot;: &quot;*&quot;, &quot;Sid&quot;: &quot;Karpenter&quot; &#125;, &#123; &quot;Action&quot;: &quot;ec2:TerminateInstances&quot;, &quot;Condition&quot;: &#123; &quot;StringLike&quot;: &#123; &quot;ec2:ResourceTag/karpenter.sh/provisioner-name&quot;: &quot;*&quot; &#125; &#125;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Resource&quot;: &quot;*&quot;, &quot;Sid&quot;: &quot;ConditionalEC2Termination&quot; &#125;, &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: &quot;iam:PassRole&quot;, &quot;Resource&quot;: &quot;arn:$&#123;AWS_PARTITION&#125;:iam::$&#123;AWS_ACCOUNT_ID&#125;:role/KarpenterNodeRole-$&#123;CLUSTER_NAME&#125;&quot;, &quot;Sid&quot;: &quot;PassNodeIAMRole&quot; &#125;, &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: &quot;eks:DescribeCluster&quot;, &quot;Resource&quot;: &quot;arn:$&#123;AWS_PARTITION&#125;:eks:$&#123;AWS_REGION&#125;:$&#123;AWS_ACCOUNT_ID&#125;:cluster/$&#123;CLUSTER_NAME&#125;&quot;, &quot;Sid&quot;: &quot;EKSClusterEndpointLookup&quot; &#125; ], &quot;Version&quot;: &quot;2012-10-17&quot;&#125;EOF$ aws iam put-role-policy --role-name KarpenterControllerRole-$&#123;CLUSTER_NAME&#125; \\ --policy-name KarpenterControllerPolicy-$&#123;CLUSTER_NAME&#125; \\ --policy-document file://controller-policy.json 为所有子网和安全组添加标签 1.为节点组内的子网打标签 123456$ for NODEGROUP in $(aws eks list-nodegroups --cluster-name $&#123;CLUSTER_NAME&#125; --query &#x27;nodegroups&#x27; --output text) do aws ec2 create-tags \\ --tags &quot;Key=karpenter.sh/discovery,Value=$&#123;CLUSTER_NAME&#125;&quot; \\ --resources $(aws eks describe-nodegroup --cluster-name $&#123;CLUSTER_NAME&#125; \\ --nodegroup-name $NODEGROUP --query &#x27;nodegroup.subnets&#x27; --output text ) done 2.给托管节点组的运行模版的安全组打标签 12345678910111213141516171819# 获取节点组$ NODEGROUP=$(aws eks list-nodegroups --cluster-name $&#123;CLUSTER_NAME&#125; \\ --query &#x27;nodegroups[0]&#x27; --output text)# 获取节点组的启动模板及其版本号$ LAUNCH_TEMPLATE=$(aws eks describe-nodegroup --cluster-name $&#123;CLUSTER_NAME&#125; \\ --nodegroup-name $&#123;NODEGROUP&#125; --query &#x27;nodegroup.launchTemplate.&#123;id:id,version:version&#125;&#x27; \\ --output text | tr -s &quot;\\t&quot; &quot;,&quot;)# 获取启动模板的安全组$ SECURITY_GROUPS=$(aws ec2 describe-launch-template-versions \\ --launch-template-id $&#123;LAUNCH_TEMPLATE%,*&#125; --versions $&#123;LAUNCH_TEMPLATE#*,&#125; \\ --query &#x27;LaunchTemplateVersions[0].LaunchTemplateData.[NetworkInterfaces[0].Groups||SecurityGroupIds]&#x27; \\ --output text)# 为安全组打标签$ aws ec2 create-tags \\ --tags &quot;Key=karpenter.sh/discovery,Value=$&#123;CLUSTER_NAME&#125;&quot; \\ --resources $&#123;SECURITY_GROUPS&#125; 更新 aws-auth ConfigMap 将上面为node创建的role加入到集群权限 12345678910111213141516$ kubectl edit configmap aws-auth -n kube-system# 在 mapRoles 下添加如下内容- groups: - system:bootstrappers - system:nodes rolearn: arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125;# 或者通过命令行直接添加$ eksctl create iamidentitymapping --cluster eks-lexing \\ --arn arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing \\ --username system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; \\ --group system:bootstrappers \\ --group system:nodes \\ --no-duplicate-arns 编辑后完整的内容如下: 123456789101112131415161718192021222324apiVersion: v1data: mapRoles: | - groups: - system:bootstrappers - system:nodes rolearn: arn:aws:iam::743263909644:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y28EPJO9XYDG username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; - groups: - system:bootstrappers - system:nodes rolearn: arn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing username: system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; mapUsers: | - groups: - eks-console-dashboard-full-access-group userarn: arn:aws:iam::743263909644:user/ekstestkind: ConfigMapmetadata: creationTimestamp: &quot;2023-06-28T06:30:56Z&quot; name: aws-auth namespace: kube-system resourceVersion: &quot;7544319&quot; uid: 5e488d60-6ce0-4657-9a08-bbd17d048f0c 查看授权信息 12345$ eksctl get iamidentitymapping --cluster eks-lexingARN USERNAME GROUPS ACCOUNTarn:aws:iam::743263909644:role/KarpenterNodeRole-eks-lexing system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; system:bootstrappers,system:nodesarn:aws:iam::743263909644:role/eksctl-eks-lexing-nodegroup-ng-4d-NodeInstanceRole-Y28EPJO9XYDG system:node:&#123;&#123;EC2PrivateDNSName&#125;&#125; system:bootstrappers,system:nodesarn:aws:iam::743263909644:user/ekstest eks-console-dashboard-full-access-group 部署 Karpenter 1.设置环境变量 12# 当前最新版是 v0.29.1 , https://github.com/aws/karpenter/releasesexport KARPENTER_VERSION=v0.29.1 2.创建 karpenter.yaml 模版 123456789$ helm template karpenter oci://public.ecr.aws/karpenter/karpenter --version $&#123;KARPENTER_VERSION&#125; \\ --namespace karpenter \\ --set settings.aws.defaultInstanceProfile=KarpenterNodeInstanceProfile-$&#123;CLUSTER_NAME&#125; \\ --set settings.aws.clusterName=$&#123;CLUSTER_NAME&#125; \\ --set serviceAccount.annotations.&quot;eks\\.amazonaws\\.com/role-arn&quot;=&quot;arn:$&#123;AWS_PARTITION&#125;:iam::$&#123;AWS_ACCOUNT_ID&#125;:role/KarpenterControllerRole-$&#123;CLUSTER_NAME&#125;&quot; \\ --set controller.resources.requests.cpu=1 \\ --set controller.resources.requests.memory=1Gi \\ --set controller.resources.limits.cpu=1 \\ --set controller.resources.limits.memory=1Gi &gt; karpenter.yaml 3.设置节点亲和性，编辑karpenter.yaml，找到karpenter deployment的亲和性配置，修改为如下内容，注意这里ng-4d9024eb要替换为你的$&#123;NODEGROUP&#125;。关节K8s节点亲和性的介绍可以参考官方文档亲和性与反亲和性 123456789101112131415affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - key: karpenter.sh/provisioner-name operator: DoesNotExist - matchExpressions: - key: eks.amazonaws.com/nodegroup operator: In values: - ng-4d9024eb podAntiAffinity: requiredDuringSchedulingIgnoredDuringExecution: - topologyKey: &quot;kubernetes.io/hostname&quot; 为其他关键集群工作负载设置nodeAffinity 例如 CoreDNS，Controller，CNI，CSI 和 Operator 等，这些 workload 对弹性要求不高但是稳定性要求比较高，建议部署在创建EKS时的节点组运行。 为这些关键负载设置nodeAffinity 123456789affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - key: eks.amazonaws.com/nodegroup operator: In values: - $&#123;NODEGROUP&#125; 比如设置k edit deploy ebs-csi-controller -n kube-system，添加好nodeAffinity后保存，然后查看对应的pod是否重启成功，如果一只处于pending状态，可以试着重启 12$ k scale deploy ebs-csi-controller --replicas 0 -n kube-system$ k scale deploy ebs-csi-controller --replicas 2 -n kube-system 设置好所有关键负载后，可以重启一下 karpenter 12$ k scale deploy karpenter --replicas 0 -n karpenter$ k scale deploy karpenter --replicas 2 -n karpenter 查看 karpenter 日志是否正常 1$ k logs deployments/karpenter -f -n karpenter 4.部署 karpenter 及其 相关资源 1234567891011121314151617# 创建Namespace$ kubectl create namespace karpenter# 下载karpenter 相关资源# karpenter的版本分支，正常karpenter发布时都会打branch，比如：release-v0.28.1，不过我在github上没有找到v0.29.1的branch，所以这里就指定 main 了$ KARPENTER_BRANCH=main$ curl -O &quot;https://raw.githubusercontent.com/aws/karpenter/$&#123;KARPENTER_BRANCH&#125;/pkg/apis/crds/karpenter.sh_provisioners.yaml&quot;$ curl -O &quot;https://raw.githubusercontent.com/aws/karpenter/$&#123;KARPENTER_BRANCH&#125;/pkg/apis/crds/karpenter.k8s.aws_awsnodetemplates.yaml&quot;$ curl -O &quot;https://raw.githubusercontent.com/aws/karpenter/$&#123;KARPENTER_BRANCH&#125;/pkg/apis/crds/karpenter.sh_machines.yaml &quot;# 部署karpenter 相关资源$ kubectl apply -f karpenter.sh_provisioners.yaml$ kubectl apply -f karpenter.k8s.aws_awsnodetemplates.yaml$ kubectl apply -f karpenter.sh_machines.yaml# 部署karpenter$ k apply -f karpenter.yaml 5.创建默认的供应者(provisioner) Provisioner与AWSNodeTemplate是karpenter在K8s中的自定义资源。 Provisioner 对 Karpenter 可创建的节点以及可在这些节点上运行的 Pod 设置约束。如果没有配置至少一个Provisioner，Karpenter 将不会执行任何操作。 关于Provisioner支持的配置项可以参考官方文档，比如下面就限制了被管控的节点必须符合两个条件： 1.实例类别必须在[c, m, r]中 2.实例的生成代次必须大于2。比如 实例类型为 c1.xxx，m1.xxx，m2.xxx就不符合要求 AWSNodeTemplate节点模板启用AWS特定设置的配置。关于AWSNodeTemplate支持的配置项可以参考官方文档，比如默认节点关联的存储为20G gp3，如果要修改为40G可以在spec下指定如下内容，先创建后编辑也可以，但只有修改后新创建的节点才会使用新的配置。 123456blockDeviceMappings:- deviceName: /dev/xvda ebs: volumeType: gp3 volumeSize: 40Gi deleteOnTermination: true Provisioner需要与AWSNodeTemplate关联使用，通过在Provisioner的providerRef中指定AWSNodeTemplate的name进行关联，一个AWSNodeTemplate可以被多个Provisioner关联。 配置的每个 Provisioner 均由 Karpenter 循环遍历。在 Provisioner 中定义污点以限制可以在 Karpenter 创建的节点上运行的 Pod。建议创建互斥的 Provisioner。因此任何 Pod 都不应该匹配多个 Provisioner。如果匹配多个Provisioner，Karpenter将使用权重最高的Provisioner 。关于K8s中污点的介绍可以参考官方文档污点和容忍度 下面是一个最基本的Provisioner定义，你可以根据需要创建自己的Provisioner，可以参考官方文档或者查看provisioner examples中的示例。 123456789101112131415161718192021222324252627# 创建 default Provisioner$ cat &lt;&lt;EOF | kubectl apply -f -apiVersion: karpenter.sh/v1alpha5kind: Provisionermetadata: name: defaultspec: requirements: - key: karpenter.k8s.aws/instance-category operator: In values: [c, m, r] - key: karpenter.k8s.aws/instance-generation operator: Gt values: [&quot;2&quot;] providerRef: name: default---apiVersion: karpenter.k8s.aws/v1alpha1kind: AWSNodeTemplatemetadata: name: defaultspec: subnetSelector: karpenter.sh/discovery: &quot;$&#123;CLUSTER_NAME&#125;&quot; securityGroupSelector: karpenter.sh/discovery: &quot;$&#123;CLUSTER_NAME&#125;&quot;EOF 查看 karpenter 状态 1234$ k get pod -n karpenterNAME READY STATUS RESTARTS AGEkarpenter-789bbcbfd7-htj6z 1/1 Running 0 101skarpenter-789bbcbfd7-rlxfp 1/1 Running 0 101s 查看 karpenter 日志是否正常 1$ k logs deployments/karpenter -f -n karpenter karpenter创建新的节点时不会在原有的节点组中进行，所以为了摆脱从节点组添加的实例，我们可以将节点组缩小到最小大小 1234# 如果您有一个多AZ节点组，我们建议至少2个实例。$ aws eks update-nodegroup-config --cluster-name $&#123;CLUSTER_NAME&#125; \\ --nodegroup-name $&#123;NODEGROUP&#125; \\ --scaling-config &quot;minSize=2,maxSize=2,desiredSize=2&quot; 关停Cluster Autoscaler(CAS) 如果EKS中已经开启了CAS，则安装Karpenter后需要关闭CAS 1$ kubectl scale deploy/cluster-autoscaler -n kube-system --replicas=0 测试 查看当前node信息 1234$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 19d v1.26.4-eks-0a21954ip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 19d v1.26.4-eks-0a21954 采用 AWS-EKS-18--Autoscaling 之 Cluster Autoscaler(CAS) 中的测试方法，将deploy的副本数设置为50，过一会查看node情况 123456# 可以看到node数量已经变为3了，说明扩容成功$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 19d v1.26.4-eks-0a21954ip-192-168-34-126.us-west-2.compute.internal Ready &lt;none&gt; 47s v1.26.6-eks-a5565adip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 19d v1.26.4-eks-0a21954 缩容测试用的deploy，副本数设置为1，过一会发现node节点并没有被终止，这是为什么呢？ 默认情况下，Karpenter不会主动终止节点，需要为其设置终止节点的方式，参考Karpenter官方文档Deprovisioning部分 在Provisioner中设置节点终止的方式 spec.ttlSecondsAfterEmpty: 当最后一个工作负载（非守护程序集）pod停止在节点上运行时，Karpenter会注意到。从那时起，Karpenter在提供程序中等待ttlSecondsAfterEmpty设置的秒数，然后Karpenter请求删除节点。此功能可以通过删除不再用于工作负载的节点来降低成本。 spec.ttlSecondsUntilExpired: Karpenter 将根据Provisioner的ttlSecondsUntilExpired值将节点注释为过期，并在节点生存了设定秒数后取消配置节点。节点过期的一种用例是定期回收节点。 spec.consolidation.enabled: 实现整合，通过删除不需要的节点和缩减无法删除的节点的规模来降低集群成本。与ttlSecondsAfterEmpty参数互斥。 12# 编辑 default provisioner，并为其指定 spec.ttlSecondsAfterEmpty: 30，表示空闲超过30秒则终止节点。$ k edit provisioners.karpenter.sh default 1234567891011121314151617181920212223242526272829303132333435363738394041424344apiVersion: karpenter.sh/v1alpha5kind: Provisionermetadata: annotations: kubectl.kubernetes.io/last-applied-configuration: | &#123;&quot;apiVersion&quot;:&quot;karpenter.sh/v1alpha5&quot;,&quot;kind&quot;:&quot;Provisioner&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123; creationTimestamp: &quot;2023-07-19T09:49:43Z&quot; generation: 3 name: default resourceVersion: &quot;7987578&quot; uid: 5716142b-2b9f-493c-a049-e4304cdf82d4spec: providerRef: name: default requirements: - key: karpenter.k8s.aws/instance-category operator: In values: - c - m - r - key: karpenter.k8s.aws/instance-generation operator: Gt values: - &quot;2&quot; - key: kubernetes.io/os operator: In values: - linux - key: kubernetes.io/arch operator: In values: - amd64 - key: karpenter.sh/capacity-type operator: In values: - on-demand ttlSecondsAfterEmpty: 30status: resources: cpu: &quot;2&quot; ephemeral-storage: 20959212Ki memory: 3900360Ki pods: &quot;29&quot; 等待30秒后查看node情况，新创建的node已经成功终止 1234$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 19d v1.26.4-eks-0a21954ip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 19d v1.26.4-eks-0a21954 创建和终止节点的过程可以通过日志进行观察 12345678910111213141516171819$ k logs deployments/karpenter -f -n karpenter# 以下创建节点的日志2023-07-20T09:03:54.763Z INFO controller.provisioner found provisionable pod(s) &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;pods&quot;: 17&#125;2023-07-20T09:03:54.763Z INFO controller.provisioner computed new machine(s) to fit pod(s) &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machines&quot;: 1, &quot;pods&quot;: 17&#125;2023-07-20T09:03:54.788Z INFO controller.provisioner created machine &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;requests&quot;: &#123;&quot;cpu&quot;:&quot;155m&quot;,&quot;memory&quot;:&quot;120Mi&quot;,&quot;pods&quot;:&quot;21&quot;&#125;, &quot;instance-types&quot;: &quot;c3.2xlarge, c3.large, c3.xlarge, c4.2xlarge, c4.large and 95 other(s)&quot;&#125;2023-07-20T09:03:54.978Z DEBUG controller.machine.lifecycle created launch template &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;launch-template-name&quot;: &quot;karpenter.k8s.aws/2892028901667059566&quot;, &quot;id&quot;: &quot;lt-0ef53ab2c4909f493&quot;&#125;2023-07-20T09:03:55.108Z DEBUG controller.machine.lifecycle created launch template &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;launch-template-name&quot;: &quot;karpenter.k8s.aws/1810058814439854165&quot;, &quot;id&quot;: &quot;lt-02cda7252a2d29e16&quot;&#125;2023-07-20T09:03:57.095Z INFO controller.machine.lifecycle launched machine &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;provider-id&quot;: &quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;, &quot;instance-type&quot;: &quot;c6a.large&quot;, &quot;zone&quot;: &quot;us-west-2d&quot;, &quot;capacity-type&quot;: &quot;on-demand&quot;, &quot;allocatable&quot;: &#123;&quot;cpu&quot;:&quot;1930m&quot;,&quot;ephemeral-storage&quot;:&quot;17Gi&quot;,&quot;memory&quot;:&quot;3114Mi&quot;,&quot;pods&quot;:&quot;29&quot;&#125;&#125;2023-07-20T09:04:14.473Z DEBUG controller.machine.lifecycle registered machine &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;provider-id&quot;: &quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;, &quot;node&quot;: &quot;ip-192-168-79-236.us-west-2.compute.internal&quot;&#125;2023-07-20T09:04:28.620Z DEBUG controller.machine.lifecycle initialized machine&#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;provider-id&quot;: &quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;, &quot;node&quot;: &quot;ip-192-168-79-236.us-west-2.compute.internal&quot;&#125;# 以下是终止节点的日志2023-07-20T09:05:46.420Z DEBUG controller.machine.disruption marking machine as empty &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;&#125;2023-07-20T09:06:20.642Z INFO controller.deprovisioning deprovisioning via emptiness delete, terminating 1 machines ip-192-168-79-236.us-west-2.compute.internal/c6a.large/on-demand &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;&#125;2023-07-20T09:06:20.699Z INFO controller.termination cordoned node &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;node&quot;: &quot;ip-192-168-79-236.us-west-2.compute.internal&quot;&#125;2023-07-20T09:06:21.026Z INFO controller.termination deleted node &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;node&quot;: &quot;ip-192-168-79-236.us-west-2.compute.internal&quot;&#125;2023-07-20T09:06:21.288Z INFO controller.machine.termination deleted machine &#123;&quot;commit&quot;: &quot;5b469b8-dirty&quot;, &quot;machine&quot;: &quot;default-c6jkx&quot;, &quot;node&quot;: &quot;ip-192-168-79-236.us-west-2.compute.internal&quot;, &quot;provisioner&quot;: &quot;default&quot;, &quot;provider-id&quot;: &quot;aws:///us-west-2d/i-0bb92e04b7192cafd&quot;&#125; 小贴士 当Karpenter管理的Node节点由于某种原因不可用时(比如我们在AWS控制台终止了EC2或通过命令行删除节点k delete node nodeName)，Karpenter会立刻为我们创建一个新的Node节点，并在其上重启Pod。 参考资料 从Cluster Autoscaler迁移 EKS Cluster Autoscaler 迁移 Karpenter 实践 Karpenter Best Practices","summary":"摘要 本文介绍EKS集群Autoscaling 之 Karpenter 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-19T12:30:05.000Z","tags":["技术","aws","eks","eks"]},{"id":"https://blog.hanqunfeng.com/2023/07/18/aws-eks18-autoscaler-cas/","url":"https://blog.hanqunfeng.com/2023/07/18/aws-eks18-autoscaler-cas/","title":"AWS-EKS-18--Autoscaling 之 Cluster Autoscaler(CAS)","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍EKS集群Autoscaling 之 Cluster Autoscaler(CAS)</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"EKS集群Autoscaling\">EKS集群Autoscaling</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>弹性伸缩是一项功能，可以自动上下伸缩您的资源以满足不断变化的需求。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Amazon EKS 支持两款自动扩缩产品:</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md\">Cluster Autoscaler(CAS) </a>，本文就介绍这款产品的使用方法。</li>\n<li class=\"lvl-6\"><a href=\"https://karpenter.sh/docs/\">Karpenter</a>，参看 <a href=\"/2023/07/19/aws-eks19-autoscaler-karpenter/\" title=\"AWS-EKS-19--Autoscaling 之 Karpenter\">AWS-EKS-19--Autoscaling 之 Karpenter</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Cluster-Autoscaler-CAS-是什么？\">Cluster Autoscaler(CAS)是什么？</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>Cluster Autoscaler</code> 是一个可以自动调整<code>Kubernetes</code>集群大小的组件，以便所有<code>pod</code>都有运行的地方，并且没有不需要的节点。支持多个公共云提供商。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>AWS EKS</code>集群自动扩容功能可以基于<code>Cluster Autoscaler</code>自动调整集群中node的数量以适应需求变化。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>Cluster Autoscaler</code>一般以Deployment的方式部署在K8s中，通过<code>service account</code>赋予的权限来访问<code>AWS autoscaling group</code>资源，并控制node（EC2）的增减。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>AWS EKS Cluster Autoscaler</code> 以 <code>Amazon EC2 Auto Scaling Groups</code>服务为基础对node进行扩容，所以其扩容或缩容时，也要遵守节点组扩缩中的配置<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/igPla5.png\" alt=\"\" width=\"300\" height=\"300\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>当有新的Pod无法在现有node上schedule时会触发扩容，当node空闲超过10min时，会触发缩容。</p>\n</li>\n<li class=\"lvl-2\">\n<p><code>Cluster Autoscaler</code>的镜像版本要求与K8s版本匹配，所以当EKS(K8s)升级时，<code>Cluster Autoscaler</code>的镜像也要进行升级。</p>\n</li>\n</ul>\n<h2 id=\"创建IAM策略和角色\">创建IAM策略和角色</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建Policy：<code>cluster-autoscaler-policy.json</code></p>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2012-10-17&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Statement&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Effect&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Allow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Action&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:DescribeAutoScalingGroups&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:DescribeAutoScalingInstances&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:DescribeLaunchConfigurations&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:DescribeScalingActivities&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:DescribeTags&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;ec2:DescribeInstanceTypes&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;ec2:DescribeLaunchTemplateVersions&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Resource&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Effect&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Allow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Action&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:SetDesiredCapacity&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;autoscaling:TerminateInstanceInAutoScalingGroup&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;ec2:DescribeImages&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;ec2:GetInstanceTypesFromInstanceRequirements&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;eks:DescribeNodegroup&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Resource&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;*&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> AWS_PROFILE=eks-ty-old</span><br><span class=\"line\">$ aws iam create-policy \\</span><br><span class=\"line\">    --policy-name AmazonEKSClusterAutoscalerPolicy \\</span><br><span class=\"line\">    --policy-document file://cluster-autoscaler-policy.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Policy&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;PolicyName&quot;</span>: <span class=\"string\">&quot;AmazonEKSClusterAutoscalerPolicy&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;PolicyId&quot;</span>: <span class=\"string\">&quot;ANPA22DP3G4GBZ4RXQA2J&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:policy/AmazonEKSClusterAutoscalerPolicy&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Path&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;DefaultVersionId&quot;</span>: <span class=\"string\">&quot;v1&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;AttachmentCount&quot;</span>: 0,</span><br><span class=\"line\">        <span class=\"string\">&quot;PermissionsBoundaryUsageCount&quot;</span>: 0,</span><br><span class=\"line\">        <span class=\"string\">&quot;IsAttachable&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreateDate&quot;</span>: <span class=\"string\">&quot;2023-07-18T09:31:24+00:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;UpdateDate&quot;</span>: <span class=\"string\">&quot;2023-07-18T09:31:24+00:00&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建IAM Role的信任关系：<code>trust-policy.json</code></p>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2012-10-17&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Statement&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Effect&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Allow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Principal&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Federated&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Action&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sts:AssumeRoleWithWebIdentity&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Condition&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;StringEquals&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sts.amazonaws.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;system:serviceaccount:kube-system:cluster-autoscaler&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建 IAM Role</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws iam create-role \\</span><br><span class=\"line\">  --role-name AmazonEKSClusterAutoscalerRole \\</span><br><span class=\"line\">  --assume-role-policy-document file://<span class=\"string\">&quot;trust-policy.json&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Role&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Path&quot;</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;RoleName&quot;</span>: <span class=\"string\">&quot;AmazonEKSClusterAutoscalerRole&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;RoleId&quot;</span>: <span class=\"string\">&quot;AROA22DP3G4GHSSPEOMUH&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:role/AmazonEKSClusterAutoscalerRole&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreateDate&quot;</span>: <span class=\"string\">&quot;2023-07-18T09:39:54+00:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;AssumeRolePolicyDocument&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Version&quot;</span>: <span class=\"string\">&quot;2012-10-17&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Statement&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Effect&quot;</span>: <span class=\"string\">&quot;Allow&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Principal&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;Federated&quot;</span>: <span class=\"string\">&quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot;</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Action&quot;</span>: <span class=\"string\">&quot;sts:AssumeRoleWithWebIdentity&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Condition&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;StringEquals&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;</span>: <span class=\"string\">&quot;sts.amazonaws.com&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;</span>: <span class=\"string\">&quot;system:serviceaccount:kube-system:cluster-autoscaler&quot;</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>为 Role 添加 Policy</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws iam attach-role-policy \\</span><br><span class=\"line\">  --policy-arn arn:aws:iam::743263909644:policy/AmazonEKSClusterAutoscalerPolicy \\</span><br><span class=\"line\">  --role-name AmazonEKSClusterAutoscalerRole</span><br></pre></td></tr></table></figure>\n<h2 id=\"部署Cluster-Autoscaler\">部署Cluster Autoscaler</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>下载Autoscaler yaml文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载yaml文件，github仓库中的文件下载路径格式为：https://raw.githubusercontent.com/&lt;Owner&gt;/&lt;RepositoryName&gt;/&lt;branch&gt;/&lt;FilePath&gt;</span></span><br><span class=\"line\">$ wget https://raw.githubusercontent.com/kubernetes/autoscaler/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取使用git命令，这里只clone出指定文件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> --depth 1 https://github.com/kubernetes/autoscaler --branch master --single-branch cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>修改yaml文件配置<br>\n打开<code>Cluster Autoscaler</code>的<a href=\"https://github.com/kubernetes/autoscaler/releases\">github地址</a>，查看与EKS版本匹配的最新Autoscaler镜像版本<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/GBArR8.png\" alt=\"\" width=\"600\" height=\"600\"></p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">1.把cluster-autoscaler的镜像版本换成上面查到的版本1.26.3</li>\n<li class=\"lvl-6\">2.查找并替换“<YOUR CLUSTER NAME>”为我们EKS的名称: <code>eks-lexing</code></li>\n<li class=\"lvl-6\">3.在EKS的名称“tsEKS”下面，并添加以下两行</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- --balance-similar-node-groups</span><br><span class=\"line\">- --skip-nodes-with-system-pods=false</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>--balance-similar-node-groups</code>：此选项用于启用集群节点组的负载均衡功能。当你有多个具有相似容量的节点组时，启用此选项可以确保 Cluster Autoscaler 尽可能均衡地在这些节点组之间分配 Pod。它帮助确保节点组的资源利用率更加平衡，以提高集群的整体性能。<br>\n<code>--skip-nodes-with-system-pods=false</code>：此选项用于设置是否跳过具有系统 Pod 的节点。默认情况下，Cluster Autoscaler 会跳过具有系统 Pod（如 kube-system 命名空间中的核心组件）的节点，以确保这些关键组件的正常运行。将该选项设置为 false，即禁用跳过具有系统 Pod 的节点，可以让 Cluster Autoscaler 考虑包括具有系统 Pod 的节点在内的所有节点进行调整。</p>\n</blockquote>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">4.为ServiceAccount添加IMA Role注解，注意一定要添加这个注解后再进行部署，否则会提示没有权限<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/98SQ9l.png\" alt=\"\" width=\"1200\" height=\"600\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/88IL8W.png\" alt=\"\" width=\"1200\" height=\"300\"></li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p>部署Cluster Autoscaler</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f cluster-autoscaler-autodiscover.yaml</span><br><span class=\"line\">serviceaccount/cluster-autoscaler created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/cluster-autoscaler created</span><br><span class=\"line\">role.rbac.authorization.k8s.io/cluster-autoscaler created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/cluster-autoscaler created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/cluster-autoscaler created</span><br><span class=\"line\">deployment.apps/cluster-autoscaler created</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看Cluster Autoscaler Deployment</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cluster-autoscaler</span></span><br><span class=\"line\">$ k get deploy</span><br><span class=\"line\">NAME                           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">aws-load-balancer-controller   2/2     2            2           14d</span><br><span class=\"line\">cluster-autoscaler             1/1     1            1           9m10s</span><br><span class=\"line\">coredns                        2/2     2            2           20d</span><br><span class=\"line\">ebs-csi-controller             2/2     2            2           20d</span><br><span class=\"line\">efs-csi-controller             2/2     2            2           15d</span><br><span class=\"line\">metrics-server                 1/1     1            1           20d</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>给autoscaler deployment打patch，增加annotation</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这个注解的作用是告诉 Kubernetes 系统不要将这些 Pod 标记为可以被安全驱逐（evict）的 Pod。</span></span><br><span class=\"line\"><span class=\"comment\"># 通过将 cluster-autoscaler 部署的 Pod 标记为不可安全驱逐，可以避免 Cluster Autoscaler 将这些关键组件的 Pod 视为可以被删除的对象。</span></span><br><span class=\"line\">$ kubectl patch deployment cluster-autoscaler \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  -p <span class=\"string\">&#x27;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&quot;cluster-autoscaler.kubernetes.io/safe-to-evict&quot;: &quot;false&quot;&#125;&#125;&#125;&#125;&#125;&#x27;</span></span><br><span class=\"line\">deployment.apps/cluster-autoscaler patched</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\">测试</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看当前node节点</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   18d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   18d   v1.26.4-eks-0a21954</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建测试用的deployment：<code>testDeploy.yaml</code></p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.20.2</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k apply -f testDeploy.yaml</span><br><span class=\"line\">deployment.apps/nginx-deployment created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 扩容</span></span><br><span class=\"line\"><span class=\"comment\"># 因为我这里的节点实例类型为 m5.large，所以replicas要设置的大一些</span></span><br><span class=\"line\">k scale deploy nginx-deployment --replicas 50 -n <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>过一会查看node情况</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以看到新创建了一个node节点</span></span><br><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   18d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   18d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-86-167.us-west-2.compute.internal   Ready    &lt;none&gt;   68s   v1.26.4-eks-0a21954</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pod也都正常运行</span></span><br><span class=\"line\">$ k get pod -n <span class=\"built_in\">test</span></span><br><span class=\"line\">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-deployment-7876b754ff-2nd5k        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-2ppvw        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-45csw        1/1     Running   0          110s</span><br><span class=\"line\">nginx-deployment-7876b754ff-46tmf        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-5vt8p        1/1     Running   0          110s</span><br><span class=\"line\">nginx-deployment-7876b754ff-66ztw        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-77f4d        1/1     Running   0          110s</span><br><span class=\"line\">nginx-deployment-7876b754ff-8jj92        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-8kj97        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-9c8kr        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-9szmq        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-blbqd        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-bpppd        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-c46sb        1/1     Running   0          111s</span><br><span class=\"line\">nginx-deployment-7876b754ff-d5b45        1/1     Running   0          111s</span><br><span class=\"line\">………………………………</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>缩容deploy</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将副本降为1</span></span><br><span class=\"line\">$ k scale deploy nginx-deployment --replicas 1 -n <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试完成可以删除</span></span><br><span class=\"line\">$ k delete -f testDeploy.yaml</span><br><span class=\"line\">deployment.apps <span class=\"string\">&quot;nginx-deployment&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>大约过10几分钟就可以看到新增的node已经下线</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get node</span><br><span class=\"line\">NAME                                           STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   Ready    &lt;none&gt;   18d   v1.26.4-eks-0a21954</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    Ready    &lt;none&gt;   18d   v1.26.4-eks-0a21954</span><br></pre></td></tr></table></figure>\n<h2 id=\"升级Cluster-Autoscaler\">升级Cluster Autoscaler</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><code>Cluster Autoscaler</code>的镜像版本要求与K8s版本匹配，所以当EKS(K8s)升级时，<code>Cluster Autoscaler</code>的镜像也要进行升级。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"built_in\">set</span> image deployment cluster-autoscaler \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  cluster-autoscaler=registry.k8s.io/autoscaling/cluster-autoscaler:v&lt;x.x.x&gt;</span><br><span class=\"line\"><span class=\"comment\"># 或者直接编辑也是可以的</span></span><br><span class=\"line\">$ k edit deploy -n kube-system cluster-autoscaler</span><br></pre></td></tr></table></figure>\n<h2 id=\"关闭Cluster-Autoscaler\">关闭Cluster Autoscaler</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k scale deploy cluster-autoscaler -n kube-system --replicas 0</span><br><span class=\"line\">deployment.apps/cluster-autoscaler scaled</span><br><span class=\"line\"></span><br><span class=\"line\">$ k get deploy</span><br><span class=\"line\">NAME                           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">aws-load-balancer-controller   2/2     2            2           14d</span><br><span class=\"line\">cluster-autoscaler             0/0     0            0           20h</span><br><span class=\"line\">coredns                        2/2     2            2           21d</span><br><span class=\"line\">ebs-csi-controller             2/2     2            2           20d</span><br><span class=\"line\">efs-csi-controller             2/2     2            2           15d</span><br><span class=\"line\">metrics-server                 1/1     1            1           21d</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍EKS集群Autoscaling 之 Cluster Autoscaler(CAS) 参考资料： Amazon EKS用户指南 Kubernetes 文档 EKS集群Autoscaling 弹性伸缩是一项功能，可以自动上下伸缩您的资源以满足不断变化的需求。 Amazon EKS 支持两款自动扩缩产品: Cluster Autoscaler(CAS) ，本文就介绍这款产品的使用方法。 Karpenter，参看 AWS-EKS-19--Autoscaling 之 Karpenter Cluster Autoscaler(CAS)是什么？ Cluster Autoscaler 是一个可以自动调整Kubernetes集群大小的组件，以便所有pod都有运行的地方，并且没有不需要的节点。支持多个公共云提供商。 AWS EKS集群自动扩容功能可以基于Cluster Autoscaler自动调整集群中node的数量以适应需求变化。 Cluster Autoscaler一般以Deployment的方式部署在K8s中，通过service account赋予的权限来访问AWS autoscaling group资源，并控制node（EC2）的增减。 AWS EKS Cluster Autoscaler 以 Amazon EC2 Auto Scaling Groups服务为基础对node进行扩容，所以其扩容或缩容时，也要遵守节点组扩缩中的配置 当有新的Pod无法在现有node上schedule时会触发扩容，当node空闲超过10min时，会触发缩容。 Cluster Autoscaler的镜像版本要求与K8s版本匹配，所以当EKS(K8s)升级时，Cluster Autoscaler的镜像也要进行升级。 创建IAM策略和角色 创建Policy：cluster-autoscaler-policy.json 1234567891011121314151617181920212223242526272829&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;autoscaling:DescribeAutoScalingGroups&quot;, &quot;autoscaling:DescribeAutoScalingInstances&quot;, &quot;autoscaling:DescribeLaunchConfigurations&quot;, &quot;autoscaling:DescribeScalingActivities&quot;, &quot;autoscaling:DescribeTags&quot;, &quot;ec2:DescribeInstanceTypes&quot;, &quot;ec2:DescribeLaunchTemplateVersions&quot; ], &quot;Resource&quot;: [&quot;*&quot;] &#125;, &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;autoscaling:SetDesiredCapacity&quot;, &quot;autoscaling:TerminateInstanceInAutoScalingGroup&quot;, &quot;ec2:DescribeImages&quot;, &quot;ec2:GetInstanceTypesFromInstanceRequirements&quot;, &quot;eks:DescribeNodegroup&quot; ], &quot;Resource&quot;: [&quot;*&quot;] &#125; ] &#125; 123456789101112131415161718$ export AWS_PROFILE=eks-ty-old$ aws iam create-policy \\ --policy-name AmazonEKSClusterAutoscalerPolicy \\ --policy-document file://cluster-autoscaler-policy.json&#123; &quot;Policy&quot;: &#123; &quot;PolicyName&quot;: &quot;AmazonEKSClusterAutoscalerPolicy&quot;, &quot;PolicyId&quot;: &quot;ANPA22DP3G4GBZ4RXQA2J&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909644:policy/AmazonEKSClusterAutoscalerPolicy&quot;, &quot;Path&quot;: &quot;/&quot;, &quot;DefaultVersionId&quot;: &quot;v1&quot;, &quot;AttachmentCount&quot;: 0, &quot;PermissionsBoundaryUsageCount&quot;: 0, &quot;IsAttachable&quot;: true, &quot;CreateDate&quot;: &quot;2023-07-18T09:31:24+00:00&quot;, &quot;UpdateDate&quot;: &quot;2023-07-18T09:31:24+00:00&quot; &#125;&#125; 创建IAM Role的信任关系：trust-policy.json 123456789101112131415161718&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Federated&quot;: &quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;, &quot;Condition&quot;: &#123; &quot;StringEquals&quot;: &#123; &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;: &quot;sts.amazonaws.com&quot;, &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;: &quot;system:serviceaccount:kube-system:cluster-autoscaler&quot; &#125; &#125; &#125; ]&#125; 创建 IAM Role 123456789101112131415161718192021222324252627282930$ aws iam create-role \\ --role-name AmazonEKSClusterAutoscalerRole \\ --assume-role-policy-document file://&quot;trust-policy.json&quot;&#123; &quot;Role&quot;: &#123; &quot;Path&quot;: &quot;/&quot;, &quot;RoleName&quot;: &quot;AmazonEKSClusterAutoscalerRole&quot;, &quot;RoleId&quot;: &quot;AROA22DP3G4GHSSPEOMUH&quot;, &quot;Arn&quot;: &quot;arn:aws:iam::743263909644:role/AmazonEKSClusterAutoscalerRole&quot;, &quot;CreateDate&quot;: &quot;2023-07-18T09:39:54+00:00&quot;, &quot;AssumeRolePolicyDocument&quot;: &#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Federated&quot;: &quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;, &quot;Condition&quot;: &#123; &quot;StringEquals&quot;: &#123; &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;: &quot;sts.amazonaws.com&quot;, &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;: &quot;system:serviceaccount:kube-system:cluster-autoscaler&quot; &#125; &#125; &#125; ] &#125; &#125;&#125; 为 Role 添加 Policy 123$ aws iam attach-role-policy \\ --policy-arn arn:aws:iam::743263909644:policy/AmazonEKSClusterAutoscalerPolicy \\ --role-name AmazonEKSClusterAutoscalerRole 部署Cluster Autoscaler 下载Autoscaler yaml文件 12345#下载yaml文件，github仓库中的文件下载路径格式为：https://raw.githubusercontent.com/&lt;Owner&gt;/&lt;RepositoryName&gt;/&lt;branch&gt;/&lt;FilePath&gt;$ wget https://raw.githubusercontent.com/kubernetes/autoscaler/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml# 获取使用git命令，这里只clone出指定文件$ git clone --depth 1 https://github.com/kubernetes/autoscaler --branch master --single-branch cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml 修改yaml文件配置 打开Cluster Autoscaler的github地址，查看与EKS版本匹配的最新Autoscaler镜像版本 1.把cluster-autoscaler的镜像版本换成上面查到的版本1.26.3 2.查找并替换“”为我们EKS的名称: eks-lexing 3.在EKS的名称“tsEKS”下面，并添加以下两行 12- --balance-similar-node-groups- --skip-nodes-with-system-pods=false --balance-similar-node-groups：此选项用于启用集群节点组的负载均衡功能。当你有多个具有相似容量的节点组时，启用此选项可以确保 Cluster Autoscaler 尽可能均衡地在这些节点组之间分配 Pod。它帮助确保节点组的资源利用率更加平衡，以提高集群的整体性能。 --skip-nodes-with-system-pods=false：此选项用于设置是否跳过具有系统 Pod 的节点。默认情况下，Cluster Autoscaler 会跳过具有系统 Pod（如 kube-system 命名空间中的核心组件）的节点，以确保这些关键组件的正常运行。将该选项设置为 false，即禁用跳过具有系统 Pod 的节点，可以让 Cluster Autoscaler 考虑包括具有系统 Pod 的节点在内的所有节点进行调整。 4.为ServiceAccount添加IMA Role注解，注意一定要添加这个注解后再进行部署，否则会提示没有权限 部署Cluster Autoscaler 1234567$ kubectl apply -f cluster-autoscaler-autodiscover.yamlserviceaccount/cluster-autoscaler createdclusterrole.rbac.authorization.k8s.io/cluster-autoscaler createdrole.rbac.authorization.k8s.io/cluster-autoscaler createdclusterrolebinding.rbac.authorization.k8s.io/cluster-autoscaler createdrolebinding.rbac.authorization.k8s.io/cluster-autoscaler createddeployment.apps/cluster-autoscaler created 查看Cluster Autoscaler Deployment 123456789# cluster-autoscaler$ k get deployNAME READY UP-TO-DATE AVAILABLE AGEaws-load-balancer-controller 2/2 2 2 14dcluster-autoscaler 1/1 1 1 9m10scoredns 2/2 2 2 20debs-csi-controller 2/2 2 2 20defs-csi-controller 2/2 2 2 15dmetrics-server 1/1 1 1 20d 给autoscaler deployment打patch，增加annotation 123456# 这个注解的作用是告诉 Kubernetes 系统不要将这些 Pod 标记为可以被安全驱逐（evict）的 Pod。# 通过将 cluster-autoscaler 部署的 Pod 标记为不可安全驱逐，可以避免 Cluster Autoscaler 将这些关键组件的 Pod 视为可以被删除的对象。$ kubectl patch deployment cluster-autoscaler \\ -n kube-system \\ -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&quot;cluster-autoscaler.kubernetes.io/safe-to-evict&quot;: &quot;false&quot;&#125;&#125;&#125;&#125;&#125;&#x27;deployment.apps/cluster-autoscaler patched 测试 查看当前node节点 1234$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 18d v1.26.4-eks-0a21954ip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 18d v1.26.4-eks-0a21954 创建测试用的deployment：testDeploy.yaml 12345678910111213141516171819202122apiVersion: apps/v1kind: Deploymentmetadata: name: nginx-deployment namespace: test labels: app: nginxspec: replicas: 1 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.20.2 ports: - containerPort: 80 123456$ k apply -f testDeploy.yamldeployment.apps/nginx-deployment created# 扩容# 因为我这里的节点实例类型为 m5.large，所以replicas要设置的大一些k scale deploy nginx-deployment --replicas 50 -n test 过一会查看node情况 1234567891011121314151617181920212223242526# 可以看到新创建了一个node节点$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 18d v1.26.4-eks-0a21954ip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 18d v1.26.4-eks-0a21954ip-192-168-86-167.us-west-2.compute.internal Ready &lt;none&gt; 68s v1.26.4-eks-0a21954# pod也都正常运行$ k get pod -n testNAME READY STATUS RESTARTS AGEnginx-deployment-7876b754ff-2nd5k 1/1 Running 0 111snginx-deployment-7876b754ff-2ppvw 1/1 Running 0 111snginx-deployment-7876b754ff-45csw 1/1 Running 0 110snginx-deployment-7876b754ff-46tmf 1/1 Running 0 111snginx-deployment-7876b754ff-5vt8p 1/1 Running 0 110snginx-deployment-7876b754ff-66ztw 1/1 Running 0 111snginx-deployment-7876b754ff-77f4d 1/1 Running 0 110snginx-deployment-7876b754ff-8jj92 1/1 Running 0 111snginx-deployment-7876b754ff-8kj97 1/1 Running 0 111snginx-deployment-7876b754ff-9c8kr 1/1 Running 0 111snginx-deployment-7876b754ff-9szmq 1/1 Running 0 111snginx-deployment-7876b754ff-blbqd 1/1 Running 0 111snginx-deployment-7876b754ff-bpppd 1/1 Running 0 111snginx-deployment-7876b754ff-c46sb 1/1 Running 0 111snginx-deployment-7876b754ff-d5b45 1/1 Running 0 111s……………………………… 缩容deploy 123456# 将副本降为1$ k scale deploy nginx-deployment --replicas 1 -n test# 测试完成可以删除$ k delete -f testDeploy.yamldeployment.apps &quot;nginx-deployment&quot; deleted 大约过10几分钟就可以看到新增的node已经下线 1234$ k get nodeNAME STATUS ROLES AGE VERSIONip-192-168-16-155.us-west-2.compute.internal Ready &lt;none&gt; 18d v1.26.4-eks-0a21954ip-192-168-48-14.us-west-2.compute.internal Ready &lt;none&gt; 18d v1.26.4-eks-0a21954 升级Cluster Autoscaler Cluster Autoscaler的镜像版本要求与K8s版本匹配，所以当EKS(K8s)升级时，Cluster Autoscaler的镜像也要进行升级。 12345$ kubectl set image deployment cluster-autoscaler \\ -n kube-system \\ cluster-autoscaler=registry.k8s.io/autoscaling/cluster-autoscaler:v&lt;x.x.x&gt;# 或者直接编辑也是可以的$ k edit deploy -n kube-system cluster-autoscaler 关闭Cluster Autoscaler 1234567891011$ k scale deploy cluster-autoscaler -n kube-system --replicas 0deployment.apps/cluster-autoscaler scaled$ k get deployNAME READY UP-TO-DATE AVAILABLE AGEaws-load-balancer-controller 2/2 2 2 14dcluster-autoscaler 0/0 0 0 20hcoredns 2/2 2 2 21debs-csi-controller 2/2 2 2 20defs-csi-controller 2/2 2 2 15dmetrics-server 1/1 1 1 21d","summary":"摘要 本文介绍EKS集群Autoscaling 之 Cluster Autoscaler(CAS) 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-18T12:30:05.000Z","tags":["技术","aws","eks","eks"]},{"id":"https://blog.hanqunfeng.com/2023/07/17/aws-eks17-hpa/","url":"https://blog.hanqunfeng.com/2023/07/17/aws-eks17-hpa/","title":"AWS-EKS-17--Horizontal Pod Autoscaler（HPA）","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍在EKS集群下创建HPA的方法</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"Horizontal-Pod-Autoscaler-简介\">Horizontal Pod Autoscaler 简介</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Horizontal Pod Autoscaler（HPA）基于资源 CPU 利用率自动调整 deployment、replication controller 或者 replica 中 pod 的数量，这有助于您的应用程序进行扩展以满足增长的需求，或在不需要资源时进行缩减，从而释放出节点用于其他应用程序。当您设置目标 CPU 利用率百分比时，HPA 扩展或缩减应用程序来尝试满足该目标。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Kubernetes 本身已经包含了 HPA 的 controller，所以不需要额外的安装或部署。</p>\n</li>\n<li class=\"lvl-2\">\n<p>HPA 需要获取 metrics 信息，metrics 信息需要从 Metrics Server 中获取或者从第三方软件获取，关于如何在EKS中安装Metrics Server可以查看 <a href=\"/2023/07/07/aws-eks11-metrics/\" title=\"AWS-EKS-11--安装 Kubernetes Metrics Server\">AWS-EKS-11--安装 Kubernetes Metrics Server</a>。</p>\n</li>\n<li class=\"lvl-2\">\n<p>HPA 会周期性(默认15秒)查询目标资源的使用情况，然后和 HPA 中定义的值做比较，并根据比较结果相应的调整 pod 数量。</p>\n</li>\n<li class=\"lvl-2\">\n<p>创建pod时，必须为其设定cpu资源，用于与目标值进行比较，目前v2版本的HPA除了支持CPU的对比，还可以设定其它指标，具体参考<a href=\"https://kubernetes.io/zh-cn/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/\">HorizontalPodAutoscaler 演练</a>。</p>\n</li>\n</ul>\n<h2 id=\"示例\">示例</h2>\n<p>参考<a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/horizontal-pod-autoscaler.html\">官方示例</a></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>定义资源yaml</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># php-apache.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">php-apache</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">php-apache</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">php-apache</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">php-apache</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.k8s.io/hpa-example</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span>   <span class=\"comment\"># 最多可使用资源，500m（0.5 个 CPU）</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span>   <span class=\"comment\"># 期望使用资源（desiredMetricValue），200m（0.2 个 CPU）</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">php-apache</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">php-apache</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">php-apache</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>部署yaml</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k apply -f php-apache.yaml</span><br><span class=\"line\">deployment.apps/php-apache created</span><br><span class=\"line\">service/php-apache created</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建HPA</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建了一个叫“php-apache”的 HPA，与 deployment 的名称相同，可以用 --name=&#x27;hpa-name&#x27; 指定hpa的名称</span></span><br><span class=\"line\"><span class=\"comment\"># replicas 变动范围是最小 1，最大 10</span></span><br><span class=\"line\"><span class=\"comment\"># 目标cpu利用率为 50%，上面我们设定 CPU request 值为 200m，所以当平均cpu值为 100m 时就会触发 autoscale</span></span><br><span class=\"line\"><span class=\"comment\"># 这里说平均cpu，是指所有pod的cpu利用率的平均值</span></span><br><span class=\"line\">$ k autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10</span><br><span class=\"line\">horizontalpodautoscaler.autoscaling/php-apache autoscaled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过yaml创建</span></span><br><span class=\"line\">apiVersion: autoscaling/v2</span><br><span class=\"line\">kind: HorizontalPodAutoscaler</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: php-apache</span><br><span class=\"line\">  namespace: <span class=\"built_in\">test</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  maxReplicas: 10</span><br><span class=\"line\">  minReplicas: 1</span><br><span class=\"line\">  metrics:</span><br><span class=\"line\">  - resource:</span><br><span class=\"line\">      name: cpu</span><br><span class=\"line\">      target:</span><br><span class=\"line\">        averageUtilization: 50</span><br><span class=\"line\">        <span class=\"built_in\">type</span>: Utilization</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: Resource</span><br><span class=\"line\">  scaleTargetRef:</span><br><span class=\"line\">    apiVersion: apps/v1</span><br><span class=\"line\">    kind: Deployment</span><br><span class=\"line\">    name: php-apache</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看HPA</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get hpa</span><br><span class=\"line\">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">php-apache   Deployment/php-apache   0%/50%    1         10        1          29s</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>测试HPA</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过运行容器为 Web 服务器创建负载</span></span><br><span class=\"line\"><span class=\"comment\"># 这里利用 busybox 镜像临时生成一个 pod，用 while 循环不停的访问 php-apache 的 service，而 php-apache 中的 hpa-example 镜像已经配置了进行消耗 CPU 的计算网页，所以 php-apache pod 的 CPU 负载会很快增长</span></span><br><span class=\"line\"><span class=\"comment\"># 该命令会一直运行，直到 Ctrl+C</span></span><br><span class=\"line\">$ kubectl run -i \\</span><br><span class=\"line\">    --<span class=\"built_in\">tty</span> load-generator \\</span><br><span class=\"line\">    --<span class=\"built_in\">rm</span> --image=busybox \\</span><br><span class=\"line\">    --restart=Never \\</span><br><span class=\"line\">    -- /bin/sh -c <span class=\"string\">&quot;while sleep 0.01; do wget -q -O- http://php-apache; done&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上面的命令运行一会后再开一个终端查看hpa的情况，可以看到已经发生扩容了</span></span><br><span class=\"line\">$ k get hpa</span><br><span class=\"line\">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">php-apache   Deployment/php-apache   57%/50%   1         10        7          5m27s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行一段时间后发现hpa稳定在8个，说明此时pod的数量已经满足平均cpu使用率小于50%的目标</span></span><br><span class=\"line\">$ k get hpa</span><br><span class=\"line\">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">php-apache   Deployment/php-apache   43%/50%   1         10        8          20m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod的cpu使用情况，虽然此时也有个别的pod大于100m，但是8个pod的平均cpu是小于100m的，此时就不会再进行扩容了</span></span><br><span class=\"line\">$ k top pod</span><br><span class=\"line\">NAME                                     CPU(cores)   MEMORY(bytes)</span><br><span class=\"line\">php-apache-7495ff8f5b-2kjsc              98m          11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-49vb9              85m          11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-65r62              100m         11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-7mn9l              79m          11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-7njtt              74m          11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-8n5t6              88m          11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-spvnh              103m         11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-w64f4              101m         11Mi</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>此时<code>Ctrl+C</code>中断测试容器，过一会查看hpa和pod的情况，可以看到平均 CPU 负载已经降到 0 了，但 REPLICAS 还是 8 个，不会立即降低，不要着急，大约5分钟左右 REPLICAS 最终变为 1</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get hpa</span><br><span class=\"line\">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">php-apache   Deployment/php-apache   0%/50%    1         10        8          26m</span><br><span class=\"line\">$ k top pod</span><br><span class=\"line\">NAME                                     CPU(cores)   MEMORY(bytes)</span><br><span class=\"line\">php-apache-7495ff8f5b-2kjsc              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-49vb9              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-65r62              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-7mn9l              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-7njtt              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-8n5t6              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-spvnh              1m           11Mi</span><br><span class=\"line\">php-apache-7495ff8f5b-w64f4              1m           11Mi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以看到hpa的 AGE 在26m时还是8个，30m时就降为1个了</span></span><br><span class=\"line\">$ k get hpa</span><br><span class=\"line\">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">php-apache   Deployment/php-apache   0%/50%    1         10        1          30m</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除HPA\">删除HPA</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k delete hpa php-apache</span><br><span class=\"line\">horizontalpodautoscaler.autoscaling <span class=\"string\">&quot;php-apache&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍在EKS集群下创建HPA的方法 参考资料： Amazon EKS用户指南 Kubernetes 文档 Horizontal Pod Autoscaler 简介 Horizontal Pod Autoscaler（HPA）基于资源 CPU 利用率自动调整 deployment、replication controller 或者 replica 中 pod 的数量，这有助于您的应用程序进行扩展以满足增长的需求，或在不需要资源时进行缩减，从而释放出节点用于其他应用程序。当您设置目标 CPU 利用率百分比时，HPA 扩展或缩减应用程序来尝试满足该目标。 Kubernetes 本身已经包含了 HPA 的 controller，所以不需要额外的安装或部署。 HPA 需要获取 metrics 信息，metrics 信息需要从 Metrics Server 中获取或者从第三方软件获取，关于如何在EKS中安装Metrics Server可以查看 AWS-EKS-11--安装 Kubernetes Metrics Server。 HPA 会周期性(默认15秒)查询目标资源的使用情况，然后和 HPA 中定义的值做比较，并根据比较结果相应的调整 pod 数量。 创建pod时，必须为其设定cpu资源，用于与目标值进行比较，目前v2版本的HPA除了支持CPU的对比，还可以设定其它指标，具体参考HorizontalPodAutoscaler 演练。 示例 参考官方示例 定义资源yaml 123456789101112131415161718192021222324252627282930313233343536# php-apache.yamlapiVersion: apps/v1kind: Deploymentmetadata: name: php-apachespec: selector: matchLabels: run: php-apache template: metadata: labels: run: php-apache spec: containers: - name: php-apache image: registry.k8s.io/hpa-example ports: - containerPort: 80 resources: limits: cpu: 500m # 最多可使用资源，500m（0.5 个 CPU） requests: cpu: 200m # 期望使用资源（desiredMetricValue），200m（0.2 个 CPU）---apiVersion: v1kind: Servicemetadata: name: php-apache labels: run: php-apachespec: ports: - port: 80 selector: run: php-apache 部署yaml 123$ k apply -f php-apache.yamldeployment.apps/php-apache createdservice/php-apache created 创建HPA 123456789101112131415161718192021222324252627# 创建了一个叫“php-apache”的 HPA，与 deployment 的名称相同，可以用 --name=&#x27;hpa-name&#x27; 指定hpa的名称# replicas 变动范围是最小 1，最大 10# 目标cpu利用率为 50%，上面我们设定 CPU request 值为 200m，所以当平均cpu值为 100m 时就会触发 autoscale# 这里说平均cpu，是指所有pod的cpu利用率的平均值$ k autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10horizontalpodautoscaler.autoscaling/php-apache autoscaled# 也可以通过yaml创建apiVersion: autoscaling/v2kind: HorizontalPodAutoscalermetadata: name: php-apache namespace: testspec: maxReplicas: 10 minReplicas: 1 metrics: - resource: name: cpu target: averageUtilization: 50 type: Utilization type: Resource scaleTargetRef: apiVersion: apps/v1 kind: Deployment name: php-apache 查看HPA 123$ k get hpaNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGEphp-apache Deployment/php-apache 0%/50% 1 10 1 29s 测试HPA 12345678910111213141516171819202122232425262728293031# 通过运行容器为 Web 服务器创建负载# 这里利用 busybox 镜像临时生成一个 pod，用 while 循环不停的访问 php-apache 的 service，而 php-apache 中的 hpa-example 镜像已经配置了进行消耗 CPU 的计算网页，所以 php-apache pod 的 CPU 负载会很快增长# 该命令会一直运行，直到 Ctrl+C$ kubectl run -i \\ --tty load-generator \\ --rm --image=busybox \\ --restart=Never \\ -- /bin/sh -c &quot;while sleep 0.01; do wget -q -O- http://php-apache; done&quot;# 上面的命令运行一会后再开一个终端查看hpa的情况，可以看到已经发生扩容了$ k get hpaNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGEphp-apache Deployment/php-apache 57%/50% 1 10 7 5m27s# 运行一段时间后发现hpa稳定在8个，说明此时pod的数量已经满足平均cpu使用率小于50%的目标$ k get hpaNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGEphp-apache Deployment/php-apache 43%/50% 1 10 8 20m# 查看pod的cpu使用情况，虽然此时也有个别的pod大于100m，但是8个pod的平均cpu是小于100m的，此时就不会再进行扩容了$ k top podNAME CPU(cores) MEMORY(bytes)php-apache-7495ff8f5b-2kjsc 98m 11Miphp-apache-7495ff8f5b-49vb9 85m 11Miphp-apache-7495ff8f5b-65r62 100m 11Miphp-apache-7495ff8f5b-7mn9l 79m 11Miphp-apache-7495ff8f5b-7njtt 74m 11Miphp-apache-7495ff8f5b-8n5t6 88m 11Miphp-apache-7495ff8f5b-spvnh 103m 11Miphp-apache-7495ff8f5b-w64f4 101m 11Mi 此时Ctrl+C中断测试容器，过一会查看hpa和pod的情况，可以看到平均 CPU 负载已经降到 0 了，但 REPLICAS 还是 8 个，不会立即降低，不要着急，大约5分钟左右 REPLICAS 最终变为 1 123456789101112131415161718$ k get hpaNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGEphp-apache Deployment/php-apache 0%/50% 1 10 8 26m$ k top podNAME CPU(cores) MEMORY(bytes)php-apache-7495ff8f5b-2kjsc 1m 11Miphp-apache-7495ff8f5b-49vb9 1m 11Miphp-apache-7495ff8f5b-65r62 1m 11Miphp-apache-7495ff8f5b-7mn9l 1m 11Miphp-apache-7495ff8f5b-7njtt 1m 11Miphp-apache-7495ff8f5b-8n5t6 1m 11Miphp-apache-7495ff8f5b-spvnh 1m 11Miphp-apache-7495ff8f5b-w64f4 1m 11Mi# 可以看到hpa的 AGE 在26m时还是8个，30m时就降为1个了$ k get hpaNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGEphp-apache Deployment/php-apache 0%/50% 1 10 1 30m 删除HPA 12$ k delete hpa php-apachehorizontalpodautoscaler.autoscaling &quot;php-apache&quot; deleted","summary":"摘要 本文介绍在EKS集群下创建HPA的方法 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-17T12:30:05.000Z","tags":["技术","aws","eks","eks"]},{"id":"https://blog.hanqunfeng.com/2023/07/14/aws-eks16-servcieaccount/","url":"https://blog.hanqunfeng.com/2023/07/14/aws-eks16-servcieaccount/","title":"AWS-EKS-16--聊一聊ServiceAccount","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文聊一聊ServiceAccount</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"聊一聊ServiceAccount\">聊一聊ServiceAccount</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>网上关于ServiceAccount的介绍有很多，但大多都比较晦涩难懂，不好理解，这里我基于自己的理解聊一聊ServiceAccount。</p>\n</li>\n<li class=\"lvl-2\">\n<p>ServiceAccount是k8s中的用户，其被定义在namespace下，可以被关联到pod上，使其获得相应的权限。</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">ServiceAccount可以与k8s中的Role或者ClusterRole进行绑定，以使其具有访问k8s内部资源的权限，当pod关联ServiceAccount后也就获得了相应的权限。参考<a href=\"/2023/07/07/aws-eks12-dashboard/\" title=\"AWS-EKS-12--部署 Dashboard UI\">AWS-EKS-12--部署 Dashboard UI</a></li>\n</ul>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dashboard-adminuser.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cluster-admin</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">ServiceAccount也可以被关联到IAM Role，以使其具有访问AWS资源的权限。当pod关联ServiceAccount后就获得了访问AWS资源的权限。参考<a href=\"/2023/07/13/aws-eks15-auth-pod/\" title=\"AWS-EKS-15--EKS权限管理(下)Pod 是如何调用 AWS 资源的\">AWS-EKS-15--EKS权限管理(下)Pod 是如何调用 AWS 资源的</a></li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ eksctl create iamserviceaccount \\</span><br><span class=\"line\">--cluster=eks-lexing \\</span><br><span class=\"line\">--profile eks-us-west-2 \\</span><br><span class=\"line\">--namespace=kube-system \\</span><br><span class=\"line\">--name=aws-load-balancer-controller \\</span><br><span class=\"line\">--role-name AmazonEKSLoadBalancerControllerRole \\</span><br><span class=\"line\">--attach-policy-arn=arn:aws:iam::743263909644:policy/AWSLoadBalancerControllerIAMPolicy \\</span><br><span class=\"line\">--approve</span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>ServiceAccount default 在 Kubernetes 中是默认存在的，它通常与运行在 Pod 内的应用程序关联，用于与 Kubernetes API 服务器进行身份验证和授权。default ServiceAccount 是每个命名空间中的默认 ServiceAccount，如果没有为 Pod 显式指定 ServiceAccount，则会自动关联到 default ServiceAccount。</p>\n</li>\n<li class=\"lvl-2\">\n<p>default ServiceAccount的权限是由所分配的角色（Role）或集群角色（ClusterRole）定义的。在默认情况下，default ServiceAccount没有任何特权或访问权限。它只能访问其所在命名空间的一些基本资源，例如查看自身的 Pod、Service、Endpoints 等。</p>\n</li>\n</ul>\n<h3 id=\"创建SA\">创建SA</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1，使用kubectl命令行直接创建</span></span><br><span class=\"line\">$ kubectl create serviceaccount &lt;serviceaccount-name&gt; -n &lt;namespace&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2，基于yaml</span></span><br><span class=\"line\"><span class=\"comment\"># sa.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &lt;serviceaccount-name&gt;</span><br><span class=\"line\">  namespace: &lt;namespace&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl apply -f sa.yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询SA\">查询SA</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get sa -n kubernetes-dashboard</span><br><span class=\"line\">NAME                   SECRETS   AGE</span><br><span class=\"line\">admin-user             0         8d</span><br><span class=\"line\">default                0         8d</span><br><span class=\"line\">kubernetes-dashboard   0         8d</span><br></pre></td></tr></table></figure>\n<h3 id=\"SA与Role或者ClusterRole进行绑定\">SA与Role或者ClusterRole进行绑定</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>SA绑定Role</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service-account</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-role</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">test</span>                                <span class=\"comment\"># 与ClusterRole的区别就是Role要绑定到Namespace</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]                                <span class=\"comment\"># 限定API组，为空则为默认的 core API 组</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>, <span class=\"string\">&quot;services&quot;</span>, <span class=\"string\">&quot;configmaps&quot;</span>]  <span class=\"comment\"># 要访问的资源</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>]                <span class=\"comment\"># 开放的权限</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-role-binding</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service-account</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-role</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>SA绑定ClusterRole</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service-account</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-cluster-role</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>, <span class=\"string\">&quot;services&quot;</span>, <span class=\"string\">&quot;configmaps&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-cluster-role-binding</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service-account</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-cluster-role</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>API组</strong></em><br>\nKubernetes中有许多常见的API组，每个API组都包含一组相关的资源。以下是一些常见的API组：</p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\"><code>core</code>：该API组是Kubernetes中的默认API组，包含核心资源，如pods、services、configmaps、secrets等。</li>\n<li class=\"lvl-2\"><code>apps</code>：该API组包含应用程序相关的资源，如deployments、replicasets、daemonsets、statefulsets等。</li>\n<li class=\"lvl-2\"><code>batch</code>：该API组包含批处理作业相关的资源，如jobs、cronjobs等。</li>\n<li class=\"lvl-2\"><code>extensions</code>：这是Kubernetes早期版本中广泛使用的API组，现在已经被<code>apps</code>和<code>networking.k8s.io</code> API组所取代。它包含一些资源，如replicationcontrollers、ingresses等。</li>\n<li class=\"lvl-2\"><code>networking.k8s.io</code>：该API组包含与网络相关的资源，如ingresses、networkpolicies等。</li>\n<li class=\"lvl-2\"><code>storage.k8s.io</code>：该API组包含存储相关的资源，如storageclasses、persistentvolumes、persistentvolumeclaims等。</li>\n<li class=\"lvl-2\"><code>autoscaling</code>：该API组包含自动扩展相关的资源，如horizontalpodautoscalers。</li>\n<li class=\"lvl-2\"><code>rbac.authorization.k8s.io</code>：该API组包含与角色和访问控制相关的资源，如roles、rolebindings、clusterroles、clusterrolebindings等。<br>\n这只是一小部分常见的API组，实际上还有许多其他的API组，根据您的Kubernetes集群的版本和所使用的插件，可能会有其他自定义的API组。您可以使用<code>kubectl api-resources</code>命令查看集群中所有可用的API组和资源。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里 APIVERSION 中版本中斜线前面的就是 API组名称 ,没有斜线的就是默认的 core 组</span></span><br><span class=\"line\">$ kubectl api-resources</span><br><span class=\"line\">NAME                              SHORTNAMES   APIVERSION                             NAMESPACED   KIND</span><br><span class=\"line\">bindings                                       v1                                     <span class=\"literal\">true</span>         Binding</span><br><span class=\"line\">componentstatuses                 cs           v1                                     <span class=\"literal\">false</span>        ComponentStatus</span><br><span class=\"line\">configmaps                        cm           v1                                     <span class=\"literal\">true</span>         ConfigMap</span><br><span class=\"line\">endpoints                         ep           v1                                     <span class=\"literal\">true</span>         Endpoints</span><br><span class=\"line\">events                            ev           v1                                     <span class=\"literal\">true</span>         Event</span><br><span class=\"line\">limitranges                       limits       v1                                     <span class=\"literal\">true</span>         LimitRange</span><br><span class=\"line\">namespaces                        ns           v1                                     <span class=\"literal\">false</span>        Namespace</span><br><span class=\"line\">nodes                             no           v1                                     <span class=\"literal\">false</span>        Node</span><br><span class=\"line\">persistentvolumeclaims            pvc          v1                                     <span class=\"literal\">true</span>         PersistentVolumeClaim</span><br><span class=\"line\">persistentvolumes                 pv           v1                                     <span class=\"literal\">false</span>        PersistentVolume</span><br><span class=\"line\">pods                              po           v1                                     <span class=\"literal\">true</span>         Pod</span><br><span class=\"line\">podtemplates                                   v1                                     <span class=\"literal\">true</span>         PodTemplate</span><br><span class=\"line\">replicationcontrollers            rc           v1                                     <span class=\"literal\">true</span>         ReplicationController</span><br><span class=\"line\">resourcequotas                    quota        v1                                     <span class=\"literal\">true</span>         ResourceQuota</span><br><span class=\"line\">secrets                                        v1                                     <span class=\"literal\">true</span>         Secret</span><br><span class=\"line\">serviceaccounts                   sa           v1                                     <span class=\"literal\">true</span>         ServiceAccount</span><br><span class=\"line\">services                          svc          v1                                     <span class=\"literal\">true</span>         Service</span><br><span class=\"line\">mutatingwebhookconfigurations                  admissionregistration.k8s.io/v1        <span class=\"literal\">false</span>        MutatingWebhookConfiguration</span><br><span class=\"line\">validatingwebhookconfigurations                admissionregistration.k8s.io/v1        <span class=\"literal\">false</span>        ValidatingWebhookConfiguration</span><br><span class=\"line\">customresourcedefinitions         crd,crds     apiextensions.k8s.io/v1                <span class=\"literal\">false</span>        CustomResourceDefinition</span><br><span class=\"line\">apiservices                                    apiregistration.k8s.io/v1              <span class=\"literal\">false</span>        APIService</span><br><span class=\"line\">controllerrevisions                            apps/v1                                <span class=\"literal\">true</span>         ControllerRevision</span><br><span class=\"line\">daemonsets                        ds           apps/v1                                <span class=\"literal\">true</span>         DaemonSet</span><br><span class=\"line\">deployments                       deploy       apps/v1                                <span class=\"literal\">true</span>         Deployment</span><br><span class=\"line\">replicasets                       rs           apps/v1                                <span class=\"literal\">true</span>         ReplicaSet</span><br><span class=\"line\">statefulsets                      sts          apps/v1                                <span class=\"literal\">true</span>         StatefulSet</span><br><span class=\"line\">tokenreviews                                   authentication.k8s.io/v1               <span class=\"literal\">false</span>        TokenReview</span><br><span class=\"line\">localsubjectaccessreviews                      authorization.k8s.io/v1                <span class=\"literal\">true</span>         LocalSubjectAccessReview</span><br><span class=\"line\">selfsubjectaccessreviews                       authorization.k8s.io/v1                <span class=\"literal\">false</span>        SelfSubjectAccessReview</span><br><span class=\"line\">selfsubjectrulesreviews                        authorization.k8s.io/v1                <span class=\"literal\">false</span>        SelfSubjectRulesReview</span><br><span class=\"line\">subjectaccessreviews                           authorization.k8s.io/v1                <span class=\"literal\">false</span>        SubjectAccessReview</span><br><span class=\"line\">horizontalpodautoscalers          hpa          autoscaling/v2                         <span class=\"literal\">true</span>         HorizontalPodAutoscaler</span><br><span class=\"line\">cronjobs                          cj           batch/v1                               <span class=\"literal\">true</span>         CronJob</span><br><span class=\"line\"><span class=\"built_in\">jobs</span>                                           batch/v1                               <span class=\"literal\">true</span>         Job</span><br><span class=\"line\">certificatesigningrequests        csr          certificates.k8s.io/v1                 <span class=\"literal\">false</span>        CertificateSigningRequest</span><br><span class=\"line\">leases                                         coordination.k8s.io/v1                 <span class=\"literal\">true</span>         Lease</span><br><span class=\"line\">eniconfigs                                     crd.k8s.amazonaws.com/v1alpha1         <span class=\"literal\">false</span>        ENIConfig</span><br><span class=\"line\">endpointslices                                 discovery.k8s.io/v1                    <span class=\"literal\">true</span>         EndpointSlice</span><br><span class=\"line\">ingressclassparams                             elbv2.k8s.aws/v1beta1                  <span class=\"literal\">false</span>        IngressClassParams</span><br><span class=\"line\">targetgroupbindings                            elbv2.k8s.aws/v1beta1                  <span class=\"literal\">true</span>         TargetGroupBinding</span><br><span class=\"line\">events                            ev           events.k8s.io/v1                       <span class=\"literal\">true</span>         Event</span><br><span class=\"line\">flowschemas                                    flowcontrol.apiserver.k8s.io/v1beta3   <span class=\"literal\">false</span>        FlowSchema</span><br><span class=\"line\">prioritylevelconfigurations                    flowcontrol.apiserver.k8s.io/v1beta3   <span class=\"literal\">false</span>        PriorityLevelConfiguration</span><br><span class=\"line\">nodes                                          metrics.k8s.io/v1beta1                 <span class=\"literal\">false</span>        NodeMetrics</span><br><span class=\"line\">pods                                           metrics.k8s.io/v1beta1                 <span class=\"literal\">true</span>         PodMetrics</span><br><span class=\"line\">ingressclasses                                 networking.k8s.io/v1                   <span class=\"literal\">false</span>        IngressClass</span><br><span class=\"line\">ingresses                         ing          networking.k8s.io/v1                   <span class=\"literal\">true</span>         Ingress</span><br><span class=\"line\">networkpolicies                   netpol       networking.k8s.io/v1                   <span class=\"literal\">true</span>         NetworkPolicy</span><br><span class=\"line\">runtimeclasses                                 node.k8s.io/v1                         <span class=\"literal\">false</span>        RuntimeClass</span><br><span class=\"line\">poddisruptionbudgets              pdb          policy/v1                              <span class=\"literal\">true</span>         PodDisruptionBudget</span><br><span class=\"line\">clusterrolebindings                            rbac.authorization.k8s.io/v1           <span class=\"literal\">false</span>        ClusterRoleBinding</span><br><span class=\"line\">clusterroles                                   rbac.authorization.k8s.io/v1           <span class=\"literal\">false</span>        ClusterRole</span><br><span class=\"line\">rolebindings                                   rbac.authorization.k8s.io/v1           <span class=\"literal\">true</span>         RoleBinding</span><br><span class=\"line\">roles                                          rbac.authorization.k8s.io/v1           <span class=\"literal\">true</span>         Role</span><br><span class=\"line\">priorityclasses                   pc           scheduling.k8s.io/v1                   <span class=\"literal\">false</span>        PriorityClass</span><br><span class=\"line\">csidrivers                                     storage.k8s.io/v1                      <span class=\"literal\">false</span>        CSIDriver</span><br><span class=\"line\">csinodes                                       storage.k8s.io/v1                      <span class=\"literal\">false</span>        CSINode</span><br><span class=\"line\">csistoragecapacities                           storage.k8s.io/v1                      <span class=\"literal\">true</span>         CSIStorageCapacity</span><br><span class=\"line\">storageclasses                    sc           storage.k8s.io/v1                      <span class=\"literal\">false</span>        StorageClass</span><br><span class=\"line\">volumeattachments                              storage.k8s.io/v1                      <span class=\"literal\">false</span>        VolumeAttachment</span><br><span class=\"line\">securitygrouppolicies             sgp          vpcresources.k8s.aws/v1beta1           <span class=\"literal\">true</span>         SecurityGroupPolicy</span><br></pre></td></tr></table></figure>\n</div>\n<h3 id=\"SA与Deployment或者Pod关联\">SA与Deployment或者Pod关联</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>SA与Deployment关联</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">my-app</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">my-app</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">my-service-account</span>  <span class=\"comment\"># 指定sa名称</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">my-container</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">my-image</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>SA与Pod关联</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">my-service-account</span>     <span class=\"comment\"># 指定sa名称</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">my-container</span></span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">my-image</span></span><br></pre></td></tr></table></figure>\n<div class=\"tips\">\n<p><em><strong>小贴士</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">serviceAccount 和 serviceAccountName 是 Kubernetes YAML 配置中用于关联 Service Account 的两个属性，它们有一些区别：</li>\n<li class=\"lvl-2\">serviceAccountName：这是一个字符串属性，用于指定要与 Pod 或 Deployment 关联的 Service Account 的名称。它是最常用的属性，只需提供 Service Account 的名称即可。示例：serviceAccountName: my-service-account</li>\n<li class=\"lvl-2\">serviceAccount：这是一个对象属性，用于指定要与 Pod 或 Deployment 关联的 Service Account 的更详细信息。它可以提供 Service Account 的名称和命名空间。示例：</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">serviceAccount:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service-account</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">my-namespace</span></span><br></pre></td></tr></table></figure>\n<p>注意：namespace 字段是可选的，如果不指定，它将使用当前 Pod 或 Deployment 所在的命名空间。</p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">总结来说，serviceAccountName 是一种更简洁的方式，只需提供 Service Account 的名称。而 serviceAccount 则可以提供更多关于 Service Account 的详细信息，如名称和命名空间。在大多数情况下，使用 serviceAccountName 就足够了，除非需要更精细地控制 Service Account 的属性。</li>\n</ul>\n</div>\n<h3 id=\"查询指定的SA被绑定到哪些角色\">查询指定的SA被绑定到哪些角色</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get rolebindings,clusterrolebindings -A \\</span><br><span class=\"line\">-o <span class=\"string\">&#x27;custom-columns=KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,ROLE-KIND:.roleRef.kind,ROLE:.roleRef.name, SUBJECT-KIND:.subjects[*].kind,SUBJECT-NAMESPACE:.subjects[*].namespace,SUBJECT-NAME:.subjects[*].name&#x27;</span> \\</span><br><span class=\"line\">| (<span class=\"built_in\">head</span> -n 1 &amp;&amp; awk <span class=\"string\">&#x27;&#123;if ($8 == &quot;kubernetes-dashboard&quot;) print&#125;&#x27;</span>)</span><br><span class=\"line\">KIND                 NAMESPACE              NAME                                                           ROLE-KIND     ROLE                                                    SUBJECT-KIND         SUBJECT-NAMESPACE      SUBJECT-NAME</span><br><span class=\"line\">RoleBinding          kubernetes-dashboard   kubernetes-dashboard                                           Role          kubernetes-dashboard                                   ServiceAccount        kubernetes-dashboard   kubernetes-dashboard</span><br><span class=\"line\">ClusterRoleBinding   &lt;none&gt;                 kubernetes-dashboard                                           ClusterRole   kubernetes-dashboard                                   ServiceAccount        kubernetes-dashboard   kubernetes-dashboard</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询指定的SA被关联到哪些deploy\">查询指定的SA被关联到哪些deploy</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get deploy -A \\</span><br><span class=\"line\">-o <span class=\"string\">&#x27;custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,SERVICEACCOUNT:.spec.template.spec.serviceAccountName&#x27;</span> \\</span><br><span class=\"line\">| (<span class=\"built_in\">head</span> -n 1 &amp;&amp; awk <span class=\"string\">&#x27;&#123;if ($3 == &quot;kubernetes-dashboard&quot;) print&#125;&#x27;</span>)</span><br><span class=\"line\">NAMESPACE              NAME                           SERVICEACCOUNT</span><br><span class=\"line\">kubernetes-dashboard   dashboard-metrics-scraper      kubernetes-dashboard</span><br><span class=\"line\">kubernetes-dashboard   kubernetes-dashboard           kubernetes-dashboard</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询指定的SA被关联到哪些pod\">查询指定的SA被关联到哪些pod</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get pod -A \\</span><br><span class=\"line\">-o <span class=\"string\">&#x27;custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,SERVICEACCOUNT:.spec.serviceAccountName&#x27;</span> \\</span><br><span class=\"line\">| (<span class=\"built_in\">head</span> -n 1 &amp;&amp; awk <span class=\"string\">&#x27;&#123;if ($3 == &quot;kubernetes-dashboard&quot;) print&#125;&#x27;</span>)</span><br><span class=\"line\">NAMESPACE              NAME                                            SERVICEACCOUNT</span><br><span class=\"line\">kubernetes-dashboard   dashboard-metrics-scraper-7bc864c59-sqjq8       kubernetes-dashboard</span><br><span class=\"line\">kubernetes-dashboard   kubernetes-dashboard-6c7ccbcf87-zb2hb           kubernetes-dashboard</span><br></pre></td></tr></table></figure>\n<h3 id=\"编辑SA\">编辑SA</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>比如我们要为已经创建好的SA关联AWS IAM角色，需要编辑SA，将IAM角色添加到SA的注释中。</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">k</span> <span class=\"string\">edit</span> <span class=\"string\">sa</span> <span class=\"string\">-n</span> <span class=\"string\">kube-system</span> <span class=\"string\">aws-load-balancer-controller</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">eks.amazonaws.com/role-arn:</span> <span class=\"string\">arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControllerRole</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"string\">&quot;2023-07-04T09:20:41Z&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/managed-by:</span> <span class=\"string\">eksctl</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">aws-load-balancer-controller</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">resourceVersion:</span> <span class=\"string\">&quot;1707669&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">uid:</span> <span class=\"string\">857200a6-2e16-4939-bbbc-483dd579acbb</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>也可以直接通过命令行添加注解</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl annotate serviceaccount aws-load-balancer-controller \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  eks.amazonaws.com/role-arn=arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControll</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>ServiceAccount被修改过后，关联的pod需要重新启动才能生效。</p>\n</li>\n</ul>\n","content_text":"摘要 本文聊一聊ServiceAccount 参考资料： Amazon EKS用户指南 Kubernetes 文档 聊一聊ServiceAccount 网上关于ServiceAccount的介绍有很多，但大多都比较晦涩难懂，不好理解，这里我基于自己的理解聊一聊ServiceAccount。 ServiceAccount是k8s中的用户，其被定义在namespace下，可以被关联到pod上，使其获得相应的权限。 ServiceAccount可以与k8s中的Role或者ClusterRole进行绑定，以使其具有访问k8s内部资源的权限，当pod关联ServiceAccount后也就获得了相应的权限。参考AWS-EKS-12--部署 Dashboard UI 12345678910111213141516171819# dashboard-adminuser.yamlapiVersion: v1kind: ServiceAccountmetadata: name: admin-user namespace: kubernetes-dashboard---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: admin-userroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: admin-user namespace: kubernetes-dashboard ServiceAccount也可以被关联到IAM Role，以使其具有访问AWS资源的权限。当pod关联ServiceAccount后就获得了访问AWS资源的权限。参考AWS-EKS-15--EKS权限管理(下)Pod 是如何调用 AWS 资源的 12345678$ eksctl create iamserviceaccount \\--cluster=eks-lexing \\--profile eks-us-west-2 \\--namespace=kube-system \\--name=aws-load-balancer-controller \\--role-name AmazonEKSLoadBalancerControllerRole \\--attach-policy-arn=arn:aws:iam::743263909644:policy/AWSLoadBalancerControllerIAMPolicy \\--approve ServiceAccount default 在 Kubernetes 中是默认存在的，它通常与运行在 Pod 内的应用程序关联，用于与 Kubernetes API 服务器进行身份验证和授权。default ServiceAccount 是每个命名空间中的默认 ServiceAccount，如果没有为 Pod 显式指定 ServiceAccount，则会自动关联到 default ServiceAccount。 default ServiceAccount的权限是由所分配的角色（Role）或集群角色（ClusterRole）定义的。在默认情况下，default ServiceAccount没有任何特权或访问权限。它只能访问其所在命名空间的一些基本资源，例如查看自身的 Pod、Service、Endpoints 等。 创建SA 123456789101112# 方式1，使用kubectl命令行直接创建$ kubectl create serviceaccount &lt;serviceaccount-name&gt; -n &lt;namespace&gt;# 方式2，基于yaml# sa.yamlapiVersion: v1kind: ServiceAccountmetadata: name: &lt;serviceaccount-name&gt; namespace: &lt;namespace&gt;$ kubectl apply -f sa.yaml 查询SA 12345$ k get sa -n kubernetes-dashboardNAME SECRETS AGEadmin-user 0 8ddefault 0 8dkubernetes-dashboard 0 8d SA与Role或者ClusterRole进行绑定 SA绑定Role 12345678910111213141516171819202122232425262728apiVersion: v1kind: ServiceAccountmetadata: name: my-service-account namespace: test---apiVersion: rbac.authorization.k8s.io/v1kind: Rolemetadata: name: my-role namespace: test # 与ClusterRole的区别就是Role要绑定到Namespacerules:- apiGroups: [&quot;&quot;] # 限定API组，为空则为默认的 core API 组 resources: [&quot;pods&quot;, &quot;services&quot;, &quot;configmaps&quot;] # 要访问的资源 verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;] # 开放的权限---apiVersion: rbac.authorization.k8s.io/v1kind: RoleBindingmetadata: name: my-role-bindingsubjects:- kind: ServiceAccount name: my-service-account namespace: testroleRef: kind: Role name: my-role apiGroup: rbac.authorization.k8s.io SA绑定ClusterRole 123456789101112131415161718192021222324252627apiVersion: v1kind: ServiceAccountmetadata: name: my-service-account namespace: test---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata: name: my-cluster-rolerules:- apiGroups: [&quot;&quot;] resources: [&quot;pods&quot;, &quot;services&quot;, &quot;configmaps&quot;] verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: my-cluster-role-bindingsubjects:- kind: ServiceAccount name: my-service-account namespace: testroleRef: kind: ClusterRole name: my-cluster-role apiGroup: rbac.authorization.k8s.io API组 Kubernetes中有许多常见的API组，每个API组都包含一组相关的资源。以下是一些常见的API组： core：该API组是Kubernetes中的默认API组，包含核心资源，如pods、services、configmaps、secrets等。 apps：该API组包含应用程序相关的资源，如deployments、replicasets、daemonsets、statefulsets等。 batch：该API组包含批处理作业相关的资源，如jobs、cronjobs等。 extensions：这是Kubernetes早期版本中广泛使用的API组，现在已经被apps和networking.k8s.io API组所取代。它包含一些资源，如replicationcontrollers、ingresses等。 networking.k8s.io：该API组包含与网络相关的资源，如ingresses、networkpolicies等。 storage.k8s.io：该API组包含存储相关的资源，如storageclasses、persistentvolumes、persistentvolumeclaims等。 autoscaling：该API组包含自动扩展相关的资源，如horizontalpodautoscalers。 rbac.authorization.k8s.io：该API组包含与角色和访问控制相关的资源，如roles、rolebindings、clusterroles、clusterrolebindings等。 这只是一小部分常见的API组，实际上还有许多其他的API组，根据您的Kubernetes集群的版本和所使用的插件，可能会有其他自定义的API组。您可以使用kubectl api-resources命令查看集群中所有可用的API组和资源。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364# 这里 APIVERSION 中版本中斜线前面的就是 API组名称 ,没有斜线的就是默认的 core 组$ kubectl api-resourcesNAME SHORTNAMES APIVERSION NAMESPACED KINDbindings v1 true Bindingcomponentstatuses cs v1 false ComponentStatusconfigmaps cm v1 true ConfigMapendpoints ep v1 true Endpointsevents ev v1 true Eventlimitranges limits v1 true LimitRangenamespaces ns v1 false Namespacenodes no v1 false Nodepersistentvolumeclaims pvc v1 true PersistentVolumeClaimpersistentvolumes pv v1 false PersistentVolumepods po v1 true Podpodtemplates v1 true PodTemplatereplicationcontrollers rc v1 true ReplicationControllerresourcequotas quota v1 true ResourceQuotasecrets v1 true Secretserviceaccounts sa v1 true ServiceAccountservices svc v1 true Servicemutatingwebhookconfigurations admissionregistration.k8s.io/v1 false MutatingWebhookConfigurationvalidatingwebhookconfigurations admissionregistration.k8s.io/v1 false ValidatingWebhookConfigurationcustomresourcedefinitions crd,crds apiextensions.k8s.io/v1 false CustomResourceDefinitionapiservices apiregistration.k8s.io/v1 false APIServicecontrollerrevisions apps/v1 true ControllerRevisiondaemonsets ds apps/v1 true DaemonSetdeployments deploy apps/v1 true Deploymentreplicasets rs apps/v1 true ReplicaSetstatefulsets sts apps/v1 true StatefulSettokenreviews authentication.k8s.io/v1 false TokenReviewlocalsubjectaccessreviews authorization.k8s.io/v1 true LocalSubjectAccessReviewselfsubjectaccessreviews authorization.k8s.io/v1 false SelfSubjectAccessReviewselfsubjectrulesreviews authorization.k8s.io/v1 false SelfSubjectRulesReviewsubjectaccessreviews authorization.k8s.io/v1 false SubjectAccessReviewhorizontalpodautoscalers hpa autoscaling/v2 true HorizontalPodAutoscalercronjobs cj batch/v1 true CronJobjobs batch/v1 true Jobcertificatesigningrequests csr certificates.k8s.io/v1 false CertificateSigningRequestleases coordination.k8s.io/v1 true Leaseeniconfigs crd.k8s.amazonaws.com/v1alpha1 false ENIConfigendpointslices discovery.k8s.io/v1 true EndpointSliceingressclassparams elbv2.k8s.aws/v1beta1 false IngressClassParamstargetgroupbindings elbv2.k8s.aws/v1beta1 true TargetGroupBindingevents ev events.k8s.io/v1 true Eventflowschemas flowcontrol.apiserver.k8s.io/v1beta3 false FlowSchemaprioritylevelconfigurations flowcontrol.apiserver.k8s.io/v1beta3 false PriorityLevelConfigurationnodes metrics.k8s.io/v1beta1 false NodeMetricspods metrics.k8s.io/v1beta1 true PodMetricsingressclasses networking.k8s.io/v1 false IngressClassingresses ing networking.k8s.io/v1 true Ingressnetworkpolicies netpol networking.k8s.io/v1 true NetworkPolicyruntimeclasses node.k8s.io/v1 false RuntimeClasspoddisruptionbudgets pdb policy/v1 true PodDisruptionBudgetclusterrolebindings rbac.authorization.k8s.io/v1 false ClusterRoleBindingclusterroles rbac.authorization.k8s.io/v1 false ClusterRolerolebindings rbac.authorization.k8s.io/v1 true RoleBindingroles rbac.authorization.k8s.io/v1 true Rolepriorityclasses pc scheduling.k8s.io/v1 false PriorityClasscsidrivers storage.k8s.io/v1 false CSIDrivercsinodes storage.k8s.io/v1 false CSINodecsistoragecapacities storage.k8s.io/v1 true CSIStorageCapacitystorageclasses sc storage.k8s.io/v1 false StorageClassvolumeattachments storage.k8s.io/v1 false VolumeAttachmentsecuritygrouppolicies sgp vpcresources.k8s.aws/v1beta1 true SecurityGroupPolicy SA与Deployment或者Pod关联 SA与Deployment关联 123456789101112131415161718apiVersion: apps/v1kind: Deploymentmetadata: name: my-deploymentspec: replicas: 3 selector: matchLabels: app: my-app template: metadata: labels: app: my-app spec: serviceAccountName: my-service-account # 指定sa名称 containers: - name: my-container image: my-image SA与Pod关联 123456789apiVersion: v1kind: Podmetadata: name: my-podspec: serviceAccountName: my-service-account # 指定sa名称 containers: - name: my-container image: my-image 小贴士 serviceAccount 和 serviceAccountName 是 Kubernetes YAML 配置中用于关联 Service Account 的两个属性，它们有一些区别： serviceAccountName：这是一个字符串属性，用于指定要与 Pod 或 Deployment 关联的 Service Account 的名称。它是最常用的属性，只需提供 Service Account 的名称即可。示例：serviceAccountName: my-service-account serviceAccount：这是一个对象属性，用于指定要与 Pod 或 Deployment 关联的 Service Account 的更详细信息。它可以提供 Service Account 的名称和命名空间。示例： 123serviceAccount: name: my-service-account namespace: my-namespace 注意：namespace 字段是可选的，如果不指定，它将使用当前 Pod 或 Deployment 所在的命名空间。 总结来说，serviceAccountName 是一种更简洁的方式，只需提供 Service Account 的名称。而 serviceAccount 则可以提供更多关于 Service Account 的详细信息，如名称和命名空间。在大多数情况下，使用 serviceAccountName 就足够了，除非需要更精细地控制 Service Account 的属性。 查询指定的SA被绑定到哪些角色 123456$ kubectl get rolebindings,clusterrolebindings -A \\-o &#x27;custom-columns=KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,ROLE-KIND:.roleRef.kind,ROLE:.roleRef.name, SUBJECT-KIND:.subjects[*].kind,SUBJECT-NAMESPACE:.subjects[*].namespace,SUBJECT-NAME:.subjects[*].name&#x27; \\| (head -n 1 &amp;&amp; awk &#x27;&#123;if ($8 == &quot;kubernetes-dashboard&quot;) print&#125;&#x27;)KIND NAMESPACE NAME ROLE-KIND ROLE SUBJECT-KIND SUBJECT-NAMESPACE SUBJECT-NAMERoleBinding kubernetes-dashboard kubernetes-dashboard Role kubernetes-dashboard ServiceAccount kubernetes-dashboard kubernetes-dashboardClusterRoleBinding &lt;none&gt; kubernetes-dashboard ClusterRole kubernetes-dashboard ServiceAccount kubernetes-dashboard kubernetes-dashboard 查询指定的SA被关联到哪些deploy 123456$ k get deploy -A \\-o &#x27;custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,SERVICEACCOUNT:.spec.template.spec.serviceAccountName&#x27; \\| (head -n 1 &amp;&amp; awk &#x27;&#123;if ($3 == &quot;kubernetes-dashboard&quot;) print&#125;&#x27;)NAMESPACE NAME SERVICEACCOUNTkubernetes-dashboard dashboard-metrics-scraper kubernetes-dashboardkubernetes-dashboard kubernetes-dashboard kubernetes-dashboard 查询指定的SA被关联到哪些pod 123456$ k get pod -A \\-o &#x27;custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,SERVICEACCOUNT:.spec.serviceAccountName&#x27; \\| (head -n 1 &amp;&amp; awk &#x27;&#123;if ($3 == &quot;kubernetes-dashboard&quot;) print&#125;&#x27;)NAMESPACE NAME SERVICEACCOUNTkubernetes-dashboard dashboard-metrics-scraper-7bc864c59-sqjq8 kubernetes-dashboardkubernetes-dashboard kubernetes-dashboard-6c7ccbcf87-zb2hb kubernetes-dashboard 编辑SA 比如我们要为已经创建好的SA关联AWS IAM角色，需要编辑SA，将IAM角色添加到SA的注释中。 12345678910111213$ k edit sa -n kube-system aws-load-balancer-controllerapiVersion: v1kind: ServiceAccountmetadata: annotations: eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControllerRole creationTimestamp: &quot;2023-07-04T09:20:41Z&quot; labels: app.kubernetes.io/managed-by: eksctl name: aws-load-balancer-controller namespace: kube-system resourceVersion: &quot;1707669&quot; uid: 857200a6-2e16-4939-bbbc-483dd579acbb 也可以直接通过命令行添加注解 123$ kubectl annotate serviceaccount aws-load-balancer-controller \\ -n kube-system \\ eks.amazonaws.com/role-arn=arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControll ServiceAccount被修改过后，关联的pod需要重新启动才能生效。","summary":"摘要 本文聊一聊ServiceAccount 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-14T12:30:05.000Z","tags":["技术","aws","eks","eks"]},{"id":"https://blog.hanqunfeng.com/2023/07/13/aws-eks15-auth-pod/","url":"https://blog.hanqunfeng.com/2023/07/13/aws-eks15-auth-pod/","title":"AWS-EKS-15--EKS权限管理(下)Pod 是如何调用 AWS 资源的","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为EKS集群的 Pod 调用 AWS 资源的方法</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"原理解析\">原理解析</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在Pod中访问AWS资源，如获取S3中的文件，将ingress绑定到ELB，等等，这些操作都需要被授予相应的权限才可以正常访问。</p>\n</li>\n<li class=\"lvl-2\">\n<p>在AWS IAM中的Role可以被授权给基于OIDC身份提供商的外部用户，而在EKS集群中的pod对于AWS IAM来说就属于外部用户，AWS会通过IAM OIDC对这些外部用户的有效性进行校验。</p>\n</li>\n<li class=\"lvl-2\">\n<p>前文已经介绍过<a href=\"/2023/07/07/aws-eks03-oidc/\" title=\"AWS-EKS-03--创建 IAM OIDC 身份提供商\">如何为EKS创建 IAM OIDC 身份提供商</a>，在EKS(K8s)中，并不是直接对Pod进行权限校验，而是ServcieAccount，在 K8s 中，ServiceAccount 是一种用于身份验证和授权的机制，它为 Pod 提供了一个身份标识。每个 Pod 都与一个 ServiceAccount 相关联，并且可以使用该 ServiceAccount 获取与其关联的身份凭据。</p>\n</li>\n<li class=\"lvl-2\">\n<p>在EKS（K8s）中可以将ServcieAccount与AWS IAM Role进行绑定，同时将ServcieAccount与Pod进行关联，这样Pod也就具备了相应的IAM Role。</p>\n</li>\n<li class=\"lvl-2\">\n<p>EKS（K8s）的 ServcieAccount 通过 Idp（EKS OpenID Connect provider）获得 ID_token并将其发送给 IAM Identity providers ，IAM Identity providers负责获取OIDC的key并验证ID_token的有效性。</p>\n</li>\n<li class=\"lvl-2\">\n<p>当ServcieAccount通过IAM OIDC身份校验后，关联的Pod就可以使用相对应的Role获得访问AWS资源的权限。</p>\n</li>\n<li class=\"lvl-2\">\n<p>创建Pod时，如果没有为其指定关联的ServcieAccount，则默认使用Pod所在Namespace下的名称为<code>default</code>的ServcieAccount，创建Namespace时会自动为其创建该缺省的ServcieAccount，默认其没有绑定任何IAM Role，则缺省继承NodeGroup的IAM Role，NodeGroup的IAM Role是在创建EKS集群时自动创建的，其具有对ECR存储库的只读访问、允许Amazon EKS工作节点连接到Amazon EKS群集等权限。<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/fXD4pY.png\" alt=\"\" width=\"1200\" height=\"800\"></p>\n</li>\n<li class=\"lvl-2\">\n<p>Amazon EKS Pod Identity Webhook 会查看与 service account 关联的 Pods，并向 Pod 提供下列环境变量</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">AWS_ROLE_ARN=arn:aws:iam::&lt;ACCOUNT_ID&gt;:role/&lt;IAM_ROLE_NAME&gt;</li>\n<li class=\"lvl-6\">AWS_WEB_IDENTITY_TOKEN_FILE=/var/run/secrets/eks.amazonaws.com/serviceaccount/token</li>\n</ul>\n</li>\n<li class=\"lvl-2\">\n<p><code>AWS_ROLE_ARN</code>就是绑定到ServiceAccount上的IAM Role，<code>AWS_WEB_IDENTITY_TOKEN_FILE</code>就是要发送给IAM Identity providers的ID_token。</p>\n</li>\n<li class=\"lvl-2\">\n<p>默认只有以 root 用户运行的容器才有权限访问 web identity token 文件，当以其它用户运行容器时，需要用 fsGroup 指定一个 groupID。在 Amazon EKS 中，可以将 fsGroup 设置为 65534。这是 Kubernetes 中的推荐做法，因为这个值对应于 nobody 用户和 nogroup 组的 ID。使用 fsGroup: 65534 将确保容器中的非 root 用户具有适当的权限来访问 Web Identity Token 文件。</p>\n</li>\n</ul>\n<h2 id=\"案例分析\">案例分析</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>前面在<a href=\"/2023/07/07/aws-eks07-loadbalancer/\" title=\"AWS-EKS-07--安装 AWS Load Balancer Controller 附加组件\">安装 AWS Load Balancer Controller 附加组件</a>时，通过如下方式进行授权</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用上一步中下载的策略创建一个 IAM policy</span></span><br><span class=\"line\">$ aws iam create-policy \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --policy-name AWSLoadBalancerControllerIAMPolicy \\</span><br><span class=\"line\">    --policy-document file://iam_policy.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 AWS Load Balancer Controller 的 kube-system 命名空间中创建名为 aws-load-balancer-controller 的 Kubernetes 服务账户，并使用 IAM 角色的名称注释 Kubernetes 服务账户。</span></span><br><span class=\"line\">$ eksctl create iamserviceaccount \\</span><br><span class=\"line\">  --cluster=eks-lexing \\</span><br><span class=\"line\">  --profile eks-us-west-2 \\</span><br><span class=\"line\">  --namespace=kube-system \\</span><br><span class=\"line\">  --name=aws-load-balancer-controller \\</span><br><span class=\"line\">  --role-name AmazonEKSLoadBalancerControllerRole \\</span><br><span class=\"line\">  --attach-policy-arn=arn:aws:iam::743263909644:policy/AWSLoadBalancerControllerIAMPolicy \\</span><br><span class=\"line\">  --approve</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>上面是先通过<code>aws iam create-policy</code>命令创建了一个策略，然后通过<code>eksctl create iamserviceaccount</code>命令为EKS(K8s)创建了一个ServiceAccount，同时创建了一个IAM Role与ServiceAccount绑定，并将该Role与上面创建的策略进行关联。</p>\n</li>\n<li class=\"lvl-2\">\n<p>所以实际上，上面的一个命令干了四件事</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">\n<p>1.创建了一个名称为<code>AmazonEKSLoadBalancerControllerRole</code>的IAM角色并关联新建的名称为<code>AWSLoadBalancerControllerIAMPolicy</code>的策略<br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/xl0OSL.png\" alt=\"\" width=\"1200\" height=\"600\"></p>\n</li>\n<li class=\"lvl-6\">\n<p>2.在k8s的<code>kube-system</code>namespace下创建了一个名称为<code>aws-load-balancer-controller</code>的ServiceAccount</p>\n</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k get sa -n kube-system aws-load-balancer-controller</span><br><span class=\"line\">NAME                           SECRETS   AGE</span><br><span class=\"line\">aws-load-balancer-controller   0         9d</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">3.在名称为<code>AmazonEKSLoadBalancerControllerRole</code>的IAM角色的信任关系中指定认证方式为OIDC，并且关联名称为<code>aws-load-balancer-controller</code>的ServiceAccount。</li>\n</ul>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/MkTXd5.png\" alt=\"\" width=\"1200\" height=\"500\"></p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">\n<p>4.在名称为<code>aws-load-balancer-controller</code>的ServiceAccount中关联上面的角色<code>AmazonEKSLoadBalancerControllerRole</code>，就是添加注释<code>eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControll</code>。</p>\n</li>\n</ul>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">k</span> <span class=\"string\">edit</span> <span class=\"string\">sa</span> <span class=\"string\">-n</span> <span class=\"string\">kube-system</span> <span class=\"string\">aws-load-balancer-controller</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">eks.amazonaws.com/role-arn:</span> <span class=\"string\">arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControll</span></span><br><span class=\"line\"><span class=\"attr\">creationTimestamp:</span> <span class=\"string\">&quot;2023-07-04T09:20:41Z&quot;</span></span><br><span class=\"line\"><span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/managed-by:</span> <span class=\"string\">eksctl</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">aws-load-balancer-controller</span></span><br><span class=\"line\"><span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">resourceVersion:</span> <span class=\"string\">&quot;1707669&quot;</span></span><br><span class=\"line\"><span class=\"attr\">uid:</span> <span class=\"string\">857200a6-2e16-4939-bbbc-483dd579acbb</span></span><br></pre></td></tr></table></figure>\n</li>\n<li class=\"lvl-2\">\n<p>然后在创建Pod时，为Pod指定<code>serviceAccountName: aws-load-balancer-controller</code></p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">默认情况下，在 Kubernetes 中启动的 Pod 不会以 root 用户身份运行，所以在使用基于 OIDC 的身份认证时，当以非 root 用户运行容器时，可以使用 fsGroup 来指定一个组 ID（group ID），以便容器中的用户具有访问 Web Identity Token 文件的权限。在 Amazon EKS 中，可以将 fsGroup 设置为 65534。这是 Kubernetes 中的推荐做法，因为这个值对应于 nobody 用户和 nogroup 组的 ID。使用 fsGroup: 65534 将确保容器中的非 root 用户具有适当的权限来访问 Web Identity Token 文件，确保容器中的用户具有访问 <code>/var/run/secrets/eks.amazonaws.com/serviceaccount/token</code> 文件的权限。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl edit deployment -n kube-system aws-load-balancer-controller</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/rSKtJm.png\" alt=\"\"></p>\n<div class=\"tips\">\n<p><em><strong>使用aws命令创建角色并关联SA</strong></em></p>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">创建Policy</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用上一步中下载的策略创建一个 IAM policy</span></span><br><span class=\"line\">$ aws iam create-policy \\</span><br><span class=\"line\">    --profile eks-us-west-2 \\</span><br><span class=\"line\">    --policy-name AWSLoadBalancerControllerIAMPolicy \\</span><br><span class=\"line\">    --policy-document file://iam_policy.json</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">创建<code>trust-policy.json</code>，用于描述IAM Role的信任关系</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2012-10-17&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Statement&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Effect&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Allow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Principal&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Federated&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Action&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sts:AssumeRoleWithWebIdentity&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Condition&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;StringEquals&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sts.amazonaws.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;system:serviceaccount:kube-system:aws-load-balancer-controller&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上述配置中的 “Condition” 部分是用于在 IAM 角色的信任策略中定义条件。该条件会限制什么样的令牌可以被信任并用于角色的身份验证和授权。<br>\n具体来说，“Condition” 对象中的 “StringEquals” 表示字符串相等的条件比较。它包含两个键值对，每个键值对都描述了一个条件。<br>\n“<a href=\"http://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud\">oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud</a>”: “<a href=\"http://sts.amazonaws.com\">sts.amazonaws.com</a>”：这个条件表示 OIDC 令牌中的 “aud”（受众）字段必须与 “<a href=\"http://sts.amazonaws.com\">sts.amazonaws.com</a>” 相等。也就是说，令牌的受众必须是 AWS Security Token Service (STS)。<br>\n“<a href=\"http://oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub\">oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub</a>”: “system:serviceaccount:kube-system:aws-load-balancer-controller”：这个条件表示 OIDC 令牌中的 “sub”（主题）字段必须与 “system:serviceaccount:kube-system:aws-load-balancer-controller” 相等。也就是说，令牌的主题必须是 kube-system 命名空间下的 aws-load-balancer-controller Service Account。<br>\n这些条件的目的是确保只有满足这两个条件的 OIDC 令牌才能被信任，并被用于通过 OIDC 进行的身份验证和授权操作。这样可以限制对角色的访问，仅允许特定的 OIDC 令牌来获取访问权限。</p>\n</blockquote>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">创建 IAM Role</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws iam create-role \\</span><br><span class=\"line\">  --profile eks-us-west-2 \\</span><br><span class=\"line\">  --role-name AmazonEKSLoadBalancerControllerRole \\</span><br><span class=\"line\">  --assume-role-policy-document file://<span class=\"string\">&quot;trust-policy.json&quot;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>为 Role 添加 Policy</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws iam attach-role-policy \\</span><br><span class=\"line\">  --profile eks-us-west-2 \\</span><br><span class=\"line\">  --policy-arn arn:aws:iam::743263909644:policy/AWSLoadBalancerControllerIAMPolicy \\</span><br><span class=\"line\">  --role-name AmazonEKSLoadBalancerControllerRole</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>创建SA</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create serviceaccount aws-load-balancer-controller -n kube-system</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>为SA绑定IAM Role</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl annotate serviceaccount aws-load-balancer-controller \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  eks.amazonaws.com/role-arn=arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControllerRole</span><br></pre></td></tr></table></figure>\n</div>\n<h2 id=\"动手实践\">动手实践</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>搞明白了上面的原理，我们只需要按照上面那的步骤做就可以了，接下来就以Pod访问S3为例进行说明。</p>\n</li>\n<li class=\"lvl-2\">\n<p>创建新的策略或使用现有策略，这里我们使用已有的策略<code>arn:aws:iam::aws:policy/AmazonS3FullAccess</code></p>\n</li>\n<li class=\"lvl-2\">\n<p>使用<code>eksctl create iamserviceaccount</code>创建Service和IAM Role，并将它们进行绑定关联</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ eksctl create iamserviceaccount \\</span><br><span class=\"line\">  --cluster=eks-lexing \\</span><br><span class=\"line\">  --namespace=<span class=\"built_in\">test</span> \\</span><br><span class=\"line\">  --name=test-s3-sa-new \\</span><br><span class=\"line\">  --role-name TestS3Role \\</span><br><span class=\"line\">  --attach-policy-arn=arn:aws:iam::aws:policy/AmazonS3FullAccess \\</span><br><span class=\"line\">  --approve</span><br><span class=\"line\">2023-07-13 19:59:18 [ℹ]  6 existing iamserviceaccount(s) (kube-system/aws-load-balancer-controller,kube-system/aws-node,kube-system/ebs-csi-controller-sa,kube-system/efs-csi-controller-sa,<span class=\"built_in\">test</span>/test-s3-sa,<span class=\"built_in\">test</span>/testS3SA) will be excluded</span><br><span class=\"line\">2023-07-13 19:59:18 [ℹ]  1 iamserviceaccount (<span class=\"built_in\">test</span>/test-s3-sa-new) was included (based on the include/exclude rules)</span><br><span class=\"line\">2023-07-13 19:59:18 [!]  serviceaccounts that exist <span class=\"keyword\">in</span> Kubernetes will be excluded, use --override-existing-serviceaccounts to override</span><br><span class=\"line\">2023-07-13 19:59:18 [ℹ]  1 task: &#123;</span><br><span class=\"line\">    2 sequential sub-tasks: &#123;</span><br><span class=\"line\">        create IAM role <span class=\"keyword\">for</span> serviceaccount <span class=\"string\">&quot;test/test-s3-sa-new&quot;</span>,</span><br><span class=\"line\">        create serviceaccount <span class=\"string\">&quot;test/test-s3-sa-new&quot;</span>,</span><br><span class=\"line\">    &#125; &#125;2023-07-13 19:59:18 [ℹ]  building iamserviceaccount stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;</span></span><br><span class=\"line\">2023-07-13 19:59:18 [ℹ]  deploying stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;</span></span><br><span class=\"line\">2023-07-13 19:59:19 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;</span></span><br><span class=\"line\">2023-07-13 19:59:50 [ℹ]  waiting <span class=\"keyword\">for</span> CloudFormation stack <span class=\"string\">&quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;</span></span><br><span class=\"line\">2023-07-13 19:59:51 [ℹ]  created serviceaccount <span class=\"string\">&quot;test/test-s3-sa-new&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看sa，确认是否已关联IAM Role</span></span><br><span class=\"line\">$ k describe sa test-s3-sa-new</span><br><span class=\"line\">Name:                test-s3-sa-new</span><br><span class=\"line\">Namespace:           <span class=\"built_in\">test</span></span><br><span class=\"line\">Labels:              app.kubernetes.io/managed-by=eksctl</span><br><span class=\"line\">Annotations:         eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/TestS3Role</span><br><span class=\"line\">Image pull secrets:  &lt;none&gt;</span><br><span class=\"line\">Mountable secrets:   &lt;none&gt;</span><br><span class=\"line\">Tokens:              &lt;none&gt;</span><br><span class=\"line\">Events:              &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/IOszUm.png\" alt=\"\" width=\"1200\" height=\"600\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/oQ6D30.png\" alt=\"\" width=\"1200\" height=\"400\"></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建一个已经安装过AWS CLI的Pod，这里镜像就使用<code>amazon/aws-cli</code>，注意要指定<code>serviceAccountName: test-s3-sa-new</code></p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">deployment-test-s3-sa</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">app-test-s3-sa</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">app-test-s3-sa</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">test-s3-sa-new</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">amazon/aws-cli</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">app-test-s3-sa</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">tail</span> <span class=\"string\">-f</span> <span class=\"string\">/dev/null</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署</span></span><br><span class=\"line\">$ k apply -f testS3SA.yaml</span><br><span class=\"line\">deployment.apps/deployment-test-s3-sa created</span><br><span class=\"line\"><span class=\"comment\"># 进入pod</span></span><br><span class=\"line\">$ k <span class=\"built_in\">exec</span> -it deployment-test-s3-sa-5bd985845d-mqjjp -- bash</span><br><span class=\"line\"><span class=\"comment\"># 查看当前的AWS用户信息，可以看到这里关联的是一个临时用户，但是从Arn中也能看出来其关联的角色 TestS3Role</span></span><br><span class=\"line\">bash-4.2<span class=\"comment\"># aws sts get-caller-identity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;UserId&quot;</span>: <span class=\"string\">&quot;AROA22DP3G4GNBLHPZBAM:botocore-session-1689250618&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Account&quot;</span>: <span class=\"string\">&quot;743263909644&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Arn&quot;</span>: <span class=\"string\">&quot;arn:aws:sts::743263909644:assumed-role/TestS3Role/botocore-session-1689250618&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 查看s3存储桶列表，查询成功，说明当前pod已经具备的访问AWS S3资源的权限</span></span><br><span class=\"line\">bash-4.2<span class=\"comment\"># aws s3 ls</span></span><br><span class=\"line\">2023-07-10 09:34:45 lexing-helm-charts</span><br><span class=\"line\"><span class=\"comment\"># 查看环境变量</span></span><br><span class=\"line\">bash-4.2<span class=\"comment\"># echo $AWS_ROLE_ARN</span></span><br><span class=\"line\">arn:aws:iam::743263909644:role/TestS3Role</span><br><span class=\"line\">bash-4.2<span class=\"comment\"># echo $AWS_WEB_IDENTITY_TOKEN_FILE</span></span><br><span class=\"line\">/var/run/secrets/eks.amazonaws.com/serviceaccount/token</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍为EKS集群的 Pod 调用 AWS 资源的方法 参考资料： Amazon EKS用户指南 Kubernetes 文档 原理解析 在Pod中访问AWS资源，如获取S3中的文件，将ingress绑定到ELB，等等，这些操作都需要被授予相应的权限才可以正常访问。 在AWS IAM中的Role可以被授权给基于OIDC身份提供商的外部用户，而在EKS集群中的pod对于AWS IAM来说就属于外部用户，AWS会通过IAM OIDC对这些外部用户的有效性进行校验。 前文已经介绍过如何为EKS创建 IAM OIDC 身份提供商，在EKS(K8s)中，并不是直接对Pod进行权限校验，而是ServcieAccount，在 K8s 中，ServiceAccount 是一种用于身份验证和授权的机制，它为 Pod 提供了一个身份标识。每个 Pod 都与一个 ServiceAccount 相关联，并且可以使用该 ServiceAccount 获取与其关联的身份凭据。 在EKS（K8s）中可以将ServcieAccount与AWS IAM Role进行绑定，同时将ServcieAccount与Pod进行关联，这样Pod也就具备了相应的IAM Role。 EKS（K8s）的 ServcieAccount 通过 Idp（EKS OpenID Connect provider）获得 ID_token并将其发送给 IAM Identity providers ，IAM Identity providers负责获取OIDC的key并验证ID_token的有效性。 当ServcieAccount通过IAM OIDC身份校验后，关联的Pod就可以使用相对应的Role获得访问AWS资源的权限。 创建Pod时，如果没有为其指定关联的ServcieAccount，则默认使用Pod所在Namespace下的名称为default的ServcieAccount，创建Namespace时会自动为其创建该缺省的ServcieAccount，默认其没有绑定任何IAM Role，则缺省继承NodeGroup的IAM Role，NodeGroup的IAM Role是在创建EKS集群时自动创建的，其具有对ECR存储库的只读访问、允许Amazon EKS工作节点连接到Amazon EKS群集等权限。 Amazon EKS Pod Identity Webhook 会查看与 service account 关联的 Pods，并向 Pod 提供下列环境变量 AWS_ROLE_ARN=arn:aws:iam::&lt;ACCOUNT_ID&gt;:role/&lt;IAM_ROLE_NAME&gt; AWS_WEB_IDENTITY_TOKEN_FILE=/var/run/secrets/eks.amazonaws.com/serviceaccount/token AWS_ROLE_ARN就是绑定到ServiceAccount上的IAM Role，AWS_WEB_IDENTITY_TOKEN_FILE就是要发送给IAM Identity providers的ID_token。 默认只有以 root 用户运行的容器才有权限访问 web identity token 文件，当以其它用户运行容器时，需要用 fsGroup 指定一个 groupID。在 Amazon EKS 中，可以将 fsGroup 设置为 65534。这是 Kubernetes 中的推荐做法，因为这个值对应于 nobody 用户和 nogroup 组的 ID。使用 fsGroup: 65534 将确保容器中的非 root 用户具有适当的权限来访问 Web Identity Token 文件。 案例分析 前面在安装 AWS Load Balancer Controller 附加组件时，通过如下方式进行授权 1234567891011121314151617$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json# 使用上一步中下载的策略创建一个 IAM policy$ aws iam create-policy \\ --profile eks-us-west-2 \\ --policy-name AWSLoadBalancerControllerIAMPolicy \\ --policy-document file://iam_policy.json# 在 AWS Load Balancer Controller 的 kube-system 命名空间中创建名为 aws-load-balancer-controller 的 Kubernetes 服务账户，并使用 IAM 角色的名称注释 Kubernetes 服务账户。$ eksctl create iamserviceaccount \\ --cluster=eks-lexing \\ --profile eks-us-west-2 \\ --namespace=kube-system \\ --name=aws-load-balancer-controller \\ --role-name AmazonEKSLoadBalancerControllerRole \\ --attach-policy-arn=arn:aws:iam::743263909644:policy/AWSLoadBalancerControllerIAMPolicy \\ --approve 上面是先通过aws iam create-policy命令创建了一个策略，然后通过eksctl create iamserviceaccount命令为EKS(K8s)创建了一个ServiceAccount，同时创建了一个IAM Role与ServiceAccount绑定，并将该Role与上面创建的策略进行关联。 所以实际上，上面的一个命令干了四件事 1.创建了一个名称为AmazonEKSLoadBalancerControllerRole的IAM角色并关联新建的名称为AWSLoadBalancerControllerIAMPolicy的策略 2.在k8s的kube-systemnamespace下创建了一个名称为aws-load-balancer-controller的ServiceAccount 123$ k get sa -n kube-system aws-load-balancer-controllerNAME SECRETS AGEaws-load-balancer-controller 0 9d 3.在名称为AmazonEKSLoadBalancerControllerRole的IAM角色的信任关系中指定认证方式为OIDC，并且关联名称为aws-load-balancer-controller的ServiceAccount。 4.在名称为aws-load-balancer-controller的ServiceAccount中关联上面的角色AmazonEKSLoadBalancerControllerRole，就是添加注释eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControll。 12345678910111213$ k edit sa -n kube-system aws-load-balancer-controllerapiVersion: v1kind: ServiceAccountmetadata:annotations: eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControllcreationTimestamp: &quot;2023-07-04T09:20:41Z&quot;labels: app.kubernetes.io/managed-by: eksctlname: aws-load-balancer-controllernamespace: kube-systemresourceVersion: &quot;1707669&quot;uid: 857200a6-2e16-4939-bbbc-483dd579acbb 然后在创建Pod时，为Pod指定serviceAccountName: aws-load-balancer-controller 默认情况下，在 Kubernetes 中启动的 Pod 不会以 root 用户身份运行，所以在使用基于 OIDC 的身份认证时，当以非 root 用户运行容器时，可以使用 fsGroup 来指定一个组 ID（group ID），以便容器中的用户具有访问 Web Identity Token 文件的权限。在 Amazon EKS 中，可以将 fsGroup 设置为 65534。这是 Kubernetes 中的推荐做法，因为这个值对应于 nobody 用户和 nogroup 组的 ID。使用 fsGroup: 65534 将确保容器中的非 root 用户具有适当的权限来访问 Web Identity Token 文件，确保容器中的用户具有访问 /var/run/secrets/eks.amazonaws.com/serviceaccount/token 文件的权限。 1$ kubectl edit deployment -n kube-system aws-load-balancer-controller 使用aws命令创建角色并关联SA 创建Policy 1234567$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json# 使用上一步中下载的策略创建一个 IAM policy$ aws iam create-policy \\ --profile eks-us-west-2 \\ --policy-name AWSLoadBalancerControllerIAMPolicy \\ --policy-document file://iam_policy.json 创建trust-policy.json，用于描述IAM Role的信任关系 123456789101112131415161718&#123; &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ &#123; &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &#123; &quot;Federated&quot;: &quot;arn:aws:iam::743263909644:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56&quot; &#125;, &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;, &quot;Condition&quot;: &#123; &quot;StringEquals&quot;: &#123; &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud&quot;: &quot;sts.amazonaws.com&quot;, &quot;oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub&quot;: &quot;system:serviceaccount:kube-system:aws-load-balancer-controller&quot; &#125; &#125; &#125; ]&#125; 上述配置中的 “Condition” 部分是用于在 IAM 角色的信任策略中定义条件。该条件会限制什么样的令牌可以被信任并用于角色的身份验证和授权。 具体来说，“Condition” 对象中的 “StringEquals” 表示字符串相等的条件比较。它包含两个键值对，每个键值对都描述了一个条件。 “oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:aud”: “sts.amazonaws.com”：这个条件表示 OIDC 令牌中的 “aud”（受众）字段必须与 “sts.amazonaws.com” 相等。也就是说，令牌的受众必须是 AWS Security Token Service (STS)。 “oidc.eks.us-west-2.amazonaws.com/id/1029FF88CB872B6B7A1CC65D44191A56:sub”: “system:serviceaccount:kube-system:aws-load-balancer-controller”：这个条件表示 OIDC 令牌中的 “sub”（主题）字段必须与 “system:serviceaccount:kube-system:aws-load-balancer-controller” 相等。也就是说，令牌的主题必须是 kube-system 命名空间下的 aws-load-balancer-controller Service Account。 这些条件的目的是确保只有满足这两个条件的 OIDC 令牌才能被信任，并被用于通过 OIDC 进行的身份验证和授权操作。这样可以限制对角色的访问，仅允许特定的 OIDC 令牌来获取访问权限。 创建 IAM Role 1234$ aws iam create-role \\ --profile eks-us-west-2 \\ --role-name AmazonEKSLoadBalancerControllerRole \\ --assume-role-policy-document file://&quot;trust-policy.json&quot; 为 Role 添加 Policy 1234$ aws iam attach-role-policy \\ --profile eks-us-west-2 \\ --policy-arn arn:aws:iam::743263909644:policy/AWSLoadBalancerControllerIAMPolicy \\ --role-name AmazonEKSLoadBalancerControllerRole 创建SA 1$ kubectl create serviceaccount aws-load-balancer-controller -n kube-system 为SA绑定IAM Role 123$ kubectl annotate serviceaccount aws-load-balancer-controller \\ -n kube-system \\ eks.amazonaws.com/role-arn=arn:aws:iam::743263909644:role/AmazonEKSLoadBalancerControllerRole 动手实践 搞明白了上面的原理，我们只需要按照上面那的步骤做就可以了，接下来就以Pod访问S3为例进行说明。 创建新的策略或使用现有策略，这里我们使用已有的策略arn:aws:iam::aws:policy/AmazonS3FullAccess 使用eksctl create iamserviceaccount创建Service和IAM Role，并将它们进行绑定关联 123456789101112131415161718192021222324252627282930$ eksctl create iamserviceaccount \\ --cluster=eks-lexing \\ --namespace=test \\ --name=test-s3-sa-new \\ --role-name TestS3Role \\ --attach-policy-arn=arn:aws:iam::aws:policy/AmazonS3FullAccess \\ --approve2023-07-13 19:59:18 [ℹ] 6 existing iamserviceaccount(s) (kube-system/aws-load-balancer-controller,kube-system/aws-node,kube-system/ebs-csi-controller-sa,kube-system/efs-csi-controller-sa,test/test-s3-sa,test/testS3SA) will be excluded2023-07-13 19:59:18 [ℹ] 1 iamserviceaccount (test/test-s3-sa-new) was included (based on the include/exclude rules)2023-07-13 19:59:18 [!] serviceaccounts that exist in Kubernetes will be excluded, use --override-existing-serviceaccounts to override2023-07-13 19:59:18 [ℹ] 1 task: &#123; 2 sequential sub-tasks: &#123; create IAM role for serviceaccount &quot;test/test-s3-sa-new&quot;, create serviceaccount &quot;test/test-s3-sa-new&quot;, &#125; &#125;2023-07-13 19:59:18 [ℹ] building iamserviceaccount stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;2023-07-13 19:59:18 [ℹ] deploying stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;2023-07-13 19:59:19 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;2023-07-13 19:59:50 [ℹ] waiting for CloudFormation stack &quot;eksctl-eks-lexing-addon-iamserviceaccount-test-test-s3-sa-new&quot;2023-07-13 19:59:51 [ℹ] created serviceaccount &quot;test/test-s3-sa-new&quot;# 查看sa，确认是否已关联IAM Role$ k describe sa test-s3-sa-newName: test-s3-sa-newNamespace: testLabels: app.kubernetes.io/managed-by=eksctlAnnotations: eks.amazonaws.com/role-arn: arn:aws:iam::743263909644:role/TestS3RoleImage pull secrets: &lt;none&gt;Mountable secrets: &lt;none&gt;Tokens: &lt;none&gt;Events: &lt;none&gt; 创建一个已经安装过AWS CLI的Pod，这里镜像就使用amazon/aws-cli，注意要指定serviceAccountName: test-s3-sa-new 123456789101112131415161718192021222324apiVersion: apps/v1kind: Deploymentmetadata: name: deployment-test-s3-saspec: selector: matchLabels: app.kubernetes.io/name: app-test-s3-sa replicas: 1 template: metadata: labels: app.kubernetes.io/name: app-test-s3-sa spec: serviceAccountName: test-s3-sa-new containers: - image: amazon/aws-cli imagePullPolicy: Always name: app-test-s3-sa ports: - containerPort: 80 command: [&quot;/bin/sh&quot;, &quot;-c&quot;] args: - tail -f /dev/null 1234567891011121314151617181920# 部署$ k apply -f testS3SA.yamldeployment.apps/deployment-test-s3-sa created# 进入pod$ k exec -it deployment-test-s3-sa-5bd985845d-mqjjp -- bash# 查看当前的AWS用户信息，可以看到这里关联的是一个临时用户，但是从Arn中也能看出来其关联的角色 TestS3Rolebash-4.2# aws sts get-caller-identity&#123; &quot;UserId&quot;: &quot;AROA22DP3G4GNBLHPZBAM:botocore-session-1689250618&quot;, &quot;Account&quot;: &quot;743263909644&quot;, &quot;Arn&quot;: &quot;arn:aws:sts::743263909644:assumed-role/TestS3Role/botocore-session-1689250618&quot;&#125;# 查看s3存储桶列表，查询成功，说明当前pod已经具备的访问AWS S3资源的权限bash-4.2# aws s3 ls2023-07-10 09:34:45 lexing-helm-charts# 查看环境变量bash-4.2# echo $AWS_ROLE_ARNarn:aws:iam::743263909644:role/TestS3Rolebash-4.2# echo $AWS_WEB_IDENTITY_TOKEN_FILE/var/run/secrets/eks.amazonaws.com/serviceaccount/token","summary":"摘要 本文介绍为EKS集群的 Pod 调用 AWS 资源的方法 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-13T12:30:05.000Z","tags":["技术","aws","eks","eks"]},{"id":"https://blog.hanqunfeng.com/2023/07/10/aws-eks14-helm/","url":"https://blog.hanqunfeng.com/2023/07/10/aws-eks14-helm/","title":"AWS-EKS-14--Helm","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为Helm的使用方法</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"Helm\">Helm</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://helm.sh/zh/docs/\">官网文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>Helm 是 Kubernetes 的包管理器，类似于 Linux 下的包管理工具如 yum、apt 等。可以方便的将之前打包好的 yaml 文件部署到 Kunernetes 上。</p>\n</li>\n</ul>\n<h3 id=\"为什么要引入-Helm\">为什么要引入 Helm</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>在以往的应用部署过程当中，我们需要先编写一个 yaml 文件，然后该文件中包含 deployment、Service、Ingress 等等。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果说需要部署的是单一、少数服务的应用，那么完全可以使用 yaml 文件的方式，这样会很简单。但是在实际的项目当中，微服务的数量基本不可能是一个，可能是几十个，如果说再用 yaml 文件的部署方式，那就意味着需要编写几十个 yaml 文件，这就会导致 数量多、维护难 等诸多问题。</p>\n</li>\n<li class=\"lvl-2\">\n<p>针对上述问题，Helm 的引入使用则可以将所有的 yaml 文件进行一个整体的管理，而且它能够实现 yaml 文件的高效复用。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Helm 具备如下的能力：<br>\n简化部署 ：Helm允许使用单个命令轻松部署和管理应用程序，从而简化了整个部署过程；<br>\n高度可配置：Helm Charts提供了高度可配置的选项，可以轻松自定义和修改应用程序的部署配置；<br>\n版本控制 ：Helm允许管理应用程序的多个版本，从而轻松实现版本控制和回滚；<br>\n模板化：Helm Charts使用YAML模板来定义Kubernetes对象的配置，从而简化了配置过程，并提高了可重复性和可扩展性；<br>\n应用程序库：Helm具有应用程序库的概念，可以轻松地共享和重用Helm Charts，从而简化了多个应用程序的部署和管理；<br>\n插件系统：Helm拥有一个强大的插件系统，允许您扩展和定制Helm的功能，以满足特定的需求和要求。</p>\n</li>\n</ul>\n<h3 id=\"核心概念\">核心概念</h3>\n<table>\n<thead>\n<tr>\n<th>概念</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chart</td>\n<td>一个Helm包，其中包含了运行一个应用所需要的镜像、依赖和资源定义等，还可能包含Kubernetes集群中的服务定义，类似Homebrew中的formula、APT的dpkg或者Yum的rpm文件</td>\n</tr>\n<tr>\n<td>Repository</td>\n<td>存储Helm Charts的地方</td>\n</tr>\n<tr>\n<td>Release</td>\n<td>Chart在k8s上运行的Chart的一个实例，例如，如果一个MySQL Chart想在服务器上运行两个数据库，可以将这个Chart安装两次，并在每次安装中生成自己的Release以及Release名称。</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Helm Chart的参数，用于配置Kubernetes对象</td>\n</tr>\n<tr>\n<td>Template</td>\n<td>使用Go模板语言生成Kubernetes对象的定义文件</td>\n</tr>\n<tr>\n<td>Namespace</td>\n<td>Kubernetes中用于隔离资源的逻辑分区</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Helm的基本使用\">Helm的基本使用</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>当您已经安装好了Helm之后，您可以添加一个chart 仓库。从 <a href=\"https://artifacthub.io/packages/search?kind=0\">Artifact Hub</a> 中查找有效的Helm chart仓库。</p>\n</li>\n<li class=\"lvl-2\">\n<p>另外常用的仓库有<a href=\"https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts\">阿里云</a>、<a href=\"http://mirror.azure.cn/kubernetes/charts/\">微软</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加仓库</span></span><br><span class=\"line\"><span class=\"comment\"># 语法 ：helm repo add 仓库名称 仓库地址</span></span><br><span class=\"line\"><span class=\"comment\"># 添加 eks-charts 存储库</span></span><br><span class=\"line\">$ helm repo add eks https://aws.github.io/eks-charts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新指定仓库索引，以确保您拥有最新的图表</span></span><br><span class=\"line\">$ helm repo update eks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新全部仓库索引</span></span><br><span class=\"line\">$ helm repo update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看已经添加的仓库</span></span><br><span class=\"line\">$ helm repo list</span><br><span class=\"line\">NAME              \tURL</span><br><span class=\"line\">eks               \thttps://aws.github.io/eks-charts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索，默认展示最新的版本</span></span><br><span class=\"line\">$ helm search repo load-balancer</span><br><span class=\"line\">NAME                            \tCHART VERSION\tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.4        \tv2.5.3     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索全部版本</span></span><br><span class=\"line\">$ helm search repo load-balancer -l</span><br><span class=\"line\">NAME                            \tCHART VERSION\tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.4        \tv2.5.3     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.3        \tv2.5.2     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.2        \tv2.5.1     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.1        \tv2.5.1     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在全部版本中搜索大于等于指定版本</span></span><br><span class=\"line\">$ helm search repo load-balancer --version ^1.5.1 -l</span><br><span class=\"line\">NAME                            \tCHART VERSION\tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.4        \tv2.5.3     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.3        \tv2.5.2     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.2        \tv2.5.1     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\">eks/aws-load-balancer-controller\t1.5.1        \tv2.5.1     \tAWS Load Balancer Controller Helm chart <span class=\"keyword\">for</span> Kub...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 AWS Load Balancer Controller 的最新版本，--set指定Values</span></span><br><span class=\"line\">$ helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> clusterName=eks-lexing \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.create=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.name=aws-load-balancer-controller</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 AWS Load Balancer Controller 的指定版本，--version 1.5.4</span></span><br><span class=\"line\">$ helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> clusterName=eks-lexing \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.create=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.name=aws-load-balancer-controller</span><br><span class=\"line\">  --version 1.5.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看全部命名空间下已经安装的包</span></span><br><span class=\"line\">$ helm list --all-namespaces</span><br><span class=\"line\">NAME                        \tNAMESPACE  \tREVISION\tUPDATED                             \tSTATUS  \tCHART                             \tAPP VERSION</span><br><span class=\"line\">aws-load-balancer-controller\tkube-system\t2       \t2023-07-04 17:31:37.839466 +0800 CST\tdeployed\taws-load-balancer-controller-1.5.4\tv2.5.3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定命名空间下已经安装的包</span></span><br><span class=\"line\">$ helm list -n kube-system</span><br><span class=\"line\"><span class=\"comment\"># 关键字过滤</span></span><br><span class=\"line\">$ helm list -n kube-system --filter load-balancer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取Values，用户指定的，即安装或升级时通过--set等方式设置的</span></span><br><span class=\"line\">$ helm get values aws-load-balancer-controller -n kube-system</span><br><span class=\"line\">USER-SUPPLIED VALUES:</span><br><span class=\"line\">clusterName: eks-lexing</span><br><span class=\"line\">serviceAccount:</span><br><span class=\"line\">  create: <span class=\"literal\">false</span></span><br><span class=\"line\">  name: aws-load-balancer-controller</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取Values，全部Values，都可以进行替换</span></span><br><span class=\"line\">$ helm get values aws-load-balancer-controller -n kube-system --all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 升级安装，升级时只需要指定要改变的部分</span></span><br><span class=\"line\">$ helm upgrade aws-load-balancer-controller eks/aws-load-balancer-controller \\</span><br><span class=\"line\">  -n kube-system \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> clusterName=eks-lexing \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.create=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">  --<span class=\"built_in\">set</span> serviceAccount.name=aws-load-balancer-controller</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看历史安装记录</span></span><br><span class=\"line\">$ helm <span class=\"built_in\">history</span> -n kube-system aws-load-balancer-controller</span><br><span class=\"line\">REVISION\tUPDATED                 \tSTATUS    \tCHART                             \tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">1       \tTue Jul  4 17:26:05 2023\tsuperseded\taws-load-balancer-controller-1.5.4\tv2.5.3     \tInstall complete</span><br><span class=\"line\">2       \tTue Jul  4 17:31:37 2023\tdeployed  \taws-load-balancer-controller-1.5.4\tv2.5.3     \tUpgrade complete</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回滚到指定修订号，修订号通过 helm history 查看</span></span><br><span class=\"line\">$ helm rollback -n kube-system aws-load-balancer-controller 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示已命名发布的状态</span></span><br><span class=\"line\">$ helm status -n kube-system aws-load-balancer-controller</span><br><span class=\"line\">NAME: aws-load-balancer-controller</span><br><span class=\"line\">LAST DEPLOYED: Tue Jul  4 17:31:37 2023</span><br><span class=\"line\">NAMESPACE: kube-system</span><br><span class=\"line\">STATUS: deployed</span><br><span class=\"line\">REVISION: 2</span><br><span class=\"line\">TEST SUITE: None</span><br><span class=\"line\">NOTES:</span><br><span class=\"line\">AWS Load Balancer controller installed!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">$ helm uninstall aws-load-balancer-controller -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除仓库</span></span><br><span class=\"line\">$ helm repo remove eks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看helm客户端环境信息</span></span><br><span class=\"line\">$ helm <span class=\"built_in\">env</span></span><br><span class=\"line\">HELM_BIN=<span class=\"string\">&quot;helm&quot;</span></span><br><span class=\"line\">HELM_BURST_LIMIT=<span class=\"string\">&quot;100&quot;</span></span><br><span class=\"line\">HELM_CACHE_HOME=<span class=\"string\">&quot;/Users/hanqf/Library/Caches/helm&quot;</span></span><br><span class=\"line\">HELM_CONFIG_HOME=<span class=\"string\">&quot;/Users/hanqf/Library/Preferences/helm&quot;</span></span><br><span class=\"line\">HELM_DATA_HOME=<span class=\"string\">&quot;/Users/hanqf/Library/helm&quot;</span></span><br><span class=\"line\">HELM_DEBUG=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">HELM_KUBEAPISERVER=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_KUBEASGROUPS=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_KUBEASUSER=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_KUBECAFILE=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_KUBECONTEXT=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_KUBEINSECURE_SKIP_TLS_VERIFY=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">HELM_KUBETLS_SERVER_NAME=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_KUBETOKEN=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">HELM_MAX_HISTORY=<span class=\"string\">&quot;10&quot;</span></span><br><span class=\"line\">HELM_NAMESPACE=<span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">HELM_PLUGINS=<span class=\"string\">&quot;/Users/hanqf/Library/helm/plugins&quot;</span></span><br><span class=\"line\">HELM_REGISTRY_CONFIG=<span class=\"string\">&quot;/Users/hanqf/Library/Preferences/helm/registry/config.json&quot;</span></span><br><span class=\"line\">HELM_REPOSITORY_CACHE=<span class=\"string\">&quot;/Users/hanqf/Library/Caches/helm/repository&quot;</span></span><br><span class=\"line\">HELM_REPOSITORY_CONFIG=<span class=\"string\">&quot;/Users/hanqf/Library/Preferences/helm/repositories.yaml&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 展示指定chart的全部信息 （values.yaml, Chart.yaml, README）</span></span><br><span class=\"line\">$ helm show all eks/aws-load-balancer-controller</span><br><span class=\"line\"><span class=\"comment\"># 只展示chart.yaml</span></span><br><span class=\"line\">$ helm show chart eks/aws-load-balancer-controller</span><br><span class=\"line\"><span class=\"comment\"># 只展示values.yaml</span></span><br><span class=\"line\">$ helm show values eks/aws-load-balancer-controller</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下载指定的包，这里会下载 aws-load-balancer-controller-1.5.4.tgz</span></span><br><span class=\"line\">$ helm pull eks/aws-load-balancer-controller</span><br><span class=\"line\"><span class=\"comment\"># 下载并解压到指定目录</span></span><br><span class=\"line\">$ helm pull eks/aws-load-balancer-controller --untar --untardir ./</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义-Chart-部署应用\">自定义 Chart 部署应用</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个chart</span></span><br><span class=\"line\">$ helm create mychart</span><br><span class=\"line\">Creating mychart</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">mychart</span><br><span class=\"line\"></span><br><span class=\"line\">$ exa -T mychart</span><br><span class=\"line\">mychart</span><br><span class=\"line\">├── Chart.yaml</span><br><span class=\"line\">├── charts</span><br><span class=\"line\">├── templates</span><br><span class=\"line\">│  ├── _helpers.tpl</span><br><span class=\"line\">│  ├── deployment.yaml</span><br><span class=\"line\">│  ├── hpa.yaml</span><br><span class=\"line\">│  ├── ingress.yaml</span><br><span class=\"line\">│  ├── NOTES.txt</span><br><span class=\"line\">│  ├── service.yaml</span><br><span class=\"line\">│  ├── serviceaccount.yaml</span><br><span class=\"line\">│  └── tests</span><br><span class=\"line\">│     └── test-connection.yaml</span><br><span class=\"line\">└── values.yaml</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>文件</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>charts</td>\n<td>一个普通的空文件，一般也不会写入内容</td>\n</tr>\n<tr>\n<td>Chart.yaml</td>\n<td>当前 chart 属性的配置信息</td>\n</tr>\n<tr>\n<td>templates</td>\n<td>自己定义的 yaml 文件存于此</td>\n</tr>\n<tr>\n<td>values.yaml</td>\n<td>定义 yaml 文件的全局配置</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Chart.yaml: 包含Chart的元数据和依赖项</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">chart</span> <span class=\"string\">API</span> <span class=\"string\">版本</span> <span class=\"string\">（必需）</span>  <span class=\"comment\">#必须有</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">chart名称</span> <span class=\"string\">（必需）</span>     <span class=\"comment\"># 必须有</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">指定</span> <span class=\"string\">chart</span> <span class=\"string\">版本（必需），打包时的版本号</span> <span class=\"comment\"># 必须有</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kubeVersion:</span> <span class=\"string\">兼容Kubernetes版本的语义化版本（可选）</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">一句话对这个项目的描述（可选）</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">chart类型</span> <span class=\"string\">（可选）</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">关于项目的一组关键字（可选）</span></span><br><span class=\"line\"><span class=\"attr\">home:</span> <span class=\"string\">项目home页面的URL</span> <span class=\"string\">（可选）</span></span><br><span class=\"line\"><span class=\"attr\">sources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">项目源码的URL列表（可选）</span></span><br><span class=\"line\"><span class=\"attr\">dependencies:</span> <span class=\"comment\"># chart 依赖列表 （可选）</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">chart名称</span> <span class=\"string\">(nginx)</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">chart版本</span> <span class=\"string\">(&quot;1.2.3&quot;)</span></span><br><span class=\"line\">    <span class=\"attr\">repository:</span> <span class=\"string\">（可选）仓库URL</span> <span class=\"string\">(&quot;https://example.com/charts&quot;)</span> <span class=\"string\">或别名</span> <span class=\"string\">(&quot;@repo-name&quot;)</span></span><br><span class=\"line\">    <span class=\"attr\">condition:</span> <span class=\"string\">（可选）</span> <span class=\"string\">解析为布尔值的yaml路径，用于启用/禁用chart</span> <span class=\"string\">(e.g.</span> <span class=\"string\">subchart1.enabled</span> <span class=\"string\">)</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"comment\"># （可选）</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">用于一次启用/禁用</span> <span class=\"string\">一组chart的tag</span></span><br><span class=\"line\">    <span class=\"attr\">import-values:</span> <span class=\"comment\"># （可选）</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ImportValue</span> <span class=\"string\">保存源值到导入父键的映射。每项可以是字符串或者一对子/父列表项</span></span><br><span class=\"line\">    <span class=\"attr\">alias:</span> <span class=\"string\">（可选）</span> <span class=\"string\">chart中使用的别名。当你要多次添加相同的chart时会很有用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">maintainers:</span> <span class=\"comment\"># （可选） # 可能用到</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">维护者名字</span> <span class=\"string\">（每个维护者都需要）</span></span><br><span class=\"line\">    <span class=\"attr\">email:</span> <span class=\"string\">维护者邮箱</span> <span class=\"string\">（每个维护者可选）</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">维护者URL</span> <span class=\"string\">（每个维护者可选）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">icon:</span> <span class=\"string\">用做icon的SVG或PNG图片URL</span> <span class=\"string\">（可选）</span></span><br><span class=\"line\"><span class=\"attr\">appVersion:</span> <span class=\"string\">包含的应用版本（可选）。不需要是语义化，建议使用引号</span></span><br><span class=\"line\"><span class=\"attr\">deprecated:</span> <span class=\"string\">不被推荐的chart</span> <span class=\"string\">（可选，布尔值）</span></span><br><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">  <span class=\"attr\">example:</span> <span class=\"string\">按名称输入的批注列表</span> <span class=\"string\">（可选）.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">mychart</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">A</span> <span class=\"string\">Helm</span> <span class=\"string\">chart</span> <span class=\"string\">for</span> <span class=\"string\">Kubernetes</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">0.1</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>values.yaml: 包含应用程序的默认配置值，如下示例：</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">tag:</span> <span class=\"string\">&#x27;1.19.8&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>templates: 模板文件，各种k8s资源yaml，在模板文件中可以通过 .Values对象访问到 values.yaml里的配置<br>\n示例：我们可以依据需要创建各种k8s资源的yaml文件，这里为了演示方便，删除templates下全部文件，然后创建deployment.yaml</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-helm-&#123;&#123;</span> <span class=\"string\">.Values.image.repository</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-helm</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-helm</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-helm</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> &#123;&#123; <span class=\"string\">.Values.image.repository</span> &#125;&#125;<span class=\"string\">:&#123;&#123;</span> <span class=\"string\">.Values.image.tag</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>安装自定义Chart</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm install mychart mychart</span><br><span class=\"line\">NAME: mychart</span><br><span class=\"line\">LAST DEPLOYED: Mon Jul 10 16:36:13 2023</span><br><span class=\"line\">NAMESPACE: <span class=\"built_in\">test</span></span><br><span class=\"line\">STATUS: deployed</span><br><span class=\"line\">REVISION: 1</span><br><span class=\"line\">TEST SUITE: None</span><br><span class=\"line\"></span><br><span class=\"line\">$ helm list</span><br><span class=\"line\">NAME   \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART        \tAPP VERSION</span><br><span class=\"line\">mychart\t<span class=\"built_in\">test</span>     \t1       \t2023-07-10 16:36:13.707877 +0800 CST\tdeployed\tmychart-0.1.0</span><br><span class=\"line\"></span><br><span class=\"line\">$ k get deploy</span><br><span class=\"line\">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">nginx-helm-nginx   1/1     1            1           94s</span><br><span class=\"line\"></span><br><span class=\"line\">$ k describe deploy nginx-helm-nginx | grep Image</span><br><span class=\"line\">    Image:        nginx:1.19.8</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>升级Chart<br>\n这里修改 values.yaml 中镜像的版本</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">tag:</span> <span class=\"string\">&#x27;1.20.2&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ upgrade mychart mychart</span><br><span class=\"line\">Release <span class=\"string\">&quot;mychart&quot;</span> has been upgraded. Happy Helming!</span><br><span class=\"line\">NAME: mychart</span><br><span class=\"line\">LAST DEPLOYED: Mon Jul 10 16:46:03 2023</span><br><span class=\"line\">NAMESPACE: <span class=\"built_in\">test</span></span><br><span class=\"line\">STATUS: deployed</span><br><span class=\"line\">REVISION: 2</span><br><span class=\"line\">TEST SUITE: None</span><br><span class=\"line\"></span><br><span class=\"line\">$ k describe deploy nginx-helm-nginx | grep Image</span><br><span class=\"line\">    Image:        nginx:1.20.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"发布Chart\">发布Chart</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>需要一个Chart仓库，可以使用harbor构建私有仓库，我这里使用aws，所以就用S3作为Chart仓库。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://aws.amazon.com/cn/blogs/china/build-helm-chart-warehouse-based-on-aws-ecr-or-s3/\">基于 AWS ECR 或 S3 搭建 Helm Chart 仓库</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装helm-S3插件</span></span><br><span class=\"line\">$ helm plugin install https://github.com/hypnoglow/helm-s3.git</span><br><span class=\"line\">Downloading and installing helm-s3 v0.14.0 ...</span><br><span class=\"line\">Checksum is valid.</span><br><span class=\"line\">Installed plugin: s3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定操作s3的profile，因为helm不支持指定profile，所以这里可以使用环境变量的方式</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> AWS_PROFILE=eks-us-west-2</span><br><span class=\"line\"><span class=\"comment\"># 初始化 S3 目录（假设名为 lexing-helm-charts 的S3存储桶已经存在）</span></span><br><span class=\"line\">$ helm s3 init s3://lexing-helm-charts/charts/</span><br><span class=\"line\">Initialized empty repository at s3://lexing-helm-charts/charts/</span><br><span class=\"line\"><span class=\"comment\"># 添加仓库到本地</span></span><br><span class=\"line\">$ helm repo add lexing-helm-charts s3://lexing-helm-charts/charts/</span><br><span class=\"line\"><span class=\"comment\"># 查看lexing-helm-charts repo是否已经添加到本地</span></span><br><span class=\"line\">$ helm repo list</span><br><span class=\"line\">NAME              \tURL</span><br><span class=\"line\">aws-efs-csi-driver\thttps://kubernetes-sigs.github.io/aws-efs-csi-driver/</span><br><span class=\"line\">eks               \thttps://aws.github.io/eks-charts</span><br><span class=\"line\">aliyun            \thttps://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class=\"line\">lexing-helm-charts\ts3://lexing-helm-charts/charts/</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>打包Chart</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm package mychart</span><br><span class=\"line\">Successfully packaged chart and saved it to: /Users/hanqf/Desktop/k8sDir/helm-chart/mychart-0.1.0.tgz</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>chart 上传到 S3</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定操作s3的profile，因为helm不支持指定profile，所以这里可以使用环境变量的方式</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> AWS_PROFILE=eks-us-west-2</span><br><span class=\"line\"><span class=\"comment\"># 推送my-nginx helm chart 到 S3</span></span><br><span class=\"line\">$ helm s3 push mychart-0.1.0.tgz lexing-helm-charts --force</span><br><span class=\"line\">Successfully uploaded the chart to the repository.</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>搜索chart并安装</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 搜索</span></span><br><span class=\"line\">$ helm search repo mychart</span><br><span class=\"line\">NAME                      \tCHART VERSION\tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">lexing-helm-charts/mychart\t0.1.0        \t           \tA Helm chart <span class=\"keyword\">for</span> Kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从Helm s3 repo 安装my-nginx chart到EKS/ Kubernetes集群</span></span><br><span class=\"line\">$ helm install mychart lexing-helm-charts/mychart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 升级安装</span></span><br><span class=\"line\">$ helm upgrade mychart lexing-helm-charts/mychart --<span class=\"built_in\">set</span> image.tag=1.20.2</span><br></pre></td></tr></table></figure>\n<h2 id=\"Helm的执行安装顺序\">Helm的执行安装顺序</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Namespace</span><br><span class=\"line\">NetworkPolicy</span><br><span class=\"line\">ResourceQuota</span><br><span class=\"line\">LimitRange</span><br><span class=\"line\">PodSecurityPolicy</span><br><span class=\"line\">PodDisruptionBudget</span><br><span class=\"line\">ServiceAccount</span><br><span class=\"line\">Secret</span><br><span class=\"line\">SecretList</span><br><span class=\"line\">ConfigMap</span><br><span class=\"line\">StorageClass</span><br><span class=\"line\">PersistentVolume</span><br><span class=\"line\">PersistentVolumeClaim</span><br><span class=\"line\">CustomResourceDefinition</span><br><span class=\"line\">ClusterRole</span><br><span class=\"line\">ClusterRoleList</span><br><span class=\"line\">ClusterRoleBinding</span><br><span class=\"line\">ClusterRoleBindingList</span><br><span class=\"line\">Role</span><br><span class=\"line\">RoleList</span><br><span class=\"line\">RoleBinding</span><br><span class=\"line\">RoleBindingList</span><br><span class=\"line\">Service</span><br><span class=\"line\">DaemonSet</span><br><span class=\"line\">Pod</span><br><span class=\"line\">ReplicationController</span><br><span class=\"line\">ReplicaSet</span><br><span class=\"line\">Deployment</span><br><span class=\"line\">HorizontalPodAutoscaler</span><br><span class=\"line\">StatefulSet</span><br><span class=\"line\">Job</span><br><span class=\"line\">CronJob</span><br><span class=\"line\">Ingress</span><br><span class=\"line\">APIService</span><br></pre></td></tr></table></figure>\n","content_text":"摘要 本文介绍为Helm的使用方法 参考资料： Amazon EKS用户指南 Kubernetes 文档 Helm 官网文档 Helm 是 Kubernetes 的包管理器，类似于 Linux 下的包管理工具如 yum、apt 等。可以方便的将之前打包好的 yaml 文件部署到 Kunernetes 上。 为什么要引入 Helm 在以往的应用部署过程当中，我们需要先编写一个 yaml 文件，然后该文件中包含 deployment、Service、Ingress 等等。 如果说需要部署的是单一、少数服务的应用，那么完全可以使用 yaml 文件的方式，这样会很简单。但是在实际的项目当中，微服务的数量基本不可能是一个，可能是几十个，如果说再用 yaml 文件的部署方式，那就意味着需要编写几十个 yaml 文件，这就会导致 数量多、维护难 等诸多问题。 针对上述问题，Helm 的引入使用则可以将所有的 yaml 文件进行一个整体的管理，而且它能够实现 yaml 文件的高效复用。 Helm 具备如下的能力： 简化部署 ：Helm允许使用单个命令轻松部署和管理应用程序，从而简化了整个部署过程； 高度可配置：Helm Charts提供了高度可配置的选项，可以轻松自定义和修改应用程序的部署配置； 版本控制 ：Helm允许管理应用程序的多个版本，从而轻松实现版本控制和回滚； 模板化：Helm Charts使用YAML模板来定义Kubernetes对象的配置，从而简化了配置过程，并提高了可重复性和可扩展性； 应用程序库：Helm具有应用程序库的概念，可以轻松地共享和重用Helm Charts，从而简化了多个应用程序的部署和管理； 插件系统：Helm拥有一个强大的插件系统，允许您扩展和定制Helm的功能，以满足特定的需求和要求。 核心概念 概念 描述 Chart 一个Helm包，其中包含了运行一个应用所需要的镜像、依赖和资源定义等，还可能包含Kubernetes集群中的服务定义，类似Homebrew中的formula、APT的dpkg或者Yum的rpm文件 Repository 存储Helm Charts的地方 Release Chart在k8s上运行的Chart的一个实例，例如，如果一个MySQL Chart想在服务器上运行两个数据库，可以将这个Chart安装两次，并在每次安装中生成自己的Release以及Release名称。 Value Helm Chart的参数，用于配置Kubernetes对象 Template 使用Go模板语言生成Kubernetes对象的定义文件 Namespace Kubernetes中用于隔离资源的逻辑分区 Helm的基本使用 当您已经安装好了Helm之后，您可以添加一个chart 仓库。从 Artifact Hub 中查找有效的Helm chart仓库。 另外常用的仓库有阿里云、微软 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142# 添加仓库# 语法 ：helm repo add 仓库名称 仓库地址# 添加 eks-charts 存储库$ helm repo add eks https://aws.github.io/eks-charts# 更新指定仓库索引，以确保您拥有最新的图表$ helm repo update eks# 更新全部仓库索引$ helm repo update# 查看已经添加的仓库$ helm repo listNAME URLeks https://aws.github.io/eks-charts# 搜索，默认展示最新的版本$ helm search repo load-balancerNAME CHART VERSION APP VERSION DESCRIPTIONeks/aws-load-balancer-controller 1.5.4 v2.5.3 AWS Load Balancer Controller Helm chart for Kub...# 搜索全部版本$ helm search repo load-balancer -lNAME CHART VERSION APP VERSION DESCRIPTIONeks/aws-load-balancer-controller 1.5.4 v2.5.3 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.3 v2.5.2 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.2 v2.5.1 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.1 v2.5.1 AWS Load Balancer Controller Helm chart for Kub...# 在全部版本中搜索大于等于指定版本$ helm search repo load-balancer --version ^1.5.1 -lNAME CHART VERSION APP VERSION DESCRIPTIONeks/aws-load-balancer-controller 1.5.4 v2.5.3 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.3 v2.5.2 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.2 v2.5.1 AWS Load Balancer Controller Helm chart for Kub...eks/aws-load-balancer-controller 1.5.1 v2.5.1 AWS Load Balancer Controller Helm chart for Kub...# 安装 AWS Load Balancer Controller 的最新版本，--set指定Values$ helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\ -n kube-system \\ --set clusterName=eks-lexing \\ --set serviceAccount.create=false \\ --set serviceAccount.name=aws-load-balancer-controller# 安装 AWS Load Balancer Controller 的指定版本，--version 1.5.4$ helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\ -n kube-system \\ --set clusterName=eks-lexing \\ --set serviceAccount.create=false \\ --set serviceAccount.name=aws-load-balancer-controller --version 1.5.4# 查看全部命名空间下已经安装的包$ helm list --all-namespacesNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSIONaws-load-balancer-controller kube-system 2 2023-07-04 17:31:37.839466 +0800 CST deployed aws-load-balancer-controller-1.5.4 v2.5.3# 查看指定命名空间下已经安装的包$ helm list -n kube-system# 关键字过滤$ helm list -n kube-system --filter load-balancer# 获取Values，用户指定的，即安装或升级时通过--set等方式设置的$ helm get values aws-load-balancer-controller -n kube-systemUSER-SUPPLIED VALUES:clusterName: eks-lexingserviceAccount: create: false name: aws-load-balancer-controller# 获取Values，全部Values，都可以进行替换$ helm get values aws-load-balancer-controller -n kube-system --all# 升级安装，升级时只需要指定要改变的部分$ helm upgrade aws-load-balancer-controller eks/aws-load-balancer-controller \\ -n kube-system \\ --set clusterName=eks-lexing \\ --set serviceAccount.create=false \\ --set serviceAccount.name=aws-load-balancer-controller# 查看历史安装记录$ helm history -n kube-system aws-load-balancer-controllerREVISION UPDATED STATUS CHART APP VERSION DESCRIPTION1 Tue Jul 4 17:26:05 2023 superseded aws-load-balancer-controller-1.5.4 v2.5.3 Install complete2 Tue Jul 4 17:31:37 2023 deployed aws-load-balancer-controller-1.5.4 v2.5.3 Upgrade complete# 回滚到指定修订号，修订号通过 helm history 查看$ helm rollback -n kube-system aws-load-balancer-controller 1# 显示已命名发布的状态$ helm status -n kube-system aws-load-balancer-controllerNAME: aws-load-balancer-controllerLAST DEPLOYED: Tue Jul 4 17:31:37 2023NAMESPACE: kube-systemSTATUS: deployedREVISION: 2TEST SUITE: NoneNOTES:AWS Load Balancer controller installed!# 卸载$ helm uninstall aws-load-balancer-controller -n kube-system# 删除仓库$ helm repo remove eks# 查看helm客户端环境信息$ helm envHELM_BIN=&quot;helm&quot;HELM_BURST_LIMIT=&quot;100&quot;HELM_CACHE_HOME=&quot;/Users/hanqf/Library/Caches/helm&quot;HELM_CONFIG_HOME=&quot;/Users/hanqf/Library/Preferences/helm&quot;HELM_DATA_HOME=&quot;/Users/hanqf/Library/helm&quot;HELM_DEBUG=&quot;false&quot;HELM_KUBEAPISERVER=&quot;&quot;HELM_KUBEASGROUPS=&quot;&quot;HELM_KUBEASUSER=&quot;&quot;HELM_KUBECAFILE=&quot;&quot;HELM_KUBECONTEXT=&quot;&quot;HELM_KUBEINSECURE_SKIP_TLS_VERIFY=&quot;false&quot;HELM_KUBETLS_SERVER_NAME=&quot;&quot;HELM_KUBETOKEN=&quot;&quot;HELM_MAX_HISTORY=&quot;10&quot;HELM_NAMESPACE=&quot;test&quot;HELM_PLUGINS=&quot;/Users/hanqf/Library/helm/plugins&quot;HELM_REGISTRY_CONFIG=&quot;/Users/hanqf/Library/Preferences/helm/registry/config.json&quot;HELM_REPOSITORY_CACHE=&quot;/Users/hanqf/Library/Caches/helm/repository&quot;HELM_REPOSITORY_CONFIG=&quot;/Users/hanqf/Library/Preferences/helm/repositories.yaml&quot;# 展示指定chart的全部信息 （values.yaml, Chart.yaml, README）$ helm show all eks/aws-load-balancer-controller# 只展示chart.yaml$ helm show chart eks/aws-load-balancer-controller# 只展示values.yaml$ helm show values eks/aws-load-balancer-controller#下载指定的包，这里会下载 aws-load-balancer-controller-1.5.4.tgz$ helm pull eks/aws-load-balancer-controller# 下载并解压到指定目录$ helm pull eks/aws-load-balancer-controller --untar --untardir ./ 自定义 Chart 部署应用 12345678910111213141516171819202122# 创建一个chart$ helm create mychartCreating mychart$ lsmychart$ exa -T mychartmychart├── Chart.yaml├── charts├── templates│ ├── _helpers.tpl│ ├── deployment.yaml│ ├── hpa.yaml│ ├── ingress.yaml│ ├── NOTES.txt│ ├── service.yaml│ ├── serviceaccount.yaml│ └── tests│ └── test-connection.yaml└── values.yaml 文件 含义 charts 一个普通的空文件，一般也不会写入内容 Chart.yaml 当前 chart 属性的配置信息 templates 自己定义的 yaml 文件存于此 values.yaml 定义 yaml 文件的全局配置 Chart.yaml: 包含Chart的元数据和依赖项 12345678910111213141516171819202122232425262728293031323334apiVersion: chart API 版本 （必需） #必须有name: chart名称 （必需） # 必须有version: 指定 chart 版本（必需），打包时的版本号 # 必须有kubeVersion: 兼容Kubernetes版本的语义化版本（可选）description: 一句话对这个项目的描述（可选）type: chart类型 （可选）keywords: - 关于项目的一组关键字（可选）home: 项目home页面的URL （可选）sources: - 项目源码的URL列表（可选）dependencies: # chart 依赖列表 （可选） - name: chart名称 (nginx) version: chart版本 (&quot;1.2.3&quot;) repository: （可选）仓库URL (&quot;https://example.com/charts&quot;) 或别名 (&quot;@repo-name&quot;) condition: （可选） 解析为布尔值的yaml路径，用于启用/禁用chart (e.g. subchart1.enabled ) tags: # （可选） - 用于一次启用/禁用 一组chart的tag import-values: # （可选） - ImportValue 保存源值到导入父键的映射。每项可以是字符串或者一对子/父列表项 alias: （可选） chart中使用的别名。当你要多次添加相同的chart时会很有用maintainers: # （可选） # 可能用到 - name: 维护者名字 （每个维护者都需要） email: 维护者邮箱 （每个维护者可选） url: 维护者URL （每个维护者可选）icon: 用做icon的SVG或PNG图片URL （可选）appVersion: 包含的应用版本（可选）。不需要是语义化，建议使用引号deprecated: 不被推荐的chart （可选，布尔值）annotations: example: 按名称输入的批注列表 （可选）. 示例： 1234apiVersion: v2name: mychartdescription: A Helm chart for Kubernetesversion: 0.1.0 values.yaml: 包含应用程序的默认配置值，如下示例： 123image: repository: nginx tag: &#x27;1.19.8&#x27; templates: 模板文件，各种k8s资源yaml，在模板文件中可以通过 .Values对象访问到 values.yaml里的配置 示例：我们可以依据需要创建各种k8s资源的yaml文件，这里为了演示方便，删除templates下全部文件，然后创建deployment.yaml 12345678910111213141516171819202122# deployment.yamlapiVersion: apps/v1kind: Deploymentmetadata: name: nginx-helm-&#123;&#123; .Values.image.repository &#125;&#125;spec: replicas: 1 selector: matchLabels: app: nginx-helm template: metadata: labels: app: nginx-helm spec: containers: - name: nginx-helm image: &#123;&#123; .Values.image.repository &#125;&#125;:&#123;&#123; .Values.image.tag &#125;&#125; ports: - containerPort: 80 protocol: TCP 安装自定义Chart 123456789101112131415161718$ helm install mychart mychartNAME: mychartLAST DEPLOYED: Mon Jul 10 16:36:13 2023NAMESPACE: testSTATUS: deployedREVISION: 1TEST SUITE: None$ helm listNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSIONmychart test 1 2023-07-10 16:36:13.707877 +0800 CST deployed mychart-0.1.0$ k get deployNAME READY UP-TO-DATE AVAILABLE AGEnginx-helm-nginx 1/1 1 1 94s$ k describe deploy nginx-helm-nginx | grep Image Image: nginx:1.19.8 升级Chart 这里修改 values.yaml 中镜像的版本 123image: repository: nginx tag: &#x27;1.20.2&#x27; 1234567891011$ upgrade mychart mychartRelease &quot;mychart&quot; has been upgraded. Happy Helming!NAME: mychartLAST DEPLOYED: Mon Jul 10 16:46:03 2023NAMESPACE: testSTATUS: deployedREVISION: 2TEST SUITE: None$ k describe deploy nginx-helm-nginx | grep Image Image: nginx:1.20.2 发布Chart 需要一个Chart仓库，可以使用harbor构建私有仓库，我这里使用aws，所以就用S3作为Chart仓库。 基于 AWS ECR 或 S3 搭建 Helm Chart 仓库 1234567891011121314151617181920# 安装helm-S3插件$ helm plugin install https://github.com/hypnoglow/helm-s3.gitDownloading and installing helm-s3 v0.14.0 ...Checksum is valid.Installed plugin: s3# 指定操作s3的profile，因为helm不支持指定profile，所以这里可以使用环境变量的方式$ export AWS_PROFILE=eks-us-west-2# 初始化 S3 目录（假设名为 lexing-helm-charts 的S3存储桶已经存在）$ helm s3 init s3://lexing-helm-charts/charts/Initialized empty repository at s3://lexing-helm-charts/charts/# 添加仓库到本地$ helm repo add lexing-helm-charts s3://lexing-helm-charts/charts/# 查看lexing-helm-charts repo是否已经添加到本地$ helm repo listNAME URLaws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver/eks https://aws.github.io/eks-chartsaliyun https://kubernetes.oss-cn-hangzhou.aliyuncs.com/chartslexing-helm-charts s3://lexing-helm-charts/charts/ 打包Chart 12$ helm package mychartSuccessfully packaged chart and saved it to: /Users/hanqf/Desktop/k8sDir/helm-chart/mychart-0.1.0.tgz chart 上传到 S3 12345# 指定操作s3的profile，因为helm不支持指定profile，所以这里可以使用环境变量的方式$ export AWS_PROFILE=eks-us-west-2# 推送my-nginx helm chart 到 S3$ helm s3 push mychart-0.1.0.tgz lexing-helm-charts --forceSuccessfully uploaded the chart to the repository. 搜索chart并安装 12345678910# 搜索$ helm search repo mychartNAME CHART VERSION APP VERSION DESCRIPTIONlexing-helm-charts/mychart 0.1.0 A Helm chart for Kubernetes# 从Helm s3 repo 安装my-nginx chart到EKS/ Kubernetes集群$ helm install mychart lexing-helm-charts/mychart# 升级安装$ helm upgrade mychart lexing-helm-charts/mychart --set image.tag=1.20.2 Helm的执行安装顺序 12345678910111213141516171819202122232425262728293031323334NamespaceNetworkPolicyResourceQuotaLimitRangePodSecurityPolicyPodDisruptionBudgetServiceAccountSecretSecretListConfigMapStorageClassPersistentVolumePersistentVolumeClaimCustomResourceDefinitionClusterRoleClusterRoleListClusterRoleBindingClusterRoleBindingListRoleRoleListRoleBindingRoleBindingListServiceDaemonSetPodReplicationControllerReplicaSetDeploymentHorizontalPodAutoscalerStatefulSetJobCronJobIngressAPIService","summary":"摘要 本文介绍为Helm的使用方法 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-10T12:30:05.000Z","tags":["技术","aws","eks","eks"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks13-kubectl/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks13-kubectl/","title":"AWS-EKS-13--Kubectl","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍kubectl命令的使用方法</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"kubectl命令\">kubectl命令</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Kubernetes 提供 kubectl 是使用 Kubernetes API 与 Kubernetes 集群的控制面进行通信的命令行工具。</p>\n</li>\n<li class=\"lvl-2\">\n<p><a href=\"https://kubernetes.io/zh-cn/docs/reference/kubectl/\">官网文档</a></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"built_in\">help</span></span><br><span class=\"line\">kubectl controls the Kubernetes cluster manager.</span><br><span class=\"line\"></span><br><span class=\"line\"> Find more information at: https://kubernetes.io/docs/reference/kubectl/</span><br><span class=\"line\"></span><br><span class=\"line\">Basic Commands (Beginner):</span><br><span class=\"line\">  create          Create a resource from a file or from stdin</span><br><span class=\"line\">  expose          Take a replication controller, service, deployment or pod and</span><br><span class=\"line\">expose it as a new Kubernetes service</span><br><span class=\"line\">  run             在集群上运行特定镜像</span><br><span class=\"line\">  <span class=\"built_in\">set</span>             为对象设置指定特性</span><br><span class=\"line\"></span><br><span class=\"line\">Basic Commands (Intermediate):</span><br><span class=\"line\">  explain         Get documentation <span class=\"keyword\">for</span> a resource</span><br><span class=\"line\">  get             显示一个或多个资源</span><br><span class=\"line\">  edit            编辑服务器上的资源</span><br><span class=\"line\">  delete          Delete resources by file names, stdin, resources and names, or</span><br><span class=\"line\">by resources and label selector</span><br><span class=\"line\"></span><br><span class=\"line\">Deploy Commands:</span><br><span class=\"line\">  rollout         Manage the rollout of a resource</span><br><span class=\"line\">  scale           Set a new size <span class=\"keyword\">for</span> a deployment, replica <span class=\"built_in\">set</span>, or replication</span><br><span class=\"line\">controller</span><br><span class=\"line\">  autoscale       Auto-scale a deployment, replica <span class=\"built_in\">set</span>, stateful <span class=\"built_in\">set</span>, or</span><br><span class=\"line\">replication controller</span><br><span class=\"line\"></span><br><span class=\"line\">Cluster Management Commands:</span><br><span class=\"line\">  certificate     修改证书资源。</span><br><span class=\"line\">  cluster-info    Display cluster information</span><br><span class=\"line\">  top             Display resource (CPU/memory) usage</span><br><span class=\"line\">  cordon          标记节点为不可调度</span><br><span class=\"line\">  uncordon        标记节点为可调度</span><br><span class=\"line\">  drain           清空节点以准备维护</span><br><span class=\"line\">  taint           更新一个或者多个节点上的污点</span><br><span class=\"line\"></span><br><span class=\"line\">Troubleshooting and Debugging Commands:</span><br><span class=\"line\">  describe        显示特定资源或资源组的详细信息</span><br><span class=\"line\">  logs            打印 Pod 中容器的日志</span><br><span class=\"line\">  attach          挂接到一个运行中的容器</span><br><span class=\"line\">  <span class=\"built_in\">exec</span>            在某个容器中执行一个命令</span><br><span class=\"line\">  port-forward    将一个或多个本地端口转发到某个 Pod</span><br><span class=\"line\">  proxy           运行一个指向 Kubernetes API 服务器的代理</span><br><span class=\"line\">  <span class=\"built_in\">cp</span>              Copy files and directories to and from containers</span><br><span class=\"line\">  auth            Inspect authorization</span><br><span class=\"line\">  debug           Create debugging sessions <span class=\"keyword\">for</span> troubleshooting workloads and nodes</span><br><span class=\"line\">  events          List events</span><br><span class=\"line\"></span><br><span class=\"line\">Advanced Commands:</span><br><span class=\"line\">  diff            Diff the live version against a would-be applied version</span><br><span class=\"line\">  apply           Apply a configuration to a resource by file name or stdin</span><br><span class=\"line\">  patch           Update fields of a resource</span><br><span class=\"line\">  replace         Replace a resource by file name or stdin</span><br><span class=\"line\">  <span class=\"built_in\">wait</span>            Experimental: Wait <span class=\"keyword\">for</span> a specific condition on one or many</span><br><span class=\"line\">resources</span><br><span class=\"line\">  kustomize       Build a kustomization target from a directory or URL.</span><br><span class=\"line\"></span><br><span class=\"line\">Settings Commands:</span><br><span class=\"line\">  label           更新某资源上的标签</span><br><span class=\"line\">  annotate        更新一个资源的注解</span><br><span class=\"line\">  completion      Output shell completion code <span class=\"keyword\">for</span> the specified shell (bash, zsh, fish, or powershell)</span><br><span class=\"line\"></span><br><span class=\"line\">Other Commands:</span><br><span class=\"line\">  alpha           Commands <span class=\"keyword\">for</span> features <span class=\"keyword\">in</span> alpha</span><br><span class=\"line\">  api-resources   Print the supported API resources on the server</span><br><span class=\"line\">  api-versions    Print the supported API versions on the server, <span class=\"keyword\">in</span> the form of <span class=\"string\">&quot;group/version&quot;</span></span><br><span class=\"line\">  config          修改 kubeconfig 文件</span><br><span class=\"line\">  plugin          Provides utilities <span class=\"keyword\">for</span> interacting with plugins</span><br><span class=\"line\">  version         输出客户端和服务端的版本信息</span><br></pre></td></tr></table></figure>\n<h2 id=\"context-集群-相关\">context[集群]相关</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看client和server版本，注意此时必须连上server端</span></span><br><span class=\"line\">k version</span><br><span class=\"line\">k version --output=yaml/json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只查看client版本</span></span><br><span class=\"line\">k version --client --short</span><br><span class=\"line\">k version --client --output=yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有资源信息，会显示name，shortname，版本，KIND等等</span></span><br><span class=\"line\">k api-resources</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看全部context配置，会显示所有context，当前context前面会用星号标识，同时显示其默认的namespace</span></span><br><span class=\"line\">k config get-contexts</span><br><span class=\"line\"><span class=\"comment\"># 查看当前context</span></span><br><span class=\"line\">k config current-context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定的context，后面跟上面命令查询出来的context的名称，同时修改k8s的配置文件，默认在~/.kube/config 文件</span></span><br><span class=\"line\">k config use-context eks-lexing</span><br><span class=\"line\"><span class=\"comment\"># 作用同上，都是切换上下文</span></span><br><span class=\"line\">k config <span class=\"built_in\">set</span> current-context ekstest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改当前context的名称</span></span><br><span class=\"line\">k config rename-context $(k config current-context) ty-hk-eks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看~/.kube/config 文件</span></span><br><span class=\"line\">k config view</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有插件文件路径</span></span><br><span class=\"line\">k plugin list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看集群信息</span></span><br><span class=\"line\">k cluster-info</span><br></pre></td></tr></table></figure>\n<h2 id=\"节点相关\">节点相关</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前集群下的node</span></span><br><span class=\"line\">k get nodes</span><br><span class=\"line\"><span class=\"comment\"># 显示更多信息，比如ip地址</span></span><br><span class=\"line\">k get nodes -o wide</span><br></pre></td></tr></table></figure>\n<h2 id=\"namespace–ns相关\">namespace–ns相关</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取当前集群下所有namespace</span></span><br><span class=\"line\">k get namespaces</span><br><span class=\"line\"><span class=\"comment\"># namespace可以简写为ns</span></span><br><span class=\"line\">k get ns</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前默认的namespace</span></span><br><span class=\"line\">k config get-contexts $(k config current-context)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置当前集群缺省的namespace，同时修改k8s的配置文件，默认在~/.kube/config 文件</span></span><br><span class=\"line\">k config set-context --current --namespace=default</span><br><span class=\"line\">k config set-context $(k config current-context) --namespace default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个新的namespace</span></span><br><span class=\"line\">k create namespace hanqf</span><br><span class=\"line\">k create ns hanqf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不创建，只生成yaml文件</span></span><br><span class=\"line\">k create ns hanqf --dry-run=client -o yaml &gt; namespace_hanqf.yaml</span><br><span class=\"line\"><span class=\"comment\"># 基于yaml创建namespace</span></span><br><span class=\"line\">k apply -f namespace_hanqf.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除namespace，删除的同时会删除namespace下的所有资源</span></span><br><span class=\"line\">k delete namespace hanqf</span><br></pre></td></tr></table></figure>\n<h2 id=\"pod–po相关\">pod–po相关</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取当前namespace下的pod</span></span><br><span class=\"line\">k get pods</span><br><span class=\"line\"><span class=\"comment\"># 显示更多信息，比如ip地址</span></span><br><span class=\"line\">k get pods -o wide</span><br><span class=\"line\"><span class=\"comment\"># 列出标签</span></span><br><span class=\"line\">k get pods --show-labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有namespace下的pod</span></span><br><span class=\"line\">k get pods -A</span><br><span class=\"line\"><span class=\"comment\"># 显示指定namespace下的pod</span></span><br><span class=\"line\">k get pods -n jx-git-operator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建pod</span></span><br><span class=\"line\">k run nginx --image=nginx:1.9 --port=80</span><br><span class=\"line\"><span class=\"comment\"># 生成yaml</span></span><br><span class=\"line\">k run nginx --image=nginx:1.9 --port=80 --dry-run=client -o yaml &gt; nginx.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod创建后的配置信息，可以使用k apply -f nginx2.yaml重新创建pod</span></span><br><span class=\"line\">k get pods nginx --output=yaml &gt; nginx2.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行yaml配置创建</span></span><br><span class=\"line\">k apply -f pod.yaml</span><br></pre></td></tr></table></figure>\n<h2 id=\"controller相关\">controller相关</h2>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/oYVIIm.jpg\" alt=\"\"><br>\n<img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/MyEcr0.jpg\" alt=\"\" width=\"1200\" height=\"400\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取当前namespace下的deployment</span></span><br><span class=\"line\">k get deployments</span><br><span class=\"line\"><span class=\"comment\"># 查看指定的deployment的配置信息</span></span><br><span class=\"line\">k describe deployments test-nginx</span><br><span class=\"line\"><span class=\"comment\"># 编辑指定的deployment</span></span><br><span class=\"line\">k edit deployments test-nginx</span><br><span class=\"line\"><span class=\"comment\"># 删除指定的deployment</span></span><br><span class=\"line\">k delete deployments test-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下同上</span></span><br><span class=\"line\"><span class=\"comment\"># 获取当前namespace下的statefulset，job,cronjob，daemonset</span></span><br><span class=\"line\">k get statefulsets</span><br><span class=\"line\">k get <span class=\"built_in\">jobs</span></span><br><span class=\"line\">k get cronjobs</span><br><span class=\"line\">k get daemonsets</span><br></pre></td></tr></table></figure>\n<h3 id=\"deployment–deploy\">deployment–deploy</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># deploy.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myngx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">myngx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">     <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">myngx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.7.9</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">myngx</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">8m</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命令行创建deploy</span></span><br><span class=\"line\">k create deployment test-nginx --image=nginx:1.9 --port=80 --replicas=2</span><br><span class=\"line\"><span class=\"comment\"># 创建yaml</span></span><br><span class=\"line\">k create deployment test-nginx --image=nginx:1.9 --port=80 --replicas=2 --dry-run=client -o yaml &gt; deploy_new.yaml</span><br><span class=\"line\"><span class=\"comment\"># 创建delpoyment</span></span><br><span class=\"line\">k apply -f deploy_new.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看deploy对应的rs信息，会显示升级历史</span></span><br><span class=\"line\">k get rs -owide -l app=test-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新启动deploy</span></span><br><span class=\"line\">kubectl rollout restart deployment test-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看全部deployment</span></span><br><span class=\"line\">k get deploy</span><br><span class=\"line\"><span class=\"comment\"># 将指定的deployment输出到yaml</span></span><br><span class=\"line\">k get deploy myngx -o yaml &gt; deploy_nginx.yaml</span><br><span class=\"line\"><span class=\"comment\"># 删除deployment</span></span><br><span class=\"line\">k delete deploy myngx</span><br><span class=\"line\"><span class=\"comment\"># 重新创建deployment</span></span><br><span class=\"line\">k apply -f deploy_nginx.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 扩缩容，pod不支持扩缩容，只有rs,deploy,sts等高级别controller才有扩缩容能力</span></span><br><span class=\"line\">k scale deploy myngx --replicas=4</span><br><span class=\"line\"><span class=\"comment\"># rs,deploy,sts等高级别controller都具有自愈能力，如果其下的pod被删除了，会自动重新创建新的pod</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改deploy</span></span><br><span class=\"line\"><span class=\"comment\"># 方式1：编辑配置，就是vim，保存后立即生效</span></span><br><span class=\"line\">k edit deploy test-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2: 命令行，比如修改过镜像版本</span></span><br><span class=\"line\"><span class=\"comment\"># k set image deployment deploy名称 镜像名称=镜像</span></span><br><span class=\"line\">k <span class=\"built_in\">set</span> image deployment test-nginx nginx=nginx:1.7.9</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看升级是否成功</span></span><br><span class=\"line\">k rollout status -w deployment test-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看deploy对应的rs信息，会显示升级历史</span></span><br><span class=\"line\">k get rs -owide -l app=test-nginx</span><br><span class=\"line\"><span class=\"comment\"># 查看历史版本记录，每行前有个版本号</span></span><br><span class=\"line\">k rollout <span class=\"built_in\">history</span> deploy test-nginx</span><br><span class=\"line\"><span class=\"comment\"># 查看指定历史版本号的详细信息</span></span><br><span class=\"line\">k rollout <span class=\"built_in\">history</span> deploy test-nginx --revision=2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回退到上一个版本</span></span><br><span class=\"line\">k rollout undo deploy test-nginx</span><br><span class=\"line\"><span class=\"comment\"># 回退到指定的版本</span></span><br><span class=\"line\">k rollout undo deploy test-nginx --to-revision=2</span><br></pre></td></tr></table></figure>\n<h3 id=\"daemonset–ds\">daemonset–ds</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>每个node都会创建一个pod，当有新的node加入进来时，pod会自动被daemonset调度到新的node上，同理删除node，该node上的pod也会被移除</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ds1.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ds1</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">fluentd-logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">mynginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">mynginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">tolerations:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">node-role.kubernetes.io/master</span></span><br><span class=\"line\">        <span class=\"attr\">effect:</span> <span class=\"string\">NoSchedule</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mynginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.7.9</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建ds</span></span><br><span class=\"line\">k apply -f ds1.yaml</span><br><span class=\"line\"><span class=\"comment\"># daemonset不支持使用create创建，但其格式与deployment差不多，可以先通过create创建deploy的yaml，然后对其进行修改，</span></span><br><span class=\"line\"><span class=\"comment\"># 如修改 apiVersion 和 kind，同时还要去掉replicas，另外需要加上tolerance的配置，保证其在master节点上也能部署</span></span><br><span class=\"line\">k run nginx --image=nginx:1.9 --dry-run -o yaml &gt; ds_new.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询ds</span></span><br><span class=\"line\">k get ds -n kube-system</span><br><span class=\"line\"><span class=\"comment\"># 删除</span></span><br><span class=\"line\">k delete ds -n kube-system ds1</span><br></pre></td></tr></table></figure>\n<h3 id=\"job\">job</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># job.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Job</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">job-demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">job-demo</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Never</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">counter</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;bin/sh&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i; done&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k apply -f job.yaml</span><br><span class=\"line\">k get <span class=\"built_in\">jobs</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"cronjob–cj\">cronjob–cj</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cronjob.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CronJob</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cronjob-demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span> <span class=\"string\">&quot;*/1 * * * *&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">jobTemplate:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">template:</span></span><br><span class=\"line\">        <span class=\"attr\">spec:</span></span><br><span class=\"line\">          <span class=\"attr\">restartPolicy:</span> <span class=\"string\">OnFailure</span></span><br><span class=\"line\">          <span class=\"attr\">containers:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">hello</span></span><br><span class=\"line\">            <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">            <span class=\"attr\">args:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;bin/sh&quot;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i; done&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k apply -f cronjob.yaml</span><br><span class=\"line\">k get cronjob -o wide</span><br><span class=\"line\">k get job</span><br></pre></td></tr></table></figure>\n<h3 id=\"statefulset–sts\">statefulset–sts</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>sts的特性<br>\n● 稳定的、唯一的网络标识。<br>\n● 稳定的、持久化的存储。<br>\n● 有序的、优雅的部署和扩展。<br>\n● 有序的、优雅的删除和停止。</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sts.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">&quot;nginx&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.9</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k apply -f sts.yaml</span><br><span class=\"line\">k get sts -owide</span><br></pre></td></tr></table></figure>\n<h2 id=\"label标签\">label标签</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>controller和service等都是基于标签选择器关联pod的，所以在指定label时一定要准确唯一</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以为任何资源设置标签</span></span><br><span class=\"line\"><span class=\"comment\"># k label 资源类型 资源名称 key=value</span></span><br><span class=\"line\">k label deploy myngx app=<span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 查看标签</span></span><br><span class=\"line\">k get deploy --show-labels</span><br><span class=\"line\"><span class=\"comment\"># 查看指定的标签值，标签会占用一列进行展示，多个标签使用逗号分隔，如果资源不存在该标签，则为空</span></span><br><span class=\"line\">k get pod -L app,run</span><br><span class=\"line\"><span class=\"comment\"># 只列出给定标签和值的资源</span></span><br><span class=\"line\">k get pod -l app=<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Configmap–cm\">Configmap–cm</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>用来存储配置文件的 kubernetes 资源对象，配置内容都存储在 etcd 中</p>\n</li>\n<li class=\"lvl-2\">\n<p>创建方法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过直接在命令行中指定 configmap 参数创建，即--from-literal</span></span><br><span class=\"line\">$ k create configmap config-map1 --from-literal=db.host=mysql.db --from-literal=db.port=<span class=\"string\">&#x27;3306&#x27;</span></span><br><span class=\"line\">$ k describe cm config-map1</span><br><span class=\"line\">Name:         config-map1</span><br><span class=\"line\">Namespace:    <span class=\"built_in\">test</span></span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">db.host:</span><br><span class=\"line\">----</span><br><span class=\"line\">mysql.db</span><br><span class=\"line\">db.port:</span><br><span class=\"line\">----</span><br><span class=\"line\">3306</span><br><span class=\"line\"></span><br><span class=\"line\">BinaryData</span><br><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">Events:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过指定文件创建，即将一个配置文件创建为一个 ConfigMap --from-file=&lt;文件&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果不指定key，则文件名称作为key</span></span><br><span class=\"line\">$ vi configs/app.properties</span><br><span class=\"line\">db.host mysql.db</span><br><span class=\"line\">db.port 3306</span><br><span class=\"line\"></span><br><span class=\"line\">$ k create configmap config-map2 --from-file=key1=./configs/app.properties</span><br><span class=\"line\">$ k describe cm config-map2</span><br><span class=\"line\">Name:         config-map2</span><br><span class=\"line\">Namespace:    <span class=\"built_in\">test</span></span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">key1:</span><br><span class=\"line\">----</span><br><span class=\"line\">db.host mysql.db</span><br><span class=\"line\">db.port 3306</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BinaryData</span><br><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">Events:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过指定目录创建，即将一个目录下的所有配置文件创建为一个 ConfigMap，--from-file=&lt;目录&gt;</span></span><br><span class=\"line\">$ k create configmap config-map3 --from-file=./configs</span><br><span class=\"line\">$ k describe cm config-map3</span><br><span class=\"line\">Name:         config-map3</span><br><span class=\"line\">Namespace:    <span class=\"built_in\">test</span></span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">app-copy.properties:</span><br><span class=\"line\">----</span><br><span class=\"line\">db.host mysql.db</span><br><span class=\"line\">db.port 3306</span><br><span class=\"line\"></span><br><span class=\"line\">app.properties:</span><br><span class=\"line\">----</span><br><span class=\"line\">db.host mysql.db</span><br><span class=\"line\">db.port 3306</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BinaryData</span><br><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">Events:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 事先写好标准的 configmap 的 yaml 文件，然后 kubectl create -f 创建</span></span><br><span class=\"line\">$ vim config-map4.yaml</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">data:</span><br><span class=\"line\">  db.host: mysql.db</span><br><span class=\"line\">  db.port: <span class=\"string\">&quot;3306&quot;</span> <span class=\"comment\"># 数字一定要用双引号括起来</span></span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: config-map4</span><br><span class=\"line\"></span><br><span class=\"line\">$ k apply -f config-map4.yaml</span><br><span class=\"line\">$ k describe cm config-map4</span><br><span class=\"line\">Name:         config-map4</span><br><span class=\"line\">Namespace:    <span class=\"built_in\">test</span></span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">db.host:</span><br><span class=\"line\">----</span><br><span class=\"line\">mysql.db</span><br><span class=\"line\">db.port:</span><br><span class=\"line\">----</span><br><span class=\"line\">3306</span><br><span class=\"line\"></span><br><span class=\"line\">BinaryData</span><br><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用方法</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 通过环境变量使用</span></span><br><span class=\"line\"><span class=\"comment\"># 1.使用 valueFrom、configMapKeyRef、name、key 指定要用的 key:</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: app</span><br><span class=\"line\">    image: centos</span><br><span class=\"line\">    <span class=\"built_in\">env</span>:</span><br><span class=\"line\">    - name: DB_HOST  <span class=\"comment\"># 环境变量名称</span></span><br><span class=\"line\">      valueFrom:</span><br><span class=\"line\">        configMapKeyRef:</span><br><span class=\"line\">          name: config-map4 <span class=\"comment\"># cm名称</span></span><br><span class=\"line\">          key: db.host      <span class=\"comment\"># cm中的key</span></span><br><span class=\"line\"><span class=\"comment\"># 2.通过 envFrom、configMapRef、name 使得 configmap 中的所有 key/value 对都自动变成环境变量</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: app</span><br><span class=\"line\">    image: centos</span><br><span class=\"line\">    envFrom:</span><br><span class=\"line\">      configMapRef:</span><br><span class=\"line\">        name: config-map4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 在启动命令中引用</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: app</span><br><span class=\"line\">    image: centos</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: [<span class=\"string\">&quot;/bin/sh&quot;</span>]</span><br><span class=\"line\">    args: [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;while true; do echo <span class=\"subst\">$(DB_HOST)</span> <span class=\"subst\">$(DB_PORT)</span> &gt;&gt; /out.txt; sleep 5; done&quot;</span>]</span><br><span class=\"line\">    <span class=\"built_in\">env</span>:</span><br><span class=\"line\">    - name: DB_HOST</span><br><span class=\"line\">      valueFrom:</span><br><span class=\"line\">        configMapKeyRef:</span><br><span class=\"line\">          name: config-map4</span><br><span class=\"line\">          key: db.host</span><br><span class=\"line\">    - name: DB_PORT</span><br><span class=\"line\">      valueFrom:</span><br><span class=\"line\">        configMapKeyRef:</span><br><span class=\"line\">          name: config-map4</span><br><span class=\"line\">          key: db.port</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 作为 volume 挂载使用</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: app</span><br><span class=\"line\">    image: centos</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: [<span class=\"string\">&quot;/bin/sh&quot;</span>]</span><br><span class=\"line\">    args: [<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;while true; do cat /tmp/config.properties &gt;&gt; /out.txt; sleep 5; done&quot;</span>]</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: config-map3</span><br><span class=\"line\">      mountPath: /tmp/config.properties <span class=\"comment\"># 挂载到的文件</span></span><br><span class=\"line\">      subPath: app.properties  <span class=\"comment\"># 被挂载的文件，即cm中的多个文件中的一个</span></span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">  - name: config-map3</span><br><span class=\"line\">    configMap:</span><br><span class=\"line\">      name: config-map3</span><br></pre></td></tr></table></figure>\n<h2 id=\"Secrets\">Secrets</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Secret 解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者 Pod Spec 中。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Secret 可以以 Volume 或者环境变量的方式使用。</p>\n</li>\n</ul>\n<h3 id=\"Secrets-类型\">Secrets 类型</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建 Secret 时，你可以使用 Secret 资源的 type 字段，或者与其等价的 kubectl 命令行参数（如果有的话）为其设置类型。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Kubernetes 提供若干种内置的类型，用于一些常见的使用场景。 针对这些类型，Kubernetes 所执行的合法性检查操作以及对其所实施的限制各不相同。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>内置类型</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Opaque</code></td>\n<td>用户定义的任意数据</td>\n</tr>\n<tr>\n<td><code>kubernetes.io/service-account-token</code></td>\n<td>服务账号令牌</td>\n</tr>\n<tr>\n<td><code>kubernetes.io/dockercfg</code></td>\n<td>~/.dockercfg 文件的序列化形式</td>\n</tr>\n<tr>\n<td><code>kubernetes.io/dockerconfigjson</code></td>\n<td>~/.docker/config.json 文件的序列化形式</td>\n</tr>\n<tr>\n<td><code>kubernetes.io/basic-auth</code></td>\n<td>用于基本身份认证的凭据</td>\n</tr>\n<tr>\n<td><code>kubernetes.io/ssh-auth</code></td>\n<td>用于 SSH 身份认证的凭据</td>\n</tr>\n<tr>\n<td><code>kubernetes.io/tls</code></td>\n<td>用于 TLS 客户端或者服务器端的数据</td>\n</tr>\n<tr>\n<td><code>bootstrap.kubernetes.io/token</code></td>\n<td>启动引导令牌数据</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>通过为 Secret 对象的 type 字段设置一个非空的字符串值，你也可以定义并使用自己 Secret 类型（如果 type 值为空字符串，则被视为 Opaque 类型）。</p>\n</li>\n<li class=\"lvl-2\">\n<p>关于Secret类型的进一步说请查看<a href=\"https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/\">https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/</a>，以下示例仅对常用的<code>Opaque</code>进行说明。</p>\n</li>\n</ul>\n<h3 id=\"创建-Secret\">创建 Secret</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置文件创建</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> -n <span class=\"string\">&#x27;my-app&#x27;</span> | <span class=\"built_in\">base64</span></span><br><span class=\"line\">bXktYXBw</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> -n <span class=\"string\">&#x27;39528$vdg7Jb&#x27;</span> | <span class=\"built_in\">base64</span></span><br><span class=\"line\">Mzk1MjgkdmRnN0pi</span><br><span class=\"line\"><span class=\"comment\"># 配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># secret.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Secret</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: test-secret</span><br><span class=\"line\">data:</span><br><span class=\"line\">  username: bXktYXBw  <span class=\"comment\"># value必须是警告base64加密后的值</span></span><br><span class=\"line\">  password: Mzk1MjgkdmRnN0pi</span><br><span class=\"line\"></span><br><span class=\"line\">$ k apply -f secret.yaml</span><br><span class=\"line\">$ k describe secrets test-secret</span><br><span class=\"line\">Name:         test-secret</span><br><span class=\"line\">Namespace:    <span class=\"built_in\">test</span></span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  Opaque</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">username:  6 bytes</span><br><span class=\"line\">password:  12 bytes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令行创建，此时明文创建即可</span></span><br><span class=\"line\">$ kubectl create secret generic test-secret2 --from-literal=<span class=\"string\">&#x27;username=my-app&#x27;</span> --from-literal=<span class=\"string\">&#x27;password=39528$vdg7Jb&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件创建</span></span><br><span class=\"line\">$ kubectl create secret generic ssh-key-secret --from-file=ssh-privatekey=/path/to/.ssh/id_rsa --from-file=ssh-publickey=/path/to/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Secret\">使用 Secret</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建一个可以通过卷访问 Secret 数据的 Pod</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># secret-pod.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: secret-test-pod</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: test-container</span><br><span class=\"line\">      image: nginx</span><br><span class=\"line\">      volumeMounts:</span><br><span class=\"line\">        <span class=\"comment\"># name 必须与下面的卷名匹配</span></span><br><span class=\"line\">        - name: secret-volume</span><br><span class=\"line\">          mountPath: /etc/secret-volume</span><br><span class=\"line\">          readOnly: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Secret 数据通过一个卷暴露给该 Pod 中的容器</span></span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - name: secret-volume</span><br><span class=\"line\">      secret:</span><br><span class=\"line\">        secretName: test-secret</span><br><span class=\"line\"></span><br><span class=\"line\">$ k apply -f secret-pod.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出包含两个文件，每个对应一个 Secret 数据条目</span></span><br><span class=\"line\">$ kubectl <span class=\"built_in\">exec</span> -i -t secret-test-pod -- <span class=\"built_in\">ls</span> /etc/secret-volume</span><br><span class=\"line\">password  username</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>映射 Secret 键到特定文件路径</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">来自 mysecret 的键 username 可以在路径 /etc/foo/my-group/my-username 下供容器使用，而不是路径 /etc/foo/username</li>\n<li class=\"lvl-6\">来自该 Secret 的键 password 没有映射到任何路径</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: mypod</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: mypod</span><br><span class=\"line\">    image: redis</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: foo</span><br><span class=\"line\">      mountPath: <span class=\"string\">&quot;/etc/foo&quot;</span></span><br><span class=\"line\">      readOnly: <span class=\"literal\">true</span></span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">  - name: foo</span><br><span class=\"line\">    secret:</span><br><span class=\"line\">      secretName: mysecret</span><br><span class=\"line\">      items:</span><br><span class=\"line\">      - key: username</span><br><span class=\"line\">        path: my-group/my-username</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用来自 Secret 中的数据定义容器变量</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k create secret generic backend-user --from-literal=backend-username=<span class=\"string\">&#x27;backend-admin&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># pod-single-secret-env-variable.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">  kind: Pod</span><br><span class=\"line\">  metadata:</span><br><span class=\"line\">    name: env-single-secret</span><br><span class=\"line\">  spec:</span><br><span class=\"line\">    containers:</span><br><span class=\"line\">    - name: envars-test-container</span><br><span class=\"line\">      image: nginx</span><br><span class=\"line\">      <span class=\"built_in\">env</span>:</span><br><span class=\"line\">      - name: SECRET_USERNAME</span><br><span class=\"line\">        valueFrom:</span><br><span class=\"line\">          secretKeyRef:</span><br><span class=\"line\">            name: backend-user</span><br><span class=\"line\">            key: backend-username</span><br><span class=\"line\">$ k apply -f pod-single-secret-env-variable.yaml</span><br><span class=\"line\">$ k <span class=\"built_in\">exec</span> -i -t env-single-secret -- /bin/sh -c <span class=\"string\">&#x27;echo $SECRET_USERNAME&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将 Secret 中的所有键值偶对定义为环境变量</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ k create secret generic test-secret --from-literal=username=<span class=\"string\">&#x27;my-app&#x27;</span> --from-literal=password=<span class=\"string\">&#x27;39528$vdg7Jb&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># pod-secret-envFrom.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">  kind: Pod</span><br><span class=\"line\">  metadata:</span><br><span class=\"line\">    name: envfrom-secret</span><br><span class=\"line\">  spec:</span><br><span class=\"line\">    containers:</span><br><span class=\"line\">    - name: envars-test-container</span><br><span class=\"line\">      image: nginx</span><br><span class=\"line\">      envFrom:</span><br><span class=\"line\">      - secretRef:</span><br><span class=\"line\">          name: test-secret</span><br><span class=\"line\">$ k apply -f pod-secret-envFrom.yaml</span><br><span class=\"line\">$ k <span class=\"built_in\">exec</span> -i -t envfrom-secret -- /bin/sh -c <span class=\"string\">&#x27;echo &quot;username: $username\\npassword: $password\\n&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"service–svc\">service–svc</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>svc负责解决端口映射的问题</p>\n</li>\n<li class=\"lvl-2\">\n<p>Kubernetes ServiceTypes 允许指定你所需要的 Service 类型。</p>\n</li>\n<li class=\"lvl-2\">\n<p>可用的 type 值及其行为有：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">ClusterIP<br>\n通过集群的内部 IP 暴露服务，选择该值时服务只能够在集群内部访问。 这也是你没有为服务显式指定 type 时使用的默认值。 你可以使用 Ingress 或者 Gateway API 向公众暴露服务。</li>\n<li class=\"lvl-6\">NodePort<br>\n通过每个节点上的 IP 和静态端口（NodePort）暴露服务。 为了让节点端口可用，Kubernetes 设置了集群 IP 地址，这等同于你请求 type: ClusterIP 的服务。</li>\n<li class=\"lvl-6\">LoadBalancer<br>\n使用云提供商的负载均衡器向外部暴露服务。 Kubernetes 不直接提供负载均衡组件；你必须提供一个，或者将你的 Kubernetes 集群与云提供商集成。</li>\n<li class=\"lvl-6\">ExternalName<br>\n将服务映射到 externalName 字段的内容（例如，映射到主机名 api.foo.bar.example）。 该映射将集群的 DNS 服务器配置为返回具有该外部主机名值的 CNAME 记录。 无需创建任何类型代理。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"NodePort\">NodePort</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>可以让 kubernetes 在其所在节点上保留一个端口（所有节点上都使用相同的端口号），然后将传入的连接转发给 pod</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># svc-nodeport.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">svc-nodeport</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">ports:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test-nginx</span></span><br><span class=\"line\">     <span class=\"attr\">port:</span> <span class=\"number\">3080</span></span><br><span class=\"line\">     <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">     <span class=\"attr\">nodePort:</span> <span class=\"number\">32115</span> <span class=\"comment\"># 此处指定具体的端口，不能重复，如果没有配置则随机创建</span></span><br><span class=\"line\">   <span class=\"attr\">selector:</span></span><br><span class=\"line\">     <span class=\"attr\">app:</span> <span class=\"string\">test-nginx</span></span><br><span class=\"line\">   <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ClusterIP\">ClusterIP</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>提供虚拟ip</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基于delpoyment创建service</span></span><br><span class=\"line\">k expose deployment test-nginx --name svc-cluster-ip --port=3280 --target-port=80 --<span class=\"built_in\">type</span>=ClusterIP</span><br><span class=\"line\"><span class=\"comment\"># 不创建，只生成yaml文件</span></span><br><span class=\"line\">k expose deployment test-nginx --name svc-cluster-ip --port=3280 --target-port=80 --<span class=\"built_in\">type</span>=ClusterIP --dry-run=client -o yaml &gt; svc-cluster-ip.yaml</span><br><span class=\"line\"><span class=\"comment\"># 基于yaml创建service</span></span><br><span class=\"line\">k apply -f svc-cluster-ip.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Headless service clusterIP：基于statefulset创建service</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">不提供虚拟ip，而是返回具体的pod地址，并且基于如下规则查找：<br>\n<code>$&#123;podName&#125;.$&#123;headlessServiceName即svcName&#125;.$&#123;namespace&#125;.$&#123;clusterDomainName&#125;</code>，<br>\n同一个namespace的pod访问时一般指定到${headlessServiceName}即可，跨namespace时需要指定到${namespace}</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># svc-sts-web.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span> <span class=\"comment\"># 这里必须设置为None</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"LoadBalancer\">LoadBalancer</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>相比 NodePort 方式可以通过任何节点的 指定 端口访问内部的 pod，LoadBalancer 方式拥有自己独一无二的可公开访问的 IP 地址；</p>\n</li>\n<li class=\"lvl-2\">\n<p>LoadBalance 其实是 NodePort 的一种扩展，使得服务可以通过一个专用的负载均衡器来访问。</p>\n</li>\n<li class=\"lvl-2\">\n<p>如果是自建k8s，Kubernetes 没 有 为 裸 机 集 群 提 供 网 络 负 载 平 衡 器 的 实 现，所以需要安装一个LoadBalancer，比如 MetaLb 负载均衡，这里不做赘述。</p>\n</li>\n<li class=\"lvl-2\">\n<p>EKS<a href=\"/2023/07/07/aws-eks07-loadbalancer/\" title=\"AWS-EKS-07--安装 AWS Load Balancer Controller 附加组件\">安装 AWS Load Balancer Controller 附加组件</a>后即可提供支持。</p>\n</li>\n</ul>\n<h3 id=\"可以基于pod直接创建svc\">可以基于pod直接创建svc</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动一个pod，默认的label是 run=nginx-app</span></span><br><span class=\"line\">kubectl run nginx-app --image=nginx --restart=Never --port=80</span><br><span class=\"line\"><span class=\"comment\"># 为pod添加标签</span></span><br><span class=\"line\">k label pod nginx-app app=nginx-app</span><br><span class=\"line\"><span class=\"comment\"># 创建一个svc的yaml文件，其selector为app: nginx-app，这里没有指定nodePort，创建时会随机分配一个端口</span></span><br><span class=\"line\"><span class=\"comment\"># 也可以修改生成的yaml文件，使其符合要求</span></span><br><span class=\"line\">kubectl create svc nodeport nginx-app --tcp=80:80 --dry-run -o yaml &gt; svc_pod.yaml</span><br><span class=\"line\">k apply -f svc_pod.yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看svc\">查看svc</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看svc，注意查看TYPE，CLUSTER-IP ，EXTERNAL-IP，PORT显示的不同之处</span></span><br><span class=\"line\">&gt; k get svc -o wide</span><br><span class=\"line\">NAME                    TYPE           CLUSTER-IP       EXTERNAL-IP                                                               PORT(S)          AGE    SELECTOR</span><br><span class=\"line\">nginx                   ClusterIP      None             &lt;none&gt;                                                                    80/TCP           130m   app=nginx</span><br><span class=\"line\">svc-loadbalance-nginx   LoadBalancer   172.20.57.83     aa39ab20daad5447da7ee7d283ab2a83-1210832584.ap-east-1.elb.amazonaws.com   3081:32116/TCP   10m    app=test-nginx</span><br><span class=\"line\">svc-test-nginx          NodePort       172.20.39.12     &lt;none&gt;                                                                    3080:32115/TCP   18h    app=test-nginx</span><br><span class=\"line\">test-loadbalancer-new   LoadBalancer   172.20.242.126   a2774e4dc02ad42cc97c54fc9968624b-882652598.ap-east-1.elb.amazonaws.com    3282:31212/TCP   10s    app=test-nginx</span><br><span class=\"line\">test-nginx-new          ClusterIP      172.20.144.96    &lt;none&gt;                                                                    3280/TCP         162m   app=test-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看endpoint--ep</span></span><br><span class=\"line\">k get endpoints</span><br><span class=\"line\">&gt; k get ep</span><br><span class=\"line\">NAME                    ENDPOINTS                                            AGE</span><br><span class=\"line\">nginx                   10.25.113.205:80,10.25.142.172:80,10.25.148.165:80   132m</span><br><span class=\"line\">svc-loadbalance-nginx   10.25.116.40:80,10.25.121.198:80,10.25.122.75:80     12m</span><br><span class=\"line\">svc-test-nginx          10.25.116.40:80,10.25.121.198:80,10.25.122.75:80     18h</span><br><span class=\"line\">test-loadbalancer-new   10.25.116.40:80,10.25.121.198:80,10.25.122.75:80     2m11s</span><br><span class=\"line\">test-nginx-new          10.25.116.40:80,10.25.121.198:80,10.25.122.75:80     164m</span><br></pre></td></tr></table></figure>\n<h2 id=\"Ingress\">Ingress</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Ingress将来自集群外部的 HTTP 和 HTTPS 路由暴露给集群 内的服务。流量路由由 Ingress 资源上定义的规则控制。</p>\n</li>\n<li class=\"lvl-2\">\n<p>私有k8s不提供Ingress，需要自行安装。</p>\n</li>\n<li class=\"lvl-2\">\n<p>基于aws-eks等云服务通过<a href=\"/2023/07/07/aws-eks07-loadbalancer/\" title=\"AWS-EKS-07--安装 AWS Load Balancer Controller 附加组件\">安装 AWS Load Balancer Controller 附加组件</a>提供Ingress功能。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k get ing</span><br><span class=\"line\">k get ing -A</span><br><span class=\"line\">k get ing -n <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"HPA：Horizontal-Pod-Autoscaler-自动弹性伸缩\">HPA：Horizontal Pod Autoscaler 自动弹性伸缩</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>实现hpa的前提是k8s集群中<a href=\"/2023/07/07/aws-eks11-metrics/\" title=\"AWS-EKS-11--安装 Kubernetes Metrics Server\">部署 metrics-server</a>，其可对node和pod占用CPU、内存的情况进行监控。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基于deployment创建hpa</span></span><br><span class=\"line\">k autoscale deployment test-nginx --max=3 --min=1 --cpu-percent=60</span><br><span class=\"line\"><span class=\"comment\"># 最多3个pod，最少1个pod，基于cpu使用情况，超过60%时进行扩容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看hpa</span></span><br><span class=\"line\">k get hpa</span><br></pre></td></tr></table></figure>\n<h2 id=\"其它命令\">其它命令</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入pod</span></span><br><span class=\"line\">k <span class=\"built_in\">exec</span> podName -it -- sh</span><br><span class=\"line\">k <span class=\"built_in\">exec</span> podName -it -- /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监视变化 -w</span></span><br><span class=\"line\">k get deploy -w</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不显示标题头 --no-headers=true</span></span><br><span class=\"line\">k get pods --no-headers=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod的日志输出</span></span><br><span class=\"line\">k logs podName</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑一个资源，直接编辑已经部署的资源yaml</span></span><br><span class=\"line\">k edit deploy app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看一个资源的部署情况</span></span><br><span class=\"line\">k describe deploy app</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍kubectl命令的使用方法 参考资料： Amazon EKS用户指南 Kubernetes 文档 kubectl命令 Kubernetes 提供 kubectl 是使用 Kubernetes API 与 Kubernetes 集群的控制面进行通信的命令行工具。 官网文档 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768$ kubectl helpkubectl controls the Kubernetes cluster manager. Find more information at: https://kubernetes.io/docs/reference/kubectl/Basic Commands (Beginner): create Create a resource from a file or from stdin expose Take a replication controller, service, deployment or pod andexpose it as a new Kubernetes service run 在集群上运行特定镜像 set 为对象设置指定特性Basic Commands (Intermediate): explain Get documentation for a resource get 显示一个或多个资源 edit 编辑服务器上的资源 delete Delete resources by file names, stdin, resources and names, orby resources and label selectorDeploy Commands: rollout Manage the rollout of a resource scale Set a new size for a deployment, replica set, or replicationcontroller autoscale Auto-scale a deployment, replica set, stateful set, orreplication controllerCluster Management Commands: certificate 修改证书资源。 cluster-info Display cluster information top Display resource (CPU/memory) usage cordon 标记节点为不可调度 uncordon 标记节点为可调度 drain 清空节点以准备维护 taint 更新一个或者多个节点上的污点Troubleshooting and Debugging Commands: describe 显示特定资源或资源组的详细信息 logs 打印 Pod 中容器的日志 attach 挂接到一个运行中的容器 exec 在某个容器中执行一个命令 port-forward 将一个或多个本地端口转发到某个 Pod proxy 运行一个指向 Kubernetes API 服务器的代理 cp Copy files and directories to and from containers auth Inspect authorization debug Create debugging sessions for troubleshooting workloads and nodes events List eventsAdvanced Commands: diff Diff the live version against a would-be applied version apply Apply a configuration to a resource by file name or stdin patch Update fields of a resource replace Replace a resource by file name or stdin wait Experimental: Wait for a specific condition on one or manyresources kustomize Build a kustomization target from a directory or URL.Settings Commands: label 更新某资源上的标签 annotate 更新一个资源的注解 completion Output shell completion code for the specified shell (bash, zsh, fish, or powershell)Other Commands: alpha Commands for features in alpha api-resources Print the supported API resources on the server api-versions Print the supported API versions on the server, in the form of &quot;group/version&quot; config 修改 kubeconfig 文件 plugin Provides utilities for interacting with plugins version 输出客户端和服务端的版本信息 context[集群]相关 1234567891011121314151617181920212223242526272829303132# 查看client和server版本，注意此时必须连上server端k versionk version --output=yaml/json# 只查看client版本k version --client --shortk version --client --output=yaml# 查看所有资源信息，会显示name，shortname，版本，KIND等等k api-resources# 查看全部context配置，会显示所有context，当前context前面会用星号标识，同时显示其默认的namespacek config get-contexts# 查看当前contextk config current-context# 切换到指定的context，后面跟上面命令查询出来的context的名称，同时修改k8s的配置文件，默认在~/.kube/config 文件k config use-context eks-lexing# 作用同上，都是切换上下文k config set current-context ekstest# 修改当前context的名称k config rename-context $(k config current-context) ty-hk-eks# 查看~/.kube/config 文件k config view# 列出所有插件文件路径k plugin list# 查看集群信息k cluster-info 节点相关 1234# 查看当前集群下的nodek get nodes# 显示更多信息，比如ip地址k get nodes -o wide namespace–ns相关 1234567891011121314151617181920212223# 获取当前集群下所有namespacek get namespaces# namespace可以简写为nsk get ns# 查看当前默认的namespacek config get-contexts $(k config current-context)# 设置当前集群缺省的namespace，同时修改k8s的配置文件，默认在~/.kube/config 文件k config set-context --current --namespace=defaultk config set-context $(k config current-context) --namespace default# 创建一个新的namespacek create namespace hanqfk create ns hanqf# 不创建，只生成yaml文件k create ns hanqf --dry-run=client -o yaml &gt; namespace_hanqf.yaml# 基于yaml创建namespacek apply -f namespace_hanqf.yaml# 删除namespace，删除的同时会删除namespace下的所有资源k delete namespace hanqf pod–po相关 12345678910111213141516171819202122# 获取当前namespace下的podk get pods# 显示更多信息，比如ip地址k get pods -o wide# 列出标签k get pods --show-labels# 显示所有namespace下的podk get pods -A# 显示指定namespace下的podk get pods -n jx-git-operator# 创建podk run nginx --image=nginx:1.9 --port=80# 生成yamlk run nginx --image=nginx:1.9 --port=80 --dry-run=client -o yaml &gt; nginx.yaml# 查看pod创建后的配置信息，可以使用k apply -f nginx2.yaml重新创建podk get pods nginx --output=yaml &gt; nginx2.yaml# 执行yaml配置创建k apply -f pod.yaml controller相关 123456789101112131415# 获取当前namespace下的deploymentk get deployments# 查看指定的deployment的配置信息k describe deployments test-nginx# 编辑指定的deploymentk edit deployments test-nginx# 删除指定的deploymentk delete deployments test-nginx# 以下同上# 获取当前namespace下的statefulset，job,cronjob，daemonsetk get statefulsetsk get jobsk get cronjobsk get daemonsets deployment–deploy 1234567891011121314151617181920212223# deploy.yamlapiVersion: apps/v1kind: Deploymentmetadata: name: myngxspec: replicas: 3 selector: matchLabels: app: myngx template: metadata: labels: app: myngx spec: containers: - image: nginx:1.7.9 name: myngx ports: - containerPort: 80 resources: requests: cpu: 8m 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# 命令行创建deployk create deployment test-nginx --image=nginx:1.9 --port=80 --replicas=2# 创建yamlk create deployment test-nginx --image=nginx:1.9 --port=80 --replicas=2 --dry-run=client -o yaml &gt; deploy_new.yaml# 创建delpoymentk apply -f deploy_new.yaml# 查看deploy对应的rs信息，会显示升级历史k get rs -owide -l app=test-nginx# 重新启动deploykubectl rollout restart deployment test-nginx# 查看全部deploymentk get deploy# 将指定的deployment输出到yamlk get deploy myngx -o yaml &gt; deploy_nginx.yaml# 删除deploymentk delete deploy myngx# 重新创建deploymentk apply -f deploy_nginx.yaml# 扩缩容，pod不支持扩缩容，只有rs,deploy,sts等高级别controller才有扩缩容能力k scale deploy myngx --replicas=4# rs,deploy,sts等高级别controller都具有自愈能力，如果其下的pod被删除了，会自动重新创建新的pod# 修改deploy# 方式1：编辑配置，就是vim，保存后立即生效k edit deploy test-nginx# 方式2: 命令行，比如修改过镜像版本# k set image deployment deploy名称 镜像名称=镜像k set image deployment test-nginx nginx=nginx:1.7.9# 查看升级是否成功k rollout status -w deployment test-nginx# 查看deploy对应的rs信息，会显示升级历史k get rs -owide -l app=test-nginx# 查看历史版本记录，每行前有个版本号k rollout history deploy test-nginx# 查看指定历史版本号的详细信息k rollout history deploy test-nginx --revision=2# 回退到上一个版本k rollout undo deploy test-nginx# 回退到指定的版本k rollout undo deploy test-nginx --to-revision=2 daemonset–ds 每个node都会创建一个pod，当有新的node加入进来时，pod会自动被daemonset调度到新的node上，同理删除node，该node上的pod也会被移除 1234567891011121314151617181920212223242526272829# ds1.yamlapiVersion: apps/v1kind: DaemonSetmetadata: name: ds1 namespace: kube-system labels: k8s-app: fluentd-loggingspec: selector: matchLabels: name: mynginx template: metadata: labels: name: mynginx spec: tolerations: - key: node-role.kubernetes.io/master effect: NoSchedule containers: - name: mynginx image: nginx:1.7.9 resources: limits: memory: 200Mi requests: cpu: 100m memory: 200Mi 12345678910# 创建dsk apply -f ds1.yaml# daemonset不支持使用create创建，但其格式与deployment差不多，可以先通过create创建deploy的yaml，然后对其进行修改，# 如修改 apiVersion 和 kind，同时还要去掉replicas，另外需要加上tolerance的配置，保证其在master节点上也能部署k run nginx --image=nginx:1.9 --dry-run -o yaml &gt; ds_new.yaml# 查询dsk get ds -n kube-system# 删除k delete ds -n kube-system ds1 job 12345678910111213141516171819# job.yamlapiVersion: batch/v1kind: Jobmetadata: name: job-demospec: template: metadata: name: job-demo spec: restartPolicy: Never containers: - name: counter image: busybox command: - &quot;bin/sh&quot; - &quot;-c&quot; - &quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i; done&quot; imagePullPolicy: IfNotPresent 12k apply -f job.yamlk get jobs cronjob–cj 12345678910111213141516171819# cronjob.yamlapiVersion: batch/v1kind: CronJobmetadata: name: cronjob-demospec: schedule: &quot;*/1 * * * *&quot; jobTemplate: spec: template: spec: restartPolicy: OnFailure containers: - name: hello image: busybox args: - &quot;bin/sh&quot; - &quot;-c&quot; - &quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i; done&quot; 123k apply -f cronjob.yamlk get cronjob -o widek get job statefulset–sts sts的特性 ● 稳定的、唯一的网络标识。 ● 稳定的、持久化的存储。 ● 有序的、优雅的部署和扩展。 ● 有序的、优雅的删除和停止。 12345678910111213141516171819202122# sts.yamlapiVersion: apps/v1kind: StatefulSetmetadata: name: webspec: serviceName: &quot;nginx&quot; replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.9 ports: - containerPort: 80 name: web 12k apply -f sts.yamlk get sts -owide label标签 controller和service等都是基于标签选择器关联pod的，所以在指定label时一定要准确唯一 123456789# 可以为任何资源设置标签# k label 资源类型 资源名称 key=valuek label deploy myngx app=test# 查看标签k get deploy --show-labels# 查看指定的标签值，标签会占用一列进行展示，多个标签使用逗号分隔，如果资源不存在该标签，则为空k get pod -L app,run# 只列出给定标签和值的资源k get pod -l app=test Configmap–cm 用来存储配置文件的 kubernetes 资源对象，配置内容都存储在 etcd 中 创建方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104# 通过直接在命令行中指定 configmap 参数创建，即--from-literal$ k create configmap config-map1 --from-literal=db.host=mysql.db --from-literal=db.port=&#x27;3306&#x27;$ k describe cm config-map1Name: config-map1Namespace: testLabels: &lt;none&gt;Annotations: &lt;none&gt;Data====db.host:----mysql.dbdb.port:----3306BinaryData====Events: &lt;none&gt;# 通过指定文件创建，即将一个配置文件创建为一个 ConfigMap --from-file=&lt;文件&gt;# 如果不指定key，则文件名称作为key$ vi configs/app.propertiesdb.host mysql.dbdb.port 3306$ k create configmap config-map2 --from-file=key1=./configs/app.properties$ k describe cm config-map2Name: config-map2Namespace: testLabels: &lt;none&gt;Annotations: &lt;none&gt;Data====key1:----db.host mysql.dbdb.port 3306BinaryData====Events: &lt;none&gt;# 通过指定目录创建，即将一个目录下的所有配置文件创建为一个 ConfigMap，--from-file=&lt;目录&gt;$ k create configmap config-map3 --from-file=./configs$ k describe cm config-map3Name: config-map3Namespace: testLabels: &lt;none&gt;Annotations: &lt;none&gt;Data====app-copy.properties:----db.host mysql.dbdb.port 3306app.properties:----db.host mysql.dbdb.port 3306BinaryData====Events: &lt;none&gt;# 事先写好标准的 configmap 的 yaml 文件，然后 kubectl create -f 创建$ vim config-map4.yamlapiVersion: v1data: db.host: mysql.db db.port: &quot;3306&quot; # 数字一定要用双引号括起来kind: ConfigMapmetadata: name: config-map4$ k apply -f config-map4.yaml$ k describe cm config-map4Name: config-map4Namespace: testLabels: &lt;none&gt;Annotations: &lt;none&gt;Data====db.host:----mysql.dbdb.port:----3306BinaryData====Events: &lt;none&gt; 使用方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273## 通过环境变量使用# 1.使用 valueFrom、configMapKeyRef、name、key 指定要用的 key:apiVersion: v1kind: Podmetadata: name: appspec: containers: - name: app image: centos env: - name: DB_HOST # 环境变量名称 valueFrom: configMapKeyRef: name: config-map4 # cm名称 key: db.host # cm中的key# 2.通过 envFrom、configMapRef、name 使得 configmap 中的所有 key/value 对都自动变成环境变量apiVersion: v1kind: Podmetadata: name: appspec: containers: - name: app image: centos envFrom: configMapRef: name: config-map4## 在启动命令中引用apiVersion: v1kind: Podmetadata: name: appspec: containers: - name: app image: centos command: [&quot;/bin/sh&quot;] args: [&quot;-c&quot;, &quot;while true; do echo $(DB_HOST) $(DB_PORT) &gt;&gt; /out.txt; sleep 5; done&quot;] env: - name: DB_HOST valueFrom: configMapKeyRef: name: config-map4 key: db.host - name: DB_PORT valueFrom: configMapKeyRef: name: config-map4 key: db.port## 作为 volume 挂载使用apiVersion: v1kind: Podmetadata: name: appspec: containers: - name: app image: centos command: [&quot;/bin/sh&quot;] args: [&quot;-c&quot;, &quot;while true; do cat /tmp/config.properties &gt;&gt; /out.txt; sleep 5; done&quot;] volumeMounts: - name: config-map3 mountPath: /tmp/config.properties # 挂载到的文件 subPath: app.properties # 被挂载的文件，即cm中的多个文件中的一个 volumes: - name: config-map3 configMap: name: config-map3 Secrets Secret 解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者 Pod Spec 中。 Secret 可以以 Volume 或者环境变量的方式使用。 Secrets 类型 创建 Secret 时，你可以使用 Secret 资源的 type 字段，或者与其等价的 kubectl 命令行参数（如果有的话）为其设置类型。 Kubernetes 提供若干种内置的类型，用于一些常见的使用场景。 针对这些类型，Kubernetes 所执行的合法性检查操作以及对其所实施的限制各不相同。 内置类型 用法 Opaque 用户定义的任意数据 kubernetes.io/service-account-token 服务账号令牌 kubernetes.io/dockercfg ~/.dockercfg 文件的序列化形式 kubernetes.io/dockerconfigjson ~/.docker/config.json 文件的序列化形式 kubernetes.io/basic-auth 用于基本身份认证的凭据 kubernetes.io/ssh-auth 用于 SSH 身份认证的凭据 kubernetes.io/tls 用于 TLS 客户端或者服务器端的数据 bootstrap.kubernetes.io/token 启动引导令牌数据 通过为 Secret 对象的 type 字段设置一个非空的字符串值，你也可以定义并使用自己 Secret 类型（如果 type 值为空字符串，则被视为 Opaque 类型）。 关于Secret类型的进一步说请查看https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/，以下示例仅对常用的Opaque进行说明。 创建 Secret 12345678910111213141516171819202122232425262728293031323334# 配置文件创建$ echo -n &#x27;my-app&#x27; | base64bXktYXBw$ echo -n &#x27;39528$vdg7Jb&#x27; | base64Mzk1MjgkdmRnN0pi# 配置文件# secret.yamlapiVersion: v1kind: Secretmetadata: name: test-secretdata: username: bXktYXBw # value必须是警告base64加密后的值 password: Mzk1MjgkdmRnN0pi$ k apply -f secret.yaml$ k describe secrets test-secretName: test-secretNamespace: testLabels: &lt;none&gt;Annotations: &lt;none&gt;Type: OpaqueData====username: 6 bytespassword: 12 bytes# 命令行创建，此时明文创建即可$ kubectl create secret generic test-secret2 --from-literal=&#x27;username=my-app&#x27; --from-literal=&#x27;password=39528$vdg7Jb&#x27;# 文件创建$ kubectl create secret generic ssh-key-secret --from-file=ssh-privatekey=/path/to/.ssh/id_rsa --from-file=ssh-publickey=/path/to/.ssh/id_rsa.pub 使用 Secret 创建一个可以通过卷访问 Secret 数据的 Pod 12345678910111213141516171819202122232425# secret-pod.yamlapiVersion: v1kind: Podmetadata: name: secret-test-podspec: containers: - name: test-container image: nginx volumeMounts: # name 必须与下面的卷名匹配 - name: secret-volume mountPath: /etc/secret-volume readOnly: true # Secret 数据通过一个卷暴露给该 Pod 中的容器 volumes: - name: secret-volume secret: secretName: test-secret$ k apply -f secret-pod.yaml# 输出包含两个文件，每个对应一个 Secret 数据条目$ kubectl exec -i -t secret-test-pod -- ls /etc/secret-volumepassword username 映射 Secret 键到特定文件路径 来自 mysecret 的键 username 可以在路径 /etc/foo/my-group/my-username 下供容器使用，而不是路径 /etc/foo/username 来自该 Secret 的键 password 没有映射到任何路径 12345678910111213141516171819apiVersion: v1kind: Podmetadata: name: mypodspec: containers: - name: mypod image: redis volumeMounts: - name: foo mountPath: &quot;/etc/foo&quot; readOnly: true volumes: - name: foo secret: secretName: mysecret items: - key: username path: my-group/my-username 使用来自 Secret 中的数据定义容器变量 123456789101112131415161718$ k create secret generic backend-user --from-literal=backend-username=&#x27;backend-admin&#x27;# pod-single-secret-env-variable.yamlapiVersion: v1 kind: Pod metadata: name: env-single-secret spec: containers: - name: envars-test-container image: nginx env: - name: SECRET_USERNAME valueFrom: secretKeyRef: name: backend-user key: backend-username$ k apply -f pod-single-secret-env-variable.yaml$ k exec -i -t env-single-secret -- /bin/sh -c &#x27;echo $SECRET_USERNAME&#x27; 将 Secret 中的所有键值偶对定义为环境变量 123456789101112131415$ k create secret generic test-secret --from-literal=username=&#x27;my-app&#x27; --from-literal=password=&#x27;39528$vdg7Jb&#x27;# pod-secret-envFrom.yamlapiVersion: v1 kind: Pod metadata: name: envfrom-secret spec: containers: - name: envars-test-container image: nginx envFrom: - secretRef: name: test-secret$ k apply -f pod-secret-envFrom.yaml$ k exec -i -t envfrom-secret -- /bin/sh -c &#x27;echo &quot;username: $username\\npassword: $password\\n&quot;&#x27; service–svc svc负责解决端口映射的问题 Kubernetes ServiceTypes 允许指定你所需要的 Service 类型。 可用的 type 值及其行为有： ClusterIP 通过集群的内部 IP 暴露服务，选择该值时服务只能够在集群内部访问。 这也是你没有为服务显式指定 type 时使用的默认值。 你可以使用 Ingress 或者 Gateway API 向公众暴露服务。 NodePort 通过每个节点上的 IP 和静态端口（NodePort）暴露服务。 为了让节点端口可用，Kubernetes 设置了集群 IP 地址，这等同于你请求 type: ClusterIP 的服务。 LoadBalancer 使用云提供商的负载均衡器向外部暴露服务。 Kubernetes 不直接提供负载均衡组件；你必须提供一个，或者将你的 Kubernetes 集群与云提供商集成。 ExternalName 将服务映射到 externalName 字段的内容（例如，映射到主机名 api.foo.bar.example）。 该映射将集群的 DNS 服务器配置为返回具有该外部主机名值的 CNAME 记录。 无需创建任何类型代理。 NodePort 可以让 kubernetes 在其所在节点上保留一个端口（所有节点上都使用相同的端口号），然后将传入的连接转发给 pod 1234567891011121314# svc-nodeport.yamlapiVersion: v1kind: Servicemetadata: name: svc-nodeportspec: ports: - name: test-nginx port: 3080 targetPort: 80 nodePort: 32115 # 此处指定具体的端口，不能重复，如果没有配置则随机创建 selector: app: test-nginx type: NodePort ClusterIP 提供虚拟ip 123456# 基于delpoyment创建servicek expose deployment test-nginx --name svc-cluster-ip --port=3280 --target-port=80 --type=ClusterIP# 不创建，只生成yaml文件k expose deployment test-nginx --name svc-cluster-ip --port=3280 --target-port=80 --type=ClusterIP --dry-run=client -o yaml &gt; svc-cluster-ip.yaml# 基于yaml创建servicek apply -f svc-cluster-ip.yaml Headless service clusterIP：基于statefulset创建service 不提供虚拟ip，而是返回具体的pod地址，并且基于如下规则查找： $&#123;podName&#125;.$&#123;headlessServiceName即svcName&#125;.$&#123;namespace&#125;.$&#123;clusterDomainName&#125;， 同一个namespace的pod访问时一般指定到${headlessServiceName}即可，跨namespace时需要指定到${namespace} 1234567891011121314# svc-sts-web.yamlapiVersion: v1kind: Servicemetadata: name: nginx labels: app: nginxspec: ports: - port: 80 name: web clusterIP: None # 这里必须设置为None selector: app: nginx LoadBalancer 相比 NodePort 方式可以通过任何节点的 指定 端口访问内部的 pod，LoadBalancer 方式拥有自己独一无二的可公开访问的 IP 地址； LoadBalance 其实是 NodePort 的一种扩展，使得服务可以通过一个专用的负载均衡器来访问。 如果是自建k8s，Kubernetes 没 有 为 裸 机 集 群 提 供 网 络 负 载 平 衡 器 的 实 现，所以需要安装一个LoadBalancer，比如 MetaLb 负载均衡，这里不做赘述。 EKS安装 AWS Load Balancer Controller 附加组件后即可提供支持。 可以基于pod直接创建svc 12345678# 启动一个pod，默认的label是 run=nginx-appkubectl run nginx-app --image=nginx --restart=Never --port=80# 为pod添加标签k label pod nginx-app app=nginx-app# 创建一个svc的yaml文件，其selector为app: nginx-app，这里没有指定nodePort，创建时会随机分配一个端口# 也可以修改生成的yaml文件，使其符合要求kubectl create svc nodeport nginx-app --tcp=80:80 --dry-run -o yaml &gt; svc_pod.yamlk apply -f svc_pod.yaml 查看svc 123456789101112131415161718# 查看svc，注意查看TYPE，CLUSTER-IP ，EXTERNAL-IP，PORT显示的不同之处&gt; k get svc -o wideNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTORnginx ClusterIP None &lt;none&gt; 80/TCP 130m app=nginxsvc-loadbalance-nginx LoadBalancer 172.20.57.83 aa39ab20daad5447da7ee7d283ab2a83-1210832584.ap-east-1.elb.amazonaws.com 3081:32116/TCP 10m app=test-nginxsvc-test-nginx NodePort 172.20.39.12 &lt;none&gt; 3080:32115/TCP 18h app=test-nginxtest-loadbalancer-new LoadBalancer 172.20.242.126 a2774e4dc02ad42cc97c54fc9968624b-882652598.ap-east-1.elb.amazonaws.com 3282:31212/TCP 10s app=test-nginxtest-nginx-new ClusterIP 172.20.144.96 &lt;none&gt; 3280/TCP 162m app=test-nginx# 查看endpoint--epk get endpoints&gt; k get epNAME ENDPOINTS AGEnginx 10.25.113.205:80,10.25.142.172:80,10.25.148.165:80 132msvc-loadbalance-nginx 10.25.116.40:80,10.25.121.198:80,10.25.122.75:80 12msvc-test-nginx 10.25.116.40:80,10.25.121.198:80,10.25.122.75:80 18htest-loadbalancer-new 10.25.116.40:80,10.25.121.198:80,10.25.122.75:80 2m11stest-nginx-new 10.25.116.40:80,10.25.121.198:80,10.25.122.75:80 164m Ingress Ingress将来自集群外部的 HTTP 和 HTTPS 路由暴露给集群 内的服务。流量路由由 Ingress 资源上定义的规则控制。 私有k8s不提供Ingress，需要自行安装。 基于aws-eks等云服务通过安装 AWS Load Balancer Controller 附加组件提供Ingress功能。 123k get ingk get ing -Ak get ing -n test HPA：Horizontal Pod Autoscaler 自动弹性伸缩 实现hpa的前提是k8s集群中部署 metrics-server，其可对node和pod占用CPU、内存的情况进行监控。 123456# 基于deployment创建hpak autoscale deployment test-nginx --max=3 --min=1 --cpu-percent=60# 最多3个pod，最少1个pod，基于cpu使用情况，超过60%时进行扩容# 查看hpak get hpa 其它命令 123456789101112131415161718# 进入podk exec podName -it -- shk exec podName -it -- /bin/bash# 监视变化 -wk get deploy -w# 不显示标题头 --no-headers=truek get pods --no-headers=true# 查看pod的日志输出k logs podName# 编辑一个资源，直接编辑已经部署的资源yamlk edit deploy app# 查看一个资源的部署情况k describe deploy app","summary":"摘要 本文介绍kubectl命令的使用方法 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T15:50:05.000Z","tags":["技术","aws","eks","eks"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks12-dashboard/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks12-dashboard/","title":"AWS-EKS-12--部署 Dashboard UI","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为EKS集群部署 Dashboard UI</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"部署-Dashboard-UI\">部署 Dashboard UI</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><a href=\"https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/web-ui-dashboard/\">官方文档</a></p>\n</li>\n<li class=\"lvl-2\">\n<p>部署服务</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建用户</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">Dashboard 支持使用 Bearer 令牌登录。</li>\n<li class=\"lvl-6\"><a href=\"https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md\">创建用户</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dashboard-adminuser.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cluster-admin</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>授权</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">这里创建一个 sa <code>admin-user</code>和 ClusterRoleBinding <code>admin-user</code>，利用 ClusterRoleBinding 赋予 sa 访问集群的 admin 权限</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 向dashboard的服务帐户授予管理员权限</span></span><br><span class=\"line\">$ k apply -f dashboard-adminuser.yaml</span><br><span class=\"line\">serviceaccount/admin-user created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/admin-user created</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>获取登录令牌<br>\n<em><strong>k8s-1.24后就不再为ServiceAccout提供默认的无到期时间的Secret了，而是需要获取有效期为3600秒的token</strong></em></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取登录令牌，这就是一个JWT，可以在 https://jwt.io 中查看解析后的内容</span></span><br><span class=\"line\">$ kubectl -n kubernetes-dashboard create token admin-user</span><br><span class=\"line\">eyJhbGciOiJSUzI1NiIsImtpZCI6IjgzMWNkMmM1YTE0YWYzZmYzZWU1MzQwYWIxZWRmNmRjN2Q3ZmI1NGQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTY4OTMwNjUyMSwiaWF0IjoxNjg5MzAyOTIxLCJpc3MiOiJodHRwczovL29pZGMuZWtzLnVzLXdlc3QtMi5hbCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiNDdiZGE0MmQtYTc3YS00NzUzLTg3NjItOTZmNmFmODA3ODI2In19LCJuYmYiOjE2ODkzMDI5MjEsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.fELZiBXQfh2Mn0h8EHbb6BjDSCvHvB2cUDPenbwgMuKIE2NY-pHJdWA0ydZZYGM1aGg2TN0CHZQSMCEAyD3xqXzJF12dThlgVIAXWUWB_PK5_OQ9FSEHJuY2pSvnS0yhtRirbhJFzovYuxymFZjnZWuAJiPlt9k4DCp7rSIIZu89TRzwAlKh_SEnjCMaV4Fvy_Eq7eAxaXHPtatYLrz7vO12vZSA</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 令牌有效期为3600秒，到期后需要重启获取令牌并重新登录。这点不是很方便。加上 -o yaml 即可看到过期时间</span></span><br><span class=\"line\">$ kubectl -n kubernetes-dashboard create token admin-user -o yaml</span><br><span class=\"line\">apiVersion: authentication.k8s.io/v1</span><br><span class=\"line\">kind: TokenRequest</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  creationTimestamp: <span class=\"string\">&quot;2023-07-07T02:48:41Z&quot;</span></span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  audiences:</span><br><span class=\"line\">  - https://kubernetes.default.svc</span><br><span class=\"line\">  boundObjectRef: null</span><br><span class=\"line\">  expirationSeconds: 3600</span><br><span class=\"line\">status:</span><br><span class=\"line\">  expirationTimestamp: <span class=\"string\">&quot;2023-07-07T03:48:41Z&quot;</span></span><br><span class=\"line\">  token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjgzMWNkMmM1YTE0YWYzZmYzZWU1MzQwYWIxZWRmNmRjN2Q3ZmI1NGQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTY4OTMwNjUyMSwiaWF0IjoxNjg5MzAyOTIxLCJpc3MiOiJodHRwczovL29pZGMuZWtzLnVzLXdlc3QtMi5hbCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiNDdiZGE0MmQtYTc3YS00NzUzLTg3NjItOTZmNmFmODA3ODI2In19LCJuYmYiOjE2ODkzMDI5MjEsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.fELZiBXQfh2Mn0h8EHbb6BjDSCvHvB2cUDPenbwgMuKIE2NY-pHJdWA0ydZZYGM1aGg2TN0CHZQSMCEAyD3xqXzJF12dThlgVIAXWUWB_PK5_OQ9FSEHJuY2pSvnS0yhtRirbhJFzovYuxymFZjnZWuAJiPlt9k4DCp7rSIIZu89TRzwAlKh_SEnjCMaV4Fvy_Eq7eAxaXHPtatYLrz7vO12vZSA</span><br></pre></td></tr></table></figure>\n<h2 id=\"访问Dashboard\">访问Dashboard</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>查看Dashboard 的 service，可以看到 Dashboard 的 Service 的类型都是 ClusterIP，所以我们是无法从外部访问到 Dashboard 的。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get svc -n kubernetes-dashboard</span><br><span class=\"line\">NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">dashboard-metrics-scraper   ClusterIP   10.100.76.198   &lt;none&gt;        8000/TCP   12m</span><br><span class=\"line\">kubernetes-dashboard        ClusterIP   10.100.171.79   &lt;none&gt;        443/TCP    12m</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>这时我们有两种方法访问 Dashboard</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-4\">把 Dashboard 映射到本地</li>\n<li class=\"lvl-4\">利用 ingress 和 ALB 把外部请求转发到 Dashboard</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"把-Dashboard-映射到本地\">把 Dashboard 映射到本地</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>我们可以用 kubectl proxy，也可以用 port-forward</p>\n</li>\n</ul>\n<h4 id=\"利用-kubectl-proxy\">利用 kubectl proxy</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>开启代理</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认8001端口</span></span><br><span class=\"line\">~ kubectl proxy</span><br><span class=\"line\">Starting to serve on 127.0.0.1:8001</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定端口</span></span><br><span class=\"line\">~ kubectl proxy --port 8888</span><br><span class=\"line\">Starting to serve on 127.0.0.1:8888</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭代理</span></span><br><span class=\"line\">Ctrl+C</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本地访问</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">可以通过 <a href=\"http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\">http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</a> 访问。</li>\n<li class=\"lvl-6\">登录时选择token登录，输入上面获取到的令牌即可，令牌有效期为3600秒，到期后需要重启获取令牌并重新登录。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/IDKZ0Z.jpg\" alt=\"\" width=\"1200\" height=\"700\"></p>\n<h4 id=\"利用-kubectl-port-forward\">利用 kubectl port-forward</h4>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>上面利用 kubectl proxy的方法是把整个 apiserver 通过 proxy 映射到本地，下面我们只把 dashboard 的 deployment(Pod)映射到本地。</p>\n</li>\n<li class=\"lvl-2\">\n<p>首先，我们先要获得 Pod 的访问端口</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get ep -n kubernetes-dashboard</span><br><span class=\"line\">NAME                        ENDPOINTS             AGE</span><br><span class=\"line\">dashboard-metrics-scraper   192.168.10.200:8000   5d4h</span><br><span class=\"line\">kubernetes-dashboard        192.168.20.125:8443   5d4h</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>说明：kubernetes-dashboard 对应的 ENDPOINTS 就是pod的ip和端口，这里开启的就是pod的8443端口。</p>\n</li>\n</ul>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>运行以下命令获得 Dashboard deployment 的 name</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get deployment -n kubernetes-dashboard</span><br><span class=\"line\">NAME                        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">dashboard-metrics-scraper   1/1     1            1           5d4h</span><br><span class=\"line\">kubernetes-dashboard        1/1     1            1           5d4h</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>说明：kubernetes-dashboard 是 Deployment 的名称</p>\n</li>\n</ul>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>开启本地端口映射，这里映射到本地的8888端口</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl port-forward deployment/kubernetes-dashboard -n kubernetes-dashboard 8888:8443</span><br><span class=\"line\">Forwarding from 127.0.0.1:8888 -&gt; 8443</span><br><span class=\"line\">Forwarding from [::1]:8888 -&gt; 8443</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>可以通过 <a href=\"https://localhost:8888/#/login\">https://localhost:8888/#/login</a> 访问。</p>\n</li>\n<li class=\"lvl-4\">\n<p>登录时选择token登录，输入上面获取到的令牌即可，令牌有效期为3600秒，到期后需要重启获取令牌并重新登录。</p>\n</li>\n</ul>\n<h3 id=\"利用-ingress-和-ALB-把外部请求转发到-Dashboard\">利用 ingress 和 ALB 把外部请求转发到 Dashboard</h3>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>proxy，port-forward 可以把 apiserver 或者某个 deployment 映射到本地，这对调试一些应用来说很有用处。</p>\n</li>\n<li class=\"lvl-2\">\n<p>不过，这两个都是前台命令，每次查看 Dashboard 都要先运行一下，使用起来确实不方便，下面介绍如何利用 ALB 访问 Dashboard。</p>\n</li>\n<li class=\"lvl-2\">\n<p>前面我们已经介绍过<a href=\"/2023/07/07/aws-eks09-service-ingress/\" title=\"AWS-EKS-09--创建基于LoadBalancer的service和ingress\">创建基于LoadBalancer的service和ingress</a>，接下来我们就在此基础上完成后续的步骤。</p>\n</li>\n</ul>\n<h4 id=\"创建ingress\">创建ingress</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dashboard-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">dashboard</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/actions.ssl-redirect:</span> <span class=\"string\">&#x27;&#123;&quot;Type&quot;: &quot;redirect&quot;, &quot;RedirectConfig&quot;:&#123; &quot;Protocol&quot;: &quot;HTTPS&quot;, &quot;Port&quot;: &quot;443&quot;, &quot;StatusCode&quot;: &quot;HTTP_301&quot;&#125;&#125;&#x27;</span>  <span class=\"comment\"># http重定向到https</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/certificate-arn:</span> <span class=\"string\">arn:aws:acm:us-west-2:743263909655:certificate/e2e3fa54-98ab-427a-9f09-4861122831323e</span> <span class=\"comment\"># https证书，就是上面创建的证书的arn</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/listen-ports:</span> <span class=\"string\">&#x27;[&#123;&quot;HTTP&quot;: 80&#125;, &#123;&quot;HTTPS&quot;:443&#125;]&#x27;</span> <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/scheme:</span> <span class=\"string\">internet-facing</span> <span class=\"comment\"># 开放外网访问</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/target-type:</span> <span class=\"string\">ip</span></span><br><span class=\"line\">    <span class=\"attr\">alb.ingress.kubernetes.io/backend-protocol:</span> <span class=\"string\">HTTPS</span> <span class=\"comment\"># 转发请求用的协议，默认是HTTP</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ingressClassName:</span> <span class=\"string\">alb</span> <span class=\"comment\"># 指定ingressclass类型，k8s-1.18及以后的版本推荐这种配置方式，旧版本需要在注释中加入 kubernetes.io/ingress.class: alb</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">dashboard.hanqunfeng.com</span> <span class=\"comment\"># 域名绑定，需要到域名服务商处进行域名解析，CNAME到当前生成的elb</span></span><br><span class=\"line\">      <span class=\"attr\">http:</span></span><br><span class=\"line\">        <span class=\"attr\">paths:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span> <span class=\"comment\"># 重定向配置，这里必须配置，否则不能实现重定向</span></span><br><span class=\"line\">          <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">          <span class=\"attr\">backend:</span></span><br><span class=\"line\">            <span class=\"attr\">service:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">ssl-redirect</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">use-annotation</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">          <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">          <span class=\"attr\">backend:</span></span><br><span class=\"line\">            <span class=\"attr\">service:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kubernetes-dashboard</span></span><br><span class=\"line\">              <span class=\"attr\">port:</span></span><br><span class=\"line\">                <span class=\"attr\">number:</span> <span class=\"number\">443</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>这里要注意一点，一定要配置<code>alb.ingress.kubernetes.io/backend-protocol: HTTPS</code>，这是转发请求用的协议，默认是HTTP，但是Dashboard应用本身要求访问请求使用HTTPS，所以这里指定HTTPS。如果不指定，则在后面用浏览器访问Dashboard时会报下列错误</p>\n</li>\n</ul>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client sent an HTTP request to an HTTPS server.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署ingress</span></span><br><span class=\"line\">$ k apply -f dashboard-ingress.yaml</span><br><span class=\"line\">ingress.networking.k8s.io/dashboard created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看ingress状态</span></span><br><span class=\"line\">$ k describe ing -n kubernetes-dashboard dashboard</span><br><span class=\"line\">Name:             dashboard</span><br><span class=\"line\">Labels:           &lt;none&gt;</span><br><span class=\"line\">Namespace:        kubernetes-dashboard</span><br><span class=\"line\">Address:          k8s-kubernet-dashboar-043481379b-1952890389.us-west-2.elb.amazonaws.com</span><br><span class=\"line\">Ingress Class:    alb</span><br><span class=\"line\">Default backend:  &lt;default&gt;</span><br><span class=\"line\">Rules:</span><br><span class=\"line\">  Host                      Path  Backends</span><br><span class=\"line\">  ----                      ----  --------</span><br><span class=\"line\">  dashboard.hanqunfeng.com</span><br><span class=\"line\">                            /   ssl-redirect:use-annotation (&lt;error: endpoints <span class=\"string\">&quot;ssl-redirect&quot;</span> not found&gt;)</span><br><span class=\"line\">                            /   kubernetes-dashboard:443 (192.168.20.125:8443)</span><br><span class=\"line\">Annotations:                alb.ingress.kubernetes.io/actions.ssl-redirect:</span><br><span class=\"line\">                              &#123;<span class=\"string\">&quot;Type&quot;</span>: <span class=\"string\">&quot;redirect&quot;</span>, <span class=\"string\">&quot;RedirectConfig&quot;</span>:&#123; <span class=\"string\">&quot;Protocol&quot;</span>: <span class=\"string\">&quot;HTTPS&quot;</span>, <span class=\"string\">&quot;Port&quot;</span>: <span class=\"string\">&quot;443&quot;</span>, <span class=\"string\">&quot;StatusCode&quot;</span>: <span class=\"string\">&quot;HTTP_301&quot;</span>&#125;&#125;</span><br><span class=\"line\">                            alb.ingress.kubernetes.io/backend-protocol: HTTPS</span><br><span class=\"line\">                            alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:743263909655:certificate/e2e3fa54-98ab-427a-9f09-4861122831323e</span><br><span class=\"line\">                            alb.ingress.kubernetes.io/listen-ports: [&#123;<span class=\"string\">&quot;HTTP&quot;</span>: 80&#125;, &#123;<span class=\"string\">&quot;HTTPS&quot;</span>:443&#125;]</span><br><span class=\"line\">                            alb.ingress.kubernetes.io/scheme: internet-facing</span><br><span class=\"line\">                            alb.ingress.kubernetes.io/target-type: ip</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason                  Age    From     Message</span><br><span class=\"line\">  ----    ------                  ----   ----     -------</span><br><span class=\"line\">  Normal  SuccessfullyReconciled  9m16s  ingress  Successfully reconciled</span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>完成域名解析后可以访问：<a href=\"https://dashboard.hanqunfeng.com\">https://dashboard.hanqunfeng.com</a></p>\n</li>\n</ul>\n<h2 id=\"清理帐号\">清理帐号</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除管理员ServiceAccount和ClusterRoleBinding</span></span><br><span class=\"line\">$ kubectl -n kubernetes-dashboard delete serviceaccount admin-user</span><br><span class=\"line\">$ kubectl -n kubernetes-dashboard delete clusterrolebinding admin-user</span><br></pre></td></tr></table></figure>\n<h2 id=\"后记\">后记</h2>\n<p>这玩意就是查看资源方便一些，创建资源还是需要精通yaml。</p>\n","content_text":"摘要 本文介绍为EKS集群部署 Dashboard UI 参考资料： Amazon EKS用户指南 Kubernetes 文档 部署 Dashboard UI 官方文档 部署服务 1$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml 创建用户 Dashboard 支持使用 Bearer 令牌登录。 创建用户 12345678910111213141516171819# dashboard-adminuser.yamlapiVersion: v1kind: ServiceAccountmetadata: name: admin-user namespace: kubernetes-dashboard---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: admin-userroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: admin-user namespace: kubernetes-dashboard 授权 这里创建一个 sa admin-user和 ClusterRoleBinding admin-user，利用 ClusterRoleBinding 赋予 sa 访问集群的 admin 权限 1234# 向dashboard的服务帐户授予管理员权限$ k apply -f dashboard-adminuser.yamlserviceaccount/admin-user createdclusterrolebinding.rbac.authorization.k8s.io/admin-user created 获取登录令牌 k8s-1.24后就不再为ServiceAccout提供默认的无到期时间的Secret了，而是需要获取有效期为3600秒的token 1234567891011121314151617181920# 获取登录令牌，这就是一个JWT，可以在 https://jwt.io 中查看解析后的内容$ kubectl -n kubernetes-dashboard create token admin-usereyJhbGciOiJSUzI1NiIsImtpZCI6IjgzMWNkMmM1YTE0YWYzZmYzZWU1MzQwYWIxZWRmNmRjN2Q3ZmI1NGQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTY4OTMwNjUyMSwiaWF0IjoxNjg5MzAyOTIxLCJpc3MiOiJodHRwczovL29pZGMuZWtzLnVzLXdlc3QtMi5hbCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiNDdiZGE0MmQtYTc3YS00NzUzLTg3NjItOTZmNmFmODA3ODI2In19LCJuYmYiOjE2ODkzMDI5MjEsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.fELZiBXQfh2Mn0h8EHbb6BjDSCvHvB2cUDPenbwgMuKIE2NY-pHJdWA0ydZZYGM1aGg2TN0CHZQSMCEAyD3xqXzJF12dThlgVIAXWUWB_PK5_OQ9FSEHJuY2pSvnS0yhtRirbhJFzovYuxymFZjnZWuAJiPlt9k4DCp7rSIIZu89TRzwAlKh_SEnjCMaV4Fvy_Eq7eAxaXHPtatYLrz7vO12vZSA# 令牌有效期为3600秒，到期后需要重启获取令牌并重新登录。这点不是很方便。加上 -o yaml 即可看到过期时间$ kubectl -n kubernetes-dashboard create token admin-user -o yamlapiVersion: authentication.k8s.io/v1kind: TokenRequestmetadata: creationTimestamp: &quot;2023-07-07T02:48:41Z&quot; name: admin-user namespace: kubernetes-dashboardspec: audiences: - https://kubernetes.default.svc boundObjectRef: null expirationSeconds: 3600status: expirationTimestamp: &quot;2023-07-07T03:48:41Z&quot; token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjgzMWNkMmM1YTE0YWYzZmYzZWU1MzQwYWIxZWRmNmRjN2Q3ZmI1NGQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTY4OTMwNjUyMSwiaWF0IjoxNjg5MzAyOTIxLCJpc3MiOiJodHRwczovL29pZGMuZWtzLnVzLXdlc3QtMi5hbCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiNDdiZGE0MmQtYTc3YS00NzUzLTg3NjItOTZmNmFmODA3ODI2In19LCJuYmYiOjE2ODkzMDI5MjEsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.fELZiBXQfh2Mn0h8EHbb6BjDSCvHvB2cUDPenbwgMuKIE2NY-pHJdWA0ydZZYGM1aGg2TN0CHZQSMCEAyD3xqXzJF12dThlgVIAXWUWB_PK5_OQ9FSEHJuY2pSvnS0yhtRirbhJFzovYuxymFZjnZWuAJiPlt9k4DCp7rSIIZu89TRzwAlKh_SEnjCMaV4Fvy_Eq7eAxaXHPtatYLrz7vO12vZSA 访问Dashboard 查看Dashboard 的 service，可以看到 Dashboard 的 Service 的类型都是 ClusterIP，所以我们是无法从外部访问到 Dashboard 的。 1234$ kubectl get svc -n kubernetes-dashboardNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEdashboard-metrics-scraper ClusterIP 10.100.76.198 &lt;none&gt; 8000/TCP 12mkubernetes-dashboard ClusterIP 10.100.171.79 &lt;none&gt; 443/TCP 12m 这时我们有两种方法访问 Dashboard 把 Dashboard 映射到本地 利用 ingress 和 ALB 把外部请求转发到 Dashboard 把 Dashboard 映射到本地 我们可以用 kubectl proxy，也可以用 port-forward 利用 kubectl proxy 开启代理 12345678910# 默认8001端口~ kubectl proxyStarting to serve on 127.0.0.1:8001# 指定端口~ kubectl proxy --port 8888Starting to serve on 127.0.0.1:8888# 关闭代理Ctrl+C 本地访问 可以通过 http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/ 访问。 登录时选择token登录，输入上面获取到的令牌即可，令牌有效期为3600秒，到期后需要重启获取令牌并重新登录。 利用 kubectl port-forward 上面利用 kubectl proxy的方法是把整个 apiserver 通过 proxy 映射到本地，下面我们只把 dashboard 的 deployment(Pod)映射到本地。 首先，我们先要获得 Pod 的访问端口 1234$ kubectl get ep -n kubernetes-dashboardNAME ENDPOINTS AGEdashboard-metrics-scraper 192.168.10.200:8000 5d4hkubernetes-dashboard 192.168.20.125:8443 5d4h 说明：kubernetes-dashboard 对应的 ENDPOINTS 就是pod的ip和端口，这里开启的就是pod的8443端口。 运行以下命令获得 Dashboard deployment 的 name 1234$ kubectl get deployment -n kubernetes-dashboardNAME READY UP-TO-DATE AVAILABLE AGEdashboard-metrics-scraper 1/1 1 1 5d4hkubernetes-dashboard 1/1 1 1 5d4h 说明：kubernetes-dashboard 是 Deployment 的名称 开启本地端口映射，这里映射到本地的8888端口 123$ kubectl port-forward deployment/kubernetes-dashboard -n kubernetes-dashboard 8888:8443Forwarding from 127.0.0.1:8888 -&gt; 8443Forwarding from [::1]:8888 -&gt; 8443 可以通过 https://localhost:8888/#/login 访问。 登录时选择token登录，输入上面获取到的令牌即可，令牌有效期为3600秒，到期后需要重启获取令牌并重新登录。 利用 ingress 和 ALB 把外部请求转发到 Dashboard proxy，port-forward 可以把 apiserver 或者某个 deployment 映射到本地，这对调试一些应用来说很有用处。 不过，这两个都是前台命令，每次查看 Dashboard 都要先运行一下，使用起来确实不方便，下面介绍如何利用 ALB 访问 Dashboard。 前面我们已经介绍过创建基于LoadBalancer的service和ingress，接下来我们就在此基础上完成后续的步骤。 创建ingress 12345678910111213141516171819202122232425262728293031323334# dashboard-ingress.yamlapiVersion: networking.k8s.io/v1kind: Ingressmetadata: namespace: kubernetes-dashboard name: dashboard annotations: alb.ingress.kubernetes.io/actions.ssl-redirect: &#x27;&#123;&quot;Type&quot;: &quot;redirect&quot;, &quot;RedirectConfig&quot;:&#123; &quot;Protocol&quot;: &quot;HTTPS&quot;, &quot;Port&quot;: &quot;443&quot;, &quot;StatusCode&quot;: &quot;HTTP_301&quot;&#125;&#125;&#x27; # http重定向到https alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:743263909655:certificate/e2e3fa54-98ab-427a-9f09-4861122831323e # https证书，就是上面创建的证书的arn alb.ingress.kubernetes.io/listen-ports: &#x27;[&#123;&quot;HTTP&quot;: 80&#125;, &#123;&quot;HTTPS&quot;:443&#125;]&#x27; # 监听端口 alb.ingress.kubernetes.io/scheme: internet-facing # 开放外网访问 alb.ingress.kubernetes.io/target-type: ip alb.ingress.kubernetes.io/backend-protocol: HTTPS # 转发请求用的协议，默认是HTTPspec: ingressClassName: alb # 指定ingressclass类型，k8s-1.18及以后的版本推荐这种配置方式，旧版本需要在注释中加入 kubernetes.io/ingress.class: alb rules: - host: dashboard.hanqunfeng.com # 域名绑定，需要到域名服务商处进行域名解析，CNAME到当前生成的elb http: paths: - path: / # 重定向配置，这里必须配置，否则不能实现重定向 pathType: Prefix backend: service: name: ssl-redirect port: name: use-annotation - path: / pathType: Prefix backend: service: name: kubernetes-dashboard port: number: 443 这里要注意一点，一定要配置alb.ingress.kubernetes.io/backend-protocol: HTTPS，这是转发请求用的协议，默认是HTTP，但是Dashboard应用本身要求访问请求使用HTTPS，所以这里指定HTTPS。如果不指定，则在后面用浏览器访问Dashboard时会报下列错误 1Client sent an HTTP request to an HTTPS server. 1234567891011121314151617181920212223242526272829# 部署ingress$ k apply -f dashboard-ingress.yamlingress.networking.k8s.io/dashboard created# 查看ingress状态$ k describe ing -n kubernetes-dashboard dashboardName: dashboardLabels: &lt;none&gt;Namespace: kubernetes-dashboardAddress: k8s-kubernet-dashboar-043481379b-1952890389.us-west-2.elb.amazonaws.comIngress Class: albDefault backend: &lt;default&gt;Rules: Host Path Backends ---- ---- -------- dashboard.hanqunfeng.com / ssl-redirect:use-annotation (&lt;error: endpoints &quot;ssl-redirect&quot; not found&gt;) / kubernetes-dashboard:443 (192.168.20.125:8443)Annotations: alb.ingress.kubernetes.io/actions.ssl-redirect: &#123;&quot;Type&quot;: &quot;redirect&quot;, &quot;RedirectConfig&quot;:&#123; &quot;Protocol&quot;: &quot;HTTPS&quot;, &quot;Port&quot;: &quot;443&quot;, &quot;StatusCode&quot;: &quot;HTTP_301&quot;&#125;&#125; alb.ingress.kubernetes.io/backend-protocol: HTTPS alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:743263909655:certificate/e2e3fa54-98ab-427a-9f09-4861122831323e alb.ingress.kubernetes.io/listen-ports: [&#123;&quot;HTTP&quot;: 80&#125;, &#123;&quot;HTTPS&quot;:443&#125;] alb.ingress.kubernetes.io/scheme: internet-facing alb.ingress.kubernetes.io/target-type: ipEvents: Type Reason Age From Message ---- ------ ---- ---- ------- Normal SuccessfullyReconciled 9m16s ingress Successfully reconciled 完成域名解析后可以访问：https://dashboard.hanqunfeng.com 清理帐号 123# 删除管理员ServiceAccount和ClusterRoleBinding$ kubectl -n kubernetes-dashboard delete serviceaccount admin-user$ kubectl -n kubernetes-dashboard delete clusterrolebinding admin-user 后记 这玩意就是查看资源方便一些，创建资源还是需要精通yaml。","summary":"摘要 本文介绍为EKS集群部署 Dashboard UI 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T15:30:05.000Z","tags":["技术","aws","eks","eks"]},{"id":"https://blog.hanqunfeng.com/2023/07/07/aws-eks11-metrics/","url":"https://blog.hanqunfeng.com/2023/07/07/aws-eks11-metrics/","title":"AWS-EKS-11--安装 Kubernetes Metrics Server","content_html":"<!--\n **加粗**\n *斜体*\n ***加粗并斜体***\n ~~删除线~~\n ==突出显示==\n `突出显示(推荐)`\n ++下划线++\n ~下标~\n ^上标^\n 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.\n 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)\n\n +++ **点击折叠**\n 这是被隐藏的内容\n +++\n\n::: tips success warning danger\n这里是容器内的内容\n:::\n\n% note info % success warning danger\n这里是容器内的内容\n% endnote %\n\n -->\n<h2 id=\"摘要\">摘要</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>本文介绍为EKS集群安装 Kubernetes Metrics Server</p>\n</li>\n<li class=\"lvl-2\">\n<p>参考资料：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\"><a href=\"https://docs.aws.amazon.com/zh_cn/eks/latest/userguide\">Amazon EKS用户指南</a></li>\n<li class=\"lvl-6\"><a href=\"https://kubernetes.io/zh-cn/docs/home/\">Kubernetes 文档</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"安装-Kubernetes-Metrics-Server\">安装 Kubernetes Metrics Server</h2>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Metrics Server是Kubernetes内置自动缩放管道的可扩展、高效的容器资源指标来源。</p>\n</li>\n<li class=\"lvl-2\">\n<p>Metrics Server从Kubelets收集资源指标，并通过Metrics API在Kubernetes apiserver中公开它们，供Horizontal Pod Autoscaler和Vertical Pod Autoscaler使用。</p>\n</li>\n<li class=\"lvl-2\">\n<p>指标API也可以通过kubectl top访问，从而更容易调试自动缩放管道。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用以下命令部署 Metrics Server</span></span><br><span class=\"line\">~ kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br><span class=\"line\"><span class=\"comment\"># 使用以下命令验证 metrics-server 部署是否运行所需数量的 Pods</span></span><br><span class=\"line\">~ kubectl get deployment metrics-server -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看metrics-server的资源</span></span><br><span class=\"line\">~ k get all -n kube-system -l k8s-app=metrics-server</span><br><span class=\"line\">NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/metrics-server-55c774cdbb-6qpz8   1/1     Running   0          14h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class=\"line\">service/metrics-server   ClusterIP   10.100.231.92   &lt;none&gt;        443/TCP   43h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                             READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/metrics-server   1/1     1            1           43h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                        DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/metrics-server-55c774cdbb   1         1         1       43h</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自能查看node和pod的指标</span></span><br><span class=\"line\">~ k top node</span><br><span class=\"line\">NAME                                           CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class=\"line\">ip-192-168-16-155.us-west-2.compute.internal   29m          1%     544Mi           7%</span><br><span class=\"line\">ip-192-168-48-14.us-west-2.compute.internal    32m          1%     569Mi           8%</span><br><span class=\"line\"></span><br><span class=\"line\">~ k top pod</span><br><span class=\"line\">NAMESPACE     NAME                                  CPU(cores)   MEMORY(bytes)</span><br><span class=\"line\">kube-system   aws-node-fzh9v                        3m           36Mi</span><br><span class=\"line\">kube-system   aws-node-t62f8                        3m           36Mi</span><br></pre></td></tr></table></figure>","content_text":"摘要 本文介绍为EKS集群安装 Kubernetes Metrics Server 参考资料： Amazon EKS用户指南 Kubernetes 文档 安装 Kubernetes Metrics Server Metrics Server是Kubernetes内置自动缩放管道的可扩展、高效的容器资源指标来源。 Metrics Server从Kubelets收集资源指标，并通过Metrics API在Kubernetes apiserver中公开它们，供Horizontal Pod Autoscaler和Vertical Pod Autoscaler使用。 指标API也可以通过kubectl top访问，从而更容易调试自动缩放管道。 1234567891011121314151617181920212223242526272829# 使用以下命令部署 Metrics Server~ kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml# 使用以下命令验证 metrics-server 部署是否运行所需数量的 Pods~ kubectl get deployment metrics-server -n kube-system# 查看metrics-server的资源~ k get all -n kube-system -l k8s-app=metrics-serverNAME READY STATUS RESTARTS AGEpod/metrics-server-55c774cdbb-6qpz8 1/1 Running 0 14hNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEservice/metrics-server ClusterIP 10.100.231.92 &lt;none&gt; 443/TCP 43hNAME READY UP-TO-DATE AVAILABLE AGEdeployment.apps/metrics-server 1/1 1 1 43hNAME DESIRED CURRENT READY AGEreplicaset.apps/metrics-server-55c774cdbb 1 1 1 43h# 自能查看node和pod的指标~ k top nodeNAME CPU(cores) CPU% MEMORY(bytes) MEMORY%ip-192-168-16-155.us-west-2.compute.internal 29m 1% 544Mi 7%ip-192-168-48-14.us-west-2.compute.internal 32m 1% 569Mi 8%~ k top podNAMESPACE NAME CPU(cores) MEMORY(bytes)kube-system aws-node-fzh9v 3m 36Mikube-system aws-node-t62f8 3m 36Mi","summary":"摘要 本文介绍为EKS集群安装 Kubernetes Metrics Server 参考资料： Amazon EKS用户指南 Kubernetes 文档","date_published":"2023-07-07T15:20:05.000Z","tags":["技术","aws","eks","eks"]}]}