<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飘逸峰的博客</title>
  
  <subtitle>Spring--Java程序员的春天</subtitle>
  <link href="https://blog.hanqunfeng.com/atom.xml" rel="self"/>
  
  <link href="https://blog.hanqunfeng.com/"/>
  <updated>2023-06-01T01:51:35.182Z</updated>
  <id>https://blog.hanqunfeng.com/</id>
  
  <author>
    <name>飘逸峰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java并发编程--线程池之ForkJoinPool</title>
    <link href="https://blog.hanqunfeng.com/2023/05/29/java-concurrency12-ForkJoinPool/"/>
    <id>https://blog.hanqunfeng.com/2023/05/29/java-concurrency12-ForkJoinPool/</id>
    <published>2023-05-29T14:34:05.000Z</published>
    <updated>2023-06-01T01:51:35.182Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍线程池ForkJoinPool相关技术</p></li><li class="lvl-2"><p>本文基于<code>jdk1.8</code></p></li></ul><span id="more"></span><h2 id="Fork-Join框架介绍">Fork/Join框架介绍</h2><ul class="lvl-0"><li class="lvl-2"><p><code>Fork/Join</code>是一个是一个并行计算的框架，主要就是用来支持分治任务模型的，这个计算框架里的 <code>Fork</code>对应的是分治任务模型里的任务分解，<code>Join</code> 对应的是结果合并。</p></li><li class="lvl-2"><p>它的核心思想是将一个大任务分成许多小任务，然后并行执行这些小任务，最终将它们的结果合并成一个大的结果。</p></li><li class="lvl-2"><p><code>Fork/Join</code>模式是实现任务并行性的一种常用模式，它将大任务递归地分解成小任务，然后利用多线程并行执行这些小任务。</p></li><li class="lvl-2"><p><code>Fork/Join</code>框架的主要组成部分是<code>ForkJoinPool</code>、<code>ForkJoinTask</code>。<code>ForkJoinPool</code>是一个线程池，它用于管理<code>Fork/Join</code>任务的执行。<code>ForkJoinTask</code>是一个抽象类，用于表示可以被分割成更小部分的任务。</p></li><li class="lvl-2"><p><code>Fork/Join</code>框架更适合执行CPU密集型任务，同时需要避免在<code>ForkJoinPool</code>中提交大量的阻塞型任务，以免影响整个线程池的性能。</p></li></ul><h3 id="应用场景">应用场景</h3><ul class="lvl-0"><li class="lvl-2"><p>1.递归分解型任务<br><code>Fork/Join</code>框架特别适用于递归分解型的任务，例如排序、归并、遍历等。这些任务通常可以将大的任务分解成若干个子任务，每个子任务可以独立执行，并且可以通过归并操作将子任务的结果合并成一个有序的结果。</p></li><li class="lvl-2"><p>2.数组处理<br><code>Fork/Join</code>框架还可以用于数组的处理，例如数组的排序、查找、统计等。在处理大型数组时，<code>Fork/Join</code>框架可以将数组分成若干个子数组，并行地处理每个子数组，最后将处理后的子数组合并成一个有序的大数组。</p></li><li class="lvl-2"><p>3.并行化算法<br><code>Fork/Join</code>框架还可以用于并行化算法的实现，例如并行化的图像处理算法、并行化的机器学习算法等。在这些算法中，可以将问题分解成若干个子问题，并行地解决每个子问题，然后将子问题的结果合并起来得到最终的解决方案。</p></li><li class="lvl-2"><p>4.大数据处理<br><code>Fork/Join</code>框架还可以用于大数据处理，例如大型日志文件的处理、大型数据库的查询等。在处理大数据时，可以将数据分成若干个分片，并行地处理每个分片，最后将处理后的分片合并成一个完整的结果</p></li></ul><h2 id="ForkJoinPool介绍">ForkJoinPool介绍</h2><ul class="lvl-0"><li class="lvl-2"><p><code>ForkJoinPool</code>是<code>Fork/Join</code>框架中的线程池类，它用于管理<code>Fork/Join</code>任务的线程，基于工作窃取算法（work-stealing）来实现任务的分配和执行。</p></li><li class="lvl-2"><p><code>ForkJoinPool</code>类包括一些重要的方法，例如<code>submit()</code>、<code>invoke()</code>、<code>shutdown()</code>、<code>awaitTermination()</code>等，用于提交任务、执行任务、关闭线程池和等待任务的执行结果。<code>ForkJoinPool</code>类中还包括一些参数，例如线程池的大小、工作线程的优先级、任务队列的容量等，可以根据具体的应用场景进行设置。</p></li><li class="lvl-2"><p>常用API</p></li></ul><table><thead><tr><th>API/方法</th><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td><code>ForkJoinPool(int parallelism)</code></td><td>无</td><td>使用指定的并行度创建一个新的ForkJoinPool。</td></tr><tr><td><code>invoke(ForkJoinTask&lt;T&gt; task)</code></td><td>T</td><td>同步执行给定的任务，并返回结果。</td></tr><tr><td><code>submit(ForkJoinTask&lt;T&gt; task)</code></td><td><code>Future&lt;T&gt;</code></td><td>异步执行给定的任务，并返回一个<code>Future</code>对象，可以用于获取任务的执行结果。</td></tr><tr><td><code>execute(ForkJoinTask&lt;?&gt; task)</code></td><td>无</td><td>异步执行给定的任务，没有返回值。</td></tr><tr><td><code>awaitTermination(long timeout, TimeUnit unit)</code></td><td><code>boolean</code></td><td>阻塞当前线程，直到所有任务执行完成或超过指定的超时时间，并返回是否成功终止。</td></tr><tr><td><code>isShutdown()</code></td><td><code>boolean</code></td><td>判断ForkJoinPool是否已经关闭。</td></tr><tr><td><code>isTerminated()</code></td><td><code>boolean</code></td><td>判断ForkJoinPool中的所有任务是否已经执行完成。</td></tr><tr><td><code>shutdown()</code></td><td>无</td><td>优雅地关闭ForkJoinPool，不再接受新的任务，并等待已提交的任务执行完成。</td></tr><tr><td><code>shutdownNow()</code></td><td><code>List&lt;Runnable&gt;</code></td><td>强制关闭ForkJoinPool，尝试取消所有正在执行的任务，并返回等待执行的任务列表。</td></tr><tr><td><code>getParallelism()</code></td><td><code>int</code></td><td>获取ForkJoinPool的并行度，即同时执行任务的线程数。</td></tr><tr><td><code>getPoolSize()</code></td><td><code>int</code></td><td>获取ForkJoinPool中当前的工作线程数。</td></tr><tr><td><code>getActiveThreadCount()</code></td><td><code>int</code></td><td>获取ForkJoinPool中当前活动的线程数。</td></tr><tr><td><code>getQueuedTaskCount()</code></td><td><code>long</code></td><td>获取ForkJoinPool中当前等待执行的任务数。</td></tr><tr><td><code>getRunningThreadCount()</code></td><td><code>int</code></td><td>获取ForkJoinPool中当前正在执行任务的线程数。</td></tr><tr><td><code>getStealCount()</code></td><td><code>long</code></td><td>获取ForkJoinPool中总共发生的工作窃取次数。</td></tr></tbody></table><h2 id="ForkJoinPool的创建">ForkJoinPool的创建</h2><ul class="lvl-0"><li class="lvl-2"><p>ForkJoinPool中有四个核心参数，用于控制线程池的并行数、工作线程的创建、异常处理和模式指定等。各参数解释如下：</p><ul class="lvl-2"><li class="lvl-6"><code>int parallelism</code>：指定并行级别（parallelism level）。<br>ForkJoinPool将根据这个设定，决定工作线程的数量。如果未设置的话，将使用<code>Runtime.getRuntime().availableProcessors()</code>来设置并行级别；  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ForkJoinPool</span><span class="params">(<span class="type">int</span> parallelism)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(parallelism, defaultForkJoinWorkerThreadFactory, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-6"><code>ForkJoinWorkerThreadFactory factory</code>：ForkJoinPool在创建线程时，会通过factory来创建。<br>注意，这里需要实现的是<code>ForkJoinWorkerThreadFactory</code>，而不是<code>ThreadFactory</code>。如果你不指定<code>factory</code>，那么将由默认的<code>DefaultForkJoinWorkerThreadFactory</code>负责线程的创建工作；</li><li class="lvl-6"><code>UncaughtExceptionHandler handler</code>：指定异常处理器<br>当任务在运行中出错时，将由设定的处理器处理；</li><li class="lvl-6"><code>boolean asyncMode</code>：设置队列的工作模式。<br>当<code>asyncMode</code>为<code>true</code>时，将使用先进先出队列，而为<code>false</code>时则使用后进先出的模式。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ForkJoinPool</span><span class="params">(<span class="type">int</span> parallelism,</span></span><br><span class="line"><span class="params">                ForkJoinWorkerThreadFactory factory,</span></span><br><span class="line"><span class="params">                UncaughtExceptionHandler handler,</span></span><br><span class="line"><span class="params">                <span class="type">boolean</span> asyncMode)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(checkParallelism(parallelism),</span><br><span class="line">        checkFactory(factory),</span><br><span class="line">        handler,</span><br><span class="line">        asyncMode ? FIFO_QUEUE : LIFO_QUEUE,</span><br><span class="line">        <span class="string">&quot;ForkJoinPool-&quot;</span> + nextPoolId() + <span class="string">&quot;-worker-&quot;</span>);</span><br><span class="line">    checkPermission();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取处理器数量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">processors</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"><span class="comment">//构建forkjoin线程池</span></span><br><span class="line"><span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>(processors);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newWorkStealingPool(processors);</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时等同于无参创建</span></span><br><span class="line"><span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newWorkStealingPool();</span><br></pre></td></tr></table></figure><h2 id="ForkJoinTask介绍">ForkJoinTask介绍</h2><ul class="lvl-0"><li class="lvl-2"><p><code>ForkJoinTask</code>是<code>Fork/Join</code>框架中的抽象类，它定义了执行任务的基本接口。用户可以通过继承<code>ForkJoinTask</code>类来实现自己的任务类，并重写其中的<code>compute()</code>方法来定义任务的执行逻辑。</p></li><li class="lvl-2"><p>通常情况下我们不需要直接继承<code>ForkJoinTask</code>类，而只需要继承它的子类，<code>Fork/Join</code>框架提供了以下三个子类：</p><ul class="lvl-2"><li class="lvl-6"><code>RecursiveAction</code>：用于递归执行但不需要返回结果的任务。</li><li class="lvl-6"><code>RecursiveTask</code> ：用于递归执行需要返回结果的任务。</li><li class="lvl-6"><code>CountedCompleter&lt;T&gt;</code> ：在任务完成执行后会触发执行一个自定义的钩子函数</li></ul></li><li class="lvl-2"><p><code>ForkJoinTask</code> 最核心的是 <code>fork()</code> 方法和 <code>join()</code>方法，承载着主要的任务协调作用，一个用于任务提交，一个用于结果获取。</p><ul class="lvl-2"><li class="lvl-6"><code>fork()</code>–提交任务<br><code>fork()</code>方法用于向当前任务所运行的线程池中提交任务。如果当前线程是<code>ForkJoinWorkerThread</code>类型，将会放入该线程的工作队列，否则放入<code>common</code>线程池的工作队列中。</li><li class="lvl-6"><code>join()</code>–获取任务执行结果<br><code>join()</code>方法用于获取任务的执行结果。调用<code>join()</code>时，将阻塞当前线程直到对应的子任务完成运行并返回结果</li></ul></li></ul><h2 id="ForkJoinPool-与-ForkJoinTask-使用示例">ForkJoinPool 与 ForkJoinTask 使用示例</h2><ul class="lvl-0"><li class="lvl-2"><p>利用<code>fork-join</code>实现数组归并排序算法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用fork-join实现数组归并排序算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSortRecursiveTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;<span class="type">int</span>[]&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> threshold; <span class="comment">//拆分的阈值，低于此阈值就不再进行拆分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arrayToSort; <span class="comment">//要排序的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MergeSortRecursiveTask</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span>[] arrayToSort, <span class="keyword">final</span> <span class="type">int</span> threshold)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arrayToSort = arrayToSort;</span><br><span class="line">        <span class="built_in">this</span>.threshold = threshold;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span>[] compute() &#123;</span><br><span class="line">        <span class="comment">//拆分后的数组长度小于阈值，直接进行排序</span></span><br><span class="line">        <span class="keyword">if</span> (arrayToSort.length &lt;= threshold) &#123;</span><br><span class="line">            <span class="comment">// 调用jdk提供的排序方法</span></span><br><span class="line">            Arrays.sort(arrayToSort);</span><br><span class="line">            <span class="keyword">return</span> arrayToSort;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对数组进行拆分</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">midpoint</span> <span class="operator">=</span> arrayToSort.length / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span>[] leftArray = Arrays.copyOfRange(arrayToSort, <span class="number">0</span>, midpoint);</span><br><span class="line">        <span class="type">int</span>[] rightArray = Arrays.copyOfRange(arrayToSort, midpoint, arrayToSort.length);</span><br><span class="line"></span><br><span class="line">        <span class="type">MergeSortRecursiveTask</span> <span class="variable">leftTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MergeSortRecursiveTask</span>(leftArray, threshold);</span><br><span class="line">        <span class="type">MergeSortRecursiveTask</span> <span class="variable">rightTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MergeSortRecursiveTask</span>(rightArray, threshold);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用任务,阻塞当前线程，直到所有子任务执行完成</span></span><br><span class="line">        <span class="comment">// 使用invokeAll()方法同时提交多个任务，以提高任务的并行度，相当于同时fork并join</span></span><br><span class="line">        invokeAll(leftTask, rightTask);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交任务，多个任务同时提交时，推荐使用invokeAll()</span></span><br><span class="line">        <span class="comment">// leftTask.fork();</span></span><br><span class="line">        <span class="comment">// rightTask.fork();</span></span><br><span class="line">        <span class="comment">//合并结果</span></span><br><span class="line">        <span class="comment">// leftTask.join();</span></span><br><span class="line">        <span class="comment">// rightTask.join();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并排序结果</span></span><br><span class="line">        arrayToSort = merge(leftTask.getSortedArray(), rightTask.getSortedArray());</span><br><span class="line">        <span class="keyword">return</span> arrayToSort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] getSortedArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> arrayToSort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并两个有序数组，并返回合并后的有序数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] merge(<span class="keyword">final</span> <span class="type">int</span>[] leftArray, <span class="keyword">final</span> <span class="type">int</span>[] rightArray) &#123;</span><br><span class="line">        <span class="comment">// 定义用于合并结果的数组</span></span><br><span class="line">        <span class="type">int</span>[] mergedArray = <span class="keyword">new</span> <span class="title class_">int</span>[leftArray.length + rightArray.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">mergedArrayPos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 利用双指针进行两个数的比较</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftArrayPos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightArrayPos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (leftArrayPos &lt; leftArray.length &amp;&amp; rightArrayPos &lt; rightArray.length) &#123;</span><br><span class="line">            <span class="comment">// 比较左右数组中的元素大小，并将较小的元素放入合并结果数组中</span></span><br><span class="line">            <span class="keyword">if</span> (leftArray[leftArrayPos] &lt;= rightArray[rightArrayPos]) &#123;</span><br><span class="line">                mergedArray[mergedArrayPos] = leftArray[leftArrayPos];</span><br><span class="line">                leftArrayPos++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mergedArray[mergedArrayPos] = rightArray[rightArrayPos];</span><br><span class="line">                rightArrayPos++;</span><br><span class="line">            &#125;</span><br><span class="line">            mergedArrayPos++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将剩余的左数组元素放入合并结果数组中</span></span><br><span class="line">        <span class="keyword">while</span> (leftArrayPos &lt; leftArray.length) &#123;</span><br><span class="line">            mergedArray[mergedArrayPos] = leftArray[leftArrayPos];</span><br><span class="line">            leftArrayPos++;</span><br><span class="line">            mergedArrayPos++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将剩余的右数组元素放入合并结果数组中</span></span><br><span class="line">        <span class="keyword">while</span> (rightArrayPos &lt; rightArray.length) &#123;</span><br><span class="line">            mergedArray[mergedArrayPos] = rightArray[rightArrayPos];</span><br><span class="line">            rightArrayPos++;</span><br><span class="line">            mergedArrayPos++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回合并后的有序数组</span></span><br><span class="line">        <span class="keyword">return</span> mergedArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 数组的大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] buildRandomIntArray(<span class="keyword">final</span> <span class="type">int</span> size) &#123;</span><br><span class="line">        <span class="type">int</span>[] arrayToCalculateSumOf = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">        <span class="type">Random</span> <span class="variable">generator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayToCalculateSumOf.length; i++) &#123;</span><br><span class="line">            arrayToCalculateSumOf[i] = generator.nextInt(<span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayToCalculateSumOf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//拆分的阈值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">threshold</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span>[] arrayToSortByMergeSort = buildRandomIntArray(<span class="number">2000</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序前: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> element : arrayToSortByMergeSort) &#123;</span><br><span class="line">            System.out.print(element + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//利用forkjoin排序</span></span><br><span class="line">        <span class="type">MergeSortRecursiveTask</span> <span class="variable">mergeSortRecursiveTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MergeSortRecursiveTask</span>(arrayToSortByMergeSort, threshold);</span><br><span class="line">        <span class="comment">//构建forkjoin线程池</span></span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        <span class="comment">//执行排序任务</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span>[] mergeSortArray = forkJoinPool.invoke(mergeSortRecursiveTask);</span><br><span class="line">        System.out.print(<span class="string">&quot;排序后: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> element : mergeSortArray) &#123;</span><br><span class="line">            System.out.print(element + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">duration</span> <span class="operator">=</span> System.nanoTime() - startTime;</span><br><span class="line">        System.out.println(<span class="string">&quot;forkjoin排序时间: &quot;</span> + (duration / (<span class="number">1000f</span> * <span class="number">1000f</span>)) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ForkJoinPool工作原理">ForkJoinPool工作原理</h2><ul class="lvl-0"><li class="lvl-2"><p><code>ForkJoinPool</code> 内部有多个任务队列，当我们通过 <code>ForkJoinPool</code> 的 <code>invoke()</code> 或者 <code>submit()</code> 方法提交任务时，<code>ForkJoinPool</code> 根据一定的路由规则把任务提交到一个任务队列中，如果任务在执行过程中会创建出子任务，那么子任务会提交到工作线程对应的任务队列中。</p></li><li class="lvl-2"><p>如果工作线程对应的任务队列空了，是不是就没活儿干了呢？不是的，<code>ForkJoinPool</code> 支持一种叫做<code>任务窃取</code>的机制，如果工作线程空闲了，那它可以<code>窃取</code>其他工作任务队列里的任务。如此一来，所有的工作线程都不会闲下来了。</p></li></ul><div class="tips"><p><em><strong>小贴士</strong></em></p><h2 id="工作窃取">工作窃取</h2><ul class="lvl-1"><li class="lvl-2">工作窃取，就是允许空闲线程从繁忙线程的双端队列中窃取任务。</li><li class="lvl-2">默认情况下，工作线程从它自己的双端队列的头部获取任务。但是，当自己的任务为空时，线程会从其他繁忙线程双端队列的尾部中获取任务。这种方法，最大限度地减少了线程竞争任务的可能性。</li></ul></div><ul class="lvl-0"><li class="lvl-2"><p><code>ForkJoinPool</code>执行流程<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/1bBSl8.jpg" alt=""></p></li></ul><h2 id="总结">总结</h2><ul class="lvl-0"><li class="lvl-2"><p><code>Fork/Join</code>是一种基于分治思想的模型，在并发处理计算型任务时有着显著的优势。其效率的提升主要得益于两个方面：</p><ul class="lvl-2"><li class="lvl-6">任务切分：将大的任务分割成更小粒度的小任务，让更多的线程参与执行；</li><li class="lvl-6">任务窃取：通过任务窃取，充分地利用空闲线程，并减少竞争。</li></ul></li><li class="lvl-2"><p>在使用<code>ForkJoinPool</code>时，需要特别注意任务的类型是否为纯函数计算类型，也就是这些任务不应该关心状态或者外界的变化，这样才是最安全的做法。如果是阻塞类型任务，那么你需要谨慎评估技术方案。虽然ForkJoinPool也能处理阻塞类型任务，但可能会带来复杂的管理成本。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍线程池ForkJoinPool相关技术&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;jdk1.8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    <category term="java多线程" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://blog.hanqunfeng.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程--线程池之ThreadPoolExecutor</title>
    <link href="https://blog.hanqunfeng.com/2023/05/25/java-concurrency11-ThreadPoolExecutor/"/>
    <id>https://blog.hanqunfeng.com/2023/05/25/java-concurrency11-ThreadPoolExecutor/</id>
    <published>2023-05-25T15:34:05.000Z</published>
    <updated>2023-05-29T01:56:36.378Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍线程池 ThreadPoolExecutor 相关技术</p></li><li class="lvl-2"><p>本文基于<code>jdk1.8</code></p></li></ul><span id="more"></span><h2 id="线程池介绍">线程池介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>线程池是一种用于管理和复用线程的机制，它可以有效地控制并发线程的数量，减少线程创建和销毁的开销，并提高应用程序的性能和资源利用率。</p></li></ul><h2 id="Java内置的线程池">Java内置的线程池</h2><ul class="lvl-0"><li class="lvl-2"><p>FixedThreadPool（固定线程池）：该线程池包含固定数量的线程，提交的任务会在这些线程中执行。如果所有线程都正在忙于执行任务，新任务将会在任务队列中等待。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nThreads是线程池中线程的数量，核心线程数和最大线程数一样</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="type">int</span> nThreads);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Executors中的newFixedThreadPool方法实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,<span class="number">0L</span>, TimeUnit.MILLISECONDS,<span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>- 优点：具有固定数量的线程，可确保线程数始终保持在指定的数量上。适用于需要控制并发线程数的场景，可以避免线程数量过多导致系统资源耗尽。- 缺点：任务队列无界限制，如果任务提交速度超过线程处理速度，可能导致队列积压过多任务，最终可能导致内存溢出。不适合处理大量长时间运行的任务。</code></pre><ul class="lvl-0"><li class="lvl-2"><p>CachedThreadPool（缓存线程池）：该线程池不固定线程数量，可以根据需要自动创建新线程，也会自动回收闲置的线程。适用于执行大量短期的任务。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Executors中的newCachedThreadPool方法实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>- 优点：线程数量不固定，根据任务的提交情况动态创建和回收线程。适用于短期、异步的任务处理，能够灵活调配线程资源。- 缺点：由于线程数量不受限制，如果任务提交速度过快，可能导致创建过多的线程，进而消耗过多的系统资源，甚至导致系统崩溃。</code></pre><ul class="lvl-0"><li class="lvl-2"><p>SingleThreadExecutor（单线程池）：该线程池只包含一个线程，用于顺序执行任务。如果该线程因异常而终止，会创建一个新的线程来替代。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Executors中的newSingleThreadExecutor方法实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span>(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>- 优点：只有一个工作线程，保证任务按照指定顺序执行。适用于需要顺序执行任务的场景，例如需要按照任务的提交顺序进行处理。- 缺点：由于只有一个线程，如果该线程因为异常而终止，线程池将会创建一个新线程代替，可能会带来额外的开销。不适合处理大量耗时的任务。</code></pre><ul class="lvl-0"><li class="lvl-2"><p>ScheduledThreadPool（调度线程池）：该线程池用于定时或周期性执行任务。可以指定任务的延迟时间或执行周期。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// corePoolSize是线程池中核心线程的数量</span></span><br><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="type">int</span> corePoolSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// // Executors中的newScheduledThreadPool方法实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title function_">newScheduledThreadPool</span><span class="params">(<span class="type">int</span> corePoolSize)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ScheduledThreadPoolExecutor是ThreadPoolExecutor的子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ScheduledThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS, <span class="keyword">new</span> <span class="title class_">DelayedWorkQueue</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>- 优点：用于定时或周期性执行任务，可以指定任务的延迟时间或执行周期。适用于需要定时执行任务的场景。- 缺点：线程数量固定，如果任务过多或任务执行时间过长，可能会导致任务堆积，影响调度的准确性。</code></pre><h3 id="为什么不推荐使用这些内置线程池？">为什么不推荐使用这些内置线程池？</h3><ul class="lvl-0"><li class="lvl-2"><p>任务队列没有限制：内置线程池的任务队列默认是无界的，如果任务提交速度过快，可能会导致队列积压过多任务，最终导致内存溢出或系统资源耗尽。</p></li><li class="lvl-2"><p>默认的线程拒绝策略：内置线程池的默认线程拒绝策略是抛出RejectedExecutionException，当任务提交超过线程池的处理能力时，会导致任务被拒绝执行。这可能会导致任务丢失或需要手动处理拒绝的任务。</p></li><li class="lvl-2"><p>配置限制有限：内置线程池提供了一些参数来配置线程池的行为，例如核心线程数、最大线程数、任务队列等。然而，这些参数可能不足以满足复杂的业务需求。对于更复杂的场景，可能需要更高级的线程池实现或手动创建自定义线程池。</p></li><li class="lvl-2"><p>缺乏监控和扩展功能：内置线程池的功能相对简单，缺乏对线程池的监控和扩展能力。在一些需要对线程池进行监控、统计或动态调整的场景下，内置线程池可能无法满足需求。</p></li><li class="lvl-2"><p>鉴于上述原因，对于复杂的应用程序和具有特定需求的场景，建议使用更高级的线程池实现，例如ThreadPoolExecutor类，它提供了更多的配置选项和灵活性，以满足各种需求。此外，还可以考虑使用第三方的线程池库，如Guava或Apache Commons等，它们提供了更多功能和扩展性。自定义线程池能够更好地适应特定的业务需求，并提供更好的控制和可扩展性。</p></li></ul><h2 id="ThreadPoolExecutor介绍">ThreadPoolExecutor介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>ThreadPoolExecutor是Java中的一个灵活且强大的线程池实现，它提供了很多配置选项，你可以将任务提交给线程池执行，并根据需要动态调整线程池的大小和配置。它是并发编程中常用的工具，适用于各种需要处理异步任务的场景，如服务器端应用程序、多线程数据处理和并行计算等。</p></li><li class="lvl-2"><p>ThreadPoolExecutor的一些关键特点：</p><ul class="lvl-2"><li class="lvl-6">1.线程池大小控制：你可以通过设置核心线程池大小（corePoolSize）和最大线程池大小（maximumPoolSize）来控制线程池中的线程数量。核心线程池大小是线程池中一直保持活动的线程数，而最大线程池大小是线程池中允许存在的最大线程数。</li><li class="lvl-6">2.任务排队：ThreadPoolExecutor提供了多种任务排队策略，例如无界队列（Unbounded Queue）、有界队列（Bounded Queue）和同步移交（Synchronous Transfer）。你可以根据需要选择适合的任务排队策略，以控制任务的提交和执行。</li><li class="lvl-6">3.线程生命周期管理：ThreadPoolExecutor负责管理线程的生命周期，包括线程的创建、执行任务和销毁。它会根据线程池的配置自动创建和回收线程，以及处理线程的异常和空闲状态。</li><li class="lvl-6">4.拒绝策略：当线程池无法接受新的任务时，ThreadPoolExecutor提供了多种拒绝策略来处理这种情况。例如，你可以选择丢弃任务、抛出异常或在调用者线程中执行任务。</li><li class="lvl-6">5.统计和监控：ThreadPoolExecutor提供了一些方法来获取线程池的状态和统计信息，比如活动线程数、已完成任务数、任务队列大小等。这些信息可以帮助你监控和调优线程池的性能。</li></ul></li></ul><h2 id="ThreadPoolExecutor类的一些常用API">ThreadPoolExecutor类的一些常用API</h2><table><thead><tr><th>方法签名</th><th>描述</th></tr></thead><tbody><tr><td><code>void execute(Runnable command)</code></td><td>提交一个Runnable任务给线程池执行</td></tr><tr><td><code>Future&lt;?&gt; submit(Runnable task)</code></td><td>提交一个Runnable任务给线程池执行，并返回一个表示任务结果的Future对象</td></tr><tr><td><code>Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code></td><td>提交一个Callable任务给线程池执行，并返回一个表示任务结果的Future对象</td></tr><tr><td><code>void shutdown()</code></td><td>顺序关闭线程池，不再接受新的任务</td></tr><tr><td><code>List&lt;Runnable&gt; shutdownNow()</code></td><td>立即关闭线程池，并尝试终止所有正在执行的任务，返回的是尚未开始处理的任务列表，以及已经开始但尚未完成的任务列表。</td></tr><tr><td><code>boolean isShutdown()</code></td><td>判断线程池是否已经关闭</td></tr><tr><td><code>boolean isTerminated()</code></td><td>判断线程池是否已经终止，已经终止返回true</td></tr><tr><td><code>boolean awaitTermination(long timeout, TimeUnit unit)</code></td><td>等待线程池终止，最多等待指定的时间 ，超时后仍未终止返回false</td></tr><tr><td><code>void setCorePoolSize(int corePoolSize)</code></td><td>设置核心线程池大小</td></tr><tr><td><code>int getCorePoolSize()</code></td><td>获取核心线程池大小</td></tr><tr><td><code>void setMaximumPoolSize(int maximumPoolSize)</code></td><td>设置最大线程池大小</td></tr><tr><td><code>int getMaximumPoolSize()</code></td><td>获取最大线程池大小</td></tr><tr><td><code>void setKeepAliveTime(long time, TimeUnit unit)</code></td><td>设置非核心线程的空闲时间</td></tr><tr><td><code>long getKeepAliveTime(TimeUnit unit)</code></td><td>获取非核心线程的空闲时间</td></tr><tr><td><code>BlockingQueue&lt;Runnable&gt; getQueue()</code></td><td>获取任务队列</td></tr><tr><td><code>void setRejectedExecutionHandler(RejectedExecutionHandler handler)</code></td><td>设置拒绝策略</td></tr><tr><td><code>RejectedExecutionHandler getRejectedExecutionHandler()</code></td><td>获取拒绝策略</td></tr><tr><td><code>int getActiveCount()</code></td><td>获取活动线程数</td></tr><tr><td><code>long getCompletedTaskCount()</code></td><td>获取已完成的任务数</td></tr><tr><td><code>long getTaskCount()</code></td><td>获取总任务数</td></tr></tbody></table><h2 id="ThreadPoolExecutor的创建与配置">ThreadPoolExecutor的创建与配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">corePoolSize</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 核心线程池大小</span></span><br><span class="line"><span class="type">int</span> <span class="variable">maxPoolSize</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 最大线程池大小</span></span><br><span class="line"><span class="type">long</span> <span class="variable">keepAliveTime</span> <span class="operator">=</span> <span class="number">5000</span>; <span class="comment">// 非核心线程的空闲时间</span></span><br><span class="line"><span class="type">TimeUnit</span> <span class="variable">unit</span> <span class="operator">=</span> TimeUnit.MILLISECONDS; <span class="comment">// 空闲时间的单位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ThreadPoolExecutor使用任务队列来存储待执行的任务。你可以选择使用不同类型的BlockingQueue实现，比如LinkedBlockingQueue、ArrayBlockingQueue等。</span></span><br><span class="line">BlockingQueue&lt;Runnable&gt; taskQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1000</span>); <span class="comment">// 任务队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化ThreadPoolExecutor类</span></span><br><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(corePoolSize, maxPoolSize, keepAliveTime, unit, taskQueue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置拒绝策略，ThreadPoolExecutor提供了四种内置的拒绝策略:</span></span><br><span class="line"><span class="comment">// 1.AbortPolicy，默认策略，即当线程池无法接受新任务时，会抛出RejectedExecutionException。</span></span><br><span class="line"><span class="comment">// 2.CallerRunsPolicy，即当线程池无法接受新任务时，会在调用者线程中执行该任务。</span></span><br><span class="line"><span class="comment">// 3.DiscardPolicy，即当线程池无法接受新任务时，新任务会被直接丢弃，不会抛出异常。</span></span><br><span class="line"><span class="comment">// 4.DiscardOldestPolicy，会丢弃线程池中最早提交的一个任务，然后尝试重新提交被拒绝的任务。</span></span><br><span class="line">executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br></pre></td></tr></table></figure><h2 id="ThreadPoolExecutor的调用">ThreadPoolExecutor的调用</h2><h3 id="没有返回值">没有返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过调用execute()方法，将任务提交给ThreadPoolExecutor执行，这里的MyTask是实现了Runnable接口的自定义任务类。</span></span><br><span class="line">executor.execute(<span class="keyword">new</span> <span class="title class_">MyTask</span>());</span><br></pre></td></tr></table></figure><h3 id="有返回值">有返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过调用submit()方法，将任务提交给ThreadPoolExecutor执行，并返回了一个Future对象，用于获取任务的执行结果。</span></span><br><span class="line"><span class="comment">// 这里的CallableTask是实现了Runnable接口或者Callable&lt;T&gt;接口的自定义任务类。</span></span><br><span class="line">Future&lt;String&gt; future = executor.submit(<span class="keyword">new</span> <span class="title class_">CallableTask</span>());</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>需要注意的是，submit()方法可以接受不同类型的任务（Runnable或Callable），并返回一个Future对象。对于Runnable类型的任务，submit()方法返回的Future对象的get()方法将始终返回null。</p></li></ul><h3 id="执行流程图">执行流程图</h3><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/UmhNjp.png" alt="" width="900" height="600"></p><ul class="lvl-0"><li class="lvl-2"><p>提交一个Runnable时，不管当前线程池中的线程是否空闲，只要数量小于核心线程数就会创建新线程。</p></li><li class="lvl-2"><p>ThreadPoolExecutor是非公平的，比如队列满了之后提交的Runnable可能会比正在排队的Runnable先执行。</p></li></ul><h2 id="ThreadPoolExecutor的关闭">ThreadPoolExecutor的关闭</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不再接受新的任务，但是正在处理的任务和队列中尚未处理的任务会继续执行完毕</span></span><br><span class="line">executor.shutdown();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不再接受新的任务，也不再执行队列中的任务，并且会中断正在处理的任务</span></span><br><span class="line"><span class="comment">// 线程池会尽力停止正在执行的任务，但无法保证任务会立即停止。因此，在调用shutdownNow()后，你可以通过检查返回的任务列表来获取所有尚未处理完成的任务，并根据需要进行处理。</span></span><br><span class="line">List&lt;Runnable&gt; list = executor.shutdownNow();</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>调用<code>shutdownNow()</code>也并不意味着线程池立刻就关闭了，可以通过如下方式判断线程池是否已经终止</p></li></ul><table><thead><tr><th>方法签名</th><th>描述</th></tr></thead><tbody><tr><td><code>boolean isTerminated()</code></td><td>判断线程池是否已经终止，已经终止返回true</td></tr><tr><td><code>boolean awaitTermination(long timeout, TimeUnit unit)</code></td><td>等待线程池终止，最多等待指定的时间 ，超时后仍未终止返回false</td></tr></tbody></table><h2 id="ThreadPoolExecutor线程池的五种状态">ThreadPoolExecutor线程池的五种状态</h2><ul class="lvl-0"><li class="lvl-2"><p>RUNNING：会接收新任务并且会处理队列中的任务</p></li><li class="lvl-2"><p>SHUTDOWN：不会接收新任务并且会处理队列中的任务</p></li><li class="lvl-2"><p>STOP：不会接收新任务并且不会处理队列中的任务，并且会中断在处理的任务</p></li><li class="lvl-2"><p>TIDYING：所有任务都终止了，线程池中也没有线程了，这样线程池的状态就会转为TIDYING，一旦达到此状态，就会调用线程池的terminated()</p></li><li class="lvl-2"><p>TERMINATED：terminated()执行完之后就会转变为TERMINATED</p></li></ul><p><em><strong>这五种状态并不能任意转换，只会有以下几种转换情况：</strong></em></p><ul class="lvl-0"><li class="lvl-2"><p><code>RUNNING</code> -&gt; <code>SHUTDOWN</code>：手动调用<code>shutdown()</code>触发，或者线程池对象GC时会调用<code>finalize()</code>从而调用<code>shutdown()</code></p></li><li class="lvl-2"><p><code>(RUNNING or SHUTDOWN)</code> -&gt; <code>STOP</code>：调用<code>shutdownNow()</code>触发，如果先调<code>shutdown()</code>紧着调<code>shutdownNow()</code>，就会发生<code>SHUTDOWN</code> -&gt; <code>STOP</code></p></li><li class="lvl-2"><p><code>SHUTDOWN</code> -&gt; <code>TIDYING</code>：队列为空并且线程池中没有线程时自动转换</p></li><li class="lvl-2"><p><code>STOP</code> -&gt; <code>TIDYING</code>：线程池中没有线程时自动转换（队列中可能还有任务，但是永远不会被执行）</p></li><li class="lvl-2"><p><code>TIDYING</code> -&gt; <code>TERMINATED</code>：<code>terminated()</code>执行完后就会自动转换</p></li></ul><h2 id="线程池为什么一定得是阻塞队列？">线程池为什么一定得是阻塞队列？</h2><p>线程池中的线程在运行过程中，执行完创建线程时绑定的第一个任务后，就会不断的从队列中获取任务并执行，那么如果队列中没有任务了，线程为了不自然消亡，就会阻塞在获取队列任务时，等着队列中有任务过来就会拿到任务从而去执行任务。通过这种方法能最终确保，线程池中能保留指定个数的核心线程数。</p><h2 id="线程发生异常，会被移出线程池吗？">线程发生异常，会被移出线程池吗？</h2><ul class="lvl-0"><li class="lvl-2"><p>会。但为了保证维持住固定的核心线程数，会再创建一个新的线程。</p></li><li class="lvl-2"><p>单个任务的异常情况，不会直接影响线程池中的其他线程，线程池会继续执行其他任务，除非遇到无法处理的异常，例如线程池被关闭或发生了无法恢复的错误。</p></li><li class="lvl-2"><p>然而，如果某个任务的异常没有被正确处理，可能会导致整个线程池无法正常工作。例如，如果异常被忽略或没有适当的错误日志记录，可能会导致问题的隐患积累或任务无法正确完成。</p></li><li class="lvl-2"><p>因此，在使用线程池时，建议为任务提供适当的异常处理逻辑，以确保及时捕获和处理异常，以及记录错误信息。这有助于提高线程池的可靠性和稳定性。</p></li><li class="lvl-2"><p>也可以为线程池配置全局异常处理逻辑，如果线程执行过程中发生了未捕获的异常，可以通过下面的方式处理异常：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">500</span>, <span class="number">30</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">200</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadFactory</span> <span class="variable">threadFactory</span> <span class="operator">=</span> runnable -&gt; &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">    t.setUncaughtExceptionHandler((thread, error) -&gt; System.out.println(thread.getName() + <span class="string">&quot;:错误信息:&quot;</span> + error.getMessage()));</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">executor.setThreadFactory(threadFactory);</span><br></pre></td></tr></table></figure><h2 id="线程池的核心线程数、最大线程数该如何设置？">线程池的核心线程数、最大线程数该如何设置？</h2><ul class="lvl-0"><li class="lvl-2"><p>线程池中的核心线程数计算方法：</p></li></ul><div class="tips"><p><em><strong>名词解释</strong></em><br>CPU核心数[逻辑核] = Runtime.getRuntime().availableProcessors();<br>线程等待时间[阻塞时间]：指的就是线程没有使用CPU的时间，比如阻塞在了IO<br>线程运行总时间：指的是线程执行完某个任务的总时间<br>阻塞系数 = 线程等待时间[阻塞时间] / 线程运行总时间</p><p>PS: 可以在压测时使用JVM提供的<code>jvisualvm</code>得到对应线程运行的<code>总时间</code>和<code>总时间(CPU)</code>，通过计算得到：<br>线程等待时间 = <code>总时间</code> - <code>总时间(CPU)</code><br>线程运行总时间 = <code>总时间</code></p></div><ul class="lvl-0"><li class="lvl-2"><p>1.计算密集型：内存运算，尽可能避免发生线程上下文切换<br>核心线程数 = CPU核心数 + 1</p></li><li class="lvl-2"><p>2.IO密集型：一般文件读写、数据库读写、网络接口调用等都属于IO密集型</p><blockquote><p>方法1：<br>- 核心线程数 = CPU核心数 * (1 + 阻塞系数)<br>- 该方法下，通常设置为 CPU核心数 * 2，所以: 4C服务器，线程数为8个左右</p></blockquote><blockquote><p>方法2 [推荐]：<br>- 核心线程数 = CPU核心数 / (1 - 阻塞系数)<br>- 该方法下，经验上一般阻塞系数取值为0.8~0.9，所以: 4C服务器，线程数为20 ~ 40个为宜</p></blockquote></li></ul><p><span style="color:red;">PS: 经验上来讲，方法2更为准确，但以上只是理论，实际工作中情况会更复杂，比如一个应用中，可能有多个线程池，除开线程池中的线程可能还有很多其他线程，或者除开这个应用还是一些其他应用也在运行，所以实际工作中如果要确定准确的线程数，最好是压测。</span></p><p><em><strong>总结</strong></em></p><ul class="lvl-0"><li class="lvl-2"><p>CPU密集型任务：CPU核心数+1，这样既能充分利用CPU，也不至于有太多的上下文切换成本</p></li><li class="lvl-2"><p>IO密集型任务：建议压测，或者先用公式计算出一个理论值（理论值通常都比较小）</p></li><li class="lvl-2"><p>对于核心业务（访问频率高），可以把核心线程数设置为我们压测出来的结果，最大线程数可以等于核心线程数，或者大一点点，比如我们压测时可能会发现500个线程最佳，但是600个线程时也还行，此时600就可以为最大线程数</p></li><li class="lvl-2"><p>对于非核心业务（访问频率不高），核心线程数可以比较小，避免操作系统去维护不必要的线程，最大线程数可以设置为我们计算或压测出来的结果。</p></li></ul><div class="tips"><p><em><strong>小贴士</strong></em></p><h2 id="Tomcat中的线程池ThreadPoolExecutor">Tomcat中的线程池<code>ThreadPoolExecutor</code></h2><ul class="lvl-1"><li class="lvl-2">Tomcat中有一个与JUC包下同名的<code>ThreadPoolExecutor</code>，即<code>org.apache.tomcat.util.threads.ThreadPoolExecutor</code>，它扩展了Java标准库中的<code>java.util.concurrent.ThreadPoolExecutor</code>，具有一些特定的功能和行为：<ul class="lvl-3"><li class="lvl-6">入队时，如果线程池的线程个数等于最大线程池数才入队，如果线程池的线程个数小于最大线程池数，会返回false，表示入队失败</li><li class="lvl-6">提交任务时，会先判断线程个数是否小于核心线程数，如果小于则创建线程，如果等于核心线程数，会入队，但是线程个数小于最大线程数会入队失败，从而会去创建线程</li><li class="lvl-6">随着任务的提交，会优先创建线程，直到线程个数等于最大线程数才会入队</li><li class="lvl-6">另外，提交任务时，如果正在处理的任务数小于线程池中的线程个数，那么也会直接入队，而不会去创建线程</li></ul></li></ul></div>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍线程池 ThreadPoolExecutor 相关技术&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;jdk1.8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    <category term="java多线程" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://blog.hanqunfeng.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程--BlockingQueue</title>
    <link href="https://blog.hanqunfeng.com/2023/05/25/java-concurrency10-BlockingQueue/"/>
    <id>https://blog.hanqunfeng.com/2023/05/25/java-concurrency10-BlockingQueue/</id>
    <published>2023-05-25T14:34:05.000Z</published>
    <updated>2023-05-25T01:54:10.075Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e1416c61eeddee3fe880c23e00b5e41f3c5b13f64eb1e4dc0fd13a149bd6f2f1">83e4f756d680019cc75bb3d7e0230dd0b412a416fdea7528d7e9580f6601b2f16c3b74a5d9a5a1da5dd61984e78f0c846a143ecfd5bba379448319807926070c9261aa0fe10bb6f9896ce6f30c9802b7817ce47b5373bb66b6065433067a6176900f891b25ad8f0512f52d29ee75cd3ca8a32a796d253fa17c333d3f711ccbe24f46b73c4094a1d22189cb0a8a140cbd5a088bdb5087c3152c50047f9ab29a03520922ed1473037268b711b17e5d1379d53a4bb76ca4a83340902391de7e7ec1f38c9c8e03327ae25b45f0257dbcf824e46957a2eacb1e308b8fa8472f1b83a8bcc9a8160e981abcb3d1ba30e909ba4fba3980a0c31df7579dc87d797917337ca479a51c09ace72470072c706db76b4621711ab30673bc24149caeac1aa693d644b7692e450c13b7001eac4bd41390809513a1655a130eb440b409ae493deab0672f6807dc5a972d68746e21fe07cad0015a48f47ba88ec7783c353f9d7d333c2dcea3bc8c97a40e5466f0a5aa369c1e3847c1a7a69dda3164b71f49973f30e36e190eb60a806d1c5ea611ddf61e90662860e9f69ad3b89eacb54e7593f925c888789630a77e54c1b76f26163e3e3f286c79d0ca49c845af705deecbed52de6bf77e11dba37461f4adec200886d8ccef97801bc21c2a184a11526e81658baa8482b417f6e2b2a7f1680f18a8b9d54a093e8a2a95523879bef658d040be5ac1b76fb4fab5fdac9bc549ed8d3a97c7514aac148d18eefd093f4c3be32cdde36dba49d50f182a5b9524754252a35b87e69c29f4c208b23d956794403aa7b64cc0294ce7ad147246f8b73ff2dead1a9ffb42fbe28225d4a092417d2f75c5d79b4ba74073d830f27fe86a8af8fc7b103bedc7d2d67c8f230d835305c9e4f385b2324c1b388e6f5f7ebe30ec698ed566bdc70e14d7c15e432cf84a057c5b167716edc065a35e1ba6a88b261d46acbf43aa81fb3c227ce0044c8dc715c806896104f94ae9d7cd42cd3255e2991c71b2cd4bae2591f4f0ed84a8e4750db164e394cc3b7948d8a4c8d5c1482171a5f38e12a56ef416afd326766f9920c368e7c20eea2a32bf02abcd83d9ef84007aa4d1c55a2657162ebb7ccc3509097b914ed6e9ba8fbad114b1834e67e4b4715f3b3e236232e31f145f6e4414913ed297a8a39f9cbcca2f939cf65932b7b3d525cb4677b7d58b608cbb03846ffffec4adb7b2151b88fea005c51e53c05db1b28266b75fe1b55d306638ee6818854adfc4a3f3eab850b5d2d569bcb69a57e2cb29338f7a7d6560cdc9e5cff4422a9f8c1cfc95df0db54304d49d4869e9518a177d495750e7a6424377cbdb9477521c0fec9ffa354e4f9566351fbc722d6249a74c46b541d6f4593cc1e6635bef88ba48de4c2e85a6bf9a8bb0fd9da4857f21e0218c15075c660830c4a044a01a2ad7cf7d2e4a87bc789b2f2454e80e0ed72aef3c3d19070f04218df44f4ca11a083c5e8fd548aaafbaf7ae70fc62e5c618363bb3082e9ac6e760243f257c2f0b0224cf15fe312603c0fa81d9f79e0033e79ea9fad0b9afff0fbee56de193caad1e9077460bcb21198bb326cfa754a4ccfdc138b375e3c70541957e5665d33766672e9cb72a3a8b8b9fe494d87a3cfd26881cd0b17818658e4c423701313db70d8766210287dc8465108f2c9996d1ef6c948ab9890c2bcb7c2d370da76ffbf27d611e2d12119023f14129d5f52e32fe7d7e2fe7a7878b31481093f0d68df50f68473042d5164699288d3a99d9985c5e0fbec11fd12a8e849a4c130779ff1c8667ebbc5a5416a23138ed901c5aef969d2798e80a34be011ea61b6b32e12f555fea75e71d0ec86b1d7d977b91c05faf66f2b9622985b9c7033f056ce6f28efbb275366c907cef920bc76b8adea8d4897d239d1177f2a5777b869048df2bba775fa572876eedf15fb74336d78799cd348540161c1c6b9b51c0886f2f6583ff2201756cfbd31077e0bfdbfa99ef0eb03dcb95f4c74f262a7e7b35779b1dca6f33b226358a5e715b517b9cc38b5d2a36815ee4542721700adde7c8eab9a4d30537af69b546d3c5ce92394399078d427add8bc1e1a1908f8305e39af128d05fcc6ddbd68bdfb892247d5df0a44d4a6108043fc6c681bba47a32e06f83df57c5b819c1ec835c17b0f90d6fb79d8b814c259b04790af6f9977089df3d176d77fc6606645d0e44f548f960ffa525970ef2805c2acf0c8efb399496f5f89fe1a2bdfb662ee3419fa84068d5dbec5a1193a9e8e9d3d8d4ba7665c3022eb51ac47b36caba1d3210cacba2ed2b0945e2816d035059436669f16c2f7cadd506ea0df0cececc9055d0e1f2b8470e34f698b3d2bd4db05ea2917fac43cf17c1f6428e510f05315fc65b597cab7e38bae06e1ba921ef674766ca6f38444fe5fc7103d95a4cf062fe2c3d1dd95aecfc2b7368e7e52b9be97ac904f4d8c0b45232ae0723e025405e2ec097a520fff8ec9b16df1b5417af0c04ad80f94a2251d2a0cd7b967617012a2c7b933326d3da1a412bded92eb4276709bccde039d17b30f30dc8708887ce853317cd94ca8009895aec314d8e1931e12cb7b02c932d340a5a287a937e77cc8a5ba9ec42bcdb4bb06f8b11b1d639316f6633bbb73e33509224cc4cf45d23516c85a596472fd74e6fb5395447de3efdef0fa22f8a03cc98d00c484c38ed4b17e6d5f2e6fe4f5b28b4bd262b32b898142f334067c2c6100efd2a9853ddaeb8da57c3b4082bcdd43980c80dce47dca13a6b95c78a9166f58fdd06b87e32da3a446a82187a1ceb02bd33f301e6e7552d2297538904473ebe83a707ee1286b5ba25b3d9409b7230daa80ce2a6906cc7466da175c9dbce34b8a775ccfe55ced6eba3af158b8b1a7916b984869a575733e5c6ef2b3357bc80f6caf9b41cb8090a2636e7a02c68d83666e661000440cafbdcb97fc4a67f1ddbe90bfd98eeb7e3ebb193b8157a91b956e8689a22180a3563777e129c8f53cf060233587ee8241f3bbafd76bf54a7851cdcb31fef73dc2b1e0995056397d6c29c8ddd72c9644fb5c8bce5a513f70079808ec01bbf02585b8c0f38247d67682038b4f1c869dad326cdbe4b6ee2f9900e345b1d10fc82da3452280c98b0a730dfb1ceed8529b8bcfda4bb93d489252b1db06ff49115dabe6db73a9248fd48cf015d9c0e40e9272a05cc25333c550c14cceb8658b24a6d39adf95f33cd85bcde04e25f91926ec8b06ced533207419e9943f8492191b396b93bdb8bc1002b54c81d63e7652560364e59c942b50d1473aa41e298ac7ac3d0ac887fdabcac36caea8592dee0171636cb8950291208f14abd8191f55117bfcbb517622b63f360f3b8beb4133a04dc207f2bc4ae28c2d897da9a08da15aefe5f1a6f567b4187c307609ef7e6c38e033c64f332191e26fe0cbccd339700b8ada4ce7665d8f002ca013bedcf2bc72a2f288f29a90122bce91bd686b21f8a957e28e96f4a958338400f9d47cd4ebfe37715180e77a6c3df34b8e5703489507d03bd4c102d3a08463ebf97a4d14d56408f4c0c027803ffc0f6afd478d7bf862e51ccef6ccaf6315b5c79f49ad9f60280b043bdcc5449987d5cdf2fe6bec8c1aee4e50f0d9f9ec9c91f9c4e49bce058d2588dabdf37281dd0e9996ae127b4892f0055a710db0523ec09964b69717583607d0231ffde1a917e50495db1fab56b46c57c51e691fc25cccd01bba6eedfd9e998fc3cfa63d23bdadee54b7dc62c3acee57ceb98d7c330685040e68256de3dfef820a0e69af93d0d286b54914d7c3728d7603c12f208163419114d6fc7f35ee30efea56ad3bbd744a6036c6b54f283c4f435e4647ef0d2fcb7df60a4cbab059f31cb64b0fbfe87e9a2495e4ed8ec37f515eee8662b4d0101d5ad8b4523c7c31a485dfe9ad896ad072bd6fe4e0720ae3ffe7f42de0a8c6bf61670eff5bd241e3ecb918094f92df5e791219849f8148b3153fe81224b8a834661653608e3a62896a81bee475a40344518f03d24926d526e06a130341138305bfc4c87ba36c4f814f8f412b64993fa07ce145755e554dfbb096a7b1f5249dae5ba3f19123a1b89a703367faed910b21d91f0ad485ff57f320802f049c65d52aa681a3d2e9f04e99b0e0c2c65c6ef0b5444cbb5f9271a4382a3d046cc5fd4b849d408150b233cd90138306cd314c4a0553dd7fcc82758c271f22e64593e9bd9271355c94e5d1144833bdf73d0daa83b13030799f8727ffe503ef997bca8026083e80b4f322442c6ac17d9b283fc66288fe0e6b6c8dd5bc0278cb60ca3ee35a84cf7e7b7353becb5540e32b7fe6125c6a557dda4ec458c8818b6724538d08669eb2b38cd5160b31f7b91d85f9281ee3cc5d90cdcba8a3441a6f7f66016e680996d026be97770eca9f6b4204b1da4d20bf8e66c91fec9c091a677fca7ae68df44b63ad0631eb080238b27ddd5903ab93f2d6d7785dc4416557868f6ec091694c58e0aaaf1412a0bcaf88ec55f41a6fdf9ff77332e4cefe280453d1b3458d6836cb6c0bb24d9403c10197d9c73180a6cc8201f6f2162c50efbb1c7a00a3938fcc16ec5ae86d0da6941b6b30932f1737567199fe135740d75d79dd06847aa65e6c25443bfaa6ab3045ece4f69a7871e23eea87fbb0d9516772220b8727b3eb1c33c914e76df7658bcc6f9b52ac6ccc2dcd0f32f07a39b5aaca061b56e21e2e9fd5260a08b84d1847054bae3a98a870c9df0c2dc36c1a16645435ed2b290749d36a831e0a0558768b63d513028bb4b35993c6618d525445cd4cd9de25e935ddca4ad8a644cc50d88617e5514fecb31dc443cfc272038e0b7e2f06a94ad762921487aae3590c104a6bb8fe48576e4b30e81424c4741ecaa7dbddea03d80d679b97a86947020905cac63ef156b52775260693ac2511c1b691a996490d78ac2aeb865d0ddd343f24185ffa39cb5e730e5c7e600710297b616c036e163bfbd59ecfc75e3ef8d54e0448850b0095abec1b4b5bb6eb2c41020dd43f776addd783b93b04dba7a7ce5cd3e92a3360c0bbbb4533f891d8a098e9adbd38e0e8fadfbd3f4b90ac54a77b81ca06ae922dc2d15a74748f62e82ec14af79d767cfce92a9c58af17103cc86991fa1a3514a176e072a17776e8b7822083198311266fe5578c6b8b8006199e5b87aea66522e6258d79d5ac2d29b32264e0312f0326ea45e6cd201c53fe0559e00814854461be8645177c728bc609cad8674ffacf3146a97dc9ab4e627b1ca9714744ab0d809d4c678b3d4977690e5b5c88538fe4412431855a633909fa96faac2f8934cf81e372116af5a271840fe1ce38dc05d591e262616de187b378d026f33c67bb543075e703c1dd2a3205beefd57e580f51f5ede218e27ad89ca9ae3dc4035affd9b8e174306b480b2dd323ea0a852eecc8348fa049149db4c0a50248337d2f6e890acc9b41cdf6c12af46cc241365cdf50d29c0f996a0acb311ea042c5716e3661175d6bfded61b16c64052647c24c237b45e0d523665c38986c56ea2c8ac76ee165f82ea3c191f19434742bce404cef2d5c05bd46c64df7996e8f9d130d91bbd2e66089b9670b5e55559317d5588fbe6e61df3afba261285a8e25fd026aca8f06d88d4a3b8f01ec3e464cc7a73a32d7b50784feba1fed04723c47c14cc239c765923b204fef80399431aa727568336253516601353dc8f864f5754b5ba91fcd71c6ca95e65c6b13a6920b79f23c7e74d0cf1e76611b5e78720d5e1beabffd4c53d218b04839c066ee5ffc99c0e8ad95b5bf439f8b1c12080c7dbc08a0f7309754f5ad9e83b7d04bc317ac1b4c42d8d2247dd7ea95592e99c7122fd8a07b4aed3aa6429f7509f426e447972dbd55046c31c55712cf79b9cd52350e3939db30bb90bcbc6d1d20a40b836c0bc1e0f042204bc003eacc05e7e819cb3492b24f72331d463d12dd42fab27ee68b77a48cf6953446a9c216e51efc90def6f345171cfb6b3895198031157d56403233073199e58e6007f3c83f836e1c039e74d5f1c58b2cbaaeeada87d2ecafed9fa1937a7dc6fe1d22b008ba2c4c48f6e2303da240fb233eb6d40bcbce9b14b2c5e402377915526cc15f8a28393866d34087a7de49d4d48e5324f319cd120df801c14b2e981cad08cffd6765b115800b9a46cb3cc68c8fa5f1c8f94d395713bfa327f56ec4429cb1bb63f80f204bc11fc1e1e3c29a9a3c682805b2e84338d91a674b1f260a09ac40f07ef6a1f4bb5c1bb4e1f83232f50a0833b03ea9ddd9e2fb6a93a3db61b59e4f8ffcf4af88976e8629da6d73e677637f7efc742d9005249c8331c46e1654a1e4cdde634d3da510a8c5b551e4b615de6389927f84865196db75c4ea8cb94e4bcc8d5929cb86da88122273e4ecb4bd77eddba6f7520388a56cf253da65678c2589cbb11fcb7ba87ca5559cdc3bc8a73e5107ccc890c412d09e61261ce93d967cc8717b9a5fa0934cba283620e651e74889c213464befed1fe12616bff842e233c4f17a45da251b55bce954d77a89075bb53f380c59c624aaa5111ef6e7edea94ccef388ab8d8bcd8cbbfa997b2b5a3fd0af9b4b35648fd4542533e94a3ca52e21e9602fc9c4505d941a8a55fa7a566753a7beecb459d0d9194770633ac5a1c2ff3e28ad20ae4f644c0ee5d7a3200c00d17187d9282a15c1112a2a6b454f627c41ae8b1073d3ba9f474d7dc9a672cd6c45b16e33ea12383792fe9af9de5f4b235716b17f631bd24b5014c4e0a68f8e89ae78d658fe6cc24eb97133e0fa5393114f1c2b759bfb3c3e3c35e3cc9b555dca5d110246ac7d1479afbb5558d56953de1a38df6d77063f6869ec48717261b42c5d54719e7c8596da6682841632a352b054baee64d7145fea9cb701b7f6c3a4c9c05b99c7369eb63bee88596de5631bcb8f54d9e0774bc5fcc2114687718dec665d93c27c5fce0d782b8632547f753242781a0349cd21c3143c292b13df7191da87cb93d9158c578b0e9f1bb7ccb03968c0b1c950463d4eb13f3cc60a5ba61a53993002c856b1ebefa3576ea501dab04cc6666ce0b639c6c4640ae55b3ff56c2a898ac2f17adc1025a4a093e3bfe96658b07a9feb88733adfa5a1dbc5b45c020143fe98e18a8b70d2be54e1cb5c71b9030bfa6c57f31e5723fb09c4cf0a7357a786bf85eec538bfa939476d1539808d8434b12228fc59b082e839793e6f256ca7275cf470b2680e9186adb7bea9f25b2665f242fbe306db2cbf65780b8b5020804aa0267f5bc0767938e31f8f5ddbfa16957073de2d686a120d55cf01c3efdb666313ea3af627f9ee8bb6162d03e8733804ec745b303767e2e7fd695b9429cde77bc28e984851eba0275451c9ffa8840955f4e7f4fad6cd27882bdf2cbbf4608cf3e038809e12dc28ade375aa9ef29f70a40399dbb38d230ae7978566c7037fa09916820ff055757703957f3e82acbb66c8f3c51c1db52fba68333f26d928b35e0600bafe004d8ac54bdf813eb1e27e3926d399de28f0eeffd5258b80f2ec39f3d2644cce1deaacd1c22325b8d0eec9d644e9ae1807aded806e84ea87749d3156a96752e282600b285dfbe8aaf0ab9550ba5a0bc89f2af97d7cd001317623351eb0560d6d986463ea21b2738746c6c4a461f8e72cd7eb2bcc57847202e114aefd1b96d7b0856811fd37decc4ee873c0e77364b7d87f0b188a58559cfaf28fb1fc61369c215b45b72fbd64b8b6b2e1efab9811998497d45a679d20ff884b288a9159ea039d9179022820678f3fe9884ec1c0ae8d7cfa3f3b203f9d5b755e9857f24b35d152d5b7427036333f4a2dabc1d05bc4a9db945bc26192ec60b5114b93502c510ea2543836c9fcd93862a457faa0f39884efba6cdb5899ef1db4c860a0c8e89a973537b06aee6e2366c1562275de17bc65f30e4638395f240e13d2a6cd24a24a0e323137063177ce19baea316c86f5bfe9b11c21c8d56824908f1f76ac63a2b6a3313d7b13204951a278e81735ae5c799e503128cc8a557c0a703a12e982d4a4a76d6264593b3fb604fb89d98ffda6d756dd186a39e7c7be69a987883f9d01b6975874796f5bfccc9098cd642512b42309595533bb28e83d6dd474a0674081c3429bc736652c0242de9236d026ea3886557c13d1cbadb25bf906d18ccbcdd854497ef03d816d97ae200127e112207f8ebbafdd6c4eae530fbad290526691b169a3042ec753948204e59e06363a3316da56784ccaa5e25839ece6594f63143af1f6b9b4dab492c8dd8ab8266b07ce12f42902feb54bcc17047a1614bab80ecd877f81802ca117d88d8a9fd71a328bbc1cff30f8711df1bb545c9005aa4dbece398620b5b5c027accb986d773fd9da12683565cc698384db6563700fd0cf8df3e6dd8d9b2721f545c45491f9d2b68be3e690cca0ff1702cb2ca4b9e6651424b8fdd11cc2ea7ee7c7bd35bb68b22945285fc7c72cd25da065e4d96d6664481ce2a0c1492e9e5ce029e0e2d92d3cacef1221b2bd451f9ddbdc7d807defd640cdbd03e2b4e0fe54beb38efd93905ae1f3cd8747727ba1128cb702dbe257702042b0be478b2473585bf122a6ca365cdfb720fe9e18eac866cec5f3cd1f43bf6d0e6ce52d26b000088a149bd8b3f3dcd402bff0a1adc64c353bfe1251165634801175ae6571af2dbd8b753837405894606ebd57716ab19b5a8ef39d0e95120b03e600d394ded40e04d57fae2acdb13c2a0d615aea9d5df71f3dd6db31b21fa0b47f14b2ee4d87b7aace8fce8d36adb2fdb9f147eb150159e3c783180a13978566dcb9d4cc8b51896fc9dd42397d001295528d810c652ed4a2d6e8a4645b1085cf1ebb62f1d153aaf0e23bae22b738127fefc49f4c130c421c79c4ddcba2f9d31ea062eea7a4c97d4b44ca6c543f190afe3236c3db36ff674a0e720d964a243ba13d57c2b5de6709511132006f70f3b7f9faac9d88564a04bc380dd01a813038e6cdf3cf494ba64903567afdc00cd4e6f8f54db5c1fe01ed7582e9139df7506241c2eb0a9531c3b47073af3d757532fa8152b89953ff481f5abf358cec3da9779821efc5c9b7884e79e65ea57118ae15e84a258d1c0fd111b7f1df58824f90cfbe361250e790403f09ad7617f5b1d269d3bae2031396b7ade187d9466faad763e6dd0ce39c9c68700ca8d089b7d02faa047cdca505e120d05489f792ab7e09982e637c4b79242916964c6de2ec9962b692f650f40a1976f291c8d01511a9ffc6242ba3aa02afe56e900538aaa2191e7860ce92956a6f70743ef6857774c218f7bfaa0418e9fc4e2bd06dc6d706b3ed3f842c54fb76ffb3ff604e6fbbafc3e674d7299c85a0d12dbf3a80a2e0a34bf884daa296ea0d9c8d82299870bf6ecc9a30e0a157e00807b04830d2872d7e35492defece8c5515cb61d380edf67d0ae418623690bd38a1f16fdcc1574145d3cd40c96b327b51234177f38a3688d342313b7f51964138a212ac456bdcff0a2cacb37199fa854470f214f2460797d70a97e059354c9294175b1ecfe47ddd6deb3bbe704b5395277849f9f71cc4f4cf624125d2433ba788eda6ff4c1540f3a155af61fd4e83b814805404d72d34524618c5b546fcfa7542605949f4c1eb1621bbb1757bd3695fa35d105e85e83d1f183da62237eae28a03d7cc6422ee9495aea3cc7e62f5fb766f07892ca0190be1f30ce346260543e4a38c85fde319beefdc1d6dabe5b1ec4ec33ce34f5fc6b74ef84154db6f233e9024155ecb9e63d3d8c563b5d2bd617ae5e454fa1f76ee58a23bb7aad4706174bc4b6e5f32a6aeeaca6910ae29106bb7c076842f91ccb06f9f89ebd328d5b5ee84bc01364532a00a4ca88fe3319e942930b570ab7a9cde920b0cf823aaf6335391858b7c94a553972635f3d754dbb93e73cf6a69de5645a3c38780165c14cce4e520d3375767329c7a6493adbd0ea95ce039d5f79bb175b1ab72f33ab56f7f224db26a3d5f8bb2bbd09efc6eca19e9f02cabd6948be80c94dd3b0c9fe4a70609ce3bde65910f560e1b47ea7058c20c29ba863dbf0404d041edc226141985742445a1cc38a86186596221b47986dae8606a4f6b6fc61fdd262df544f8c1abce5b9285fbf71906f1e070fd5f55687ad800099f9b51ca76a9beeda152576496044034b7d05915299e13e72ba98a649ddf2dea2693b554e910ed7f33634bbd4697094d70a6d5f7b1d763948f57601a95043dd3261c2be56afe99bfb5ef6b283579474ba5bc335dd8d79c17f34e0fe995661b0cc768d44af819dcc2e728afd5d832c834980bcc49406d9b65cf1646cb007c66e564cd97bd10e60eed968af966a7a3f4c455e14a434405696645faeba9be795a95e07628d4e7a07fcb3a2c83e030dece39c23b3348a4a71963c92b2a113c5c98eec16620c3fc1b9bc7adaa037e3eb0ac19f87e368768890c31dbee0def5ae2ecaf02355f775fa6b39eb5809ab3f83eab60c2716782511bad63d4175af2e543f8b9f9ec103ed03ad4caa1798d80c4b0b241f6beaaa2b22fb07d72962530c5ff6bfe4252a1670e5458d5b4e58204497db19f2e840e9bee795fae85c172a1f3e1493b5ec1e508f2d898f381f579c016c0ce0eb88ed1f96a0981abd0cc2706a532f8097ec50db1d25a1a4862cb766ab81f3588069dba07b6ffb2927d51a2751cb6115a1baf4d2aa67219b31587e39bada53452b212328311b712f399bcaf3a672881be2acfd95978e026ded560aeb346e2dea7c2a507b47f65910b47ffee3048ec28116e09be5c303f3ecbcc06356803660d3c01a48e3d451a6f30d3d193291201294e48318b808894c8753e6709556f129937ee827b8ca66ff5a14e0f2c4bd2fa2a372e6c71130cfc79b8bc06515727fc7b1d94825698195828e98018161ffb2f38a6ae7ea203c2988fe931784767b8370de1a4293af1891b242395b06071e155e6b076c4c07caf9314862700d31f188573a01c3e25481c954b05e4cdd7c3c9a10a758998b72483d242a3f5ae31a484efe65e74315faa8f27ccd5adc8f502de90ec2caa2f3be55b435778715ae6107bd20cac77304045958280a92c3fce62b3a73e7e4620a01c05f0778ec61544a9a8971718cddb72fe56a32174d8baee72ccdc8c8a9885bbb4a3e71746a8ab0ab2cf21db5cf7644729f669e4bce94d5aa946ae15e4b4705beb9180e7699aa9445f131b4c735145da97d26c4f7e98041a005f67f7466e53ad2a2e16556eab8824e51fac034b2cac710838bf6effdbea05d024880f51c712ea1774f0feaf99fe1bb5736a973c93a432a6f126b95ed71d6c92833a43d5a88cf5d4d7c9ce1a3c28933c7a4cd93cf9498f844d07638d0150caaa271727e505720af57477fc6a878ef7c78f8dfe7610790906be3a8a5ee0c4492e64dad058fe0c6c5d2a46cadce72b567c16d7ce48d09f2234037a12d2d0176c80cc4f6619b3065f1498a51cbf32c4f8a90927836687f73c4d1cfc55a6315536ef7cc90b6057571166a23f71a5da46a2ffa957bba6bcfbe168344d06966da370b84f8ceb3910eb9b04111f4f7147b756c86fa072b56375b363d7e976adb46afa0ddf1a9305da81309dbc615b07166cf5ab9d94f5b5f862f232bb57ebef578d3d9667c85ecb30adbfcf331eac40d140c0ef762d7c13cea89f6d684e5c1c0e699b8a7b77fab7ff5ffc3a2dfbe3b1d05f37493900ecfc84c071691dc9b198b244364de702b1c497688ad502a0c0ea058f10775380344f96c2865e3d36d5f8d8355ff5ab35300cdaa536222796fca8e83458ec32542518737041bffa02a1626b58df99fe2d3647abae7ea4454a01cd34c10befa074f28894a75edb9a4af86345e6307e0782e438ba134582eda56430d9d4057e7e46771ff940492ac8ed8f0ac8e94de809aabc71da5c11d1406cd8ec3f39cf862ae0c4c6e67fa8a883771cb4e02e759d04270e90bcab0ab5dd40c6aa104a3a794341c432fd6cd777ebcdeec9540fac11f1e133b378be41a7615121366cbaaa146208b7d67fda79b321d1d53587780b0d4173201aa554cb95fb0b4538def1f329067ec834ad26ae68f7bd84d6194fbdef9ed3864dc3e4772fce7b64175bbcd95b669026e1429b85af0b14602d1b0db75ee77f15c8537bdafc325be014fd80c3dd6a1d6f52d181cd1ec7904404a00f093311f7f07adda38e34b4aa2733a1cae7e8d70de66f831b2890b1f2c54ac295be87c71aec201a78a858090527b4dda36431e49374c2752856246e3cd8350219b9d39eaf8b491badae4a036681b10880d9b2d5e46f1fde17c65b23c7d48849db33b4866c39aad0f2a67a2d8948f4f900a15226b62cca770f0dc61a9d68a8a7de127494baa6df74bdd3cc4fa402f1048a6e33512c1cc0078569d9f4e49042fa79f6a3bbdda6a504ea7e52601ea30be356b5a0e09bc5e55d0b5b3b98c2af9d135cfca5a579c83982bf26757f56c0fa22f25b3b7f57c2607f8ffa30280c3d5c12b9f892ddc33a7b4c0223603c2c8317fa45113fba7c0e3cf66933a20a3ea54061ba2a581b2d53348c0fc8b700ce258187eaadb6c83a67439d8babedd0ce0447290ee7618270811ca4bb9204233fffe647eab332b8f2e058a51ee4ef3415292c8f9923723a568335b4e1d4a7205a15a0664f4006a0502494b140837020168586bf9a941ad3c5d64ce4e27807a0a31749ad9a5075458ffb7da11f4ad0cc32d652ad4e7e430672baade6f230b61c2160bd8cf5ac4a0ab2dfcc5feeff179cd3d61a53caa827ee90fb76621bb58a9cf4a6f77e5710e978b28e85d683dfd4be1b6ba84f650b8e3c05db2ec94f63d730f3b9106ffced6d02bc8b75980b46cea6b802154c27399ed9d986c5b1283df399df4195857ae7db20ea134f79248f1ea0757143cae28d50fa11288325fa0801a2e035ed81bc71caad423264b5f4211088cd77989284a03e66fc84a9bd7e235111a4439073d89f7369eb5c38cba83b7ef286dc542b5edc39faed84e3a34947c24f54d93c2a11394c444e3556ad6abf3e8de591b2c77a61815a45a7d91447b1e6a0ad0ee6c24769a4eab9d1981afa2f455a87fcc4c55a9d9151a592a80c78ec8a533e57be888385a5814c5f12df68202800f57045835e488fc5f0832157b272e31a3ff2694b7b5b2fb3b662dec0c4cd7a32875a98969f840116dd0f42705bd60e4aba4b86b2c3a390bd219b6030b9c08117df90fdf501cc3a4cb595a4efe8d9d76c841439b5a6d0bfc3b3e54813f853e251112e1d0ad809f0e4a839ec4c0d9b10d7b41a9ebb1c69ba674d62f417cee512f47aecdd71102664e91c0bea6d006fdc78facbc134486b6af61eaf09675650d5a9ac33aa1bd8d9197ec05ff50a2f4840e5381bec4f90ec9453aeb24079576baaa97e3e4ffa192fc9ea9e7ead73c77b17edd8f7ca060626a1da374d89806ff3e92305a895075d6ab316b09041b10d092e8642fb67109da1c56a9dd7fe2d7468d69363a1416ad85cae595ac27b0015b4d68eefe3b10492e6957baef15f2abac2672b308605b56552ec0cdd0a1fad6fadd6ff449c965290082e1c98f04337859151c6d3136512d658e8193acd3e67b16c61423a876bc5878f9da5b3047a8d6cd7193b170118b4703e24a336020a43dd51d400541fc0b6578589056b4dd3aa06ca5483e2b5723dcde1f8d22d84fb3a92a851de939a905f50b3df558acb19dd7e4427d4155687087bbda0ac5834130a58e863854c2ba1b3779a230cb5099e8928625c52dfb8ed305e398cf250c4d312684defd26c809c3fd1374c5b70691c7c5279e996154fcb20d2920d2cf24ec4a6e7d299c8071645056a3c046ff1d89d32c14826f2cc390159cc76b0d13f8b19c3d8191fb84da98f380494f94ec161e36de480e48b60adc435edf5860f56f19c7b9b56771d320f0a212f8fa0534873b7262dd5db5d1b2e96e5c9755c6166eedbc00ab8e55f24abc5c3e12d94f7e478e06b8e84a1f1655cf8ab5281d430c4724618669d370dea66ace59a6e4cc54cb4d48253c3a7282327fbee65953e9bd443b57e3a924383b8fbb53d9bf6aa79df77a8a5e28dcc6c7ef1d9938d7cf0ae525b9dc432d7339fc8598796b28d4919c4f4cb9aa1a5735cf47f60dc2fc33c8c819938708458bbe81a535520c91d3e69f6ad77c934a801252ab08ad4822431dfb99d31e420f34fbc416fd2ddb5e3779f015e7c47d12f5075eef60c7a09d25ec59aa5de921cec0215b29c1a29c1160364965de84c80b0dd62a17f98edaebabddb654f405b00b251143155552293e58abaade37b49e06c41642c3b0e7fe54d253ba96f9dd2bb9ff4a913b8a9e0a40b84a8cfa842176a7bfb2d5c1dafe88f83df1e0cc43cce270746c710f3ec5d7dd672c3d9f88b4221609180c13b099fb5c36b3b04f60a718c7cd14fba6c164cd7d51219c7be0a8daa612d317bf01b7a5abb9c726516a376995bf7c82cf186192d5ce92f7e9b4f07abbdcb366acb4a92124c10a02f9b9260555d5c3371b4cd42c37ef6a4f2bb0a4d82ee117a04816d9314d20c652fb5c3125bd48d8810c11348d4dd00d40edaeb4f870d51cda19e467cba23762f776359f4aecf92c1f43e146ff594c5126d8242583124865fc66a873016e061ddfbe1973170314186054cb6ede8dba8bd4a206120645f9658f8cb641dbcfa621e8d92773ecdb2c5d8da030e5b0511f2ada4f0d8d0f7c757beee6538205af1ae94aa94dc44fa8612a8198f10a1089dc15d415d9340ddb1198c3c7cf530f0c941e5b3de8eb858e94de74ea293d92bc3424fdd54a34b05b85554fa0658b285200d938346e041775758dabe7a6baa63caa9226fef9aeb54d589e1b4e5b2ed0a2303bdf38f963a962c24bea209780154cecbddef22dd0eb681b6eec2b452976ff84517c46da2abfcaa1422e6418a39df66a9e9b3a6b00d2b20be08dc541445488df1c95c665e19254a1e7f3839c6cd26788743ce4a3519fcc6bbfa48ccb20347402007ce3c73da36ac41c009b17c32ae6d2073ccd1e60e5ad42ba809c2a2de3da3e0e55ac10b0ed7a5575c60d218862c77512a8acdf03d6ed696188870eeada21b9ff4d98347be71f940ffb46b9a7a302e7d064f60444c1decd33f7ff1ce59900c6d58bbc5a2555d9c8768e0f4258e94574e7bd6f54177422f7282eec324bf960540b703dbffb8d248dc12a0be0a8eb79ad635149c85a7526cab79fe8f7d6f634a81bf4694b71428ab50b3c3414b1246ebf1430f998e3cb2358cb87c41f88a566ee50006ccf2f69e5cec8135bb8b7fd35765a1f50ec4b96b1b73c47643a7096becc9b03f40a2c9f7ab6e5dffcbe235bbfc3dd5505d34560c4c10d6ced7839238aa3a621b59bf5b6a0de2e0badbf7cbd960613f1b734495787ae1f9912f36e4281ed580fc16495c17258d54a128dbeb5354389ce4347fa9316c8f3e133e3f9be1afcd6f8ddbdc0d68a39b2c2f1b30be294378dfa70564379ee679cb21fd9a89e8ebb7dde932afa5b5e83a3b7ec9d069c8116ed416b33e2f46b24d42fbadb92c554e496197980a991efd8193d73d54a8c034b8f466e771a21a46ae56a2f59a749098c24d9cb6359b237e13014d7c177f419e97af72f7b91ffa4429afe49dfdbc185b5c44551441e9b33618a0c23348f3a75760430b386e0191065e3afeaa97cbd64b44cd192003a73e567b7340076955049d2db0717019611106254264899a1712e371632d173d60731f40ae4574b1d3baa262cdb56d6b3e58b9771b310e0d0c10eecf124086228b082c0813009288f2bbf3e6d0dc9f4b8fbccbfc299deaedb6b495c944d6fba2bce0f572e7ae64b0e2b6f534f2e6246dbf2b0f846023eb928af0d4913bb6c3596c40eae8876f5ff356f7ab55b404ffc3333da1a0bcbb3dab5fe7657f48a6554ff10ac7e01a9b09ef39ed20fd5d931775b2e6bd226497c910c109d1077aa63c5cd7d4bec1c2f09fba78777b0d16f6a33a75eb1971b79dcf8f5192ebed03a96c92fad590d8d1b8f7c0c79f926efb159a7ebfc8533f9180d24bde02d5137e3a46a2edd60b62443115ce28c4490870134f463091600b0a4fb25a92984ba77c767989fe5a4b7274d839c37951532760f7f38d69b4f91dad862704d83e126d7a0630ac21f66844eacfeaeb60ca184b65fa56d7958980a7178491047d44d4678b5c4395cd0048a6a430620f82ded551ea2f05c37d1a7a6dd0b646095a5523e3d70105ad4a7f259c338422451dc78f39a9343b3da9a158743d1079b5503c4bdfa3b16fd8a92ccb84bb52630c9ed56e5c8f21cb5987ec54c8f53daa8fdd111e4d7c1516af38a7d4bed54e8d93400f7ae6d265fdce580c33c771ada7e71fc284b3fca488f6bd973ef64b0e22287cdbcc462d558e3cabb57b28ecdb4df6a26c77c1225ebe68eb1a310292bca868dd530666204a6957ed9c822fbf25b71d96f2f75d997773a5382f5aec05b820f7032ee04fbf71331cb96397759d0fc422f0d927ed2464d15a080907aa64fbf573b55b1d97c294ee061927c605d5c1b0e9848f928be38e143bf84aaa25ab35a238eb1f5529291f07e0ddf2bdd30f145da9f079c31f977e97dd81053fce262fe7a5165cd518e280dba7fbeb77c2c48d357f53a44df4f54345be37ff8f53b1efbafe169c516682565784982ae7f4fea6db360fba72b2c6540013979859335f71e21b9fd2fc48f472c26e7d2ddd2c742c6955bc83c023343d3377a945158ecb28e55ebf84cb402777c019dd2089b886346f5b7ea54aca508cc500000eb2a3178e7e11d11caa34ff913969e271f6de0568aba34a49184dc2b5e64919d089b5e5fb5be5ca88b4da93288fb72151765c0ad41403c82f2e4cd64c84ebe4f4034ef8ab5c6d19aa543f21a83984f5c4df8450883c61b839ac53561b4dc82c523acaa07220fa627ce82f189a8021a129158f05db27e4cb36479a85100a219989f4e86be4ea9656480442a8f989536996d2c09cbdecaf2adbd87b27a18dfb2b3d6deb9cdc098e576f77fb2cbf6859c1822bccf4d67d4aaa533a380c324fdfa37811883d07cc258bee488bae927d847cf0022d012ed4f33863c7591df5c06eb76e531e7c052506ad42aaa4f917791a3c44ecea9c45a65b7fb957ab03ac445acfad291621fc982b75167721f30deb53fe9225a364f808e78836c1beb06abf5102851b92261a12705840dbb8ec37d4ab67ed9acd8ff931f226ca6222a0f5cf4eb21a3fb2690dd85f8d99d434e3483b6928e7ceb047d802e1f82dbf8abbc0ffb491d7f3a95a8f1b20051bda68d5158dce23608a69a0926fb4c3360e1bc29c3a0e99d9a6beffa3e3ad5adc4139d9bb37e1bc8918fc65e7c1cbbe71f8781546c2c2b5385bb1f1031e4fb83160dcbe7cf653ddec2cd816389fa1fc227b181e08610babe3bd15343ae84dedac2356512a3c4199a0bd242d6f39739a79b33640727e169e175f6af44d66346034b3ecf12cf30347ea45b48127c0c325419bafd877158bcdb7912025e211aa8d5b74c5e2b37d19592469bca35f11e1d7d1beadf130e252643707003cdfd1b55335f250530f80c9d4edc18870122b6c3add66e77c8be69a55a1ecff2badf63669931ef33019238ad1a412ee91bba7f2dd7e36aff8cba4732a50bca3ffe2238187dae7b3ec2e2d88d096501a3309f3b959e308a03e136e07f36db25c2ca743ce1098a5d73828aa91b4d4cc539601ef15562ab3e8fe09fe1330ea45786e3fb148eb47ad32a7f00b6779ee294b01e97b01a6be8448de024147531e8e9a8d31075d22e3b214058f32f10a88c6671427d64333632dc30656bd36a55ab8a9e117217599df9ea2538e1ea17492ff35b75e08226743a38fffcd91db5d6479d3865b8e87a5b7d1de8a790e8ae7dabb23976851459884a6d301186126b86057e99495dd2a6a5f1a37d94cc900bde80e62c87b2da072ae8366b5436c05e7f767d98f38793faa6aa223ccb0f040ce94ee20caa01e794f9abbea2a569c8a76ef326e2ca3d096ade3e3937087675fc0375a57b1255e9ee61806ff21734a078e4d771e654370b4e42aca26fb5115a525c59642034b21114c8f23e81892781bda9f5bc5e0ccb2689bddd5e1d523270df8ef07da8c0f4f3381534404d485852f9e7e66dde2fe743e22581f9a6edb586caad5de2f210a66946b07c68ee44c24a789f4cf25d784584c02dfda7c8cc0be4f087382312dbb0dbefb603e273625add04dba14925a0d5063c70542df151ba07261bc71d8fa020dc52dc857b69615028865fd06450ad75360a91a60ad004d832bc4625dd22a4f3cd758deb4eef36894cd2a2135fe23136f9af0b1fa4f2e228d15a66994df55c67c84c7669c908983a25b2aa13eba78813ca5b6eaf6db3a89aa8c99cc8bad77217411730d80f94ed7016b30ca24aee26901989078468a13df6ae677b48c4c22679ab2c78a8a0e1717263be914a10726e249ef5c7e0d756af9ee91c936e5272e4d69c6536caa5125e9068c948fe6246ab49123f73a90f47839e729c71976d9df42a50760acd008ce0409cffcefc6641c9924543463b25bc0261bd43a6d3a599b177e5cb89efef8f0592a2d6de7f983204e925635b491628ced96dcc4a4c44069125af1d3f0ec820f2f485fc5f0746bb3da1f8bdd8cb09664362cfeacbfdbb05c5bcfa9edfe38e38dc68c3dac67e6238e053611899fbb50d58b93b1dcb9e2a6b5d5d0d016db78ea9bd3f7e8b4e0ae57c64930f6074a5e6b093272acfc0459db25a94283ef988a700d16be9325c471fc54900d8a84c8e6a1e33a02308c63132ee4c5d68b6ecab00d1013bbe1d8dabc653fcd32a842acb6e4e976ddaa8064bf8d399718fb10e9ccb2f68a754040ca79625603bd30303cb5a8ef605ad7cf13acd645204ca70d63f875ac1aa68de8a3bc782ac58cb5f74c5e3d9af13130e030e6a101ef44f6ddf2c932e7c84de5fd7ce497f20012f21a2380496be5e782499ac6cfdf37c31858f6ca7ec71cb57c294cbc33bda55e62c5f92744c438fa52b709741494e1d4a8dcc5d5f61037dcbcc78b02a6353fb8bdf290868373ee77443c319d2821aa80898ee5f959b23451f9a2fc1a13fbccade58754de5fe429e6e74257f6415baf01fd62bd960433647c9b0b3483a0cc93b725a2567e895f77b0e30c54daebca71125ae0e9e57face16418da7f669a3c5cc1b935e3794ed2551376a7dee87b7dc63432d78e0030a9d7e298ebf1056acc7e11bb00d0f7f2a82ad81a7cbc994310ae96882aea1f14e7141f1df926981c82c759cd73d3b7939954ff08a387129e0e0172b3677367e444cc49b5b4f53a76d0df298f76f14088405affe9edfb7edf0404de5800bbe6459f77e849ff0a77cbda8880a2c07daedbbee615dc38d14a49a0ac9d9e363112dbd21e2151c5eeea8ac038195106db14efc837eb3d97acc0daf5be98cc68709406b639a7780c70f36e1a4f82115f84679384272e7ca194aaf13e62b96523c398665151e3ceb62f33df9701e765a0c180e818cb86dd1d9e2dfe5ac0f9f62fb55d26ffe92202f074ff6ae177e7f15699c540673526d2f9b51d1a0cb59f685fb418d33906bf060383470b55340549c6e3b6a021dba36ef9570cc21d082b4a40b22b6e9d0f24b63f6015d0921bed67035dfa4d378f15d333b5e9930a17a658c173e659232c1b8d6f041e9006def84d804fee2d000c88683589af4aa67e5e5d1eac63bd7c014c1864106a8d2212c5e69e84c51637676a698f1364fd107d17bd3ec27d326c010d7e7a5fa67d9d816ad9aaa1da1aaa60dbc509871da29ff81aa1ebd33179a980f8de8ca8ddbb002063b79b9694db0780c8249af7833ce2be0166b3205ac3e67ed55b71f3cc0cee05ad0ea700ca9cf11e092d8168adde8e5ea194600808d88aab488a7ac0035ece312fd091a20a6a5c648f84a07f6b1f1d424ff5d11de3b8c8461f7ff16dad432a229037d18e41c292de696dee19b0b21c40920681f088c38ce464121edc21fadcacaa6dd3e58b4c9cdc0fe532272b409021cbe96a7988d8c9009182d1313b77220bf943536d82802253b0d50be8dddc795cf363938d8c165db21d19d394ce6a6916fca4f02ee67a6fcf21ddf40abc3034b0a7e1138bc1e1b5d7bbdb8650512eb03b6843411cac8ef33e29820d7567682419f8a1b5dab7f294961edea4ae4078a3c8a9cc2bf576c206097078e780018be7f90f44b6ff2422e2c291fcad49f2c81944ce339723433c4ff6fcf79e986d9eb0e68da84c06df4a9169c70d6434a8de7cb4e3c9deb90c2acf1b6e47bdcf280c836fdaf9da321d1c3b72d14c01ce4855d8f45e475970462c58219c644beeff32035068aa404f33e588a596dbb62611f7d2327b6c27b1000d88d9bf9949c064e449dae494e41ff6551fe8203053541f4a24b7ec6f4fe8dbc491eb9e8d9b7f56a8621cdb493ad2d65c6d95c20136c3b30e4bcc4e0c19fec4a66a678620c66c21c36106dec88cec99e1c85ec284097faa3bc2b59c5af820a9e5227d2b4f371d7863b9f044406a30df4fecdce44a0eefdae6b9b5b2a287dd25baabc18fc9c326e6fc9a0765ce46ba3bc9380eaacb83cf0c9438411bcced154bd4e423030ebb475ff75b6686ab5aa043769af19b9079e557d14b5b8c819be5f611a74f8a0fc1cfc7f96207812ba13891dc8319ed440e691e89c2e670c677cdcbe276cffaf8458079aafac93ba567cf102babc038cf03b910e1e4887ec820ccd50baef758a94f83471f2a42bf96f7a5214b0cf7daabeb7994b4c9dd6d23176d1827ff4087c055849694e50de20b40b5b5b2a2b4c9b85c0b12123b09c5b8b438855bdbc3069d120aba1b440f96190384a5cb0ae9318ab02f233b79b42a4444693c99f40dd4890480cd9b1a751ef710d37d7f53d23e9d6810298e541a41f1956eec2beb410d2935a38576036eb9712b1c78b1ee92ac30a7115766d99d4a2a7dbf374d9c2e2a4df192d959a1eb37f6592204d8782ec177b755b9f6fce811761e8cdf7602e0b8b723eb80008752acd1a08fff2e2fe415375c5751f2b499d9ab2de84e378969ce4af1a8a2eb2cb9866d67bf621f0054362d8d046a796efd076be1b9f46e053cfdc88f57f277c57d91a4156a823c282da38bbc3ae7a23f91b13d1001a3997b1aa455f00710d34c7b3aa30b6225d7045f43973a7eb3df666b1f997bb51598f71dfeed22130b6552329120ba10df4a0303da5cb264fed91abe725d84bce9dc0ae7c08a7086634f24b055d8045091aba0d201bab01416b9739a00cb72eccf4dda01c1386c3100c7e88f56059b3c8a048516bda7bcfe60114170226ffe2963db5477e4cea8737560211e3b031804d4778235448c78759387c72b06661546817d58169994363b0a4851db3936fd00c8820b357f8cae7520941da89ab6e396da454e24138a8e3e22318e95e110ada6c94a50c498a9b448c280725c8638511a4171513805e096f8820e4554b94bf65f99f703f42f90769155ae86df914c5d81711156018cd82fa7cacf8bf260dc916fa7619d3a45935e271e1e7cd665fd301701433b358e27abdec4cdae255e08c5dfab08774463e889cd9ca0d4b25a4d7962c36524d2f0481b21d09e0a896560b1e2a711fcb650bf4d786a100c70ba050f92da3f1a973a31a719f55cd0e0489b88b883e14e2d6f4760ae26ac9d2cd3aef2dc48c4717d8200cf2624d78eb4f6077866c0581e08192f8eaacdf9c255d44cc6797506151935a77d5befaf72a8d9d15b6ed718da85af05004fe79f3180563bf520819ac07348c0585d098aaafaf30a287c97b8486679f357b5058de409bffbc785c33e9b219349d0fd808fdd11a3c598383a4c0ec9f7424e690c87c068a14eba67efeabf7bc2479c17e6c84ff068c9753ec283db8d42e6ffbd24b0129c34e55ca2eaffe5573525911f7875d0b82ecaeccaf4ed80b3b18dde393f3446181a583ac8f7bac4da5ef32d632879e7cd1ff648cf8cbcbf24481e619a9d1d810a585c7c32bcaeab5257e8de107fdb377fe63169985e2eeac3f11bb1f98597e20e1f6a88f6653dc3cfb8186b93803b1b9a69839e9f4b8093ee1d69425af4acbf9561215eca98570efc258b3f11de0c5be1e34da61e2ab1f98552a5a44e6a87018377bb250984acc30fb1ab35b2fb2adf442f17cc2c658ede74df4fd51d43c69f19358e0105a392a44abf11b4b8fd639c8add0ac11e447251aa6dac7f89e4f010ff99e5ccf268d808a27b1fec73c424d27439b77655582efca7e84299fdb90699f61e6c362b54ec9bd04183b6221022fcb247a74482200de41a2c924213c95dd29d0cfad1b835737aeaa9d73135dd268ca9216a53e7d4eafa6af5a5a6d3cf45a467e2d74b13302571dde5b71d629e74a9a8fc3aab139ef1ddb837b9821463d7c28d136c39e9ff2bf4506e145958c6c58521b44ca690353a8aab827c69279a823eb020aa4209fd6b2ca51506bedb4bc892239d68e6e684a1c64ca7d886d06d6eb89b417a4b4f7314c819c08ee0bd41a6521efe08be0887530ea65cd58474f42f4d4a5d5f195ac105e5758add95dca6fd8d2d4486d75dd4f76fb9ba3266296416b3c37deca97a0bc8dd7a528740296874bf247a5f7fc2d34142653ef680565810d894788da634ba8e44720f64009a6f06f3f2a955a99f65becaceaf224e7f416b6c2c4091a9cad649764ac7c8b0bf7aa6c772a0efd5698fce59af2356427a1cc53f2d7fdfc3c8e3087f4f3d9b36d97c619fd91c2fb59c348ffe7089a574a9f77720e293e3197b4fbb9919d6ccbd06f1519bf60e501a09eff4b80bb492b32512bae2153680787b6af94a36f9644a119e9c4fa3cc4532c48c7d87b4c44baabf54c151554c3163e6cc3369c81bb51ed3041d733fbda27395ec4f4015dfefd16e647b8782fb4e8261c481ccbe7b5e5248ee08232c8758a6644fb22232933fc56825eb00a4ad0ddfd5f357fa482b8cb62481986cbb6e4bf8bddc32207d45d3e1c4544aab057c21af2b8e7b20b76b9747ca008956cfe914731ef22818f603be0f9fc1955bc9aea27bd9831ee120886eabf0af33e6651215c7eb2cc759ec5e8d1138fd2e6dab3f20366f502fad2d9388e83c2961a2b125f0b5eaaf244539f95c5fd53d566a9df5b9bed7c890136043f5686380a86ad0a2604d1db3466fafd6d572b5612ee4d54f29181a201ce756a9182ddc37b047a1972d31d3300a514d9284c566e251e24109645ca33ee3b271ff2449f48b4751543f6cc0829fb58eb7ff684879a8abcdd8949070e98918f0732cde1834badf7bf058a6e3a1d94c3b62914922c5e4dde0e7bf3c30b6dde9d5eb3233036eb480ec9daaa6bbb690e0a9602a7a4409e223812b4d8d87f114b94ba68a9ec72c720935ba8e2ab84fd69bd1b7cd9a4bc56a1333232e78cf53dd2501be755373ad77b301655c16171877db58df8bc5f70b2b287a1caac2cb376d58a5a8f626c180a3c6f0e214320694f40b4e137d031205434604ea4134416d329459ba62e2a823f69fb76acd728b6d8e10cef31ef137159fcd922b661938c01a89d65157ffdefae8c64074198d085752078260289d987d633a69961a3ba2277a89fe8f7dabbaa576fcaa01dbefae3385e859af69d32ca224bbc11047afa006368b25337e32f64edce8ec1dfb989ad74f856bb04b0ff2b5ab60fc9f08dd24bc8b56720cce13b11756011b9deb7df95716e13d263a8af8e9e7963c5f194a1fb703cd5ac54eeed282556b2e433664f1ce847349c07f7b0561c831bb334ee92482af2ed3d82b8ded6d2f80b04f0dc3c5a0486a4ab0d6a897984c780530d877dd2ed69e943e01d9f6914499467192e03b4bec51e3c7004497348c89843e7c24834cebd155f74e76c76d0cb0bef877acd6360c6905503cc7fa60fbb96a180337cc3bb6a8f9ca85c00ce6d2db0e82744390885507adb53a66ef93df2a11b1051f7ee98e60733acb613bb6554a77395923ca5db41fb512bcac5916fba8edab06335cb5446cbc209dc8a76d84d97ca02b710e1d369fb88dfda8ff3c694466f8529a080a03789facc298f0648958fff1b1884fc5a44ead8436a871f24c003bcbad748d6b365876f7d21731f87eef44a61caa3f210d5e3b5c4671b51ea634ae366e365fca1ddb77099672c784d51312a4fab04067dcf9440b1b493fa2361a2c4f6e74bf6074606502ec57ff2cf0ca9381ae66034915412dd369b85021feff32ca2f3ee486e5711016c87855d9c6c84e78d9b67ad60e8cf2b2e1ad48bb61f5f93c5a476ddcee19cd101a61a1b9c7f8b7be317cbec6c208bfd7b5cbe44272a1c2b8fa1bfcd460e2b29132324caaed9957cf47209ba99ee9c16a0aaa4ca98b3bce33ebd61995b86159fd20238338e10b4f35463b69bf63db107c559890e2b469df40c41611b2b7afb00d08f7ea306b495fb8dda0803fab4b94d5b9afce2cccd961c2e5b985f6130c6bef9db11103c3581dc385931cef38333a4a2edfa786967597cbeedd6695af63536768df23734160c96bbb8a17a800445a2c19def2996c50a79c1fff98a1f29af015236deb2c332932f3524a1b48e6d37d4572e50f872f9640e0cd62a1c0ef9dc5bad1d47b13716b596dcef29e004d2e3858ea33f5f0a712241015f90d0baa1e3778b9dd186875a69250fd8c7b3911283cd42b712eff69b7b1e732c972cc3c1cee3b64732af1fa2eb997650cee452dab21d58802e67c2b8f102bdadf917bd4d263b319878e8ac129a6adf25b45c077407e6adbbe3ace49cfa91236b2b755193f982b6b575eac9908924cf4627c4ba85bd634ec58d12fc56237fd1cf3d4ca2d517845d211500750a009587c1abf807991e2ee9e2ec17e6919c0820cea3f20ebe0d7b55e11b3ed84221dd8674c9630b7632d9bf28e439e40e7d493b899c8991560cbd17e423afe9d8f20bfd416977f3781b466f46bd4ad3a4e3919fd49801986f42e62bdb4b5239f22d55abb4062f233f0e306ceca14bdeb817cf79a2e9c79852d09d89783696f508a7351f59449643ab6bb3e9698cee6cc6450055d2ba85d991a22c9c048a007103e306d604568c59a3de9c20ffe05606b2d80be5cdf487902c5804781447fdd8f8f88d1b792f1e439a640af32c1b85eae850f588203c753bdcbde58687ce74fb979453af4a1e6c41fd29221b822b312270bd7dd8fa102df3906fea3ccd76dd73ea618d7cdd1bcdd78f7e226ffc3a4f5e9794a875a41338def72cffcea6b706be33a8b158cf3891bcd71b5d82645b60083aba5268446578aee16ce0b346848fe7b4d79dda29477d0fb434831ee708c816f875e4051208af026e952e00b5433167d48628746b7709768719472b4dcd84c8bfeb93fec163a6520652f8258f1ad834ee305791f74ec7af6b4b294dc48cc9e617438697bb90038257a0afd3e014d7a6c2194d92ecfe9b644b88b6c5057e7e7dbbd4ba414e3adb0cf99d7a927966a05ba2f42a206bedbad5b334ba5c5aaa924f5362d958d80f6faa489aa27b94cf9a668d186c6406cb21bab200e0525d9a6f7aa870d999e2211f80b50b1d9d9dc611244bbb352026ee2de86254ab2eae489cebbf517a069d7e9b78f9768d3c02ae99bcfabe0ccce3aa2cc793155f10630585ae5508e950799773669a77cab14fb2992218198b7835bec6abae9bcb67af0b119acf7ea57d180a4ec201cab52aa27f002c066e203ab777592ee07b70f9d1d2c711880de72ff2d8afd423b1b8f7bb3f406431c69fe4a170b87d25f2db2366d9c47abc207dc7b94fe07634c0ed883766c1723a6a2f22427d1d1783be7b644aaaab7aa46c08ebb7d505f60ef79390b6fb4d509960bf72bd6e0ee230a08b69e7f7979353a74d2744e57fce512fddf2b6cfc655fe59e417f9f008042cadca9f6c3272915644ecaeb179556a6d08f34b4240ef2f077ae99ba6dff1222dba18e7b28750f8f7cbda5ca1553d358528c5b01a34f51f9bed3622b93e8e1d502136db992bda88dd0a8d81a35b6d874928d3fd1d84bcb740cdf473fb1266426ce7cbc68fc1ec303fadc00ef81b3ef39f644bd80e3847d3c7c40c0ffe04e91a08e7d6ee624b9c65b739a3981450357ebe16a25165ee78027310532d556660173cd2d01f661aa8808586fd52cc47a89a762e4b2a89e039cd828480c52262cb82129dc1141b4d5787c398a81dde44b02a5a150a148df27b2972798ec74b66172ad49c4145ab094a809540ff859903d94d368877b4ea6de7ba9366863fc5864bfbae4d47dded5a2ffc92b4d811462e0ae4b76ba8b69e47ae274c5743129223cabb7b33f8778b4b55d354f1215d9bf7dd0eb6ba5fa11d68e3253ff09efd4bad1763e6402166b54286111e7ba72abd628f59074d14770a3327ab7fb2bffc5d0204bd4446ef9ccecda2c645dac54bf16032642dd8b1cdb4893ff0e83883c1de26df50d5381e3c85fde40ae701d47dff4986ffe7869b55bf58e62235cc1b835d1054d6f7ad0f2dc3ab2bb46bab723ba6e78d67795ea08bef6ea53a23b57122d0a8e17238087fd63baaca6887d5f09521d00dc1f64b7d929af7f8aea3f75ed950684b849ffd36301da6ededfe644d4c3d1c4ddd411b0332921a1ed605575b25ea31f4625d0765edf46040f4ecda1b891c5e4ea53b7d7b6851edfc7b25d1c9f1939eac350df7e3a2b78facf075647aa57b58af1f1661f68f773540bd37efb5a0bbdf955a4ef39f40ca0306527b46d9983d064fa14ddffb5138ce427477c545937fa6d2087d084d956e872404c705491d47828f84004072ed9047815d5f2ffa2710aba53a2482899f2a85883bda21e810654b3993dc0fedf8c0605ee4d72b29ae0e2da11dabae3a17ef8975a91c9063e7aa9169fd55db22aa470aa9ec7d08a4c1fad40601ae3844b7f71a423ffba49927bf1aaadb260375a323065dca32babe21301f5647e2dcf4b68e0a4433a8b68417003544443cea97944ab88b41b7078e94eb9f6ea60cada7b9b80cd0906fba36a0623c20ef99bf51e24dfaf89647dfddc796f5a0651082782154020c987a01329f07647352a5a98ce1247d6cf934489ef5aa9f70b65eba360d4bc16e0b11b2442b1bfae7727c80bab687ac7c7bab89908caf9444696a6da35eb30d6d4c1a509ebfc4ca080901445a2bb1ac6158dc3289edf785142a41f40ee12d5444283949b866da1ee6ea751244b45d1265a5834c43a2596f74312f2c6d6215693d6c4d2835b21bd3a7863e665cc1ceb23d4fa3a6929f63d28305b0f4ab8f05dc371079ba936db13580246f491925508d432ec8117a49d615064671a20726043a5b1886d7d83be09ee357f1be194d62ca73784a43a76523ea2706f62d1ee9623300b2d3815c382c99a77e0cd9e18c0575f7a98255cb0689bde34c3d036b6a39a39ecefef12ef62e61c5de256191942b417f5785c38c898fc171485b5f7f7d9add935485a68ee3f20ed7014da7a1a09ac01dc1d541073415e951a7478d9b9bceb8ef7fc77b309f60c228a7af6c995e6650ba4ea902c0b5bb48456c6267fa743addd2051e847a2f9d82a797093575200586dacf23871a4e3155702df558f2a61a8c36492f33b53ee44a02decf5c47b12ef78f03794418ada81e87e01d5710d1aff305ee4040ef7baff2dbde2b3c4567fb73379e17ef444777e1dbb1b32e4946532fdaaf59fda514149e3faee264cd3e46aaebbcf941629b379fb544813437496fa622ddc51f96bf08a53c8d4b99843272b50a2f85aa749c6860b621294301344683d14d3de9c592fbce4328815ef62b5a1b9954dd496fc280ca9cfefb73745a27e57d5e62a1fdeaa6edbec42973e608776e4cadf03c8635fce4b68d1bdee33d1edefeb27b566de1dcdf929754c4c2acc70f37c6847db371085e6fbc7c0a1053b6ea78cda90453b7f92d06a53a3e2e04f16e57fb77b68cdc9284183bede8012fb64fc32c8d4b066023d3380369c6f2c57d38bb3fc5bd17112dd27c3b62999f6bc26755993825a57e712fffe63a4ba1667498e4db7df64b5d9d726b62627d6cc6d1f3a082f99cc4caac6bcf22649e2d8b18f9615e4373b4ebffb1444d0d6d3e6074138749db83f06d5101f562ee6fec3fbb6bd673a69f506e9bd88626b8f5beb305237d212abd665e7b87038783b54fbe08e0bfd53002cec1e5a4f2d5db514ac6179f8e730e480a8029777fc13481fda88c442c7c0e59882842bd8bed3efe52aa8d1d057f52a3b8a3497eec086f497c9440c7f43fcdd10f2b1485bd16e838d5f038a4adf90165e3d6f60614c1882967c257404778e56110d1b928927ace26f96a2b9a45c84245081cd65f0cd692d8b88ef0ce8bb2c4f145eb9ed25e873930081e34476f68d6ed66e26d3c55a38308ef26a359fa1752ffd9f06b1f12ef23caeffa81eeb4867e57e724171665338a5c8962eb0631a05dd3ec7590326dd3250f7db6774f5bcdd7e74688aa80c47a1848fdab820e10350f358c7d65a263f6e17711436d5618f1a55f7b9dd7a349989c8b4abe444767ff245aafae1b3b33a79e50ac64f3a237ec8e0265dd9fa5818bab6668ae4c6f99930aa37451849fc52cded5d96bf1027db92e03f4ed43ae5d49b8f044d7eff5bf55baef3f67dad39fbed1c2f6cdddf0bbc6b59cc58201d931d72b1756567e0eb16bf2cc34ee66219bc994297b250c9ae9a40ba74b6337f2950bb413840095efd35e87f2255cf4cbdd2990cf38e1f6fc55f1187983249574b3eb6042dff922ab293518de3d3256e51dfa8975acaea38af8f58fa6b93c86d7ca7667e1e2a76e080c23d38b0d72ce5cf01e4380751193d77c64c6397bcc55fa4c113bda4234c174b90e8b9aba4a058fad52c4648fd41f02de0e6fa3ae5905cbdf0599b144f5fe05c6e272b6639c2f2921f6474ddafa4a2b44d57760407dbc5f4405eedf486177c1052ec6ac96cb7c9e640f57485249be1ee199393295c7e6372b4f76e8dc3ebfa01bc91bafbd20ca482ec279ba565f5c29102e059ed89c4c8138331ce79a0fa6642492dde5238061bbb1c46fa5e70b937b2990982388e10440cf142b2b3918cc8370c164b1d5bf45a18dcbd6c801938767f64022cbd4469bb3a39c3f9e77925fc2a3ebee55f154ee3318d0bc30bb314ee280b55e7de84851602426ec45e18a8dd9f7824b4cab7fe1a67d61c56dc966ec44a9195d9adb4e5ffed1d3a38dd0467af963125a40da62dc39a30865bf233641183c1a5b35dae39e24acdc340403ba0c9cd21ad6f1743dbbd805eb90dd394a997eb187ee0a350ad1987b30b90cbe889978d390140ed244e2a701845b914218fc0b80d13c3c118b6d881648cbdbad219d3980fa4115a4bbeef4617e9d67ff3e231b06d0757be98c867e71e7f533a00287f0dec6bb64f2b120d3d2559586d7a674384a85a8d532b00d9bf016506337126156d8fa7c4da2fc1081b6e2d61928ec8643e3197e1db3c885ca224e38730f534b075da6b58cd653b96cdcce8949dedc5a4f2f90abdab24e774e2d502aa16aa6ff95f6a2e74d1bb4dc062bba0ab2e59b5e0d6dd1a5536ed4d41e8eba86f7f725549bf88472067ed6771d0378e2090fbb4d41ba047de0b263032e8680a38b8d7c63da70817a59b27f71a1a3427602d4b681b9dbe4516b7da741e345c9b43d1a8892d1295e800f1463adef8e06bb7649acfffbbea23176138f4867f58c80ddde41efc3cdc1fe23f7befb914229d0c814eb083021140f9313601d0dc6c0390dd50e2c4e073f16f86cfdc23088d1ad526ea2f72d9149b764d2852942a442d95d1c8710adc83cac3436ef72179681bf82b366b80792d837fe56648f4e7c9ef54022b9b921d8f84a257d4f0734ba7ab33ca02c9f3405f94bdc5c176c5264f65b54567f3a9cdfcedf4ea9e46f48e0f9c1e294edd600ab8109e8547e564241e3591e90c82cb247bd8ffe45928cab8a357835bf5b93663b456da3778c3cc83255a41fb4e16c31a2916059d56025fb3dbf4d812f453c71f77d511e2cb5391e16855e1863caa00b20f4e0ee7afd83f7a495ad495f490994adc217a174684a073252162441db33d5c4b4a9d303c59057a3b716e40c42df7cbca757b4d5ba8aea0f61ba306627dffd56264263b736c0a269883cf2b99caa971fc5a7ff3de2430d71b02d745764e5adfb37c2eb5caa43ce7a7c8ee2ed684eaaf93152f1e2b9836c958b098dc5c6d1ac7bd010f1b4462f699cf0cb5041e7ec71d1ee36b07bff06895f8eb803f89798ddf78bafbd623feac015b8156192e5728f6578cc7fbf924ae8b98d7fadd26a7718a949f4586beaa6749341e86c14127d3e1d0cee41f8776f1d2c8f783daff1efb281437c61582718205ee8b311f8ed39c3f6c2cbaabce2fe6745326883145be1365b1a5f0c1d5e1e92d35a3516f6354813ab30164b31e3c0fe311ea41cab71dffb791a2e04202229e40d9f7efa9c804585dd6b52e7694de79281fd48ffdb1e2bc6048829bce73a7c536e65b8bb52eb49e7b0cde50cd5117ff561cbda39e7f77c13c07f6b057a270bed7971bd99082ae073492c3f1bb626e0cc80b03d4fe435995f3fc71336f74d459b39c63b519f730723ca210e472ac21916cc93d11502f9172bc69875a971d6bfe2713e4db1e4890409f79a398f55a0f0060600348dc5301e772cd517866b6be75e0b9ffadb2e4b9e45f9db9a6db06f11febb0b6900e9b1b0aa8f12b0543d8af8480b4938cbe8a0543fe332c4354bd9c6225c4699afd445a307b947ea03a077247c57f9aedd312a2b810ac30e172af155f940cb58720adff85e7a20cf7f664f18a9af1c4d3dc0c5309f9c3380f5886a3e6b283dd879d4aae2b9294395119634b4af5d6c918f2083d1be2690d8b84cbe2fda83c84090241700cbb7deed0b37df37e1b518610c60d59f211481a4f8aad2ab2516100300a884459e4a59b73619c8561d72c51ae9813d855de8ba6e8466aeefbc2c7f49dbcf90a5755cc28cca435bd2c4a9a34823c1968f75bbbb9306bfbe9d3bbaef807badf7d975f41893f1d8e9dd0c7f916001038e39cb8a9ec40c61a244a17f8f99ae8d79c27fb5e95ba454eac1fbb9f90ae0817a0b1ee097a2a8453e8ebcb8013e747a5b5bf84fce5111707df8d03ae81341d57f436c31f9c0613751bbe21825797898af9399184074e489671ecc9cf0ed2130ce05b439d529bb58cb8742a59db22d1ea16d5424f3e5fc20abe87d6dc1dae64c1c92f403134b720173d920c03a06816bc73d345ad07722c101dd8746973b9ec56d3f9e57c0d537cd4df918525afb9c8379efd81f918f6fd83bee6b15ef73e78f4c52395275a20036c5bc65e0f9e13c43e3ff2bad9f7eb153521cb0a95c960d2346804d1d8c156cc11a3441d2c66c3267e2e217794b82679fe5a6a30de0c6b328fbbc1716aaac52559447955da31cd0bab8b4e3bf29f653b4220d60ea046646e63d94039b4ecfdf999a197dcb50ef338e3cef18c58cf629b9735ef803454e19fef2b9d7cf3507ba301d605d3d1f385e82cdd7682fa653bd7d5598805aaf722edecbf6c5635914a3a28523e5e372a0c1bc3339ff2ad38242cab32aa07bd52192086df3751745f16e6b1a2ada67a188aa56ec853e758aa7643f03bdcb9884ec60e6eac3f08a53e1097eba2cee501831f835d13de7a67020a8920a3980ce7d9ff883d359df974f036526efe6b4e98acff87379cf5fb162d97e70a29b029bbcc4c896fab0ebacc5cc775ee499cdaabc1639fb0205cd0a9a1264e71201b266162f8480604d3dda412ae634ea2f95e88c58b65d61896989a8cd71e86fe0303208b135e2cb64715d31a388387f2c94af91858cae0ca628fa2d5626eb56d4014defdd514a3d9c9e48a5472edf39523b51c6f551512279c29e9dbd7cef82cfa35203b62d77e3ee522f5829e64574762b73d7109000de7114e176fe7ecd02a49500b76a9b6e6ed49d73fd08ace42f38d9ad46aecf4b9411b8a4ef28c75dba69c6b4d7a9f0113517ae4ba9c22a478c7146ecb06b0687c0b2e85cbba6fba80ec1f69cd7fc4b3e2a959826a678771b6404a3d0ea42c021166af8589d85241464528fe9c1817e25dff8becf4aa40a6ed9c6e0bcd3871b2df2fed2f2de445fa9df79b3fa6f9642f4542aa8cbd407b997f3c337a7676f339420d8a4d9523b066e34eab6302a348d96437d5b31d4954cb652ff919739b0a5c18f1e56a6cd98a1e84ddce8bceda2e32032316a84b327eb88886a6865bb346ed0654135c4e25575638e854f7841c97e5f182ee7c1bd029fd3e58216d2b5870236ccfd4f8d019c8b0f075c423ebac183b4d81daa660f2719a8bf22eaa35b2fdd9b9750a49cec5d3e7758bd45ad0ac04438f7ca8939dfd9334de99c49587e17d013861534df810b2128d1deee9fdd7ce0b6346a8b2546446aa888b9a233d26e9e04b91a6ec48822cf23511c73180a55e6a7d27163c3062358dbdf8918c4be3525cfee737880376980b90037d571ea4b56aee82c0cab12949e0569af15dcedffd8b85e0f149ca48d724897a2aa1a551f6eb7dec4b6d2c371178714df4e68568103e832d5188999b4cf1514c1b2941bdeef950a46e9a00979bf0ddb6d709d7dfc47e3917958a7866e3bc0d934c77359680983c01e1052ba679efce604e76345ceb057fd53261de281d05d9607d6e54ec20cc7049564d6f6ea9c2f2025ee48c1dc3dc4b3bfa873337c771036d07b856f9db17a816201cba2c7c6e52dab1e756350429d46f6c5f3fe2a1f84c6b5b1f565dcc868a231ee7e26ad4de59e7369750eb2dea038733271e502007205117bc88f7e7a98d2f2f9baa290f93ad3f8cf3a0e176aada03ad311f11fd6debc46eec0d5b3762244b41d2822605a78952938bbe9c47d3ed44ae42dd2cf5336a2dd86b0b5fa66f0ec42c228ea00c75ea6151a17ade28048e218cdf911088463c06b185a5d316f0ab0874dd931db43ea4fa7179653418e26d2c51c5c6d5b3a05749701077da9948db6d127bc5e3f45372b49c9c057b9317aa008f5bbefe42f8eef4e0275154e493d9cb5e5153a2c64a38299762f590c2545a09764ed5bdd81169682e23ac203eb26a34576473093dceb5bfe3701fe86a5a2b894e0cd1931fe673c55844826259664a10e5678c8015b5488efe55e76bb2d91d827a9373969f5eeaac62b7b76b98ef6410ee9a63144b3c38419055d85f32bfca181ff088b49cb419fe1300654b23e1e7be0d8135c5f05c1ab228bf61ceb71306caafa01aa352fab71c681b2f4a68f0aa2d2bb83dd1479f1ad1e9909bcc87bad33ae9b0998f0af3bf845c90e235bb4bc6ff3685f4ff83a481d2d0ca84f3143edca0f28a94555143507130be8ccf4d5470644ec596e4701ae76be753d4323c4b25fa4268c7141a845d4e692a8952a15220102d8b0377b8ff304919af643ee4d9b3245bb9f402f5c62384c1a31ef8fb4abf0edbdbbaf2febe9c84912823313e0454872ddab257735ca8c2fcfab79f693f7846069bcdc71c356abc2a84222b25886defa0b095a96bb3dd558e243413b1281b863695563c0db230cf1711b7f4ca6ca2e033789eabd6b1a91e964d04aa9a24aaf55a352b481d3304f07c268b3f4447e2b5665dc514a01407a77785ab29f54b3d386379e2eb1809197eb36b10b1d50cba3c9eabe45de5e8a3ce95227c60e31ed5d0bb43033c84b2da11c8fe66efece9cfb12590d308bfdf13655137054ffcc075b1e3abf27b4cc61dd7753078eb3b733f83e4beeb47e38f83955501631011cce52d1716abbcf1d0989d3a9675f12b537b7e5f84f42f355c371eee75ea4be32220088e5772770b3cea3db38b9d4825a9bc8aa6a3536e8a40cd106a78c10b3cd7877702cf4f17ba37031f402ee5dc9d72c3081a81c6f82222222a97cc6c7714304e893a791c9a94380f1dafcd443c0c5af8a128b9b814abcaa027337d0f2a717263956607e5ef8f60fac1529fac4798b390b18422d97e3b51d18fefb04e347a07e3a4a4e1109f7b893740cd155be564c87f16d748e5a39db1e9f1a460bfd9fe75c3b72ceb4b02de07c35b3cd9453a0b274e6a3c2e7652138bdfeed723bc62485176c0682d81c5878e1ef3677a567dd959770298d1d295dcfd71e40937bfe482a7ca391f83019bc7c2bdca0e9f9b4135ce49689c998c45e9e33c37216caeb45cd44cde45a1e0b1b63d6d03271c75f8a28f42f1836dc8d139e5827d09bb1c7e333cc78af5adc993b43e65faea8d63f25bb6c2ffcb869901c94cd8a8a6c88e4530dd2ee8d1db8a285f1f1f759ff211b8f2c2e30e904499b266fefd24912b8fff1615982839035d88d14e07907ac9242d2375942443dd0f1850edd6d3e7ca0872784d0cdc4dca9e6566459df9d964ad5c46a8cc2967421829d259a1b931bafb381fa936e1c720e5c55f8dee31fd6c0b7b9b0526864e65a957eb5b871e8eb5697c03c7aa8fa99c99c4cc2cd6499d529593d7135f84e2a63bd7557f8dcaf4191da478b05790c64ef3c9fcab859d41415fb84a84131231ebaee367698076f8564a8da20137a1b3cb8456ace5d1163593a6adefa68ef63703b825348c70b15cd3ffe0a6225a0209880c90b029e1a0b4ebee9757b96b567b17b144863ed86fa339429b3b280a1b4a3ed3dae2ecc469ba04b2f939a9a5e3f7d3c09e2ed3a47f206615cde48fbb390a380eee0ff2aa1f24a1ceb85415a8c175f24e2cbe1d5742606d8aace0a3d220868de8ad6ecab3ec9bfc99ae2967b3c8a6338c1e8c80d6a09ea82c0b364734057922ea18fb3a5094a3fd4d8b0436e76aec47e29a5b299ad8765c60be4fd94f0c863590dbdb4fba7270e22876d2408154ad9c4db504bfb62e86342c3defc488160c328ca4b4f0b006239e2004a708a349b1c68fd629ea2551276a0544f48668f36a3d372a5e3da02c1bc96c1cae52fd42482897f7391b08196e1ec9f07f6303e1b7964b6fbae1016dc53533ead71f6159aae2c9d75a1aaa62b4df5aee73d9c26435a9fa737ea3ebc77deedd62d93888faa919f865d9783b4b5d9724aed34b3a3f254c38a136613b724bb34153c4650cda9150d2f17db2f6ac47572f9a384b29191c0fb770be399691dd948d3d414fd85f8ed8f54a0f8373ec71ed695f73906ba2d008df927bedc69305fb0bd830f8dacaa2f4604a10f1781309c18f444dfda26695c6dede298d5ed165f0d5b73413053cac8212c471644e5565b183b1f27bdc4cdae66c6ee5ba17056f24119dff70e7a8b7234da3224d90468771c36d6b77150612d6fd4beba5648254ce661e0f81bb130d9555cf70e784027db448c4dfb6f62841b5faec5436e00907d4a767590677028375d02e9492a84d7743e398f522ecbf80115bfef8da104579d2d3502f3d657656e9927baafc553ba65dddfc8ffa9a037c7fbf844363c7d02c1ac4ef9dda80805f25dd955891f675ee42652ac6636f148034875a50409001fce9856ed02b6637005868b21e05213caa490bb8312a957016505f59c37400544eb9ff1f372a07ee8c9d1023c80effb9ac87a5136c3240b670465dddab43f3319a56bc4b6d0c6fe2b78e3460174733de5c4c5dbaf560bec26cf6c1c57e3c9181cb3d3d87d5db7a89cd498fd941c4b59ea8073157e5e6f9a40a38a8270ac3cfad17ec6d27c0781648c4b8bdbb4b7199fef6a22260c18090f275d301eccf3f39725ef7024456564c32f997e8e37aeb0865de15197e9b80896fb6ccc09dadd8341ffaf5fbe1f8bca822a80aa551a6cd9c9bac074b5af76e04c3825c1c99213b9c6866f8892ff6996d47e34abca159e012ecd0e7cc3465075ed6467b52232f1127cffe02766a9961eb280b8a0ab6eff4590572b8e33a1263339e6bdc008408b1c76f19af0d656c2e84949e4f8c5f39c75b4727d9a904fc7b09592d18b0e6600a1872a43b95a4a5cb9fa08bdb831896c2ca635e7be0b91e4bf9433f0ad2fb6a665e0d6a3b27b047f3bfadbdfe4df3f4802ac5093a8fe50d2688d1ada300738f322704b11a16d8c4a1dd425dee15d3db470b9503419f97e8dbee4dd38a3c0e1c7dcb221da8829e118eda67fe2dc415151dc2056a0844b7d77ec6d6a7150df2c49b8eb0e54f738bf4a6ba4658998e6755c8f388eb1eadd97dfab1421df25a0fc9b08de958b771ad07bf0234cb0f7c1d3761ef97bd1df2d09871b858049c871268791a61b2cb906afbae088d0c555671dcd447c6675e5adf8bd355329d72171c02645f4d63e28c2f53ca29d526a3ebb036c25ab66a1e0b5ffafb1dd807b335bdce38ceaa77e477dcd9babdea36a85b20a6a2f0a707ea8e7680e9fbed280f68bf0019adefb06c4c3b85f05dfe21397fafb2160a631c540ef5ef39e4fea60a3c520967d679050c4c8c2be9f6ca0131080a045b962d8163c144eac823f59f25dfe42afa036c008dbee30ee983b663a97e4e4a437968fb7c3259278577beb4a111df0539433c88144442cf99ca6edb90e177ed19d69ab784e390a6a7a6841c7e98203ea6ee4593f01029f73c3af71885269afb0975c6f92eba401dc364ed7bfd9a7e26aa058a14c569ddf5ff87499047a2369af147380628efdcf82d3aa94ffe21c84de488d4e33d2d53f458becd9607e198a0050c62694901738c98edc863f372e88dbb7eeb1c6ee8814ca4f41e4ba789dfcaf98345da5f75056006c7bd01ebcbdeaa27bab99e7af03a438c2de0e4bc3cb73fda137d2d5aa9adcc81b2882ec79b78067fbf7df6a9dae491a3f6dc9df418f353ba68aea3d32c7c9fc21b4add19b7939d218aff82dc9c384bedfdb66e8dde7d5b8f574c0acd1e6c301d414898b30b12725b9f7a5c4cae4bc80c4153c819f9dbd1c19668500d0385b8dafa0f8f000f36583925e4059782d0b49a8156c780fc32cddb5ec84878caa99e13ff1728e3c50984318bb299c7f6a217c56b50800dfa289dba386e391121a0e031d9705eb3561846b829945b030778a3d7b4d51239f77a4ad4f5b08f352836738c39e6ffb6a8cee592fa1ea3b9973fe3175896f3d79648662db36a686d931950002057508bb189eb359122e84cceffb4542f04585aa284dda88f15f205f54869249c91d39d44ac8913d7bbf3549589efdbe9151a04d5fe5b82a5fce08ed63ebf935c17b954b5c17c5b4e0a64e331e6dd0d5a6c665e37cd8143bff8a5b2b684cc4cca4a9cea0cf1d95d023ce87269c8083aecc38edbb6c28ddd2ad50387e17675ab9b5350c32365de2a2bc12517da8a83267f73350229f74219782ac19aeb58e5cac51820d65f85cde26d8442209ab6bc0d31f50f03e35656a7a8c91750380557dadcbfd98ac3e8804dd40abe34e7b196397093fafce5f0f5a00d5dac4e8c6f39e00cab37cb6be3199076c691dd304949d3c81abf3cd723e7d53f36d4f4883f1e82dd0e927515a517b823f8e09162fce4fff65ce13ef8330ee3246283fa76df1a4298257fb7d2393de6a7b5feae485688534729fb27fdcdd08fd597ea5907640e611f814b52f967b75f6f82c41d706d99f98f38bd9051ef200fe899c8a562efa2cffe7e356480fe761f4fc1f33a0079fa0d8c0ec588b095e9ea8052e943c9baed3816cab3f4dd3e8b6deebd279651c9e68f8427d8a54540066389cd84869de64c7eb86a8aa372bf5db9e41776af4d98837832cec95ab90ddbb39219f773d948d8cf9ee701ca6ee7183751446de8324a4379a428e3a4a6ec1645156508552949d22ba6d5959100ff141dae98e871ffa7e20c42cdeff6ce809b2fa8792b84986da0b8f4e933394c67fd7865ff82aefeafff845ea9d95878748743af9a77a2f9244e00d37d84ee3e270dfceda29fa8bbbfd9cacfadbaf2a259032f9baefec6947151c978b3db4ae97153c4135f4f51bad9eeab0ff6c8d8e64f96b1af5c58ca11ff2d553faa23970be87cf3b0725666b3c432005273042c16dcdbf59011cdcedb6c5584784e42009ca0c02f5a83c4c8b98149d1a625869bcf0a1c5cbcb1d304a0b31bf1a6d52839ecb7757541b33ee8eb6fb3ed0d51977ad06a7c5607d519e874e96b7e284b4b258f86318b058bd64cee1102ab3fddc70fbb80e29693d06480624691d909c714908cf5f563a7c52f41fe61142ee08b8e80cc218e77de9839adc63d1b5e73df3b409781a25fc8c65332c5b09b60ec919b6d2fe70e106d9b6b8a84211c0a0c8d2d27eec991529924c98f262c544929069e8b41d417bdb580f6376e5d02cb2901c9e6ca728e351e9292ee6190c38c9045af3c9ad63a22e10e4e656e254b6a7e23f1d00996d93d60d5bb4ac0da5fdf15f559f1a9fb34497bc231668848d2eff2fee43767c4f9053ef28c647455b80056ba0cb2734917f4bac09cb9915b0380695378aba6b9b6160dd4cef2914753f3bb5c6879cbfc59a2bcc6c70fab47f6351c9aea4f5789ac7db74cbab7de203efc9170772f3edfdd0431697960b4d08bd05fad3ab6d46ea803ad8aa8764a495262ecc28aa290f1f08bb33e11540017bef916d577acc1205f3752f041bff3fa1a2247301af8e0853149ec2fc850a272058c3575b61931a28d2159f3931ca229c0b1988d063d0ff2ca5060d97264ffe9793c7684b02341bbf4cca247ce14d071c993a4800f0e4dada258f34a8ac72dd89bf947102ff68575049eb457d28a6bce138dad11e2803d7d6ebece443e7f7a2c6997c030a8a67ded359d48d319e66dd1022fb0d49e0c7cb0731659726d734f7f796041a9c1d93a7993aecb79656fef78de0b34ed72e654d63caabcdbb8ba553cd04c057f11f46924ded52bdcf0dc89bfc9edbe4f6b44f14b02d87144531840020b52e54bd3602a70e8337eef4ea9d85b94796c67c30968a0b877e3cfd5489b68cab3580f9425191640d89a8ad9f4908f7f7d857a07af7386b999ae47c315741b81dd30b8317193797ef63c4fc8bc77775bbc392a2304b92f085e4787f0141636ce879c561e646235f14d68d7a298501e0b32692d568687e798c9c11061388bfd5bef8c744dbc745caf6890108bd4f1d5b7ecc22adfb1718a4db75011bc20c4e277c5823fd732b3cc73885dcd7fb9be8e619d62f4dc71c909aec6eb0991f0d7ba8a0b9b81d704702ed8916df57cfb52d06411feb3c766094ae89307f20e5996044af47951568d410abbebc87c7a8de9027a29db2dd90948379e2e430cd781a26d69cc32a1d2d076139079b7cdecfe69482674723547a940545884505b0e0b9393da37e50c28a45da9f761b866423d64b2932a3961d92b846f5526681bc3c53d0c304e574a956c2ee47233d8e433865700cec7428269a7cd79562c0d14d675880bd81014a1c27c23a0baf23ef4abfe5870ecbc88ea0ce0de128730bc5d170a414afa32b7f68666c438f3a67e41a85d22606985d0c54f336cf24d1844d43e68284ae2553cc6dd31827394b8f289140ddccdc5f4961a35551f5d996280579920e11245e6c535f9d960f92462965f0d4d8380e9baf69f6a63fc257a0d54b13f49df9f0bef35866cf5bf5da6e8527729fb5cfec9a520987e2c43fa68c86f5cbb48b15d90d3908e5ab57d301c10a597d3da0511bc9f853c4a627b6117a07609b667a752265ff9be9c6c79cbfaf20e647050394fa58ba0785c7159824b7f45bfd5e879777614af2553964a98263f257cea76c7775a5bd97741c0ebdda18ba7c4ed58bf1d23e8ab80406bacd71bf6459e14215c6ce0ce6ce4164f257ac596969820463e9e2697d2451e923d2621cf4150dd09c4dfcdaa88ac3c5f334a5081fb907ca88c3545b80bd4a6e4f91a7ebc304f5b74acb0662e1de51c96ed90f61731ce40f5f40586ad6eb52ed7cacf4f6839926c86b63d523334e6491c6e8a6ccf21d696cf6199109b372045bbc9d8a4813e66943df0d83ed5a466dae905f86387a53a69589db967088e7db0d3de12817219e0d4d0daafb18973602db432bef511fb143cafeb3ccbe925ddc92c63551ce2e6c65db07cf43ed565f81891cc1ea49e061a2418ffa44024b742bb33904b06445f4ee502767eafa39d397153ecc72594765e965ada938a6b6e4c550bfdf56dc74677292939ce1cbec1b3723900b62aeca5b020166357b49faa9d9b7f728b46d2d512470d7b14f4da9409f2d4d2927b752bab8d9fd2617fd5afa36707b025529bb0030e32fe089b131897b883bc1fd4af084edf60a4d08db33cd20a7270f3ea5a1c53886fd1910d4708d17da5213554e05af41bff57bd96e55e9968924ff458f72ecd65e9cec4fb111bc830a8451f40d407cd459d138f16ac6c2aea2ba9cc0d748fe35af56652fb400e2cdee813772f2c083a0e5ddd0a161b6ce37b67acee37a6bbd2dd8f9468981b1900f3436cfc2f24d8b556a9ac1c8ff1bcc4dff80b549555e133474246438e14d4ea7660558a5fc037cdd1208576574ce8e20f50c2f338289df29523cd49ed8dbafa5ba8ed8a13cfc4f3f0908f4f1c0496d8ca9f860f912af21fbc272b40d853c06dcac57c63c9bfc2707bfeff270665881bf5430bb89f488ebb63d11b42d5f695feb3b30d837ebfe91ccd7da02df4d4d9d7d391ce192882a0c53df1426b9690061847661dca581692411585945459052c673ca00f0f7fed034ac3d205289f13f26a5173140aa1591bb14181ad7778ae2d22513abe62ec2c3d85695de236d35ea4dbc84b6366db6fccfe64f5d45fc30a84e2866ba180e223d2cdba46fb7cf6e1b7c79e0df9a9f43d2af5b85ae309688a6017ca585f8fcd766333febd22f13a21f8888f0d936d6b333fcde937a2c7e3d55d03c4ea44e0a4e7d2a43634ed954eadd1dc353a63df9efc3764e0df726c51093b092ead4aafbe5b39185e18ddce9fabc137f5f9fab3b6081660c15a46dd0ee2d8b1f2cbc2f8a30f31d56ef5b4a6fda72310c11c752ec8c9368b6c523df54a9da47b920f1f7c977d7a778bc2125cd8afbaf9550ff7c466bb666e54b8882b8157e92dda70130f71588602f1c035c1072ef3711e5a4d5d86d7c424ab6f743f8b89ce8f63bc0432a7ebe7b8e247ade2767ad5875acfa2dbc9d1b9781580ef98c5682aa8b1dd72f980bbf9438779a247c838a1e10bbdb4bea8c3d41758afd9730f116ddc90e1af66df7222b86cc9e3f70317b703c78b7f288b61769c92b09c1a0b3a57aa650510c99fc87606043f68d952b25fb3eb5671fdb46f1865f8bb388fbcbb0d449c90c6dd70248dfb634cc17719fb2012455d6ab15d76187e895accb3b74f4bbf4f44da3931daf958511755bc56ddba6481de90394de717f465ef06da2d667ca4838d012add92c92ad0387903acdb58dea206b2669df759822ca8988c14c7f65f89a1caa85751600907559f72f8ca55e4251062f7d9eb836d6120edc9e0379dadc4bd066b8634ff4adb55729251a36b9f7885a66d2f2849d8bceb2b55827553f3e04a0b38c83d908bc37dfa49d8fea5975e617458cd7b302c678680dea83b2f1d9a1d1ddd37579931a45aceacae1039f2e8ac9a587384a8cf663f36bfc02cf5b7e7095ebe67ef9acdda0db7d7d83bba7b4a73210dcfc9a06d6541b5e217f39731fbabea22fe8085ec63a49e507bde6239ccd7587574779cf69e02a285351e7320e4a15b20598d73361e666ec1fed2398758ddb282102fc4efaa512cc191782b88381bb519edfc34dfb71b536221d5eae1eb88f6e3a5125d4801143fef7d7e4fc74e6dcfeae779026854b8e12a4ee5f5d00fde34f264ff0401fd44c4b22b18652e0847165de2edede5a9b968b8b9f5f60c25a9542c0715fb334f68def17a9485e58b3196f7e8b0d84aaad0d5e664825aa0f1cb660065f1b003293f63da74427e3f643a6d24fc46ce0094e1dd5e02e21d3f0176a37b7003b426e8534c1ae40ac65ac5532c25f81d4435684c65339597949cb65613235273659507f2a09461b65ad6567e05afbc204ce4dc463087f68854ef2c3e9e52e2ba06506fe700339610492e04798e7797cf7b98e934dd05e5267df7d4255bd312cd14550f0d4e6f520f7eb79f152afb9bd0e4a7e15057a571905e060dd9e695b8f2998dda648450dcf6264ccb9a8b690425041b45ab9fc5158faa88b5b47939ef358e3d797719b8c20f2bab4d5b9e7ef97980cc2040c54758df25a4611b108ce6fd50ef5531b3769c056030a9d1d3368dbeec2ed6b0e8cca580aa3a30b1b9dabd46d39e661ab8d40fa8afbcb2a756958b1479431581097b48ff6bb632b2420a26dda3141008550614142469b6aeb5dbdc3da1b40b1b02c01d4a3a04ab3947bb4c676d89f513b3e33983bd1a220e6db755a944255b3c969b693d06056f5a67ea46e9020250c8a0eda50faee43c8929a0f83520ff06b47e7382565df7539fe7ede209477a2f8f4ade870cf2dc692d2e7e01df2bbf52b7f8a87470bc2e9f50610202905b13e5404e4dd4f07d7c173cda33f1c99eef107944256a9763f0dac073bce24a50a7b8c59fb14a14a3c7879babacbab8bb9b57279fc77051943292b8070f0e94575030580c4cf89a38261125b6cb94524e23888ea7b8b1d16f1a53a6103367ff69d82d4f88888ac5388ecef59785d2bf2d943431a9108c14996b60cdb8422d6fd2844ac612b41a179c13419d5732688831b757f3b2d213b6b37c2ca8e6bf8ecdbd340ce506d37c508897282f10af1f292273a64b2312cbf5b23990053d3f2d5d50c6b53b7ce772b9b931ae2406d8c1451019284029755bd5603048f7962e4b4f2e43e1a3cc5b6798208eb6fed184a48553b1b8b16d32974775ae9290141c400f8c8c2b19a33f3663b54ba5b8020aaa9ae76c6ff4769a004a869d97e818cc3f30985d7855fdc07ca31c49e2d6cf1d8ef1ba316fd209cb91384c0210eb671ee3e0a6da9d0ee217404deab6aa838c6326e2c055a6f3db469d32383e5f39425f4b926d69fb47c57274ec893084db3ccf692ce4e008c4461f1ec1587532b6e5d5764c855887ddb8179d3f8c7da4b3166350d70b483a3c68c824af40760355214e71c99b20c05d08c1271b177e2dcbe346694a4335f63054b8c6e4c657978819acd3301c77b376a9f65f6e65c90485a8d928951580d6d38a5d7f454146f86f1e953f76996b1dd87c3b36f98e3a6b622bf89035c669cb94aa71774a9cf1dda3c23819fb828047e5d21e6a53cbb9e91ae4883ad3a838b9ebc2d6a5f1795dbad4c7aaba27234bfe1d52b40c9076731abc743a96ae8af5a4706753f288a4bb9f331ad7886035ade96815d4e900ccaf5e0154e2b86e45b74fbef105c92854e4077091a093de969614db46be3f0dd5c096b8294747955ca1623b9af435b8d0a9c98b2c78d94bea2ed1eeef79f1de157eeb13cfaf51509d21f79d88eb0831ba1bce431dbff2a3cf71983cdcc72512938df56e23cb171890ec71a4457851be559035c802297c52e8ac915ffe89134af8c56c70860031a0dc30b6a3a99c2127cd789f04eec8a306101435ef481c6b52654ab2d8bfe69481cb504343bb068569e52359d80d1755719ceae15140abe4eedf6e0bf37bc3721b1c683feaf2437e5aee9018a2f5f61a935e8b71a409ee4d2d14cb3883b225a10bd2f000591be3ec995f4fa0c75ae46a1e5c4d3a9aac975c96b388e9d3bedb368b5bb922d8634b71cb0328e2e964b3b1c040b953ab99fb6e364d428c4b8da6f6d21733d36e266b53b91931d81759088a9794f40925ead08fa57d9dfda3d87b87ffea157e9152232335149fdb2ee7689815e0317b7e08f7ceb431fc7ca22ebb28c7f2ed58848a26c90c4b3f24cd6906b05cc70b6b47abdb01b4a2b0f13cd0a576fe327035fba86df28c7959b80fba6d600efdce010962e9f5dcb6e72a62edd03cbe405b96b87327d89c0ed45fc11c652e146b302716e13ca43f0eecc24a7ef89c79f6b27cba9e8d265f154750cabcb4de32fddcdd03d6fd9d2911fcc219f2cfe0c4bfe4cb9feb56b74a1a7ada54eb95be2b2baa523813798065c7f3060afd3adf10c70ae34d5822b45909046482845285470186cc0633d0b26e10377e81dd4b7c0091f53788c90fafe65bb869c0376ee2eef47310487ce610577904d861cf7b7fb9910535107d7294c277304bbaa223806503ace9e463b3a11d9d340d48a7031520eaa7569d102aaded42c8b0110952f652624033a7c6da650f20a802facb300d27a9776acc58f1560312e7a168ee00b4b5a9aa7c8a01a0ad7d98f980546c02fd17f332ea653f730b80421c552c039d62e5cbf14083dd394e3e1aea9b2539571035eb35261bbc2af7d98f85227cf74f190da841e22f576632231369bfb34ece311986e7a2956fdfa46f7571f4b7adea2d41a47aa6e184ded18282ef369198c8eb2f5891b19126e2e206483ee22ab6b3ac1fccba1e9ebf018f28e3b2edde3d0c52ff9678267558b3cb75818a221f47449d093e90b424e4632d085c0b0c90960c37379d24107e7edc73a4494ed6547b737621b4a55be2d7959c22f09c27dbb2cedacc81d285a9ab942eb75b8b6a6ac82287c94803989fa364538695523c227a08f9aee393cd3180184bf6a3eeea3c0a0258bb14397c657e13fe5e02cfcf7b062eb76fde51b5bb5927315db71cac6cc60e24a364117f33d16b65b0b90c8929f0c353aa3c0bd0f2ebb19f74810cf8acb78e83e5626d2966fd142d4547f9e09dac4bd0cd0640be4f9ec9858f57a904ce6b68f044760aa35acd5faefaa14b1a831b4b245d4f3f8eba4145108a0c231a1460714933ef212780bc6d55ffccc60e94a4cab805f709d15dd11528e905d4d80f564960a7957629b471f6e65e07dc394af102bd3e8336241e7dc5f6d1d7d3c8c21266d446cdaead6243ed65d8302881ee4291c3e1976ea582d44d5db0cbceb9ffdeb24572d91b1a2e95bfd89926a6c97522333c07091286f464a404de12d6be22cea9b4dd9fb8a0787ed6aa8bf0c73418e26c3dfd855b069157651a4ea037d7be1910437d58986b29597ca27d0e672521947dee29404de9944d1440884c81d56534b423c2032e38017720eab9acddf8d2f478502c5a8bba5908417bf76aed3c14d395979a0df677d01c19379414d430c4c4a06626387c026111555116fddf998328197e616e47433df4ff87eaf571bddd1eba763f92a43dedf11777f3629b4a63e1d21a002ec5229a288b8910e9d98e4ea0050f1da4a8d39032feeda6fc4a1783ca4e6acbb1d8afbef940d1fb184713eca83868235e8aa939ef78c2839117e0a203f1079e0b282de09ece18b9087cb9398df4fb095b4c833f98eb9e263b66ddc3ef0ea33e53964093deee972875a4f478228df50e5294d1e71d37e8e7ba06180ac63b3a20c0cfdb8a02bae6c4d5fb56b5c3691ec83dac70fcd4974442214b8077f2f0b5e973b120a57f25417d0bc163d6d89a3628f6461acf7480b6be8fa2160158c02d3e3332393e183e4611b918c045b4d87866e745606859c12a3c7aba5eb5152a4d3474d3208f5abe0354ecf79ee8072badf09c10a70de240ef5bd6e3de9f7a5d7bc415143ab2b086bfa2cb9c52b11033f064bb29d740682587c03a5402b789529891068e72f5cfde131dab8e7893b1629414728ca5b669e4fb77795c8ea936bc4952b40497eafa0b95696d5a8f49409fd4a43f9a61b5c530fe2f6a1a08ec27f7fd382971ebf05f3dc3744df843103a21264760dbf3cef6392d9eb1e095d898d264c7ef49a968e2c32aa0b0ff5d06e7c3e6d9fd969f7e3119b9e6e10d4acfa616a7e9666941dc8893a480e540d5b093082c17892428eda5366bc60ec5a73283836be2140f7da88c0dd2c959beaa1cdca544fa34e4ba55bdbab0a0c901502f873710159f66d7bd6c79d202852ab6ed8205fa96343df1a25682eec3f1a60579fa509e8ca4705555b9df8e6f0411ff94777f7ea6d90c8863f593a5b1d22a208163960abfcd3be3d25575b2f86a067d06697a320a7891fd1e0e74e28c576999e2e45f54c0eec0e174507a5013388c783899bcef6ffd653df28191837aad43e7c767a7b07418379d3f9e3938b8397733a0442e50808200993bacb8d57990e916b071aedc5bc46746386edbd768b3100a6ba3c29714884fbe925b0e9f99e3dd45f426c9682fc50b22bf67e4710a27990d14d966a1beb92c36412b46ff4b35e9e7554c4d1c17038bf6b59233e4f913752f96e45b1737eb4c51b3f8535682a1ce36ca6b2a0bd8ebec971bc1075989db58e218b2962a215af25cea3d2fc2041677d68c7bf3012347e35a7260945ce307ebb0245ef001245535fe9001730e4f3ad3a44808854ee1c0033af2161dfd7d3e45fcc0554b824346666b089db6558efaf4f6c49a6a77e947c3378f43b01283d013414e798a9e247ba7efd1dbecf1c4b6c8fb2458b45e49e4ba9dc4b762ab4dcd8c89239d4dc55d41f9fe42c853a225b6d99665187e4fea5f7c0f036bb26182c8be7f86bd4b0744fb1516539048f9ca51571c8df9ab23d2b966a040456375289125468560a85e99cff99cd57ff7fca16f1944e27bfa077d33e3ee3c57b1dd9edddaa49ea4e4869e5dda0bdbeaf8c6199becef60097f7fef35db352e6c2bda4156b48907369a78cb3ff8fa06e624771f47a12afe27743c59c79d8af543c7d998d717cc5c9a3659279dd2e2108e4a126acea2a18b8cb944671abb4a84d8e5d3911bcf36204b81bf2a368390b296e84ac5c7a79d806cd2cb421ee7ffc3f9e3eac1849f3c3b3489390a6d9173455439de39fc593c9661f5c0d91c61604b7a58bacaf8ac0aee1db4f54df11f8adebab5877d90b638d70e7959cb3791041d1c41ae7222314aa78e3ff6a547d9ca95787a40b29840d7bc3bb103e42289640f267b6e060e9e4cebe85ef6fcd5cbcb6e3f0aa736a7179e549fc02da7ca023ba81a0f32efbbafde588a4c823862e3f952be6f058572621fd3746fdcfa92e7501f112c4de0b8af903b825936f417b6ef1a884969d6aeb28f0ff964b6f71d002babfd03e4a3220478285e36b1110c364234b5bf194c7528f1475916dbb089cc77e2a042906cc4257d3d2389b75ec2b594f96ed559fef65e383e57850e2b55789cfc9da6d1b4a7332951905e3154f6a3375589f335ec51ec7c7595b5e144f4f82abb1aaf6276a30863c32cee1ae551478235651b7d602fa1d716d90c9cbec8064e7aec81be07a9c793c9538cbba701915a0c28e56b3ecdb6228a92c050c91f6604382f871468517fadcff165f663b91f39eb9181addaafa2f58444fd7cbc8668498442ff9da6e1c65aea1fa705e75468acabe8b6a888916a46d0a3ac1d4fce9bb51a3df1e751ccbb05b48940d89de835879bb3f8dde71ca4f30f22322ec70d2de39bb51cc04d32596c82f27d3eb601615fbd15d9ba401dded57471cb843baddfabe8798b82fd3fcb13b429e56a16836276e656587185453334ea4c17e60db78845511b2813877f01bce68e05908a00917e70dadac440f4642139fcacfbd6bd4a9bb524475b0c6f8f6bb70596e75aa2a5a87da1079cdef5d4b103800e5f2fe6b26959d6e6e059273ebd407f96a47d24849f498100c5d711dc8f0545a9424a0713c0d128ebeb154af9bae9654443cd3b148c424e31aeef5aa54cebf9ca9fa97304596a4ef03608f6525d166618ed6d2595ca66f9ecc7ded9e1f2df302b96b75826d73651abfccd7f11b3589121bd5b5eaabc2b59c37c23c0bae15de29911346f9bfa338861765d1915a0edb75695bdca9f54d8d1e3a70b8e269bf8788365e7ef495d7feeb70648a8b04db9d86a223d4ece27bbb66be7628d87b7a283b6984d237389b70dbac95c8d78859a4267162dd587c278fb8bf50f4b01a34c2bc2434e51de96a8a197c018e838c477e2c7937a8e2e76f1032dbf6cc7597369ab156b78ecf40d7bb8ad44e349053907af86b139094a926b63e5d53119141d087e3653c05839b20f350aeca9a563018c064a51900d819fa0b42a2e01052208a3fa5bda940bb1a6a9742337ee42d76afae0c3c8c112cfa86e4d38e1b53c141f29e33947781bd021a842dbe298c18b2aced28166f5e2790c4bac64d0637b66aefc2bc3c96664eec7d74f397b0e253f20eac8d70a33cfc6a703239d4f859c9c7beed51e935a64280b7f48e1d8412ba1829e96d4c980ede2d3916517044ddf27f00b3fa1fb46e1f82c4c432445aceee932a1ed70a664ff639ba507a98b46e7056c2e78df7b1e11a1b5957b368d450362dbaeab7fe95cbe0a556218020434f7909d0bcab768d729bf6ce93105e19df931d25b7da7101beed84051c1d2765026462b94998d1ac1f127dafdd0a25019cd2b64e1e287897e38bbe5ad5abf4bd4fcf34f3ebe51914fa6178839b79ef9bfe14c8942611174e02bb4a4775950831f5c5a9a141fbba5c37fbc46ff5f5eb79dd8816b1ff229fcf981f0cec99ff56ff9285a22710ef418d4f3cd92c1e8e64dd061e673d45628b577181df9af5620153484a14adeedda7c10156ab1604d134536e174a0ea4a7ab1547831871e1f0194b8d16e726e3da69bfa4d3fd14579977564745b4dc6e8cd495a09bf4f0c26adb25aa1167fdd37893311e51845583086e57ca4e2b32e18eaf14a4c76ab076aa529de762a9cc0b8591a32d5ecc3831ee5e2cbe4dcf5ca2de289199ab1081c11c15416e443091b3b8f4bb1346531ad81687b8621a1a96e6e859b225aa7178d2c29a08e13043a7fe1b4a324cf28e478596a9a5d1100f7e72f58d183ec456389c3f820eb9085badad160dbdfe55288d0eab05f71fcfd329f9f03c2cccfb329b93d42fa560e3eff1b56b0c0ca59a995516ee202015240ffde1fa27b3a19b67eeab3ad73f69f052fe0ab09473c8f1ebd6ff683620926443381cbd11b61c33bfbdb93caa0f23c36c0fcc91105f58ced1a46a5596d92387b30c51ae19377db07479e964ad91f0e4f08aa840e749159c1efabcee25425022e67015e543bcf1751dbc332263281bbb568547788de6ecf57849a1cd00f4ed10b81e9002f2d0566113a588b0225c9ade330bfece7ed3e4ddc22294531791ef49cb01944942b0df723e57716d9be38a946974b012351cda787e8870d3a9fa08b1ed12a69e47ddfe9c878bfefa63455c3b3d3eb7358820f10f9a16bdaf1d1e5498ad1f6b8876186a5b2ba231c6a3faedf116ba1bc6126c88a8bc3bda385a92cc23d2164786ab8ba3add8245f0f3c9d3db9153bdcb986161d4429e5e966a4284ee7d36b9f06ef1f2580cd18c8daab066ed1f5ba0db2538e41ec9d7c94569c79ea867a67d49140b32a17c4b67e94baf3b6595a65a0732bf90c23263e87b438f0e43dd7b6f0096da03a0a75105e77d6d0277f41fe6e2f89c0a4c9452742b2e5d31ce3dcf6c98544b55ba33f8b57c21965f2d08937a73f8899b4d512c805e67231697d5848d5881c49bf00e82ed7de73df057ddf50ac6edf225931c4f2188d836ac5a2cc00264dbfa3e819ad14bf2efdfb6a6568bc6b7546f44dea7aab1ce2a9aa6e205dece237fb48e07f26053d836816d52be2a394193a0acac853f9d8b8df9a1b3f44b03a417e6eafb3f6945482531308e60d3a098ed9b1081c53a3b2fa4792d4bbd1cc4df4ac0d30592a4094dca18f7eea2647e27ed2c33eba005c7e73abb350430385d16155f9e4fc8673ca713d6ecf4cc6f74ed531d85771d9ca53d19f9fb7856034b5263902990b8ee0e518dfa0ad7205d44bb8e5bf8300093958e7b52f8df3228768fdaea9f1d8fda09356ba32437c515c2dce0f5f2b5cd56e926b2ccd41d5e8b238adf71db46352e96bbadb3f011aef9ecd52ad0668ca8511d2234671e9bc945480472759f05368e29b7c7dbda193e260696555d6d2c614e4c810c464dc4f39d645316e56dd73d90b5b194881409ab98a69bcd98c77cbdcac617c6955b26fe4f38ced574f31dc10d0bed06eb62641f705d56f55b629ca515871d07a505862e4758d60702347a3b095cb72f672f342bf7c5d9216c1354008eb4ce40eb5ba5103a6125d90eb6dd2a87c097b11c781b45e398baa76a43b6f3bde1e110eeb9c84dbdd40d0686b62dc4328954eeeee7c6bca901f222209b4426afbf061a3bb0c2ba61ae27bdcd2d25dfbe66ff172fcb25fa208ff16061f81fa3184d8b38e4060d959a940c1bb0083ed6640d459f7838652710a1db906ea73e5e3204273fcafa968f7e2ef66a2ffd037072546cf50060791a93facbaddb9b9faebcd66def413c8ab041dfe12ee2a629241e85d91ddc2a8d3e203b8defd05f4027be234877d87414e4365ca687d5a083174da1728590d6e22560b0f3924a119c2a3dcc012842ac872b06587c741c2da97919e6aea764583d04855f7557e08f83ba631b21429f55b1465f078b73a4f3797f02e445e80de6b36a7da8baeefaeaaf7c354a4c13ec19d889030de0a381290523b7f5524d3889d4d6401a272c9a5011644a8798ebd7e3f271c32d1b0e4f7efdc79f5e85608bfcc393daa49895fe02434c04da0b898d92053fc010f5318c26c0876c5b14e45b39a1da4df5ddfc27da4e0f6f686e6eb4a756686bb3dfb9447ec6975f337dbbc10e4a8494a13b263b5796c621fdcb87963afdc91de7e06911ddcf77c70e9cf09cff12977877ec1dea4d231f659a29fc7fba602946ad329af3170e6a8e61707c67e12caf36358709a8111dbbceed74931f62e132410f3d1c851e6648c1204c9aa996d38a94dd835f1980142e8e88cc40311bebbac6846fbfed7850cf352a29c6c79c065404b23beb5c6283cc34e3ab0721d4e8bafb7d54df7ee96bdba679e8f9086c1cc3a9431029f75d8e4a6d5c708b717cb6d5d2bf97db7ed5b3cd016f559072c3cb53d7ea3e6b5070a320aaa7970c180a14e756ca15df733969d085b18999ddb97d43bbd3119b31fb3af88928f331e6fd21e200d3f5a162c55260c248805a6139b5b672065fd764c7a6d3d136fe2d047df3974d59f1730c50a05dc8c30d3c6c226f897540007dbd58442bb2a9c8a6bb36573d5346e69a5635da2aa98cadec0d02d61c830daf8136625038ffe08a486bd70f40f4f3eeefb8f882e2ecb813372d4e39ac06fd46033a09a01aa0558199d884420f4e6a6b6910633515a995374cbdd860db9cabf512b59269eb36d3786e7914096c0a2e711a45a89c755dcceb5c409c383e8b3988683dc3598f284789cf6628caf4e3347d2eb34dfb0d5f1ed42e48b82d3cb78dc9bb6b390684577ec7a4d5e3f62a89cde776ed8b8a3ff2dcfccd989885aca7fc02a55e2307556a20af2ada0d0618336bd7613eed389aa9c7e89f1e149fd32eb693462c488b813048b38cbcd152ec368ccfb83af0e100d59be6a56cb867e46c20e25451a3a481d6ff046f5677165307e751bff6ee41de82c805e19b915ba70271431ede573b079ad9bf34bc533361cec2eebb361fcc266d91f87d08c528f06533c67524fc78b1025c9062696a7063d5557c82dfa923ef1451c757f8ae88d9410af02e40ddd8f5ab55c5fa8382182345984fc4c1159f6cd364c5149ff2c223d6cf44ea5e9b253e977545995abbbf4ae3688b232427ee0215f4d271e8c57003217e08bbe716dd39ea107b604ccf1fe30e49ec46b416aecaa60830b5c9bacbbaab7b60c0b3ca885787bb69aa3b9be002d618dd179e90f9370890542872f2c6d1b96882f96011d65344cd036df384a1787d1213c68eae1c5ec8719437974dfd4a59a8dae988d66ee123bc38c381c96cd0263e9ff05b318489ce8942e310d6f725d5920224bacc3eb0d97ea026d8d3fe85d82015bab444471323b74079be3324b28b44fcdcc65af65557f23f58e07b6a9f784a28762ac65ccd30d900f469c8ec7f139f66435ab12a1a9928f9ef3ede6b6e8b1cbd6be96b569ecd53d0b8e34a7b3f8b874be848ee5590cd19bc005ee6071ad71ce3e3393b5b15e48fe70c9f1ef9bef12747fab7efa17c9fecc980ab66cd7303b8eaac939337be13e431cfac2b7ca6d1e83cc0a3bbf284f11a8cb3dbcedd90819658518ef89d093d416299f291781ca426417bd404c5d99c89e8b3c37351a1ed0242583ae9e1c98e2756fa682c2a214d506ff4e99041d3d4da90878bbffe75d8c544ba17aa559739b154bcd63862628a823e52a3142867ae3499255924677bdcb64dba38b760b5b9474dc1c385af80e1a2caf2a41ad2f57c8ebf377d221e3356ae986bceb9cb9f100881ffcaee16902f710a1c570771c67420f3296fc4cec8192bf021700693a9ba2b0cfd41b56f6e39346e839f731c88bdcb8e17b97503825e75a938d07ef787aa79cdebb100c6ef58561c0a4377be6927a21c542996b7d2bf734e19e7c1a0fc4876c65323fd5aee9e5b6d773cb738a2389af6c1a343230f227332b86ce97d741f5627188254815c0961dc6ed7c64aac0b3a429203d2a5fc6df20df50c9e8b2e02c01baadcf4aa2ad392d57115a0dd8ca62d78516330dd2f21cb8e103158269c097216c16f7102305a8d4b4594b608212c0f742354f581c7e407f64538eccea4b6dcfbf40926aec737e49cd13e25f066fce1544716958a0a4a7da314382cdb115dd8ea57672c61ebf82b2d40657d37f92d4cc4d83d471b8bb866231145aeb5a1c9001e180073f79a066196030abc3c294a16dca3d222fef6f61a3b9eed77fa0fa98c33be0d8f1830224dc09446814277e74dc2646a0f862e770b2d1610f2a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你好, 请输入密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文介绍并发容器BlockingQueue相关技术</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    <category term="java多线程" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://blog.hanqunfeng.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程--JUC并发容器</title>
    <link href="https://blog.hanqunfeng.com/2023/05/24/java-concurrency09-container/"/>
    <id>https://blog.hanqunfeng.com/2023/05/24/java-concurrency09-container/</id>
    <published>2023-05-24T14:34:05.000Z</published>
    <updated>2023-05-24T08:37:05.594Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍并发容器相关技术</p></li><li class="lvl-2"><p>本文基于<code>jdk1.8</code></p></li></ul><span id="more"></span><h2 id="并发容器">并发容器</h2><ul class="lvl-0"><li class="lvl-2"><p>Java的集合容器框架中，主要有四大类别：<code>List</code>、<code>Set</code>、<code>Queue</code>、<code>Map</code>，大家熟知的这些集合类<code>ArrayList</code>、<code>LinkedList</code>、<code>HashMap</code>等这些容器都是非线程安全的。</p></li><li class="lvl-2"><p>为了保证线程安全，所以java提供了<code>同步容器</code>，可以简单地理解为通过<code>synchronized</code>来实现同步的容器，比如<code>Vector</code>、<code>Hashtable</code>以及<code>SynchronizedList</code>等容器，这样做的代价是削弱了并发性，当多个线程共同竞争容器级的锁时，吞吐量就会降低。</p></li><li class="lvl-2"><p>因此为了解决同步容器的性能问题，所以才有了<code>并发容器</code>，<code>java.util.concurrent</code>包中提供了多种并发类容器：<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/Y7os2P.jpg" alt="" width="600" height="600"></p></li></ul><table><thead><tr><th>并发容器</th><th>对应的非并发容器</th><th>代替的同步容器</th><th>实现原理</th><th>应用场景</th></tr></thead><tbody><tr><td>CopyOnWriteArrayList</td><td>ArrayList</td><td>Vector、synchronizedList</td><td>CopyOnWriteArrayList 内部使用了一种称为“写时复制”的机制。当需要进行写操作时，它会创建一个新的数组，并将原始数组的内容复制到新数组中，然后进行写操作。一旦修改完成，新的副本会替代原始数组，成为新的数据源。<br>因此，读操作不会被写操作阻塞，读操作返回的结果可能不是最新的，但是对于许多应用场景来说，这是可以接受的。此外，由于读操作不需要加锁，因此它可以支持更高的并发度。<br><span style="color:red;">需要注意的是，虽然副本会替代原始数组，但是这个替代并不是立即发生的。在修改操作期间，读操作仍然可能会访问原始数组。只有当修改完成后，才会将新的副本设置为源数组。</span></td><td>1. 读多写少的场景由于 CopyOnWriteArrayList 的读操作不需要加锁，因此它非常适合在读多写少的场景中使用。例如，一个读取频率比写入频率高得多的缓存，使用 CopyOnWriteArrayList 可以提高读取性能，并减少锁竞争的开销。<br>2. 不需要实时更新的数据由于 CopyOnWriteArrayList 读取的数据可能不是最新的，因此它适合于不需要实时更新的数据。例如，在日志应用中，为了保证应用的性能，日志记录的操作可能被缓冲，并不是实时写入文件系统，而是在某个时刻批量写入。这种情况下，使用 CopyOnWriteArrayList 可以避免多个线程之间的竞争，提高应用的性能。<br><span style="color:red;">注意：由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致 young gc 或者full gc，谨慎使用</span></td></tr><tr><td>CopyOnWriteArraySet</td><td>HashSet</td><td>synchronizedSet</td><td>基于CopyOnWriteArrayList实现，其唯一的不同是在add时调用的是CopyOnWriteArrayList的addIfAbsent方法，其遍历当前Object数组，如Object数组中已有了当前元素，则直接返回，如果没有则放入Object数组的尾部，并返回。</td><td>同CopyOnWriteArrayList</td></tr><tr><td>ConcurrentHashMap</td><td>HashMap</td><td>Hashtable、synchronizedMap</td><td>在JDK1.8之前，ConcurrentHashMap使用分段锁以在保证线程安全的同时获得更大的效率。<br>JDK1.8开始舍弃了分段锁，使用自旋+CAS+synchronized关键字来实现同步。<br>这样做的好处：<br>1.节省内存空间 ，分段锁需要更多的内存空间，而大多数情况下，并发粒度达不到设置的粒度，竞争概率较小，反而导致更新的长时间等待（因为锁定一段后整个段就无法更新了）<br>2.提高GC效率。</td><td>1.共享数据的线程安全：在多线程编程中，如果需要进行共享数据的读写，可以使用 ConcurrentHashMap 保证线程安全。<br>2. 缓存：ConcurrentHashMap 的高并发性能和线程安全能力，使其成为一种很好的缓存实现方案。在多线程环境下，使用 ConcurrentHashMap 作为缓存的数据结构，能够提高程序的并发性能，同时保证数据的一致性。</td></tr><tr><td>ConcurrentSkipListMap</td><td>TreeMap</td><td>synchronizedSortedMap(TreeMap)</td><td>基于Skip list（跳表）实现的有序映射（Map）数据结构，是一种可以代替平衡树的数据结构，默认是按照Key值升序的。</td><td>ConcurrentSkipListMap适用于需要高并发性能、支持有序性和区间查询的场景，能够有效地提高系统的性能和可扩展性。</td></tr><tr><td>ConcurrentLinkedQueue</td><td>LinkedList</td><td>LinkedBlockingQueue</td><td>ConcurrentLinkedQueue 基于无锁算法和乐观并发策略，旨在提供高效的并发操作。它使用一个单向链表数据结构来存储元素，并且保持了先进先出（FIFO）的顺序。<br>ConcurrentLinkedQueue 是一个无界队列，它没有固定的容量限制。可以根据需要动态地增长或缩小链表的长度。<br><span style="color:red;">需要注意的是，ConcurrentLinkedQueue 并不适合在迭代过程中进行修改操作，因为它的结构在并发情况下可能会发生变化。</span></td><td>1.高并发环境：ConcurrentLinkedQueue 适用于需要高并发性能和线程安全的场景。由于它采用无锁算法和乐观并发策略，可以在高并发环境下提供较高的吞吐量。<br>2.生产者-消费者模式：ConcurrentLinkedQueue 在实现生产者-消费者模式时非常有用。生产者线程可以将元素添加到队列的尾部，而消费者线程可以从队列的头部获取元素，实现了解耦和并发处理。<br>3.任务调度：ConcurrentLinkedQueue 可以作为任务调度的数据结构，用于存储待执行的任务。多个线程可以从队列中获取任务并执行，从而实现任务的并发处理。</td></tr><tr><td>ConcurrentLinkedDeque</td><td>LinkedList</td><td>无</td><td>与ConcurrentLinkedQueue 相比 ConcurrentLinkedDeque 是基于双向链表实现的并发双端队列。它支持在队头和队尾进行插入和移除操作，保持了元素的先进先出顺序。</td><td>ConcurrentLinkedDeque 适用于需要双端操作的并发场景，例如生产者-消费者模式中的多线程同时插入和移除元素的场景。</td></tr></tbody></table><h2 id="CopyOnWriteArrayList">CopyOnWriteArrayList</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>int size()</code></td><td>返回列表中的元素数量。</td></tr><tr><td><code>boolean isEmpty()</code></td><td>检查列表是否为空。</td></tr><tr><td><code>boolean contains(Object o)</code></td><td>检查列表是否包含指定元素。</td></tr><tr><td><code>Iterator&lt;E&gt; iterator()</code></td><td>返回一个迭代器，用于遍历列表中的元素。</td></tr><tr><td><code>boolean add(E e)</code></td><td>将元素添加到列表末尾。</td></tr><tr><td><code>boolean remove(Object o)</code></td><td>从列表中移除指定元素的第一个匹配项。</td></tr><tr><td><code>boolean containsAll(Collection&lt;?&gt; c)</code></td><td>检查列表是否包含指定集合中的所有元素。</td></tr><tr><td><code>boolean addAll(Collection&lt;? extends E&gt; c)</code></td><td>将指定集合中的所有元素添加到列表末尾。</td></tr><tr><td><code>boolean addAll(int index, Collection&lt;? extends E&gt; c)</code></td><td>将指定集合中的所有元素插入到列表的指定位置。</td></tr><tr><td><code>boolean removeAll(Collection&lt;?&gt; c)</code></td><td>移除列表中与指定集合中的元素相匹配的所有元素。</td></tr><tr><td><code>boolean retainAll(Collection&lt;?&gt; c)</code></td><td>仅保留列表中与指定集合中的元素相匹配的元素，移除其他元素。</td></tr><tr><td><code>void clear()</code></td><td>清空列表中的所有元素。</td></tr><tr><td><code>E get(int index)</code></td><td>返回列表中指定位置的元素。</td></tr><tr><td><code>E set(int index, E element)</code></td><td>用指定元素替换列表中指定位置的元素，并返回原来的元素。</td></tr><tr><td><code>void add(int index, E element)</code></td><td>在列表的指定位置插入指定元素。</td></tr><tr><td><code>E remove(int index)</code></td><td>移除列表中指定位置的元素，并返回被移除的元素。</td></tr><tr><td><code>int indexOf(Object o)</code></td><td>返回指定元素在列表中首次出现的位置索引，如果不存在，则返回 -1。</td></tr><tr><td><code>int lastIndexOf(Object o)</code></td><td>返回指定元素在列表中最后一次出现的位置索引，如果不存在，则返回 -1。</td></tr></tbody></table><div class="tips"><p><em><strong>小贴士</strong></em></p><h2 id="迭代器的-fail-fast-与-fail-safe-机制">迭代器的 fail-fast 与 fail-safe 机制</h2><ul class="lvl-1"><li class="lvl-2">在 Java 中，迭代器（Iterator）在迭代的过程中，如果底层的集合被修改（添加或删除元素），不同的迭代器对此的表现行为是不一样的，可分为两类：Fail-Fast（快速失败）和 Fail-Safe（安全失败）。</li></ul><h3 id="fail-fast-机制">fail-fast 机制</h3><ul class="lvl-1"><li class="lvl-2">fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生 fail-fast 事件。例如：当某一个线程A通过 iterator 去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，产生 fail-fast 事件。</li><li class="lvl-2">在 java.util 包中的集合，如 ArrayList、HashMap 等，它们的迭代器默认都是采用 Fail-Fast 机制。</li><li class="lvl-2">fail-fast解决方案<ul class="lvl-3"><li class="lvl-6">方案一：在遍历过程中所有涉及到改变modCount 值的地方全部加上synchronized 或者直接使用Collection#synchronizedList，这样就可以解决问题，但是不推荐，因为增删造成的同步锁可能会阻塞遍历操作。</li><li class="lvl-6">方案二：使用CopyOnWriteArrayList 替换 ArrayList，推荐使用该方案（即fail-safe）。</li></ul></li></ul><h3 id="fail-safe机制">fail-safe机制</h3><ul class="lvl-1"><li class="lvl-2">任何对集合结构的修改都会在一个复制的集合上进行，因此不会抛出ConcurrentModificationException。在 java.util.concurrent 包中的集合，如CopyOnWriteArrayList、ConcurrentHashMap 等，它们的迭代器一般都是采用 Fail-Safe 机制。</li><li class="lvl-2">缺点：<ul class="lvl-3"><li class="lvl-6">采用 Fail-Safe 机制的集合类都是线程安全的，但是它们无法保证数据的实时一致性，它们只能保证数据的最终一致性。在迭代过程中，如果集合被修改了，可能读取到的仍然是旧的数据。</li><li class="lvl-6">Fail-Safe 机制还存在另外一个问题，就是内存占用。由于这类集合一般都是通过复制来实现读写分离的，因此它们会创建出更多的对象，导致占用更多的内存，甚至可能引起频繁的垃圾回收，严重影响性能</li></ul></li></ul></div><h2 id="CopyOnWriteArraySet">CopyOnWriteArraySet</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>int size()</code></td><td>返回集合中的元素数量。</td></tr><tr><td><code>boolean isEmpty()</code></td><td>检查集合是否为空。</td></tr><tr><td><code>boolean contains(Object o)</code></td><td>检查集合是否包含指定的元素。</td></tr><tr><td><code>boolean add(E e)</code></td><td>将指定元素添加到集合中。</td></tr><tr><td><code>boolean remove(Object o)</code></td><td>从集合中移除指定元素。</td></tr><tr><td><code>void clear()</code></td><td>清空集合中的所有元素。</td></tr><tr><td><code>Iterator&lt;E&gt; iterator()</code></td><td>返回在集合上进行迭代的迭代器。</td></tr><tr><td><code>boolean containsAll(Collection&lt;?&gt; c)</code></td><td>检查集合是否包含指定集合中的所有元素。</td></tr><tr><td><code>boolean addAll(Collection&lt;? extends E&gt; c)</code></td><td>将指定集合中的所有元素添加到集合中。</td></tr><tr><td><code>boolean removeAll(Collection&lt;?&gt; c)</code></td><td>从集合中移除指定集合中包含的所有元素。</td></tr><tr><td><code>boolean retainAll(Collection&lt;?&gt; c)</code></td><td>仅保留集合中包含在指定集合中的元素，移除其他元素。</td></tr></tbody></table><h3 id="CopyOnWriteArraySet与CopyOnWriteArrayList的区别">CopyOnWriteArraySet与CopyOnWriteArrayList的区别</h3><ul class="lvl-0"><li class="lvl-2"><p>数据结构类型：CopyOnWriteArraySet 是一个基于数组的集合，而 CopyOnWriteArrayList 是一个基于数组的列表。</p></li><li class="lvl-2"><p>元素的唯一性：CopyOnWriteArraySet 保证集合中的元素是唯一的，不允许重复元素的存在。而 CopyOnWriteArrayList 允许列表中存在重复元素。</p></li><li class="lvl-2"><p>集合与列表的特性：CopyOnWriteArraySet 实现了 Set 接口，它是一个无序的集合，不保留插入顺序。CopyOnWriteArrayList 实现了 List 接口，它是一个有序的列表，保留插入顺序。</p></li></ul><h3 id="代码示例">代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 CopyOnWriteArraySet 实例</span></span><br><span class="line">CopyOnWriteArraySet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">set.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;Grapes&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印集合元素，可能得到的输出：[Apple, Banana, Grapes, Orange]</span></span><br><span class="line">System.out.println(<span class="string">&quot;集合元素: &quot;</span> + set);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 CopyOnWriteArrayList 实例</span></span><br><span class="line">CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Grapes&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印列表元素，得到的输出：[Apple, Banana, Orange, Grapes]</span></span><br><span class="line">System.out.println(<span class="string">&quot;列表元素: &quot;</span> + list);</span><br></pre></td></tr></table></figure><h2 id="ConcurrentHashMap">ConcurrentHashMap</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>int size()</code></td><td>返回映射中的键值对数量。</td></tr><tr><td><code>boolean isEmpty()</code></td><td>检查映射是否为空。</td></tr><tr><td><code>boolean containsKey(Object key)</code></td><td>检查映射是否包含指定的键。</td></tr><tr><td><code>boolean containsValue(Object value)</code></td><td>检查映射是否包含指定的值。</td></tr><tr><td><code>V get(Object key)</code></td><td>获取与指定键关联的值。</td></tr><tr><td><code>V put(K key, V value)</code></td><td>将指定的键值对添加到映射中。</td></tr><tr><td><code>V remove(Object key)</code></td><td>从映射中移除指定键的映射关系，并返回对应的值。</td></tr><tr><td><code>void clear()</code></td><td>清空映射中的所有键值对。</td></tr><tr><td><code>Set&lt;K&gt; keySet()</code></td><td>返回映射中所有键的集合。</td></tr><tr><td><code>Collection&lt;V&gt; values()</code></td><td>返回映射中所有值的集合。</td></tr><tr><td><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code></td><td>返回映射中所有键值对的集合。</td></tr><tr><td><code>V putIfAbsent(K key, V value)</code></td><td>当指定的键尚未映射到值时，将指定的键值对添加到映射中。</td></tr><tr><td><code>boolean remove(Object key, Object value)</code></td><td>从映射中移除指定键值对。</td></tr><tr><td><code>boolean replace(K key, V oldValue, V newValue)</code></td><td>用新的值替换指定键的旧值，仅当当前值与指定的旧值相等时才替换。</td></tr><tr><td><code>V replace(K key, V value)</code></td><td>用指定值替换指定键的值。</td></tr></tbody></table><h3 id="JDK1-7-中的ConcurrentHashMap">JDK1.7 中的ConcurrentHashMap</h3><p>在jdk1.7及其以下的版本中，结构是用Segments数组 + HashEntry数组 + 链表实现的</p><h3 id="JDK1-8中的ConcurrentHashMap">JDK1.8中的ConcurrentHashMap</h3><p>jdk1.8抛弃了Segments分段锁的方案，而是改用了和HashMap一样的结构操作，也就是数组 + 链表+ 红黑树结构，比jdk1.7中的ConcurrentHashMap提高了效率，在并发方面，使用了<code>cas +synchronized</code>的方式保证数据的一致性</p><ul class="lvl-0"><li class="lvl-2"><p>链表转化为红黑树需要满足2个条件:</p><ul class="lvl-2"><li class="lvl-6">1.链表的节点数量大于等于树化阈值8</li><li class="lvl-6">2.Node数组的长度大于等于最小树化容量值64</li></ul></li></ul><h2 id="代码示例-2">代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentHashMapExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 ConcurrentHashMap 实例</span></span><br><span class="line">        ConcurrentHashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        map.put(<span class="string">&quot;Apple&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Banana&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Orange&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Grapes&quot;</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印映射内容，映射内容: &#123;Banana=1, Grapes=4, Orange=2, Apple=3&#125;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;映射内容: &quot;</span> + map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取键值对数量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;键值对数量: &quot;</span> + map.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否包含指定键</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否包含键 &#x27;Orange&#x27;: &quot;</span> + map.containsKey(<span class="string">&quot;Orange&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定键对应的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;键 &#x27;Apple&#x27; 对应的值: &quot;</span> + map.get(<span class="string">&quot;Apple&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除指定键的映射关系</span></span><br><span class="line">        map.remove(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印映射内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;移除键 &#x27;Banana&#x27; 后的映射内容: &quot;</span> + map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ConcurrentSkipListMap">ConcurrentSkipListMap</h2><h3 id="ConcurrentSkipListMap-和-ConcurrentHashMap-是-Java-中用于并发访问的映射数据结构，它们之间有一些区别">ConcurrentSkipListMap 和 ConcurrentHashMap 是 Java 中用于并发访问的映射数据结构，它们之间有一些区别</h3><ul class="lvl-0"><li class="lvl-2"><p>数据结构：ConcurrentSkipListMap 是基于跳表（Skip List）的数据结构实现，而 ConcurrentHashMap 是基于<code>数组 + 链表+ 红黑树</code>的数据结构实现。</p></li><li class="lvl-2"><p>排序性：ConcurrentSkipListMap 是有序映射，按照键的自然顺序或自定义的比较器对键进行排序。而 ConcurrentHashMap 是无序映射，不保证键值对的顺序。</p></li><li class="lvl-2"><p>并发访问性能：在高度并发的情况下，ConcurrentSkipListMap 在读取方面的性能较好，因为它支持并发读取操作，并且有序结构使得读取更高效。而 ConcurrentHashMap 在写入方面的性能较好，因为它使用<code>cas +synchronized</code>来支持并发写入操作。</p></li><li class="lvl-2"><p>内存占用：通常情况下，ConcurrentSkipListMap 的内存占用比 ConcurrentHashMap 更高，因为它需要额外的存储空间来维护跳表结构。</p></li><li class="lvl-2"><p>功能特性：由于有序性的特点，ConcurrentSkipListMap 提供了一些与顺序相关的方法，如 <code>firstKey()</code>、<code>lastKey()</code>、<code>subMap()</code> 等。</p></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>K firstKey()</code></td><td>返回映射中的第一个键。</td></tr><tr><td><code>K lastKey()</code></td><td>返回映射中的最后一个键。</td></tr><tr><td><code>ConcurrentNavigableMap&lt;K, V&gt; subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)</code></td><td>返回一个视图，该视图包含映射中键的子范围。</td></tr><tr><td><code>ConcurrentNavigableMap&lt;K, V&gt; headMap(K toKey, boolean inclusive)</code></td><td>返回一个视图，该视图包含映射中小于（或小于等于）给定键的部分。</td></tr><tr><td><code>ConcurrentNavigableMap&lt;K, V&gt; tailMap(K fromKey, boolean inclusive)</code></td><td>返回一个视图，该视图包含映射中大于（或大于等于）给定键的部分。</td></tr><tr><td><code>ConcurrentNavigableMap&lt;K, V&gt; descendingMap()</code></td><td>返回与此映射相反的顺序的视图。</td></tr><tr><td><code>ConcurrentNavigableSet&lt;K&gt; navigableKeySet()</code></td><td>返回包含映射中所有键的并发可导航集合。</td></tr><tr><td><code>ConcurrentNavigableSet&lt;K&gt; descendingKeySet()</code></td><td>返回与此映射中的键相反顺序对应的并发可导航集合。</td></tr></tbody></table><h3 id="代码示例-3">代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentSkipListMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentSkipListMapExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 ConcurrentSkipListMap 实例</span></span><br><span class="line">        ConcurrentSkipListMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentSkipListMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;Grapes&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印映射内容，映射内容: &#123;1=Banana, 2=Orange, 3=Apple, 4=Grapes&#125;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;映射内容: &quot;</span> + map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取键值对数量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;键值对数量: &quot;</span> + map.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否包含指定键</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是否包含键 2: &quot;</span> + map.containsKey(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定键对应的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;键 3 对应的值: &quot;</span> + map.get(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除指定键的映射关系</span></span><br><span class="line">        map.remove(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印映射内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;移除键 1 后的映射内容: &quot;</span> + map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取最小的键</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最小的键: &quot;</span> + map.firstKey());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取最大的键</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最大的键: &quot;</span> + map.lastKey());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取键小于等于 3 的子映射</span></span><br><span class="line">        ConcurrentSkipListMap&lt;Integer, String&gt; subMap = map.headMap(<span class="number">3</span>, <span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;键小于等于 3 的子映射: &quot;</span> + subMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em></p><h2 id="跳表">跳表</h2><p>跳表（Skip List）是一种用于实现有序集合的数据结构，它的设计灵感来自于平衡树。跳表通过使用多层链表结构，每一层链表按照升序排列，并且每一层链表都是前一层链表的子集。这样的结构允许在搜索、插入和删除元素时具有较高的效率。</p><p>跳表的核心思想是通过建立索引层来加快搜索的速度。最底层是原始链表，每个节点都包含一个元素。而上层的链表是通过原始链表中的一部分节点创建的。在每一层中，节点以一定的概率被提升到更高层，从而形成了跨越多个层级的链接。</p><p>跳表的主要优点是在具有合理的设计和维护下，可以在平均情况下以 O(log n) 的时间复杂度执行搜索、插入和删除操作。这是因为每一层的节点数量是下一层的节点数量的一半，从而形成了一种对数级别的分布。</p><p>以下是跳表的主要操作：</p><ul class="lvl-1"><li class="lvl-2"><p>搜索：从顶层开始，沿着每一层的链表进行比较，如果目标元素大于当前节点的值，则在当前层继续向右移动；如果目标元素小于当前节点的值，则退回到下一层继续比较。直到找到目标元素或者无法再继续向右或下移动。</p></li><li class="lvl-2"><p>插入：通过搜索找到插入位置后，在每一层链表中插入新节点，并更新相应的索引层。</p></li><li class="lvl-2"><p>删除：通过搜索找到要删除的节点位置后，在每一层链表中删除节点，并更新相应的索引层。</p></li></ul><p>跳表的实现相对简单，它提供了在有序集合中进行快速搜索和更新的高效方式。然而，它的空间复杂度相对于平衡树较高，因为需要维护额外的索引层。跳表在并发环境下也需要考虑同步的问题，以确保数据的一致性和线程安全性。</p><p>总结而言，跳表通过建立多层索引结构，在有序集合中实现了较快的搜索、插入和删除操作。它是一种简单而高效的数据结构，在一些场景中可以作为替代平衡树的选择。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/Mffk0p.png" alt="" width="600" height="400"></p></div><h2 id="ConcurrentLinkedQueue">ConcurrentLinkedQueue</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>boolean add(E e)</code></td><td>将指定元素添加到队列的尾部。</td></tr><tr><td><code>boolean offer(E e)</code></td><td>将指定元素添加到队列的尾部。</td></tr><tr><td><code>E poll()</code></td><td>获取并移除队列的头部元素。</td></tr><tr><td><code>E peek()</code></td><td>获取队列的头部元素，但不移除。</td></tr><tr><td><code>int size()</code></td><td>返回队列中的元素数量。</td></tr><tr><td><code>boolean isEmpty()</code></td><td>检查队列是否为空。</td></tr><tr><td><code>boolean contains(Object o)</code></td><td>检查队列是否包含指定元素。</td></tr><tr><td><code>boolean remove(Object o)</code></td><td>从队列中移除指定元素的第一个匹配项。</td></tr><tr><td><code>void clear()</code></td><td>移除队列中的所有元素。</td></tr><tr><td><code>boolean containsAll(Collection&lt;?&gt; c)</code></td><td>检查队列是否包含指定集合中的所有元素。</td></tr><tr><td><code>boolean addAll(Collection&lt;? extends E&gt; c)</code></td><td>将指定集合中的所有元素添加到队列的尾部。</td></tr><tr><td><code>boolean removeAll(Collection&lt;?&gt; c)</code></td><td>从队列中移除包含在指定集合中的所有元素。</td></tr><tr><td><code>boolean retainAll(Collection&lt;?&gt; c)</code></td><td>仅保留队列中包含在指定集合中的元素，移除其他元素。</td></tr></tbody></table><h3 id="代码示例-4">代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentLinkedQueueExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 ConcurrentLinkedQueue 实例</span></span><br><span class="line">        ConcurrentLinkedQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ConcurrentLinkedQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加元素到队列</span></span><br><span class="line">        queue.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取队列元素数量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;队列元素数量: &quot;</span> + queue.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查队列是否为空</span></span><br><span class="line">        System.out.println(<span class="string">&quot;队列是否为空: &quot;</span> + queue.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取并移除队列头部元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">head</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        System.out.println(<span class="string">&quot;移除的队列头部元素: &quot;</span> + head);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取队列头部元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newHead</span> <span class="operator">=</span> queue.peek();</span><br><span class="line">        System.out.println(<span class="string">&quot;新的队列头部元素: &quot;</span> + newHead);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印队列元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;队列元素: &quot;</span> + queue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ConcurrentLinkedDeque">ConcurrentLinkedDeque</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>void addFirst(E e)</code></td><td>将指定元素插入到双端队列的开头。</td></tr><tr><td><code>void addLast(E e)</code></td><td>将指定元素插入到双端队列的末尾。</td></tr><tr><td><code>boolean offerFirst(E e)</code></td><td>将指定元素插入到双端队列的开头。如果成功则返回 <code>true</code>，否则返回 <code>false</code>。</td></tr><tr><td><code>boolean offerLast(E e)</code></td><td>将指定元素插入到双端队列的末尾。如果成功则返回 <code>true</code>，否则返回 <code>false</code>。</td></tr><tr><td><code>E pollFirst()</code></td><td>获取并移除双端队列的开头元素。</td></tr><tr><td><code>E pollLast()</code></td><td>获取并移除双端队列的末尾元素。</td></tr><tr><td><code>E peekFirst()</code></td><td>获取双端队列的开头元素，但不移除。</td></tr><tr><td><code>E peekLast()</code></td><td>获取双端队列的末尾元素，但不移除。</td></tr><tr><td><code>boolean removeFirstOccurrence(Object o)</code></td><td>从双端队列中移除首次出现的指定元素。</td></tr><tr><td><code>boolean removeLastOccurrence(Object o)</code></td><td>从双端队列中移除最后一次出现的指定元素。</td></tr><tr><td><code>void push(E e)</code></td><td>将元素推入双端队列的开头。</td></tr><tr><td><code>E pop()</code></td><td>从双端队列的开头弹出一个元素。</td></tr><tr><td><code>boolean remove(Object o)</code></td><td>从双端队列中移除指定元素的第一个匹配项。</td></tr><tr><td><code>boolean contains(Object o)</code></td><td>检查双端队列是否包含指定元素。</td></tr><tr><td><code>int size()</code></td><td>返回双端队列中的元素数量。</td></tr><tr><td><code>boolean isEmpty()</code></td><td>检查双端队列是否为空。</td></tr><tr><td><code>void clear()</code></td><td>移除双端队列中的所有元素。</td></tr><tr><td><code>boolean containsAll(Collection&lt;?&gt; c)</code></td><td>检查双端队列是否包含指定集合中的所有元素。</td></tr><tr><td><code>boolean addAll(Collection&lt;? extends E&gt; c)</code></td><td>将指定集合中的所有元素添加到双端队列的末尾。</td></tr></tbody></table><h3 id="代码示例-5">代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedDeque;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentLinkedDequeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 ConcurrentLinkedDeque 实例</span></span><br><span class="line">        ConcurrentLinkedDeque&lt;String&gt; deque = <span class="keyword">new</span> <span class="title class_">ConcurrentLinkedDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加元素到双端队列</span></span><br><span class="line">        deque.addFirst(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        deque.addLast(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">        deque.addLast(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取双端队列元素数量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;双端队列元素数量: &quot;</span> + deque.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查双端队列是否为空</span></span><br><span class="line">        System.out.println(<span class="string">&quot;双端队列是否为空: &quot;</span> + deque.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取并移除双端队列头部元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">head</span> <span class="operator">=</span> deque.pollFirst();</span><br><span class="line">        System.out.println(<span class="string">&quot;移除的双端队列头部元素: &quot;</span> + head);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取双端队列头部元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newHead</span> <span class="operator">=</span> deque.peekFirst();</span><br><span class="line">        System.out.println(<span class="string">&quot;新的双端队列头部元素: &quot;</span> + newHead);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取双端队列尾部元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tail</span> <span class="operator">=</span> deque.peekLast();</span><br><span class="line">        System.out.println(<span class="string">&quot;双端队列尾部元素: &quot;</span> + tail);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印双端队列元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;双端队列元素: &quot;</span> + deque);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍并发容器相关技术&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;jdk1.8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    <category term="java多线程" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://blog.hanqunfeng.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程--JUC并发工具类之LockSupport</title>
    <link href="https://blog.hanqunfeng.com/2023/05/23/java-concurrency08-LockSupport/"/>
    <id>https://blog.hanqunfeng.com/2023/05/23/java-concurrency08-LockSupport/</id>
    <published>2023-05-23T14:34:05.000Z</published>
    <updated>2023-05-23T06:56:12.946Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍LockSupport相关技术</p></li><li class="lvl-2"><p>本文基于<code>jdk1.8</code></p></li></ul><span id="more"></span><h2 id="LockSupport介绍">LockSupport介绍</h2><ul class="lvl-0"><li class="lvl-2"><p><code>LockSupport</code>是Java并发工具类中的一个重要成员。它提供了一种基于线程的阻塞和唤醒机制，使得线程可以在特定条件下暂停和继续执行。</p></li><li class="lvl-2"><p>与传统的<code>wait()</code>和<code>notify()</code>方法相比，<code>LockSupport</code>具有以下优势：</p><ul class="lvl-2"><li class="lvl-6">精准的线程阻塞和唤醒：<br><code>LockSupport</code>提供了精确控制线程阻塞和唤醒的能力。通过调用<code>LockSupport</code>类的<code>park()</code>方法，线程可以主动进入阻塞状态，直到其他线程调用了相应线程的<code>unpark()</code>方法才能被唤醒。相比之下，<code>wait()</code>和<code>notify()</code>方法的使用需要依赖于对象的监视器（monitor），并且无法指定特定的线程进行唤醒。</li><li class="lvl-6">不依赖于对象的监视器：<br>传统的<code>wait()</code>和<code>notify()</code>方法需要依赖于对象的监视器（monitor），即在synchronized块中调用。这种依赖关系可能导致代码结构上的限制，而<code>LockSupport</code>则不依赖于特定的对象，可以在任何位置进行线程的阻塞和唤醒操作。</li><li class="lvl-6">避免死锁问题：<br>在使用<code>wait()</code>和<code>notify()</code>方法时，由于需要依赖于对象的监视器，可能会出现死锁问题，例如线程A等待线程B的通知，而线程B也在等待线程A的通知，导致双方无法继续执行。<code>LockSupport</code>通过给每个线程关联一个许可（<code>permit</code>）来避免死锁问题，即使在<code>park()</code>和<code>unpark()</code>方法的调用顺序上没有特定的要求。</li></ul></li><li class="lvl-2"><p>总体而言，<code>LockSupport</code>是一种强大而灵活的线程阻塞和唤醒机制，能够满足并发编程中的各种需求。它的设计理念与传统的<code>wait()</code>和<code>notify()</code>方法有所不同，提供了更加直观和可控的线程调度方式。然而，在使用<code>LockSupport</code>时，仍需谨慎处理线程的阻塞和唤醒逻辑，以避免潜在的并发问题。</p></li></ul><h2 id="LockSupport-API说明">LockSupport API说明</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>void park()</code></td><td>阻塞当前线程，直到被唤醒</td></tr><tr><td><code>void park(Object blocker)</code></td><td>阻塞当前线程，并关联一个阻塞对象</td></tr><tr><td><code>void parkNanos(long nanos)</code></td><td>阻塞当前线程，最多等待指定纳秒时间</td></tr><tr><td><code>void parkNanos(Object blocker, long nanos)</code></td><td>阻塞当前线程，并关联一个阻塞对象，最多等待指定纳秒时间</td></tr><tr><td><code>void parkUntil(long deadline)</code></td><td>阻塞当前线程，直到指定的绝对时间点</td></tr><tr><td><code>void parkUntil(Object blocker, long deadline)</code></td><td>阻塞当前线程，并关联一个阻塞对象，直到指定的绝对时间点</td></tr><tr><td><code>void unpark(Thread thread)</code></td><td>唤醒指定的线程</td></tr><tr><td><code>Object getBlocker(Thread thread)</code></td><td>获取指定线程关联的阻塞对象</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>其中，<code>park()</code>和<code>unpark()</code>是最常用的方法，用于线程的阻塞和唤醒操作。</p></li><li class="lvl-2"><p>其他方法提供了更多灵活的线程阻塞和唤醒方式，如指定阻塞对象、等待一定时间等。</p></li><li class="lvl-2"><p><code>getBlocker()</code>方法可以获取指定线程关联的阻塞对象，以便进行进一步的操作或分析。</p></li></ul><h2 id="代码示例">代码示例</h2><h3 id="示例1–park-和unpark">示例1–<code>park()</code>和<code>unpark()</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockSupportExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">WorkerThread</span>());</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程暂停一段时间</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 唤醒WorkerThread线程</span></span><br><span class="line">        LockSupport.unpark(thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WorkerThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;WorkerThread started&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 线程阻塞</span></span><br><span class="line">            LockSupport.park();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;WorkerThread resumed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在这个示例中，我们创建了一个<code>WorkerThread</code>线程，并在主线程中启动它。主线程在启动<code>WorkerThread</code>后暂停了<code>2</code>秒钟，然后通过调用<code>LockSupport.unpark()</code>方法唤醒了<code>WorkerThread</code>线程。<code>WorkerThread</code>线程在<code>run()</code>方法中调用<code>LockSupport.park()</code>进入阻塞状态，直到被唤醒才会继续执行。执行结果会打印出&quot;WorkerThread started&quot;和&quot;WorkerThread resumed&quot;。</p></li></ul><h3 id="示例2–park-Object-blocker-和getBlocker-Thread-thread">示例2–<code>park(Object blocker)</code>和<code>getBlocker(Thread thread)</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParkBlockerExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">blocker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">// 创建一个阻塞对象</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread is parking...&quot;</span>);</span><br><span class="line">            LockSupport.park(blocker); <span class="comment">// 阻塞当前线程，并关联阻塞对象</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Thread is unparked&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取并输出关联的阻塞对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">associatedBlocker</span> <span class="operator">=</span> LockSupport.getBlocker(thread);</span><br><span class="line">        System.out.println(<span class="string">&quot;Associated blocker: &quot;</span> + associatedBlocker);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 唤醒线程</span></span><br><span class="line">        LockSupport.unpark(thread);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在上述示例中，我们创建了一个阻塞对象<code>blocker</code>。在thread线程中，我们调用<code>LockSupport.park(blocker)</code>方法阻塞当前线程，并将阻塞对象与线程关联。</p></li><li class="lvl-2"><p>在主线程中，我们使用<code>LockSupport.getBlocker(thread)</code>方法获取与线程关联的阻塞对象，并输出它。</p></li></ul><h3 id="park方法中阻塞对象的作用">park方法中阻塞对象的作用</h3><ul class="lvl-0"><li class="lvl-2"><p>当调用<code>LockSupport的park()</code>方法时，线程将被阻塞，等待被唤醒。<code>park(Object blocker)</code>方法是<code>park()</code>方法的一个重载形式，它允许您将一个阻塞对象与当前线程相关联。绑定阻塞对象的作用在于更好地识别和监控线程的阻塞原因。</p></li><li class="lvl-2"><p>当线程被阻塞时，可以通过调用<code>getBlocker(Thread thread)</code>方法来获取与该线程相关联的阻塞对象。这样，您可以在代码中根据阻塞对象进行更精确的条件判断、监控或其他操作。</p></li><li class="lvl-2"><p>以下是一些使用场景的例子，说明绑定阻塞对象的作用：</p><ul class="lvl-2"><li class="lvl-6">调试和诊断：当多个线程被阻塞时，可以使用阻塞对象来确定具体是哪个线程被阻塞，以及被阻塞的原因。通过获取阻塞对象，您可以在调试过程中定位问题，并根据阻塞对象的不同采取相应的调试措施。</li><li class="lvl-6">更精确的控制和唤醒：通过关联特定的阻塞对象，您可以在需要唤醒线程时，只选择唤醒与该阻塞对象相关联的线程。这种精确的唤醒机制可以避免不必要的线程唤醒，提高系统的性能和效率。</li><li class="lvl-6">条件等待：在某些情况下，您可能希望线程在特定条件下被阻塞，直到满足某个条件后才被唤醒。通过绑定阻塞对象，您可以根据不同的条件选择不同的阻塞对象，从而实现对不同条件的精确等待和唤醒。</li></ul></li><li class="lvl-2"><p>绑定阻塞对象的作用是提供更多的上下文信息，帮助您更好地理解和控制线程的阻塞状态。它可以作为一种辅助手段，用于更精确地调试、监控和控制线程的行为。</p></li></ul><h2 id="ReentrantLock的阻塞唤醒机制是基于LockSupport实现的">ReentrantLock的阻塞唤醒机制是基于LockSupport实现的</h2><ul class="lvl-0"><li class="lvl-2"><p><code>ReentrantLock</code>是Java中提供的可重入锁的实现，它使用了内部类<code>Sync</code>来管理锁的状态和线程的阻塞与唤醒。<code>Sync</code>类内部使用了<code>LockSupport</code>工具类来实现线程的阻塞和唤醒操作。</p></li><li class="lvl-2"><p>当一个线程无法获取到<code>ReentrantLock</code>的锁时，它会被阻塞，并且进入等待状态，在这种情况下，<code>ReentrantLock</code>内部会调用<code>LockSupport.park()</code>方法阻塞当前线程。</p></li><li class="lvl-2"><p>当其他线程释放了锁或者调用了<code>ReentrantLock</code>的<code>unlock()</code>方法时，被阻塞的线程将会被唤醒，此时<code>ReentrantLock</code>会通过调用<code>LockSupport.unpark()</code>方法来唤醒被阻塞的线程。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍LockSupport相关技术&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;jdk1.8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    <category term="java多线程" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://blog.hanqunfeng.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程--JUC并发工具类之CyclicBarrier</title>
    <link href="https://blog.hanqunfeng.com/2023/05/22/java-concurrency07-CyclicBarrier/"/>
    <id>https://blog.hanqunfeng.com/2023/05/22/java-concurrency07-CyclicBarrier/</id>
    <published>2023-05-22T14:34:05.000Z</published>
    <updated>2023-05-22T10:55:22.698Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍CyclicBarrier相关技术</p></li><li class="lvl-2"><p>本文基于<code>jdk1.8</code></p></li></ul><span id="more"></span><h2 id="CyclicBarrier介绍">CyclicBarrier介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>CyclicBarrier（回环栅栏或循环屏障），是 Java 并发库中的一个同步工具，通过它可以实现让一组线程等待至某个状态（屏障点）之后再全部同时执行。叫做回环是因为当所有等待线程都被释放以后，CyclicBarrier可以被重用。</p></li><li class="lvl-2"><p>CyclicBarrier内部维护了一个计数器，当线程到达临界点时，会调用await()方法进行等待。当计数器达到指定的数量时，所有等待的线程都会被释放，并继续执行后续操作。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/mWTzBf.jpg" alt="" width="900" height="600"></p></li></ul><h2 id="CyclicBarrier的常用方法">CyclicBarrier的常用方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>CyclicBarrier(int parties)</td><td>构造函数， parties表示屏障拦截的线程数量，每个线程调用 await 方法告诉 CyclicBarrier 我已经到达了屏</td></tr><tr><td>障，然后当前线程被阻塞。</td><td></td></tr><tr><td>CyclicBarrier(int parties, Runnable barrierAction)</td><td>构造函数，用于在线程到达屏障时，优先执行 barrierAction，方便处理更复杂的业务场景(该线程的执行时机是</td></tr><tr><td>在到达屏障之后再执行)</td><td></td></tr><tr><td>await()方法</td><td>线程通过调用await()方法进入等待状态，直到所有线程到达临界点。计数器将重置，并且所有等待的线程会被释放继续执行。</td></tr><tr><td>await(long timeout, TimeUnit unit)方法</td><td>超时等待</td></tr><tr><td>getParties()方法</td><td>获取参与线程的数量。</td></tr><tr><td>reset()方法</td><td>重置计数器，可以复用CyclicBarrier对象。</td></tr><tr><td>isBroken()方法</td><td>判断等待的线程是否被中断。</td></tr></tbody></table><h2 id="代码示例">代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_COUNT</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">CyclicBarrier</span> <span class="variable">barrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(THREAD_COUNT, <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;All threads have reached the barrier. Let&#x27;s continue!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并启动三个线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= THREAD_COUNT; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Worker</span>(barrier, <span class="string">&quot;Thread &quot;</span> + i));</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> CyclicBarrier barrier;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(CyclicBarrier barrier, String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.barrier = barrier;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot; has started its task.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟工作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(name + <span class="string">&quot; has reached the barrier.&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                barrier.await(); <span class="comment">// 等待其他线程到达栅栏</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(name + <span class="string">&quot; has continued its task.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在上述示例中，我们创建了一个<code>CyclicBarrier</code>对象，并指定参与线程的数量为<code>3</code>。</p></li><li class="lvl-2"><p>每个线程在执行任务前会先打印一条信息，然后模拟工作<code>2</code>秒钟。</p></li><li class="lvl-2"><p>接着，线程会调用<code>barrier.await()</code>方法等待其他线程到达栅栏。</p></li><li class="lvl-2"><p>当所有线程都到达栅栏后，其中一个线程会执行栅栏构造函数中传入的<code>Runnable</code>对象，并打印一条提示信息。</p></li><li class="lvl-2"><p>之后，所有线程会继续执行各自的任务。</p></li></ul><h2 id="CyclicBarrier的应用场景">CyclicBarrier的应用场景</h2><ul class="lvl-0"><li class="lvl-2"><p>多线程任务：<code>CyclicBarrier</code> 可以用于将复杂的任务分配给多个线程执行，并在所有线程完成工作后触发后续操作。</p></li><li class="lvl-2"><p>数据处理：<code>CyclicBarrier</code> 可以用于协调多个线程间的数据处理，在所有线程处理完数据后触发后续操作。</p></li></ul><h2 id="CyclicBarrier-与-CountDownLatch-区别">CyclicBarrier 与 CountDownLatch 区别</h2><ul class="lvl-0"><li class="lvl-2"><p><code>CountDownLatch</code> 是一次性的，<code>CyclicBarrier</code> 是可循环利用的</p></li><li class="lvl-2"><p><code>CountDownLatch</code> 参与的线程的职责是不一样的，有的在倒计时，有的在等待倒计时结束。<code>CyclicBarrier</code> 参与的线程职责是一样的。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍CyclicBarrier相关技术&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;jdk1.8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    <category term="java多线程" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://blog.hanqunfeng.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程--JUC并发工具类之CountDownLatch</title>
    <link href="https://blog.hanqunfeng.com/2023/05/22/java-concurrency06-CountDownLatch/"/>
    <id>https://blog.hanqunfeng.com/2023/05/22/java-concurrency06-CountDownLatch/</id>
    <published>2023-05-22T14:33:05.000Z</published>
    <updated>2023-05-22T09:56:59.726Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍CountDownLatch相关技术</p></li><li class="lvl-2"><p>本文基于<code>jdk1.8</code></p></li></ul><span id="more"></span><h2 id="CountDownLatch介绍">CountDownLatch介绍</h2><ul class="lvl-0"><li class="lvl-2"><p><code>CountDownLatch</code>提供了一种同步机制，用于在多个线程之间进行等待和协调。</p></li><li class="lvl-2"><p><code>CountDownLatch</code>是一种计数器，它允许一个或多个线程等待其他线程完成操作后再继续执行。</p></li><li class="lvl-2"><p><code>CountDownLatch</code>的工作原理很简单，它通过一个初始计数器来初始化，该计数器表示需要等待的线程数。当一个线程完成了它的操作时，计数器会减少。当计数器达到零时，所有等待的线程都会被释放，可以继续执行。</p></li></ul><h2 id="CountDownLatch的常用方法">CountDownLatch的常用方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>CountDownLatch(int count)</code></td><td>构造函数，创建一个CountDownLatch对象，指定初始计数器的值为count</td></tr><tr><td><code>void await()</code></td><td>阻塞调用此方法的线程，直到计数器达到零。如果计数器的值不为零，则调用线程将被阻塞</td></tr><tr><td>boolean await(long timeout, TimeUnit unit)</td><td>阻塞调用此方法的线程，直到计数器达到零或超过指定的等待时间。如果计数器的值不为零，则调用线程将被阻塞</td></tr><tr><td><code>void countDown()</code></td><td>计数器减少一个单位。当一个线程完成了它的操作时，应该调用此方法来减少计数器的值</td></tr><tr><td><code>long getCount()</code></td><td>获取当前计数器的值</td></tr></tbody></table><h2 id="代码示例">代码示例</h2><h3 id="示例1–多任务完成后合并汇总">示例1–多任务完成后合并汇总</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatchExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_COUNT</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(THREAD_COUNT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并启动三个线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= THREAD_COUNT; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Worker</span>(latch, <span class="string">&quot;Thread &quot;</span> + i)); <span class="comment">// 创建Worker对象并传递CountDownLatch和线程名称</span></span><br><span class="line">            thread.start(); <span class="comment">// 启动线程</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await(); <span class="comment">// 主线程等待所有线程完成任务</span></span><br><span class="line">            System.out.println(<span class="string">&quot;All threads have completed their tasks.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch latch;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(CountDownLatch latch, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.latch = latch; <span class="comment">// 初始化CountDownLatch</span></span><br><span class="line">        <span class="built_in">this</span>.name = name; <span class="comment">// 初始化线程名称</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; has started its task.&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟工作</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>); <span class="comment">// 线程休眠2秒，模拟执行任务的耗时操作</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; has completed its task.&quot;</span>);</span><br><span class="line">        latch.countDown(); <span class="comment">// 任务完成后计数器减少</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在上述示例中，主线程创建了一个<code>CountDownLatch</code>对象，并指定初始计数器的值为<code>3</code>。然后，主线程启动了三个工作线程，并将<code>CountDownLatch</code>对象传递给它们。</p></li><li class="lvl-2"><p>每个工作线程在执行任务前会输出开始信息，然后模拟执行任务的耗时操作（这里用<code>Thread.sleep(2000)</code>模拟），最后输出任务完成信息。在任务完成后，每个工作线程都会调用<code>latch.countDown()</code>来减少计数器的值。</p></li><li class="lvl-2"><p>主线程通过调用<code>latch.await()</code>方法阻塞自己，等待所有工作线程完成任务。当计数器的值为零时，主线程被唤醒，继续执行，输出&quot;All threads have completed their tasks.&quot;的信息。</p></li></ul><h3 id="示例2–模拟实现百米赛跑">示例2–模拟实现百米赛跑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">CountDownLatch</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>); <span class="comment">// begin 代表裁判 初始为 1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">CountDownLatch</span> <span class="variable">end</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">8</span>); <span class="comment">// end 代表玩家 初始为 8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@SneakyThrows</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="comment">// 预备状态</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;参赛者&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;已经准备好了&quot;</span>);</span><br><span class="line">                    <span class="comment">// 等待裁判吹哨，这里就类似于多个子线程等待某个共享资源的初始化完成后再开始执行。</span></span><br><span class="line">                    begin.await();</span><br><span class="line">                    <span class="comment">// 开始跑步</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;参赛者&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;开始跑步&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    <span class="comment">// 跑步结束, 跑完了</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;参赛者&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;到达终点&quot;</span>);</span><br><span class="line">                    <span class="comment">// 跑到终点, 计数器就减一</span></span><br><span class="line">                    end.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 等待 5s 就开始吹哨</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始比赛&quot;</span>);</span><br><span class="line">        <span class="comment">// 裁判吹哨, 计数器减一</span></span><br><span class="line">        begin.countDown();</span><br><span class="line">        <span class="comment">// 等待所有玩家到达终点，即主线程等待多个子线程完成任务后再继续执行。</span></span><br><span class="line">        end.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;比赛结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>上述代码展示了使用<code>CountDownLatch</code>进行比赛场景的模拟。裁判（<code>begin</code>）初始计数为<code>1</code>，代表裁判等待的条件为所有参赛者准备就绪。玩家（<code>end</code>）初始计数为<code>8</code>，代表参赛者的数量。</p></li><li class="lvl-2"><p>每个参赛者都会在准备好后等待裁判的指令，然后开始跑步，跑到终点后计数器减一。裁判会在等待<code>5</code>秒后吹哨，开始比赛。当所有玩家到达终点后，比赛结束。</p></li></ul><h2 id="CountDownLatch通常用于以下场景">CountDownLatch通常用于以下场景</h2><ul class="lvl-0"><li class="lvl-2"><p>主线程等待多个子线程完成任务后再继续执行。</p></li><li class="lvl-2"><p>多个子线程等待某个共享资源的初始化完成后再开始执行。</p></li><li class="lvl-2"><p>协调多个线程执行的时间点。</p></li></ul><h2 id="使用CountDownLatch的注意事项">使用CountDownLatch的注意事项</h2><ul class="lvl-0"><li class="lvl-2"><p>初始化计数器的值：在创建<code>CountDownLatch</code>对象时，需要确定初始计数器的值。该值应该与等待的线程数量一致，以确保所有线程完成任务后计数器的值为0。</p></li><li class="lvl-2"><p><code>await()</code>方法的阻塞：调用<code>await()</code>方法会使当前线程阻塞，直到计数器的值变为<code>0</code>。需要确保在调用<code>await()</code>方法之前，计数器的值能够达到<code>0</code>。否则，调用线程将一直被阻塞，无法继续执行。</p></li><li class="lvl-2"><p><code>countDown()</code>方法的调用：在每个线程完成任务后，都需要调用<code>countDown()</code>方法来减少计数器的值。确保在适当的位置调用<code>countDown()</code>，否则计数器的值无法正确减少，导致主线程一直被阻塞。</p></li><li class="lvl-2"><p>异常处理：在使用<code>CountDownLatch</code>时，需要注意处理可能抛出的<code>InterruptedException</code>异常。例如，在调用<code>await()</code>方法时需要捕获<code>InterruptedException</code>，并进行适当的处理。</p></li><li class="lvl-2"><p><code>CountDownLatch</code>的复用：<code>CountDownLatch</code>对象在计数器值减少到<code>0</code>后，可以重用。可以通过重新设置计数器的值来复用<code>CountDownLatch</code>对象，以便在新的场景中再次使用。</p></li><li class="lvl-2"><p>计数器值的访问：可以使用<code>getCount()</code>方法获取当前计数器的值，以便在需要时查看计数器的状态。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍CountDownLatch相关技术&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;jdk1.8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    <category term="java多线程" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://blog.hanqunfeng.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程--JUC并发工具类之Semaphore</title>
    <link href="https://blog.hanqunfeng.com/2023/05/22/java-concurrency05-Semaphore/"/>
    <id>https://blog.hanqunfeng.com/2023/05/22/java-concurrency05-Semaphore/</id>
    <published>2023-05-22T14:32:05.000Z</published>
    <updated>2023-05-22T09:29:21.262Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍Semaphore相关技术</p></li><li class="lvl-2"><p>本文基于<code>jdk1.8</code></p></li></ul><span id="more"></span><h2 id="Semaphore介绍">Semaphore介绍</h2><ul class="lvl-0"><li class="lvl-2"><p><code>Semaphore</code>（信号量）是一种用于多线程编程的同步工具，用于控制同时访问某个资源的线程数量。</p></li><li class="lvl-2"><p><code>Semaphore</code>维护了一个计数器，线程可以通过调用<code>acquire()</code>方法来获取<code>Semaphore</code>中的许可证，当计数器为<code>0</code>时，调用<code>acquire()</code>的线程将被阻塞，直到有其他线程释放许可证；</p></li><li class="lvl-2"><p>线程可以通过调用<code>release()</code>方法来释放<code>Semaphore</code>中的许可证，这会使<code>Semaphore</code>中的计数器增加，从而允许更多的线程访问共享资源。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/kcdir2.jpg" alt=""></p></li></ul><h2 id="Semaphore常用方法">Semaphore常用方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Semaphore(int permits)</code></td><td>构造函数，创建具有给定许可数的Semaphore对象</td></tr><tr><td><code>Semaphore(int permits,boolean fair)</code></td><td>构造函数，创建具有给定许可数的Semaphore对象，fair 表示公平性，如果这个设为 true 的话，下次执行的线程会是等待最久的线程</td></tr><tr><td><code>int availablePermits()</code></td><td>返回当前可用的许可数</td></tr><tr><td><code>void acquire()</code></td><td>获取一个许可，如果没有可用的许可，则阻塞直到有可用的许可</td></tr><tr><td><code>void release()</code></td><td>释放一个许可</td></tr><tr><td><code>boolean tryAcquire()</code></td><td>尝试获取一个许可，如果有可用的许可，则获取成功，返回true；否则返回false</td></tr></tbody></table><h2 id="Semaphore代码示例">Semaphore代码示例</h2><ul class="lvl-0"><li class="lvl-2"><p>在这个示例中，Semaphore的初始许可数为2，意味着最多允许两个线程同时访问共享资源。</p></li><li class="lvl-2"><p>每个工作线程在执行工作前都会请求一个许可，如果许可可用，它将获得许可并执行工作，然后释放许可供其他线程使用。</p></li><li class="lvl-2"><p>如果没有可用的许可，线程将被阻塞直到有可用的许可为止。通过Semaphore的控制，最多允许两个线程并发执行，而第三个线程需要等待前面的线程释放许可后才能执行。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreConcurrencyExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">2</span>); <span class="comment">// 创建Semaphore对象，限制并发数为2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并启动三个线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Worker</span>(semaphore, <span class="string">&quot;Thread 1&quot;</span>));</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Worker</span>(semaphore, <span class="string">&quot;Thread 2&quot;</span>));</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Worker</span>(semaphore, <span class="string">&quot;Thread 3&quot;</span>));</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Semaphore semaphore;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(Semaphore semaphore, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.semaphore = semaphore;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot; is waiting for a permit.&quot;</span>);</span><br><span class="line">            semaphore.acquire(); <span class="comment">// 获取许可</span></span><br><span class="line"></span><br><span class="line">            System.out.println(name + <span class="string">&quot; has acquired a permit.&quot;</span>);</span><br><span class="line">            <span class="comment">// 模拟工作</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(name + <span class="string">&quot; is releasing the permit.&quot;</span>);</span><br><span class="line">            semaphore.release(); <span class="comment">// 释放许可</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Semaphore应用场景">Semaphore应用场景</h2><ul class="lvl-0"><li class="lvl-2"><p>限流：<code>Semaphore</code>可以用于限制对共享资源的并发访问数量，以控制系统的流量。</p></li><li class="lvl-2"><p>资源池：<code>Semaphore</code>可以用于实现资源池，以维护一组有限的共享资源</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍Semaphore相关技术&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;jdk1.8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    <category term="java多线程" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://blog.hanqunfeng.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程--JUC并发工具类之StampedLock</title>
    <link href="https://blog.hanqunfeng.com/2023/05/22/java-concurrency04-StampedLock/"/>
    <id>https://blog.hanqunfeng.com/2023/05/22/java-concurrency04-StampedLock/</id>
    <published>2023-05-22T14:31:05.000Z</published>
    <updated>2023-05-22T09:08:15.827Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍StampedLock相关技术</p></li><li class="lvl-2"><p>本文基于<code>jdk1.8</code></p></li></ul><span id="more"></span><h2 id="StampedLock介绍">StampedLock介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>如果我们深入分析<code>ReentrantReadWriteLock</code>，会发现它有个潜在的问题：如果有线程正在读，写线程需要等待读线程释放锁后才能获取写锁，即读的过程中不允许写，这是一种悲观的读锁。</p></li><li class="lvl-2"><p>为了进一步提升并发执行效率，Java 8引入了新的读写锁：StampedLock。</p></li><li class="lvl-2"><p><code>StampedLock</code>和<code>ReentrantReadWriteLock</code>相比，改进之处在于：读的过程中也允许获取写锁后写入！在原先读写锁的基础上新增了一种叫乐观读（<code>Optimistic Reading</code>）的模式。该模式并不会加锁，所以不会阻塞线程，会有更高的吞吐量和更高的性能。</p></li><li class="lvl-2"><p>它的设计初衷是作为一个内部工具类，用于开发其他线程安全的组件，提升系统性能，并且编程模型也比<code>ReentrantReadWriteLock</code> 复杂，所以用不好就很容易出现死锁或者线程安全等莫名其妙的问题。</p></li><li class="lvl-2"><p>注意：<code>StampedLock</code>是Java 8引入的类，需要使用支持Java 8及更高版本的编译器和运行时环境。</p></li></ul><h2 id="StampLock三种访问模式">StampLock三种访问模式</h2><ul class="lvl-0"><li class="lvl-2"><p><code>Writing</code>（独占写锁）：<code>writeLock</code> 方法会使线程阻塞等待独占访问，可类比<code>ReentrantReadWriteLock</code> 的写锁模式，同一时刻有且只有一个写线程获取锁资源；</p></li><li class="lvl-2"><p><code>Reading</code>（悲观读锁）：<code>readLock</code>方法，允许多个线程同时获取悲观读锁，悲观读锁与独占写锁互斥，与乐观读共享。</p></li><li class="lvl-2"><p><code>Optimistic Reading</code>（乐观读）：这里需要注意了，乐观读并没有加锁，也就是不会有 <code>CAS</code> 机制并且没有阻塞线程。仅当当前未处于 <code>Writing</code> 模式 <code>tryOptimisticRead</code> 才会返回非 <code>0</code> 的邮戳（<code>Stamp</code>），如果在获取乐观读之后没有出现写模式线程获取锁，则在方法<code>validate</code>返回 <code>true</code> ，允许多个线程获取乐观读以及读锁，同时允许一个写线程获取写锁。</p></li></ul><h2 id="乐观读编程模型的模板">乐观读编程模型的模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">optimisticRead</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 非阻塞乐观读模式获取版本信息</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">stamp</span> <span class="operator">=</span> lock.tryOptimisticRead();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 拷贝共享数据到线程本地栈中，即将共享变量赋值给方法内变量</span></span><br><span class="line">    copyVaraibale2ThreadMemory();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 校验乐观读模式读取的数据是否被修改过</span></span><br><span class="line">    <span class="keyword">if</span> (!lock.validate(stamp)) &#123;</span><br><span class="line">        <span class="comment">// 3.1 校验未通过，上读锁</span></span><br><span class="line">        stamp = lock.readLock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3.2 拷贝共享变量数据到局部变量</span></span><br><span class="line">            copyVaraibale2ThreadMemory();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放读锁</span></span><br><span class="line">            lock.unlockRead(stamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.3 校验通过，使用线程本地栈的数据进行逻辑操作</span></span><br><span class="line">    useThreadMemoryVarables();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StampedLock的代码示例">StampedLock的代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.StampedLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StampedLockExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> y;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">StampedLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StampedLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动坐标点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deltaX X轴增量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deltaY Y轴增量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">double</span> deltaX, <span class="type">double</span> deltaY)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">stamp</span> <span class="operator">=</span> lock.writeLock(); <span class="comment">// 获取写锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            x += deltaX;</span><br><span class="line">            y += deltaY;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlockWrite(stamp); <span class="comment">// 释放写锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算当前坐标点与原点的距离</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原点的距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">distanceFromOrigin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">stamp</span> <span class="operator">=</span> lock.tryOptimisticRead(); <span class="comment">// 尝试获取乐观读锁</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">currentX</span> <span class="operator">=</span> x;</span><br><span class="line">        <span class="type">double</span> <span class="variable">currentY</span> <span class="operator">=</span> y;</span><br><span class="line">        <span class="keyword">if</span> (!lock.validate(stamp)) &#123; <span class="comment">// 校验乐观读锁是否有效</span></span><br><span class="line">            stamp = lock.readLock(); <span class="comment">// 乐观读锁无效则获取悲观读锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentX = x;</span><br><span class="line">                currentY = y;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlockRead(stamp); <span class="comment">// 释放悲观读锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(currentX * currentX + currentY * currentY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果当前坐标在原点，则移动坐标</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newX 新的X坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newY 新的Y坐标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveIfAtOrigin</span><span class="params">(<span class="type">double</span> newX, <span class="type">double</span> newY)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">stamp</span> <span class="operator">=</span> lock.readLock(); <span class="comment">// 获取悲观读锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (x == <span class="number">0.0</span> &amp;&amp; y == <span class="number">0.0</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">writeStamp</span> <span class="operator">=</span> lock.tryConvertToWriteLock(stamp); <span class="comment">// 尝试将悲观读锁升级为写锁</span></span><br><span class="line">                <span class="keyword">if</span> (writeStamp != <span class="number">0L</span>) &#123; <span class="comment">// 升级成功</span></span><br><span class="line">                    x = newX;</span><br><span class="line">                    y = newY;</span><br><span class="line">                    stamp = writeStamp;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    lock.unlockRead(stamp); <span class="comment">// 释放悲观读锁</span></span><br><span class="line">                    stamp = lock.writeLock(); <span class="comment">// 获取写锁</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock(stamp); <span class="comment">// 释放锁（读锁或写锁）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在上述示例中，<code>StampedLockExample</code>类使用了<code>StampedLock</code>来管理对x和y坐标的访问。</p></li><li class="lvl-2"><p>其中<code>move</code>方法使用写锁来更新x和y坐标的值。</p></li><li class="lvl-2"><p><code>distanceFromOrigin</code>方法使用乐观读锁尝试读取<code>x</code>和<code>y</code>坐标的值，如果乐观读锁无效，则获取悲观读锁来读取。</p></li><li class="lvl-2"><p><code>moveIfAtOrigin</code>方法首先获取悲观读锁，然后检查当前坐标是否在原点。如果在原点，则尝试将悲观读锁升级为写锁，以便进行坐标更新。如果升级失败，则释放悲观读锁并获取写锁。</p></li></ul><h2 id="StampedLock使用场景">StampedLock使用场景</h2><ul class="lvl-0"><li class="lvl-2"><p>适用于读多写少的高并发场景</p></li></ul><h2 id="使用StampedLock的注意事项">使用StampedLock的注意事项</h2><ul class="lvl-0"><li class="lvl-2"><p><code>StampedLock</code> 写锁是不可重入的，如果当前线程已经获取了写锁，再次重复获取的话就会死锁，使用过程中一定要注意；</p></li><li class="lvl-2"><p><code>StampedLock</code>的悲观读、写锁都不支持条件变量 <code>Conditon</code> ，当需要这个特性的时候需要注意；</p></li><li class="lvl-2"><p>如果线程阻塞在 <code>StampedLock</code> 的 <code>readLock()</code> 或者 <code>writeLock()</code> 上时，此时调用该阻塞线程的 <code>interrupt()</code> 方法，会导致 CPU 飙升。所以，使用 <code>StampedLock</code> 一定不要调用中断操作，如果需要支持中断功能，一定使用可中断的悲观读锁 <code>readLockInterruptibly()</code> 和写锁 <code>writeLockInterruptibly()</code>。</p></li></ul><h2 id="ReentrantLock-、-ReentrantReadWriteLock-和-StampedLock-的比较">ReentrantLock 、 ReentrantReadWriteLock 和 StampedLock 的比较</h2><table><thead><tr><th>特性</th><th>ReentrantLock</th><th>ReentrantReadWriteLock</th><th>StampedLock</th></tr></thead><tbody><tr><td>锁类型</td><td>独占锁（Exclusive Lock）</td><td>读写锁（Read-Write Lock）</td><td>乐观读锁和悲观读锁（Optimistic and Pessimistic Read Locks）</td></tr><tr><td>读-读并发性</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>读-写并发性</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>写-写并发性</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr><td>锁的公平性</td><td>支持设置为公平或非公平锁</td><td>支持设置为公平或非公平锁</td><td>不支持设置公平性(非公平锁)</td></tr><tr><td>性能</td><td>适用于读操作少、写操作多的场景</td><td>适用于读操作频繁、写操作较少的场景</td><td>适用于乐观读多于写的场景</td></tr><tr><td>锁降级</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>可重入性</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>API</td><td>提供基本锁操作方法（lock、unlock、tryLock等）</td><td>提供与ReentrantLock类似的锁操作方法，以及读锁和写锁的获取方法</td><td>提供乐观读锁和悲观读锁的获取方法，以及锁的转换操作</td></tr><tr><td>适用场景</td><td>读操作较少、写操作较多的场景，互斥访问共享资源</td><td>读操作频繁、写操作较少的场景，读多写少的并发访问</td><td>读操作多于写操作的场景，乐观读锁性能好</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍StampedLock相关技术&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;jdk1.8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    <category term="java多线程" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://blog.hanqunfeng.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程--JUC并发工具类之ReentrantReadWriteLock</title>
    <link href="https://blog.hanqunfeng.com/2023/05/22/java-concurrency03-ReentrantReadWriteLock/"/>
    <id>https://blog.hanqunfeng.com/2023/05/22/java-concurrency03-ReentrantReadWriteLock/</id>
    <published>2023-05-22T14:30:05.000Z</published>
    <updated>2023-05-22T09:08:05.554Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍ReentrantReadWriteLock相关技术</p></li><li class="lvl-2"><p>本文基于<code>jdk1.8</code></p></li></ul><span id="more"></span><h2 id="读写锁">读写锁</h2><ul class="lvl-0"><li class="lvl-2"><p>读写锁<code>ReadWriteLock</code>，顾名思义一把锁分为读与写两部分，读锁允许多个线程同时获得，因为读操作本身是线程安全的。而写锁是互斥锁，不允许多个线程同时获得写锁。并且读与写操作也是互斥的。读写锁适合多读少写的业务场景。</p></li><li class="lvl-2"><p>线程进入读锁的前提条件：</p><ul class="lvl-2"><li class="lvl-6">没有其他线程的写锁（读写互斥，但是读读不互斥）</li><li class="lvl-6">没有写请求，或者有写请求但调用线程和持有锁的线程是同一个。(写时可以读，但读时不可以写)</li></ul></li><li class="lvl-2"><p>线程进入写锁的前提条件：</p><ul class="lvl-2"><li class="lvl-6">没有其他线程的读锁（读写互斥）</li><li class="lvl-6">没有其他线程的写锁（写写互斥）</li></ul></li><li class="lvl-2"><p>而读写锁有以下三个重要的特性：</p><ul class="lvl-2"><li class="lvl-6">公平选择性：支持非公平（默认）和公平的锁获取方式，吞吐量还是非公平优于公平。</li><li class="lvl-6">可重入：读锁和写锁都支持线程重入。以读写线程为例：读线程获取读锁后，能够再次获取读锁。写线程在获取写锁之后能够再次获取写锁，同时也可以获取读锁。</li><li class="lvl-6">锁降级：遵循获取写锁、再获取读锁最后释放写锁的次序，写锁能够降级成为读锁。</li></ul></li></ul><h2 id="ReentrantReadWriteLock">ReentrantReadWriteLock</h2><ul class="lvl-0"><li class="lvl-2"><p><code>ReentrantReadWriteLock</code> 是可重入的读写锁实现类。在它内部，维护了一对相关的锁，一个用于只读操作，另一个用于写入操作。</p></li><li class="lvl-2"><p>只要没有 <code>Writer</code> 线程，读锁可以由多个 <code>Reader</code> 线程同时持有。也就是说，写锁是独占的，读锁是共享的。</p></li><li class="lvl-2"><p><code>RentrantReadWriteLock</code>支持<code>锁降级</code>，但不支持<code>锁升级</code>，目的也是保证数据可见性。</p></li></ul><h3 id="基本语法">基本语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">ReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"><span class="comment">// 创建读锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">readLock</span> <span class="operator">=</span> readWriteLock.readLock();</span><br><span class="line"><span class="comment">// 创建写锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">writeLock</span> <span class="operator">=</span> readWriteLock.writeLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读操作上读锁</span></span><br><span class="line"><span class="keyword">public</span> Data <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    readLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 业务逻辑</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        readLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写操作上写锁</span></span><br><span class="line"><span class="keyword">public</span> Data <span class="title function_">put</span><span class="params">(String key, Data value)</span> &#123;</span><br><span class="line">    writeLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 业务逻辑</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        writeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em></p><h2 id="锁降级">锁降级</h2><p>锁降级指的是写锁降级成为读锁。<br>如果当前线程拥有写锁，然后将其释放，最后再获取读锁，这种分段完成的过程不能称之为锁降级。<br>锁降级是指在持有写锁的情况下获取读锁，然后释放写锁。<br>锁降级可以帮助我们拿到当前线程修改后的结果而不被其他线程所破坏，防止更新丢失。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">ReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">r</span> <span class="operator">=</span> readWriteLock.readLock();</span><br><span class="line"><span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">w</span> <span class="operator">=</span> readWriteLock.writeLock();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performWriteOperation</span><span class="params">()</span> &#123;</span><br><span class="line">    w.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行写操作，例如修改共享数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 锁降级：获取读锁，并释放写锁</span></span><br><span class="line">        r.lock();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        w.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行读操作，例如读取共享数据</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        r.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>锁降级中读锁的获取是否必要呢？答案是必要的。</strong></em><br>主要是为了保证数据的可见性，如果当前线程不获取读锁而是直接释放写锁，假设此刻另一个线程（记作线程T）获取了写锁并修改了数据，那么当前线程无法感知线程T的数据更新。<br>如果当前线程获取读锁，即遵循锁降级的步骤，则线程T将会被阻塞，直到当前线程使用数据并释放读锁之后，线程T才能获取写锁进行数据更新。</p><h2 id="锁升级">锁升级</h2><p>锁降级指的是读锁升级成为写锁。<br>RentrantReadWriteLock不支持锁升级（把持读锁、获取写锁，最后释放读锁的过程）。<br>目的也是保证数据可见性，如果读锁已被多个线程获取，其中任意线程成功获取了写锁并更新了数据，则其更新对其他获取到读锁的线程是不可见的。</p></div><h2 id="ReentrantReadWriteLock应用场景">ReentrantReadWriteLock应用场景</h2><ul class="lvl-0"><li class="lvl-2"><p>读多写少：<code>ReentrantReadWriteLock</code>适用于读操作比写操作频繁的场景，因为它允许多个读线程同时访问共享数据，而写操作是独占的。</p></li><li class="lvl-2"><p>缓存：<code>ReentrantReadWriteLock</code>可以用于实现缓存，因为它可以有效地处理大量的读操作，同时保护缓存数据的一致性。</p></li></ul><h2 id="ReentrantLock-和-ReentrantReadWriteLock-比较">ReentrantLock 和 ReentrantReadWriteLock 比较</h2><table><thead><tr><th>特性</th><th>ReentrantLock</th><th>ReentrantReadWriteLock</th></tr></thead><tbody><tr><td>锁类型</td><td>独占锁（Exclusive Lock）</td><td>读写锁（Read-Write Lock）</td></tr><tr><td>读-读并发性</td><td>不支持</td><td>支持</td></tr><tr><td>读-写并发性</td><td>不支持</td><td>支持</td></tr><tr><td>写-写并发性</td><td>不支持</td><td>不支持</td></tr><tr><td>锁的公平性</td><td>支持设置为公平或非公平锁</td><td>支持设置为公平或非公平锁</td></tr><tr><td>性能</td><td>适用于读操作少、写操作多的场景</td><td>适用于读操作频繁、写操作较少的场景</td></tr><tr><td>锁降级</td><td>不支持</td><td>支持</td></tr><tr><td>可重入性</td><td>支持</td><td>支持</td></tr><tr><td>API</td><td>提供基本锁操作方法（lock、unlock、tryLock等）</td><td>提供与ReentrantLock类似的锁操作方法，以及读锁和写锁的获取方法</td></tr><tr><td>适用场景</td><td>读操作较少、写操作较多的场景，互斥访问共享资源</td><td>读操作频繁、写操作较少的场景，读多写少的并发访问</td></tr></tbody></table><h2 id="ReentrantReadWriteLock-的问题">ReentrantReadWriteLock 的问题</h2><ul class="lvl-0"><li class="lvl-2"><p>如果有线程正在读，写线程需要等待读线程释放锁后才能获取写锁，即读的过程中不允许写，这是一种悲观的读锁。</p></li></ul><h2 id="悲观锁与乐观锁">悲观锁与乐观锁</h2><table><thead><tr><th>锁策略</th><th>悲观锁（Pessimistic Locking）</th><th>乐观锁（Optimistic Locking）</th></tr></thead><tbody><tr><td>预期</td><td>悲观锁认为并发访问中会发生冲突，因此默认情况下假设其他线程会干扰当前线程的操作。</td><td>乐观锁认为并发冲突的概率较低，因此默认情况下假设其他线程不会干扰当前线程的操作。</td></tr><tr><td>实现方式</td><td>悲观锁通常使用互斥锁（如ReentrantLock）或数据库的行级锁来实现。</td><td>乐观锁通常使用版本号（Versioning）或比较并交换（Compare and Swap）等机制来实现。</td></tr><tr><td>加锁时机</td><td>悲观锁在访问共享资源之前获取锁，以确保其他线程无法同时访问资源。</td><td>乐观锁在更新数据时不进行加锁，而是在更新时检查是否有其他线程修改了数据。如果未发生变化，则进行更新，否则进行冲突处理。</td></tr><tr><td>数据一致性</td><td>悲观锁保证了数据的完整性和一致性，因为始终保持对共享资源的独占访问。</td><td>乐观锁无法保证数据的一致性，因为在更新时可能会发生冲突，需要进行相应的冲突处理，可能导致部分更新被丢弃或需要重试。</td></tr><tr><td>竞争与性能</td><td>悲观锁在并发访问高的情况下可能导致线程竞争和性能下降，因为每个线程都需要等待获取锁。</td><td>乐观锁避免了大部分加锁和解锁开销，适用于并发冲突概率较低的场景，可以提高并发性能。但如果冲突频率较高，乐观锁可能需要进行多次重试或回滚操作。</td></tr><tr><td>适用场景</td><td>悲观锁适用于并发冲突概率较高的场景，需要保证数据的一致性和完整性，适用于互斥访问共享资源的场景。</td><td>乐观锁适用于并发冲突概率较低的场景，适用于读多写少的并发访问，可以提高并发性能，但需要处理可能的冲突和数据一致性</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍ReentrantReadWriteLock相关技术&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;jdk1.8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    <category term="java多线程" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://blog.hanqunfeng.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程--JUC并发工具类之ReentrantLock</title>
    <link href="https://blog.hanqunfeng.com/2023/05/19/java-concurrency02-ReentrantLock/"/>
    <id>https://blog.hanqunfeng.com/2023/05/19/java-concurrency02-ReentrantLock/</id>
    <published>2023-05-19T14:30:05.000Z</published>
    <updated>2023-05-25T02:09:44.508Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍ReentrantLock相关技术</p></li><li class="lvl-2"><p>本文基于<code>jdk1.8</code></p></li></ul><span id="more"></span><h2 id="ReentrantLock">ReentrantLock</h2><ul class="lvl-0"><li class="lvl-2"><p>ReentrantLock 是一种可重入的独占锁，它允许同一个线程多次获取同一个锁而不会被阻塞。</p></li><li class="lvl-2"><p>它的功能类似于 synchronized，是一种互斥锁，可以保证线程安全。</p></li><li class="lvl-2"><p>相对于 synchronized，ReentrantLock 具备如下特点：</p><ul class="lvl-2"><li class="lvl-6">可中断</li><li class="lvl-6">可以设置超时时间</li><li class="lvl-6">可以设置为公平锁</li><li class="lvl-6">支持多个条件变量</li><li class="lvl-6">与 synchronized 一样，都支持可重入</li></ul></li><li class="lvl-2"><p>它的主要应用场景是在多线程环境下对共享资源进行独占式访问，以保证数据的一致性和安全性。</p></li></ul><h3 id="常用API">常用API</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void lock()</td><td>获取锁，调用该方法当前线程会获取锁，当锁获得后，该方法返回</td></tr><tr><td>void lockInterruptibly() throws InterruptedException</td><td>可中断的获取锁，和<code>lock()</code>方法不同之处在于该方法会响应中断，即在锁的获取中可以中断当前线程</td></tr><tr><td>boolean tryLock()</td><td>尝试非阻塞的获取锁，调用该方法后立即返回。如果能够获取到返回<code>true</code>，否则返回<code>false</code></td></tr><tr><td>boolean tryLock(long time, TimeUnit unit) throws InterruptedException</td><td>超时获取锁，当前线程在以下三种情况下会被返回:<br>1. 当前线程在超时时间内获取了锁，返回<code>true</code><br>2. 当前线程在超时时间内被中断,抛出<code>InterruptedException</code><br>3. 超时时间结束，返回<code>false</code></td></tr><tr><td>void unlock()</td><td>释放锁</td></tr><tr><td>Condition newCondition()</td><td>获取等待通知组件，该组件和当前的锁绑定，当前线程只有获取了锁，才能调用该组件的<code>await()</code>方法，而调用后，当前线程将释放锁</td></tr></tbody></table><h3 id="基本语法">基本语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();<span class="comment">//默认非公平锁</span></span><br><span class="line"></span><br><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);<span class="comment">//公平锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加锁 阻塞</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 解锁</span></span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试加锁 非阻塞</span></span><br><span class="line"><span class="keyword">if</span> (lock.tryLock(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在使用时要注意 4 个问题：</p><ul class="lvl-2"><li class="lvl-6"><ol><li class="lvl-9">默认情况下 ReentrantLock 为非公平锁而非公平锁;</li></ol></li><li class="lvl-6"><ol start="2"><li class="lvl-9">加锁次数和释放锁次数一定要保持一致，否则会导致线程阻塞或程序异常;</li></ol></li><li class="lvl-6"><ol start="3"><li class="lvl-9">加锁操作一定要放在 try 代码之前，这样可以避免未加锁成功又释放锁的异常;</li></ol></li><li class="lvl-6"><ol start="4"><li class="lvl-9">释放锁一定要放在 finally 中，否则会导致线程阻塞。</li></ol></li></ul></li></ul><div class="tips"><p><em><strong>小贴士</strong></em></p><h2 id="公平锁和非公平锁">公平锁和非公平锁</h2><ul class="lvl-1"><li class="lvl-2">公平锁：线程在获取锁时，按照等待的先后顺序获取锁。</li><li class="lvl-2">非公平锁：线程在获取锁时，不按照等待的先后顺序获取锁，而是随机获取锁。</li></ul><h2 id="可重入锁">可重入锁</h2><ul class="lvl-1"><li class="lvl-2"><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象），不会因为之前已经获取过还没释放而阻塞。</p></li><li class="lvl-2"><p>Java中<code>ReentrantLock</code>和<code>synchronized</code>都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。</p></li><li class="lvl-2"><p>在实际开发中，可重入锁常常应用于递归操作、调用同一个类中的其他方法、锁嵌套等场景中。</p></li></ul></div><h2 id="ReentrantLock的等待通知机制">ReentrantLock的等待通知机制</h2><ul class="lvl-0"><li class="lvl-2"><p><code>java.util.concurrent</code>类库中提供<code>Condition</code>类来实现线程之间的协调。</p></li><li class="lvl-2"><p>调用<code>Condition.await()</code> 方法使线程等待，同时释放锁</p></li><li class="lvl-2"><p>其他线程调用<code>Condition.signal()</code> 或 <code>Condition.signalAll()</code> 方法唤醒等待的线程。</p></li><li class="lvl-2"><p>注意：调用<code>Condition</code>的<code>await()</code>和<code>signal()</code>方法，都必须在lock保护之内。</p></li><li class="lvl-2"><p>下面是一个使用ReentrantLock的生产者–消费者模型的示例代码，在这个示例程序中，我们使用了一个ReentrantLock和两个Condition（notFull和notEmpty）来实现等待通知机制。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerConsumerExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(); <span class="comment">// 共享队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(); <span class="comment">// 可重入锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Condition</span> <span class="variable">notFull</span> <span class="operator">=</span> lock.newCondition(); <span class="comment">// 非满条件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> lock.newCondition(); <span class="comment">// 非空条件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">producerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>()); <span class="comment">// 创建生产者线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">consumerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>()); <span class="comment">// 创建消费者线程</span></span><br><span class="line">        producerThread.start(); <span class="comment">// 启动生产者线程</span></span><br><span class="line">        consumerThread.start(); <span class="comment">// 启动消费者线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                lock.lock(); <span class="comment">// 获取锁</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (queue.size() == CAPACITY) &#123;</span><br><span class="line">                        <span class="comment">// 队列已满，等待非满条件</span></span><br><span class="line">                        notFull.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.offer(i); <span class="comment">// 将项目放入队列</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;生产者生产: &quot;</span> + i);</span><br><span class="line">                    <span class="comment">// 通知消费者队列非空</span></span><br><span class="line">                    notEmpty.signal();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                lock.lock(); <span class="comment">// 获取锁</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">                        <span class="comment">// 队列为空，等待非空条件</span></span><br><span class="line">                        notEmpty.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">item</span> <span class="operator">=</span> queue.poll(); <span class="comment">// 从队列中取出项目</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;消费者消费: &quot;</span> + item);</span><br><span class="line">                    <span class="comment">// 通知生产者队列非满</span></span><br><span class="line">                    notFull.signal();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>对于<code>Condition</code>的<code>await()</code>和<code>signal()</code>方法，它们的行为与使用<code>wait()</code>和<code>notify()</code>方法时的情况类似。具体而言：</p><ul class="lvl-2"><li class="lvl-6"><code>Condition</code>的<code>await()</code>方法会释放当前线程持有的锁，并使线程进入等待状态，直到接收到<code>signal()</code>方法的通知后才会重新竞争锁并继续执行。</li><li class="lvl-6"><code>Condition</code>的<code>signal()</code>方法会发送一个通知给等待在该条件上的一个线程，使其从等待状态被唤醒。注意，<code>signal()</code>方法执行后，并不会立即释放锁，它会等待当前线程执行完临界区代码后才会释放锁，然后等待被唤醒的线程重新竞争锁。</li></ul></li></ul><h2 id="ReentrantLock具体应用场景">ReentrantLock具体应用场景</h2><ul class="lvl-0"><li class="lvl-2"><p>1.解决多线程竞争资源的问题，例如多个线程同时对同一个数据库进行写操作，可以使用ReentrantLock保证每次只有一个线程能够写入。</p></li><li class="lvl-2"><p>2.实现多线程任务的顺序执行，例如在一个线程执行完某个任务后，再让另一个线程执行任务。</p></li><li class="lvl-2"><p>3.实现多线程等待/通知机制，例如在某个线程执行完某个任务后，通知其他线程继续执行任务。</p></li></ul><h2 id="ReentrantLock的问题">ReentrantLock的问题</h2><ul class="lvl-0"><li class="lvl-2"><p>ReentrantLock 是一个互斥锁，同一时间只允许一个线程持有锁，其他线程必须等待释放锁后才能获取锁，适用于那些读操作少、写操作多的场景，因为读操作时其他线程无法读取，导致并发性能较低。</p></li><li class="lvl-2"><p>ReentrantLock 可以是公平锁（fairness=true）或非公平锁（fairness=false）。在公平锁模式下，锁将按照线程请求的顺序分配，但会导致性能下降。在非公平锁模式下，线程有机会插队获取锁，可能导致某些线程长时间等待。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍ReentrantLock相关技术&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;jdk1.8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    <category term="java多线程" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://blog.hanqunfeng.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程--基本概念</title>
    <link href="https://blog.hanqunfeng.com/2023/05/18/java-concurrency01-base/"/>
    <id>https://blog.hanqunfeng.com/2023/05/18/java-concurrency01-base/</id>
    <published>2023-05-18T14:30:05.000Z</published>
    <updated>2023-06-01T02:19:14.968Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍java并发编程相关技术</p></li><li class="lvl-2"><p>本文基于<code>jdk1.8</code></p></li><li class="lvl-2"><p>并发编程是为了解决什么问题的？<br><em><strong>性能+线程安全</strong></em></p></li></ul><span id="more"></span><h2 id="Java并发编程">Java并发编程</h2><h3 id="并发与并行">并发与并行</h3><ul class="lvl-0"><li class="lvl-2"><p>并发 <code>Concurrent</code>：指应用能够交替执行不同的任务，比如单 CPU 核心下执行多线程并非是同时执行多个任务,如果你开两个线程执行,就是在你几乎不可能察觉到的速度不断去切换这两个任务,已达到&quot;同时执行效果&quot;,其实并不是的,只是计算机的速度太快,我们无法察觉到而已。</p></li><li class="lvl-2"><p>并行 <code>Parallel</code>：指应用能够同时在多个CPU核心下执行不同的任务，例:吃饭的时候可以边吃饭边打电话,这两件事情可以同时执行</p></li><li class="lvl-2"><p>两者区别：一个是单核交替执行,一个是多核同时执行。</p></li></ul><h3 id="线程的状态-生命周期">线程的状态/生命周期</h3><p>Java 中线程的状态分为 6 种：</p><ol><li class="lvl-3"><p>初始(<code>NEW</code>)：新创建了一个线程对象，但还没有调用 start()方法。</p></li><li class="lvl-3"><p>运行(<code>RUNNABLE</code>)：Java 线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。线程对象创建后，其他线程(比如 main 线程）调用了该对象的 start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取 CPU 的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得 CPU 时间片后变为运行中状态（running）。</p></li><li class="lvl-3"><p>阻塞(<code>BLOCKED</code>)：表示线程阻塞于锁。</p></li><li class="lvl-3"><p>等待(<code>WAITING</code>)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</p></li><li class="lvl-3"><p>超时等待(<code>TIMED_WAITING</code>)：该状态不同于 WAITING，它可以在指定的时间后自行返回。</p></li><li class="lvl-3"><p>终止(<code>TERMINATED</code>)：表示该线程已经执行完毕。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/3bVMls.png" alt="" width="900" height="600"></p></li></ol><h3 id="Thread与Runnable">Thread与Runnable</h3><ul class="lvl-0"><li class="lvl-2"><p>Thread 才是 Java 里对线程的唯一抽象，Runnable 只是对任务（业务逻辑）的抽象。Thread 可以接受任意一个 Runnable 的实例并执行。</p></li><li class="lvl-2"><p>官方说法是在 Java 中有两种方式创建一个线程用以执行，一种是派生自Thread 类，另一种是实现 Runnable 接口。当然本质上 Java 中实现线程只有一种方式，都是通过 new Thread()创建线程对象，调用 Thread#start 启动线程。至于基于 callable 接口的方式，因为最终是要把实现了 callable 接口的对象通过 FutureTask 包装成 Runnable，再交给 Thread 去执行，所以这个其实可以和实现 Runnable 接口看成同一类。</p></li><li class="lvl-2"><p>java的多线程最终是交由操作系统来维护和调度的。只有调用Thread对象的start方法才能启动一个线程，start方法不能多次调用，重复调用会抛出异常。Thread 的 start 方法中调用了 start0()方法，而start0()是个 native 方法，这就说明Thread#start 一定和操作系统是密切相关的。</p></li><li class="lvl-2"><p>创建并启动线程</p><ul class="lvl-2"><li class="lvl-6">扩展自Thread类</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UseThread</span> <span class="variable">useThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UseThread</span>();</span><br><span class="line">useThread.start();</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">实现Runnable接口</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UseRunnable</span> <span class="variable">useRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UseRunnable</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(useRunnable).start();</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>static方法</p><ul class="lvl-2"><li class="lvl-6"><code>Thread.currentThread()</code>：获取当前线程对象</li><li class="lvl-6"><code>Thread.sleep(10)</code> ：休眠10毫秒</li><li class="lvl-6"><code>Thread.activeCount()</code> ：获取当前活动线程的数量，活动线程是指尚未终止的线程，包括正在运行、等待或阻塞的线程。包括守护线程和非守护线程</li><li class="lvl-6"><code>Thread.yield()</code> : 暂停当前线程，给其他线程执行的机会<blockquote><p>1.具体作用如下：提示调度器当前线程愿意放弃当前的 CPU 执行时间片，给其他具有相同优先级的线程执行的机会。不保证一定能让其他线程执行，只是给其他线程执行的机会更大。通常情况下，操作系统的线程调度器会按照一定的算法分配 CPU 时间给各个线程，而 yield() 方法可以用于向调度器发出提示，表明当前线程愿意让出 CPU 时间，让其他线程有更多的机会执行。<br>2.当一个线程调用 yield() 方法后，它会进入就绪状态，让出当前的 CPU 时间片，并允许其他线程有更大的机会获得 CPU 时间。然后，调度器会在众多就绪状态的线程中选择一个线程来运行，但选择哪个线程运行是由调度器决定的，可能会选择当前线程继续执行，也可能选择其他线程执行。所以，调用 yield() 方法后，当前线程可能会被立即重新调度并继续执行，也可能在稍后的时间被调度器重新选中并继续执行，也可能在一段时间内都没有被重新调度。</p></blockquote></li><li class="lvl-6"><code>Thread.interrupted()</code> : 用于检查当前线程是否被中断，并返回一个布尔值。调用<code>interrupted()</code>方法会清除当前线程的中断状态。线程是中断状态时，则只有第一次调用<code>interrupted()</code>方法会返回 true。而Thread对象的<code>isInterrupted()</code>方法不会清除中断状态。</li></ul></li><li class="lvl-2"><p>守护线程：主线程结束，则守护线程立即停止</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建并启动线程：</span></span><br><span class="line"><span class="type">UseThread</span> <span class="variable">useThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UseThread</span>();</span><br><span class="line">useThread.setDaemon(<span class="literal">true</span>); <span class="comment">//设置线程为守护线程，主线程结束，则守护线程立即停止</span></span><br><span class="line">useThread.start();</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>join()</code>: 将指定线程运行完成后再运行后面的代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建并启动线程：</span></span><br><span class="line"><span class="type">ThreadA</span> <span class="variable">threadA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>();</span><br><span class="line">threadA.start();</span><br><span class="line"><span class="comment">//threadA要运行完成后再运行后面的代码：</span></span><br><span class="line">threadA.join();</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>setPriority()</code>：设置线程优先级</p><blockquote><p>1.优先级的范围从 1~10，其中1表示最低优先级，10表示最高优先级。默认优先级是 5，优先级高的线程分配时间片的数量要多于优先级低的线程。设置线程优先级时，针对频繁阻塞（休眠或者 I/O 操作）的线程需要设置较高优先级，而偏重计算（需要较多 CPU 时间或者偏运算）的线程则设置较低的优先级，确保处理器不会被独占。需要注意的是，线程优先级只是给操作系统提供一个建议，操作系统不保证严格按照优先级来调度线程。在不同的 JVM 以及操作系统上，线程规划会存在差异，有些操作系统甚至会忽略对线程优先级的设定。慎重使用。<br>2.Java 线程调度是抢占式调度的，而且 Java 中的线程优先级是通过映射到操作系统的原生线程上实现的，所以线程的调度最终取决于操作系统，操作系统中线程的优先级有时并不能和 Java 中的一一对应，所以Java 优先级并不是特别靠谱。</p></blockquote></li><li class="lvl-2"><p>中断线程：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建并启动线程：</span></span><br><span class="line"><span class="type">ThreadA</span> <span class="variable">threadA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>();</span><br><span class="line">threadA.start();</span><br><span class="line"><span class="comment">//中断线程：</span></span><br><span class="line">threadA.interrupt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程方法中判断是否被中断：</span></span><br><span class="line">Thread.currentThread().isInterrupted(); <span class="comment">//中断返回true</span></span><br><span class="line"><span class="comment">//注意：处于死锁状态的线程无法被中断</span></span><br></pre></td></tr></table></figure><h3 id="死锁（Deadlock）">死锁（Deadlock）</h3><ul class="lvl-0"><li class="lvl-2"><p>死锁（Deadlock）是指两个或多个线程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，彼此互相等待对方释放资源，导致程序无法继续执行的状态。</p></li><li class="lvl-2"><p>死锁通常发生在多个线程同时持有多个共享资源，并试图获取对方持有的资源时。</p></li><li class="lvl-2"><p>死锁的发生必须具备以下四个必要条件:</p><ul class="lvl-2"><li class="lvl-6">1）互斥条件：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。</li><li class="lvl-6">2）请求和保持条件：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。</li><li class="lvl-6">3）不剥夺条件：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。</li><li class="lvl-6">4）环路等待条件：指在发生死锁时，必然存在一个进程–资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的 P0 正在等待一个 P1 占用的资源；P1正在等待 P2 占用的资源，……，Pn 正在等待已被 P0 占用的资源。</li></ul></li><li class="lvl-2"><p>只要打破四个必要条件之一就能有效预防死锁的发生</p><ul class="lvl-2"><li class="lvl-6">打破互斥条件：改造独占性资源为虚拟资源，大部分资源已无法改造。</li><li class="lvl-6">打破不可抢占条件：当一进程占有一独占性资源后又申请一独占性资源而无法满足，则退出原占有的资源。</li><li class="lvl-6">打破占有且申请条件：采用资源预先分配策略，即进程运行前申请全部资源，满足则运行，不然就等待，这样就不会占有且申请。</li><li class="lvl-6">打破循环等待条件：实现资源有序分配策略，对所有设备实现分类编号，所有进程只能采用按序号递增的形式申请资源。</li></ul></li><li class="lvl-2"><p>死锁的危害</p><ul class="lvl-2"><li class="lvl-6">1、线程不工作了，但是整个程序还是活着的</li><li class="lvl-6">2、没有任何的异常信息可以供我们检查。</li><li class="lvl-6">3、一旦程序发生了发生了死锁，是没有任何的办法恢复的，只能重启程序，对生产平台的程序来说，这是个很严重的问题。</li></ul></li><li class="lvl-2"><p>如何查看运行的程序是否有死锁线程</p><ul class="lvl-2"><li class="lvl-6">通过 jps 查询应用的 id，再通过 jstack id 查看应用的锁的持有情况，进程状态为 BLOCKED 表示死锁</li><li class="lvl-6">jdk1.8以后，jstack 专门给出了死锁的检查，一般在显示信息的最下方展示是否发现死锁信息</li></ul></li><li class="lvl-2"><p>如何避免死锁</p><ul class="lvl-2"><li class="lvl-6">1、内部通过顺序比较，确定拿锁的顺序；</li><li class="lvl-6">2、采用尝试拿锁的机制。<blockquote><p>尝试拿锁会存在<code>活锁</code>的问题，即多个线程在尝试拿锁的机制中，发生多个线程之间互相谦让，不断发生同一个线程总是拿到同一把锁，在尝试拿另一把锁时因为拿不到，而将本来已经持有的锁释放的过程。<br>解决办法：每个线程休眠随机数，错开拿锁的时间。</p></blockquote></li></ul></li></ul><h3 id="synchronized：可以作用在方法或代码块上"><code>synchronized</code>：可以作用在方法或代码块上</h3><ul class="lvl-0"><li class="lvl-2"><p>方法: 当前对象锁，等价于 <code>synchronized (this)</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">incCountMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>方法: 当前类锁，等价于 <code>synchronized (Object.class)</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">incCountMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>代码块：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任意对象锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incCountObj</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当前对象锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incCountBlock</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incCountBlock</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Object.class)&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="wait与notify-notifyAll：等待唤醒机制"><code>wait</code>与<code>notify</code>/<code>notifyAll</code>：等待唤醒机制</h3><ul class="lvl-0"><li class="lvl-2"><p>一个线程：<code>synchronized (pool)；</code> <code>while(某种条件)</code> 线程等待：<code>pool.wait();</code> 另一个线程：<code>synchronized (pool);</code>  通知其他等待的线程：<code>pool.notifyAll();</code></p></li><li class="lvl-2"><p><code>synchronized</code>作用在方法上时，就是当前对象，直接在方法内使用<code>wait();</code></p></li><li class="lvl-2"><p><code>wait()</code> 和 <code>wait(long timeout)</code> 都是用于线程间进行协作和同步的方法，用于在对象上进行等待。<code>wait()</code> 方法是没有超时参数的形式，它使当前线程进入等待状态，直到其他线程调用相同对象上的 <code>notify()</code> 或 <code>notifyAll()</code> 方法来唤醒等待的线程，或者当前线程被中断（<code>InterruptedException</code>）。<code>wait(long timeout)</code> 方法是带有超时参数的形式，它使当前线程进入等待状态，但最多等待指定的时间（以毫秒为单位）。如果超过指定时间还未被唤醒，线程将自动唤醒并继续执行。这个方法可以防止线程永久地等待下去，即使没有其他线程调用相同对象上的 <code>notify()</code> 或 <code>notifyAll()</code> 方法。因此，<code>wait()</code> 方法是一直等待直到被唤醒或中断，而 <code>wait(long timeout)</code> 方法是等待一段时间后自动唤醒，或者在被唤醒之前超过了指定的等待时间。需要注意的是，这两个方法必须在同步代码块（<code>synchronized</code>）内部调用，并且在调用这些方法前，线程必须拥有对象的监视器（即获取了对象的锁）。否则，将会抛出 <code>IllegalMonitorStateException</code> 异常。</p></li><li class="lvl-2"><p>尽可能用 <code>notifyall()</code>，谨慎使用 <code>notify()</code>，因为 <code>notify()</code>只会唤醒一个线程，我们无法确保被唤醒的这个线程一定就是我们需要唤醒的线程</p></li><li class="lvl-2"><p><code>yield()</code> 、<code>sleep()</code>被调用后，都不会释放当前线程所持有的锁。调用 <code>wait()</code>方法后，会释放当前线程持有的锁，而且当前被唤醒后，会重新去竞争锁，锁竞争到后才会执行 <code>wait()</code> 方法后面的代码。调用 <code>notify()</code>系列方法后，对锁无影响，线程只有在 <code>synchronized</code> 同步代码执行完后才会自然而然的释放锁，所以 <code>notify()</code>系列方法一般都是 <code>synchronized</code> 同步代码的最后一行。</p></li><li class="lvl-2"><p>为什么你应该在循环中检查等待条件?</p><blockquote><p>处于等待状态的线程可能会收到错误警报和伪唤醒(被唤醒时不一定满足等待条件)，如果不在循环中检查等待条件，程序就会在没有满足结束条件的情况下退出。因此，当一个等待线程醒来时，不能认为它原来的等待状态仍然是有效的，在 <code>notify()</code>方法调用之后和等待线程醒来之前这段时间它可能会改变。这就是在循环中使用 <code>wait()</code>方法效果更好的原因。</p></blockquote></li></ul><h3 id="Callable-T-、Future-T-与FutureTask-T"><code>Callable&lt;T&gt;</code>、<code>Future&lt;T&gt;</code>与<code>FutureTask&lt;T&gt;</code>:</h3><ul class="lvl-0"><li class="lvl-2"><p><code>Callable</code> 位于 <code>java.util.concurrent</code> 包下，它也是一个接口，在它里面也只声明了一个方法，只不过这个方法叫做 <code>call()</code>，这是一个泛型接口，<code>call()</code>函数返回的类型就是传递进来的 <code>T</code> 类型。</p></li><li class="lvl-2"><p><code>FutureTask</code> 类实现了 <code>RunnableFuture</code> 接口，<code>RunnableFuture</code> 继承了 <code>Runnable</code>接口和 <code>Future</code> 接口，而 <code>FutureTask</code> 实现了 <code>RunnableFuture</code> 接口。所以它既可以作为 <code>Runnable</code> 被线程执行，又可以作为 <code>Future</code> 得到 <code>Callable</code> 的返回值。</p></li><li class="lvl-2"><p>自定义<code>Callable&lt;T&gt;</code>的实现类，其有返回值，比如：<code>public class UseCallable implements Callable&lt;Integer&gt;</code></p></li><li class="lvl-2"><p>创建<code>FutureTask</code>：<code>FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(new UseCallable());</code></p></li><li class="lvl-2"><p>启动线程：<code>new Thread(futureTask).start();</code></p></li><li class="lvl-2"><p>获取返回值：<code>futureTask.get();</code></p></li><li class="lvl-2"><p>中断线程：<code>futureTask.cancel(true);</code></p></li></ul><h3 id="CompletableFuture-T-：返回值的子线程，这里只罗列一些常用的方法"><code>CompletableFuture&lt;T&gt;</code>：返回值的子线程，这里只罗列一些常用的方法</h3><ul class="lvl-0"><li class="lvl-2"><p>创建：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">//子线程代码逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, world!&quot;</span>; <span class="comment">//返回值</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// CompletableFuture 使用的线程池是 ForkJoinPool ，默认全局共用一个ForkJoinPool，建议创建CompletableFuture时，为其指定一个新的线程池</span></span><br><span class="line"><span class="comment">//构建一个forkjoin线程池</span></span><br><span class="line"><span class="type">ForkJoinPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个异步任务，并将其提交到ForkJoinPool中执行</span></span><br><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line">&#125;, pool);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 等待任务完成，并获取结果</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> future.get();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//关闭ForkJoinPool，释放资源</span></span><br><span class="line">    pool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>工厂方法：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier,Executor executor)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable,Executor executor)</span></span><br></pre></td></tr></table></figure><blockquote><p>Asynsc 表示异步,而 supplyAsync 与 runAsync 不同在于，supplyAsync 异步返回一个结果,runAsync 是 void。第二个函数第二个参数表示是用我们自己创建的线程池,否则采用默认的ForkJoinPool.commonPool()作为它的线程池</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>获取返回值: <code>get</code>与<code>join</code>的区别</p><blockquote><p>future.get(); 需要处理异常：InterruptedException，ExecutionException<br>future.join();  不需要处理异常</p></blockquote></li><li class="lvl-2"><p><code>allOf</code>、<code>anyOf</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.allOf(future1,future2,future3).thenRun(()-&gt;&#123;</span><br><span class="line">    <span class="comment">//所有线程全部返回</span></span><br><span class="line">    System.out.println(<span class="string">&quot;All done!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收返回最快的那个值</span></span><br><span class="line">CompletableFuture&lt;Object&gt; f = CompletableFuture.anyOf(future1,future2,future3);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>处理返回结果：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//thenAccept :消费，没有返回值</span></span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;hello&quot;</span>).thenAccept(s -&gt; System.out.println(s+<span class="string">&quot; world&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//thenApply ：变更返回结果(值或类型)</span></span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;hello&quot;</span>).thenApply(s -&gt; s + <span class="string">&quot; world&quot;</span>).join();</span><br><span class="line"></span><br><span class="line"><span class="comment">//exceptionally ：捕获异常并返回结果</span></span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;hello&quot;</span>).exceptionally(e -&gt; &#123;</span><br><span class="line">    System.out.println(e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;).join();</span><br><span class="line"></span><br><span class="line"><span class="comment">//thenCompose ：第一个future的结果作为第二个future的参数</span></span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; <span class="number">10</span>).thenCompose(i -&gt; CompletableFuture.supplyAsync(() -&gt; i+<span class="number">1</span>)).join();</span><br><span class="line"></span><br><span class="line"><span class="comment">//whenComplete：不修改返回值</span></span><br><span class="line"><span class="comment">//whenComplete()方法接收一个BiConsumer参数，当异步任务完成时，无论是否发生异常，都会执行该BiConsumer。如果任务发生异常，异常信息会被传递给BiConsumer，但whenComplete()方法无法修改异常或处理异常。</span></span><br><span class="line">    CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;hello&quot;</span>).whenComplete((s, t) -&gt; &#123;</span><br><span class="line">        System.out.println(s); <span class="comment">//s是返回值</span></span><br><span class="line">        System.out.println(t.getMessage()); <span class="comment">//t是异常对象</span></span><br><span class="line">    &#125;).join();</span><br><span class="line"></span><br><span class="line"><span class="comment">//handle ：会修改返回值</span></span><br><span class="line"><span class="comment">//handle()方法接收一个BiFunction参数，当异步任务完成时，可以对任务的结果进行处理。如果任务发生异常，异常信息会被传递给BiFunction，并允许你根据异常进行处理并返回一个结果。如果没有异常发生，BiFunction将使用任务的结果进行处理。</span></span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;hello&quot;</span>).handle((s, t) -&gt; &#123;</span><br><span class="line">    System.out.println(s); <span class="comment">//s是返回值</span></span><br><span class="line">    System.out.println(t.getMessage()); <span class="comment">//t是异常对象return s;</span></span><br><span class="line">&#125;).join();</span><br></pre></td></tr></table></figure><h3 id="volatile：最轻量的通信-同步机制，保证变量在多个线程间的可见性，即值被一个线程修改，其它线程立刻可见">volatile：最轻量的通信/同步机制，保证变量在多个线程间的可见性，即值被一个线程修改，其它线程立刻可见</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> ready;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>volatile</code> 不能保证数据在多个线程下同时写时的线程安全</p></li><li class="lvl-2"><p><code>volatile</code> 最适用的场景：一个线程写，多个线程读。</p></li></ul><h3 id="ThreadLocal-T-：保证线程变量独享">ThreadLocal<T> ：保证线程变量独享</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//设置当前线程的线程局部变量的值。</span></span><br><span class="line">threadLocal.set(<span class="string">&quot;线程变量&quot;</span>);</span><br><span class="line"><span class="comment">//返回当前线程所对应的线程局部变量。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> threadLocal.get();</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>初始化方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1</span></span><br><span class="line">ThreadLocal&lt;Integer&gt; threadLocal1 = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Integer&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Integer <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2，Java 8及更高版本</span></span><br><span class="line">ThreadLocal&lt;Integer&gt; threadLocal2 = ThreadLocal.withInitial(() -&gt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>为了避免内存泄露，ThreadLocal变量用完后要进行销毁：<code>threadLocal.remove();</code></p></li></ul><h3 id="CAS">CAS</h3><ul class="lvl-0"><li class="lvl-2"><p>CAS 是 <code>Compare and Swap</code>（比较并交换）的缩写，是一种常见的并发编程技术，也是原子类实现线程安全的基础操作。CAS 操作包括三个参数：一个内存位置（通常是一个变量的内存地址）、期望的值和新值。CAS 操作会先比较内存位置的当前值与期望的值是否相等，如果相等，则将内存位置的值替换为新值，否则不进行任何操作。ßCAS 操作是原子的，即在进行比较和交换的过程中不会被其他线程干扰。</p></li><li class="lvl-2"><p>CAS 实现原子操作的三大问题</p><ul class="lvl-2"><li class="lvl-6">ABA 问题<blockquote><p>下文有对ABA问题的介绍</p></blockquote></li><li class="lvl-6">循环时间长开销大<blockquote><p>自旋 CAS 如果长时间不成功，会给 CPU 带来非常大的执行开销。</p></blockquote></li><li class="lvl-6">只能保证一个共享变量的原子操作<blockquote><p>当对一个共享变量执行操作时，我们可以使用循环 CAS 的方式来保证原子操作，但是对多个共享变量操作时，循环 CAS 就无法保证操作的原子性，这个时候就可以用锁。<br>从 Java 1.5开始，JDK 提供了 <code>AtomicReference</code> 类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行 CAS 操作。</p></blockquote></li></ul></li></ul><h3 id="原子操作类">原子操作类:</h3><ul class="lvl-0"><li class="lvl-2"><p>Integer：AtomicInteger，AtomicIntegerArray</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AtomicInteger</span> <span class="variable">ai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">10</span>);</span><br><span class="line">ai.get(); <span class="comment">//获取当前值</span></span><br><span class="line">ai.set(<span class="number">10</span>); <span class="comment">//设置新值</span></span><br><span class="line">ai.getAndIncrement();  <span class="comment">//获取原值并自增，getAndDecrement()自减</span></span><br><span class="line">ai.incrementAndGet(); <span class="comment">//获取自增后的值，decrementAndGet()自减</span></span><br><span class="line">ai.compareAndSet(原值,新值); <span class="comment">//比较并设置新值，成功返回true</span></span><br><span class="line">ai.getAndAdd(<span class="number">24</span>); <span class="comment">//增加指定的值后返回原值</span></span><br><span class="line">ai.addAndGet(<span class="number">24</span>); <span class="comment">//增加指定的值后返回新值</span></span><br><span class="line"><span class="comment">//基于数组初始化</span></span><br><span class="line"><span class="type">AtomicIntegerArray</span> <span class="variable">ai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicIntegerArray</span>(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span> &#125;);</span><br><span class="line"><span class="comment">//基于数组长度初始化</span></span><br><span class="line"><span class="type">AtomicIntegerArray</span> <span class="variable">ai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicIntegerArray</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Long：<code>AtomicLong</code>，<code>AtomicLongArray</code></p></li><li class="lvl-2"><p>Long：<code>LongAdder</code>，加、减、求和等操作性能高于<code>AtomicLong</code></p></li></ul><div class="tips"><p><em><strong>小贴士</strong></em><br>AtomicLong 是利用了底层的 CAS 操作来提供并发性的，调用了 Unsafe 类的getAndAddLong 方法，该方法是个 native 方法，它的逻辑是采用自旋的方式不断更新目标值，直到更新成功。<br>在并发量较低的环境下，线程冲突的概率比较小，自旋的次数不会很多。但是，高并发环境下，N 个线程同时进行自旋操作，会出现大量失败并不断自旋的情况，此时 AtomicLong 的自旋会成为瓶颈。<br>这就是 LongAdder 引入的初衷——解决高并发环境下 AtomicLong 的自旋瓶颈问题。</p><p>AtomicLong 中有个内部变量 value 保存着实际的 long 值，所有的操作都是针对该变量进行。也就是说，高并发环境下，value 变量其实是一个热点，也就是 N 个线程竞争一个热点。<br>LongAdder 的基本思路就是分散热点，将 value 值分散到一个数组中，不同线程会命中到数组的不同槽中，各个线程只对自己槽中的那个值进行 CAS 操作，这样热点就被分散了，冲突的概率就小很多。<br>如果要获取真正的 long 值，只要将各个槽中的变量值累加返回。</p><p>这种做法和 ConcurrentHashMap 中的“分段锁”其实就是类似的思路。<br>LongAdder 提供的 API 和 AtomicLong 比较接近，两者都能以原子的方式对long 型变量进行增减。</p><p>但是 AtomicLong 提供的功能其实更丰富，尤其是 addAndGet、decrementAndGet、compareAndSet 这些方法。<br>addAndGet、decrementAndGet 除了单纯的做自增自减外，还可以立即获取增减后的值，而 LongAdder 则需要做同步控制才能精确获取增减后的值。如果业务需求需要精确的控制计数，做计数比较，AtomicLong 也更合适。</p><p>另外，从空间方面考虑，LongAdder 其实是一种“空间换时间”的思想，从这一点来讲 AtomicLong 更适合。<br>总之，低并发、一般的业务场景下 AtomicLong 是足够了。如果并发量很多，存在大量写多读少的情况，那 LongAdder 可能更合适。</p></div><ul class="lvl-0"><li class="lvl-2"><p>Double：<code>DoubleAdder</code></p></li><li class="lvl-2"><p>对象：<code>AtomicReference</code>，<code>AtomicReferenceArray</code></p></li><li class="lvl-2"><p>对象：<code>AtomicStampedReference</code>：引入版本号，用于解决ABA问题</p></li></ul><div class="tips"><p><em><strong>小贴士</strong></em><br>如果你想比较AtomicReference中存储的User对象，你需要确保User类正确实现了适当的equals()和hashCode()方法。<br>在Java中，对象的比较通常是通过equals()方法来实现的。equals()方法用于判断两个对象是否相等。当你使用AtomicReference进行比较时，它将使用equals()方法来比较存储在AtomicReference中的对象。<br>默认情况下，Object类的equals()方法比较的是对象的引用，而不是内容。因此，如果你想在AtomicReference中比较User对象的内容而不是引用，你需要在User类中重写equals()方法来进行内容比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略构造函数和其他方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != user.age) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="literal">null</span> ? name.equals(user.name) : user.name == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，我们重写了equals()方法以比较User对象的name和age属性。我们使用了自动生成的hashCode()方法来生成哈希码，以保证在使用哈希表等数据结构时的正确性。<br>重写了equals()和hashCode()方法后，你可以使用AtomicReference<User>来比较User对象。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AtomicReference&lt;User&gt; atomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>));</span><br><span class="line"><span class="type">User</span> <span class="variable">expectedUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">updated</span> <span class="operator">=</span> atomicReference.compareAndSet(expectedUser, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>));</span><br></pre></td></tr></table></figure><p>而AtomicStampedReference是为了解决ABA问题而设计的，并提供了对对象引用的比较以及对标记（stamp）的比较。<br>AtomicStampedReference通过引入一个标记（stamp）来解决ABA问题。它不仅比较对象引用，还比较对象的标记值。当对象和标记值都相等时，才认为对象相等。</p></div><h3 id="ABA">ABA</h3><ul class="lvl-0"><li class="lvl-2"><p>ABA 问题指的是在并发环境下，某个线程对一个值进行比较并操作时，可能出现以下情况：</p></li></ul><ol><li class="lvl-3"><p>初始状态下，值为 A。</p></li><li class="lvl-3"><p>线程 1 将值从 A 修改为 B。</p></li><li class="lvl-3"><p>线程 1 又将值从 B 修改回 A。</p></li><li class="lvl-3"><p>线程 2 检查值，发现值仍然是 A，于是做出操作。<br>从线程 2 的角度来看，值似乎没有被修改过，但实际上经历了从 A 到 B 再到 A 的变化。这种情况可能会导致意外的结果或错误的判断。<br>ABA 问题的发生是因为 CAS 操作只关注当前值和期望值是否相等，而不考虑期间发生的其他变化。<br>在上述示例中，CAS 操作在进行比较时，发现当前值仍然是 A，与期望值相等，因此会执行操作，但它无法感知到值的中间变化。<br>ABA 问题可能会对某些并发算法和数据结构产生影响，例如自旋锁、无锁算法等。<br>为了解决 ABA 问题，可以使用一种称为 “版本号” 的技术，每次修改值时都会增加一个版本号，这样在进行 CAS 操作时除了比较值本身，还会比较版本号，从而避免了 ABA 问题的发生。<br>在Java中，<code>AtomicStampedReference</code>就是通过引入版本号（标记）来解决ABA问题的一种原子类。</p></li></ol><h3 id="重排序">重排序</h3><ul class="lvl-0"><li class="lvl-2"><p>在Java中，重排序是指编译器和处理器为了提高程序性能而对指令执行顺序进行重新排序的优化技术。重排序可以改变程序中指令的执行顺序，但不会改变程序的最终结果（即保持串行语义），因为这些重排序是在保持依赖关系的前提下进行的。</p></li><li class="lvl-2"><p>然而，重排序可能会导致并发安全问题。并发安全问题主要涉及到多线程的执行顺序和对共享数据的访问。</p></li><li class="lvl-2"><p>考虑以下示例代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>上述代码是一个经典的基于双重检查锁定的懒汉式单例模式。在单线程环境下，这段代码是没有问题的。但是在多线程环境下，由于重排序的存在会导致线程安全问题，为什么呢？</p></li><li class="lvl-2"><p>这是因为<code>instance = new Singleton();</code>虽然只有一行代码，但是其实在具体执行的时候有好几步操作：</p><ul class="lvl-2"><li class="lvl-6">1、JVM 为 <code>Singleton</code> 的对象实例在内存中分配空间</li><li class="lvl-6">2、进行对象初始化，完成 <code>new</code> 操作</li><li class="lvl-6">3、JVM 把这个空间的地址赋给我们的引用 <code>instance</code></li></ul></li><li class="lvl-2"><p>因为 JVM 内部的实现原理会导致重排序，就会产生一种情况，第 3 步会在第 2 步之前执行。</p></li><li class="lvl-2"><p>于是在多线程下就会产生问题：</p><ul class="lvl-2"><li class="lvl-6">A 线程正在 syn 同步块中执行 <code>instance = new Singleton();</code>，</li><li class="lvl-6">此时 B 线程也来执行 <code>getInstance()</code>，进行了 <code>instance == null</code> 的检查，</li><li class="lvl-6">因为第 3 步会在第 2 步之前执行，B 线程检查发现 <code>instance</code> 不为 <code>null</code>，会直接拿着 <code>instance</code> 实例使用，</li><li class="lvl-6">但是这时 A 线程还在执行对象初始化，这就导致 B 线程拿到的 <code>instance</code> 实例可能只初始化了一半，B 线程访问 <code>instance</code> 实例中的对象域就很有可能出错。</li></ul></li><li class="lvl-2"><p>这些问题是由于编译器和处理器进行的重排序导致的，并发安全问题不会在单线程环境下出现，只有在多线程环境下才会显现。</p></li><li class="lvl-2"><p>另外，即使在同步块内部没有发生重排序，当一个线程在初始化实例时，由于处理器和内存之间的交互延迟，也可能存在可见性问题。</p></li><li class="lvl-2"><p>为了解决这些问题，可以使用<code>volatile</code>关键字来修饰<code>instance</code>，<code>volatile</code>会禁止编译器和处理器进行重排序，同时使用<code>volatile</code>修饰的变量时，会先清除当前线程的本地缓存再从主内存中重新加载数据，以确保可见性：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br></pre></td></tr></table></figure><h3 id="管程与MESA模型">管程与MESA模型</h3><ul class="lvl-0"><li class="lvl-2"><p>管程(Monitor): 是一种并发编程的概念模型，旨在解决多线程程序中的互斥访问和同步问题。它提供了一种结构化的方式来管理共享资源，并确保线程在访问共享资源时的安全性。</p></li><li class="lvl-2"><p>MESA(Meta-Environment for Scheduling Agents)模型: 是现在正在广泛使用的管程模型。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/2aB7dM.jpg" alt=""></p></li></ul><h3 id="AQS">AQS</h3><ul class="lvl-0"><li class="lvl-2"><p><code>java.util.concurrent</code>包中的大多数同步器实现都是围绕着共同的基础行为，比如等待队列、条件队列、独占获取、共享获取等，而这些行为的抽象就是基于<code>AbstractQueuedSynchronizer</code>（简称<code>AQS</code>）实现的，<code>AQS</code>是一个抽象同步框架，可以用来实现一个依赖状态的同步器。</p></li><li class="lvl-2"><p>JDK中提供的大多数的同步器如<code>Lock</code>, <code>Latch</code>, <code>Barrier</code>等，都是基于AQS框架来实现的。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/vz5BJt.png" alt=""></p></li><li class="lvl-2"><p>基于AQS构建的<code>ReentrantLock</code>和<code>CountDownLatch</code>等同步类就是借鉴了MESA模型中的概念和技术，如互斥锁、条件变量等，以提供线程间的同步和互斥功能。</p></li></ul><h3 id="JMM">JMM</h3><ul class="lvl-0"><li class="lvl-2"><p>Java线程之间的通信由Java内存模型（Java Memory Model，简称JMM）控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/QMgkD0.jpg" alt="" width="600" height="400"></p></li></ul><h3 id="并发三大特性">并发三大特性</h3><h4 id="原子性">原子性</h4><ul class="lvl-0"><li class="lvl-2"><p>一个或多个操作，要么全部执行且在执行过程中不被任何因素打断，要么全部不执行。</p></li><li class="lvl-2"><p>在 Java中，对基本数据类型的变量的读取和赋值操作是原子性操作（64位处理器）,自增/自减操作并不是原子性的。</p></li><li class="lvl-2"><p>如何保证原子性:</p><ul class="lvl-2"><li class="lvl-6">通过 <code>synchronized</code> 关键字保证原子性</li><li class="lvl-6">通过 <code>Lock</code> 锁保证原子性</li><li class="lvl-6">通过 <code>CAS</code> 保证原子性</li></ul></li></ul><h4 id="可见性">可见性</h4><ul class="lvl-0"><li class="lvl-2"><p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p></li><li class="lvl-2"><p>如何保证可见性:</p><ul class="lvl-2"><li class="lvl-6">通过 <code>volatile</code> 关键字保证可见性</li><li class="lvl-6">通过 <code>内存屏障</code>保证可见性</li><li class="lvl-6">通过 <code>synchronized</code> 关键字保证可见性</li><li class="lvl-6">通过 <code>Lock</code> 锁保证可见性</li></ul></li><li class="lvl-2"><p>Java中可见性底层有两种实现：</p><ul class="lvl-2"><li class="lvl-6"><ol><li class="lvl-9">内存屏障，以下实现都是基于内存屏障</li></ol><ul class="lvl-4"><li class="lvl-10">synchronized</li><li class="lvl-10">Threed.sleep(10)</li><li class="lvl-10">volatile</li></ul></li><li class="lvl-6"><ol start="2"><li class="lvl-9">cup上下文切换</li></ol><ul class="lvl-4"><li class="lvl-10">Threed.yield()</li><li class="lvl-10">Threed.sleep(0)</li></ul></li></ul></li><li class="lvl-2"><p>synchronized关键字的作用</p><ul class="lvl-2"><li class="lvl-6">是确保多个线程访问共享资源时的互斥性和可见性</li></ul></li><li class="lvl-2"><p>锁的内存语义</p><ul class="lvl-2"><li class="lvl-6">当线程获取锁时，JMM会把该线程对应的本地内存置为无效。</li><li class="lvl-6">当线程释放锁时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存中。</li></ul></li><li class="lvl-2"><p>volatile内存语义</p><ul class="lvl-2"><li class="lvl-6">写：当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值刷新到主内存。</li><li class="lvl-6">读：当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效，线程接下来将从主内存中读取共享变量。</li></ul></li></ul><h4 id="有序性">有序性</h4><ul class="lvl-0"><li class="lvl-2"><p>即程序执行的顺序按照代码的先后顺序执行。</p></li><li class="lvl-2"><p>为了提升性能，编译器和处理器常常会对指令做重排序，所以存在有序性问题。</p></li><li class="lvl-2"><p>如何保证有序性:</p><ul class="lvl-2"><li class="lvl-6">通过 <code>volatile</code> 关键字保证有序性</li><li class="lvl-6">通过 <code>内存屏障</code>保证有序性</li><li class="lvl-6">通过 <code>synchronized</code> 关键字保证有序性</li><li class="lvl-6">通过 <code>Lock</code> 锁保证有序性</li></ul></li></ul><h4 id="总结">总结</h4><ul class="lvl-0"><li class="lvl-2"><p>1.保证了可见性就保证了有序性</p></li><li class="lvl-2"><p>2.<code>volatile</code>并不能保证原子性，但可以保证多线程操作共享变量的可见性以及禁止指令重排序</p></li><li class="lvl-2"><p>3.<code>synchronized</code>关键字不仅保证可见性，同时也保证了原子性（互斥性）</p></li><li class="lvl-2"><p>4.JMM通过<code>内存屏障</code>来实现内存的可见性以及禁止重排序</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍java并发编程相关技术&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;jdk1.8&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;并发编程是为了解决什么问题的？&lt;br&gt;
&lt;em&gt;&lt;strong&gt;性能+线程安全&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    <category term="java多线程" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://blog.hanqunfeng.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--用户管理</title>
    <link href="https://blog.hanqunfeng.com/2023/04/20/linux-command11-user/"/>
    <id>https://blog.hanqunfeng.com/2023/04/20/linux-command11-user/</id>
    <published>2023-04-20T14:40:05.000Z</published>
    <updated>2023-04-23T02:49:03.295Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>文本介绍linux中用户的维护及其相关命令</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="一-配置文件说明">一.配置文件说明</h2><ul class="lvl-0"><li class="lvl-2"><p>1./etc/passwd :用户信息文件<br><code>vipw</code> :编辑/etc/passwd文件<br><code>pwck</code> :检查/etc/passwd内容是否有效，比如宿主目录是否存在等等</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line"></span><br><span class="line">格式：用户名:密码位:UID:GID:注释:宿主目录:shell</span><br><span class="line"></span><br><span class="line">UID说明:</span><br><span class="line">root: UID=0</span><br><span class="line">伪用户: UID 1-499，比如ftp,sshd,mail,shutdown等等</span><br><span class="line">普通用户: UID 500-60000,新增用户</span><br><span class="line"></span><br><span class="line">shell说明:</span><br><span class="line">/bin/bash :登录后默认的shell</span><br><span class="line">/sbin/nologin :该用户禁止登录</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>2./etc/shadow :密码文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root:!!:18755:0:99999:7:::</span><br><span class="line">bin:*:18394:0:99999:7:::</span><br><span class="line">nginx:$6$VJ6lIEAtIoLpbMmA<span class="variable">$GSIZfx5Ous2ih</span>/KHjZTuTT7hSk6PBd/3c/nanwtXh5BKFOtEQdRvp6hS2usZ.rle.InjoKW0tp6UNQrhRscUG/:19468:0:99999:7:::</span><br><span class="line"></span><br><span class="line">格式：用户名:密码:最后一次修改密码的天数:两次修改密码的最小天数间隔:密码保持有效的最多天数:密码失效前提前警告的天数:账号闲置时间:密码已经失效的天数:标志（一般不用）</span><br><span class="line"></span><br><span class="line">密码说明：</span><br><span class="line">!! :该用户不能通过密码登录</span><br><span class="line">* :禁止登录</span><br><span class="line">*，! 和 !! 的全部都是无效的哈希，均表示不可以通过密码登录</span><br><span class="line">上面nginx的密码就是一个有效的哈希值，如果对nginx用户设置了禁用，</span><br><span class="line">比如: `usermod -L nginx`</span><br><span class="line">此时就会在密码前面增加一个 `!`，使其变为无效的哈希值，这样就不能通过密码登录了</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>3./etc/group  :用户组文件<br><code>vigr</code> :编辑/etc/group文件<br><code>grpck</code> :检查/etc/group内容是否有效</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:</span><br><span class="line">bin:x:1:</span><br><span class="line"></span><br><span class="line">格式：组名:组密码位:GID:组内用户列表(逗号分隔)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>4./etc/gshadow :组密码文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root:::</span><br><span class="line">bin:::</span><br><span class="line">nginx:$6<span class="variable">$G0GIKwWPuT</span>/RMftY<span class="variable">$JYqudvqgbUw5jJFqqaNBggs1lHpu</span>.BXfqaHRCy2fNklc5zYG0yjh4HZ5t2r4mkeLGU9McigZa4FsBBDV9IcCR1::</span><br><span class="line">redis:!:redis:redis,centos</span><br><span class="line"></span><br><span class="line">格式：组名:组密码:组管理员:组内用户列表(逗号分隔)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line">1.一般情况下没必要设置组密码</span><br><span class="line">2.组管理员可以将用户添加到组或从组里删除用户</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>5./etc/skel/* :新用户环境变量文件</p></li><li class="lvl-2"><p>6./etc/login.defs :使用useradd默认创建用户时的缺省配置，比如UID范围，GID范围，密码有效期，密码长度限制，是否自动创建Home目录，密码加密方式等等</p></li><li class="lvl-2"><p>7./etc/default/useradd :使用useradd默认创建用户时的缺省配置，比如Home目录位置，默认shell，默认使用的新用户环境变量文件位置（/etc/skel），等等</p></li></ul><h2 id="二-添加、删除用户">二.添加、删除用户</h2><ul class="lvl-0"><li class="lvl-2"><p>1.通过<code>useradd</code>命令创建用户,并使用<code>passwd</code>设置用户密码</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root创建用户</span></span><br><span class="line">useradd 用户名</span><br><span class="line">    -u:指定UID</span><br><span class="line">    -g:指定所属用户初始组GID或组名称，用户创建文件时的默认组，可以通过 `newgrp 组名` 切换初始组</span><br><span class="line">    -G:指定所属多个附加组名称，逗号分隔，用户同时拥有这些组的权限</span><br><span class="line">    -d:宿主目录，会自动创建，如果目录已经存在，则不会将环境变量文件拷贝到该目录，需要手工拷贝</span><br><span class="line">    -s:命令解释器shell</span><br><span class="line">    -c:描述信息</span><br><span class="line">    -e:指定失效时间</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子：</span></span><br><span class="line">useradd utest -u 600 -g 0 -G sys,adm -d /home/utest -s /bin/bash -c <span class="string">&quot;this is a testuser&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line">useradd &lt;==&gt; adduser</span><br><span class="line"></span><br><span class="line"><span class="comment"># root为用户设置密码</span></span><br><span class="line">passwd 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非root用户修改自己的密码</span></span><br><span class="line">passwd</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>2.通过编辑配置文件创建</p><ul class="lvl-2"><li class="lvl-6">1）分别在/etc/passwd、/etc/group和/etc/shadow中增加一行记录<br>密码设置：<code>echo 123456 | sha512sum</code></li><li class="lvl-6">2）创建宿主目录</li><li class="lvl-6">3）拷贝默认的配置文件到宿主目录: <code>cp -rf /etc/skel/* dir</code></li><li class="lvl-6">4）设置用户初始密码</li></ul></li><li class="lvl-2"><p>3.删除用户</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel -r 用户名</span><br><span class="line">    -r:删除用户宿主目录</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>4.修改用户</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将用户添加到附加组中</span></span><br><span class="line">usermod -G 组名称 用户名</span><br><span class="line"><span class="comment"># 将用户的名改为新用户名，并且指定初始组，同时修改宿主目录</span></span><br><span class="line">usermod -l 新用户名 -d <span class="built_in">dir</span> -g 组名称 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明，usermod仅root用户可以使用</span></span><br></pre></td></tr></table></figure><h2 id="三-添加、删除组">三.添加、删除组</h2><ul class="lvl-0"><li class="lvl-2"><p>1.创建组</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组名</span><br><span class="line">    -g:指定GID</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>2.删除组</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>3.修改组名称</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod -n newname oldname</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>4.设置组密码</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置密码：gpasswd 组名</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>5.其它组命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将用户加入组</span></span><br><span class="line">gpasswd -a 用户名 组名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从组中删除用户</span></span><br><span class="line">gpasswd -d 用户名 组名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除组密码</span></span><br><span class="line">gpasswd -r 组名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让群组的密码失效</span></span><br><span class="line">gpasswd -R 组名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置组管理员</span></span><br><span class="line">gpasswd -A 用户名 组名</span><br></pre></td></tr></table></figure><h2 id="四-用户管理命令">四.用户管理命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">whoami</span> :显示当前用户名称</span><br><span class="line"><span class="built_in">id</span> :查看当前用的UID，GID和组信息</span><br><span class="line"><span class="built_in">who</span> :显示用户登录时间和来源IP</span><br><span class="line">last :显示所有用户的登录时间和来源IP历史记录</span><br><span class="line">su - 用户名 :切换用户，带环境变量，<span class="built_in">exit</span>退出</span><br><span class="line"></span><br><span class="line">passwd -S 用户名 :查看用户密码状态</span><br><span class="line">chage -l 用户名：查看用户密码配置信息</span><br><span class="line">vipw :编辑/etc/passwd文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">groups</span> 用户名 :查看用户隶属于哪些组</span><br><span class="line"><span class="built_in">chgrp</span> 组名 file/dir :修改文件所属组 目录加 -R</span><br><span class="line"><span class="built_in">chown</span> 用户名 file/dir :修改文件所属用户 目录加 -R</span><br><span class="line">    <span class="built_in">chown</span> -R 用户名.组名 file/dir</span><br><span class="line">vigr :编辑/etc/group文件</span><br><span class="line">newgrp 组名 :临时切换当前用户的初始组。newgrp 命令每一次切换用户的初始组，该用户都会以另外一个 shell（新进程，也可以说是子进程）登陆，只不过在新 shell 上登陆的该用户，其初始组改变了而已。<span class="built_in">exit</span>退出。</span><br><span class="line"></span><br><span class="line">pwck :检查/etc/passwd内容是否有效，比如宿主目录是否存在等等</span><br><span class="line">grpck :检查/etc/group内容是否有效</span><br></pre></td></tr></table></figure><h2 id="五-用户禁用与恢复">五.用户禁用与恢复</h2><ul class="lvl-0"><li class="lvl-2"><p>禁用：锁定用户，不能登录</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">usermod -L 用户名  :/etc/shadow中对应的密码前面增加一个`!`</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">passwd -l 用户名  :/etc/shadow中对应的密码前面增加两个`!`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 锁定的原理就是使密码变为无效的哈希值</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>恢复：解锁</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usermod -U 用户名</span><br><span class="line">passwd -u 用户名</span><br></pre></td></tr></table></figure><h2 id="六-sudo">六.sudo</h2><ul class="lvl-0"><li class="lvl-2"><p>配置文件/etc/sudoers</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">格式： A B = (C) D E</span><br><span class="line">且C与D是可以省略的</span><br><span class="line">A代表授权使用sudo的用户或者组</span><br><span class="line">B代表允许授权用户在哪些主机上使用这些权利，ALL表示任意主机</span><br><span class="line">C代表允许被授权用户提权到什么用户什么组级别的权限，ALL代表允许提权到任意用户级别，如果省略就表示提权到root级别</span><br><span class="line">D代表当被授权用户是否需要输入自身密码来使用特权，若省略则代表需要输入自身的密码，如果为NOPASSWD:则表示不需要</span><br><span class="line">E代表允许执行的命令，如果是ALL就代表允许执行所有命令，多个命令之间逗号分隔，必须为绝对路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子：</span></span><br><span class="line"><span class="comment"># A B = (C)  E</span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line"><span class="comment"># NOPASSWD: ALL 可以免密码以root身份执行所有命令</span></span><br><span class="line"><span class="comment"># A B = (C) D E</span></span><br><span class="line">centos  ALL=(ALL)       NOPASSWD: ALL</span><br><span class="line"><span class="comment"># A B = E</span></span><br><span class="line">wap     ALL=/bin/chown,/usr/sbin/useradd</span><br><span class="line"></span><br><span class="line"><span class="comment"># %wheel 表示 wheel 这个组下的所有用户</span></span><br><span class="line">%wheel  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>visudo</code> :编辑/etc/sudoers</p></li><li class="lvl-2"><p><code>sudo command</code> :执行命令，需要输入当前用户密码</p></li><li class="lvl-2"><p><code>sudo -l</code> :查看当前用户可以使用sudo执行哪些命令</p></li></ul><h2 id="七-批量添加用户，适用于少量添加，大量可以编写个脚步">七.批量添加用户，适用于少量添加，大量可以编写个脚步</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.编辑一个用户信息文件，比如user.info,格式与/etc/passwd相同</span><br><span class="line">2.newusers &lt; user.info :写入/etc/passwd，会自动创建宿主目录</span><br><span class="line">3.pwunconv :关闭shadow passwd功能</span><br><span class="line">4.创建一个密码文件，比如passwd.info,格式与/etc/shadow相同,但密码是明文</span><br><span class="line">5.chpasswd &lt; passwd.info :写入/etc/shadow</span><br><span class="line">6.pwconv :开启shadow passwd功能，写入password密文</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;文本介绍linux中用户的维护及其相关命令&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--进程管理</title>
    <link href="https://blog.hanqunfeng.com/2023/03/27/linux-command10-ps/"/>
    <id>https://blog.hanqunfeng.com/2023/03/27/linux-command10-ps/</id>
    <published>2023-03-27T14:45:05.000Z</published>
    <updated>2023-03-30T04:05:17.436Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍Linux进程管理等相关命令</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="ps-查看进程">ps :查看进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 与top命令类似，可以查看进程信息</span></span><br><span class="line">$ ps -aux</span><br><span class="line">    -a:所有用户</span><br><span class="line">    -x:没有控制终端的</span><br><span class="line">    -u:显示用户名和启动时间</span><br><span class="line"><span class="comment"># 根据关键字过滤</span></span><br><span class="line">$ ps -aux | grep nginx</span><br><span class="line"></span><br><span class="line">$ ps -ef</span><br><span class="line">    -e:显示所有进程，包括用户和没有控制终端</span><br><span class="line">    -f:显示所有信息</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看线程，相同PID表示的是同一个进程启动的线程</span></span><br><span class="line">$ ps -eLf</span><br><span class="line">    -L:显示线程</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程优先级 NI</span></span><br><span class="line">$ ps -el</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程运行在第几个cpu逻辑核心上</span></span><br><span class="line">$ ps -eo psr,user,pid,ppid,pri,ni,pgid,<span class="built_in">command</span> | grep nginx</span><br><span class="line">    psr：cpu逻辑核号</span><br><span class="line">    pri :默认19，优先级 0~99，越大优先级越高，pri(new) = pri(old) + <span class="built_in">nice</span></span><br><span class="line">    ni :默认0，影响优先级的因子 -20~19，越小优先级越高，改变<span class="built_in">nice</span>值可以改变pri</span><br><span class="line">    pgid :进程组<span class="built_in">id</span>，等同于 pgrp</span><br><span class="line"><span class="comment"># 绑定PID为10288的进程到第一块CPU，这样该进程就不会占用其它的CPU资源了</span></span><br><span class="line">$ taskset -<span class="built_in">cp</span> 1 10288</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按pid排序</span></span><br><span class="line">$ ps -aux --<span class="built_in">sort</span> pid</span><br><span class="line"><span class="comment"># 按用户排序</span></span><br><span class="line">$ ps -aux --<span class="built_in">sort</span> user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line">    USER:进程的执行用户</span><br><span class="line">    PID:进程号</span><br><span class="line">    PPID:父进程号</span><br><span class="line">    TTY:进程启动的终端</span><br><span class="line">    STAT:进程的当前状态，S:休眠 D:不可中断的休眠 R:运行 Z:僵死 T:停止 I:空闲内核线程</span><br><span class="line">    NI:进程优先级</span><br><span class="line">    TIME:进程自启动以来占用CPU的总时间</span><br><span class="line">    CMD/COMMAND:执行的命令</span><br><span class="line">    %CPU:占用CPU时间和总时间的百分比</span><br><span class="line">    %MEM:占用内存与系统内存总量的百分比</span><br></pre></td></tr></table></figure><h2 id="pstree-树状查看进行信息">pstree :树状查看进行信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 折叠展示，只展示父进程和子进程的数量</span></span><br><span class="line">$ pstree</span><br><span class="line"><span class="comment"># 展开所有子进程，并显示完整命令</span></span><br><span class="line">$ pstree -a</span><br><span class="line"><span class="comment"># 展开所有子进程，并显示PID</span></span><br><span class="line">$ pstree -p</span><br></pre></td></tr></table></figure><h2 id="kill-终止进程">kill :终止进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正常关闭进程</span></span><br><span class="line"><span class="built_in">kill</span> 进程号</span><br><span class="line"><span class="comment"># 强行关闭，遇到进程不能正常关闭时使用</span></span><br><span class="line"><span class="built_in">kill</span> -9 进程号</span><br><span class="line"><span class="comment"># 查看所有信号</span></span><br><span class="line"><span class="built_in">kill</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死进程名称所关联的全部进程</span></span><br><span class="line">killall 进程名称</span><br><span class="line">killall -9 进程名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死进程名称所关联的全部进程，同killall</span></span><br><span class="line">pkill 进程名称</span><br><span class="line">pkill -9 进程名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找服务的进程号</span></span><br><span class="line">pgrep 进程名称  : 效果同 ps -aux | grep 进程名 | grep -v grep| awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 终止进程名称含有mysql的全部进程</span></span><br><span class="line">pgrep mysql | xargs <span class="built_in">kill</span> -s 9</span><br></pre></td></tr></table></figure><h2 id="进程的挂起和恢复">进程的挂起和恢复</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ctrl+c :终止</span><br><span class="line"></span><br><span class="line">ctrl+z :挂起，暂停</span><br><span class="line"></span><br><span class="line"><span class="built_in">bg</span> num :转到后台继续运行</span><br><span class="line"></span><br><span class="line"><span class="built_in">fg</span> num :从后台恢复到前台继续运行</span><br><span class="line"></span><br><span class="line"><span class="built_in">jobs</span> :查看被挂起或正在后台运行的进程，会显示编号num</span><br><span class="line"></span><br><span class="line">commond &amp; :后台运行，只在当前终端下有效</span><br><span class="line"></span><br><span class="line"><span class="built_in">nohup</span> commond &amp; :后台执行，退出终端依然继续执行</span><br></pre></td></tr></table></figure><h2 id="进程运行优先级">进程运行优先级</h2><ul class="lvl-0"><li class="lvl-2"><p>进程优先级是 PRI(top中的PR)，其表示程序被 CPU 执行的先后顺序，此值越小进程的优先级别越高</p></li><li class="lvl-2"><p>PRI 值不是 Nice 值，但是 Nice 值会影响优先级，<code>PRI(new) = PRI(old) + nice</code>，所以我们调整 Nice 值，就可以改变进程的优先级</p></li><li class="lvl-2"><p>linux下的进程调度优先级 Nice 是从 -20 到 19 ，一共 40 个级别，数字越大，表示进程的优先级越低。默认时候，进程的调度优先级是0。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定命令的运行优先级</span></span><br><span class="line"><span class="built_in">nice</span> -n commond</span><br><span class="line"><span class="comment"># 改变一个正在运行的进程的优先级</span></span><br><span class="line">renice n pid</span><br><span class="line"><span class="comment"># 改变进程组内全部进程的优先级</span></span><br><span class="line">renice n -g pid</span><br><span class="line"><span class="comment"># 说明</span></span><br><span class="line">    n :取值范围（-20,19），越小优先级越高</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 默认启动nginx</span></span><br><span class="line">$ nginx</span><br><span class="line"><span class="comment"># 查看优先级，可以看到此时默认优先级是0</span></span><br><span class="line">ps -eo pgid,user,pid,pri,ni,<span class="built_in">command</span> | grep nginx | grep -v grep</span><br><span class="line">23348 root     23348  19   0 nginx: master process nginx</span><br><span class="line">23348 nginx    23349  19   0 nginx: worker process</span><br><span class="line">23348 nginx    23350  19   0 nginx: worker process</span><br><span class="line"><span class="comment"># 终止nginx进程</span></span><br><span class="line">$ pkill nginx</span><br><span class="line"><span class="comment"># 重新指定优先级启动，指定优先级为10</span></span><br><span class="line">$ <span class="built_in">nice</span> -10 nginx</span><br><span class="line"><span class="comment"># 查看优先级，可以看到此时默认优先级是10</span></span><br><span class="line">$ ps -eo pgid,user,pid,pri,ni,<span class="built_in">command</span> | grep nginx | grep -v grep</span><br><span class="line">23388 root     23388   9  10 nginx: master process nginx</span><br><span class="line">23388 nginx    23389   9  10 nginx: worker process</span><br><span class="line">23388 nginx    23390   9  10 nginx: worker process</span><br><span class="line"><span class="comment"># 改变运行中的nginx的优先级为-10，此时只会改变master的优先级</span></span><br><span class="line">$ renice -10 23388</span><br><span class="line">23388 (进程 ID) 旧优先级为 10，新优先级为 -10</span><br><span class="line">$ ps -eo pgid,user,pid,pri,ni,<span class="built_in">command</span> | grep nginx | grep -v grep</span><br><span class="line">23388 root     23388  29 -10 nginx: master process nginx</span><br><span class="line">23388 nginx    23389   9  10 nginx: worker process</span><br><span class="line">23388 nginx    23390   9  10 nginx: worker process</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变运行中的nginx的优先级为-10，此时只会改变master的优先级</span></span><br><span class="line">$ renice -10 -g 23388</span><br><span class="line">23388 (进程组 ID) 旧优先级为 -10，新优先级为 -10</span><br><span class="line">$ ps -eo pgid,user,pid,pri,ni,<span class="built_in">command</span> | grep nginx | grep -v grep</span><br><span class="line">23388 root     23388  29 -10 nginx: master process nginx</span><br><span class="line">23388 nginx    23389  29 -10 nginx: worker process</span><br><span class="line">23388 nginx    23390  29 -10 nginx: worker process</span><br></pre></td></tr></table></figure><h2 id="at-执行一次的计划任务">at :执行一次的计划任务</h2><ul class="lvl-0"><li class="lvl-2"><p>/var/spool/at：at任务存放在该目录下</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动at服务</span></span><br><span class="line">systemctl start atd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 今天10:46执行 test.sh</span></span><br><span class="line">at -f test.sh 10:46</span><br><span class="line"><span class="comment"># 时间格式：</span></span><br><span class="line">    5:30pm :今天下午5点30分</span><br><span class="line">    17:30 :今天下午5点30分</span><br><span class="line">    17:30 today :今天下午5点30分</span><br><span class="line">    now +3 hours :3小时后</span><br><span class="line">    now +180 minutes :3小时后</span><br><span class="line">    17:30 23.2.28 :2023年2月28日下午5点30分</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前at队列，显示编号num</span></span><br><span class="line">at -l ==== atq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定编号的任务</span></span><br><span class="line">at -d num ==== atrm num</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>用户限制：<br><code>/etc/at.allow</code> :如果文件存在，则只有此文件中列出的用户可以使用at命令<br><code>/etc/at.deny</code> :如果文件存在，则此文件中列出的用户不可以使用at命令<br>如果以上两个文件都不存在，则只有root用户可以使用at命令<br>如果以上两个文件都存在，但是都为空，则所有用户都可以使用at命令</p></li></ul><h2 id="crontab-周期性计划任务">crontab :周期性计划任务</h2><ul class="lvl-0"><li class="lvl-2"><p><code>systemctl start crond</code> :启动cron服务，默认启动</p></li><li class="lvl-2"><p><code>crontab -l</code> :显示当前用户下的计划任务</p></li><li class="lvl-2"><p><code>crontab -e</code> :编辑当前用户下的计划任务</p></li><li class="lvl-2"><p><code>/var/spool/cron</code> :计划任务保存在该路径下</p></li><li class="lvl-2"><p><code>/etc/cron.allow</code> 与 <code>/etc/cron.deny</code> :用户限制，规则同 <code>at</code></p></li><li class="lvl-2"><p>格式：<code>分钟[0~59] 小时[0~23] 日期[1~31] 月份[1~12] 星期[0~6] commands</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每5分钟执行一次</span></span><br><span class="line">*/5 * * * * <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每天2点执行一次</span></span><br><span class="line">0 2 * * * <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每天2、3、4、5点各执行一次</span></span><br><span class="line">0 2-5 * * * <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 周一至周五每天9点和18点各执行一次</span></span><br><span class="line">0 9,18 * * 1-5 <span class="built_in">command</span></span><br></pre></td></tr></table></figure><h2 id="systemctl-服务管理">systemctl :服务管理</h2><ul class="lvl-0"><li class="lvl-2"><p>centOS7以后使用<code>systemd</code>进行服务管理，其命令接口为<code>systemctl</code></p></li><li class="lvl-2"><p><code>systemctl</code>兼容了<code>service</code>，即<code>systemctl</code>也会去<code>/etc/init.d</code>目录下，查看、执行相关程序</p></li><li class="lvl-2"><p>如下centOS6及之前的服务启动方式，centOS7及之后仍然可以通过这种方式管理服务，实际上会重定向到systemctl命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service redis start</span><br><span class="line">service redis stop</span><br><span class="line">service redis restart</span><br><span class="line">service redis status</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>systemd</code>的服务配置放在目录<code>/usr/lib/systemd/system  (Centos)</code> 或 <code>/etc/systemd/system  (Ubuntu)</code></p></li><li class="lvl-2"><p>配置目录下有多种类型文件<code>.mount</code>,<code>.service</code>,<code>.target</code>,<code>.socket</code>,<code>.timer</code>等等</p><ul class="lvl-2"><li class="lvl-6">不同的文件类型代表不同的资源，统称为 Unit（单位），Unit 一共分成12种类型</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Service unit：系统服务</span><br><span class="line">Target unit：多个 Unit 构成的一个组</span><br><span class="line">Device Unit：硬件设备</span><br><span class="line">Mount Unit：文件系统的挂载点</span><br><span class="line">Automount Unit：自动挂载点</span><br><span class="line">Path Unit：文件或路径</span><br><span class="line">Scope Unit：不是由 Systemd 启动的外部进程</span><br><span class="line">Slice Unit：进程组</span><br><span class="line">Snapshot Unit：Systemd 快照，可以切回某个快照</span><br><span class="line">Socket Unit：进程间通信的 socket</span><br><span class="line">Swap Unit：swap 文件</span><br><span class="line">Timer Unit：定时器</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">重点学习<code>.service</code>文件，其定义了一个服务，分为[Unit]，[Service]，[Install]三个小节</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description:描述，</span><br><span class="line">After：在哪些服务启动后才启动</span><br><span class="line">ConditionPathExists: 执行条件</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile:变量所在文件</span><br><span class="line">ExecStart: 执行启动脚本</span><br><span class="line">Restart: fail时重启</span><br><span class="line">[Install]</span><br><span class="line">Alias:服务别名</span><br><span class="line">WangtedBy: 多用户模式下需要的</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>查看服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出当前已经启动的 unit，如果添加 -all 选项会同时列出没有启动的 unit</span></span><br><span class="line">systemctl ==== systemctl list-units</span><br><span class="line">systemctl -all</span><br><span class="line"><span class="comment"># 只查看服务类型为service的服务</span></span><br><span class="line">systemctl list-units --<span class="built_in">type</span>=service -all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 /lib/systemd/system/ 目录内的文件列出所有的服务及其当前的状态</span></span><br><span class="line">systemctl list-unit-files</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发现某个 服务 不工作，可以查看是否有 服务 加载失败</span></span><br><span class="line">systemctl --failed</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>service :系统服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动redis服务</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="comment"># 重新启动redis服务</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="comment"># 关闭redis服务</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="comment"># 不关闭redis的情况下重新加载配置文件，让新的设置生效</span></span><br><span class="line">systemctl reload redis</span><br><span class="line"><span class="comment"># 加入开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> redis</span><br><span class="line"><span class="comment"># 关闭开机自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> redis</span><br><span class="line"><span class="comment"># 查看redis服务状态</span></span><br><span class="line">systemctl status redis</span><br><span class="line"><span class="comment"># 目前有没有正在运行中</span></span><br><span class="line">systemctl is-active redis</span><br><span class="line"><span class="comment"># 开机时有没有默认要启用</span></span><br><span class="line">systemctl is-enabled redis</span><br><span class="line"><span class="comment"># 是否启动失败</span></span><br><span class="line">systemctl is-failed redis</span><br><span class="line"><span class="comment"># 列出 redis服务 的配置</span></span><br><span class="line">systemctl show redis</span><br><span class="line"><span class="comment"># 注销 redis服务 ，注销后就无法启动</span></span><br><span class="line">systemctl mask redis</span><br><span class="line"><span class="comment"># 取消 redis服务 的注销</span></span><br><span class="line">systemctl unmask redis</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>target :类似于运行级别，支持多个target同时启动。target其实是多个unit的组合，系统启动说白了就是启动多个unit</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 只查看服务类型为target的服务</span></span><br><span class="line">systemctl list-units --<span class="built_in">type</span>=target -all</span><br><span class="line"><span class="comment"># 取得目前缺省的 target</span></span><br><span class="line">systemctl get-default :multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 几个常用的 target。</span></span><br><span class="line">    graphical.target：多人模式，支持图形和命令行两种登录，对应之前的3,5级别。</span><br><span class="line">    multi-user.target：多人模式，只支持命令行登录，对应3级别！</span><br><span class="line">    rescue.target：单人模式，对应1级别，在无法使用 root 登陆的情况下，systemd 在开机时会多加一个额外的临时系统，与你原本的系统无关。这时你可以取得 root 的权限来维护你的系统。</span><br><span class="line">    emergency.target：单人模式，不过系统进入后根目录是只读的，紧急处理系统的错误，在无法使用 rescue.target 时，可以尝试使用这种模式！</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置缺省的 target</span></span><br><span class="line">systemctl set-default multi-user.target</span><br><span class="line"><span class="comment"># 切换到指定的 target</span></span><br><span class="line">systemctl isolate multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看依赖关系，查看 multi-user.target 依赖哪些服务</span></span><br><span class="line">systemctl list-dependencies multi-user.target</span><br><span class="line"><span class="comment"># 反向查看依赖关系， --reverse 选项查看 multi-user.target 被谁使用</span></span><br><span class="line">systemctl list-dependencies multi-user.target --reverse</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em></p><ul class="lvl-1"><li class="lvl-2">1.<code>systemd</code> 主配置文件 <code>/etc/systemd/system.conf</code></li><li class="lvl-2">2.开机会先加载 <code>/etc/systemd/system/default.target</code></li><li class="lvl-2">3.所有的 <code>service</code> 和 <code>target</code> 都在 <code>/usr/lib/systemd/system/</code>目录下</li><li class="lvl-2">4.<code>/etc/systemd/system/defaut.target</code> 是一个软连接，软连接到了<code>/usr/lib/systemd/system/multi-user.target</code>，它会加载<code>/usr/lib/systemd/system/multi-user.target.wants</code>下面的<code>service</code></li><li class="lvl-2">5.查看一个<code>service</code>属于哪个<code>target</code>，需要查看具体的service文件，如：<code>cat /usr/lib/systemd/system/sshd.service</code>，看里面<code>[install]</code>部分</li></ul></div><h2 id="chkconfig-设置系统服务在哪些运行级别下开机启动">chkconfig :设置系统服务在哪些运行级别下开机启动</h2><ul class="lvl-0"><li class="lvl-2"><p>centOS7之后不再使用这种方式，而是使用<code>systemctl</code>，但是仍然可以在<code>/etc/init.d</code>目录下创建管理脚本，然后通过<code>chkconfig</code>进行管理</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list ：查看全部系统服务的运行级别</span><br><span class="line">chkconfig --list sshd ：查看sshd系统服务的运行级别</span><br><span class="line">chkconfig --level 2345 sshd on ：修改sshd服务的运行级别为2345都启动，on/off</span><br><span class="line">chkconfig sshd on ：默认就是开启2345运行级别</span><br><span class="line">chkconfig --add nginx :添加服务到管理列表中，需要在`/etc/init.d`目录下有对应的nginx文件</span><br><span class="line">chkconfig --del nginx :从管理列表中删除</span><br></pre></td></tr></table></figure><h2 id="ntsysv-通过界面设置服务是否开机启动">ntsysv :通过界面设置服务是否开机启动</h2><ul class="lvl-0"><li class="lvl-2"><p>centOS7之后不再使用这种方式，而是使用<code>systemctl</code>，但是仍然可以使用其管理当前运行级别下的服务</p></li><li class="lvl-2"><p>运行命令后会弹出设置界面，服务前面有*号的表示开机启动，使用空格修改，Tab键进行跳转</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改当前的运行级别下的服务</span></span><br><span class="line">ntsysv</span><br><span class="line"><span class="comment"># 修改3运行级别下的服务</span></span><br><span class="line">ntsysv --level 3</span><br><span class="line"><span class="comment"># 同时修改3和5运行级别下的服务</span></span><br><span class="line">ntsysv --level 35</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>Linux运行级别</strong></em><br>0：系统关机模式，系统默认运行级别不能设置为0，否则无法正常启动系统<br>1：单用户模式，也称为救援模式，root权限，用于系统维护，禁止远程登陆，类似Windows下的安全模式登录。<br>2：无网络支持的多用户模式<br>3：有网络支持的多用户模式(文本模式，工作中最常使用的模式)<br>4：保留，未使用<br>5：有网络支持的图形化模式，支持多用户模式，登陆后进入图形GUI模式或GNOME、KDE图形化界面，如X Window系统。<br>6：重启模式，重新引导系统，即重启</p><p><strong>运行级别切换</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前的运行级别，输出结果为: 上一次运行级别 当前运行级别</span></span><br><span class="line">runlevel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换运行级别</span></span><br><span class="line">init 0====  systemctl isolate poweroff.target====  systemctl poweroff</span><br><span class="line">init 1====  systemctl isolate rescue.target</span><br><span class="line">init 3====  systemctl isolate multi-user.target</span><br><span class="line">init 5====  systemctl isolate graphical.target</span><br><span class="line">init 6====  systemctl isolate reboot.target  ====  systemctl reboot</span><br></pre></td></tr></table></figure></div><h2 id="fuser-可以显示出当前哪个程序在使用磁盘上的某个文件、挂载点、甚至网络端口，并给出程序进程的详细信息">fuser :可以显示出当前哪个程序在使用磁盘上的某个文件、挂载点、甚至网络端口，并给出程序进程的详细信息</h2><ul class="lvl-0"><li class="lvl-2"><p>fuser通常被用在诊断系统的<code>resource busy</code>问题，通常是在你希望<code>umount</code>指定的挂载点得时候遇到</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看哪个进程在访问/mnt目录</span></span><br><span class="line">fuser /mnt :只显示PID和权限</span><br><span class="line">fuser -u /mnt :-u，在每个PID后面添加进程拥有者的用户名称</span><br><span class="line">fuser -v /mnt :-v，显示详细信息，包含PID,USER,COMMAND等许多域</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把访问mnt目录的进程杀掉</span></span><br><span class="line">fuser -kv /mnt :-k，杀掉进程</span><br><span class="line">fuser -kvi /mnt :-i，会询问你是否杀掉对应的进程</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看80端口被哪个进程占用</span></span><br><span class="line">fuser -n tcp 80 :-n，指定协议和端口</span><br><span class="line">fuser 80/tcp :不加-n，需要这样指定协议和端口</span><br><span class="line"></span><br><span class="line">fuser -un tcp 80</span><br><span class="line">fuser -u 80/tcp</span><br><span class="line"></span><br><span class="line">fuser -vn tcp 80</span><br><span class="line">fuser -v 80/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀掉占用80端口的进程</span></span><br><span class="line">fuser -kvn tcp 80</span><br><span class="line">fuser -kvin tcp 80</span><br><span class="line">fuser -kvi 80/tcp</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍Linux进程管理等相关命令&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--系统硬件信息及其监控</title>
    <link href="https://blog.hanqunfeng.com/2023/03/27/linux-command10-stat/"/>
    <id>https://blog.hanqunfeng.com/2023/03/27/linux-command10-stat/</id>
    <published>2023-03-27T13:45:05.000Z</published>
    <updated>2023-03-28T02:38:26.792Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍Linux查看系统硬件信息及其监控等相关命令</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="uname-查看系统版本信息">uname :查看系统版本信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure><h2 id="查看网卡和路由信息">查看网卡和路由信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网卡</span></span><br><span class="line">$ ifconfig</span><br><span class="line"><span class="comment"># 路由</span></span><br><span class="line">$ route</span><br></pre></td></tr></table></figure><h2 id="查看cpu信息">查看cpu信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /proc/cpuinfo</span><br><span class="line"></span><br><span class="line">processor: 0</span><br><span class="line">vendor_id: GenuineIntel</span><br><span class="line">cpu family: 6</span><br><span class="line">model: 85</span><br><span class="line">model name: Intel(R) Xeon(R) Platinum 8269CY CPU @ 2.50GHz</span><br><span class="line">stepping: 7</span><br><span class="line">microcode: 0x1</span><br><span class="line">cpu MHz: 2499.998</span><br><span class="line">cache size: 36608 KB</span><br><span class="line">physical <span class="built_in">id</span>: 0</span><br><span class="line">siblings: 2</span><br><span class="line">core <span class="built_in">id</span>: 0</span><br><span class="line">cpu cores: 1</span><br><span class="line">apicid: 0</span><br><span class="line">initial apicid: 0</span><br><span class="line">fpu: <span class="built_in">yes</span></span><br><span class="line">fpu_exception: <span class="built_in">yes</span></span><br><span class="line">cpuid level: 22</span><br><span class="line">wp: <span class="built_in">yes</span></span><br><span class="line">flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single pti fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx avx512f avx512dq rdseed adx smap clflushopt clwb avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves arat avx512_vnni</span><br><span class="line">bugs: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit</span><br><span class="line">bogomips: 4999.99</span><br><span class="line">clflush size: 64</span><br><span class="line">cache_alignment: 64</span><br><span class="line">address sizes: 46 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释如下：</span></span><br><span class="line">processor：系统中逻辑处理核心的数量。对于单核处理器，该类将其视为 CPU 编号，对于多核处理器，它可以是物理内核，也可以是使用超线程技术的虚拟逻辑内核。（processor内核内部使用的对象，不一定绑定到物理设备，它们可能都具有相同的 physical <span class="built_in">id</span>）</span><br><span class="line">vendor_id：CPU制造商。</span><br><span class="line">cpu family：CPU 产品系列代号。</span><br><span class="line">mode：cpu属于其系列中的哪一代。</span><br><span class="line">model name：CPU的名称及其编号，标称频率。</span><br><span class="line">stepping：CPU属于生产更新版本。</span><br><span class="line">cpu MHz：实际CPU频率。</span><br><span class="line">cache size：CPU二级缓存的大小。</span><br><span class="line">physical <span class="built_in">id</span>：单个物理CPU标号。</span><br><span class="line">siblings：单个物理 CPU 的逻辑 CPU 数量。siblings = cpu 核心 * [2]。</span><br><span class="line">core <span class="built_in">id</span>：当前所在CPU中的物理内核<span class="built_in">id</span>。</span><br><span class="line">cpu cores：逻辑核所在CPU的物理核数。比如这里有2个cpu core，对应的core <span class="built_in">id</span>是0、1。</span><br><span class="line">apicid：用于区分不同逻辑核心的编号。系统中每个逻辑核的编号必须不同，编号不一定是连续的。</span><br><span class="line">fpu：是否有浮点单元。（Floating Point Unit）</span><br><span class="line">fpu_exception：是否支持浮点计算异常。</span><br><span class="line">cpuid level：在执行cpuid指令之前，eax寄存器中的值会根据不同的值返回不同的内容。</span><br><span class="line">wp：表示当前CPU是否支持内核态用户空间写保护。（Write Protection）</span><br><span class="line">flags：当前CPU支持的功能，例如浮点单元 (FPU) 的存在和处理 MMX 指令的能力。。</span><br><span class="line">bogomips：粗略测量的 CPU 速度（每秒百万条指令）。</span><br><span class="line">clflush size：每个flush缓存的大小单位。</span><br><span class="line">cache_alignment：缓存地址对齐单元。</span><br><span class="line">address sizes：可访问地址空间的数量。</span><br><span class="line">power management：支持电源管理。</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em><br><code>/proc</code>：目录中存放进程PID命名的目录以及系统相关信息文件，如：<br><code>cpuinfo</code> :cup信息<br><code>meminfo</code> :内存信息<br><code>partitions</code> :硬盘分区</p></div><h2 id="uptime-查看系统运行时间和cpu负载">uptime :查看系统运行时间和cpu负载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">uptime</span></span><br><span class="line"> 14:12:52 up 2 days, 20:41,  1 user,  load average: 0.06, 0.03, 0.01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"> 14:12:52    当前时间</span><br><span class="line"> up 2 days, 20:41    系统运行了多久</span><br><span class="line"> 1 user    当前登录用户数</span><br><span class="line"> load average: 0.06, 0.03, 0.01   系统负载，即任务队列的平均长度。三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</span><br></pre></td></tr></table></figure><h2 id="w-查看系统运行时间和cpu负载以及当前用户登录信息">w :查看系统运行时间和cpu负载以及当前用户登录信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ w</span><br><span class="line"> 17:35:25 up 3 days, 3 min,  1 user,  load average: 0.00, 0.00, 0.00</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/0    1.120.160.30     13:58    0.00s  0.12s  0.12s -bash</span><br></pre></td></tr></table></figure><h2 id="free-查看内存信息">free :查看内存信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示内存使用情况，默认单位k</span></span><br><span class="line">$ free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:         912836      100016       72608         460      740212      667376</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line">    total :物理内存总量</span><br><span class="line">    used  :已经使用的物理内存总量</span><br><span class="line">    free  :空闲内存总量</span><br><span class="line">    shared :是多个进程共享的内存总数；</span><br><span class="line">    buff/cache :用作内核缓存的内存量</span><br><span class="line"></span><br><span class="line">选项含义</span><br><span class="line">-b以 Byte（字节）为单位，显示内存使用情况。</span><br><span class="line">-k以 KB 为单位，显示内存使用情况，此选项是 free 命令的默认选项。</span><br><span class="line">-m以 MB 为单位，显示内存使用情况。</span><br><span class="line">-g以 GB 为单位，显示内存使用情况。</span><br><span class="line">-t在输出的最终结果中，输出内存和 swap 分区的总量。</span><br><span class="line">-o不显示系统缓冲区这一列。</span><br><span class="line">-s  间隔秒数根据指定的间隔时间，持续显示内存使用情况。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="df-查看硬盘信息">df :查看硬盘信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">df</span> -hT</span><br><span class="line">文件系统          类型      容量  已用  可用   已用% 挂载点</span><br><span class="line">devtmpfs       devtmpfs  436M     0  436M    0% /dev</span><br><span class="line">tmpfs          tmpfs     446M     0  446M    0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     446M  456K  446M    1% /run</span><br><span class="line">tmpfs          tmpfs     446M     0  446M    0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1      ext4       20G   14G  5.3G   72% /</span><br><span class="line">tmpfs          tmpfs      90M     0   90M    0% /run/user/0</span><br></pre></td></tr></table></figure><h2 id="top-动态显示进程状态">top :动态显示进程状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 动态显示进程状态，默认每3秒刷新一次</span></span><br><span class="line">$ top</span><br><span class="line">top - 14:08:03 up 2 days, 20:36,  1 user,  load average: 0.06, 0.03, 0.01</span><br><span class="line">Tasks:  87 total,   1 running,  47 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.1 us,  0.0 sy,  0.0 ni, 99.9 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :   912836 total,    65564 free,    99648 used,   747624 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.   667600 avail Mem</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line">  558 root      20   0   17832   1772   1288 S   0.1  0.2   0:45.25 assist_daemon</span><br><span class="line">  585 root      20   0  813912  10888   5104 S   0.1  1.2   3:51.47 aliyun-service</span><br><span class="line">  587 root      20   0  733348   9636   4604 S   0.1  1.1   0:11.96 rsyslogd</span><br><span class="line">    1 root      20   0   51640   4432   3156 S   0.0  0.5   0:33.44 systemd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line">    第一行为任务队列信息，同 <span class="built_in">uptime</span></span><br><span class="line">    第二行为进程信息:</span><br><span class="line">        total :进程总数</span><br><span class="line">        running :正在运行的进程数</span><br><span class="line">        sleeping :睡眠的进程数</span><br><span class="line">        stopped :停止的进程数</span><br><span class="line">        zombie :僵尸进程数</span><br><span class="line">    第三行为CPU信息:</span><br><span class="line">        0.1 us :用户空间占用CPU百分比</span><br><span class="line">        0.0 sy :内核空间占用CPU百分比</span><br><span class="line">        0.0 ni :用户进程空间内改变过优先级的进程占用CPU百分比</span><br><span class="line">        99.9 <span class="built_in">id</span> :空闲CPU百分比</span><br><span class="line">        0.0 wa :等待输入输出的CPU时间百分比，通过查看 CPU 的 wa% 值来判断当前磁盘 IO 性能，如果这个数值过大，很可能是磁盘 IO 太高了，当然也可能是其他原因，例如网络 IO 过高等。</span><br><span class="line">        0.0 hi :硬件CPU中断占用百分比</span><br><span class="line">        0.0 si :软中断占用百分比</span><br><span class="line">        0.0 st :虚拟机占用百分比</span><br><span class="line">    第四行和第五行为内存信息:</span><br><span class="line">        Mem:</span><br><span class="line">        912836 total    物理内存总量</span><br><span class="line">        65564 free    空闲内存总量</span><br><span class="line">        99648 used    使用的物理内存总量</span><br><span class="line">        747624 buff/cache    用作内核缓存的内存量</span><br><span class="line">        Swap:</span><br><span class="line">        0 total    交换区总量</span><br><span class="line">        0 free    空闲交换区总量</span><br><span class="line">        0 used    使用的交换区总量</span><br><span class="line">        667600 avail Mem    缓冲的交换区总量,内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的交换区的大小,相应的内存再次被换出时可不必再对交换区写入。</span><br><span class="line"></span><br><span class="line">    之后是进程信息区：默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND 列。</span><br><span class="line">    运行top后按f会查看到全部的展示项，这里只对部分展示项进行说明</span><br><span class="line">        序号  列名    含义</span><br><span class="line">        a    PID     进程<span class="built_in">id</span></span><br><span class="line">        b    PPID    父进程<span class="built_in">id</span></span><br><span class="line">        c    RUSER   Real user name</span><br><span class="line">        d    UID     进程所有者的用户<span class="built_in">id</span></span><br><span class="line">        e    USER    进程所有者的用户名</span><br><span class="line">        f    GROUP   进程所有者的组名</span><br><span class="line">        g    TTY     启动进程的终端名。不是从终端启动的进程则显示为 ?</span><br><span class="line">        h    PR      优先级。默认20。这个优先级对应实时进程，只使用1-99号优先级队列，序号越大优先级越高，0号留给普通进程使用</span><br><span class="line">        i    NI      <span class="built_in">nice</span>值。默认0。负值表示高优先级，正值表示低优先级</span><br><span class="line">        j    P       最后使用的CPU，仅在多CPU环境下有意义</span><br><span class="line">        k    %CPU    上次更新到现在的CPU时间占用百分比</span><br><span class="line">        l    TIME    进程使用的CPU时间总计，单位精确到秒， 3:51 表示 3分51秒</span><br><span class="line">        m    TIME+   进程使用的CPU时间总计，单位精确到1/100秒，3:51.47 表示 3分51秒多</span><br><span class="line">        n    %MEM    进程使用的物理内存百分比</span><br><span class="line">        o    VIRT    进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</span><br><span class="line">        p    SWAP    进程使用的虚拟内存中，被换出的大小，单位kb。</span><br><span class="line">        q    RES     进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</span><br><span class="line">        r    CODE    可执行代码占用的物理内存大小，单位kb</span><br><span class="line">        s    DATA    可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb</span><br><span class="line">        t    SHR     共享内存大小，单位kb</span><br><span class="line">        u    nFLT    页面错误次数</span><br><span class="line">        v    nDRT    最后一次写入到现在，被修改过的页面数。</span><br><span class="line">        w    S       进程状态(D=不可中断的睡眠状态,I=空闲内核线程,R=运行,S=睡眠,T=因作业控制信号而停止,Z=僵尸进程)</span><br><span class="line">        x    COMMAND 命令名/命令行</span><br><span class="line">        y    WCHAN   若该进程在睡眠，则显示睡眠中的系统函数名</span><br><span class="line">        z    Flags   任务标志，参考 sched.h</span><br><span class="line">        0    PGRP    进程组<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互命令：运行top后，可以键入如下指令与top进行交互</span></span><br><span class="line">    h :获得帮助</span><br><span class="line">    q :退出程序。</span><br><span class="line">    d :指定刷新时间</span><br><span class="line">    m :切换内存信息显示效果</span><br><span class="line">    t :切换显示进程和CPU状态信息。</span><br><span class="line">    c :切换显示命令名称和完整命令行。</span><br><span class="line">    u :查看指定用户的进程</span><br><span class="line">    k :终止执行中的进程 pid，系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。</span><br><span class="line">    r :重新设置进程优先级 n pid，系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。</span><br><span class="line">    翻页:</span><br><span class="line">    Shift + &lt;  :上翻</span><br><span class="line">    Shift + &gt;  :下翻</span><br><span class="line">    Ctrl+L 擦除并且重写屏幕。</span><br><span class="line">    i :忽略闲置和僵死进程。这是一个开关式命令。</span><br><span class="line">    l :切换显示平均负载和启动时间信息。</span><br><span class="line">    M :根据驻留内存大小进行排序。</span><br><span class="line">    P :根据CPU使用百分比大小进行排序。</span><br><span class="line">    T :根据时间/累计时间进行排序。</span><br><span class="line">    W :将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。</span><br><span class="line">    f :从当前显示中添加或者删除项目。按d添加或删除，esc返回。此时也可以调整每一列的显示顺序，按右键会将当前项全选，然后上下调整位置后按回车即可。默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND 列</span><br><span class="line">    o :过滤指定的内容，如过滤用户则输入：USER=username，匹配时采用模糊匹配，多次输入o会在当前过滤基础上增加新的过滤条件，q退出</span><br><span class="line">    S :切换到累计模式。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># top使用格式</span></span><br><span class="line">top [-] [d] [p] [q] [c] [C] [S] [s]</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数说明</span></span><br><span class="line">    d 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。</span><br><span class="line">    p 通过指定监控进程ID来仅仅监控某个进程的状态。</span><br><span class="line">    S 指定累计模式</span><br><span class="line">    s 使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。</span><br><span class="line">    i 使top不显示任何闲置或者僵死进程。</span><br><span class="line">    c 显示整个命令行而不只是显示命令名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">top   //每隔5秒显式所有进程的资源占用情况</span><br><span class="line">top -d 2  //每隔2秒显式所有进程的资源占用情况</span><br><span class="line">top -c  //每隔5秒显式进程的资源占用情况，并显示进程的命令行参数(默认只有进程名)</span><br><span class="line">top -p 12345 -p 6789//每隔5秒显示pid是12345和pid是6789的两个进程的资源占用情况</span><br><span class="line">top -d 2 -c -p 123456 //每隔2秒显示pid是12345的进程的资源使用情况，并显式该进程启动的命令行参数</span><br><span class="line">top -p进程1的ID  -p进程2的<span class="built_in">id</span> -p进程3的<span class="built_in">id</span> …… //查看某几个进程的状态</span><br></pre></td></tr></table></figure><h2 id="sar-查看-CPU-、内存、磁盘、网络等性能指标">sar :查看 CPU 、内存、磁盘、网络等性能指标</h2><ul class="lvl-0"><li class="lvl-2"><p>sar 命令是分析系统瓶颈的神器，可以用来查看 CPU 、内存、磁盘、网络等性能。</p></li><li class="lvl-2"><p>查看磁盘性能</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前磁盘性能，-d参数代表查看磁盘性能，-p参数代表将 dev 设备按照 sda，sdb……名称显示，1是间隔1秒，2是采集2次</span></span><br><span class="line">$ sar -d -p 1 2</span><br><span class="line"></span><br><span class="line">07时35分57秒       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">07时35分58秒      xvda      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">07时35分58秒       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">07时35分59秒      xvda     12.00      0.00    155.00     12.92      0.01      0.67      1.67      2.00</span><br><span class="line"></span><br><span class="line">平均时间:       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">平均时间:      xvda      6.00      0.00     77.50     12.92      0.00      0.67      1.67      1.00</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line">    tps :每秒从物理磁盘I/O的次数.多个逻辑请求会被合并为一个I/O磁盘请求， 一次传输的大小是不确定的.</span><br><span class="line">    rd_sec/s :每秒读扇区的次数.</span><br><span class="line">    wr_sec/s :每秒写扇区的次数.</span><br><span class="line">    avgrq-sz :平均每次设备I/O操作的数据大小（扇区）.</span><br><span class="line">    avgqu-sz :磁盘请求队列的平均长度.</span><br><span class="line">    await :从请求磁盘操作到 系统完成处理，每次请求的平均消耗时间 包括请求队列等待时间，单位是毫秒（1秒=1000毫秒）.</span><br><span class="line">    svctm :系统处理每次请求的平均时间 不包括在请求队列中消耗的时间.</span><br><span class="line">    %util :I/O请求占CPU的百分比，比率越大，说明越饱和.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    avgqu-sz 的值较低时，设备的利用率较高</span><br><span class="line">    %util I/O请求占用的CPU百分比，值越高，说明I/O越慢。</span><br><span class="line"></span><br><span class="line">    对于磁盘 IO 性能，一般有如下评判标准：</span><br><span class="line">    正常情况下 svctm 应该是小于 await 值的，而 svctm 的大小和磁盘性能有关，CPU 、内存的负荷也会对 svctm 值造成影响，过多的请求也会间接的导致 svctm 值的增加。</span><br><span class="line">    await 值的大小一般取决与 svctm 的值和 I/O 队列长度以 及I/O 请求模式，如果 svctm 的值与 await 很接近，表示几乎没有 I/O 等待，磁盘性能很好，如果 await 的值远高于 svctm 的值，则表示 I/O 队列等待太长，系统上运行的应用程序将变慢，此时可以通过更换更快的硬盘来解决问题。</span><br><span class="line">    %util 项的值也是衡量磁盘 I/O 的一个重要指标，如果 %util 接近 100% ，表示磁盘产生的 I/O 请求太多，I/O 系统已经满负荷的在工作，该磁盘可能存在瓶颈。长期下去，势必影响系统的性能，可以通过优化程序或者通过更换更高、更快的磁盘来解决此问题。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想继续查看以前的报告；可以查看保存在/var/log/sa/下的sar日志，保留最近30天的日志: 日志名称以sa开头，日期号结尾，如11号的日志为sa11</span></span><br><span class="line">$ sar -d -p -f  /var/log/sa/sa11  | more</span><br><span class="line"></span><br><span class="line">00时00分01秒       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">00时10分01秒      xvda     10.67      0.13    190.20     17.84      0.12     11.08      3.33      3.55</span><br><span class="line">00时20分01秒      xvda     11.40      0.08    234.10     20.54      0.07      6.07      3.26      3.72</span><br><span class="line">00时30分01秒      xvda     11.05      0.19    200.59     18.17      0.03      2.82      2.51      2.77</span><br><span class="line">00时40分01秒      xvda     10.78      0.00    225.89     20.96      0.14     12.59      4.64      5.00</span><br><span class="line">00时50分01秒      xvda     10.53      0.00    183.95     17.47      0.04      4.16      3.04      3.20</span><br><span class="line">01时00分01秒      xvda     10.58      0.00    187.13     17.68      0.12     11.18      4.52      4.78</span><br><span class="line">01时10分01秒      xvda     10.74      0.00    187.12     17.42      0.09      8.20      4.76      5.11</span><br><span class="line">01时20分01秒      xvda     11.52      0.05    212.70     18.47      0.06      4.83      2.52      2.90</span><br><span class="line">01时30分01秒      xvda     10.69      0.05    191.77     17.94      0.04      3.43      2.65      2.83</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看cpu使用率指标</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前的cpu指标，-u指cpu使用率，默认就是-u，1是间隔1秒，3是采集3次</span></span><br><span class="line">$ sar -u 1 3</span><br><span class="line"></span><br><span class="line">15时48分53秒     CPU     %user     %<span class="built_in">nice</span>   %system   %iowait    %steal     %idle</span><br><span class="line">15时48分54秒     all      0.50      0.00      0.50      0.00      0.00     99.00</span><br><span class="line">15时48分55秒     all      0.00      0.00      0.00      0.00      0.00    100.00</span><br><span class="line">15时48分56秒     all      0.00      0.00      0.00      0.00      0.00    100.00</span><br><span class="line">平均时间:     all      0.17      0.00      0.17      0.00      0.00     99.67</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看全天的cpu指标</span></span><br><span class="line">$ sar -u -p</span><br><span class="line"></span><br><span class="line">00时00分01秒     CPU     %user     %<span class="built_in">nice</span>   %system   %iowait    %steal     %idle</span><br><span class="line">00时10分01秒     all      0.08      0.00      0.08      0.00      0.00     99.84</span><br><span class="line">00时20分01秒     all      0.08      0.00      0.07      0.00      0.00     99.85</span><br><span class="line">00时30分01秒     all      0.07      0.00      0.08      0.00      0.00     99.84</span><br><span class="line">00时40分01秒     all      0.15      0.00      0.08      0.00      0.00     99.78</span><br><span class="line">00时50分01秒     all      0.07      0.00      0.07      0.00      0.00     99.85</span><br><span class="line">01时00分01秒     all      0.07      0.00      0.08      0.00      0.00     99.85</span><br><span class="line">01时10分01秒     all      0.67      0.00      0.12      0.01      0.00     99.20</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line">    CPU :all表示统计所有CPU的平均值</span><br><span class="line">    %user :显示在用户级别（application）运行使用 CPU 总时间的百分比</span><br><span class="line">    %<span class="built_in">nice</span> :改变过优先级的进程的CPU使用率</span><br><span class="line">    %system :内核空间的CPU使用率， 在核心级别（kernel）运行所使用CPU总时间的百分比</span><br><span class="line">    %iowait :显示用于等待I/O操作占用CPU总时间的百分比</span><br><span class="line">    %steal :管理程序（hypervisor）为另一个虚拟进程提供服务而等待虚拟CPU的百分比</span><br><span class="line">    %idle :显示 CPU空闲时间占用CPU总时间的百分比</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要监控如下两项：</span></span><br><span class="line">    %iowait 过高表示存在I/O瓶颈，即磁盘IO无法满足业务需求</span><br><span class="line">    %idle 过低表示CPU使用比较严重，需要结合内存使用等情况判断CPU是否瓶颈。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看以前的报告,保存在/var/log/sa/下的sar日志，保留最近30天的日志: 日志名称以sa开头，日期号结尾，如11号的日志为sa11</span></span><br><span class="line">sar -u -f  /var/log/sa/sa11  | more</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看cpu负载指标</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前的cpu的负载指标，-q指cpu负载，1是间隔1秒，3是采集3次</span></span><br><span class="line">$ sar -q 1 3</span><br><span class="line"></span><br><span class="line">16时00分32秒   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked</span><br><span class="line">16时00分33秒         0       127      0.00      0.00      0.00         0</span><br><span class="line">16时00分34秒         0       127      0.00      0.00      0.00         0</span><br><span class="line">16时00分35秒         0       127      0.00      0.00      0.00         0</span><br><span class="line">平均时间:         0       127      0.00      0.00      0.00         0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line">    runq-sz :运行队列的长度（等待运行的进程数）</span><br><span class="line">    plist_sz :进程列表中进程（processes）和线程（threads）的数量</span><br><span class="line">    Idavg-1 :最后1分钟的CPU平均负载，即将多核CPU过去一分钟的负载相加再除以核心数得出的平均值</span><br><span class="line">    ldavg_5 :最后5分钟的CPU平均负载</span><br><span class="line">    ldavg-15 :最后15分钟的CPU平均负载</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看以前的报告,保存在/var/log/sa/下的sar日志，保留最近30天的日志: 日志名称以sa开头，日期号结尾，如11号的日志为sa11</span></span><br><span class="line">sar -q -f  /var/log/sa/sa11  | more</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>内存监控</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ sar -r 1 3</span><br><span class="line"></span><br><span class="line">16时05分03秒 kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty</span><br><span class="line">16时05分04秒     75000    837836     91.78     48728    649444    471312     51.63    180868    577236        36</span><br><span class="line">16时05分05秒     75000    837836     91.78     48728    649444    471312     51.63    180868    577240        36</span><br><span class="line">16时05分06秒     75000    837836     91.78     48728    649444    471312     51.63    180868    577240        36</span><br><span class="line">平均时间:     75000    837836     91.78     48728    649444    471312     51.63    180868    577239        36</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line">kbmemfree :这个值和free命令中的free值基本一致， 所以它不包括buffer和cache的空间。</span><br><span class="line">kbmemused :这个值和free命令中的used值基本一致， 所以它包括buffer和cache的空间。</span><br><span class="line">%memused :这个值是kbmemused和内存总量（不包括swap）的一个百分比。</span><br><span class="line">kbbuffers和kbcached :这两个值就是free命令中的buffer和cache.</span><br><span class="line">kbcommit :保证当前系统所需要的内存，即为了确保不溢出而需要的内存(RAM+swap)。</span><br><span class="line">%commit :这个值是kbcommit与内存总量（包括swap）的一个百分比。（可以看做内存使用量的百分比）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看以前的报告,保存在/var/log/sa/下的sar日志，保留最近30天的日志: 日志名称以sa开头，日期号结尾，如11号的日志为sa11</span></span><br><span class="line">sar -r -f  /var/log/sa/sa11  | more</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>网络监控</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -n选项可以汇报网络相关信息，可用的值有很多，我们查询最多的就是 DEV（网卡信息）</span></span><br><span class="line">$ sar -n DEV 1 2</span><br><span class="line"></span><br><span class="line">16时23分03秒     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s</span><br><span class="line">16时23分04秒        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">16时23分04秒      eth0      2.00      0.00      0.13      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">16时23分04秒     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s</span><br><span class="line">16时23分05秒        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">16时23分05秒      eth0      3.00      3.00      0.19      0.32      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">平均时间:     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s</span><br><span class="line">平均时间:        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">平均时间:      eth0      2.50      1.50      0.16      0.16      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line">    IFACE：就是网络设备的名称；</span><br><span class="line">    rxpck/s：每秒钟接收到的包数目</span><br><span class="line">    txpck/s：每秒钟发送出去的包数目</span><br><span class="line">    rxbyt/s：每秒钟接收到的字节数</span><br><span class="line">    txbyt/s：每秒钟发送出去的字节数</span><br><span class="line">    rxcmp/s：每秒钟接收到的压缩包数目</span><br><span class="line">    txcmp/s：每秒钟发送出去的压缩包数目</span><br><span class="line">    txmcst/s：每秒钟接收到的多播包的包数目</span><br><span class="line"></span><br><span class="line"><span class="comment"># -n 的值：</span></span><br><span class="line">    1.DEV :网卡，主要查看这一项</span><br><span class="line">    2.EDEV :网卡 (错误)</span><br><span class="line">    3.NFS :NFS 客户端</span><br><span class="line">    4.NFSD :NFS 服务器</span><br><span class="line">    5.SOCK :Sockets (套接字) (v4)</span><br><span class="line">    6.IP :IP 流 (v4)</span><br><span class="line">    7.EIP :IP 流 (v4) (错误)</span><br><span class="line">    8.ICMP :ICMP 流 (v4)</span><br><span class="line">    9.EICMP :ICMP 流 (v4) (错误)</span><br><span class="line">    10.TCP :TCP 流 (v4)</span><br><span class="line">    11.ETCP :TCP 流 (v4) (错误)</span><br><span class="line">    12.UDP :UDP 流 (v4)</span><br><span class="line">    13.SOCK6 :Sockets (套接字) (v6)</span><br><span class="line">    14.IP6 :IP 流 (v6)</span><br><span class="line">    15.EIP6 :IP 流 (v6) (错误)</span><br><span class="line">    16.ICMP6 :ICMP 流 (v6)</span><br><span class="line">    17.EICMP6 :ICMP 流 (v6) (错误)</span><br><span class="line">    18.UDP6 :UDP 流 (v6)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>通过 <code>-o</code> 将监控信息输出到文件，然后通过 <code>-f</code> 查看</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sar -u 1 3 -o sar.txt</span><br><span class="line">$ sar -f sar.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍Linux查看系统硬件信息及其监控等相关命令&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--源代码安装nginx</title>
    <link href="https://blog.hanqunfeng.com/2023/03/21/linux-command09-makeinstall-nginx/"/>
    <id>https://blog.hanqunfeng.com/2023/03/21/linux-command09-makeinstall-nginx/</id>
    <published>2023-03-21T13:30:05.000Z</published>
    <updated>2023-05-10T09:44:50.167Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>虽然绝大部分软件都可以通过<code>rpm</code>或者<code>yum</code>的方式进行安装，但是由于yum中的版本不一定是最新版，或者软件开发商没有将软件放到yum源中，所有也有一些软件需要通过源代码的方式进行安装。</p></li><li class="lvl-2"><p>本文以源代码安装nginx为例说明如何通过源代码安装软件。</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="安装nginx">安装nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nginx最小依赖</span></span><br><span class="line">yum install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果通过yum安装nginx，只需要执行如下命令</span></span><br><span class="line">yum install nginx -y <span class="comment"># 本文不通过yum安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载nginx最新稳定版</span></span><br><span class="line">wget https://nginx.org/download/nginx-1.22.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf nginx-1.22.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入解压后的目录</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.22.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置并指定安装参数</span></span><br><span class="line">./configure --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line">    <span class="comment"># 参数说明</span></span><br><span class="line">    --with-http_ssl_module :安装ssl模块</span><br><span class="line">    --with-http_stub_status_module :查看nginx的客户端状态模块</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出内容，所有文件的默认路径</span></span><br><span class="line">    Configuration summary</span><br><span class="line">    + using system PCRE library</span><br><span class="line">    + using system OpenSSL library</span><br><span class="line">    + using system zlib library</span><br><span class="line"></span><br><span class="line">    nginx path prefix: <span class="string">&quot;/usr/local/nginx&quot;</span></span><br><span class="line">    nginx binary file: <span class="string">&quot;/usr/local/nginx/sbin/nginx&quot;</span></span><br><span class="line">    nginx modules path: <span class="string">&quot;/usr/local/nginx/modules&quot;</span></span><br><span class="line">    nginx configuration prefix: <span class="string">&quot;/usr/local/nginx/conf&quot;</span></span><br><span class="line">    nginx configuration file: <span class="string">&quot;/usr/local/nginx/conf/nginx.conf&quot;</span></span><br><span class="line">    nginx pid file: <span class="string">&quot;/usr/local/nginx/logs/nginx.pid&quot;</span></span><br><span class="line">    nginx error <span class="built_in">log</span> file: <span class="string">&quot;/usr/local/nginx/logs/error.log&quot;</span></span><br><span class="line">    nginx http access <span class="built_in">log</span> file: <span class="string">&quot;/usr/local/nginx/logs/access.log&quot;</span></span><br><span class="line">    nginx http client request body temporary files: <span class="string">&quot;client_body_temp&quot;</span></span><br><span class="line">    nginx http proxy temporary files: <span class="string">&quot;proxy_temp&quot;</span></span><br><span class="line">    nginx http fastcgi temporary files: <span class="string">&quot;fastcgi_temp&quot;</span></span><br><span class="line">    nginx http uwsgi temporary files: <span class="string">&quot;uwsgi_temp&quot;</span></span><br><span class="line">    nginx http scgi temporary files: <span class="string">&quot;scgi_temp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以自定义安装路径</span></span><br><span class="line">./configure --prefix=/usr/local/nginx-1.22.1 --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line">    <span class="comment"># 参数说明</span></span><br><span class="line">    --prefix=/usr/local/nginx-1.22.1 :安装路径</span><br><span class="line"></span><br><span class="line">    <span class="comment">#输出内容，此时看到所有文件都会被安装到指定的路径</span></span><br><span class="line">    Configuration summary</span><br><span class="line">    + using system PCRE library</span><br><span class="line">    + using system OpenSSL library</span><br><span class="line">    + using system zlib library</span><br><span class="line"></span><br><span class="line">    nginx path prefix: <span class="string">&quot;/usr/local/nginx-1.22.1&quot;</span></span><br><span class="line">    nginx binary file: <span class="string">&quot;/usr/local/nginx-1.22.1/sbin/nginx&quot;</span></span><br><span class="line">    nginx modules path: <span class="string">&quot;/usr/local/nginx-1.22.1/modules&quot;</span></span><br><span class="line">    nginx configuration prefix: <span class="string">&quot;/usr/local/nginx-1.22.1/conf&quot;</span></span><br><span class="line">    nginx configuration file: <span class="string">&quot;/usr/local/nginx-1.22.1/conf/nginx.conf&quot;</span></span><br><span class="line">    nginx pid file: <span class="string">&quot;/usr/local/nginx-1.22.1/logs/nginx.pid&quot;</span></span><br><span class="line">    nginx error <span class="built_in">log</span> file: <span class="string">&quot;/usr/local/nginx-1.22.1/logs/error.log&quot;</span></span><br><span class="line">    nginx http access <span class="built_in">log</span> file: <span class="string">&quot;/usr/local/nginx-1.22.1/logs/access.log&quot;</span></span><br><span class="line">    nginx http client request body temporary files: <span class="string">&quot;client_body_temp&quot;</span></span><br><span class="line">    nginx http proxy temporary files: <span class="string">&quot;proxy_temp&quot;</span></span><br><span class="line">    nginx http fastcgi temporary files: <span class="string">&quot;fastcgi_temp&quot;</span></span><br><span class="line">    nginx http uwsgi temporary files: <span class="string">&quot;uwsgi_temp&quot;</span></span><br><span class="line">    nginx http scgi temporary files: <span class="string">&quot;scgi_temp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 将相关文件拷贝到 --prefix 指定的安装目录中</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="配置和管理nginx">配置和管理nginx</h2><ul class="lvl-0"><li class="lvl-2"><p>上面就完成了nginx安装，之后我们可以根据需要对配置文件进行修改，并启动nginx</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设我们将nginx安装到了自定义安装路径/usr/local/nginx-1.22.1下</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx-1.22.1</span><br><span class="line"><span class="built_in">ls</span> -1</span><br><span class="line">conf :nginx配置文件目录</span><br><span class="line">html :默认web根目录</span><br><span class="line">logs :默认日志输出目录</span><br><span class="line">sbin :启动命令nginx所在目录，make后真正有用的就这个nginx命令，重新编译就是为了重新生成新的nginx命令</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将nginx命令软连接到系统命令路径下，因为/usr/bin/已经被加入到PATH中了</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/nginx-1.22.1/sbin/nginx /usr/bin/</span><br><span class="line"><span class="comment"># 查看nginx版本，测试nginx命令是否全局可用</span></span><br><span class="line">nginx -v</span><br><span class="line">nginx version: nginx/1.22.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建nginx用户和组</span></span><br><span class="line">$ groupadd nginx</span><br><span class="line">$ useradd -g nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim /usr/local/nginx-1.22.1/conf/nginx.conf</span><br><span class="line">    <span class="comment"># 为了方便演示，这里仅仅修改如下两项内容</span></span><br><span class="line">    <span class="comment"># worker用户，这里配置为我们上面创建的nginx用户和nginx组</span></span><br><span class="line">    user  nginx nginx;</span><br><span class="line">    <span class="comment"># 启动2个worker进程</span></span><br><span class="line">    worker_processes  2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置文件是否正确</span></span><br><span class="line">nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx-1.22.1/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx-1.22.1/conf/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果配置文件被修改了，可以通过该命令重新加载新的配置，而不需要重新启动nginx</span></span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line"><span class="comment"># 会使用默认的配置文件</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 启动时指定配置文件</span></span><br><span class="line">nginx -c /usr/local/nginx-1.22.1/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程</span></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line">root     18538     1  0 11:11 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nginx    18592 18538  0 11:22 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx    18593 18538  0 11:22 ?        00:00:00 nginx: worker process</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口</span></span><br><span class="line">netstat -tunpl | grep nginx</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      18538/nginx: master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即停止nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从容停止nginx</span></span><br><span class="line"><span class="built_in">kill</span> -QUIT `<span class="built_in">cat</span> /usr/local/nginx-1.22.1/logs/nginx.pid`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即重启nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平滑重启nginx</span></span><br><span class="line"><span class="built_in">kill</span> -HUP `<span class="built_in">cat</span> /usr/local/nginx-1.22.1/logs/nginx.pid` <span class="comment"># 只会重启worker进程</span></span><br></pre></td></tr></table></figure><h2 id="为nginx添加新的模块">为nginx添加新的模块</h2><ul class="lvl-0"><li class="lvl-2"><p>nginx安装成功后，发现有一些其他模块没有编译进去，或者想额外添加一些模块，这时候就要重新编译nginx。</p></li><li class="lvl-2"><p>重新编译之前，需要查看之前安装时的参数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -V</span><br><span class="line">nginx version: nginx/1.22.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx-1.22.1 --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>configure arguments</code>中就是之前编译安装时配置的参数</p></li><li class="lvl-2"><p>如添加新的模块<code>http_gzip_static_module</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入nginx源码目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/soft/nginx-1.22.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置并指定安装参数，使用上面得到的上一次安装的参数，还要将新的模块也加上</span></span><br><span class="line">./configure --prefix=/usr/local/nginx-1.22.1 --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译，注意不要执行 make install，因为我们只需要得到nginx命令，运行make install会覆盖之前的所有目录</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先备份原先的nginx命令</span></span><br><span class="line"><span class="built_in">cp</span> /usr/local/nginx-1.22.1/sbin/nginx /usr/local/nginx-1.22.1/sbin/nginx.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将新生成的nginx命令复制到安装目录中</span></span><br><span class="line"><span class="built_in">cp</span> ./objs/nginx /usr/local/nginx-1.22.1/sbin/nginx</span><br><span class="line"><span class="comment"># 此时如果遇到提示 cp: 无法创建普通文件&quot;/usr/local/nginx-1.22.1/sbin/nginx&quot;: 文本文件忙 , 可以通过如下命令进行复制</span></span><br><span class="line"><span class="built_in">cp</span> -rfp ./objs/nginx /usr/local/nginx-1.22.1/sbin/nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平滑重启nginx(没好使)</span></span><br><span class="line">make upgrade</span><br><span class="line">    <span class="comment"># 会执行Makefile下的如下命令，也可以手工按如下命令进行平滑重启</span></span><br><span class="line">    upgrade:</span><br><span class="line">/usr/local/nginx-1.22.1/sbin/nginx -t</span><br><span class="line">    <span class="comment"># 原因是执行如下命令没有创建新的master进程</span></span><br><span class="line"><span class="built_in">kill</span> -USR2 `<span class="built_in">cat</span> /usr/local/nginx-1.22.1/logs/nginx.pid`</span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"><span class="built_in">test</span> -f /usr/local/nginx-1.22.1/logs/nginx.pid.oldbin</span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -QUIT `<span class="built_in">cat</span> /usr/local/nginx-1.22.1/logs/nginx.pid.oldbin`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否是新的nginx</span></span><br><span class="line">nginx -V</span><br><span class="line">nginx version: nginx/1.22.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx-1.22.1 --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装第三方模块，<code>configure</code>中需要添加<code>--add-module=module_dir</code>，具体查看第三方模块官网说明即可</p></li></ul><h2 id="nginx编译时可以添加哪些参数">nginx编译时可以添加哪些参数</h2><ul class="lvl-0"><li class="lvl-2"><p>以下是通过<code>yum</code>安装nginx时的编译参数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定nginx安装路径，至少web根目录在该路径下</span></span><br><span class="line">--prefix=/usr/share/nginx</span><br><span class="line"><span class="comment"># 指定nginx命令安装路径</span></span><br><span class="line">--sbin-path=/usr/sbin/nginx</span><br><span class="line"><span class="comment"># 指定模块安装路径</span></span><br><span class="line">--modules-path=/usr/lib64/nginx/modules</span><br><span class="line"><span class="comment"># 指定主配置文件</span></span><br><span class="line">--conf-path=/etc/nginx/nginx.conf</span><br><span class="line"><span class="comment"># 指定错误日志</span></span><br><span class="line">--error-log-path=/var/log/nginx/error.log</span><br><span class="line"><span class="comment"># 指定访问日志</span></span><br><span class="line">--http-log-path=/var/log/nginx/access.log</span><br><span class="line"><span class="comment"># 设定http客户端请求临时文件路径</span></span><br><span class="line">--http-client-body-temp-path=/var/lib/nginx/tmp/client_body</span><br><span class="line"><span class="comment"># 设定http代理临时文件路径</span></span><br><span class="line">--http-proxy-temp-path=/var/lib/nginx/tmp/proxy</span><br><span class="line"><span class="comment"># 设定http fastcgi临时文件路径，基本就是php缓存</span></span><br><span class="line">--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi</span><br><span class="line"><span class="comment"># 设定http uwsgi临时文件路径，python缓存路径</span></span><br><span class="line">--http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi</span><br><span class="line"><span class="comment"># 设定http scgi临时文件路径</span></span><br><span class="line">--http-scgi-temp-path=/var/lib/nginx/tmp/scgi</span><br><span class="line"><span class="comment"># master进程ID</span></span><br><span class="line">--pid-path=/run/nginx.pid</span><br><span class="line"><span class="comment"># 锁路径，防止重复启动nginx</span></span><br><span class="line">--lock-path=/run/lock/subsys/nginx</span><br><span class="line"><span class="comment"># worker进程的用户和组</span></span><br><span class="line">--user=nginx --group=nginx</span><br><span class="line"><span class="comment"># 启用动态模块兼容性</span></span><br><span class="line">--with-compat</span><br><span class="line"><span class="comment"># 启用debug日志</span></span><br><span class="line">--with-debug</span><br><span class="line"><span class="comment"># 使用nginx的aio特性会大大提高性能，比如图片站的特点是大量的读io操作，nginx aio不用等待每次io的结果，有助于并发处理大量io和提高nginx处理效率。</span></span><br><span class="line"><span class="comment"># aio的优点就是能够同时提交多个io请求给内核，然后直接由内核的io调度算法去处理这些请求(directio)，这样的话，内核就有可能执行一些合并，节约了读取文件的处理时间。</span></span><br><span class="line"><span class="comment"># 异步非阻塞</span></span><br><span class="line">--with-file-aio</span><br><span class="line"><span class="comment"># 调试用，剖析程序性能瓶颈</span></span><br><span class="line">--with-google_perftools_module</span><br><span class="line"><span class="comment"># 作为一个输出过滤器，支持不完全缓冲，分部分响应请求。在nginx响应之前或者之后追加文本内容，比如想在站点底部追加一个js广告或者新增的css样式</span></span><br><span class="line">--with-http_addition_module</span><br><span class="line"><span class="comment"># 认证模块，实现基于一个子请求的结果的客户端授权。如果该子请求返回的2xx响应代码，所述接入是允许的。如果它返回401或403中，访问被拒绝与相应的错误代码。由子请求返回的任何其他响应代码被认为是一个错误。</span></span><br><span class="line">--with-http_auth_request_module</span><br><span class="line"><span class="comment"># WebDAV模块，增加 PUT,DELETE,MKCOL,COPY和MOVE方法。默认情况下为关闭</span></span><br><span class="line"><span class="comment"># 扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法，使应用程序可直接对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。</span></span><br><span class="line">--with-http_dav_module</span><br><span class="line"><span class="comment"># 允许在内存不足的情况下返回204或444码</span></span><br><span class="line">--with-http_degradation_module</span><br><span class="line"><span class="comment"># 提供寻求内存使用基于时间的偏移量文件</span></span><br><span class="line">--with-http_flv_module</span><br><span class="line"><span class="comment"># 它为不支持“gzip”编码方法的客户端解压具有“Content-Encoding: gzip”头的响应。</span></span><br><span class="line">--with-http_gunzip_module</span><br><span class="line"><span class="comment"># 在线实时压缩输出数据流</span></span><br><span class="line">--with-http_gzip_static_module</span><br><span class="line"><span class="comment"># 传输JPEG/GIF/PNG 图片的一个过滤器）（默认为不启用。gd库要用到）</span></span><br><span class="line">--with-http_image_filter_module=dynamic</span><br><span class="line"><span class="comment"># 多媒体模块</span></span><br><span class="line">--with-http_mp4_module</span><br><span class="line">--with-http_perl_module=dynamic</span><br><span class="line"><span class="comment"># nginx显示随机首页模块</span></span><br><span class="line">--with-http_random_index_module</span><br><span class="line"><span class="comment"># Nginx获取真实IP模块，这个模块允许从请求标头更改客户端的IP地址值，默认为关</span></span><br><span class="line">--with-http_realip_module</span><br><span class="line"><span class="comment"># nginx安全下载模块</span></span><br><span class="line">--with-http_secure_link_module</span><br><span class="line"><span class="comment"># nginx中文文档</span></span><br><span class="line">--with-http_slice_module</span><br><span class="line"><span class="comment"># 安装ssl模块</span></span><br><span class="line">--with-http_ssl_module</span><br><span class="line"><span class="comment"># 查看nginx客户端状态模块</span></span><br><span class="line">--with-http_stub_status_module</span><br><span class="line"><span class="comment"># 允许用一些其他文本替换nginx响应中的一些文本</span></span><br><span class="line">--with-http_sub_module</span><br><span class="line"><span class="comment"># 提供HTTP2支持，要使用http2，还需要同时启用ssl服务，nginx1.19.1之前的版本不支持http2</span></span><br><span class="line">--with-http_v2_module</span><br><span class="line"><span class="comment"># 过滤转换XML请求</span></span><br><span class="line">--with-http_xslt_module=dynamic</span><br><span class="line"><span class="comment"># 启用POP3/IMAP4/SMTP代理模块支持</span></span><br><span class="line">--with-mail=dynamic --with-mail_ssl_module</span><br><span class="line"><span class="comment"># 支持正则，使nginx支持http rewrite模块</span></span><br><span class="line">--with-pcre</span><br><span class="line"><span class="comment"># 编译PCRE包含“just-in-time compilation”</span></span><br><span class="line">--with-pcre-jit</span><br><span class="line"><span class="comment"># TCP\UDP负载均衡模块。nginx从1.9.0开始，新增加了一个stream模块，用来实现四层协议的转发、代理或者负载均衡等。</span></span><br><span class="line">--with-stream=dynamic --with-stream_ssl_module --with-stream_ssl_preread_module</span><br><span class="line"><span class="comment"># 支持多线程模块</span></span><br><span class="line">--with-threads</span><br><span class="line"><span class="comment"># 设置C编译器参数</span></span><br><span class="line">--with-cc-opt=<span class="string">&#x27;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic&#x27;</span></span><br><span class="line"><span class="comment"># 设置连接文件参数</span></span><br><span class="line">--with-ld-opt=<span class="string">&#x27;-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>其它参数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用ipv6支持</span></span><br><span class="line">--with-ipv6</span><br><span class="line"><span class="comment"># SPDY可以缩短网页的加载时间</span></span><br><span class="line">--with-http_spdy_module</span><br><span class="line"><span class="comment"># 该模块创建基于与MaxMind GeoIP二进制文件相配的客户端IP地址的ngx_http_geoip_module变量</span></span><br><span class="line">--with-http_geoip_module</span><br><span class="line"><span class="comment"># 计算和检查要求所需的安全链接网址</span></span><br><span class="line">--with-http_secure_link_module</span><br><span class="line"><span class="comment"># 禁用http cache功能</span></span><br><span class="line">--without-http-cache</span><br><span class="line"><span class="comment"># 启用外部模块支持</span></span><br><span class="line">--add-module=module_dir</span><br></pre></td></tr></table></figure><h2 id="nginx编译安装出现的常见错误">nginx编译安装出现的常见错误</h2><ul class="lvl-0"><li class="lvl-2"><p>参照<code>yum</code>安装nginx的配置进行手工编译</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx-1.22.1  --user=nginx --group=nginx --with-compat --with-debug \</span><br><span class="line">--with-file-aio --with-google_perftools_module --with-http_addition_module --with-http_auth_request_module \</span><br><span class="line">--with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module \</span><br><span class="line">--with-http_gzip_static_module --with-http_image_filter_module=dynamic --with-http_mp4_module \</span><br><span class="line">--with-http_perl_module=dynamic --with-http_random_index_module --with-http_realip_module \</span><br><span class="line">--with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module \</span><br><span class="line">--with-http_sub_module --with-http_v2_module --with-http_xslt_module=dynamic --with-mail=dynamic --with-mail_ssl_module \</span><br><span class="line">--with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-stream_ssl_preread_module --with-threads</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>./configure: error: the HTTP rewrite module requires the PCRE library.You can either disable the module by using --without-http_rewrite_module option, or install the PCRE library into the system, or build the PCRE library statically from the source with nginx by using --with-pcre= option.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install pcre pcre-devel</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>./configure: error: SSL modules require the OpenSSL library.You can either do not enable the modules, or install the OpenSSL library into the system, or build the OpenSSL library statically from the source with nginx by using --with-openssl= option.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openssl openssl-devel</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>./configure: error: the HTTP XSLT module requires the libxml2/libxslt libraries. You can either do not enable the module or install the libraries.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libxml2 libxml2-devel libxslt libxslt-devel</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>./configure: error: the HTTP image filter module requires the GD library. You can either do not enable the module or install the libraries.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gd gd-devel</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>./configure: error: perl module ExtUtils::Embed is required</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install perl-ExtUtils-Embed</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>./configure: error: the Google perftools module requires the Google perftools library. You can either do not enable the module or install the library</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install google-perftools google-perftools-devel</span><br></pre></td></tr></table></figure><h2 id="Nginx-配置文件">Nginx 配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局参数设置</span></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">user nginx;            <span class="comment"># worker进程用户</span></span><br><span class="line">worker_processes  2;          <span class="comment"># 设置nginx启动进程的数量，一般设置成与逻辑cpu数量相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;         # 指定错误日志</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># worker_rlimit_nofile 102400;  # 设置一个nginx进程能打开的最大文件数</span></span><br><span class="line"><span class="comment"># pid        /run/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模块配置文件</span></span><br><span class="line"><span class="comment"># include conf.d/modules/*.conf;</span></span><br><span class="line">load_module modules/ngx_stream_module.so; <span class="comment"># 加载stream模块</span></span><br><span class="line"></span><br><span class="line">events &#123;                      <span class="comment"># 事件配置</span></span><br><span class="line">    worker_connections  1024; <span class="comment"># 设置一个进程的最大并发连接数</span></span><br><span class="line">    <span class="comment"># use epoll;                # 事件驱动类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp反向代理示例，与http配置同级</span></span><br><span class="line">stream &#123;</span><br><span class="line">    <span class="comment"># include conf.d/stream/*.conf</span></span><br><span class="line">    include conf.d/stream/redis.conf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># http 服务相关设置</span></span><br><span class="line">http &#123;</span><br><span class="line">    include             mime.types;  <span class="comment"># 关联mime类型，关联资源的媒体类型(不同的媒体类型的打开方式)</span></span><br><span class="line">    default_type        application/octet-stream;  <span class="comment"># 根据文件的后缀来匹配相应的MIME类型，并写入Response header，导致浏览器播放文件而不是下载</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问日志格式</span></span><br><span class="line">    log_format  main  <span class="string">&#x27;remote_addr - remote_user [time_local] &quot;request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;status body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;http_user_agent&quot; &quot;http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">    access_log  logs/access.log  main;    <span class="comment">#设置访问日志的位置和格式</span></span><br><span class="line">    sendfile          on;      <span class="comment"># 用于开启文件高效传输模式，一般设置为on，若nginx是用来进行磁盘IO负载应用时，可以设置为off，降低系统负载</span></span><br><span class="line">    tcp_nopush        on;      <span class="comment"># 减少网络报文段数量，当有数据时，先别着急发送, 确保数据包已经装满数据, 避免了网络拥塞</span></span><br><span class="line">    tcp_nodelay       on;      <span class="comment"># 提高I/O性能，确保数据尽快发送, 提高可数据传输效率</span></span><br><span class="line">    <span class="comment"># gzip              on;      # 是否开启 gzip 压缩</span></span><br><span class="line">    keepalive_timeout  65;     <span class="comment"># 设置长连接的超时时间，请求完成之后还要保持连接多久，不是请求时间多久，目的是保持长连接，减少创建连接过程给系统带来的性能损耗，类似于线程池，数据库连接池</span></span><br><span class="line">    types_hash_max_size 4096;  <span class="comment"># 影响散列表的冲突率。types_hash_max_size 越大，就会消耗更多的内存，但散列key的冲突率会降低，检索速度就更快。types_hash_max_size越小，消耗的内存就越小，但散列key的冲突率可能上升</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载子配置文件</span></span><br><span class="line">    <span class="comment"># include /usr/local/nginx-1.22.1/conf/conf.d/*.conf;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># http反向代理示例</span></span><br><span class="line">    include conf.d/http/tomcat.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 虚拟服务器的相关设置</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen      80;        <span class="comment"># 设置监听的端口</span></span><br><span class="line">        server_name  localhost;        <span class="comment"># 设置绑定的主机名、域名或ip地址</span></span><br><span class="line">        <span class="comment">#charset koi8-r;        # 设置编码字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root  html;           <span class="comment"># 设置服务器默认网站的根目录位置</span></span><br><span class="line">            index  index.html index.htm;    <span class="comment"># 设置默认打开的文档</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># error_page 404 /404.html;</span></span><br><span class="line"></span><br><span class="line">        error_page  500 502 503 504  /50x.html; <span class="comment"># 设置错误信息返回页面</span></span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root html</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>tomcat.conf</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">    server 192.168.0.1:8080;</span><br><span class="line">    server 192.168.0.2:8080;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       8088;</span><br><span class="line">        server_name  localhost tomcat.domain;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats; <span class="comment">#这个名称和要上面 upstream tomcats 对应</span></span><br><span class="line">            proxy_redirect     default;</span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">            proxy_set_header   Host              <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header   X-Real-IP         <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header   X-Forwarded-For   <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header   X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            proxy_max_temp_file_size 0;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#this is the maximum upload size</span></span><br><span class="line">            client_max_body_size       10m;</span><br><span class="line">            client_body_buffer_size    128k;</span><br><span class="line"></span><br><span class="line">            proxy_connect_timeout      90;</span><br><span class="line">            proxy_send_timeout         90;</span><br><span class="line">            proxy_read_timeout         90;</span><br><span class="line">            proxy_buffering            off;</span><br><span class="line">            proxy_request_buffering    off; <span class="comment"># Required for HTTP CLI commands</span></span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;&quot;</span>; <span class="comment"># Clear for keepalive</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>redis.conf</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream redis&#123;</span><br><span class="line">    server 192.168.0.1:6379;</span><br><span class="line">    server 192.168.0.2:6379;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8888; <span class="comment">#监听本机所有IP的8888端口</span></span><br><span class="line">    proxy_connect_timeout 10s; <span class="comment">#连接超时时间</span></span><br><span class="line">    proxy_timeout 10s; <span class="comment">#转发超时时间</span></span><br><span class="line">    proxy_pass redis; <span class="comment">#这个名称和要上面 upstream redis 对应</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>upstream</code>配置说明</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">upstream还可以为每个设备设置状态值，这些状态值的含义分别如下：</span><br><span class="line">- down：表示当前的server暂时不参与负载.</span><br><span class="line">- weight：默认为1，weight越大，负载的权重就越大。</span><br><span class="line">- max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误.</span><br><span class="line">- fail_timeout : max_fails次失败后，暂停的时间。</span><br><span class="line">- backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line">- ip_hash（访问ip）:每个请求按访问ip的<span class="built_in">hash</span>结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">upstream tomcats&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 127.0.0.1:9001 down;</span><br><span class="line">    server 127.0.0.1:9002 backup;</span><br><span class="line">    server 127.0.0.1:9003 weight=2;</span><br><span class="line">    server 127.0.0.1:9004 max_fails=2 fail_timeout=60s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置为系统服务">配置为系统服务</h2><ul class="lvl-0"><li class="lvl-2"><p>yum安装自带系统服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入service服务目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/init.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并编辑nginx文件</span></span><br><span class="line">vim nginx</span><br><span class="line"><span class="comment"># 写入如下内容：</span></span><br><span class="line">    <span class="built_in">set</span> -e</span><br><span class="line">    PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">    DESC=<span class="string">&quot;nginx daemon&quot;</span></span><br><span class="line">    NAME=nginx</span><br><span class="line">    DAEMON=/usr/local/nginx-1.22.1/sbin/<span class="variable">$NAME</span></span><br><span class="line">    SCRIPTNAME=/etc/init.d/<span class="variable">$NAME</span></span><br><span class="line">    <span class="built_in">test</span> -x <span class="variable">$DAEMON</span> || <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="function"><span class="title">d_start</span></span>()&#123;</span><br><span class="line">        <span class="variable">$DAEMON</span> || <span class="built_in">echo</span> -n <span class="string">&quot; already running&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">d_stop</span></span>() &#123;</span><br><span class="line">        <span class="variable">$DAEMON</span> -s quit || <span class="built_in">echo</span> -n <span class="string">&quot; not running&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">d_reload</span></span>() &#123;</span><br><span class="line">        <span class="variable">$DAEMON</span> -s reload || <span class="built_in">echo</span> -n <span class="string">&quot; counld not reload&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">d_status</span></span>() &#123;</span><br><span class="line">        pid=`ps ax | grep -i <span class="string">&#x27;nginx: master&#x27;</span> | grep -v grep | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line">        <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$pid</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;No nginx-server running.&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;The nginx-server(<span class="variable">$&#123;pid&#125;</span>) is running&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        start)</span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;Starting <span class="variable">$DESC</span>:<span class="variable">$NAME</span>&quot;</span></span><br><span class="line">            d_start</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        stop)</span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;Stopping <span class="variable">$DESC</span>:<span class="variable">$NAME</span>&quot;</span></span><br><span class="line">            d_stop</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        reload)</span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;Reloading <span class="variable">$DESC</span> configuration...&quot;</span></span><br><span class="line">            d_reload</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;reloaded.&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        restart)</span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;Restarting <span class="variable">$DESC</span>: <span class="variable">$NAME</span>&quot;</span></span><br><span class="line">            d_stop</span><br><span class="line">            <span class="built_in">sleep</span> 2</span><br><span class="line">            d_start</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        status)</span><br><span class="line">            <span class="built_in">echo</span> -n <span class="string">&quot;Check <span class="variable">$DESC</span> status...&quot;</span></span><br><span class="line">            d_status</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$SCRIPTNAME</span> &#123;start|stop|restart|reload|status&#125;&quot;</span> &gt;&amp;2</span><br><span class="line">            <span class="built_in">exit</span> 3</span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授予执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务管理</span></span><br><span class="line">service nginx start</span><br><span class="line">service nginx stop</span><br><span class="line">service nginx status</span><br><span class="line">service nginx reload</span><br><span class="line">service nginx restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里使用 systemctl 同样可以，因为systemctl兼容service</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入开机启动</span></span><br><span class="line">chkconfig nginx on</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭开启启动</span></span><br><span class="line">chkconfig nginx off</span><br><span class="line">systemctl <span class="built_in">disable</span> nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;虽然绝大部分软件都可以通过&lt;code&gt;rpm&lt;/code&gt;或者&lt;code&gt;yum&lt;/code&gt;的方式进行安装，但是由于yum中的版本不一定是最新版，或者软件开发商没有将软件放到yum源中，所有也有一些软件需要通过源代码的方式进行安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文以源代码安装nginx为例说明如何通过源代码安装软件。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--rpm与yum</title>
    <link href="https://blog.hanqunfeng.com/2023/03/17/linux-command08-rpm-yum/"/>
    <id>https://blog.hanqunfeng.com/2023/03/17/linux-command08-rpm-yum/</id>
    <published>2023-03-17T13:30:05.000Z</published>
    <updated>2023-05-10T09:54:08.895Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>在Linux发行版中，几乎每一个发行版都有自己的软件包管理系统。</p></li><li class="lvl-2"><p>常见的有适用于<code>debian</code>、<code>Ubuntu</code>等系统的<code>dpkg</code>、<code>apt-get</code>以及它们的前端<code>aptitude</code>，以及适用于<code>RedHat</code>、<code>Fedora</code>系统的<code>rpm</code>以及它的前端<code>yum</code>。</p></li><li class="lvl-2"><p><code>CentOS</code>系统从属于<code>RedHat</code>系列，其软件包管理系统有RPM和YUM，本文基于<code>CentOS8(x86_64)</code>介绍它们的使用方法。</p></li><li class="lvl-2"><p>从CentOS 8开始，系统默认的软件包管理器是<code>dnf</code>，系统提供的<code>yum</code>命令仅为<code>dnf</code>命令的软链接。<code>dnf</code>是<code>dandified yum</code>的简称，是基于rpm软件包的Linux发行版本的软件包管理器。</p></li></ul><span id="more"></span><h2 id="RPM">RPM</h2><ul class="lvl-0"><li class="lvl-2"><p>RPM，全称RPM Package Manager，是由Red Hat推出的软件包管理系统，现在在各种发行版中普遍适用。</p></li><li class="lvl-2"><p>RRM软件包是将程序源代码经过编译和封装以后形成的包文件，在软件包里面会封装软件的二进制程序、配置文件、帮助手册、库文件以及头文件等。</p></li><li class="lvl-2"><p><code>rpm</code>默认安装，但是RPM存在依赖关系问题</p></li></ul><h3 id="rpm参数说明">rpm参数说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rpm ［options］ /path/to/rpmfile</span><br><span class="line">　　</span><br><span class="line">option：</span><br><span class="line">　　-i|--install：      安装指定软件</span><br><span class="line">　　-v|--verbose：      显示安装过程</span><br><span class="line">　　-e|--erase：        卸载指定的软件</span><br><span class="line">　　-h|--<span class="built_in">hash</span>：         以<span class="comment">#的方式显示安装进度条，一个#为2%</span></span><br><span class="line">　　-q|--query：        查询rpm相关信息</span><br><span class="line">　　--nodeps：          不检测依赖性安装。软件安装时会检测依赖性，确定所需的底层软件是否安装，如果没有安装则会报错。如果不管依赖性，想强制安装，则可以使用这个选项。注意，这样不检测依赖性安装的软件基本上是不能使用的，所以不建议这样做。</span><br><span class="line">　　--<span class="built_in">test</span>：            测试安装。不会实际安装，只是检测一下依赖性。</span><br><span class="line">　　-U：                升级+安装（如果之前有安装则升级，如果之前没有安装则安装）</span><br><span class="line">　　-F：                升级（如果之前有安装则升级，如果之前没安装则不做任何操作）</span><br><span class="line">　　--replacepkgs：     替换软件包安装。如果软件包已经安装，那么此选项可以把软件包重复安装一遍。</span><br><span class="line">　　--replacefiles：    替换文件安装。如果要安装软件包，但是包中的部分文件已经存在，那么在正常安装时会报<span class="string">&quot;某个文件已经存在&quot;</span>的错误，从而导致软件无法安装。使用这个选项可以忽略这个报错而覆盖安装。</span><br><span class="line">　　--force：           在软件包的安装或升级过程中，如果出现某个文件已经安装或者某一个软件已经安装时</span><br><span class="line">　　                    可以使用 --force 选项强制安装，等同于 --replacepkgs --replacefiles --oldpackage 同时使用</span><br></pre></td></tr></table></figure><h3 id="安装rpm">安装rpm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里以安装jdk举例，先下载jdk的rpm包</span></span><br><span class="line">curl -o ./jdk-17_linux-x64_bin.rpm https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># -ivh 安装rpm包，建议安装前先查询当前系统是否已经安装了相关的软件包</span></span><br><span class="line">rpm -ivh jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># --test 只对安装进行测试，不实际安装</span></span><br><span class="line">rpm -ivh --<span class="built_in">test</span> jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># --nodeps 安装时忽略依赖，软件有可能不可用</span></span><br><span class="line">rpm -ivh --nodeps jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># --force 强制安装，如果已经安装过该软件或者有文件冲突都进行强制安装</span></span><br><span class="line">rpm -ivh --force jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># --prefix 指定安装路径，而不使用默认的安装路径，不推荐</span></span><br><span class="line">rpm -ivh --prefix /usr/local/soft/jdk17 jdk-17_linux-x64_bin.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级安装</span></span><br><span class="line">rpm -Uvh jdk-17_linux-x64_bin.rpm</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>RPM 包默认安装路径</strong></em></p><table><thead><tr><th>安装路径</th><th>含 义</th></tr></thead><tbody><tr><td>/etc/</td><td>配置文件安装目录</td></tr><tr><td>/usr/bin/</td><td>可执行的命令安装目录</td></tr><tr><td>/usr/lib/</td><td>程序所使用的函数库保存位置</td></tr><tr><td>/usr/share/doc/</td><td>基本的软件使用手册保存位置</td></tr><tr><td>/usr/share/man/</td><td>帮助文件保存位置</td></tr></tbody></table></div><h3 id="rpm-q：查询软件包是否安装">rpm -q：查询软件包是否安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询当前系统已经安装的所有包</span></span><br><span class="line">rpm -qa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询当前系统是否安装了软件包名称中含有jdk的软件包</span></span><br><span class="line">rpm -qa | grep jdk</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -q jdk-17</span><br><span class="line"><span class="comment"># 通过命令查询是否安装，一般通过yum安装的软件可以通过这种方式进行查询</span></span><br><span class="line">rpm -q zip</span><br></pre></td></tr></table></figure><h3 id="rpm-qp：查询rpm包安装后的软件包名称">rpm -qp：查询rpm包安装后的软件包名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询rpm包安装后的软件包名称，p 表示查询的是rpm文件</span></span><br><span class="line">rpm -qp jdk-17_linux-x64_bin.rpm</span><br></pre></td></tr></table></figure><h3 id="rpm-qi：查询软件包的详细信息">rpm -qi：查询软件包的详细信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询软件包描述信息，通过rpm文件名称</span></span><br><span class="line">rpm -qip jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># 查询软件包描述信息，通过安装后的软件包名称，此时可以不加后面的.x86_64后缀，下面的命令也是这样</span></span><br><span class="line">rpm -qi jdk-17-17.0.6-9.x86_64</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -qi jdk-17</span><br><span class="line"><span class="comment"># 通过命令查询，一般通过yum安装的软件可以通过这种方式进行查询</span></span><br><span class="line">rpm -qi zip</span><br></pre></td></tr></table></figure><h3 id="rpm-ql：命令查询软件包的文件列表">rpm -ql：命令查询软件包的文件列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询软件包中的文件列表，通过rpm文件名称</span></span><br><span class="line">rpm -qlp jdk-17_linux-x64_bin.rpm</span><br><span class="line"><span class="comment"># 查询软件包中的文件列表，通过安装后的软件包名称</span></span><br><span class="line">rpm -ql jdk-17-17.0.6-9.x86_64</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -ql jdk-17</span><br><span class="line"><span class="comment"># 通过命令查询，一般通过yum安装的软件可以通过这种方式进行查询</span></span><br><span class="line">rpm -ql zip</span><br></pre></td></tr></table></figure><h3 id="rpm-qd：查询被标注为文档的文件列表">rpm -qd：查询被标注为文档的文件列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示被标注为文档的文件列表</span></span><br><span class="line">rpm -qdp jdk-17_linux-x64_bin.rpm</span><br><span class="line">rpm -qd jdk-17-17.0.6-9.x86_64</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -qd jdk-17</span><br><span class="line"><span class="comment"># 通过命令查询，一般通过yum安装的软件可以通过这种方式进行查询</span></span><br><span class="line">rpm -qd zip</span><br></pre></td></tr></table></figure><h3 id="rpm-qc：查询被标注为配置文件的文件列表">rpm -qc：查询被标注为配置文件的文件列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示被标注为配置文件的文件列表</span></span><br><span class="line">rpm -qcp jdk-17_linux-x64_bin.rpm</span><br><span class="line">rpm -qc jdk-17-17.0.6-9.x86_64</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -qc jdk-17</span><br><span class="line"><span class="comment"># 通过命令查询，一般通过yum安装的软件可以通过这种方式进行查询</span></span><br><span class="line">rpm -qc zip</span><br></pre></td></tr></table></figure><h3 id="rpm-qf：命令查询系统文件属于哪个RPM包">rpm -qf：命令查询系统文件属于哪个RPM包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询系统文件属于哪个RPM包</span></span><br><span class="line">rpm -qf /usr/lib/jvm/jdk-17-oracle-x64/bin/java</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这里注意，只能通过真实文件进行查询，软连接是查询不到的</p></li></ul><h3 id="rpm-qR：查询软件包的依赖关系">rpm -qR：查询软件包的依赖关系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询软件包的依赖关系</span></span><br><span class="line">rpm -qRp jdk-17_linux-x64_bin.rpm</span><br><span class="line">rpm -qR jdk-17-17.0.6-9.x86_64</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -qR jdk-17</span><br><span class="line"><span class="comment"># 通过命令查询，一般通过yum安装的软件可以通过这种方式进行查询</span></span><br><span class="line">rpm -qR zip</span><br></pre></td></tr></table></figure><h3 id="卸载rpm">卸载rpm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过包名卸载指定的软件，此时会检查是否有其它软件对该软件有依赖，如果有依赖则不允许卸载</span></span><br><span class="line">rpm -e jdk-17-17.0.6-9.x86_64</span><br><span class="line"><span class="comment"># 也可以通过包名查询，就是版本号前面那部分，这里版本号就是17.0.6，与包名之间用-分隔</span></span><br><span class="line">rpm -e jdk-17</span><br><span class="line"><span class="comment"># --nodeps :不考虑依赖，强行卸载，不推荐使用，因为这样会导致其它依赖该软件的软件不可用</span></span><br><span class="line">rpm -e --nodeps jdk-17-17.0.6-9.x86_64</span><br></pre></td></tr></table></figure><h3 id="解压rpm">解压rpm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压安装包中的全部文件到当前目录</span></span><br><span class="line">rpm2cpio jdk-17_linux-x64_bin.rpm | cpio -idv</span><br><span class="line"><span class="comment"># 解压安装包中的指定文件到当前目录，/usr/lib/jvm/jdk-17-oracle-x64/bin/java是rpm包中的文件路径，注意前面要加一个点</span></span><br><span class="line">rpm2cpio jdk-17_linux-x64_bin.rpm | cpio -idv ./usr/lib/jvm/jdk-17-oracle-x64/bin/java</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>说明</p><ul class="lvl-2"><li class="lvl-6"><code>rpm2cpio</code> : 将rpm包转换为<code>cpio</code>命令能处理的归档包格式。归档包，也可称为文件库，其实就是 <code>cpio</code> 或 <code>tar</code> 格式的文件。</li><li class="lvl-6"><code>cpio</code> 命令可以看做是备份或还原命令，因为它可以将数据（文件）备份到 cpio 归档包，也可以利用 cpio 文档库对数据进行恢复。</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">各选项的含义为：</span><br><span class="line">-i：copy-in 模式，还原；</span><br><span class="line">-v：显示还原过程；</span><br><span class="line">-d：还原时自动新建目录；</span><br></pre></td></tr></table></figure></li></ul><h3 id="rpm查看已安装的文件是否被修改过">rpm查看已安装的文件是否被修改过</h3><ul class="lvl-0"><li class="lvl-2"><p>通过该命令可以快速查询通过<code>rpm</code>或<code>yum</code>安装的软件的相关文件(一般为配置文件)被修改过。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询系统中已安装的所有软件包</span></span><br><span class="line">$ rpm -Va</span><br><span class="line">.M....G..  g /var/log/lastlog</span><br><span class="line">S.5....T.  c /etc/ssh/sshd_config</span><br><span class="line">S.5....T.  c /etc/NetworkManager/NetworkManager.conf</span><br><span class="line">S.5....T.  c /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询指定软件包</span></span><br><span class="line">$ rpm -V openssh-server</span><br><span class="line">S.5....T.  c /etc/ssh/sshd_config  <span class="comment"># 配置文件 sshd_config 的大小、内容、修改时间被人为修改过。因为我们修改了端口。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 校验某个系统文件是否被修改</span></span><br><span class="line">$ rpm -Vf /etc/ssh/sshd_config</span><br><span class="line">S.5....T.  c /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">可以看到，结果显示了文件被修改的信息。该信息可分为以下 3 部分：</span><br><span class="line">1.最前面的 8 个字符（S.5....T）都属于验证信息，各字符的具体含义如下：</span><br><span class="line">S：文件大小是否改变。</span><br><span class="line">M：文件的类型或文件的权限（rwx）是否改变。</span><br><span class="line">5：文件MD5校验和是否改变（可以看成文件内容是否改变）。</span><br><span class="line">D：设备的主从代码是否改变。</span><br><span class="line">L：文件路径是否改变。</span><br><span class="line">U：文件的属主（所有者）是否改变。</span><br><span class="line">G：文件的属组是否改变。</span><br><span class="line">T：文件的修改时间是否改变。</span><br><span class="line">.：若相关项没发生改变，用 . 表示。</span><br><span class="line"></span><br><span class="line">2.被修改文件类型，大致可分为以下几类：</span><br><span class="line">c：配置文件（configuration file）。</span><br><span class="line">d：普通文档（documentation）。</span><br><span class="line">g：<span class="string">&quot;鬼&quot;</span>文件（ghost file），很少见，就是该文件不应该被这个 RPM 包包含。</span><br><span class="line">l：授权文件（license file）。</span><br><span class="line">r：描述文件（<span class="built_in">read</span> me）。</span><br><span class="line"></span><br><span class="line">3.被修改文件所在绝对路径（包含文件名）。</span><br></pre></td></tr></table></figure><h3 id="rpm导入-安装-数字证书-公钥">rpm导入(安装)数字证书(公钥)</h3><ul class="lvl-0"><li class="lvl-2"><p>数字证书，又称数字签名，由软件开发商直接发布。Linux 系统安装数字证书后，若 RPM 包做了修改，此包携带的数字证书也会改变，将无法与系统成功匹配，软件无法安装。</p></li><li class="lvl-2"><p>系统默认证书在 <code>/efc/pki/rpm-gpg/</code> 下</p></li><li class="lvl-2"><p>导入证书</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装本机证书，一般这个都会默认安装</span></span><br><span class="line">rpm --import /efc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br><span class="line"><span class="comment"># 安装第三方证书，如jenkins</span></span><br><span class="line">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>可以通过 <code>rpm -qa|grep gpg-pubkey</code> 查看已经导入的证书</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa|grep gpg-pubkey</span><br><span class="line">gpg-pubkey-8483c65d-5ccc5b19</span><br><span class="line">gpg-pubkey-45f2c3d5-5e81efb9</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>数字证书本身也是一个 RPM 包，因此可以用 rpm 命令查询数字证书的详细信息，也可以将其卸载。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看证书信息</span></span><br><span class="line">rpm -qi gpg-pubkey-8483c65d-5ccc5b19</span><br><span class="line"><span class="comment"># 卸载证书</span></span><br><span class="line">rpm -e gpg-pubkey-8483c65d-5ccc5b19</span><br></pre></td></tr></table></figure><h2 id="YUM">YUM</h2><ul class="lvl-0"><li class="lvl-2"><p><code>yum</code>，全称<code>Yellow dog Updater, Modified</code>，是一个专门为了解决包的依赖关系而存在的软件包管理器。</p></li><li class="lvl-2"><p><code>yum</code>是Linux中的 <em><strong>应用市场</strong></em> ，不仅可以通过<code>yum</code>完成软件包的下载、安装、卸载等，还解决了软件之间的依赖，当安装的软件包需要依赖其它软件包时，会一并进行安装。</p></li><li class="lvl-2"><p><code>yum</code>命令一般为默认安装，<code>yum</code>底层就是基于<code>rpm</code>实现的软件包管理</p></li><li class="lvl-2"><p>使用 yum 安装软件包之前，需指定好 yum 下载 RPM 包的位置，此位置称为 yum 源。换句话说，yum 源指的就是软件安装包的来源</p></li><li class="lvl-2"><p>yum 源既可以使用网络 yum 源，也可以将本地光盘作为 yum 源。</p></li><li class="lvl-2"><p>yum 源默认都是配置好的网络 yum 源，配置文件位于 <code>/etc/yum.repos.d/</code> 目录下，文件扩展名为 <code>*.repo</code></p></li><li class="lvl-2"><p>但是CentOS Linux 8 已经于 2021年12月31日 到期，Linux社区已不再维护该操作系统版本和软件源，所以我们可以将yum源切换到阿里云。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份原有的源文件</span></span><br><span class="line">rename <span class="string">&#x27;.repo&#x27;</span> <span class="string">&#x27;.repo.bak&#x27;</span> /etc/yum.repos.d/*.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载阿里云的yum源文件，这里下载Centos-8的源文件，其它版本可以在 https://mirrors.aliyun.com/repo/ 中查找</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line"><span class="comment"># 非官方扩展源，这个也可以不提前下载，可以在配置好yum源后，通过 yum install -y epel-release 进行安装</span></span><br><span class="line"><span class="comment"># 如果在安装软件的时候，没有在Centos-8.repo中找到官方的下载链接，那么yum会自动去epel-release指向的链接处去查找，相当于epel-release给yum提供了更多的下载渠道。</span></span><br><span class="line">curl -o /etc/yum.repos.d/epel-archive-8.repo https://mirrors.aliyun.com/repo/epel-archive-8.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理yum缓存并重新建立缓存</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前的yum源信息</span></span><br><span class="line">yum repolist</span><br><span class="line"></span><br><span class="line">仓库 <span class="built_in">id</span>                      仓库名称</span><br><span class="line">AppStream                    CentOS-8 - AppStream - mirrors.aliyun.com</span><br><span class="line">base                         CentOS-8 - Base - mirrors.aliyun.com</span><br><span class="line">epel-archive                 Extra Packages <span class="keyword">for</span> Enterprise Linux 8 - x86_64</span><br><span class="line">extras                       CentOS-8 - Extras - mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h3 id="yum配置文件">yum配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/yum.conf</span><br><span class="line"></span><br><span class="line">[main]</span><br><span class="line">cachedir=/var/cache/yum    <span class="comment">#yum下载的RPM包的缓存目录</span></span><br><span class="line">keepcache=0                <span class="comment">#缓存的RPM是否保存，1保存，0不保存。</span></span><br><span class="line">reposdir=/etc/yum.repos.d/ <span class="comment">#指定 .repo 文件的绝对路径</span></span><br><span class="line">debuglevel=2               <span class="comment">#调试级别(0-10)，默认为2(具体调试级别的应用，我也不了解)。</span></span><br><span class="line">logfile=/var/log/yum.log   <span class="comment">#yum的日志文件所在的位置</span></span><br><span class="line">exactarch=1                <span class="comment">#在更新的时候，是否允许更新不同版本的RPM包，</span></span><br><span class="line">                           <span class="comment">#比如是否在i386上更新i686的RPM包。</span></span><br><span class="line">obsoletes=1                <span class="comment">#这是一个update的参数，具体请参阅yum(8)，</span></span><br><span class="line">                           <span class="comment">#简单的说就是相当于upgrade，允许更新陈旧的RPM包。</span></span><br><span class="line">gpgcheck=1                 <span class="comment">#是否检查GPG(GNU Private Guard)，一种密钥方式签名。</span></span><br><span class="line">plugins=1                  <span class="comment">#是否允许使用插件，默认是0不允许，</span></span><br><span class="line">                           <span class="comment">#但是我们一般会用yum-fastestmirror这个插件。</span></span><br><span class="line">installonly_limit=3        <span class="comment">#允许保留多少个内核包。</span></span><br><span class="line">exclude=selinux*           <span class="comment">#屏蔽不想更新的RPM包，可用通配符，多个RPM包之间使用空格分离。</span></span><br><span class="line">distroverpkg=system-release <span class="comment">#指定一个软件包，yum 会根据这个包判断你的发行版本</span></span><br><span class="line"><span class="built_in">timeout</span>=5                  <span class="comment">#下载超时，秒</span></span><br><span class="line">retries=7                  <span class="comment">#下载重试次数</span></span><br><span class="line">proxy=http://0.0.0.0:8080  <span class="comment">#配置代理</span></span><br></pre></td></tr></table></figure><h3 id="yum搜索软件">yum搜索软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示yum源中可以安装的全部软件</span></span><br><span class="line">yum list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索指定软件，显示软件名称、版本，以及所属仓库名称</span></span><br><span class="line">yum list zip</span><br><span class="line"><span class="comment"># 默认安装都是安装最新版本，有时我们需要安装某个特定版本的软件包，此时可以使用以下命令列出所有可用的Python 3软件包</span></span><br><span class="line">yum list available python3*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索指定软件，显示软件名称和简介</span></span><br><span class="line">yum search zip</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>搜索时推荐使用<code>yum list zip</code>的形式</p></li></ul><h3 id="yum安装">yum安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装过程中需要确认是否安装</span></span><br><span class="line">yum install zip</span><br><span class="line"><span class="comment"># 不需要确认直接安装</span></span><br><span class="line">yum install zip -y</span><br><span class="line"><span class="comment"># 重新安装yum</span></span><br><span class="line">yum reinstall zip</span><br></pre></td></tr></table></figure><h3 id="yum卸载">yum卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载软件，会询问是否卸载</span></span><br><span class="line">yum remove zip</span><br><span class="line"><span class="comment"># 不询问直接卸载</span></span><br><span class="line">yum remove zip -y</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>yum</code>卸载会同时卸载掉依赖包，可以使用<code>rpm</code>卸载单独的软件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep ^zip</span><br><span class="line">zip-3.0-23.el8.x86_64</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps zip-3.0-23.el8.x86_64</span><br></pre></td></tr></table></figure><h3 id="yum升级与降级">yum升级与降级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查是否有软件需要升级</span></span><br><span class="line">yum check-update</span><br><span class="line"><span class="comment"># 检测指定软件是否可以升级</span></span><br><span class="line">yum check-update zip</span><br><span class="line"><span class="comment"># 升级指定软件包，-y 不询问</span></span><br><span class="line">yum upgrade zip -y</span><br><span class="line"><span class="comment"># 升级全部软件包，-y 不询问</span></span><br><span class="line">yum upgrade -y</span><br><span class="line"><span class="comment"># 升级指定软件包，-y 不询问</span></span><br><span class="line">yum update zip -y</span><br><span class="line"><span class="comment"># 升级全部软件包，-y 不询问</span></span><br><span class="line">yum update -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 降级，降回到升级前的版本，-y 不询问</span></span><br><span class="line">yum downgrade zip -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装软件包时可能会遇到冲突，比如要安装的软件包与当前已经安装的软件包存在冲突，可以添加  --allowerasing 进行替换安装</span></span><br><span class="line">yum install --allowerasing curl</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong><code>yum upgrade</code>与<code>yum update</code>的区别</strong></em></p><ul class="lvl-1"><li class="lvl-2"><code>yum</code>配置文件<code>/etc/yum.conf</code>中，如果<code>obsoletes=1</code>，此时两者没有区别，都表示更新旧的rpm包的同时会删除旧包</li><li class="lvl-2">如果<code>obsoletes=0</code>，<code>yum upgrade</code>会删除旧版本的包，而<code>yum update</code>则会保留旧版本的包</li><li class="lvl-2">生产环境中建议使用<code>yum update</code>，防止因为替换，导致旧的软件包依赖出现问题</li></ul></div><h3 id="yum查看软件依赖关系">yum查看软件依赖关系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum deplist zip</span><br></pre></td></tr></table></figure><h3 id="yum查看软件包描述信息">yum查看软件包描述信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类似于 rpm -qi</span></span><br><span class="line">yum info zip</span><br></pre></td></tr></table></figure><h3 id="yum下载rpm包">yum下载rpm包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yumdownloader 命令在软件包 yum-utils 里面</span></span><br><span class="line">yum -y install yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会将docker的rpm包及其相关依赖的rpm包都下载到当前目录</span></span><br><span class="line">yumdownloader --resolve docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># --destdir 下载到指定目录</span></span><br><span class="line">yumdownloader --resolve docker --destdir dockerDir</span><br></pre></td></tr></table></figure><h3 id="yum组：一次安装一组软件">yum组：一次安装一组软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看可用组，会列出可用组名称</span></span><br><span class="line">yum grouplist</span><br><span class="line">yum group list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询组信息，会列出组内包含的所有软件，比如这里查询组名为 Development Tools 的信息</span></span><br><span class="line">yum groupinfo <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line">yum group info <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装组内所有软件</span></span><br><span class="line">yum groupinstall <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line">yum group install <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载组内所有软件</span></span><br><span class="line">yum groupremove <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line">yum group remove <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级软件组</span></span><br><span class="line">yum groupupdate <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line">yum group update <span class="string">&quot;Development Tools&quot;</span></span><br></pre></td></tr></table></figure><h3 id="重建yum元数据缓存">重建yum元数据缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理无效信息</span></span><br><span class="line">yum clean all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重建缓存</span></span><br><span class="line">yum makecache</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yum --refresh -v repolist</span><br></pre></td></tr></table></figure><h3 id="yum查看仓库配置">yum查看仓库配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示启用的仓库简介信息</span></span><br><span class="line">yum repolist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示全部的仓库简介信息，包括禁用的</span></span><br><span class="line">yum repolist all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示详细信息</span></span><br><span class="line">yum -v repolist</span><br><span class="line"></span><br><span class="line"><span class="comment"># --refresh 显示信息前先重建缓存</span></span><br><span class="line">yum --refresh -v repolist</span><br></pre></td></tr></table></figure><h3 id="yum源配置">yum源配置</h3><ul class="lvl-0"><li class="lvl-2"><p>参数说明</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[xxx]：xxx为源仓库名称，一定要放在[]中。</span><br><span class="line">name：源仓库说明，可以自己随便写。</span><br><span class="line">mirrorlist：镜像站点列表，配置了这个就不需要配置baseurl</span><br><span class="line">baseurl：yum 源仓库服务的地址。</span><br><span class="line">enabled：此源仓库是否生效，如果不写或写成 enabled=1 则表示生效，写成 enabled=0 则表示不生效。</span><br><span class="line">gpgcheck：如果为 1 则表示 RPM 的数字证书生效；如果为 0 则表示 RPM 的数字证书不生效。</span><br><span class="line">gpgkey：数字证书的公钥文件保存位置。gpgcheck=1时需要指定地址，gpgcheck=0时，可以不配置。</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用光盘配置本地源</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /mnt/cdrom</span><br><span class="line"><span class="comment"># 挂载光盘到/mnt/cdrom目录下，也可以将cdrom下的文件拷贝到任意路径下</span></span><br><span class="line">mount /dev/cdrom /mnt/cdrom/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line"><span class="comment"># 备份原有的源文件</span></span><br><span class="line">rename <span class="string">&#x27;.repo&#x27;</span> <span class="string">&#x27;.repo.bak&#x27;</span> /etc/yum.repos.d/*.repo</span><br><span class="line"></span><br><span class="line">vi local-yum.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容为：可以参考 CentOS-Linux-Media.repo进行配置</span></span><br><span class="line">[local-yum]</span><br><span class="line">name=local-yum,<span class="built_in">source</span> from cdrom</span><br><span class="line"><span class="comment">#使用光盘挂载的方式  mount /dev/cdrom /mnt/cdrom ，也可以将cdrom下的文件拷贝到任意路径下</span></span><br><span class="line">baseurl=file:///mnt/cdrom</span><br><span class="line"><span class="comment"># 假若你不想软件库缺省是被启用的，可以配置为 enabled=0，此时可以通过 yum --enablerepo mlocal-yum install zip 的方式访问该软件库。</span></span><br><span class="line">enabled=1</span><br><span class="line"><span class="comment"># 不进行数字证书校验</span></span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理yum缓存并重新建立缓存</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前的yum源信息</span></span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em><br>如果没有光驱，可将系统iso文件上传到服务器，比如在/mnt下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /mnt/os</span><br><span class="line">mount -t iso9660 -o loop /mnt/CentOS-6.5-x86_64-bin-DVD1.iso /mnt/os</span><br></pre></td></tr></table></figure><p>然后将 baseurl 配置为 file:///mnt/os 即可。</p></div><ul class="lvl-0"><li class="lvl-2"><p>增加网络仓库源<br>有些时候，我们安装的软件并不在我们配置好的yum源中，此时我们可以在软件的官方网站上查看到yum安装的相关说明，比如jenkins: <a href="https://pkg.jenkins.io/redhat/">https://pkg.jenkins.io/redhat/</a>，我们只需要按照说明将对应的源添加到系统中即可。</p><ul class="lvl-2"><li class="lvl-6">1.添加镜像源</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">2.导入jenkins公钥</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">3.安装依赖</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖，如果已经安装则可以跳过此步，jdk版本大于1.8即可</span></span><br><span class="line">yum install fontconfig java-11-openjdk</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">4.安装jenkins</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y jenkins</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">5.查看jenkins安装目录</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql jenkins</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">6.启动jenkins</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认8080端口，用户：admin 初始密码在 /var/lib/jenkins/secrets/initialAdminPassword</span></span><br><span class="line">systemctl start jenkins</span><br><span class="line">systemctl status jenkins</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">7.插件下载源更换(海外服务器不需要更换)</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Dashboard--Manage Jenkins--Manage Plugins--Advanced settings--Update Site</span><br><span class="line"></span><br><span class="line"><span class="comment"># jenkins插件默认下载站点</span></span><br><span class="line">https://updates.jenkins.io/update-center.json</span><br><span class="line"><span class="comment"># 清华源</span></span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br></pre></td></tr></table></figure></li></ul><h2 id="DNF">DNF</h2><ul class="lvl-0"><li class="lvl-2"><p>从CentOS 8开始，系统默认的软件包管理器是<code>dnf</code>，系统提供的<code>yum</code>命令仅为<code>dnf</code>命令的软链接。<code>dnf</code>是<code>dandified yum</code>的简称，是基于rpm软件包的Linux发行版本的软件包管理器。</p></li><li class="lvl-2"><p><code>dnf</code>与<code>yum</code>命令的使用和配置方式基本一致，上面介绍的<code>yum</code>命令，直接替换为<code>dnf</code>即可</p></li><li class="lvl-2"><p><code>dnf</code>与<code>yum</code>的区别在于：</p><ul class="lvl-2"><li class="lvl-6">(1)yum禁止删除正在使用的内核，而dnf允许删除所有内核，包括正在使用的内核；</li><li class="lvl-6">(2)在更新软件包时，yum不进行依赖包相关性的检查，而dnf如果检查到存在不相关的依赖包，则不会进行软件包更新。</li><li class="lvl-6">(3)yum在解决依赖包问题时，存在性能较差、内存占用大等问题，而dnf采用了由 SUSE 开发的“libsolv”库，用以提升依赖包解析性能，其依赖包解析速度比yum更快，且比yum消耗更少内存。</li><li class="lvl-6">(4)dnf代码比yum简单，约有29000行代码，而yum代码有59000多行。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;在Linux发行版中，几乎每一个发行版都有自己的软件包管理系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;常见的有适用于&lt;code&gt;debian&lt;/code&gt;、&lt;code&gt;Ubuntu&lt;/code&gt;等系统的&lt;code&gt;dpkg&lt;/code&gt;、&lt;code&gt;apt-get&lt;/code&gt;以及它们的前端&lt;code&gt;aptitude&lt;/code&gt;，以及适用于&lt;code&gt;RedHat&lt;/code&gt;、&lt;code&gt;Fedora&lt;/code&gt;系统的&lt;code&gt;rpm&lt;/code&gt;以及它的前端&lt;code&gt;yum&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;code&gt;CentOS&lt;/code&gt;系统从属于&lt;code&gt;RedHat&lt;/code&gt;系列，其软件包管理系统有RPM和YUM，本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;介绍它们的使用方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;从CentOS 8开始，系统默认的软件包管理器是&lt;code&gt;dnf&lt;/code&gt;，系统提供的&lt;code&gt;yum&lt;/code&gt;命令仅为&lt;code&gt;dnf&lt;/code&gt;命令的软链接。&lt;code&gt;dnf&lt;/code&gt;是&lt;code&gt;dandified yum&lt;/code&gt;的简称，是基于rpm软件包的Linux发行版本的软件包管理器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--管道符&quot;|&quot;、&quot;xargs&quot;、文件描述符与重定向</title>
    <link href="https://blog.hanqunfeng.com/2023/03/15/linux-command07-xargs/"/>
    <id>https://blog.hanqunfeng.com/2023/03/15/linux-command07-xargs/</id>
    <published>2023-03-15T13:30:05.000Z</published>
    <updated>2023-03-24T02:37:03.029Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍管道符&quot;|&quot;与&quot;xargs&quot;的使用方法。</p></li><li class="lvl-2"><p>以及文件描述符与重定向操作符的使用方法。</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="管道符">管道符&quot;|&quot;</h2><ul class="lvl-0"><li class="lvl-2"><p>管道符主要用于多重命令处理，前面命令的输出结果作为后面命令的输入</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该命令的作用就是查看文本后排序，然后再去重，最后过滤出含有hello的行并输出</span></span><br><span class="line"><span class="built_in">cat</span> test.txt | <span class="built_in">sort</span> | <span class="built_in">uniq</span> | grep <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>以上的cat、sort、uniq、grep等命令均支持管道符，一般情况下，处理文本的命令，例如sort、uniq、grep、awk、sed等命令均支持管道，是因为这些命令均可从标准输入中读取要处理的文本（即从标准输入中读取参数）</p></li><li class="lvl-2"><p>而对于不是处理文本的命令，例如ls、rm、kill等则不支持从标准输入中读取参数，只支持从命令行中读取参数，而要使其也能从标准输入中读取参数则需要使用<code>xargs</code></p></li><li class="lvl-2"><p>命令行参数优先于标准输入即管道符，如<code>cat a.txt | sort b.txt</code>，此时<code>sort</code>仅仅会处理<code>b.txt</code></p></li><li class="lvl-2"><p><code>- </code> 表示标准输入，例如 <code>cat a.txt | sort b.txt -</code>，相当于 <code>sort a.txt b.txt</code></p></li></ul><div class="tips"><p><em><strong>命令行参数和标准输入的区别</strong></em></p><ul class="lvl-1"><li class="lvl-2">命令行参数<blockquote><p>命令行参数就是命令后面的参数<br>例如<code>rm test.sh</code>，<code>rm</code>是命令，<code>test.sh</code>就是命令行参数</p></blockquote></li><li class="lvl-2">标准输入<blockquote><p>标准输入一般指的是键盘输入，也可用于表示管道符之前命令的输出结果（即打印在屏幕的文本）作为之后命令的标准输入</p></blockquote></li></ul></div><h2 id="xargs">xargs</h2><ul class="lvl-0"><li class="lvl-2"><p><code>xargs</code>的作用是接收管道符前面命令的输出进行处理后作为命令行参数传递给后续命令，而并不是作为标准输入传递给后续命令。</p></li><li class="lvl-2"><p><code>xargs</code>以空白字符（空格，tap，换行符均算空白字符）分隔从管道接收的文本，并且将分隔后文本均作为参数</p></li><li class="lvl-2"><p><code>xargs</code>常用选项</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">参数    解释</span><br><span class="line">-d    指定分隔符，不指定默认为空白字符</span><br><span class="line">-p    先打印即将执行的命令并询问是否执行</span><br><span class="line">-n    指定每次传输给后续命令的参数个数，不指定则全部传递</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设当前目录下有a.txt和b.txt，则该命令的含义就是 cat a.txt b.txt</span></span><br><span class="line"><span class="built_in">ls</span> *.txt | xargs <span class="built_in">cat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于 按顺序执行 cat a.txt 和 cat b.txt</span></span><br><span class="line"><span class="built_in">ls</span> *.txt | xargs -n 1 <span class="built_in">cat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件，执行前先打印命令并询问是否执行，输入y回车后可以执行，仅仅回车不执行</span></span><br><span class="line"><span class="built_in">ls</span> *.txt | xargs -p <span class="built_in">rm</span> -rf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀掉进程</span></span><br><span class="line">ps -ef | grep <span class="string">&#x27;test.sh&#x27;</span> | grep -v <span class="string">&#x27;grep&#x27;</span>| awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span></span><br></pre></td></tr></table></figure><h2 id="文件描述符">文件描述符</h2><ul class="lvl-0"><li class="lvl-2"><p>在 Linux 系统中，进程通过文件描述符来管理文件，文件描述符就是一个数字以及与之相关联的一堆数据</p></li><li class="lvl-2"><p>一个进程打开一个文件，就会创建一个新的文件描述符，这个数字一般是自增的，进程如果关闭文件，这个描述符是可以重复利用的</p></li><li class="lvl-2"><p>查看进程关联的文件描述符</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如查看`mysqld`的文件描述符</span></span><br><span class="line"><span class="comment"># 先获得mysqld的PID，这里是823</span></span><br><span class="line">$ ps aux | grep mysqld | grep -v <span class="string">&quot;grep&quot;</span></span><br><span class="line">mysql      823  0.0  7.0 1653908 64080 ?       Ssl  3月01   7:50 /usr/sbin/mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入如下目录</span></span><br><span class="line">$ <span class="built_in">cd</span> /proc/823/fd</span><br><span class="line"><span class="comment"># 列出PID为823的进程关联的文件描述符</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">0   12  16  2   23  27  30  34  38  41  45  49  52  56  6   63  67  70  9</span><br><span class="line">1   13  17  20  24  28  31  35  39  42  46  5   53  57  60  64  68  71</span><br><span class="line">10  14  18  21  25  29  32  36  4   43  47  50  54  58  61  65  69  72</span><br><span class="line">11  15  19  22  26  3   33  37  40  44  48  51  55  59  62  66  7   8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过ls -l可以查看到实际关联的文件，这里对文件描述符按数字大小做了排序</span></span><br><span class="line">$ <span class="built_in">ls</span> -l | grep <span class="string">&quot;^l&quot;</span> | <span class="built_in">sort</span> -k 9n | <span class="built_in">head</span> -n 5</span><br><span class="line">lr-x------ 1 mysql mysql 64 3月  13 04:06 0 -&gt; /dev/null</span><br><span class="line">lrwx------ 1 mysql mysql 64 3月  13 04:06 1 -&gt; socket:[16837]</span><br><span class="line">lrwx------ 1 mysql mysql 64 3月  13 04:06 2 -&gt; socket:[16837]</span><br><span class="line">lrwx------ 1 mysql mysql 64 3月  13 04:06 3 -&gt; /var/lib/mysql/aria_log_control</span><br><span class="line">lr-x------ 1 mysql mysql 64 3月  13 04:06 4 -&gt; /var/lib/mysql</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>每一个进程启动的时候，都会默认打开三个文件，用<code>0,1,2</code>来当做他们的描述符</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 : 标准输入文件(stdin)，代表标准输入，默认指键盘输入</span><br><span class="line">1 : 标准输出文件(stdout)，代表标准输出，标准输出就是命令的输出，默认指向终端屏幕</span><br><span class="line">2 : 标准错误文件(stderr)，代表错误输出，标准错误是命令错误信息的输出，默认指向终端屏幕</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>进程操作所有文件的过程都是一样的，都是先打开一个文件，给他一个文件描述符，然后针对这个描述符进行读或者写</p></li><li class="lvl-2"><p>在Linux里，键盘输入这种操作会变成一个文件操作，就类似普通的文件那样，这就是Linux的设计，一切皆是文件</p></li><li class="lvl-2"><p>不仅仅键盘操作和屏幕打印是文件操作，网络连接读取数据等等，也都是文件操作，这些也都会产生文件描述符</p></li><li class="lvl-2"><p>一个进程同时拥有的文件描述符是有上限的，这个上限可以设置。</p></li><li class="lvl-2"><p>我们来解读下面这个命令的执行过程</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">1.<code>cat</code>这个程序打开了test.txt这个文件，将其内容写入 <code>1</code> 这个文件(标准输出)，也就是屏幕上</li><li class="lvl-6">2.管道符<code>|</code>的作用就是将前一个程序的 <code>1</code> (标准输出)绑定到后一个程序的<code>0</code>(标准输入)，这里就是将<code>cat</code>的<code>1</code>绑定到<code>grep</code>的<code>0</code></li><li class="lvl-6">3.然后<code>grep</code> 这个程序就试图从 <code>0</code> 这个文件(标准输入)中读取数据，然后找到包含<code>hello</code>的行，然后把找到的行写入到 <code>1</code> 这个文件(标准输出)中，也就是屏幕上</li></ul></li></ul><h3 id="设置文件描述符上限">设置文件描述符上限</h3><ul class="lvl-0"><li class="lvl-2"><p>文件描述符上限设置分为三个限制级别：系统限制、用户限制、会话限制，最终的上限是这三个限制级别中最小的值</p></li><li class="lvl-2"><p>查看及设置系统上限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">cat</span> /proc/sys/fs/file-max</span><br><span class="line">或者</span><br><span class="line">sysctl fs.file-max</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置</span></span><br><span class="line"><span class="built_in">echo</span> fs.file-max=65535 &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p <span class="comment"># 立即生效</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看及设置用户上限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">cat</span> /etc/security/limits.conf</span><br><span class="line"><span class="comment"># 设置格式为：</span></span><br><span class="line">　　　　　　username|@groupname <span class="built_in">type</span> resource <span class="built_in">limit</span></span><br><span class="line">　　　　　　username|@groupname：设置需要被限制的用户名，组名前面加@和用户名区别。也可以用通配符*来做所有用户的限制。</span><br><span class="line">　　　　　　<span class="built_in">type</span>：有 soft，hard 和 -，soft 指的是当前系统生效的设置值。hard 表明系统中所能设定的最大值。soft 的限制不能比hard 限制高。用 - 就表明同时设置了 soft 和 hard 的值</span><br><span class="line">　　　　　　resource: 为资源类型有多种。 nofile为最大打开文件数。</span><br><span class="line">　　　　　　例如：* -  nofile 65535  将所有用户的最大打开文件数的soft和hard都设为65535</span><br><span class="line"><span class="comment"># 对/etc/security/limit.conf的修改会在新的会话期中生效</span></span><br><span class="line"><span class="comment"># 设置时一般在文件最后添加如下内容</span></span><br><span class="line">root soft nofile 65535</span><br><span class="line">root hard nofile 65535</span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看及设置会话上限 :默认继承自用户限制级别</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">ulimit</span> -Sn :查看会话期最大文件描述符soft限制</span><br><span class="line"><span class="built_in">ulimit</span> -Hn :查看会话期最大文件描述符hard限制，hard限制是soft的上限。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置</span></span><br><span class="line"><span class="comment"># 用ulimit所做的修改在会话期结束后都将失效</span></span><br><span class="line"><span class="built_in">ulimit</span> -Sn 2046 :限制当前会话期内能打开的文件数为2046（如果其中一个进程打开了2046个，其他进程再打文件都将失败）</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>文件描述符使用上限最大能设置多大呢？当然你可以把它往大了设，但是同时打开的文件描述符越多，内存开销就越大。那怎样设置一个合理的上限呢？一个经验算法是 256个fd 需4M内存。例如8G内存，<code>8*1024/4*256=524288</code>。</p></li><li class="lvl-2"><p>如果我们在一台机器上部署了自己的网络服务，我们只需按下面步骤修改就可以了：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">　　1. 计算 fdmax = 物理内存大小(m为单位) / 4 * 256  ,假设内存为8G,fdmax=524288</span><br><span class="line">　　2. 执行命令: <span class="built_in">echo</span> fs.file-max=524288 &gt;&gt; /etc/sysctl.conf</span><br><span class="line">　　3. 执行命令: sysctl -p</span><br><span class="line">　　4. 执行命令: <span class="built_in">echo</span>  * soft nofile  524286 &gt;&gt; /etc/security/limits.conf</span><br><span class="line">　　5. 执行命令: <span class="built_in">echo</span>  * hard nofile 524287 &gt;&gt; /etc/security/limits.conf</span><br><span class="line">　　6. 结束当前会话期</span><br><span class="line">　　7. 启动新的会话</span><br><span class="line">　　8. 启动我们的服务</span><br></pre></td></tr></table></figure><h2 id="重定向操作符">重定向操作符</h2><ul class="lvl-0"><li class="lvl-2"><p>所谓重定向，其含义就是将不同的文件描述符重新定向到其它文件描述符</p></li><li class="lvl-2"><p>常用的重定向操作符有如下几种:</p><ul class="lvl-2"><li class="lvl-6"><code>&lt;</code> :将文件作为命令的标准输入</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt; test.txt</span><br><span class="line">mysql -uroot -p &lt; databases.sql</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>&gt;</code> :将命令的输出结果输出到指定文件中，就是将标准输出重定向，且覆盖原文件内容</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下两个命令的作用是一样的，都是将标准输出重定向到文件</span></span><br><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span> &gt; result.txt</span><br><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span> 1&gt; result.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准输出与标准错误都重定向到文件</span></span><br><span class="line">sh test.sh 1&gt; run.log 2&gt; error.log</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>&gt;&gt;</code> :将命令的输出结果以 <em><strong>追加</strong></em> 的方式输出到指定文件中</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下两个命令的作用是一样的，都是将标准输出重定向到文件</span></span><br><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span> &gt;&gt; result.txt</span><br><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span> 1&gt;&gt; result.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准输出与标准错误都重定向到文件</span></span><br><span class="line">sh test.sh &gt;&gt; run.log 2&gt;&gt; error.log</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>&gt;&amp;</code> :将命令的输出结果或者一个文件描述符重新定向到另一个文件描述符</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下两个命令的作用是一样的，都是将标准输出重定向到文件，标准错误重定向且等同于标准输出</span></span><br><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span> &gt; result.txt 2&gt;&amp;1</span><br><span class="line"><span class="built_in">cat</span> test.txt | grep <span class="string">&quot;hello&quot;</span> 1&gt; result.txt 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准输出重定向到文件，标准错误重定向且等同于标准输出</span></span><br><span class="line">sh test.sh &gt;&gt; run.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准输出重定向到空设备文件，也就是不输出也不显示任何信息，标准错误重定向且等同于标准输出，也就是标准错误也重定向到空设备中</span></span><br><span class="line">sh test.sh 1&gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>使用重定向操作符时的注意事项</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.标准输入0、标准输出1、标准错误2 需要分别重定向，一个重定向只能改变它们其中一个。</span><br><span class="line">2.文件描述符在重定向符号左侧时可以省略。</span><br><span class="line">3.文件描述符与重定向符号之间不能有空格。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍管道符&amp;quot;|&amp;quot;与&amp;quot;xargs&amp;quot;的使用方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;以及文件描述符与重定向操作符的使用方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--各种符号</title>
    <link href="https://blog.hanqunfeng.com/2023/03/13/linux-command06-$/"/>
    <id>https://blog.hanqunfeng.com/2023/03/13/linux-command06-$/</id>
    <published>2023-03-13T14:40:05.000Z</published>
    <updated>2023-03-24T05:38:07.521Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>文本介绍linux编程中会用到的各种符号的使用方法</p></li><li class="lvl-2"><p>特殊变量: $0、$?、$*、$@、$#、$$、$_、$!</p></li><li class="lvl-2"><p>&amp;和&amp;&amp;、|和||</p></li><li class="lvl-2"><p>命令替换: $( ) 与 ``</p></li><li class="lvl-2"><p>整数运算: $(( )) 与 $[ ]</p></li><li class="lvl-2"><p>条件判断: (( ))、[ ]与[[ ]]</p></li><li class="lvl-2"><p>变量引用: $ 与 ${ }</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="特殊变量-0、-、-、-、-、-、">特殊变量: <code>$0、$?、$*、$@、$#、$$、$!</code></h2><ul class="lvl-0"><li class="lvl-2"><p><code>$0</code> : 当前脚本的文件名（间接运行时还包括绝对路径）。</p></li><li class="lvl-2"><p><code>$n</code> : 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。</p></li><li class="lvl-2"><p><code>$#</code> : 传递给脚本或函数的参数个数。</p></li><li class="lvl-2"><p><code>$*</code> : 传递给脚本或函数的所有参数。</p></li><li class="lvl-2"><p><code>$@</code> : 传递给脚本或函数的所有参数。被双引号 <code>&quot;$@&quot;</code> 包含时，与 <code>&quot;$*&quot;</code> 不同，下面将会讲到。</p></li><li class="lvl-2"><p><code>$?</code> : 上个命令的退出状态(0:success 非0:error)，或函数的返回值。</p></li><li class="lvl-2"><p><code>$$</code> : 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。</p></li><li class="lvl-2"><p><code>$_</code> : 上一个命令的最后一个参数</p></li><li class="lvl-2"><p><code>$!</code> : 后台运行的最后一个进程的 ID 号</p></li></ul><blockquote><p><code>$*</code> 和 <code>$@</code> 都表示传递给函数或脚本的所有参数，不被双引号 <code>&quot;&quot;</code> 包含时，都以独立个体<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> 的形式输出所有参数。<br>但是当它们被双引号 <code>&quot;&quot;</code> 包含时，<code>&quot;$*&quot;</code>会将所有的参数作为一个整体输出，<code>&quot;$@&quot;</code>依旧会以独立个体<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> 的形式输出所有参数。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $*</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;$*&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1 2 3 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># $@</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;$@&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><blockquote><p>获取参数数量：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paramSize=<span class="variable">$&#123;#@&#125;</span></span><br></pre></td></tr></table></figure><h2 id="和-、-和"><code>&amp;</code>和<code>&amp;&amp;</code>、<code>|</code>和<code>||</code></h2><ul class="lvl-0"><li class="lvl-2"><p><code>&amp;</code>  表示任务在后台执行，如要在后台运行redis-server,则有 <code>redis-server &amp;</code></p></li><li class="lvl-2"><p><code>&amp;&amp;</code> 表示前一条命令执行成功时，才执行后一条命令 ，如 <code>make &amp;&amp; make install</code></p></li><li class="lvl-2"><p><code>|</code> 表示管道，上一条命令的输出，作为下一条命令参数，如 <code>cat text.txt | wc -l</code></p></li><li class="lvl-2"><p><code>||</code> 表示上一条命令执行失败后，才执行下一条命令，如 <code>grep &quot;success&quot; run.log || echo &quot;fail&quot;</code></p></li></ul><h2 id="命令替换-与">命令替换: <code>$( )</code> 与 ``</h2><ul class="lvl-0"><li class="lvl-2"><p><code>$( )</code> 与 `` 都是用来作命令替换的，优先执行括号或者反引号中的命令，并将结果替换出来组成新的命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下命令效果相同</span></span><br><span class="line"><span class="built_in">echo</span> today is `<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> today is $(<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d&quot;</span>)</span><br><span class="line"></span><br><span class="line">today=`<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$today</span></span><br><span class="line">today=$(<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$today</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>推荐使用<code>$( )</code>，因为在多层次的复合替换中，内部的`` 必须要进行转义，而$( )比较直观</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  cmd3 `cmd2 \`cmd1\``</span></span><br><span class="line">sh echo.sh <span class="string">&quot;`echo today is \`date &quot;</span>+%Y-%m-%d<span class="string">&quot;\``&quot;</span></span><br><span class="line"><span class="comment">#  cmd3 $(cmd2 $(cmd1))</span></span><br><span class="line">sh echo.sh <span class="string">&quot;<span class="subst">$(echo today is $(date <span class="string">&quot;+%Y-%m-%d&quot;</span>)</span>)&quot;</span></span><br></pre></td></tr></table></figure><h2 id="整数运算-与">整数运算: <code>$(( ))</code> 与 <code>$[ ]</code></h2><ul class="lvl-0"><li class="lvl-2"><p><code>$(( ))</code>用于执行整数计算，等价于<code>$[ ]</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(( <span class="number">3</span>+<span class="number">5</span> ))</span><br><span class="line"><span class="built_in">echo</span> $[ 3+5 ]</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(( (<span class="number">3</span>+<span class="number">5</span>)*<span class="number">4</span>/<span class="number">2</span> ))</span><br><span class="line"><span class="built_in">echo</span> $[ (3+5)*4/2 ]</span><br></pre></td></tr></table></figure><h2 id="条件判断-、-和">条件判断: <code>(( ))</code>、<code>[ ]</code>和<code>[[ ]]</code></h2><ul class="lvl-0"><li class="lvl-2"><p>在使用<code>if</code>或<code>while</code>等语句时，需要进行条件判断，<code>(( ))</code>、<code>[ ]</code>和<code>[[ ]]</code>都可以用来进行条件判断，那么他们之间有什么区别吗？</p><ul class="lvl-2"><li class="lvl-6"><code>[ ]</code>是<code>test</code>命令的另一种形式，例如 <code>test a == b</code> 等同于 <code>[ a == b ]</code>，注意 <code>[</code> 后和 <code>]</code> 前都需要有空格，并且<code>==</code>两边也都要有空格</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> <span class="string">&#x27;hello&#x27;</span> != <span class="string">&#x27;world&#x27;</span> ==&gt;  [ <span class="string">&#x27;hello&#x27;</span> != <span class="string">&#x27;world&#x27;</span> ]</span><br><span class="line"><span class="built_in">test</span> ! -e test.sh       ==&gt;  [ ! -e test.sh ]</span><br><span class="line"><span class="built_in">test</span> <span class="variable">$i</span> -lt 5           ==&gt;  [ <span class="variable">$i</span> -lt 5 ]</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>[[ ]]</code>是<code>[ ]</code>的增强版，其在如下几个方面进行了增强:<ul class="lvl-4"><li class="lvl-10">1.在<code>[[ ]]</code>中使用<code>&gt;</code>、<code>&lt;</code> 进行数值比较时不需要转义，但是不支持<code>&gt;=</code>、<code>&lt;=</code></li><li class="lvl-10">2.支持<code>&amp;&amp;</code>和<code>||</code></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下三种作用相同</span></span><br><span class="line">[[ <span class="variable">$a</span> &gt; 3 &amp;&amp; <span class="variable">$a</span> != 10 ]]</span><br><span class="line">[ <span class="variable">$a</span> &gt; 3 -a <span class="variable">$a</span> != 10 ]</span><br><span class="line">[ <span class="variable">$a</span> &gt; 3 ] &amp;&amp; [ <span class="variable">$a</span> != 10 ]</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-10">3.<code>[[ ]]</code>在比较字符串时支持正则匹配和通配符匹配</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通配符匹配</span></span><br><span class="line">a=<span class="string">&quot;linux&quot;</span></span><br><span class="line">[[ <span class="variable">$a</span> == l?nu? ]] <span class="comment"># 0</span></span><br><span class="line">[[ <span class="variable">$a</span> != li* ]]   <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则匹配 `=~`</span></span><br><span class="line">a=<span class="string">&quot;linux&quot;</span></span><br><span class="line">[[ <span class="variable">$a</span> =~ ^li ]]</span><br><span class="line">[[ <span class="variable">$a</span> =~ ^li[abn]ux ]]</span><br></pre></td></tr></table></figure></li><li class="lvl-6"><code>(( ))</code> 用于条件判断时只能进行数值比较，运算符不需要转义，而且不支持<code>-lt</code>、<code>-gt</code>等等  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(( <span class="variable">$i</span> &lt;= 5 ))</span><br></pre></td></tr></table></figure></li></ul><div class="tips"><p><em><strong>小贴士</strong></em><br><code>(( ))</code>除了用于条件判断外，还有三种用法：<br>1.与<code>$</code>结合使用进行数学运算 : <code>$(( ))</code><br>2.在<code>for</code>循环命令中控制循环 : <code>for((i=1;i&lt;10;i++))</code><br>3.改变变量的值，且变量前不需要<code>$</code> : <code>((i++))</code></p></div></li><li class="lvl-2"><p>推荐在进行条件判断时使用<code>[[ ]]</code>，运算符不需要转义，而且支持正则</p></li></ul><h2 id="变量引用-与">变量引用: <code>$</code> 与 <code>$&#123; &#125;</code></h2><ul class="lvl-0"><li class="lvl-2"><p><code>$</code>与<code>$&#123; &#125;</code>都是用来引用变量的，<code>$&#123; &#125;</code>通常用于划定变量名的边界，当执行 <code>echo &quot;$aa&quot;</code>的时候系统会打印变量<code>$aa</code>的值，当执行<code>echo &quot;$&#123;a&#125;a&quot;</code>时打印的是<code>$&#123;a&#125;</code>和字母a，如果不需要为变量名划分边界的话，<code>$a</code>和<code>$&#123;a&#125;</code>是完全相等的。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">today=`<span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$today</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;today&#125;</span>_now</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>$&#123; &#125;</code>还有一个重要的功能，就是文本处理:</p><ul class="lvl-2"><li class="lvl-6">1.获取字符串长度</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#str&#125;</span> <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">2.字符串切片<code>$&#123;a:b:c&#125;</code>: 将字符串变量<code>a</code>从第<code>b</code>个位置开始向后截取<code>c</code>个字符，b是指下标，下标从0开始，<code>c</code>可以不指定，表示截取到字符串末尾</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:0:5&#125;</span> <span class="comment"># hello</span></span><br><span class="line"><span class="comment"># 不指定c，表示从第6个字符开始截取到字符串末尾</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:6&#125;</span> <span class="comment"># world!</span></span><br><span class="line"><span class="comment"># 截取从倒数第一个字符开始到字符串末尾的字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:(-1)&#125;</span> <span class="comment"># !</span></span><br><span class="line"><span class="comment"># 截取从倒数第 6 个字符后的 5 个字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:(-6):5&#125;</span> <span class="comment"># world</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">3.替换字符串<code>$&#123;a/b/c&#125;</code>: 将变量<code>a</code>中的<code>b</code>全部替换为<code>c</code>，开头一个正斜杠为只匹配第一个字符串，两个正斜杠为匹配所有字符。</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;hello hello world&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;a/hello/hi&#125;</span>&quot;</span> <span class="comment"># hi hello world</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;a//hello/hi&#125;</span>&quot;</span> <span class="comment"># hi hi world</span></span><br><span class="line"><span class="comment"># 支持正则</span></span><br><span class="line">str=123abc</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str//[^0-9]/&#125;</span> <span class="comment"># 123，将非数字替换为空</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str//[0-9]/&#125;</span> <span class="comment"># abc，将数字替换为空</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">4.字符串截取</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line"><span class="comment"># 删除匹配前缀</span></span><br><span class="line"><span class="variable">$&#123;parameter#word&#125;</span></span><br><span class="line"><span class="variable">$&#123;parameter##word&#125;</span></span><br><span class="line"><span class="comment"># 删除匹配后缀</span></span><br><span class="line"><span class="variable">$&#123;parameter%word&#125;</span></span><br><span class="line"><span class="variable">$&#123;parameter%%word&#125;</span></span><br><span class="line"><span class="comment"># 去掉左边，#最短匹配模式，##最长匹配模式。</span></span><br><span class="line">% 去掉右边，%最短匹配模式，%%最长匹配模式。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">URL=<span class="string">&quot;http://www.baidu.com/baike/user.html&quot;</span></span><br><span class="line"><span class="comment"># 匹配http://，以//为分隔符截取出右边字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL#*//&#125;</span> <span class="comment"># www.baidu.com/baike/user.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以/为分隔符截取右边字符串，##表示尽可能多的删除，保留最少内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL##*/&#125;</span> <span class="comment"># user.html</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL#*/&#125;</span>  <span class="comment"># /www.baidu.com/baike/user.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以/为分隔符截取左边字符串，%%表示尽可能多的删除，即保留最少内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL%%/*&#125;</span> <span class="comment"># http:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL%/*&#125;</span> <span class="comment"># http://www.baidu.com/baike</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">5.变量状态赋值</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="variable">$&#123;VAR:-string&#125;</span> <span class="comment"># 如果 VAR 变量为空则返回 string</span></span><br><span class="line"><span class="variable">$&#123;VAR:+string&#125;</span> <span class="comment"># 如果 VAR 变量不为空则返回 string</span></span><br><span class="line"><span class="variable">$&#123;VAR:=string&#125;</span> <span class="comment"># 如果 VAR 变量为空则重新赋值 VAR 变量值为 string</span></span><br><span class="line"><span class="variable">$&#123;VAR:?string&#125;</span> <span class="comment"># 如果 VAR 变量为空则将 string 输出到 stderr</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 如果变量为空就返回 hello world!</span></span><br><span class="line">VAR=</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:-&#x27;hello world!&#x27;&#125;</span> <span class="comment"># hello world!</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># 空</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果变量不为空就返回 hello world!</span></span><br><span class="line">VAR=<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:+&#x27;hello world!&#x27;&#125;</span> <span class="comment"># hello world!</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果变量为空就重新赋值：</span></span><br><span class="line">VAR=</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:=hello&#125;</span> <span class="comment"># hello</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果变量为空就将信息输出 stderr</span></span><br><span class="line">VAR=</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:?value is null&#125;</span> <span class="comment"># -bash: VAR: value is null</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;文本介绍linux编程中会用到的各种符号的使用方法&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;特殊变量: $0、$?、$*、$@、$#、$$、$_、$!&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&amp;amp;和&amp;amp;&amp;amp;、|和||&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;命令替换: $( ) 与 ``&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;整数运算: $(( )) 与 $[ ]&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;条件判断: (( ))、[ ]与[[ ]]&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;变量引用: $ 与 ${ }&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令--shell编程</title>
    <link href="https://blog.hanqunfeng.com/2023/03/13/linux-command06-shell/"/>
    <id>https://blog.hanqunfeng.com/2023/03/13/linux-command06-shell/</id>
    <published>2023-03-13T13:30:05.000Z</published>
    <updated>2023-03-24T02:37:12.877Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍shell编程的语法规则。</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="文件头">文件头</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh :指定执行脚步的shell路径</span></span><br><span class="line"><span class="comment">#!/usr/bin/env bash :从env中查找指定的shell路径</span></span><br></pre></td></tr></table></figure><blockquote><p>如果没有为脚本设置文件头指定执行脚本的shell路径，则默认使用运行脚本的用户的shell</p></blockquote><h2 id="注释语法">注释语法</h2><ul class="lvl-0"><li class="lvl-2"><p><code>#</code> : 使用<code>#</code>进行单行注释，要讲某行注释，就在该行行首添加<code>#</code></p></li></ul><h2 id="特殊变量">特殊变量</h2><ul class="lvl-0"><li class="lvl-2"><p><code>$0</code> : 当前脚本的文件名（间接运行时还包括绝对路径）。</p></li><li class="lvl-2"><p><code>$n</code> : 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。</p></li><li class="lvl-2"><p><code>$#</code> : 传递给脚本或函数的参数个数。</p></li><li class="lvl-2"><p><code>$*</code> : 传递给脚本或函数的所有参数。</p></li><li class="lvl-2"><p><code>$@</code> : 传递给脚本或函数的所有参数。被双引号 <code>&quot;$@&quot;</code> 包含时，与 <code>&quot;$*&quot;</code> 不同，下面将会讲到。</p></li><li class="lvl-2"><p><code>$?</code> : 上个命令的退出状态(0:success 非0:error)，或函数的返回值。</p></li><li class="lvl-2"><p><code>$$</code> : 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。</p></li><li class="lvl-2"><p><code>$_</code> : 上一个命令的最后一个参数</p></li><li class="lvl-2"><p><code>$!</code> : 后台运行的最后一个进程的 ID 号</p></li></ul><div class="tips"><p><em><strong>小贴士</strong></em><br><code>$*</code> 和 <code>$@</code> 都表示传递给函数或脚本的所有参数，不被双引号 <code>&quot;&quot;</code> 包含时，都以独立个体<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> 的形式输出所有参数。<br>但是当它们被双引号 <code>&quot;&quot;</code> 包含时，<code>&quot;$*&quot;</code>会将所有的参数作为一个整体输出，<code>&quot;$@&quot;</code>依旧会以独立个体<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> 的形式输出所有参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $*</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;$*&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1 2 3 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># $@</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;$@&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># sh test.sh 1 2 3 4，此时输出</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>获取参数数量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paramSize=<span class="variable">$&#123;#@&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="自定义变量">自定义变量</h2><h3 id="字符串">字符串</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个字符串变量</span></span><br><span class="line">s1=<span class="string">&quot;content&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量接收之前定义过的变量，使用变量时需要使用 $+变量名称</span></span><br><span class="line">s2=<span class="variable">$s1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量为之前定义过的变量与其它字符串的组合，此时可以使用 &#123;&#125; 将变量名称括起来以避免歧义</span></span><br><span class="line">s3=<span class="string">&quot;<span class="variable">$&#123;s1&#125;</span>_test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量接收日期字符串，``括起来的内容会优先执行，并把结果赋值给变量</span></span><br><span class="line">s4=`<span class="built_in">date</span> +%F<span class="string">&#x27; &#x27;</span>%T`</span><br><span class="line">now=`<span class="built_in">date</span> +%Y%m%d_%H%M%S`</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em><br><code>$</code>与<code>$&#123; &#125;</code>都是用来引用变量的，<code>$&#123; &#125;</code>通常用于划定变量名的边界<br>当执行 <code>echo &quot;$aa&quot;</code>的时候系统会打印变量<code>$aa</code>的值，当执行<code>echo &quot;$&#123;a&#125;a&quot;</code>时打印的是<code>$&#123;a&#125;</code>和字母a，如果不需要为变量名划分边界的话，<code>$a</code>和<code>$&#123;a&#125;</code>是完全相等的。<br>除此之外，<code>$&#123; &#125;</code>还有一个重要的功能，就是文本处理:</p><ul class="lvl-1"><li class="lvl-2">1.获取字符串长度</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#str&#125;</span> <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">2.字符串切片<code>$&#123;a:b:c&#125;</code>: 将字符串变量<code>a</code>从第<code>b</code>个位置开始向后截取<code>c</code>个字符，b是指下标，下标从0开始，<code>c</code>可以不指定，表示截取到字符串末尾</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:0:5&#125;</span> <span class="comment"># hello</span></span><br><span class="line"><span class="comment"># 不指定c，表示从第6个字符开始截取到字符串末尾</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:6&#125;</span> <span class="comment"># world!</span></span><br><span class="line"><span class="comment"># 截取从倒数第一个字符开始到字符串末尾的字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:(-1)&#125;</span> <span class="comment"># !</span></span><br><span class="line"><span class="comment"># 截取从倒数第 6 个字符后的 5 个字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a:(-6):5&#125;</span> <span class="comment"># world</span></span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">3.替换字符串<code>$&#123;a/b/c&#125;</code>: 将变量<code>a</code>中的<code>b</code>全部替换为<code>c</code>，开头一个正斜杠为只匹配第一个字符串，两个正斜杠为匹配所有字符。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;hello hello world&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;a/hello/hi&#125;</span>&quot;</span> <span class="comment"># hi hello world</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;a//hello/hi&#125;</span>&quot;</span> <span class="comment"># hi hi world</span></span><br><span class="line"><span class="comment"># 支持正则</span></span><br><span class="line">str=123abc</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str//[^0-9]/&#125;</span> <span class="comment"># 123，将非数字替换为空</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str//[0-9]/&#125;</span> <span class="comment"># abc，将数字替换为空</span></span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">4.字符串截取</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line"><span class="comment"># 删除匹配前缀</span></span><br><span class="line"><span class="variable">$&#123;parameter#word&#125;</span></span><br><span class="line"><span class="variable">$&#123;parameter##word&#125;</span></span><br><span class="line"><span class="comment"># 删除匹配后缀</span></span><br><span class="line"><span class="variable">$&#123;parameter%word&#125;</span></span><br><span class="line"><span class="variable">$&#123;parameter%%word&#125;</span></span><br><span class="line"><span class="comment"># 去掉左边，#最短匹配模式，##最长匹配模式。</span></span><br><span class="line">% 去掉右边，%最短匹配模式，%%最长匹配模式。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">URL=<span class="string">&quot;http://www.baidu.com/baike/user.html&quot;</span></span><br><span class="line"><span class="comment"># 匹配http://，以//为分隔符截取出右边字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL#*//&#125;</span> <span class="comment"># www.baidu.com/baike/user.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以/为分隔符截取右边字符串，##表示尽可能多的删除，保留最少内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL##*/&#125;</span> <span class="comment"># user.html</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL#*/&#125;</span>  <span class="comment"># /www.baidu.com/baike/user.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以/为分隔符截取左边字符串，%%表示尽可能多的删除，即保留最少内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL%%/*&#125;</span> <span class="comment"># http:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;URL%/*&#125;</span> <span class="comment"># http://www.baidu.com/baike</span></span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">5.变量状态赋值</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="variable">$&#123;VAR:-string&#125;</span> <span class="comment"># 如果 VAR 变量为空则返回 string</span></span><br><span class="line"><span class="variable">$&#123;VAR:+string&#125;</span> <span class="comment"># 如果 VAR 变量不为空则返回 string</span></span><br><span class="line"><span class="variable">$&#123;VAR:=string&#125;</span> <span class="comment"># 如果 VAR 变量为空则重新赋值 VAR 变量值为 string</span></span><br><span class="line"><span class="variable">$&#123;VAR:?string&#125;</span> <span class="comment"># 如果 VAR 变量为空则将 string 输出到 stderr</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 如果变量为空就返回 hello world!</span></span><br><span class="line">VAR=</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:-&#x27;hello world!&#x27;&#125;</span> <span class="comment"># hello world!</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># 空</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果变量不为空就返回 hello world!</span></span><br><span class="line">VAR=<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:+&#x27;hello world!&#x27;&#125;</span> <span class="comment"># hello world!</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果变量为空就重新赋值：</span></span><br><span class="line">VAR=</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:=hello&#125;</span> <span class="comment"># hello</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果变量为空就将信息输出 stderr</span></span><br><span class="line">VAR=</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;VAR:?value is null&#125;</span> <span class="comment"># -bash: VAR: value is null</span></span><br></pre></td></tr></table></figure></div><h3 id="数字">数字</h3><ul class="lvl-0"><li class="lvl-2"><p>整数运算</p><blockquote><p>支持<code>let</code>、<code>$(( ))</code>、<code>$[ ]</code>和<code>expr</code>四种方式</p></blockquote>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个数字</span></span><br><span class="line">a1=10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行数字运算时，可以使用以下是几种运算方式中的一种</span></span><br><span class="line"><span class="comment"># 加法和减法</span></span><br><span class="line">a2=$((<span class="variable">$a1</span> + <span class="number">5</span>)) or a2=$((a1 + <span class="number">5</span>))</span><br><span class="line">a3=$[<span class="variable">$a1</span> + 5] or a3=$[a1 + 5]</span><br><span class="line"><span class="comment"># expr 要求运算符之间要有空格</span></span><br><span class="line">a4=`<span class="built_in">expr</span> <span class="variable">$a1</span> - 5` or a4=$(<span class="built_in">expr</span> <span class="variable">$a1</span> - 5)</span><br><span class="line"><span class="comment"># let在引用变量时不需要$，另外运算符之间不能有空格</span></span><br><span class="line"><span class="built_in">let</span> a5=a1-5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法，注意使用expr方式时，* 要转义，</span></span><br><span class="line">a2=$((a1 * <span class="number">5</span>))</span><br><span class="line">a3=$[a1 * 5]</span><br><span class="line"><span class="comment"># expr 要求运算符之间要有空格</span></span><br><span class="line">a4=`<span class="built_in">expr</span> <span class="variable">$a1</span> \* 5`</span><br><span class="line"><span class="comment"># let在引用变量时不需要$，另外运算符之间不能有空格</span></span><br><span class="line"><span class="built_in">let</span> a5=a1*5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line">a2=$((a1 / <span class="number">5</span>))</span><br><span class="line">a3=$[a1 / 5]</span><br><span class="line"><span class="comment"># expr 要求运算符之间要有空格</span></span><br><span class="line">a4=`<span class="built_in">expr</span> <span class="variable">$a1</span> / 5`</span><br><span class="line"><span class="comment"># let在引用变量时不能有$，运算符之间不能有空格</span></span><br><span class="line"><span class="built_in">let</span> a5=a1/5</span><br></pre></td></tr></table></figure><blockquote><p><code>let</code>、<code>$(( ))</code>或<code>$[ ]</code>中的变量都可以不加<code>$</code>前缀<br>在进行整数运算时，<code>$(( ))</code>和<code>$[ ]</code>的作用是等价的<br>建议使用<code>let</code>、<code>$(( ))</code>或<code>$[ ]</code>的形式进行运算，其支持正常的运算逻辑，expr稍显笨拙，比如在进行带括号的运算时</p></blockquote>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a2=$(((a1 - <span class="number">5</span>) * <span class="number">5</span>))</span><br><span class="line">a3=$[(a1 - 5) * 5]</span><br><span class="line"></span><br><span class="line"><span class="comment"># expr 要求运算符之间要有空格</span></span><br><span class="line"><span class="comment"># expr需要分开独立计算</span></span><br><span class="line">a4_1=`<span class="built_in">expr</span> <span class="variable">$a1</span> - 5`</span><br><span class="line">a4_2=`<span class="built_in">expr</span> <span class="variable">$&#123;a4_1&#125;</span> \* 5`</span><br><span class="line"><span class="comment"># let在引用变量时不需要$，另外运算符之间不能有空格</span></span><br><span class="line"><span class="built_in">let</span> a5=(a1-5)*5</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em><br><code>$()</code>和 `` 的作用一致，都是用来做命令替换用，一般用于将命令返回的结果传递给变量</p></div></li><li class="lvl-2"><p>浮点数计算</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x=10</span><br><span class="line">y=3.211</span><br><span class="line">a1=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$x</span> * 2 / <span class="variable">$y</span>&quot;</span> | bc`  <span class="comment"># a1为6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># scale=2 保留两位小数，相当于截断不会四舍五入</span></span><br><span class="line">a2=`<span class="built_in">echo</span> <span class="string">&quot;scale=2; <span class="variable">$x</span> * 2 / <span class="variable">$y</span>&quot;</span> | bc` <span class="comment"># a2为6.22</span></span><br><span class="line"><span class="comment"># awk的计算会四舍五入</span></span><br><span class="line">a2=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$x</span> <span class="variable">$y</span>&quot;</span> | awk <span class="string">&#x27;&#123;printf &quot;%.2f\n&quot;,$1*2/$2&#125;&#x27;</span>` <span class="comment">#a2为6.23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bc运算时，整数位小于1不会显示</span></span><br><span class="line">a3=`<span class="built_in">echo</span> <span class="string">&quot;scale=2;  2 / 3&quot;</span> | bc` <span class="comment"># a3为.66，不会显示为0.66</span></span><br><span class="line"><span class="comment"># awk可以正确显示</span></span><br><span class="line">a3=`<span class="built_in">echo</span> 2 3 | awk <span class="string">&#x27;&#123;printf &quot;%.2f\n&quot;,$1/$2&#125;&#x27;</span>` <span class="comment">#a3为0.67</span></span><br></pre></td></tr></table></figure><blockquote><p><code>awk</code> 的计算方式比 <code>bc</code> 更好一些，支持精度更为准确<br><code>bc</code>和<code>awk</code>的计算方式同样支持整数</p></blockquote><h3 id="数组">数组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用小括号定义数组，(元素之间用空格分隔)</span></span><br><span class="line">array=(Zero One Two Three)</span><br><span class="line"><span class="comment"># 打印数组长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数组</span></span><br><span class="line"><span class="comment"># while遍历</span></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -lt <span class="variable">$&#123;#array[@]&#125;</span> ];<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;array[$i]&#125;</span></span><br><span class="line">    <span class="built_in">let</span> i=i+1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for遍历</span></span><br><span class="line"><span class="keyword">for</span>((i=0;i&lt;<span class="variable">$&#123;#array[@]&#125;</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;array[i]&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="从键盘设置变量-read">从键盘设置变量:read</h3><ul class="lvl-0"><li class="lvl-2"><p>read命令格式</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> [选项] [变量名]</span><br><span class="line">    选项：</span><br><span class="line">    -p “提示信息”：在等待<span class="built_in">read</span>输入时，输出提示信息</span><br><span class="line">    -t “秒数”： <span class="built_in">read</span>命令会一致等待用户输入，使用此选项可以指定等待时间</span><br><span class="line">    -n “字符数”： <span class="built_in">read</span>命令只接受指定的字符数，就会执行</span><br><span class="line">    -s： 隐藏输入的数据，适用于机密信息的输入</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> a <span class="comment"># 此时会等待用户键入变量值，比如此时输入: 3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span> <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -t 30 -p <span class="string">&quot;Please input your username:&quot;</span> username</span><br><span class="line"><span class="built_in">read</span> -s -t 30 -p <span class="string">&quot;Please input your passsword:&quot;</span> password</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> a b c <span class="comment"># 可以设置多个变量，比如此时输入: 1 2 3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;a&#125;</span>_<span class="variable">$&#123;b&#125;</span>_<span class="variable">$&#123;c&#125;</span>&quot;</span> <span class="comment"># 1_2_3</span></span><br></pre></td></tr></table></figure><h2 id="test命令"><code>test</code>命令</h2><ul class="lvl-0"><li class="lvl-2"><p><code>test</code>作用检查某个条件是否成立，返回值为<code>0</code>（真）或者其他值（假），可通过<code>echo $?</code>查看返回值，也常用于循环和条件语句。</p></li><li class="lvl-2"><p><code>test</code>一般有三种用法：</p><blockquote><p>测试文件或者文件夹是否存在<br>字符串比较<br>数值比较</p></blockquote></li></ul><h3 id="测试文件或者文件夹是否存在">测试文件或者文件夹是否存在</h3><ul class="lvl-0"><li class="lvl-2"><p>参数说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-d dir :是否为目录，是目录为真</span><br><span class="line">-f file :是否为常规文件，是文件为真</span><br><span class="line">-x file/dir :是否可执行，可执行为真</span><br><span class="line">-r file/dir :是否可读，可读为真</span><br><span class="line">-w file/dir :是否可写，可写为真</span><br><span class="line">-a file/dir :文件或目录是否存在，存在为真</span><br><span class="line">-e file/dir :文件或目录是否存在，存在为真</span><br><span class="line">-s file :文件大小是否非0，非0为真</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">test</span> -f test.sh</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">test</span> -d <span class="built_in">dir</span></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure><h3 id="字符串比较">字符串比较</h3><ul class="lvl-0"><li class="lvl-2"><p>参数说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数    说明</span><br><span class="line">-z      当str为空时返回真</span><br><span class="line">-n    当str为非空时返回真</span><br><span class="line">=    两个字符串相等时返回真</span><br><span class="line">==    两个字符串相等时返回真，同=</span><br><span class="line">!=    两个字符串不相等时返回真</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">test</span> -z <span class="string">&#x27;&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> $?  <span class="comment"># 输出0</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">test</span> -n <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> $?  <span class="comment"># 输出0</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">test</span> <span class="string">&#x27;hello&#x27;</span> == <span class="string">&#x27;world&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> $?  <span class="comment"># 输出1</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">test</span> <span class="string">&#x27;hello&#x27;</span> != <span class="string">&#x27;world&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> $?  <span class="comment"># 输出0</span></span><br></pre></td></tr></table></figure><h3 id="数值比较">数值比较</h3><ul class="lvl-0"><li class="lvl-2"><p>参数说明，使用<code>&gt;</code>、<code>&lt;</code>等运算符时需要转义 <code>\&gt;</code>、<code>\&lt;</code>，或者使用如下参数替换对应的运算符</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">参数    说明</span><br><span class="line">-eq    等于时返回真 ==</span><br><span class="line">-ne    不等于时返回真 !=</span><br><span class="line">-lt    小于时返回真 &lt;</span><br><span class="line">-le    小于等于时返回真 &lt;=</span><br><span class="line">-gt    大于时返回真 &gt;</span><br><span class="line">-ge    大于等于时返回真 &gt;=</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">test</span> 1 -lt 2</span><br><span class="line">$ <span class="built_in">echo</span> $?  <span class="comment"># 输出0</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算">逻辑运算</h3><ul class="lvl-0"><li class="lvl-2"><p>参数说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">参数  说明</span><br><span class="line">-a    逻辑与，二者都为真则为真</span><br><span class="line">-o    逻辑或，二者任意一个为真则为真</span><br><span class="line">!    逻辑非</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">test</span> ! -e test.sh</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">test</span> -f test.sh -a -d <span class="built_in">dir</span></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure><h3 id="shell中的用法">shell中的用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$i</span> -lt 5;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> &lt; 5&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> &gt;= 5&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="条件判断">条件判断</h2><ul class="lvl-0"><li class="lvl-2"><p>在使用<code>if</code>或<code>while</code>等语句时，需要进行条件判断，上面我们已经见到一个<code>while</code>的例子，其使用<code>[ ]</code>来定义条件判断</p></li><li class="lvl-2"><p>实际上除了<code>[ ]</code>以外，我们还可以使用<code>test</code>、<code>(( ))</code>和<code>[[ ]]</code>来进行条件判断，那么他们之间有什么区别吗？</p><ul class="lvl-2"><li class="lvl-6"><code>[ ]</code>是<code>test</code>命令的另一种形式，例如 <code>test a == b</code> 等同于 <code>[ a == b ]</code>，注意 <code>[</code> 后和 <code>]</code> 前都需要有空格，并且<code>==</code>两边也都要有空格</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> <span class="string">&#x27;hello&#x27;</span> != <span class="string">&#x27;world&#x27;</span> ==&gt;  [ <span class="string">&#x27;hello&#x27;</span> != <span class="string">&#x27;world&#x27;</span> ]</span><br><span class="line"><span class="built_in">test</span> ! -e test.sh       ==&gt;  [ ! -e test.sh ]</span><br><span class="line"><span class="built_in">test</span> <span class="variable">$i</span> -lt 5           ==&gt;  [ <span class="variable">$i</span> -lt 5 ]</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>[[ ]]</code>是<code>[ ]</code>的增强版，其在如下几个方面进行了增强:<ul class="lvl-4"><li class="lvl-10">1.在<code>[[ ]]</code>中使用<code>&gt;</code>、<code>&lt;</code> 进行数值比较时不需要转义，但是不支持<code>&gt;=</code>、<code>&lt;=</code></li><li class="lvl-10">2.支持<code>&amp;&amp;</code>和<code>||</code></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下三种作用相同</span></span><br><span class="line">[[ <span class="variable">$a</span> &gt; 3 &amp;&amp; <span class="variable">$a</span> != 10 ]]</span><br><span class="line">[ <span class="variable">$a</span> &gt; 3 -a <span class="variable">$a</span> != 10 ]</span><br><span class="line">[ <span class="variable">$a</span> &gt; 3 ] &amp;&amp; [ <span class="variable">$a</span> != 10 ]</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-10">3.<code>[[ ]]</code>在比较字符串时支持正则匹配和通配符匹配</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通配符匹配</span></span><br><span class="line">a=<span class="string">&quot;linux&quot;</span></span><br><span class="line">[[ <span class="variable">$a</span> == l?nu? ]] <span class="comment"># 0</span></span><br><span class="line">[[ <span class="variable">$a</span> != li* ]]   <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则匹配 `=~`</span></span><br><span class="line">a=<span class="string">&quot;linux&quot;</span></span><br><span class="line">[[ <span class="variable">$a</span> =~ ^li ]]</span><br><span class="line">[[ <span class="variable">$a</span> =~ ^li[abn]ux ]]</span><br></pre></td></tr></table></figure></li><li class="lvl-6"><code>(( ))</code> 用于条件判断时只能进行数值比较，运算符不需要转义，而且不支持<code>-lt</code>、<code>-gt</code>等等  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(( <span class="variable">$i</span> &lt;= 5 ))</span><br></pre></td></tr></table></figure></li></ul><div class="tips"><p><em><strong>小贴士</strong></em><br><code>(( ))</code>除了用于条件判断外，还有三种用法：<br>1.与<code>$</code>结合使用进行数学运算 : <code>$(( ))</code><br>2.在<code>for</code>循环命令中控制循环 : <code>for((i=1;i&lt;10;i++))</code><br>3.改变变量的值，且变量前不需要<code>$</code> : <code>((i++))</code></p></div></li><li class="lvl-2"><p>推荐在进行条件判断时使用<code>[[ ]]</code>，运算符不需要转义，而且支持正则</p></li></ul><h2 id="流程控制语句">流程控制语句</h2><h3 id="if语句"><code>if</code>语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法1</span></span><br><span class="line"><span class="comment"># 因为多个语句写在同一行，所以要用;隔开</span></span><br><span class="line"><span class="keyword">if</span> [[ -d <span class="variable">$path</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;dir&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 其实也可以这样写</span></span><br><span class="line"><span class="keyword">if</span> [[ -d <span class="variable">$path</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;dir&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法2</span></span><br><span class="line"><span class="keyword">if</span> [[ -d <span class="variable">$path</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;dir&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;not dir&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法3</span></span><br><span class="line"><span class="keyword">if</span> [[ -d <span class="variable">$path</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;dir&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [[ -f <span class="variable">$path</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;file&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;not match&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断参数个数是否正确，只允许输入一个参数</span></span><br><span class="line">paramSize=<span class="variable">$&#123;#@&#125;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$paramSize</span> == 0 || <span class="variable">$paramSize</span> &gt; 1  ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;ERROR:需要一个参数!!!&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断参数是否为大于0的数字</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -gt 0 ] 2&gt;/dev/null ;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> id number&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;ERROR: <span class="variable">$1</span> is not number!&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断参数是否为整数数字，包含正整数，0，负整数</span></span><br><span class="line"><span class="built_in">expr</span> <span class="variable">$1</span> <span class="string">&quot;+&quot;</span> 0 &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [[ $? == 0 || <span class="variable">$1</span> == 0 ]];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> is number&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span> not number&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果导出文件已经存在则先删除</span></span><br><span class="line"><span class="keyword">if</span> [[ -a <span class="variable">$bookId</span>.tar.gz ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">rm</span> -rf <span class="variable">$bookId</span>.tar.gz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串是否不为空</span></span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="variable">$str</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$str</span> is not null&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$str</span> is null&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="case语句"><code>case</code>语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start&quot;</span></span><br><span class="line">;;</span><br><span class="line">reload)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;reload&quot;</span></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;stop&quot;</span></span><br><span class="line">;;</span><br><span class="line">status)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;status&quot;</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span>: Usage: &#123;start|status|stop|reload&#125;&quot;</span></span><br><span class="line">    <span class="comment"># 非0，非正常退出，exit 0 :正常退出</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="select语句"><code>select</code>语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># select.sh</span></span><br><span class="line">select var <span class="keyword">in</span> <span class="string">&quot;Linux&quot;</span> <span class="string">&quot;UNIX&quot;</span> <span class="string">&quot;Windows&quot;</span> <span class="string">&quot;Other&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;You have selected <span class="variable">$var</span>&quot;</span></span><br><span class="line">    <span class="comment"># 跳出循环</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">$ sh select.sh</span><br><span class="line">1) Linux</span><br><span class="line">2) UNIX</span><br><span class="line">3) Windows</span><br><span class="line">4) Other</span><br><span class="line"><span class="comment">#? 2 # 输入2，表示选择第二个</span></span><br><span class="line">You have selected UNIX</span><br></pre></td></tr></table></figure><h3 id="while循环语句"><code>while</code>循环语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=0</span><br><span class="line"><span class="keyword">while</span> [[ <span class="variable">$a</span> &lt; 5 ]]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">    ((a++))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="until循环语句"><code>until</code>循环语句</h3><ul class="lvl-0"><li class="lvl-2"><p>类似<code>while</code>，不同点是条件判断为假时才执行</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=5</span><br><span class="line"><span class="comment"># 不满足条件时执行</span></span><br><span class="line">until [[ <span class="variable">$a</span> == 0 ]]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">    ((a--))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="for循环语句"><code>for</code>循环语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法1</span></span><br><span class="line"><span class="keyword">for</span>((i=0;i&lt;=10;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法2</span></span><br><span class="line"><span class="comment"># 使用&#123;&#125;和seq生成序列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..9&#125;   <span class="comment"># 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;this is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..9..2&#125;   <span class="comment"># 1 3 5 7 9</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;this is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 9` <span class="comment"># 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;this is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 2 9` <span class="comment"># 1 3 5 7 9</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;this is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接列出要遍历的项</span></span><br><span class="line"><span class="keyword">for</span> day <span class="keyword">in</span> Sun Mon Tue Wed Thu Fri Sat</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The day is : <span class="variable">$day</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将命令执行结果作为要遍历的内容</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> `<span class="built_in">cat</span> file`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有参数</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$p</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="其它语句">其它语句</h3><ul class="lvl-0"><li class="lvl-2"><p><code>break</code> : 退出本层循环，继续执行本层循环体后面的代码，注意是退出本层循环体，如果是嵌套循环，则退出break所在层的循环，并非所有的循环</p></li><li class="lvl-2"><p><code>continue</code> : 跳过本次循环，不再执行continue下面的代码，回到循环判断式判断是否继续执行循环</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>((i=0;i&lt;=10;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$i</span> == 0 ]];<span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 不执行后面的语句直接进行下次循环</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$i</span> == 8 ]];<span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 跳出循环体，不再进行循环</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>exit 0</code> : 正常退出</p></li><li class="lvl-2"><p><code>exit 1</code> : 非0，非正常退出</p></li><li class="lvl-2"><p><code>shift</code> : 每执行一次，参数序列顺序左移一个位置，<code>$#</code>的值减1，移出去的参数不再可用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shift.sh</span></span><br><span class="line"><span class="keyword">if</span> (( <span class="variable">$#</span> &lt;= 0 ));<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Not enough parameters&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">while</span> [[ <span class="variable">$#</span> &gt;= 0 ]]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((sum + <span class="variable">$1</span>))</span><br><span class="line">    <span class="built_in">shift</span> <span class="comment">#因为每次执行shift，所以上面的$1永远都是下一个参数</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">$ sh shift.sh 1 2 3 4 5 <span class="comment"># 输出 15</span></span><br></pre></td></tr></table></figure><h2 id="shell函数的定义与使用">shell函数的定义与使用</h2><ul class="lvl-0"><li class="lvl-2"><p>shell函数定义</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数定义标准写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">name</span></span>() &#123;</span><br><span class="line">    statements</span><br><span class="line">    [<span class="built_in">return</span> value]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> : Shell 中的关键字，专门用来定义函数</span><br><span class="line">name : 函数名</span><br><span class="line">statements : 函数要执行的代码，也就是一组语句；</span><br><span class="line"><span class="built_in">return</span> value : 函数的返回值，其中 <span class="built_in">return</span> 是 Shell 关键字，专门用在函数中返回一个值，这一部分可以写也可以不写。</span><br><span class="line">由&#123; &#125;包围的部分称为函数体，调用一个函数，实际上就是执行函数体中的代码。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数定义时也可以不写 function 关键字</span></span><br><span class="line"><span class="function"><span class="title">name</span></span>() &#123;</span><br><span class="line">    statements</span><br><span class="line">    [<span class="built_in">return</span> value]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 如果写了 function 关键字，也可以省略函数名后面的小括号</span></span><br><span class="line"><span class="keyword">function</span> name &#123;</span><br><span class="line">    statements</span><br><span class="line">    [<span class="built_in">return</span> value]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>shell函数的调用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果不传递参数，直接给出函数名字即可</span></span><br><span class="line">name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果传递参数，多个参数之间以空格分隔</span></span><br><span class="line">name param1 param2 param3</span><br></pre></td></tr></table></figure><blockquote><p>和其它编程语言不同的是，Shell 函数在定义时不能指明参数，但是在调用时却可以传递参数，在方法体内引用时通过$1,$2,……来使用传递过来的参数</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数定义，不需要接收参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 函数调用，在shell脚本中，可以将调用放在定义的前面</span></span><br><span class="line">start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数定义，需要接收参数，假设这里需要接收两个数字并求和</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">sum</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> $(( <span class="variable">$1</span> + <span class="variable">$2</span> ))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 函数调用</span></span><br><span class="line"><span class="built_in">sum</span> 1 2</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个参数求和</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getsum</span></span>()&#123;</span><br><span class="line">    <span class="comment"># 定义局部变量，变量前面要加上local关键字</span></span><br><span class="line">    <span class="built_in">local</span> <span class="built_in">sum</span>=0</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        ((<span class="built_in">sum</span>+=n))</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$sum</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 函数调用</span></span><br><span class="line">getsum 10 20 55 15  <span class="comment">#调用函数并传递参数</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>shell函数中定义变量，也是全局变量，在函数体外也可以被调用，要是希望在函数体内定义的变量仅能被函数体内调用，则需要在变量前加上<code>local</code>关键字</p></li></ul><h2 id="运行shell">运行shell</h2><ul class="lvl-0"><li class="lvl-2"><p><code>sh test.sh</code> : 运行shell脚本</p></li><li class="lvl-2"><p><code>sh -x test.sh</code> : 执行脚本，并显示全部过程</p></li><li class="lvl-2"><p><code>sh -n test.sh</code> : 不执行脚本，只检查语法错误</p></li><li class="lvl-2"><p>也可以为shell脚本授予执行权限，然后通过<code>.</code>关键字执行，比如<code>. ~/test.sh</code>，或者直接通过脚本路径运行<code>~/test.sh</code>(注意要设置文件头指定shell)</p></li></ul><div class="tips"><p><em><strong>小贴士</strong></em></p><ul class="lvl-1"><li class="lvl-2">如果在windows环境下编写的脚步，上传到linux后需要先执行<code>dos2unix</code>进行编码转换，否则不能正确执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dos2unix test.sh</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">如果<code>dos2unix</code>命令不存在，可以通过<code>yum</code>进行安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install dos2unix -y</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度 ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍shell编程的语法规则。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux常用命令" scheme="https://blog.hanqunfeng.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
