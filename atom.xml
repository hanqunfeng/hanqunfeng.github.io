<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飘逸峰的博客</title>
  
  <subtitle>Spring--Java程序员的春天</subtitle>
  <link href="https://blog.hanqunfeng.com/atom.xml" rel="self"/>
  
  <link href="https://blog.hanqunfeng.com/"/>
  <updated>2025-05-13T13:20:58.449Z</updated>
  <id>https://blog.hanqunfeng.com/</id>
  
  <author>
    <name>飘逸峰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM 之 命令行工具</title>
    <link href="https://blog.hanqunfeng.com/2025/05/13/jvm-tools-01/"/>
    <id>https://blog.hanqunfeng.com/2025/05/13/jvm-tools-01/</id>
    <published>2025-05-13T13:30:05.000Z</published>
    <updated>2025-05-13T13:20:58.449Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍JVM的命令行工具</p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html">The Java® Virtual Machine Specification</a> 版本jdk1.8</p></li></ul><span id="more"></span><h2 id="jps-查看当前jvm中的进程">jps: 查看当前jvm中的进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看java进程ID</span></span><br><span class="line">jps</span><br><span class="line"><span class="comment"># 查看java进程信息，包括ID和启动类或jar的名称</span></span><br><span class="line">jps -l</span><br><span class="line"><span class="comment"># 查看启动java进程时传递给jvm的参数设置</span></span><br><span class="line">jps -v</span><br><span class="line"><span class="comment"># 查看java进程信息，同时显示启动java进程时传递给jvm的参数设置</span></span><br><span class="line">jps -lv</span><br></pre></td></tr></table></figure><h2 id="jinfo-查看JVM参数">jinfo: 查看JVM参数</h2><ul class="lvl-0"><li class="lvl-2"><p>jinfo 是 JDK 自带的命令行工具之一，用于 查看和修改正在运行中的 Java 进程的配置信息，主要包括 JVM 参数、系统属性等信息。</p></li><li class="lvl-2"><p>在 Java 9+ 之后被标记为 deprecated，建议改用 jcmd 替代</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看正在运行的 JVM 参数</span></span><br><span class="line">jinfo &lt;PID&gt;</span><br><span class="line"><span class="comment"># jcmd 命令，分成三个</span></span><br><span class="line">jcmd &lt;pid&gt; VM.flags <span class="comment"># VM Flags</span></span><br><span class="line">jcmd &lt;pid&gt; VM.system_properties <span class="comment"># System Properties</span></span><br><span class="line">jcmd &lt;pid&gt; VM.command_line <span class="comment"># Command Line</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定进程的系统属性（-sysprops）</span></span><br><span class="line">jinfo -sysprops &lt;PID&gt;</span><br><span class="line"><span class="comment"># jcmd 命令</span></span><br><span class="line">jcmd &lt;pid&gt; VM.system_properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态修改 JVM 参数（仅支持部分参数）</span></span><br><span class="line">jinfo -flag [+|-]&lt;flagname&gt; &lt;pid&gt;</span><br><span class="line"><span class="comment">## 例：打开 GC 日志</span></span><br><span class="line">jinfo -flag +PrintGC &lt;pid&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否开启了某个 JVM 特性（如 UseG1GC）</span></span><br><span class="line">jinfo -flag UseG1GC &lt;pid&gt;</span><br></pre></td></tr></table></figure><h2 id="jstat-查看指定JAVA进程的运行状态">jstat: 查看指定JAVA进程的运行状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看运行状态</span></span><br><span class="line">jstat -gc &lt;PID&gt;</span><br><span class="line"><span class="comment"># 查看运行状态，每隔5000毫秒输出一次，共输出20次</span></span><br><span class="line">jstat -gc &lt;PID&gt; 5000 20</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">512.0  512.0   0.0   224.0  29696.0  27138.2   105984.0   96531.8   122368.0 114450.4 15360.0 14018.9    733    5.099   4      0.833    5.931</span><br><span class="line">512.0  512.0   0.0   224.0  29696.0  27203.9   105984.0   96531.8   122368.0 114450.4 15360.0 14018.9    733    5.099   4      0.833    5.931</span><br><span class="line">512.0  512.0   0.0   224.0  29696.0  27220.4   105984.0   96531.8   122368.0 114450.4 15360.0 14018.9    733    5.099   4      0.833    5.931</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>内存区统计（单位：KB）</p></li></ul><table><thead><tr><th>列名</th><th>含义说明</th></tr></thead><tbody><tr><td><strong>S0C</strong></td><td>Survivor 0 区的容量（KB）</td></tr><tr><td><strong>S1C</strong></td><td>Survivor 1 区的容量（KB）</td></tr><tr><td><strong>S0U</strong></td><td>Survivor 0 区已使用内存（KB）</td></tr><tr><td><strong>S1U</strong></td><td>Survivor 1 区已使用内存（KB）</td></tr><tr><td><strong>EC</strong></td><td>Eden 区的容量（KB）</td></tr><tr><td><strong>EU</strong></td><td>Eden 区已使用内存（KB）</td></tr><tr><td><strong>OC</strong></td><td>Old Generation（老年代）的容量（KB）</td></tr><tr><td><strong>OU</strong></td><td>Old Generation 已使用内存（KB）</td></tr><tr><td><strong>MC</strong></td><td>Metaspace（元空间）的容量（KB）</td></tr><tr><td><strong>MU</strong></td><td>Metaspace 已使用内存（KB）</td></tr><tr><td><strong>CCSC</strong></td><td>Compressed Class Space 的容量（KB）</td></tr><tr><td><strong>CCSU</strong></td><td>Compressed Class Space 已使用内存（KB）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>GC 次数与耗时(从应用程序启动到采样时)</p></li></ul><table><thead><tr><th>列名</th><th>含义说明</th></tr></thead><tbody><tr><td><strong>YGC</strong></td><td>Young GC（Minor GC） 的累计次数</td></tr><tr><td><strong>YGCT</strong></td><td>Young GC 累计耗时（单位：秒）</td></tr><tr><td><strong>FGC</strong></td><td>Full GC 的累计次数</td></tr><tr><td><strong>FGCT</strong></td><td>Full GC 累计耗时（单位：秒）</td></tr><tr><td><strong>GCT</strong></td><td>GC 总耗时（YGCT + FGCT，总和）</td></tr></tbody></table><h2 id="jstack-查看指定JAVA进程中各线程的调用堆栈">jstack: 查看指定JAVA进程中各线程的调用堆栈</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印线程的标准栈信息（栈帧 + 线程状态）</span></span><br><span class="line">jstack &lt;PID&gt;</span><br><span class="line"><span class="comment"># 在标准输出基础上，额外打印线程拥有的锁（monitor）和 waited on 锁对象信息</span></span><br><span class="line">jstack -l &lt;PID&gt;</span><br><span class="line"><span class="comment"># 输出到文件</span></span><br><span class="line">jstack -l &lt;PID&gt; &gt; jstack.tdump <span class="comment"># 这个文件名后缀只是为了方便 jvisualvm 查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="string">&quot;idle-connection-reaper&quot;</span> <span class="comment">#68 daemon prio=5 os_prio=0 tid=0x00007f38b6ae2800 nid=0x62e9 waiting on condition [0x00007f385b0f5000]</span></span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">at java.lang.Thread.<span class="built_in">sleep</span>(Native Method)</span><br><span class="line">at software.amazon.awssdk.http.apache.internal.conn.IdleConnectionReaper<span class="variable">$ReaperTask</span>.run(IdleConnectionReaper.java:151)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:624)</span><br><span class="line">at java.lang.Thread.run(Thread.java:750)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">- &lt;0x00000000c561cfd8&gt; (a java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>jstack输出内容含义</p></li></ul><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td><code>&quot;idle-connection-reaper&quot;</code></td><td>线程名称。这个线程是 AWS SDK 中用于清理空闲连接的后台线程。</td></tr><tr><td><code>#68</code></td><td>线程 ID（Java 层分配的编号）。</td></tr><tr><td><code>daemon</code></td><td>表示这是一个 <strong>守护线程</strong>。JVM 退出时不会等待守护线程运行结束。</td></tr><tr><td><code>prio=5</code></td><td>Java 层的线程优先级（默认 1–10，5 是默认）。</td></tr><tr><td><code>os_prio=0</code></td><td>操作系统层线程优先级（取决于操作系统和 JVM 的实现）。</td></tr><tr><td><code>tid=0x00007f38b6ae2800</code></td><td>线程 ID（Java 层使用的地址标识）。</td></tr><tr><td><code>nid=0x62e9</code></td><td>Native ID，操作系统分配的线程 ID（十六进制表示），可以通过命令<code>printf &quot;%d\n&quot; 0x62e9</code>转换为10进制。<br>  <code>ps -Lp &lt;PID&gt;</code> 和 <code>top -Hp &lt;PID&gt;</code> 展示的线程id是10进制</td></tr><tr><td><code>waiting on condition</code></td><td>线程状态说明：正在等待某种条件，一般指 <code>sleep()</code> 或 <code>wait()</code> 等。</td></tr><tr><td><code>[0x00007f385b0f5000]</code></td><td>栈帧的内存地址。</td></tr><tr><td><code>java.lang.Thread.State: TIMED_WAITING (sleeping)</code></td><td>线程状态。</td></tr><tr><td><code>at java.lang.Thread.sleep(Native Method)</code> <br> …………………………</td><td>线程调用栈信息，包括调用方法、调用参数、调用栈帧。</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>另外还有如下信息，表示此线程持有的可拥有同步器（例如 ReentrantLock），具体内容如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Locked ownable synchronizers:</span><br><span class="line">- &lt;0x00000000c561cfd8&gt; (a java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>内容</th><th>含义</th></tr></thead><tbody><tr><td><code>&lt;0x00000000c561cfd8&gt;</code></td><td>持有锁的对象地址。可以在其他线程中查找这个地址，以判断死锁等问题。</td></tr><tr><td><code>(a ThreadPoolExecutor$Worker)</code></td><td>表示该锁属于 <code>ThreadPoolExecutor</code> 的某个 <code>Worker</code> 线程（这是线程池的工作线程）。</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>线程状态</p></li></ul><table><thead><tr><th>状态</th><th>含义</th><th>常见原因 / 示例方法</th><th>示例 jstack 输出</th></tr></thead><tbody><tr><td><code>RUNNABLE</code></td><td>线程正在运行或准备运行，等待 CPU 时间片。</td><td>线程活跃运行中</td><td><code>&quot;Thread-0&quot; #1 prio=5 os_prio=0 tid=0x00007f8d9c001000 nid=0x1a runnable [0x00007f8dbf7fe000]</code></td></tr><tr><td><code>BLOCKED (on object monitor)</code></td><td>等待获取对象的监视器锁（同步锁），即等待进入同步块或方法。</td><td><code>synchronized</code> 同步块或方法</td><td><code>&quot;Thread-1&quot; #2 prio=5 os_prio=0 tid=0x00007f8d9c002000 nid=0x1b waiting for monitor entry [0x00007f8dbeaff000]</code></td></tr><tr><td><code>WAITING (on object monitor)</code></td><td>无限期等待其他线程执行某操作。</td><td><code>Object.wait()</code><br><code>Thread.join()</code><br><code>LockSupport.park()</code><br><code>Condition.await()</code></td><td><code>&quot;Thread-2&quot; #3 prio=5 os_prio=0 tid=0x00007f8d9c003000 nid=0x1c waiting on condition [0x00007f8dbebff000]</code></td></tr><tr><td><code>TIMED_WAITING (on object monitor)</code></td><td>等待固定时间，直到条件满足或超时。</td><td><code>Object.wait(long)</code><br><code>Thread.sleep(long)</code><br><code>Condition.awaitNanos(long)</code><br><code>DelayQueue.take()</code></td><td><code>&quot;Thread-3&quot; #4 prio=5 os_prio=0 tid=0x00007f8d9c004000 nid=0x1d timed_waiting [0x00007f8dbebff000]</code></td></tr><tr><td><code>TERMINATED</code></td><td>线程已运行完毕并退出（通常不在 jstack 中显示）。</td><td>-</td><td>-</td></tr></tbody></table><h3 id="使用jstack检查死锁">使用jstack检查死锁</h3><ul class="lvl-0"><li class="lvl-2"><p>死锁是指多个线程互相等待对方释放锁，导致无法继续运行的情况。</p></li></ul><h4 id="直接查找-Found-one-Java-level-deadlock-提示">直接查找 <code>Found one Java-level deadlock</code> 提示</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line">  waiting to lock monitor 0x0000000005c0a098 (object 0x00000000d5c10a70, a java.lang.Object),</span><br><span class="line">  <span class="built_in">which</span> is held by <span class="string">&quot;Thread-2&quot;</span></span><br><span class="line"><span class="string">&quot;Thread-2&quot;</span>:</span><br><span class="line">  waiting to lock monitor 0x0000000005c0a128 (object 0x00000000d5c10aa0, a java.lang.Object),</span><br><span class="line">  <span class="built_in">which</span> is held by <span class="string">&quot;Thread-1&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>表示两个线程互相等待对方释放锁，造成死锁。</p></li><li class="lvl-2"><p>目前只支持找出 <code>synchronized</code> 关键字阻塞住的线程，如果是 <code>java.util.concurrent.Lock</code> 目前还不支持。</p></li></ul><h4 id="手动判断死锁的特征（如果没有上面的提示）">手动判断死锁的特征（如果没有上面的提示）</h4><ul class="lvl-0"><li class="lvl-2"><p>如果 JVM 没有显式提示，你可以通过以下死锁特征进行手动识别：</p></li></ul><table><thead><tr><th>特征</th><th>描述</th></tr></thead><tbody><tr><td>线程处于 <code>BLOCKED</code> 状态</td><td>线程被锁阻塞在 <code>monitor</code> 上。</td></tr><tr><td><code>waiting to lock</code> 和 <code>locked</code> 出现交叉</td><td>一个线程正在等待另一个线程持有的锁，而另一个线程也在等待当前线程的锁。</td></tr><tr><td>没有能继续执行的线程</td><td>多个线程都处于 <code>BLOCKED</code> 状态，且相互依赖。</td></tr></tbody></table><h2 id="jmap-分析运行中-Java-进程的内存使用情况">jmap: 分析运行中 Java 进程的内存使用情况</h2><ul class="lvl-0"><li class="lvl-2"><p>jmap 比较消耗内存，所以不推荐生产环境使用。</p></li></ul><h3 id="jmap-histo-pid-查看类实例数量及占用内存"><code>jmap -histo &lt;pid&gt;</code>: 查看类实例数量及占用内存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ jmap -histo 25238</span><br><span class="line">25238:</span><br><span class="line"></span><br><span class="line"> num     <span class="comment">#instances         #bytes  class name</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:        106175       10838440  [C</span><br><span class="line">   2:         94344        3019008  java.util.concurrent.ConcurrentHashMap<span class="variable">$Node</span></span><br><span class="line">   3:        105529        2532696  java.lang.String</span><br><span class="line">   4:         11203        2496608  [B</span><br><span class="line">   5:         20178        2430136  [Ljava.lang.Object;</span><br><span class="line">   6:         21642        2399904  java.lang.Class</span><br><span class="line">…………………………</span><br><span class="line">Total        857252       51328200</span><br><span class="line"></span><br><span class="line"><span class="comment"># num: 序号</span></span><br><span class="line"><span class="comment"># instances: 实例数量</span></span><br><span class="line"><span class="comment"># bytes: 实例字节数</span></span><br><span class="line"><span class="comment"># class name: 类名, [C is a char[]，[S is a short[]，[I is a int[]，[B is a byte[]，[L is a List</span></span><br><span class="line"><span class="comment"># Total: 总数</span></span><br></pre></td></tr></table></figure><h3 id="jmap-heap-pid-查看堆使用情况"><code>jmap -heap &lt;pid&gt;</code>: 查看堆使用情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$ jmap -heap 25238</span><br><span class="line">Attaching to process ID 25238, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.371-b11</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC with 2 thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:    <span class="comment"># 堆配置</span></span><br><span class="line">   MinHeapFreeRatio         = 0                     <span class="comment"># 最小空闲百分比</span></span><br><span class="line">   MaxHeapFreeRatio         = 100                     <span class="comment"># 最大空闲百分比</span></span><br><span class="line">   MaxHeapSize              = 1010827264 (964.0MB)    <span class="comment"># 最大堆大小</span></span><br><span class="line">   NewSize                  = 21495808 (20.5MB)       <span class="comment"># 新生代大小</span></span><br><span class="line">   MaxNewSize               = 336592896 (321.0MB)     <span class="comment"># 新生代最大大小</span></span><br><span class="line">   OldSize                  = 43515904 (41.5MB)       <span class="comment"># 老年代大小</span></span><br><span class="line">   NewRatio                 = 2                       <span class="comment"># 新生代与老年代比例</span></span><br><span class="line">   SurvivorRatio            = 8                       <span class="comment"># 幸存者比例</span></span><br><span class="line">   MetaspaceSize            = 21807104 (20.796875MB)   <span class="comment"># 元空间大小</span></span><br><span class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)   <span class="comment"># 压缩类空间大小，用于存储所有 类指针（Klass pointer）</span></span><br><span class="line">   MaxMetaspaceSize         = 17592186044415 MB       <span class="comment"># 元空间最大大小</span></span><br><span class="line">   G1HeapRegionSize         = 0 (0.0MB)               <span class="comment"># G1堆大小</span></span><br><span class="line"></span><br><span class="line">Heap Usage:       <span class="comment"># 堆使用情况</span></span><br><span class="line">PS Young Generation <span class="comment"># 年轻生代</span></span><br><span class="line">Eden Space:         <span class="comment"># Eden 区</span></span><br><span class="line">   capacity = 30932992 (29.5MB)    <span class="comment">#  Eden 区大小</span></span><br><span class="line">   used     = 16705104 (15.931228637695312MB) <span class="comment">#  Eden 区使用情况</span></span><br><span class="line">   free     = 14227888 (13.568771362304688MB) <span class="comment">#  Eden 区剩余情况</span></span><br><span class="line">   54.00416487354343% used                    <span class="comment">#  Eden 区使用百分比</span></span><br><span class="line">From Space:                      <span class="comment"># 幸存者区 survivor0</span></span><br><span class="line">   capacity = 524288 (0.5MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 524288 (0.5MB)</span><br><span class="line">   0.0% used</span><br><span class="line">To Space:                       <span class="comment"># 幸存者区 survivor1</span></span><br><span class="line">   capacity = 524288 (0.5MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 524288 (0.5MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Old Generation                <span class="comment"># 老年代</span></span><br><span class="line">   capacity = 193462272 (184.5MB)</span><br><span class="line">   used     = 43292112 (41.28657531738281MB)</span><br><span class="line">   free     = 150170160 (143.2134246826172MB)</span><br><span class="line">   22.377547597497458% used</span><br><span class="line"></span><br><span class="line">38722 interned Strings occupying 4184168 bytes. <span class="comment"># 堆中字符串数量及占用内存</span></span><br></pre></td></tr></table></figure><h3 id="jmap-dump-live-format-b-file-file-pid-创建一个快照，并保存到文件中"><code>jmap -dump:live,format=b,file=&lt;file&gt; &lt;pid&gt;</code>: 创建一个快照，并保存到文件中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个快照，并保存到当前目录下</span></span><br><span class="line">$ jmap -dump:live,format=b,file=test.hprof 25238</span><br><span class="line">Dumping heap to /tmp/test.hprof ...</span><br><span class="line">Heap dump file created</span><br></pre></td></tr></table></figure><h2 id="jcmd-可以替代jmap命令，jdk1-8-推荐使用">jcmd: 可以替代<code>jmap</code>命令，<code>jdk1.8+</code>推荐使用</h2><ul class="lvl-0"><li class="lvl-2"><p><code>jcmd</code> 是 <code>JDK</code> 的一个命令行工具，用于管理 <code>JVM</code>，<code>jcmd</code> 可以查看 <code>JVM</code> 的运行状态、查看堆内存信息、触发 GC、查看线程信息、查看类信息等等。</p></li><li class="lvl-2"><p>生产环境不建议使用<code>jmap</code>，因其会占用大量内存，推荐使用 <code>jcmd</code>。</p></li></ul><h3 id="jcmd-pid-GC-heap-info-查看堆使用情况"><code>jcmd &lt;pid&gt; GC.heap_info</code>: 查看堆使用情况</h3><ul class="lvl-0"><li class="lvl-2"><p>类似 <code>jmap -heap &lt;pid&gt;</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ jcmd 25238 GC.heap_info</span><br><span class="line">25238:</span><br><span class="line"> PSYoungGen      total 30208K, used 23593K [0x00000000ebf00000, 0x00000000edd80000, 0x0000000100000000)</span><br><span class="line">  eden space 29696K, 78% used [0x00000000ebf00000,0x00000000ed5d2560,0x00000000edc00000)</span><br><span class="line">  from space 512K, 43% used [0x00000000edd00000,0x00000000edd38000,0x00000000edd80000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000edc80000,0x00000000edc80000,0x00000000edd00000)</span><br><span class="line"> ParOldGen       total 105984K, used 96547K [0x00000000c3c00000, 0x00000000ca380000, 0x00000000ebf00000)</span><br><span class="line">  object space 105984K, 91% used [0x00000000c3c00000,0x00000000c9a48f10,0x00000000ca380000)</span><br><span class="line"> Metaspace       used 114450K, capacity 122262K, committed 122368K, reserved 1157120K</span><br><span class="line">  class space    used 14018K, capacity 15294K, committed 15360K, reserved 1048576K</span><br></pre></td></tr></table></figure><h3 id="jcmd-pid-GC-class-histogram-查看类加载情况"><code>jcmd &lt;pid&gt; GC.class_histogram</code>: 查看类加载情况</h3><ul class="lvl-0"><li class="lvl-2"><p>类似 <code>jmap -histo &lt;pid&gt;</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ jcmd 25238 GC.class_histogram</span><br><span class="line">25238:</span><br><span class="line"></span><br><span class="line"> num     <span class="comment">#instances         #bytes  class name</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:        106175       10838440  [C</span><br><span class="line">   2:         94344        3019008  java.util.concurrent.ConcurrentHashMap<span class="variable">$Node</span></span><br><span class="line">   3:        105529        2532696  java.lang.String</span><br><span class="line">   4:         11203        2496608  [B</span><br><span class="line">   5:         20178        2430136  [Ljava.lang.Object;</span><br><span class="line">   6:         21642        2399904  java.lang.Class</span><br><span class="line">…………………………</span><br><span class="line">Total        857252       51328200</span><br><span class="line"></span><br><span class="line"><span class="comment"># num: 序号</span></span><br><span class="line"><span class="comment"># instances: 实例数量</span></span><br><span class="line"><span class="comment"># bytes: 实例字节数</span></span><br><span class="line"><span class="comment"># class name: 类名, [C is a char[]，[S is a short[]，[I is a int[]，[B is a byte[]，[L is a List</span></span><br><span class="line"><span class="comment"># Total: 总数</span></span><br></pre></td></tr></table></figure><h3 id="jcmd-pid-GC-heap-dump-path-to-heap-hprof-导出-heap-dump"><code>jcmd &lt;pid&gt; GC.heap_dump /path/to/heap.hprof</code>: 导出 heap dump</h3><ul class="lvl-0"><li class="lvl-2"><p>替代 <code>jmap -dump:format=b,file=heap.hprof &lt;pid&gt;</code>，但仍会有停顿（触发FullGC），dump 过程慢，生产环境慎重使用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ jcmd 25238 GC.heap_dump ./heap.hprof</span><br><span class="line">25238:</span><br><span class="line">Heap dump file created</span><br><span class="line"><span class="comment"># 注意这里使用的是相对目录，./heap.hprof，但此时 &quot;./&quot; 并不是运行命令时所在的目录，而是指 Java 进程的工作目录，如果你不知道工作目录，可以通过如下命令查看</span></span><br><span class="line">jcmd &lt;pid&gt; VM.system_properties | grep <span class="string">&quot;user.dir&quot;</span></span><br><span class="line"><span class="comment"># linux下也可以通过如下命令查看</span></span><br><span class="line"><span class="built_in">ls</span> -l /proc/&lt;pid&gt;/cwd</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>因为生产环境不推荐使用 <code>jmap</code> 或 <code>jcmd</code> 导出 heap dump，所以我们需要在生产环境中配置如下jvm参数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeadDumpOnOutOfMemoryError <span class="comment"># 内存溢出（OOM）时会自动保存堆内存快照文件</span></span><br><span class="line">-XX:HeapDumpPath=/path/to/dump.hprof <span class="comment"># 指定堆内存快照文件保存路径，如果不配置，则默认保存在 Java 进程的工作目录下，文件名称默认为 java_&lt;pid&gt;.hprof</span></span><br></pre></td></tr></table></figure><h2 id="jhat-分析-Java-Heap-Dump-文件（-hprof）的工具">jhat: 分析 Java Heap Dump 文件（.hprof）的工具</h2><ul class="lvl-0"><li class="lvl-2"><p>jhat（Java Heap Analysis Tool）是 JDK 附带的一个用于**分析 Java Heap Dump 文件（.hprof）**的工具。它可以将堆快照作为 HTTP 服务加载，并允许你通过浏览器交互式地查看和查询对象信息。</p></li><li class="lvl-2"><p>不过需要注意的是：<br>🔺 从 JDK 9 起，jhat 已被官方废弃，推荐使用更强大的工具如 <code>VisualVM</code>、<code>Eclipse MAT</code> 或 <code>jcmd + 外部工具</code>。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认端口7000</span></span><br><span class="line">jhat &lt;heap dump file&gt;</span><br><span class="line"><span class="comment"># 指定端口</span></span><br><span class="line">jhat -port 8000 &lt;heap dump file&gt;</span><br></pre></td></tr></table></figure><h2 id="jvisualvm-图形化的-JVM-监控与分析工具">jvisualvm: 图形化的 JVM 监控与分析工具</h2><ul class="lvl-0"><li class="lvl-2"><p>jvisualvm（全称：Java VisualVM）是 Java 官方提供的一款 图形化的 JVM 监控与分析工具，用于观察、分析和调试正在运行的 Java 程序。它非常适合开发和测试环境中进行内存分析、线程分析、GC 行为观察等任务。</p></li><li class="lvl-2"><p>功能概览</p></li></ul><table><thead><tr><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><strong>进程监控</strong></td><td>查看本地或远程 JVM 进程的内存、CPU、线程等运行状态</td></tr><tr><td><strong>内存使用分析</strong></td><td>查看堆内存使用情况、GC 次数和时间、类实例分布等</td></tr><tr><td><strong>线程分析</strong></td><td>查看线程状态、线程栈、是否存在死锁</td></tr><tr><td><strong>GC 分析</strong></td><td>图形化展示 GC 活动、频率与耗时</td></tr><tr><td><strong>堆转储分析</strong></td><td>导入 <code>.hprof</code> 文件进行对象实例、类、引用关系分析</td></tr><tr><td><strong>CPU 分析</strong></td><td>分析方法调用路径、耗时、热点代码（需手动启用 CPU profiler）</td></tr><tr><td><strong>插件支持</strong></td><td>可以通过插件安装更多功能（如 Visual GC）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>启动 jvisualvm</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不要在生产环境使用，如果是分析服务端 .hprof 文件，可以导出到本地后在本地启动</span></span><br><span class="line">$ jvisualvm</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>⚠️ 注意事项</p></li></ul><table><thead><tr><th>注意点</th><th>说明</th></tr></thead><tbody><tr><td>不适用于大规模生产环境监控</td><td>因为其分析过程可能会对 JVM 有轻微影响</td></tr><tr><td><code>.hprof</code> 文件过大时加载缓慢</td><td>可配合 Eclipse MAT 使用</td></tr><tr><td>CPU/Memory Profiler 会增加系统负担</td><td>使用时谨慎，建议只在测试环境启用</td></tr></tbody></table><h2 id="Eclipse-MAT-Java-Heap-Dump-分析工具">Eclipse MAT: Java Heap Dump 分析工具</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://eclipse.dev/mat">Eclipse MAT</a>（Eclipse Memory Analyzer Tool）是一个用于分析 Java 堆快照的工具，它提供了许多功能来帮助开发人员理解 Java 应用程序中的内存问题。</p></li></ul><div class="tips"><p><em><strong>MaxOS系统安装Eclipse MAT后，启动报错，报错信息为：The JVM shared library “/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/bin/…/lib/server/libjvm.dylib” does not contain the JNI_CreateJavaVM symbol.</strong></em></p><ul class="lvl-1"><li class="lvl-2">解决方法：<br>1.在应用列表，找到<code>MemoryAnalyzer.app</code>，然后右键单击后，选择<code>显示包内容</code>,进入Contents目录，找到<code>Info.plist</code>文件<br>2.打开<code>Info.plist</code>文件后，可以看到注释<code>&lt;string&gt;-vm&lt;/string&gt;</code>配置项，我们需要做的就是打开这个配置项，并且将其设置为我们系统的Java路径，最新版需要<code>jdk17+</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>-vm<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/hanqf/develop_soft/jdk17/bin/java<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="Arthas-推荐">Arthas : 推荐</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://arthas.aliyun.com">Arthas</a> 是阿里巴巴开源的一款 Java 诊断工具，专为线上诊断而设计。它可以帮助开发者在不重启、不修改代码的情况下，排查生产环境中 Java 应用的问题。文档非常详细，这里不再赘述。</p></li></ul><h3 id="Arthas-核心特点">Arthas 核心特点</h3><ul class="lvl-0"><li class="lvl-2"><p>无需重启、侵入性低<br>Arthas 可以 attach 到正在运行的 JVM 上，不需要重启服务或修改源代码。</p></li><li class="lvl-2"><p>命令式交互体验<br>类似 Linux shell 的操作方式，支持 tab 补全、上下键历史命令等，非常直观。</p></li><li class="lvl-2"><p>实时查看和监控<br>可查看方法参数、返回值、调用栈、执行耗时、JVM 线程、内存等实时数据。</p></li><li class="lvl-2"><p>多种连接方式<br>支持命令行终端、本地 shell、Web 页面、telnet 等多种连接方式。</p></li><li class="lvl-2"><p>支持多种 JVM 版本<br>支持 Java 6+，包括 OpenJDK、Oracle JDK、Alibaba Dragonwell 等。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍JVM的命令行工具&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se8/html/index.html&quot;&gt;The Java® Virtual Machine Specification&lt;/a&gt; 版本jdk1.8&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="jvm" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/jvm/"/>
    
    
    <category term="jvm" scheme="https://blog.hanqunfeng.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM 之 内存模型与垃圾回收机制(GC)</title>
    <link href="https://blog.hanqunfeng.com/2025/05/12/jvm-gc-01/"/>
    <id>https://blog.hanqunfeng.com/2025/05/12/jvm-gc-01/</id>
    <published>2025-05-12T14:30:05.000Z</published>
    <updated>2025-05-13T03:35:52.361Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍JVM的内存模型与垃圾回收机制</p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html">The Java® Virtual Machine Specification</a> 版本jdk1.8</p></li></ul><span id="more"></span><h2 id="JVM-的参数-三类">JVM 的参数(三类)</h2><ul class="lvl-0"><li class="lvl-2"><p>标准参数: 以<code>-</code>开头，所有 HotSpot 都⽀持。例如<code>java -version</code>。这类参数可以使⽤<code>java -help</code> 或者<code>java -?</code>全部打印出来</p></li><li class="lvl-2"><p>⾮标准参数: 以<code>-X</code>开头，是特定 HotSpot版本⽀持的指令。例如<code>java -Xms200M -Xmx200M</code>。这类指令可以⽤<code>java -X</code> 全部打印出来。</p></li><li class="lvl-2"><p>不稳定参数: 这也是 JVM调优的噩梦。以<code>-XX</code> 开头，这些参数是跟特定HotSpot版本对应的，很有可能换个版本就没有了。详细的⽂档资料也特别少。JDK8 中的以下⼏个指令可以帮助开发者了解 JDK8 中的这⼀类不稳定参数。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintFlagsFinal -version      <span class="comment"># 所有参数最终⽣效的值。</span></span><br><span class="line">java -XX:+PrintFlagsInitial -version   <span class="comment"># 所有参数的默认值</span></span><br><span class="line">java -XX:+PrintCommandLineFlags -version <span class="comment"># 当前命令生效的值，可以看到是⽤的哪种GC。 JDK1.8默认⽤的ParallelGC</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>运行 <code>java -XX:+PrintFlagsFinal -version</code> 最后一列的标记说明</p></li></ul><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td><code>&#123;product&#125;</code></td><td>正式产品参数（用户可用，可通过 <code>-XX:</code> 进行设置）</td></tr><tr><td><code>&#123;pd product&#125;</code></td><td>平台相关的正式参数（platform-dependent），在某些操作系统/CPU 上可用</td></tr><tr><td><code>&#123;C2 product&#125;</code></td><td>仅在使用 <strong>C2 编译器（优化编译器）</strong> 时有效的参数</td></tr><tr><td><code>&#123;diagnostic&#125;</code></td><td>诊断参数，默认不能直接使用，需加 <code>-XX:+UnlockDiagnosticVMOptions</code> 启用</td></tr><tr><td><code>&#123;experimental&#125;</code></td><td>实验性参数，需加 <code>-XX:+UnlockExperimentalVMOptions</code> 才能使用</td></tr><tr><td><code>&#123;manageable&#125;</code></td><td>可通过 JMX 动态管理的参数（运行时可调整）</td></tr><tr><td><code>&#123;notproduct&#125;</code></td><td>非产品参数，仅用于 JVM 开发和测试（普通用户无法使用）</td></tr><tr><td><code>&#123;ARCH product&#125;</code></td><td>与 CPU 架构相关的产品参数（如 x86、ARM 等）</td></tr><tr><td><code>&#123;JVMCI&#125;</code></td><td>与 JVM Compiler Interface 相关的参数</td></tr><tr><td><code>&#123;lp64_product&#125;</code></td><td>仅在 64 位 JVM 上才有效的产品参数</td></tr><tr><td><code>&#123;develop&#125;</code></td><td>开发用参数，仅用于 HotSpot 内部开发（构建时启用）</td></tr><tr><td><code>&#123;commercial&#125;</code></td><td>商业特性参数，仅在 Oracle JDK 的商业版中可用（已废弃）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>我们只需要关注 <code>&#123;product&#125;</code> 参数，常用 product 参数（可直接使用）</p></li></ul><table><thead><tr><th>参数</th><th>说明</th><th>示例值</th></tr></thead><tbody><tr><td><code>-Xms</code> / <code>-Xmx</code></td><td>初始/最大堆大小</td><td><code>-Xms2g -Xmx2g</code></td></tr><tr><td><code>-Xmn</code></td><td>新生代大小</td><td><code>-Xmn512m</code></td></tr><tr><td><code>-Xss</code></td><td>每个线程的栈大小</td><td><code>-Xss512k</code></td></tr><tr><td><code>-XX:SurvivorRatio</code></td><td>Eden:S0:S1 比例</td><td><code>-XX:SurvivorRatio=8</code></td></tr><tr><td><code>-XX:MaxTenuringThreshold</code></td><td>最大晋升年龄阈值</td><td><code>-XX:MaxTenuringThreshold=15</code></td></tr><tr><td><code>-XX:+UseG1GC</code> / <code>-XX:+UseParallelGC</code> 等</td><td>选择 GC 类型</td><td><code>-XX:+UseG1GC</code></td></tr><tr><td><code>-XX:MaxGCPauseMillis</code></td><td>最大 GC 暂停目标/最大允许暂停时间(毫秒)<br>这是一个“目标值”，不是硬限制，JVM 会尽量满足，但可能达不到</td><td><code>-XX:MaxGCPauseMillis=200</code></td></tr><tr><td><code>-XX:GCTimeRatio</code></td><td>控制 GC 时间与应用运行时间的比率，用于优化吞吐量</td><td><code>-XX:GCTimeRatio=9</code> 表示 GC 时间占总运行时间的上限是 1 / (1 + 9) = 10%，即吞吐量为 90% <br> <code>-XX:GCTimeRatio=99</code> GC 占 1%，应用运行占 99%，最大化吞吐</td></tr><tr><td><code>-XX:MetaspaceSize</code> / <code>-XX:MaxMetaspaceSize</code></td><td>设置元空间大小</td><td><code>-XX:MetaspaceSize=128m</code></td></tr><tr><td><code>-XX:+AlwaysPreTouch</code></td><td>启动时预分配所有内存页，避免运行期延迟</td><td><code>-XX:+AlwaysPreTouch</code></td></tr><tr><td><code>-XX:+PrintGCDetails</code></td><td>打印 GC 详情</td><td>-</td></tr><tr><td><code>-XX:+PrintGCDateStamps</code></td><td>打印带时间戳的 GC 日志</td><td>-</td></tr></tbody></table><h2 id="JVM虚拟机结构-HotSpot">JVM虚拟机结构(HotSpot)</h2><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/cGMyEe.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>设置内存分配示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jdk1.8+</span></span><br><span class="line">java ‐Xms2048M ‐Xmx2048M ‐Xmn1024M ‐Xss512K ‐XX:MetaspaceSize=256M ‐XX:MaxMetaspaceSize=256M ‐jar server.jar</span><br><span class="line"><span class="comment"># jdk1.6/1.7</span></span><br><span class="line">java ‐Xms2048M ‐Xmx2048M ‐Xmn1024M ‐Xss512K ‐XX:PermSize=256M ‐XX:MaxPermSize=256M ‐jar server.jar</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>各参数含义与默认值（针对 JDK 1.8）</p></li></ul><table><thead><tr><th>参数</th><th>含义说明</th><th>默认值（JDK 1.8）</th></tr></thead><tbody><tr><td><code>-Xms2048M</code></td><td><strong>初始堆大小</strong>，即 JVM 启动时分配的堆内存大小（这里是 2GB）</td><td>物理内存的 1/64（最小 1MB），推荐配置为与 -Xmx 一致</td></tr><tr><td><code>-Xmx2048M</code></td><td><strong>最大堆内存大小</strong>，JVM 允许分配的最大堆内存</td><td>物理内存的 1/4（受限于 32位/64位）</td></tr><tr><td><code>-Xmn1024M</code></td><td><strong>新生代大小</strong>（Eden + Survivor）为 1GB</td><td>未显式指定时，通常占堆的 1/3 左右</td></tr><tr><td><code>-Xss512K</code></td><td><strong>每个线程的栈大小</strong>（Thread Stack Size），这里设置为 512KB</td><td>1MB（64位系统）或 512KB（32位系统）</td></tr><tr><td><code>-XX:MetaspaceSize=256M</code></td><td><strong>元空间初始大小</strong>（用于加载类的元数据，不再使用 PermGen）</td><td>21MB（客户端）或 16MB（服务器端）,推荐配置为与  MaxMetaspaceSize 一致</td></tr><tr><td><code>-XX:MaxMetaspaceSize=256M</code></td><td><strong>元空间最大大小</strong>，超过后触发 Full GC</td><td>无限制（默认只受物理内存约束） ，推荐配置一个合适的数值，比如8G的内存可以配置为256M</td></tr></tbody></table><h3 id="类装载子系统（Class-Loading-Subsystem）">类装载子系统（Class Loading Subsystem）</h3><ul class="lvl-0"><li class="lvl-2"><p>类装载子系统负责将 <code>.class</code> 文件加载到 JVM 中，并进行解析、验证、初始化等过程。</p></li><li class="lvl-2"><p>加载过程的几个阶段：</p></li></ul><table><thead><tr><th>阶段</th><th>说明</th></tr></thead><tbody><tr><td><strong>加载（Loading）</strong></td><td>将 <code>.class</code> 文件读取为二进制数据，构造 <code>Class</code> 对象</td></tr><tr><td><strong>验证（Verification）</strong></td><td>确保字节码文件格式正确、安全合法（防止恶意代码）</td></tr><tr><td><strong>准备（Preparation）</strong></td><td>为类的静态变量分配内存，并设置默认初始值</td></tr><tr><td><strong>解析（Resolution）</strong></td><td>将常量池中的符号引用替换为直接引用（方法、字段等）</td></tr><tr><td><strong>初始化（Initialization）</strong></td><td>执行 <code>&lt;clinit&gt;</code> 静态初始化方法，对静态变量赋初始值</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>类加载器（ClassLoader）体系结构：详细参考 <a href="/2025/05/08/jvm-classloader-01/" title="JVM 之 类加载器">JVM 之 类加载器</a></p></li></ul><table><thead><tr><th>类加载器名称</th><th>加载内容</th><th>说明</th></tr></thead><tbody><tr><td><strong>引导类加载器（Bootstrap ClassLoader）</strong></td><td>Java 核心类库（如 <code>java.lang.*</code>）</td><td>由 JVM 自身实现，用本地代码实现，无法直接访问</td></tr><tr><td><strong>扩展类加载器（Extension ClassLoader）</strong></td><td><code>JAVA_HOME/jre/lib/ext</code> 目录下的类</td><td>加载标准扩展类库</td></tr><tr><td><strong>应用类加载器（Application ClassLoader）</strong></td><td>用户应用类路径（CLASSPATH 指定的目录）</td><td>最常用，加载大多数应用代码</td></tr><tr><td><strong>自定义类加载器（Custom ClassLoader）</strong></td><td>用户手动实现的类加载器</td><td>可以打破双亲委派机制，实现热加载、加密类加载等</td></tr></tbody></table><blockquote><p>类加载采用 双亲委派模型：请求会先向父加载器委托，只有在父加载器加载失败时才尝试自身加载。</p></blockquote><h3 id="字节码执行引擎（Execution-Engine）">字节码执行引擎（Execution Engine）</h3><ul class="lvl-0"><li class="lvl-2"><p>字节码执行引擎负责将 Java 字节码解释或编译为机器代码，并在底层平台上执行。</p></li><li class="lvl-2"><p>执行引擎的核心模块</p></li></ul><table><thead><tr><th>组件名称</th><th>作用说明</th><th>关键特性</th></tr></thead><tbody><tr><td><strong>解释器（Interpreter）</strong></td><td>将字节码逐条解释执行</td><td>启动快，适合冷代码（非热点代码），执行效率相对较低</td></tr><tr><td><strong>即时编译器（JIT Compiler）</strong></td><td>将热点代码编译为本地机器码，提高执行效率</td><td>包含 C1（Client）和 C2（Server）两种，支持优化如：方法内联、逃逸分析、循环展开等</td></tr><tr><td><strong>垃圾收集器（Garbage Collector, GC）</strong></td><td>自动内存管理，负责对象生命周期的回收</td><td>常见算法包括：Serial、Parallel、CMS、G1、ZGC（低延迟）等，根据不同场景选择</td></tr><tr><td><strong>本地接口（Native Interface）</strong></td><td>支持 Java 与本地语言（如 C/C++）的互操作</td><td>通过 JNI（Java Native Interface）实现，调用底层操作系统或第三方库功能</td></tr></tbody></table><h3 id="JVM-内存模型（Java-Memory-Model，JMM）">JVM 内存模型（Java Memory Model，JMM）</h3><ul class="lvl-0"><li class="lvl-2"><p>JMM 是 Java 虚拟机规范中定义的一种 抽象内存模型，它决定了多线程程序中变量的读写可见性、有序性和原子性。同时，JVM 在物理层也有一个实际的内存结构，称为运行时数据区域（Runtime Data Areas），这两个可以结合理解。</p></li><li class="lvl-2"><p>JMM 的主要目标</p><ul class="lvl-2"><li class="lvl-6">保证多线程环境下的数据一致性</li><li class="lvl-6">指导 JVM 和 CPU 的内存交互行为（如重排序、缓存）</li></ul></li><li class="lvl-2"><p>实际运行时内存结构如下：</p></li></ul><table><thead><tr><th>内存区域</th><th>说明</th></tr></thead><tbody><tr><td>📌 <strong>程序计数器（PC）</strong></td><td>每个线程私有，记录当前执行的字节码指令地址</td></tr><tr><td>📌 <strong>Java 线程栈</strong></td><td>每个线程私有，方法调用时用于存储局部变量、操作数栈等</td></tr><tr><td>📌 <strong>本地方法栈</strong></td><td>与虚拟机栈类似，用于 native 方法</td></tr><tr><td>📌 <strong>堆（Heap）</strong></td><td>所有线程共享，存储对象实例、数组等，GC 的主要区域</td></tr><tr><td>📌 <strong>方法区（或元空间）</strong></td><td>所有线程共享，存储类信息、静态变量、常量池等（JDK8 后称为 Metaspace）</td></tr></tbody></table><h2 id="垃圾回收器">垃圾回收器</h2><ul class="lvl-0"><li class="lvl-2"><p>垃圾回收器负责自动管理内存，回收不再使用的对象，避免内存泄漏和溢出。</p></li></ul><h3 id="什么是垃圾">什么是垃圾</h3><ul class="lvl-0"><li class="lvl-2"><p>内存中没有被（线程栈变量，静态变量，常量池，JNI指针）引用的地址就是垃圾</p></li><li class="lvl-2"><p>可达性分析算法：是现代 JVM 判断一个对象是否“还活着”的主要算法。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基本思想：</span><br><span class="line">从一组称为 “GC Roots” 的对象出发，沿着对象之间的引用链向下搜索。</span><br><span class="line">如果某个对象 可以从 GC Roots 追踪到，就认为它是 “可达” 的（Alive）。</span><br><span class="line">否则就认为是 “不可达” 的（Garbage），可以被回收。</span><br></pre></td></tr></table></figure><div class="tips"><ul class="lvl-1"><li class="lvl-2"><p>在 JVM 中，<code>GC Roots</code> 是一些 始终可用的、不会被垃圾回收的引用起点，主要包括：</p></li></ul><table><thead><tr><th>GC Roots 来源</th><th>说明</th></tr></thead><tbody><tr><td>当前线程栈中的引用（局部变量表）</td><td>各个线程正在调用的方法中的局部变量、参数等</td></tr><tr><td>静态字段引用</td><td>类的静态字段引用的对象</td></tr><tr><td>JNI 引用（Native 方法引用）</td><td>Java 本地方法中引用的对象</td></tr><tr><td>常量引用池中的对象</td><td>字符串常量等可能持有对象引用</td></tr><tr><td>活动线程对象</td><td>线程自身在 GC 时不会被回收</td></tr><tr><td>JVM 内部结构（如系统类加载器等）</td><td>JVM 关键系统对象</td></tr></tbody></table></div><h3 id="垃圾回收器种类：">垃圾回收器种类：</h3><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/TEILZ9.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>左边6种叫分代模型，右边的4种叫分区模型</p></li></ul><div class="tips"><p><em><strong>分代模型（Generational Model）</strong></em><br>堆内存划分为：<br>年轻代（Young Generation）：存放新创建的对象，分为 Eden 和 Survivor 区。<br>老年代（Old Generation）：存放经过多次 GC 后仍然存活的对象。</p><p><em><strong>分区模型（Region-based Model）</strong></em><br>分区模型（如 G1、ZGC、Shenandoah）不再严格按照代划分内存，而是把堆划分为多个 大小相同的 Region。每个 Region 可以在运行时被动态标记为 Eden、Survivor 或 Old。</p></div><ul class="lvl-0"><li class="lvl-2"><p>分代模型中，上面3个是新生代垃圾回收器，下面3个是老年代垃圾回收器，可以交叉配对（见上图虚线），但最常用是上下两两配对。</p></li><li class="lvl-2"><p>CMS即可以作为新生代垃圾回收器，也可以作为老年代垃圾回收器。</p></li><li class="lvl-2"><p>EpsilonGC，是一个特殊的垃圾回收器，它不回收任何对象，只负责最终记录，做测试用的。</p></li><li class="lvl-2"><p>目前最先进的模型是 <code>ZGC</code>，jkd11开始支持，但直到JDK16才比较完善，目前非默认配置，需要手动配置。其与Redhat出品的 <code>Shenandoah</code> 是竞争关系。</p></li><li class="lvl-2"><p>常见垃圾回收器及其分类、JDK版本</p></li></ul><table><thead><tr><th>垃圾回收器</th><th>所属模型</th><th>说明</th><th>首次出现 JDK 版本</th><th>启用命令（JVM 参数）</th><th>适合的堆内存大小</th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td>分代模型</td><td>单线程，新生代和老年代都使用 Serial，适用于小堆内存</td><td>JDK 1.2</td><td><code>-XX:+UseSerialGC</code></td><td>💾 小于 1GB</td></tr><tr><td><strong>ParNew</strong></td><td>分代模型</td><td>Serial 的多线程版本，<strong>仅用于 CMS 新生代</strong></td><td>JDK 1.4</td><td><code>-XX:+UseParNewGC -XX:+UseConcMarkSweepGC</code></td><td>💾 1GB ~ 4GB</td></tr><tr><td><strong>Parallel（吞吐量 GC）</strong></td><td>分代模型</td><td>多线程 GC，适合吞吐量优先的应用场景</td><td>JDK 1.4</td><td><code>-XX:+UseParallelGC</code>（新生代）<br><code>-XX:+UseParallelOldGC</code>（老年代）</td><td>💾 2GB ~ 8GB</td></tr><tr><td><strong>CMS（Concurrent Mark Sweep）</strong></td><td>分代模型</td><td>老年代并发标记-清除，低延迟，但存在碎片，<strong>已弃用</strong></td><td>JDK 1.4</td><td><code>-XX:+UseConcMarkSweepGC</code></td><td>💾 2GB ~ 8GB（已过时）</td></tr><tr><td><strong>G1（Garbage First）</strong></td><td>分区模型</td><td>将堆划分为 Region，逻辑分代，支持并发压缩，平衡延迟与吞吐</td><td>JDK 7u4（正式）</td><td><code>-XX:+UseG1GC</code></td><td>💾 4GB ~ 数十 GB</td></tr><tr><td><strong>ZGC（Z Garbage Collector）</strong></td><td>分区模型</td><td>Region 弹性大小，支持超大堆，低延迟（&lt;10ms 停顿）</td><td>JDK 11（实验），JDK 15（正式）</td><td><code>-XX:+UseZGC</code></td><td>💾 8GB ~ 数 TB（超大堆）</td></tr><tr><td><strong>Shenandoah</strong></td><td>分区模型</td><td>红帽主导，低延迟，并发回收与并发压缩</td><td>JDK 12（实验），JDK 15（正式）</td><td><code>-XX:+UseShenandoahGC</code></td><td>💾 2GB ~ 数十 GB</td></tr></tbody></table><blockquote><p>对于 CMS，启用后会自动使用 ParNew 作为新生代回收器（除非显式禁止）。<br>CMS 已在 JDK 9 开始标记为弃用，JDK 14 完全移除，不推荐再使用。<br>对于 Parallel GC 启用 <code>-XX:+UseParallelGC</code>（新生代）会自动启用 <code>-XX:+UseParallelOldGC</code>（老年代）。<br>对于ZGC，jdk13以前最大支持4T内存，之后最大支持16T内存。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>各版本默认垃圾回收器及推荐配置（JDK 1.6 起）</p></li></ul><table><thead><tr><th>JDK 版本</th><th>默认 GC</th><th>建议使用 GC（按场景分类）</th></tr></thead><tbody><tr><td><strong>JDK 1.6</strong></td><td>Serial / Parallel</td><td>- 小型应用（如桌面程序）：<code>-XX:+UseSerialGC</code>  <br> - 中大型应用（吞吐量优先）：<code>-XX:+UseParallelGC</code></td></tr><tr><td><strong>JDK 1.7</strong></td><td>同上</td><td>同 JDK 1.6</td></tr><tr><td><strong>JDK 1.8</strong></td><td>Parallel</td><td>- 吞吐优先：默认 <code>-XX:+UseParallelGC</code> <br> - 响应优先：<code>-XX:+UseConcMarkSweepGC</code>（CMS）<br> - 大堆 + 未来升级考虑：<code>-XX:+UseG1GC</code>（推荐）</td></tr><tr><td><strong>JDK 9-14</strong></td><td>G1 GC</td><td>- 一般默认即可：<code>-XX:+UseG1GC</code>（延迟与吞吐平衡）<br> - 极端低延迟要求：升级到 JDK 11+ 使用 ZGC/Shenandoah</td></tr><tr><td><strong>JDK 15+</strong></td><td>G1 GC（默认），ZGC / Shenandoah 可选</td><td>- 延迟敏感（在线服务、RT系统）：<code>-XX:+UseZGC</code> 或 <code>-XX:+UseShenandoahGC</code><br> - 吞吐为主：<code>-XX:+UseParallelGC</code><br> - 综合平衡：<code>-XX:+UseG1GC</code>（默认）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>判断默认 GC 的方式</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintCommandLineFlags -version</span><br></pre></td></tr></table></figure><h3 id="垃圾回收算法">垃圾回收算法</h3><ul class="lvl-0"><li class="lvl-2"><p>JVM 中常见垃圾回收算法汇总</p></li></ul><table><thead><tr><th>算法名称</th><th>核心思想</th><th>适用阶段/区域</th><th>优缺点简述</th></tr></thead><tbody><tr><td><strong>标记-清除（Mark-Sweep）</strong></td><td>标记出存活对象，清除未标记对象</td><td>老年代</td><td>简单高效，但会产生大量碎片，不适合连续内存分配</td></tr><tr><td><strong>标记-整理（Mark-Compact）</strong></td><td>标记后移动存活对象，整理碎片</td><td>老年代</td><td>消除碎片，代价是移动对象，适用于老年代压缩</td></tr><tr><td><strong>复制算法（Copying）</strong></td><td>将对象复制到另一块内存（如 Eden → Survivor）</td><td>新生代</td><td>高效率，适合回收大多数对象短命的新生代，但需要额外空间</td></tr><tr><td><strong>分代回收（Generational）</strong></td><td>将对象按生命周期划分（新生代/老年代）</td><td>整个堆结构</td><td>实用性强，结合不同算法应用于不同代，现代 GC 基础</td></tr><tr><td><strong>分区回收（Region-based）</strong></td><td>将堆划分为若干等大小的 Region 动态分配</td><td>整个堆（如 G1、ZGC）</td><td>更灵活，支持并发并行，减少 STW 停顿，适用于大堆、低延迟场景</td></tr><tr><td><strong>增量回收（Incremental）</strong></td><td>分阶段小步执行 GC 以减少单次停顿</td><td>某些并发/低延迟 GC</td><td>减少暂停时间，但整体效率可能降低</td></tr><tr><td><strong>并发回收（Concurrent）</strong></td><td>标记、清理等步骤与应用线程并发执行</td><td>CMS、G1、ZGC 等</td><td>停顿时间短，对响应时间要求高的系统友好</td></tr><tr><td><strong>三色标记（Tri-color Marking）</strong></td><td>并发标记算法的一种实现思想</td><td>CMS、G1、ZGC 等</td><td>白（待回收）、灰（已标记未扫描）、黑（已标记已扫描），避免“漏标”问题</td></tr><tr><td><strong>SATB（Snapshot-At-The-Beginning）</strong></td><td>并发标记的快照策略</td><td>G1、ZGC</td><td>保证在并发标记过程中不遗漏新引用，适合高并发场景</td></tr><tr><td><strong>Lazy Compaction（延迟压缩）</strong></td><td>不每次 GC 都压缩，视情况而定</td><td>G1 等</td><td>降低不必要的移动成本</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>对应关系：GC 回收器和底层算法</p></li></ul><table><thead><tr><th>回收器</th><th>使用的算法组合</th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td>新生代：复制算法<br>老年代：标记-整理</td></tr><tr><td><strong>ParNew</strong></td><td>新生代：复制算法（多线程）</td></tr><tr><td><strong>Parallel</strong></td><td>新生代：复制算法<br>老年代：标记-整理</td></tr><tr><td><strong>CMS</strong></td><td>新生代：ParNew（复制）<br>老年代：标记-清除 + 三色标记 + 并发</td></tr><tr><td><strong>G1</strong></td><td>分区回收 + 三色标记 + SATB + Lazy Compaction</td></tr><tr><td><strong>ZGC</strong></td><td>分区回收 + 并发标记 + SATB + Region Remapping</td></tr><tr><td><strong>Shenandoah</strong></td><td>分区回收 + 并发标记 + 并发压缩 + 三色标记</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">       ┌────────────────────────┐</span><br><span class="line">       │   常见 GC 算法分类       │</span><br><span class="line">       └────────────────────────┘</span><br><span class="line">                 │</span><br><span class="line">   ┌─────────────┴──────────────┐</span><br><span class="line">   │                            │</span><br><span class="line">分代模型                      分区模型</span><br><span class="line">   │                            │</span><br><span class="line"> ┌─┴─────┐                  ┌───┴─────┐</span><br><span class="line">复制   标记-清除         Region-based 并发</span><br><span class="line">      标记-整理             SATB / 三色标记</span><br></pre></td></tr></table></figure><h4 id="什么是-STW（Stop-The-World）">什么是 STW（Stop-The-World）</h4><ul class="lvl-0"><li class="lvl-2"><p>STW（Stop-The-World） 指的是：在某些垃圾回收阶段，JVM 会暂停所有应用线程（也叫用户线程），让垃圾回收线程独占 CPU 执行 GC 逻辑。</p></li><li class="lvl-2"><p>你可以这样理解 STW</p><ul class="lvl-2"><li class="lvl-6">JVM 会“按下暂停键”暂停所有正在运行的 Java 程序代码；</li><li class="lvl-6">然后 专心进行 GC 的某些阶段（如标记、整理、复制等）；</li><li class="lvl-6">GC 完成后，才会“恢复运行”应用线程。</li></ul></li><li class="lvl-2"><p>各 GC 中 STW 的存在情况</p></li></ul><table><thead><tr><th>回收器</th><th>是否存在 STW？</th><th>说明</th></tr></thead><tbody><tr><td>Serial</td><td>✅ 是，全停顿，全阶段单线程</td><td>堆越大 STW 越长</td></tr><tr><td>Parallel</td><td>✅ 是，全停顿，多线程执行 GC</td><td>提高效率但仍会暂停</td></tr><tr><td>CMS</td><td>✅ 有，初始标记和最终重新标记是 STW</td><td>大部分阶段并发执行</td></tr><tr><td>G1</td><td>✅ 有，但设计为尽可能缩短 STW</td><td>分阶段并发 + 并行处理</td></tr><tr><td>ZGC</td><td>✅ 极短（&lt;10ms）</td><td>仅个别阶段是 STW，几乎感知不到</td></tr><tr><td>Shenandoah</td><td>✅ 极短</td><td>高度并发，STW 时间也极短</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>为什么要关注 STW？</p><ul class="lvl-2"><li class="lvl-6">在响应时间敏感型系统（如在线交易系统、游戏服务器、API 网关）中，长时间的 STW 会造成用户请求卡顿、超时。</li><li class="lvl-6">因此，选择 低 STW 的 GC（如 G1、ZGC、Shenandoah） 对这类系统至关重要。</li></ul></li></ul><h2 id="堆内存结构">堆内存结构</h2><ul class="lvl-0"><li class="lvl-2"><p>不同的垃圾回收器决定了堆内存的结构不同，但总体上分为两种类型：分代模型和分区模型。</p></li></ul><h3 id="分代模型">分代模型</h3><h4 id="Parallel-垃圾回收器">Parallel 垃圾回收器</h4><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/Apr5aY.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>堆结构被划分为 <code>Old Generation（老年代）</code> 和 <code>Young Generation（新生代）</code> 两部分。</p></li><li class="lvl-2"><p><code>Young Generation</code> 由 <code>Eden</code> 和 两个 <code>Survivor</code> 组成，其中 <code>Eden</code> 是一个连续的内存区域，<code>Survivor</code> 是一个非连续的内存区域。</p></li><li class="lvl-2"><p>默认情况下，<code>Young Generation</code>占堆内存的 <code>1/3</code>,  <code>Old Generation</code> 占堆内存的 <code>2/3</code>。</p></li><li class="lvl-2"><p>默认情况下，<code>Eden:S0:S1 = 8:1:1</code> ,如果希望为 4:1:1，使用 <code>-XX:SurvivorRatio=4</code>，但实际上这个比例并不是固定的，而是由jvm基于情况自动变化的，因为JVM默认开启了这个参数<code>-XX:+UseAdaptiveSizePolicy</code>，如果希望固定这个比例，可以设置为 <code>-XX:-UseAdaptiveSizePolicy</code>来关闭这个配置。</p></li><li class="lvl-2"><p>默认情况下，对象最多经历<code>15次</code>Minor GC后进入老年代，可以通过 <code>-XX:MaxTenuringThreshold=n</code> 设置。</p></li></ul><table><thead><tr><th>区域</th><th>说明</th></tr></thead><tbody><tr><td><strong>Eden</strong></td><td>对象首次创建的区域，大部分对象在这里创建并很快被回收</td></tr><tr><td><strong>S0/S1</strong></td><td>Survivor 区域：两个交替使用的缓冲区（From 和 To），用于拷贝存活对象</td></tr><tr><td><strong>Old</strong></td><td>老年代：存活次数多、生命周期长的对象会从新生代晋升到老年代，回收频率低</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>对象内存分配图解(简化)</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">创建对象</span><br><span class="line">   ↓</span><br><span class="line">进入 Eden 区（新生代）</span><br><span class="line">   ↓ Eden 区满</span><br><span class="line">第一次 Minor GC（存活对象[Eden]复制到 S0）</span><br><span class="line">   ↓ Eden 区满 或 S0 区满</span><br><span class="line">第二次 Minor GC（存活对象[Eden和S0]复制到 S1，年龄 +1）</span><br><span class="line">   ↓ Eden 区满 或 S1 区满</span><br><span class="line">第三次 Minor GC（存活对象[Eden和S1]复制到 S0，年龄 +1）</span><br><span class="line">   ↓</span><br><span class="line">……  S0/S1 交替，年龄达到阈值（如 15）</span><br><span class="line">   ↓ 还没有被回收</span><br><span class="line">晋升到 Old 区（老年代），等待Old区满 触发 Full GC</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>大对象直接进入老年代</p></li></ul><blockquote><p>大对象就是需要大量连续内存空间的对象（比如：字符串、数组），如果对象很大（如超过 Eden 区大小，或是超过 Survivor 区大小），可能直接分配到老年代<br>也可以通过 <code>-XX:PretenureSizeThreshold=&lt;大小，单位字节&gt;</code> 控制超过一定大小的对象是否直接分配到老年代（Old Generation），跳过新生代（Eden），以避免大对象频繁在年轻代造成 GC 压力。这个参数只在 Serial 和ParNew两个收集器下有效。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>对象动态年龄判断</p></li></ul><blockquote><p>对象在Survivor区来回移动时，如果这批对象的总大小大于这块Survivor区域内存大小的50%(-XX:TargetSurvivorRatio可以指定)，那么此时大于等于这批对象年龄最大值的对象，就可以直接进入老年代了，<br>例如Survivor区域里现在有一批对象，年龄1+年龄2+年龄n的多个年龄对象总和超过了Survivor区域的50%，此时就会把年龄n(含)以上的对象都放入老年代。这个规则其实是希望那些可能是长期存活的对象，尽早进入老年代。<br>对象动态年龄判断机制一般是在minor gc之后触发的。</p></blockquote><div class="tips"><ul class="lvl-1"><li class="lvl-2"><p>对象逃逸分析</p></li></ul><blockquote><p>如果对象很小，且只在方法内部使用，并没有被外部引用，则其有可能直接分配到栈内存，而不进入堆内存<br>JVM对于这种情况可以通过开启逃逸分析参数(-XX:+DoEscapeAnalysis)来优化对象内存分配位置，使其通过<code>标量替换</code>优先分配在栈上(栈上分配)，JDK7之后默认开启逃逸分析，如果要关闭使用参数(-XX:-DoEscapeAnalysis)</p></blockquote><ul class="lvl-1"><li class="lvl-2">标量替换</li></ul><blockquote><p>通过逃逸分析确定该对象不会被外部访问，并且对象可以被进一步分解时，JVM不会创建该对象，而是将该对象成员变量分解若干个被这个方法使用的成员变量所代替，这些代替的成员变量在栈帧或寄存器上分配空间，这样就不会因为没有一大块连续空间导致对象内存不够分配。<br>开启标量替换参数(-XX:+EliminateAllocations)，JDK7之后默认开启。</p></blockquote><ul class="lvl-1"><li class="lvl-2">标量与聚合量</li></ul><blockquote><p>标量即不可被进一步分解的量，而JAVA的基本数据类型就是标量（如：int，long等基本数据类型以及reference类型等），<br>标量的对立就是可以被进一步分解的量，而这种量称之为聚合量。而在JAVA中对象就是可以被进一步分解的聚合量。</p></blockquote></div><h4 id="Parallel-GC-参数配置表（吞吐量优先-GC）">Parallel GC 参数配置表（吞吐量优先 GC）</h4><table><thead><tr><th>参数名</th><th>说明</th><th>默认值（如未特别说明）</th></tr></thead><tbody><tr><td><code>-XX:+UseParallelGC</code></td><td>开启 Parallel GC，用于新生代收集</td><td>-</td></tr><tr><td><code>-XX:+UseParallelOldGC</code></td><td>开启老年代并行收集（Parallel Old）</td><td>-</td></tr><tr><td><code>-XX:ParallelGCThreads</code></td><td>垃圾回收时的并行线程数（与 CPU 数量相关）</td><td>根据硬件自动配置</td></tr><tr><td><code>-XX:MaxGCPauseMillis</code></td><td>设置 GC 最大暂停时间目标（影响内存分配策略）</td><td>无默认限制（建议按需设置）</td></tr><tr><td><code>-XX:GCTimeRatio</code></td><td>设置 GC 时间与应用运行时间的比值（0~100）<br>值越小，GC 越频繁，值越大 GC 越少</td><td>99（表示 1% 用于 GC，99% 用于应用）</td></tr><tr><td><code>-XX:+UseAdaptiveSizePolicy</code></td><td>启用自适应 GC 策略（根据运行状况自动调整各区域大小）</td><td>默认开启</td></tr><tr><td><code>-XX:SurvivorRatio</code></td><td>Eden 与 Survivor 的内存比例（如 8 表示 Eden:S0:S1 = 8:1:1）</td><td>8</td></tr><tr><td><code>-XX:InitialTenuringThreshold</code></td><td>对象晋升到老年代的初始年龄（会随运行动态调整）</td><td>7</td></tr><tr><td><code>-XX:MaxTenuringThreshold</code></td><td>晋升到老年代的最大年龄（对象在 Survivor 区经历几次 GC）</td><td>15</td></tr><tr><td><code>-XX:PretenureSizeThreshold</code></td><td>设置大对象阈值，超过该大小的对象直接分配到老年代</td><td>0（即禁用）</td></tr><tr><td><code>-XX:+ScavengeBeforeFullGC</code></td><td>在 Full GC 之前是否先执行一次 Minor GC</td><td>开启</td></tr><tr><td><code>-XX:+UseFastAccessorMethods</code></td><td>优化原始类型的 get/set 方法性能</td><td>开启</td></tr><tr><td><code>-XX:+AlwaysPreTouch</code></td><td>JVM 启动时立即分配并初始化所有内存页，避免运行时首次分配带来的停顿</td><td>关闭</td></tr></tbody></table><h3 id="分区模型">分区模型</h3><h4 id="G1-垃圾回收器">G1 垃圾回收器</h4><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/AaqBxm.png" alt="" width="900" height="300"></p><ul class="lvl-0"><li class="lvl-2"><p>G1(Garbage-First) 属于 物理上分区，逻辑上分代，真正的分区模型是 <code>ZGC</code>（jdk21后也支持分代）</p></li><li class="lvl-2"><p>G1将Java堆划分为多个大小相等的独立区域（Region），JVM最多可以有<code>2048</code>个Region。</p></li><li class="lvl-2"><p>一般Region大小等于堆大小除以2048，比如堆大小为4096M，则Region大小为2M，当然也可以用参数<code>-XX:G1HeapRegionSize</code>手动指定Region大小，但是推荐默认的计算方式。</p></li><li class="lvl-2"><p>G1保留了年轻代和老年代的概念，但不再是物理隔阂了，它们都是（可以不连续）Region的集合。</p></li><li class="lvl-2"><p>默认年轻代对堆内存的占比是<code>5%</code>，如果堆大小为4096M，那么年轻代占据200MB左右的内存，对应大概是100个Region，可以通过   <code>-XX:G1NewSizePercent</code>设置新生代初始占比</p></li><li class="lvl-2"><p>在系统运行中，JVM会不停的给年轻代增加更多的Region，但是最多新生代的占比不会超过<code>60%</code>，可以通过<code>-XX:G1MaxNewSizePercent</code>调整。</p></li><li class="lvl-2"><p>年轻代中的Eden和Survivor对应的region也跟之前一样，默认<code>8:1:1</code>，假设年轻代现在有1000个region，eden区对应800个，s0对应100个，s1对应100个。</p></li><li class="lvl-2"><p>一个Region可能之前是年轻代，如果Region进行了垃圾回收，之后可能又会变成老年代，也就是说Region的区域功能可能会动态变化。</p></li><li class="lvl-2"><p>G1垃圾收集器对于对象什么时候会转移到老年代跟之前讲过的原则一样，唯一不同的是对大对象的处理，G1有专门分配大对象的Region叫<code>Humongous</code>区，而不是让大对象直接进入老年代的Region中。</p></li><li class="lvl-2"><p>在G1中，大对象的判定规则就是一个大对象超过了一个Region大小的<code>50%</code>，比如按照上面算的，每个Region是2M，只要一个大对象超过了1M，就会被放入Humongous中，而且一个大对象如果太大，可能会横跨多个Region来存放。</p></li><li class="lvl-2"><p>Humongous区专门存放短期巨型对象，不用直接进老年代，可以节约老年代的空间，避免因为老年代空间不够的GC开销。</p></li><li class="lvl-2"><p>Full GC的时候除了收集年轻代和老年代之外，也会将Humongous区一并回收。</p></li></ul><h5 id="G1垃圾收集分类">G1垃圾收集分类</h5><ul class="lvl-0"><li class="lvl-2"><p>YoungGC<br>YoungGC并不是说现有的Eden区放满了就会马上触发，G1会计算下现在Eden区回收大概要多久时间，如果回收时间远远小于参数 <code>-XX:MaxGCPauseMills</code> 设定的值，那么增加年轻代的region，继续给新对象存放，不会马上做YoungGC，直到下一次Eden区放满，G1计算回收时间接近参数 <code>-XX:MaxGCPauseMills</code> 设定的值，那么就会触发Young GC</p></li><li class="lvl-2"><p>MixedGC<br>不是FullGC，老年代的堆占有率达到参数 <code>-XX:InitiatingHeapOccupancyPercent</code> 设定的值则触发，回收所有的Young和部分Old(根据期望的GC停顿时间确定old区垃圾收集的优先顺序)以及大对象区，正常情况G1的垃圾收集是先做MixedGC，主要使用复制算法，需要把各个region中存活的对象拷贝到别的region里去，拷贝过程中如果发现没有足够的空region能够承载拷贝对象就会触发一次Full GC</p></li><li class="lvl-2"><p>Full GC<br>停止系统程序，然后采用单线程进行标记、清理和压缩整理，好空闲出来一批Region来供下一次MixedGC使用，这个过程是非常耗时的。(Shenandoah优化成多线程收集了)</p></li></ul><h5 id="G1-收集器参数配置表">G1 收集器参数配置表</h5><table><thead><tr><th>参数名</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td><code>-XX:+UseG1GC</code></td><td>使用 G1 垃圾收集器</td><td>-</td></tr><tr><td><code>-XX:ParallelGCThreads</code></td><td>指定 GC 工作的线程数量</td><td>与 CPU 数量相关</td></tr><tr><td><code>-XX:G1HeapRegionSize</code></td><td>设置堆分区大小（1MB~32MB，2 的幂），堆默认划分为 2048 个 Region</td><td>自动计算</td></tr><tr><td><code>-XX:MaxGCPauseMillis</code></td><td>设置 GC 目标最大暂停时间</td><td>200ms</td></tr><tr><td><code>-XX:G1NewSizePercent</code></td><td>新生代初始占比（占整个堆）</td><td>5%</td></tr><tr><td><code>-XX:G1MaxNewSizePercent</code></td><td>新生代最大占比（占整个堆）</td><td>60%</td></tr><tr><td><code>-XX:TargetSurvivorRatio</code></td><td>Survivor 区填充目标（超过该比例，晋升老年代）</td><td>50%</td></tr><tr><td><code>-XX:MaxTenuringThreshold</code></td><td>最大对象年龄阈值（年龄超过将进入老年代）</td><td>15</td></tr><tr><td><code>-XX:InitiatingHeapOccupancyPercent</code></td><td>老年代使用率超过该值触发 Mixed GC</td><td>45%</td></tr><tr><td><code>-XX:G1MixedGCLiveThresholdPercent</code></td><td>Mixed GC 中：Region 存活对象占比低于该值才会被回收</td><td>85%</td></tr><tr><td><code>-XX:G1MixedGCCountTarget</code></td><td>每次 Mixed GC 的最大回收轮次</td><td>8</td></tr><tr><td><code>-XX:G1HeapWastePercent</code></td><td>Mixed GC 回收目标：空闲 Region 达堆总量该百分比就结束混合回收</td><td>5%</td></tr></tbody></table><h4 id="ZGC-垃圾回收器">ZGC 垃圾回收器</h4><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/bBUAYt.png" alt="" width="700" height="500"></p><ul class="lvl-0"><li class="lvl-2"><p>ZGC(Z Garbage Collector)是一款JDK 11中新加入的具有实验性质的低延迟垃圾收集器，ZGC可以说源自于是Azul System公司开发的C4（Concurrent Continuously Compacting Collector） 收集器</p></li></ul><table><thead><tr><th>Platform</th><th>Supported</th><th>Since</th><th>Comment</th></tr></thead><tbody><tr><td>Linux/x64</td><td>✅</td><td>JDK 11</td><td></td></tr><tr><td>Linux/AArch64</td><td>✅</td><td>JDK 13</td><td></td></tr><tr><td>macOS</td><td>✅</td><td>JDK 14</td><td></td></tr><tr><td>Windows</td><td>✅</td><td>JDK 14</td><td>Requires Windows version 1803 (Windows 10 or Windows Server 2019) or later.</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>ZGC收集器是一款基于Region内存布局的，暂时不设分代的(jdk21后支持分代)，使用了<code>读屏障</code>、<code>颜色指针</code>等技术来实现可并发的标记-整理算法的，以低延迟为首要目标的一款垃圾收集器。</p></li></ul><div class="tips"><p><em><strong>颜色指针</strong></em></p><ul class="lvl-1"><li class="lvl-2">在 ZGC（Z Garbage Collector）中，颜色指针（Colored Pointer）是一种核心机制，把对象的 GC 状态信息直接嵌入到对象的引用（地址）中，用于在不增加对象额外元数据的前提下，跟踪对象在垃圾回收过程中的状态。</li><li class="lvl-2">在传统 GC 中，对象的“颜色”（如白色、灰色、黑色）表示其在 GC 不同阶段的状态，这些信息一般存储在额外的数据结构中（如记忆集合、位图等）。</li><li class="lvl-2">而在 ZGC 中，ZGC 将对象的这些状态信息编码进指针的高位中。所以一个对象引用（pointer）不仅仅是内存地址，还携带了对象在 GC 过程中的“颜色”信息。</li><li class="lvl-2">ZGC 主要运行在 64 位系统上，但当前的操作系统和 CPU 实际上只使用 48～57 位虚拟地址。ZGC 利用未使用的高位进行编码。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/LD51Zb.png" alt="" width="900" height="300"></li><li class="lvl-2">每个对象有一个64位指针，这64位被分为：</li></ul><table><thead><tr><th>位数</th><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>18 位</td><td>预留</td><td>保留位，未来可能用于扩展功能</td></tr><tr><td>1 位</td><td>Finalizable</td><td>表示对象可终结（即实现了 <code>finalize()</code> 方法）</td></tr><tr><td>1 位</td><td>Remapped</td><td>标识对象是否已被转移(用于标识某个引用是否已经被重定向（更新为新地址）)；为 1 表示该对象未在重定位集（Relocation Set）中，即新地址，为0表示旧地址</td></tr><tr><td>1 位</td><td>Marked1</td><td>标记位之一，用于 GC 过程中的对象标记阶段 ,由于 ZGC 是并发 GC，需要两位来支持颜色切换机制（Color Flip），确保在不同 GC 周期中可以区分新旧标记，需要触发一次读取屏障（load barrier），找到对象的新位置，并更新这个引用。</td></tr><tr><td>1 位</td><td>Marked0</td><td>另一个标记位，与 Marked1 配合用于 GC 标记阶段</td></tr><tr><td>42 位</td><td>对象地址部分</td><td>实际的内存地址部分，最多可表示 2^42 字节（即 4 TB）,jdk15后占用 44位，支持 16TB</td></tr></tbody></table><p><em><strong>读屏障</strong></em></p><ul class="lvl-1"><li class="lvl-2"><p>ZGC（Z Garbage Collector）中的**读屏障（Read Barrier）是其核心机制之一，它保证了并发压缩（对象移动）**时程序的正确性，是实现低延迟、高并发垃圾回收的关键。</p></li><li class="lvl-2"><p>在传统 GC 中，如果对象在 GC 过程中被移动，程序访问到的对象地址可能就无效了。因此，需要**“停世界”**将所有引用更新。</p></li><li class="lvl-2"><p>而 ZGC 的设计目标是 &lt;10ms 的 GC 停顿时间，所以它采用 <code>并发标记 + 并发移动 + 并发引用更新</code> 的模式。在这种模式下，对象可以在程序运行时被移动，但程序访问时必须“知道”这个对象是否已经被移动，并获取其最新地址，这就是读屏障的职责。</p></li><li class="lvl-2"><p>读屏障是一种在读取对象引用时自动插入的逻辑，用于检查引用是否有效，并在必要时进行修正（即地址重定向）。</p></li><li class="lvl-2"><p>ZGC 是目前唯一在所有对象访问中都使用读屏障的 GC，它在每次对象指针解引用时都进行如下操作：</p></li></ul><table><thead><tr><th>职责</th><th>说明</th></tr></thead><tbody><tr><td><strong>检测引用是否是老地址</strong></td><td>利用指针中的元信息（颜色指针，如 Remapped 位）判断引用是否已经被更新</td></tr><tr><td><strong>如果未更新则重定向引用</strong></td><td>如果引用的是旧地址，屏障会通过 forwarding table 找到新地址并更新</td></tr><tr><td><strong>保证最终访问对象的地址正确</strong></td><td>即使在对象移动过程中，程序也总能访问到有效地址，无需停顿所有线程</td></tr></tbody></table><pre><code class="mermaid">graph TDA[程序访问对象引用&lt;br&#x2F;&gt;例如：Person p &#x3D; personField] --&gt; B[JVM 插入读屏障逻辑]B --&gt; C[读屏障检查颜色指针中的 Remapped 位]C --&gt; D{Remapped 位为 0 吗？}D -- 是 --&gt; E[检查对象是否已被移动]E --&gt; F[更新引用地址为新地址]F --&gt; G[设置 Remapped 位为 1]G --&gt; H[使用更新后的引用访问对象]D -- 否 --&gt; I[直接使用当前引用访问对象]</code></pre></div><ul class="lvl-0"><li class="lvl-2"><p>ZGC的Region可以具有大、中、小三类容量：</p><ul class="lvl-2"><li class="lvl-6">小型Region（Small Region） ： 容量固定为2MB，用于放置小于256KB的小对象。</li><li class="lvl-6">中型Region（Medium Region） ： 容量固定为32MB，用于放置大于等于256KB但小于4MB的对象。</li><li class="lvl-6">大型Region（Large Region） ： 容量不固定，可以动态变化，但必须为2MB的整数倍，用于放置4MB或以上的大对象。</li></ul><blockquote><p>每个大型Region中只会存放一个大对象，这也预示着虽然名字叫作“大型Region”，但它的实际容量完全有可能小于中型Region，最小容量可低至4MB。</p></blockquote></li><li class="lvl-2"><p>ZGC 特点：</p><ul class="lvl-2"><li class="lvl-6">支持极大堆（JDK 15 起支持最高 16TB）</li><li class="lvl-6">GC 停顿时间通常低于 1ms（与堆大小基本无关）</li><li class="lvl-6">适合低延迟、高吞吐、高可用的应用场景，如交易系统、广告推荐等</li></ul></li></ul><h5 id="ZGC存在的问题">ZGC存在的问题</h5><ul class="lvl-0"><li class="lvl-2"><p>ZGC最大的问题是<code>浮动垃圾</code>。ZGC的停顿时间是在10ms以下，但是ZGC的执行时间还是远远大于这个时间的。假如ZGC全过程需要执行10分钟，在这个期间由于对象分配速率很高，将创建大量的新对象，这些对象很难进入当次GC，所以只能在下次GC的时候进行回收，这些只能等到下次GC才能回收的对象就是浮动垃圾。</p></li><li class="lvl-2"><p>ZGC没有分代概念，每次都需要进行全堆扫描，导致一些“朝生夕死”的对象没能及时的被回收。</p></li><li class="lvl-2"><p>目前唯一的办法是增大堆的容量，使得程序得到更多的喘息时间，但是这个也是一个治标不治本的方案。如果需要从根本上解决这个问题，还是需要引入分代收集，让新生对象都在一个专门的区域中创建，然后专门针对这个区域进行更频繁、更快的收集。</p></li><li class="lvl-2"><p>JDK21正式引入了分代（jdk17是预览版），可以在生产环境中使用，需要手动开启：<code>-XX:+ZGenerational</code></p></li></ul><h5 id="ZGC-收集器参数配置表">ZGC 收集器参数配置表</h5><table><thead><tr><th>参数名</th><th>说明</th><th>默认值（如未特殊标注）</th></tr></thead><tbody><tr><td><code>-XX:+UseZGC</code></td><td>启用 ZGC 垃圾收集器</td><td>-</td></tr><tr><td><code>-XX:+UnlockExperimentalVMOptions</code></td><td>解锁实验性参数（JDK 11~14 使用 ZGC 必须）</td><td>-</td></tr><tr><td><code>-XX:+UseLargePages</code></td><td>启用大页内存（性能优化）</td><td>false</td></tr><tr><td><code>-XX:+UseTransparentHugePages</code></td><td>启用透明大页（部分 Linux 上可结合使用）</td><td>false</td></tr><tr><td><code>-Xmx</code> / <code>-Xms</code></td><td>设置最大/初始堆大小</td><td>用户配置</td></tr><tr><td><code>-XX:ZUncommitDelay=&lt;秒&gt;</code></td><td>未使用内存释放回操作系统的延迟时间（ZGC 会自动释放内存）</td><td>300（5分钟）</td></tr><tr><td><code>-XX:SoftMaxHeapSize=&lt;大小&gt;</code></td><td>软最大堆（Soft Heap Limit）：ZGC 尝试将使用的堆控制在该值以内</td><td>默认等于 Xmx</td></tr><tr><td><code>-XX:MaxHeapFreeRatio</code></td><td>最大堆空闲比例（超过此比例可能触发内存释放）</td><td>70</td></tr><tr><td><code>-XX:MinHeapFreeRatio</code></td><td>最小堆空闲比例（低于此比例可能触发扩容）</td><td>40</td></tr><tr><td><code>-XX:+ZGenerational</code></td><td>启用 ZGC 分代收集（从 JDK 21 起支持，默认关闭）</td><td>false（JDK 21+）</td></tr><tr><td><code>-XX:+PrintGC</code> / <code>-Xlog:gc*</code></td><td>开启 GC 日志输出</td><td>-</td></tr><tr><td><code>-XX:+ZProactive</code></td><td>主动回收策略（在系统空闲时尝试回收）</td><td>false</td></tr><tr><td><code>-XX:ZCollectionInterval=&lt;秒&gt;</code></td><td>主动回收之间的最小时间间隔（配合 ZProactive）</td><td>默认值因版本而异</td></tr><tr><td><code>-XX:+ZConcurrentRootsScan</code></td><td>启用并发根扫描（优化初始标记阶段）</td><td>JDK 17+ 默认启用</td></tr></tbody></table><h3 id="ZGC-vs-G1-GC-vs-Parallel-GC-对比表">ZGC vs G1 GC vs Parallel GC 对比表</h3><table><thead><tr><th>特性</th><th><strong>ZGC</strong></th><th><strong>G1 GC</strong></th><th><strong>Parallel GC</strong></th></tr></thead><tbody><tr><td><strong>设计目标</strong></td><td><strong>极低延迟</strong>，&lt;1ms 停顿</td><td>平衡 <strong>低延迟</strong> 与 <strong>高吞吐</strong></td><td><strong>高吞吐</strong>，最大化 CPU 使用</td></tr><tr><td><strong>GC 停顿时间</strong></td><td>&lt;1ms，堆大小增加不影响停顿时间</td><td>几十到几百毫秒，堆越大停顿越明显</td><td>停顿时间可能达到秒级，<strong>堆越大越明显</strong></td></tr><tr><td><strong>堆大小支持</strong></td><td>支持高达 <strong>16TB</strong>（JDK 15+）</td><td>支持 <strong>最多 4TB</strong></td><td>支持大堆，但停顿明显</td></tr><tr><td><strong>是否分代</strong></td><td>默认不分代（JDK 21+ 可开启 <code>-XX:+ZGenerational</code>）</td><td>分代（新生代 + 老年代）</td><td>分代（新生代 + 老年代）</td></tr><tr><td><strong>并发回收</strong></td><td>是，<strong>包括标记、压缩、引用处理都并发</strong></td><td>部分并发，仍包含明显 Stop-The-World 阶段</td><td>否，<strong>全部 Stop-The-World</strong></td></tr><tr><td><strong>移动对象时是否停顿</strong></td><td>否，使用读屏障并发转移对象</td><td>是（通过复制区域）</td><td>是</td></tr><tr><td><strong>实现机制</strong></td><td>标记-重定位，基于读屏障</td><td>Region 分区 + 标记-复制 + Mixed GC</td><td>标记-复制（新生代）、标记-整理（老年代）</td></tr><tr><td><strong>吞吐能力</strong></td><td>中高</td><td>高</td><td><strong>最高</strong></td></tr><tr><td><strong>适用场景</strong></td><td>低延迟系统，如金融、交易、推荐等实时应用</td><td>通用后台系统、Web 服务等</td><td>批处理、数据计算、日志分析等不敏感于停顿的系统</td></tr><tr><td><strong>默认启用</strong></td><td>否，需指定 <code>-XX:+UseZGC</code></td><td>JDK 9+ 默认 GC</td><td>JDK 8 及以前默认 GC</td></tr><tr><td><strong>调优复杂度</strong></td><td>低，大多数参数可省略</td><td>中，需要设置目标停顿时间等</td><td>高，需要精细配置 Eden/Survivor 等比例</td></tr><tr><td><strong>GC 日志配置方式</strong></td><td>统一日志格式：<code>-Xlog:gc*</code>（JDK 9+）</td><td>支持传统的 <code>-XX:+PrintGCDetails</code> 和 <code>-Xlog:gc*</code> 日志输出</td><td>主要使用旧参数：<code>-XX:+PrintGCDetails</code> 等</td></tr></tbody></table><div class="tips"><p><em><strong>ZGC 吞吐能力较弱的原因</strong></em></p><table><thead><tr><th>原因</th><th>解释</th></tr></thead><tbody><tr><td><strong>1. 并发阶段代价较高</strong></td><td>ZGC 几乎所有的 GC 工作（包括标记、整理、引用处理、转移对象）都在与应用线程并发执行。虽然减少了停顿，但这些 GC 线程与业务线程共享 CPU 资源，<strong>增加了 CPU 上下文切换和缓存竞争</strong>，从而影响业务线程的执行效率。</td></tr><tr><td><strong>2. 读屏障开销</strong></td><td>ZGC 依赖<strong>着色指针和读屏障（load barrier）机制</strong>来跟踪对象引用状态，支持并发转移。虽然非常高效，但仍比传统 GC 的普通读写路径慢一些，在高频访问对象场景下会带来一定 CPU 开销。</td></tr><tr><td><strong>3. 对硬件依赖高，调度保守</strong></td><td>为了实现“&lt;1ms 停顿”的目标，ZGC 会选择更保守的调度策略（如避免并发线程使用过多 CPU），而不会像 Parallel GC 那样“榨干”所有核心资源。</td></tr><tr><td><strong>4. 内存开销更高</strong></td><td>为了支持并发压缩和转移，ZGC 通常需要为每个对象保留元数据和更多的转移空间（即“浮动垃圾”区域），这可能导致<strong>频繁的 GC 周期</strong>，影响吞吐。</td></tr><tr><td><strong>5. 设计目标非吞吐优先</strong></td><td>ZGC 的首要目标是<strong>低延迟而非最大吞吐</strong>。与 Parallel GC（以吞吐为核心）设计目标不同，ZGC 更适合场景为“对延迟敏感但吞吐可接受”的系统。</td></tr></tbody></table><p>最糟糕的情况下吞吐量会降低15%。这都不是事，停顿时间足够优秀。至于吞吐量，通过扩容分分钟解决。<br>另外，Oracle官方提到了它最大的优点是：它的停顿时间不会随着堆的增大而增长！<br>也就是说，几十G堆的停顿时间是10ms以下，几百G甚至上T堆的停顿时间也是10ms以下。</p><p>ZGC 吞吐弱，不是因为技术落后，而是因为它主动选择在低延迟和高吞吐之间偏向了低延迟。<br>在对响应时间要求极高的系统中，它是非常合适的选择。<br>但如果你的目标是压榨机器性能跑批处理、日志分析这类吞吐导向型任务，Parallel GC 或 G1 会更合适。</p></div><h2 id="内存溢出-OutOfMemoryError，简称-OOM">内存溢出(OutOfMemoryError，简称 OOM)</h2><ul class="lvl-0"><li class="lvl-2"><p>JVM 常见内存溢出类型汇总表</p></li></ul><table><thead><tr><th>溢出类型</th><th>异常信息</th><th>触发原因/描述</th><th>相关参数和建议配置</th></tr></thead><tbody><tr><td><strong>堆内存溢出</strong></td><td><code>java.lang.OutOfMemoryError: Java heap space</code></td><td>- 创建大量对象，堆空间不足<br>- 内存泄漏：对象不再使用却有强引用<br>- 老年代对象太多无法晋升</td><td><code>-Xms</code> / <code>-Xmx</code> 设置堆大小</td></tr><tr><td><strong>栈溢出（递归）</strong></td><td><code>java.lang.StackOverflowError</code></td><td>- 方法无限递归或递归层级太深</td><td><code>-Xss</code> 设置线程栈大小</td></tr><tr><td><strong>无法创建新线程</strong></td><td><code>java.lang.OutOfMemoryError: unable to create new native thread</code></td><td>- 创建线程过多（如线程池配置过大）<br>- 系统或 JVM native 线程资源耗尽</td><td>控制线程池大小，避免无限新建线程</td></tr><tr><td><strong>元空间溢出</strong></td><td><code>java.lang.OutOfMemoryError: Metaspace</code></td><td>- 动态加载类过多（如使用 CGLIB、JSP 动态生成类）<br>- 类无法卸载（如 ClassLoader 泄漏）</td><td><code>-XX:MetaspaceSize</code> / <code>-XX:MaxMetaspaceSize</code></td></tr><tr><td><strong>直接内存溢出</strong></td><td><code>java.lang.OutOfMemoryError: Direct buffer memory</code></td><td>- 使用 <code>ByteBuffer.allocateDirect()</code> 分配大量直接内存<br>- Netty 等框架默认使用直接内存</td><td><code>-XX:MaxDirectMemorySize</code></td></tr><tr><td><strong>GC 开销过高</strong></td><td><code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code></td><td>- JVM 花费 &gt;98% 的时间 GC 但回收 &lt;2% 的内存，认为进入“GC 死循环”</td><td>分析 GC 日志、优化堆设置</td></tr><tr><td><strong>类卸载失败（内存泄漏）</strong></td><td>（不一定报错，但可能导致 Metaspace OOM）</td><td>- Web 容器频繁部署热更新 WAR 包时，ClassLoader 无法卸载，导致类永久驻留</td><td>优化 ClassLoader 管理，使用内存分析工具</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>堆快照(堆转储)文件分析</p></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-XX:+HeapDumpOnOutOfMemoryError</code></td><td>OOM 时生成堆转储文件 ,建议生产环境开启</td></tr><tr><td><code>-XX:HeapDumpPath=xxx.hprof</code></td><td>指定堆转储文件保存路径 <br> 默认保存在当前目录</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>常用分析工具与命令</p></li></ul><table><thead><tr><th>工具/命令</th><th>简介与功能</th><th>使用说明</th></tr></thead><tbody><tr><td><strong>MAT（Memory Analyzer Tool）</strong></td><td>Eclipse 出品的强大图形工具，支持泄漏分析、对象引用链分析、内存占用统计等</td><td>下载地址：<br><a href="https://www.eclipse.org/mat/">https://www.eclipse.org/mat/</a><br>打开后直接导入 <code>.hprof</code> 文件即可分析</td></tr><tr><td><strong>VisualVM</strong></td><td>官方可视化 JVM 监控工具，支持实时分析、GC 查看、线程状态与堆转储查看</td><td>附带于 JDK（或单独安装），打开 <code>.hprof</code> 文件进行可视化分析</td></tr><tr><td><strong>JProfiler</strong></td><td>商业级 Java 性能分析工具，提供堆分析、CPU 分析、线程分析等全套功能</td><td>支持打开 <code>.hprof</code> 文件，也可在运行时配合使用（需付费或试用）</td></tr><tr><td><strong>YourKit</strong></td><td>商业性能分析工具，界面友好，支持丰富的分析功能</td><td>支持堆分析，适合内存泄漏排查</td></tr><tr><td><strong>jhat</strong>（过时）</td><td>JDK 附带的旧工具，用于分析 <code>.hprof</code> 文件，开启 Web 界面查看（已废弃）</td><td>命令：<code>jhat heapdump.hprof</code>，浏览器访问 <code>http://localhost:7000</code>（JDK 8 及以下）</td></tr><tr><td><strong>jmap</strong></td><td>用于生成堆转储文件或查看堆对象统计信息（<strong>不是分析工具本身</strong>）</td><td>命令：<code>jmap -dump:format=b,file=heap.hprof &lt;pid&gt;</code> 生成转储；配合 MAT 使用</td></tr><tr><td><strong>jcmd</strong></td><td>更现代的诊断命令工具，可生成 heap dump、执行 GC、打印 VM 状态等</td><td>命令：<code>jcmd &lt;pid&gt; GC.heap_dump heap.hprof</code></td></tr><tr><td><strong><a href="http://GCEasy.io">GCEasy.io</a></strong></td><td>在线分析工具，支持 <code>.hprof</code> 文件和 GC 日志上传分析</td><td>网站：<a href="https://gceasy.io">https://gceasy.io</a></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>GC日志相关参数(JDK1.8及以下)</p></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-XX:+PrintGC</code></td><td>打印基本 GC 信息（建议配合 <code>-XX:+PrintGCDetails</code> 使用）</td></tr><tr><td><code>-XX:+PrintGCDetails</code></td><td>打印详细的 GC 日志信息（如各区域使用情况、对象分配、晋升等）</td></tr><tr><td><code>-XX:+PrintGCDateStamps</code></td><td>在 GC 日志中添加日期时间戳</td></tr><tr><td><code>-XX:+PrintGCTimeStamps</code></td><td>在 GC 日志中添加 JVM 启动以来的时间戳</td></tr><tr><td><code>-Xloggc:/var/log/myapp/gc.log</code></td><td>将 GC 日志输出到指定文件</td></tr><tr><td><code>-XX:+UseGCLogFileRotation</code></td><td>启用 GC 日志文件轮转（适用于大规模系统的 GC 日志管理）</td></tr><tr><td><code>-XX:NumberOfGCLogFiles=5</code></td><td>最多保留 5 个 GC 日志历史文件</td></tr><tr><td><code>-XX:GCLogFileSize=10M</code></td><td>每个 GC 日志文件最大为 10MB</td></tr><tr><td><code>-XX:+PrintGCCause</code></td><td>打印 GC 的触发原因（如 Minor GC、System.gc() 等）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>GC日志相关参数(JDK9+)</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xlog:gc*:file=/var/log/app/gc.log:time,<span class="built_in">uptime</span>,level,tags:filecount=5,filesize=20M</span><br></pre></td></tr></table></figure><table><thead><tr><th>部分</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td><code>gc*</code></td><td>日志类别</td><td>表示记录所有 GC 相关日志（如 gc、gc+start、gc+heap 等）。<code>*</code> 是通配符。</td></tr><tr><td><code>file=/var/log/app/gc.log</code></td><td>输出路径</td><td>将 GC 日志输出到指定路径，而不是控制台。可以是相对或绝对路径。</td></tr><tr><td><code>time</code></td><td>日志时间戳</td><td>添加格式化时间（如 2025-05-12T10:21:33.123+0800）。便于定位具体时间。</td></tr><tr><td><code>uptime</code></td><td>JVM 启动以来的时间戳</td><td>显示 GC 发生时距离 JVM 启动的毫秒数（例如 <code>3.254s</code>）。有助于调试启动期间的问题。</td></tr><tr><td><code>level</code></td><td>日志级别</td><td>显示日志级别（info、debug、warning 等），默认 info。</td></tr><tr><td><code>tags</code></td><td>日志标签</td><td>显示日志的模块标签，如 <code>[gc,start]</code>，帮助快速定位类别。</td></tr><tr><td><code>filecount=5</code></td><td>文件轮转个数</td><td>最多保留 5 个日志文件（当前日志 + 4 个历史）。</td></tr><tr><td><code>filesize=20M</code></td><td>单文件最大大小</td><td>每个日志文件最大 20MB，超出时自动滚动到下一个文件。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍JVM的内存模型与垃圾回收机制&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se8/html/index.html&quot;&gt;The Java® Virtual Machine Specification&lt;/a&gt; 版本jdk1.8&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="jvm" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/jvm/"/>
    
    
    <category term="jvm" scheme="https://blog.hanqunfeng.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM 之 类加载器</title>
    <link href="https://blog.hanqunfeng.com/2025/05/08/jvm-classloader-01/"/>
    <id>https://blog.hanqunfeng.com/2025/05/08/jvm-classloader-01/</id>
    <published>2025-05-08T13:30:05.000Z</published>
    <updated>2025-05-09T07:27:56.853Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍JVM的类加载器</p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html">The Java® Virtual Machine Specification</a> 版本jdk1.8</p></li></ul><span id="more"></span><h2 id="类加载器">类加载器</h2><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/0QoWW8.png" alt="" width="900" height="600"></p><ul class="lvl-0"><li class="lvl-2"><p>左侧是JDK中实现的类加载器，通过<code>parent</code>属性形成⽗⼦关系。应⽤中⾃定义的类加载器的<code>parent</code>都是<br><code>AppClassLoader</code></p></li><li class="lvl-2"><p>右侧是JDK中的类加载器实现类。通过类继承的机制形成体系。未来我们就可以通过继承相关的类实现⾃定义类<br>加载器。</p></li><li class="lvl-2"><p>在代码中查看类加载器关系</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoaderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// ⽗⼦关系 AppClassLoader &lt;- ExtClassLoader &lt;- BootStrap Classloader</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl1</span> <span class="operator">=</span> LoaderDemo.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;cl1 &gt; &quot;</span> + cl1); <span class="comment">// sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;parent of cl1 &gt; &quot;</span> + cl1.getParent()); <span class="comment">// sun.misc.Launcher$ExtClassLoader@1b6d3586</span></span><br><span class="line">        <span class="comment">// BootStrap Classloader由C++开发，是JVM虚拟机的⼀部分，本身不是JAVA类。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;grant parent of cl1 &gt; &quot;</span> + cl1.getParent().getParent()); <span class="comment">// null</span></span><br><span class="line">        <span class="comment">// String,Int等基础类由BootStrap Classloader加载。</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl2</span> <span class="operator">=</span> String.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;cl2 &gt; &quot;</span> + cl2); <span class="comment">// null</span></span><br><span class="line">        System.out.println(cl1.loadClass(<span class="string">&quot;java.util.List&quot;</span>).getClass().getClassLoader()); <span class="comment">// null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双亲委派机制">双亲委派机制</h2><ul class="lvl-0"><li class="lvl-2"><p>当⼀个类加载器要加载⼀个类时，整体的过程就是通过双亲委派机制向上委托查找，如果没有查找到，就向下委托加载。</p></li><li class="lvl-2"><p>Java 类加载机制中的<code>双亲委派模型（Parent Delegation Model）</code>是一种保证了类加载器按照层次结构从上到下来加载类的策略。这种层级化的加载流程确保了应用程序能够安全地加载并使用来自不同来源的类，同时也避免了内存中出现相同类的多个拷贝。</p></li><li class="lvl-2"><p>以下是双亲委派机制的工作原理：</p><ul class="lvl-2"><li class="lvl-4">1.当一个类加载器接收到类加载请求时，它首先不会自行尝试去寻找类文件，而是将这个请求委派给它的父类加载器。</li><li class="lvl-4">2.父类加载器同样遵循此规则，它会继续把请求向上委派给它的父类加载器，直到达到根（bootstrapp）类加载器为止。</li><li class="lvl-4">3.根类加载器一般会直接访问本地文件系统来查找类文件，比如 JDK 自带的核心类库，或者在-Xbootclasspath指定的路径下查找。</li><li class="lvl-4">4.如果根类加载器找到了该类，则进行类的加载；如果找不到，则把这个任务交回给发出请求的子类加载器。</li><li class="lvl-4">5.子类加载器也重复步骤 4，若找到则加载，否则传递给下一个子类加载器，直至原始提出请求的类加载器。</li><li class="lvl-4">6.若所有的类加载器都未能找到所需的类，则最终抛出ClassNotFoundException异常。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/ftDnCj.png" alt="" width="600" height="800"></li></ul></li><li class="lvl-2"><p>双亲委派有以下几个优点：</p><ul class="lvl-2"><li class="lvl-4">安全性：由于类加载是从顶层开始，这能防止恶意代码通过加载相同的包名和类名替代系统的关键类。</li><li class="lvl-4">唯一性：每个类都会被特定的类加载器加载一次，即便是在分布式的环境中也能保证类的统一性，避免因为多次加载导致的错误。</li><li class="lvl-4">可靠性：用户自定义的类加载器不用担心基础类已经被加载，它们可以专心于自己需要处理的部分。</li></ul></li><li class="lvl-2"><p>例如，当应用程序运行时，应用类加载器（Application ClassLoader）接收到对java.lang.String类的加载请求时，它会首先将请求传递给扩展类加载器（Extension ClassLoader），后者再传递给引导类加载器（Bootstrap ClassLoader）。引导类加载器会在其搜索路径中找到String类，并完成加载过程。如果应用程序试图提供自己的String类，由于双亲委派的存在，应用程序所指定的类并不会被加载，从而保证了平台核心 API 的一致性。</p></li><li class="lvl-2"><p>总之，双亲委派机制是 Java 类加载过程中一个非常重要的特性，它不仅维护了类加载的安全性和一致性，也为开发者提供了灵活定制类加载规则的能力。</p></li></ul><h3 id="每个类加载器查找类的默认路径">每个类加载器查找类的默认路径</h3><ul class="lvl-0"><li class="lvl-2"><p>在 Java 中，每个类加载器都有自己的类路径（Classpath）去查找类文件。下面是几个主要的类加载器以及它们的默认查找路径：</p><ul class="lvl-2"><li class="lvl-4">Bootstrap ClassLoader (启动类加载器)：<br>这个加载器是用 <code>native</code> 代码实现的，用于加载核心 Java 类库。它没有父类加载器。<br>查找路径通常是<code>&lt;JAVA_HOME&gt;/jre/lib</code>目录下的核心运行时库，例如rt.jar等，或是由<code>sun.boot.class.path</code>系统属性指定的路径。</li><li class="lvl-4">Extension ClassLoader (扩展类加载器)：ExtClassLoader<br>这个类加载器加载的是 Java 平台扩展的一些类，这些通常位于<code>&lt;JAVA_HOME&gt;/jre/lib/ext</code>目录下或是由<code>java.ext.dirs</code>系统属性指定的路径。<br>它的父类加载器是 Bootstrap ClassLoader。</li><li class="lvl-4">Application ClassLoader (应用类加载器，也称为系统类加载器)：AppClassLoader<br>负责加载应用程序的主类路径 (Classpath) 中定义的应用程序类。<br>默认查找路径包括<code>-classpath</code>、<code>-cp</code>命令行参数、<code>CLASSPATH</code>环境变量或者是由<code>java.class.path</code>系统属性所指定的路径。<br>如果上述都未设置，那么它会查找当前目录 <code>(.)</code>。<br>其父类加载器为 Extension ClassLoader。</li><li class="lvl-4">自定义类加载器：<br>任何基于<code>java.lang.ClassLoader</code>的子类都可以是自定义类加载器。<br>自定义类加载器可以选择性地重写<code>findClass()</code>方法以实现特定的类文件读取逻辑，这样可以控制从哪里加载类文件，比如从网络、数据库或甚至是加密格式获取类。<br>默认情况下，如果没有特殊指定，自定义类加载器的查找路径与其父类加载器相同。用户可以根据需要设定其搜索路径。</li></ul></li><li class="lvl-2"><p>需要注意的是，除了 Bootstrap ClassLoader 外，其他的所有类加载器最终都是java.lang.ClassLoader的子类，并且每个类加载器实例都有一个直接的父类加载器。如果你创建了一个新的类加载器，它将继承 Application ClassLoader 作为它的父类，除非你在创建时指定了不同的父类加载器。</p></li><li class="lvl-2"><p>此外，Java 9 引入了模块化系统后，类加载机制也有了一些变化，对于模块路径上的类加载，会使用新的层次结构来处理，这使得类加载过程更加灵活同时保持了向后的兼容性。不过，对于传统的类路径上的类加载，双亲委派模型仍然适用。</p></li><li class="lvl-2"><p>在代码中查看类加载路径</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BootStrap Classloader，加载java基础类。</span></span><br><span class="line">System.out.println(<span class="string">&quot;BootStrap ClassLoader加载⽬录：&quot;</span> + System.getProperty(<span class="string">&quot;sun.boot.class.path&quot;</span>));</span><br><span class="line"><span class="comment">// Extention Classloader 加载⼀些扩展类。 可通过-D java.ext.dirs另⾏指定⽬录</span></span><br><span class="line">System.out.println(<span class="string">&quot;Extention ClassLoader加载⽬录：&quot;</span> + System.getProperty(<span class="string">&quot;java.ext.dirs&quot;</span>));</span><br><span class="line"><span class="comment">// AppClassLoader 加载CLASSPATH，应⽤下的Jar包。可通过-D java.class.path另⾏指定⽬录</span></span><br><span class="line">System.out.println(<span class="string">&quot;AppClassLoader加载⽬录：&quot;</span> + System.getProperty(<span class="string">&quot;java.class.path&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="双亲委派机制的实现原理">双亲委派机制的实现原理</h3><ul class="lvl-0"><li class="lvl-2"><p>java.lang.ClassLoader 类的 loadClass 方法是双亲委派的核心实现</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载指定名称的类，并根据 resolve 参数决定是否解析该类。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该方法实现了类加载的基本逻辑，包括检查类是否已加载、委托父类加载器加载、</span></span><br><span class="line"><span class="comment"> * 自行加载类以及解析类等步骤。该方法是 Java 类加载机制的核心部分之一，</span></span><br><span class="line"><span class="comment"> * 遵循双亲委派模型。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name    要加载的类的全限定名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resolve 如果为 true，则在加载后解析该类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 加载的 Class 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassNotFoundException 如果找不到指定的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 这个⽅法是protected声明的，意味着，是可以被⼦类覆盖的，所以，双亲委派机制也是可以被打破的，如Tomcat⼦类重写这个⽅法，并使⽤自己的类加载逻辑。</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 使用 synchronized 确保多线程环境下类加载的同步</span></span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        <span class="comment">// 每个类加载器对他加载过的类都有⼀个缓存，先去缓存中查看有没有加载过</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123; <span class="comment">//没有加载过，就⾛双亲委派</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 父类存在则让⽗类加载器进⾏加载</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果父类不存在，则从引导类加载器进⾏加载</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                <span class="comment">// findClass 方法是子类实现的，用于加载指定名称的类</span></span><br><span class="line">                <span class="comment">// ⽗类加载器没有加载过，就⾃⾏解析class⽂件加载</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                <span class="comment">// 性能统计：记录类加载过程中的时间消耗和调用次数，便于监控和优化。</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认情况下，双亲委派模型只进⾏了验证和准备阶段，⽽不进⾏解析(如链接、初始化)</span></span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>该方法实现了类加载的基本逻辑，包括检查类是否已加载、委托父类加载器加载、自行加载类以及解析类等步骤。该方法是 Java 类加载机制的核心部分之一，遵循双亲委派模型。</p></li><li class="lvl-2"><p>这个⽅法是<code>protected</code>声明的，意味着，是可以被⼦类覆盖的，所以，双亲委派机制也是可以被打破的，如Tomcat⼦类重写这个⽅法，并使⽤自己的类加载逻辑。</p></li></ul><h2 id="沙箱保护机制">沙箱保护机制</h2><ul class="lvl-0"><li class="lvl-2"><p>沙箱保护机制是 Java 虚拟机提供的一种安全机制，用于保护应用程序免受恶意代码的攻击。</p></li><li class="lvl-2"><p>java.lang.ClassLoader 类的 preDefineClass 方法是沙箱保护机制的核心实现</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个方法在双亲委派模型之前被调用，用于在加载类之前进行一些预处理操作。</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">// name: 要加载的类的全限定名。</span></span><br><span class="line"><span class="comment">// pd: 提供的保护域信息，可能为 null。</span></span><br><span class="line"><span class="keyword">private</span> ProtectionDomain <span class="title function_">preDefineClass</span><span class="params">(String name,</span></span><br><span class="line"><span class="params">                                            ProtectionDomain pd)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!checkName(name))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(<span class="string">&quot;IllegalName: &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Note:  Checking logic in java.lang.invoke.MemberName.checkForTypeAlias</span></span><br><span class="line">        <span class="comment">// relies on the fact that spoofing is impossible if a class has a name</span></span><br><span class="line">        <span class="comment">// of the form &quot;java.*&quot;</span></span><br><span class="line">        <span class="keyword">if</span> ((name != <span class="literal">null</span>) &amp;&amp; name.startsWith(<span class="string">&quot;java.&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span></span><br><span class="line">                (<span class="string">&quot;Prohibited package name: &quot;</span> +</span><br><span class="line">                 name.substring(<span class="number">0</span>, name.lastIndexOf(<span class="string">&#x27;.&#x27;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pd == <span class="literal">null</span>) &#123;</span><br><span class="line">            pd = defaultDomain;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (name != <span class="literal">null</span>) checkCerts(name, pd.getCodeSource());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pd;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这个方法 <code>preDefineClass</code> 的作用是在类被定义之前进行一些安全检查和准备工作，确保类的合法性与安全性。它通常用于自定义类加载器中，以增强类加载过程中的安全控制。</p></li><li class="lvl-2"><p>方法作用详解：</p><ul class="lvl-2"><li class="lvl-4">1.防止定义非法类名的类（如 java.* 包下的类）：<ul class="lvl-4"><li class="lvl-6">如果尝试加载的类属于 java. 开头的标准包（如 java.lang, java.util 等），会抛出 SecurityException。</li><li class="lvl-6">这是为了防止用户自定义类伪装成 Java 核心类库中的类，从而造成安全风险。</li></ul></li><li class="lvl-4">2.校验类名合法性：<ul class="lvl-4"><li class="lvl-6">调用 checkName(name) 检查类名是否合法（例如不能包含 /、非法字符等），若不合法则抛出 NoClassDefFoundError。</li></ul></li><li class="lvl-4">3.证书一致性校验（签名一致性校验）：<ul class="lvl-4"><li class="lvl-6">如果类有名称且提供了 ProtectionDomain，会调用 checkCerts(name, codeSource) 来确保当前类的签名与其所在包中其他类的签名一致。</li><li class="lvl-6">防止同一包中混入不同签名的类，避免潜在的恶意篡改。</li></ul></li><li class="lvl-4">4.设置默认保护域（ProtectionDomain）：<ul class="lvl-4"><li class="lvl-6">如果传入的 ProtectionDomain 为 null，则使用类加载器的默认域 defaultDomain。</li></ul></li></ul></li></ul><h2 id="Linking链接过程">Linking链接过程</h2><ul class="lvl-0"><li class="lvl-2"><p>在ClassLoader的<code>loadClass</code>⽅法中，还有⼀个不起眼的步骤，<code>resolveClass</code>。这是⼀个<code>native</code>⽅法。⽽其实现的过程称为<code>linking-链接</code>。</p></li><li class="lvl-2"><p>链接过程的实现功能如下图：<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/9vkhLN.png" alt="" width="900" height="500"></p></li><li class="lvl-2"><p>其中关于半初始化状态就是JDK在处理⼀个类的static静态属性时，会先给这个属性分配⼀个默认值，作⽤是占住内存。然后等连接过程完成后，在后⾯的初始化阶段，再将静态属性从默认值修改为指定的初始值。</p></li><li class="lvl-2"><p>符号引⽤和直接引⽤</p></li></ul><blockquote><p>如果A类中有⼀个静态属性，引⽤了另⼀个B类。那么在对类进⾏初始化的过程中，因为A和B这两个类都没有初始化，JVM并不知道A和B这两个类的具体地址。所以这时，在A类中，只能创建⼀个不知道具体地址的引⽤，指向B类。这个引⽤就称为符号引⽤。⽽当A类和B类都完成初始化后，JVM⾃然就需要将这个符号引⽤转⽽指向B类具体的内存地址，这个引⽤就称为直接引⽤。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>来看一个有意思的示例</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line">    <span class="comment">// 静态变量按声明顺序初始化</span></span><br><span class="line">    <span class="comment">// 构造方法初始化apple对象时，price还没有被初始化，处于链接过程中的准备阶段，即半初始化状态，所以price为默认值0.0</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Apple</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 解决方法是将price声明在apple的上面即可</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">20.00</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> totalpay;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Apple</span><span class="params">(<span class="type">double</span> discount)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====&quot;</span> + price);</span><br><span class="line">        totalpay = price - discount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriceTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Apple.apple.totalpay); <span class="comment">// -10.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这里有一个有意思的问题，就是只有当<code>loadClass</code>方法中的<code>resolve</code>参数为<code>true</code>时<code>resolveClass</code>方法才会被调用，但是大部分情况下，<code>resolve</code>参数都是<code>false</code>，这不是强制限制而是出于以下原因：</p><ul class="lvl-2"><li class="lvl-4"><ol><li class="lvl-7">避免递归解析中出现错误或死循环<br>在类的解析过程中，如果该类引用了另一个还没加载的类，立即解析可能会导致无限递归或加载顺序问题。通过延迟解析，可以更好地控制加载流程。</li></ol></li><li class="lvl-4"><ol start="2"><li class="lvl-7">提高加载效率<br>加载类可能不一定马上就用到所有方法、字段等符号引用，推迟解析可以提高性能，尤其在批量加载很多类时。</li></ol></li><li class="lvl-4"><ol start="3"><li class="lvl-7">更灵活地处理类的依赖<br>开发者可以先加载类，稍后根据需要再解析。例如，在自定义类加载器中，可能先判断类是否已经存在、是否需要被增强（比如字节码增强），再决定是否解析。</li></ol></li></ul></li></ul><h2 id="通过类加载器引⼊外部Jar包">通过类加载器引⼊外部Jar包</h2><ul class="lvl-0"><li class="lvl-2"><p>虽然通常我们会将依赖的 jar 包直接放入项目的 classpath 中（比如通过构建工具如 Maven 或 Gradle 管理），但在某些特定场景下，我们确实需要动态地通过 URLClassLoader 加载外部 jar 包，这是 Java 提供的一种更灵活的类加载机制。</p></li><li class="lvl-2"><p>以下是一些必须或推荐使用 URLClassLoader 的典型应用场景：</p></li></ul><h3 id="1-插件机制（Plugin-System）">1. 插件机制（Plugin System）</h3><ul class="lvl-0"><li class="lvl-2"><p>场景说明：<br>系统支持用户自定义插件（如 IDE 插件、浏览器扩展、游戏 mod），这些插件在运行时才加载，项目本身在编译期并不知道有哪些插件。</p></li><li class="lvl-2"><p>举例：<br>Eclipse 或 IntelliJ 的插件系统<br>Minecraft 的 mod 加载器<br>Spring Boot Devtools 重新加载机制</p></li><li class="lvl-2"><p>为什么不能直接放入 classpath？<br>因为插件是动态发现和加载的，不是编译时确定的。</p></li></ul><h3 id="2-热部署-动态加载类">2. 热部署 / 动态加载类</h3><ul class="lvl-0"><li class="lvl-2"><p>场景说明：<br>你想在应用运行过程中加载新的 jar 或类，比如热更新一个模块而无需重启服务。</p></li><li class="lvl-2"><p>举例：<br>Web 容器（如 Tomcat）的应用重新部署<br>使用 URLClassLoader 加载某个模块的新版本以实现热替换</p></li><li class="lvl-2"><p>为什么不能放入 classpath？<br>classpath 在启动时就固定了，不能动态添加；而 URLClassLoader 可以运行时加载新 jar。</p></li></ul><h3 id="3-多版本隔离">3. 多版本隔离</h3><ul class="lvl-0"><li class="lvl-2"><p>场景说明：<br>你希望不同的模块使用同一个库的不同版本，但 classpath 无法支持两个版本的同一个类。</p></li><li class="lvl-2"><p>举例：<br>一个服务器运行多个服务实例，它们分别依赖 log4j 的不同版本<br>一个系统的插件 A 使用 fastjson 1.x，插件 B 使用 fastjson 2.x</p></li><li class="lvl-2"><p>为什么不能放入 classpath？<br>classpath 是共享的，会发生类冲突。使用多个 URLClassLoader，可实现类隔离。</p></li></ul><h3 id="4-脚本或用户上传代码执行">4. 脚本或用户上传代码执行</h3><ul class="lvl-0"><li class="lvl-2"><p>场景说明：<br>系统允许用户上传 jar 或 class 文件，然后在服务端执行其中的类逻辑。</p></li><li class="lvl-2"><p>举例：<br>在线编程平台（如 LeetCode 后端）<br>用户上传算法 jar，平台运行并返回结果</p></li><li class="lvl-2"><p>为什么不能放入 classpath？<br>用户上传内容是动态的，系统在运行前无法预知。</p></li></ul><h3 id="5-实现类的延迟加载（节省资源）">5. 实现类的延迟加载（节省资源）</h3><ul class="lvl-0"><li class="lvl-2"><p>场景说明：<br>某些类/模块体积较大或依赖较多，不希望在程序启动时就加载，只有真正使用时再加载。</p></li><li class="lvl-2"><p>举例：<br>大型桌面应用（如 IntelliJ）在打开某个功能模块时才加载相应 jar</p></li></ul><h3 id="总结">总结</h3><table><thead><tr><th>场景</th><th>使用 <code>URLClassLoader</code> 的原因</th></tr></thead><tbody><tr><td>插件系统</td><td>插件动态加载，不在项目编译时可知</td></tr><tr><td>热部署</td><td>动态替换模块，无需重启</td></tr><tr><td>多版本共存</td><td>避免类冲突，实现类加载隔离</td></tr><tr><td>用户上传 jar</td><td>内容动态生成，classpath 无法预先配置</td></tr><tr><td>延迟加载模块</td><td>启动更快，节省内存</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>如果你是在做框架设计或需要动态扩展能力的场景，理解并使用 URLClassLoader 会非常有帮助。</p></li></ul><h3 id="场景假设">场景假设</h3><h4 id="调用外部jar">调用外部jar</h4><ul class="lvl-0"><li class="lvl-2"><p>我们有一个外部 jar 文件：hello-plugin.jar，它包含一个类：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个类编译后打包进 hello-plugin.jar</span></span><br><span class="line"><span class="keyword">package</span> com.example.plugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloPlugin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello from plugin! :&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>主程序使用 URLClassLoader 动态加载这个 jar</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PluginLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 外部 jar 的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">jarFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;plugins/hello-plugin.jar&quot;</span>);</span><br><span class="line">        <span class="type">URL</span> <span class="variable">jarUrl</span> <span class="operator">=</span> jarFile.toURI().toURL();</span><br><span class="line">        <span class="comment">// HTTPS jar 的 URL</span></span><br><span class="line">        <span class="comment">// URL jarUrl = new URL(&quot;https://your-domain.com/libs/hello-plugin.jar&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建 URLClassLoader（也可以设置父加载器）</span></span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;jarUrl&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载插件类</span></span><br><span class="line">        Class&lt;?&gt; clazz = classLoader.loadClass(<span class="string">&quot;com.example.plugin.HelloPlugin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建实例并调用方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">plugin</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">sayHello</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;sayHello&quot;</span>, String.class);</span><br><span class="line">        sayHello.invoke(plugin, <span class="string">&quot;World&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭 ClassLoader（Java 7+ 推荐）</span></span><br><span class="line">        classLoader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行时动态编译-Java-源代码">运行时动态编译 Java 源代码</h4><ul class="lvl-0"><li class="lvl-2"><p>我们有一个 java 代码片段：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.tools.JavaCompiler;</span><br><span class="line"><span class="keyword">import</span> javax.tools.ToolProvider;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicJavaRunner</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.example.dynamic.Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Java 源代码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sourceCode</span> <span class="operator">=</span></span><br><span class="line">                <span class="string">&quot;package com.example.dynamic;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;public class Hello &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    public void say() &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        System.out.println(\&quot;Hello from dynamic source!\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建临时目录</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">tempDir</span> <span class="operator">=</span> Files.createTempDirectory(<span class="string">&quot;dynamic-classes&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">outputDir</span> <span class="operator">=</span> tempDir.toFile();</span><br><span class="line">        <span class="comment">// System.out.println(&quot;临时目录：&quot; + outputDir.getAbsolutePath());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 .java 文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">javaFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(outputDir, <span class="string">&quot;com/example/dynamic/Hello.java&quot;</span>);</span><br><span class="line">        javaFile.getParentFile().mkdirs();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(javaFile)) &#123;</span><br><span class="line">            writer.write(sourceCode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译 Java 文件</span></span><br><span class="line">        <span class="type">JavaCompiler</span> <span class="variable">compiler</span> <span class="operator">=</span> ToolProvider.getSystemJavaCompiler();</span><br><span class="line">        <span class="keyword">if</span> (compiler == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;请用 JDK 而非 JRE 运行！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> compiler.run(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, javaFile.getPath());</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;编译失败！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载类并调用</span></span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;outputDir.toURI().toURL()&#125;);</span><br><span class="line">        Class&lt;?&gt; clazz = classLoader.loadClass(className);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">        method.invoke(instance);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清理（可选）</span></span><br><span class="line">        classLoader.close();</span><br><span class="line">        <span class="comment">// 删除临时目录</span></span><br><span class="line">        Files.walk(outputDir.toPath())</span><br><span class="line">                .sorted(Comparator.reverseOrder()) <span class="comment">// 先删文件，再删目录</span></span><br><span class="line">                .map(Path::toFile)</span><br><span class="line">                .forEach(File::delete);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>关键点说明</p></li></ul><table><thead><tr><th>机制</th><th>说明</th></tr></thead><tbody><tr><td><code>JavaCompiler</code></td><td>JDK 自带的编译器（<code>tools.jar</code>）</td></tr><tr><td><code>ToolProvider.getSystemJavaCompiler()</code></td><td>只能在 JDK 环境中工作，JRE 无法使用</td></tr><tr><td><code>URLClassLoader</code></td><td>用于加载编译后的 .class 文件</td></tr><tr><td><code>FileWriter</code></td><td>保存代码为临时 Java 文件</td></tr></tbody></table><h2 id="自定义类加载器">自定义类加载器</h2><ul class="lvl-0"><li class="lvl-2"><p>要自定义 ClassLoader，只需要继承于 <code>ClassLoader</code> 或者 <code>SecureClassLoader</code>，并重写 <code>findClass()</code> 方法即可</p></li><li class="lvl-2"><p>示例：我们对上面的代码进行升级，不创建临时文件，而是在内存中编译代码，并从内存中加载字节码，而不依赖磁盘文件，更高效也更适合生产环境中动态类加载（如在线代码执行、脚本引擎等）。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.tools.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InMemoryJavaRunner</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.example.dynamic.Hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sourceCode</span> <span class="operator">=</span></span><br><span class="line">                <span class="string">&quot;package com.example.dynamic;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;public class Hello &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    public void say() &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        System.out.println(\&quot;Hello from memory compiled class!\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取系统 Java 编译器</span></span><br><span class="line">        <span class="type">JavaCompiler</span> <span class="variable">compiler</span> <span class="operator">=</span> ToolProvider.getSystemJavaCompiler();</span><br><span class="line">        <span class="keyword">if</span> (compiler == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;请使用 JDK 运行此程序（非 JRE）&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备编译源代码：一个 JavaFileObject 表示源代码</span></span><br><span class="line">        <span class="type">JavaFileObject</span> <span class="variable">sourceFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaSourceFromString</span>(className, sourceCode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建自定义的内存文件管理器（替代标准的磁盘管理器）</span></span><br><span class="line">        <span class="type">StandardJavaFileManager</span> <span class="variable">standardFileManager</span> <span class="operator">=</span> compiler.getStandardFileManager(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">MemoryJavaFileManager</span> <span class="variable">fileManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemoryJavaFileManager</span>(standardFileManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行编译任务</span></span><br><span class="line">        JavaCompiler.<span class="type">CompilationTask</span> <span class="variable">task</span> <span class="operator">=</span> compiler.getTask(<span class="literal">null</span>, fileManager, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, Collections.singletonList(sourceFile));</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> task.call();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;编译失败！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载编译后的类</span></span><br><span class="line">        Map&lt;String, <span class="type">byte</span>[]&gt; classBytes = fileManager.getClassBytes();</span><br><span class="line">        <span class="type">InMemoryClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryClassLoader</span>(classBytes);</span><br><span class="line">        Class&lt;?&gt; clazz = classLoader.loadClass(className);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">        method.invoke(instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于表示内存中的 Java 源代码</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JavaSourceFromString</span> <span class="keyword">extends</span> <span class="title class_">SimpleJavaFileObject</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">        JavaSourceFromString(String className, String code) &#123;</span><br><span class="line">            <span class="built_in">super</span>(URI.create(<span class="string">&quot;string:///&quot;</span> + className.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + Kind.SOURCE.extension), Kind.SOURCE);</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> CharSequence <span class="title function_">getCharContent</span><span class="params">(<span class="type">boolean</span> ignoreEncodingErrors)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将编译的 class 文件保存在内存中（不是文件系统）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MemoryJavaFileManager</span> <span class="keyword">extends</span> <span class="title class_">ForwardingJavaFileManager</span>&lt;StandardJavaFileManager&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ByteArrayOutputStream&gt; classOutputBuffers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        MemoryJavaFileManager(StandardJavaFileManager standardManager) &#123;</span><br><span class="line">            <span class="built_in">super</span>(standardManager);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> JavaFileObject <span class="title function_">getJavaFileForOutput</span><span class="params">(Location location, String className,</span></span><br><span class="line"><span class="params">                                                   JavaFileObject.Kind kind, FileObject sibling)</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            classOutputBuffers.put(className, outputStream);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleJavaFileObject</span>(</span><br><span class="line">                    URI.create(<span class="string">&quot;mem:///&quot;</span> + className.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + kind.extension), kind) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> OutputStream <span class="title function_">openOutputStream</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> outputStream;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Map&lt;String, <span class="type">byte</span>[]&gt; getClassBytes() &#123;</span><br><span class="line">            Map&lt;String, <span class="type">byte</span>[]&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, ByteArrayOutputStream&gt; entry : classOutputBuffers.entrySet()) &#123;</span><br><span class="line">                result.put(entry.getKey(), entry.getValue().toByteArray());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义 ClassLoader，用于从内存中加载字节码</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InMemoryClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, <span class="type">byte</span>[]&gt; classBytes;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InMemoryClassLoader</span><span class="params">(Map&lt;String, <span class="type">byte</span>[]&gt; classBytes)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(ClassLoader.getSystemClassLoader());</span><br><span class="line">            <span class="built_in">this</span>.classBytes = classBytes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="comment">// 从内存中获取字节码</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = classBytes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (bytes == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 定义类并返回，一定要使用 defineClass 方法</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>进一步升级：我们现在将这个系统扩展为支持多个类同时动态编译、内存加载并执行。这对于需要处理多个类（例如接口 + 实现、内部依赖等）非常实用。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.tools.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiClassInMemoryCompiler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 准备多个类的源代码</span></span><br><span class="line">        Map&lt;String, String&gt; sources = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        sources.put(<span class="string">&quot;com.example.api.Greeter&quot;</span>,</span><br><span class="line">                <span class="string">&quot;package com.example.api;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;public interface Greeter &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    void greet();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        sources.put(<span class="string">&quot;com.example.impl.EnglishGreeter&quot;</span>,</span><br><span class="line">                <span class="string">&quot;package com.example.impl;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;import com.example.api.Greeter;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;public class EnglishGreeter implements Greeter &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    public void greet() &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        System.out.println(\&quot;Hello from EnglishGreeter!\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">entryClassName</span> <span class="operator">=</span> <span class="string">&quot;com.example.impl.EnglishGreeter&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译</span></span><br><span class="line">        Map&lt;String, <span class="type">byte</span>[]&gt; compiledClasses = compile(sources);</span><br><span class="line">        <span class="keyword">if</span> (compiledClasses == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;编译失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载并执行</span></span><br><span class="line">        <span class="type">InMemoryClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryClassLoader</span>(compiledClasses);</span><br><span class="line">        Class&lt;?&gt; clazz = classLoader.loadClass(entryClassName);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;greet&quot;</span>);</span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译器入口，支持多个类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, <span class="type">byte</span>[]&gt; compile(Map&lt;String, String&gt; sources) &#123;</span><br><span class="line">        <span class="type">JavaCompiler</span> <span class="variable">compiler</span> <span class="operator">=</span> ToolProvider.getSystemJavaCompiler();</span><br><span class="line">        <span class="keyword">if</span> (compiler == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;请使用 JDK 运行&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;JavaFileObject&gt; compilationUnits = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : sources.entrySet()) &#123;</span><br><span class="line">            compilationUnits.add(<span class="keyword">new</span> <span class="title class_">JavaSourceFromString</span>(entry.getKey(), entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StandardJavaFileManager</span> <span class="variable">stdManager</span> <span class="operator">=</span> compiler.getStandardFileManager(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">MemoryJavaFileManager</span> <span class="variable">memManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemoryJavaFileManager</span>(stdManager);</span><br><span class="line"></span><br><span class="line">        JavaCompiler.<span class="type">CompilationTask</span> <span class="variable">task</span> <span class="operator">=</span> compiler.getTask(<span class="literal">null</span>, memManager, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, compilationUnits);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> task.call();</span><br><span class="line">        <span class="keyword">return</span> success ? memManager.getClassBytes() : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 源文件表示（Java 代码以字符串提供）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JavaSourceFromString</span> <span class="keyword">extends</span> <span class="title class_">SimpleJavaFileObject</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">        JavaSourceFromString(String className, String code) &#123;</span><br><span class="line">            <span class="built_in">super</span>(URI.create(<span class="string">&quot;string:///&quot;</span> + className.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + Kind.SOURCE.extension), Kind.SOURCE);</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> CharSequence <span class="title function_">getCharContent</span><span class="params">(<span class="type">boolean</span> ignoreEncodingErrors)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存中的编译输出管理器</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MemoryJavaFileManager</span> <span class="keyword">extends</span> <span class="title class_">ForwardingJavaFileManager</span>&lt;StandardJavaFileManager&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ByteArrayOutputStream&gt; classOutputBuffers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        MemoryJavaFileManager(StandardJavaFileManager standardManager) &#123;</span><br><span class="line">            <span class="built_in">super</span>(standardManager);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> JavaFileObject <span class="title function_">getJavaFileForOutput</span><span class="params">(Location location, String className,</span></span><br><span class="line"><span class="params">                                                   JavaFileObject.Kind kind, FileObject sibling)</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            classOutputBuffers.put(className, outputStream);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleJavaFileObject</span>(</span><br><span class="line">                    URI.create(<span class="string">&quot;mem:///&quot;</span> + className.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + kind.extension), kind) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> OutputStream <span class="title function_">openOutputStream</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> outputStream;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Map&lt;String, <span class="type">byte</span>[]&gt; getClassBytes() &#123;</span><br><span class="line">            Map&lt;String, <span class="type">byte</span>[]&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, ByteArrayOutputStream&gt; entry : classOutputBuffers.entrySet()) &#123;</span><br><span class="line">                result.put(entry.getKey(), entry.getValue().toByteArray());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于加载内存中的 class</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InMemoryClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, <span class="type">byte</span>[]&gt; classBytes;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InMemoryClassLoader</span><span class="params">(Map&lt;String, <span class="type">byte</span>[]&gt; classBytes)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(ClassLoader.getSystemClassLoader());</span><br><span class="line">            <span class="built_in">this</span>.classBytes = classBytes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = classBytes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (bytes == <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打破双亲委派，实现同类多版本共存">打破双亲委派，实现同类多版本共存</h2><ul class="lvl-0"><li class="lvl-2"><p>假设我们有同一个jar包的不同版本，比如：<code>a-1.0.jar</code>和<code>a-2.0.jar</code>，他们具有同名的 <code>DemoClass</code>类 ,系统<code>classpath</code>中引入的是 <code>a-1.0.jar</code>，而此时我们通过⾃定的ClassLoader加载 <code>a-2.0.jar</code>，并调用 <code>DemoClass</code>类 ，我们会发现，⾃定的ClassLoader加载的类依旧是 <code>a-1.0.jar</code> 中的类，而不是 <code>a-2.0.jar</code> 中的类。</p></li><li class="lvl-2"><p>为什么会出现这种情况呢？这就是因为JDK的双亲委派机制。⾃定的ClassLoader的<code>parent</code>属性指向的是JDK内的<code>AppClassLoader</code>，⽽ <code>AppClassLoader</code> 会加载系统当中的所有代码，就包括 <code>a-1.0.jar</code>中的 <code>DemoClass</code>类。这时，⾃定的ClassLoader去加载 <code>DemoClass</code>类时，通过双亲委派向上查找，⾃然加载出来的就是APPClassloader中的<code>DemoClass</code>了。</p></li><li class="lvl-2"><p>如何打破双亲委派呢？我们可以通过重写 <code>loadClass()</code>方法，来打破双亲委派，实现类⽂件的加载。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomClassLoader</span> <span class="keyword">extends</span> <span class="title class_">SecureClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> URL jarUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomClassLoader</span><span class="params">(URL jarUrl)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个独立的子类加载器，只加载指定 JAR</span></span><br><span class="line">        <span class="built_in">this</span>.jarUrl = jarUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 把双亲委派机制反过来，先到⼦类加载器中加载，加载不到再去⽗类加载器中加载。</span></span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// 如果类已加载，则直接返回</span></span><br><span class="line">            Class&lt;?&gt; loadedClass = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (loadedClass == <span class="literal">null</span>) &#123;</span><br><span class="line">                loadedClass = findClass(name);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 委派给父类加载器</span></span><br><span class="line">                loadedClass = <span class="built_in">super</span>.loadClass(name, resolve);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> loadedClass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) &#123;</span><br><span class="line">        <span class="type">int</span> code;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 访问jar包的url</span></span><br><span class="line">            <span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> jarUrl.openConnection();</span><br><span class="line">            urlConnection.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="keyword">while</span> ((code = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(code);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] data = bos.toByteArray();</span><br><span class="line">            is.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, data, <span class="number">0</span>, data.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>测试代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">jarFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path/to/a-2.0.jar&quot;</span>);</span><br><span class="line">        <span class="type">URL</span> <span class="variable">jarUrl</span> <span class="operator">=</span> jarFile.toURI().toURL();</span><br><span class="line"></span><br><span class="line">        <span class="type">CustomClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomClassLoader</span>(jarUrl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载 DemoClass</span></span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(<span class="string">&quot;com.example.DemoClass&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;print&quot;</span>).invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打破双亲委派机制的典型场景">打破双亲委派机制的典型场景</h3><h4 id="Tomcat类加载器">Tomcat类加载器</h4><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/eGKhDn.png" alt="" width="550" height="700"></p><ul class="lvl-0"><li class="lvl-2"><p>CommonClassLoader：Tomcat最基本的类加载器，加载路径中的class可以被Tomcat容器本身以及各个Webapp访问；</p></li><li class="lvl-2"><p>CatalinaClassLoader：Tomcat容器私有的类加载器，加载路径中的class对于Webapp不可⻅；</p></li><li class="lvl-2"><p>SharedClassLoader：各个Webapp共享的类加载器，加载路径中的class对于所有Webapp可⻅，但是对于Tomcat容器不可⻅；</p></li><li class="lvl-2"><p>WebappClassLoader：各个Webapp私有的类加载器，加载路径中的class只对当前Webapp可⻅，⽐如加载war包⾥相关的类，每个war包应⽤都有⾃⼰的WebappClassLoader，实现相互隔离，⽐如不同war包应⽤引⼊了不同的spring版本，这样实现就能加载各⾃的spring版本；</p></li><li class="lvl-2"><p>Jsp类加载器：针对每个JSP⻚⾯创建⼀个加载器。这个加载器⽐较轻量级，所以Tomcat还实现了热加载，也就是JSP只要修改了，就创建⼀个新的加载器，从⽽实现了JSP⻚⾯的热更新。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍JVM的类加载器&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se8/html/index.html&quot;&gt;The Java® Virtual Machine Specification&lt;/a&gt; 版本jdk1.8&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="jvm" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/jvm/"/>
    
    
    <category term="jvm" scheme="https://blog.hanqunfeng.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 的 REST APIs:聚合查询</title>
    <link href="https://blog.hanqunfeng.com/2025/04/22/elasticsearch-06-api-aggs/"/>
    <id>https://blog.hanqunfeng.com/2025/04/22/elasticsearch-06-api-aggs/</id>
    <published>2025-04-22T13:30:05.000Z</published>
    <updated>2025-04-24T02:53:13.488Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 Elasticsearch 的 REST APIs：聚合查询</p></li><li class="lvl-2"><p>Elasticsearch版本8.17.3</p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/rest-apis.html">官方文档:REST APIs</a></p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/search-aggregations.html">官方文档:Aggregations</a></p></li><li class="lvl-2"><a href="/2025/04/17/elasticsearch-05-api/" title="Elasticsearch 的 REST APIs">Elasticsearch 的 REST APIs</a></li></ul><span id="more"></span><h2 id="聚合查询">聚合查询</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">聚合查询</a>，可以让我们极其方便的实现对索引数据的统计、分析、运算等操作。</p></li><li class="lvl-2"><p>基本语法包括以下部分：</p><ul class="lvl-2"><li class="lvl-4">查询条件：指定需要聚合的文档，可以使用标准的 Elasticsearch 查询语法，如 term、match、range 等等。</li><li class="lvl-4">聚合函数：指定要执行的聚合操作，如 sum、avg、min、max、terms、date_histogram 等等。每个聚合命令都会生成一个聚合结果。</li><li class="lvl-4">聚合嵌套：聚合命令可以嵌套，以便更细粒度地分析数据。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET &lt;index_name&gt;/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;&lt;aggs_name&gt;&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;&lt;agg_type&gt;&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;&lt;field_name&gt;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 说明</span></span><br><span class="line">  <span class="comment"># aggs：聚合的根节点，固定写法</span></span><br><span class="line">  <span class="comment"># aggs_name：聚合函数的名称，自己随意定义</span></span><br><span class="line">  <span class="comment"># agg_type：聚合种类，比如是桶聚合（terms）或者是指标聚合（avg、sum、min、max等）</span></span><br><span class="line">  <span class="comment"># field_name：字段名称或者叫域名。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>聚合的分类</p><ul class="lvl-2"><li class="lvl-4">Metric Aggregation：—些数学运算，可以对文档字段进行统计分析，类比Mysql中的 min(), max(), sum() 操作。</li><li class="lvl-4">Bucket Aggregation：一些满足特定条件的文档的集合放置到一个桶里，每一个桶关联一个key，类比Mysql中的group by操作。</li><li class="lvl-4">Pipeline Aggregation：对其他的聚合结果进行二次聚合</li></ul></li></ul><h2 id="示例数据准备">示例数据准备</h2><ul class="lvl-0"><li class="lvl-2"><p>我们需要先准备一些数据，才能进行聚合分析。</p></li><li class="lvl-2"><p>创建索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果存在先删除</span></span><br><span class="line">curl -X DELETE -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;settings&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;number_of_shards&quot;:&quot;1&quot;,</span></span><br><span class="line"><span class="string">      &quot;number_of_replicas&quot;:&quot;2&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;mappings&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;properties&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;category&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;keyword&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;price&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;double&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;count&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;integer&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;title&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;text&quot;,</span></span><br><span class="line"><span class="string">          &quot;analyzer&quot;:&quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">          &quot;search_analyzer&quot;:&quot;ik_smart&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;remark&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;:&quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;:&quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;search_analyzer&quot;:&quot;ik_smart&quot;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;address&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;fields&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;keyword&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;tags&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;created_at&quot;: &#123;&quot;type&quot;: &quot;date&quot;, &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;&#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;1&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;electronics&quot;, &quot;price&quot;: 999.99, &quot;count&quot;: 10, &quot;title&quot;: &quot;Smartphone X - 128GB&quot;, &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;, &quot;address&quot;: &quot;广州天河公园&quot;, &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;], &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;2&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;fashion&quot;, &quot;price&quot;: 49.99, &quot;count&quot;: 25, &quot;title&quot;: &quot;Designer T-shirt&quot;, &quot;remark&quot;: &quot;Trendy designer T-shirt made with high quality fabric.&quot;, &quot;address&quot;: &quot;广州荔湾大厦&quot;, &quot;tags&quot;: [&quot;clothing&quot;, &quot;designer&quot;, &quot;style&quot;], &quot;created_at&quot;: &quot;2025-04-21 12:15:00&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;3&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;home_appliances&quot;, &quot;price&quot;: 299.99, &quot;count&quot;: 5, &quot;title&quot;: &quot;Robot Vacuum Cleaner&quot;, &quot;remark&quot;: &quot;Efficient robot vacuum cleaner with smart navigation.&quot;, &quot;address&quot;: &quot;广州白云山公园&quot;, &quot;tags&quot;: [&quot;appliances&quot;, &quot;vacuum&quot;, &quot;robot&quot;], &quot;created_at&quot;: &quot;2025-04-20 08:45:30&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;4&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;books&quot;, &quot;price&quot;: 19.99, &quot;count&quot;: 100, &quot;title&quot;: &quot;Inspirational Novel&quot;, &quot;remark&quot;: &quot;A gripping novel that inspires and motivates.&quot;, &quot;address&quot;: &quot;321 Book Rd, Shenzhen, China&quot;, &quot;tags&quot;: [&quot;book&quot;, &quot;novel&quot;, &quot;inspiration&quot;], &quot;created_at&quot;: &quot;2025-04-19 10:05:00&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;5&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;groceries&quot;, &quot;price&quot;: 3.99, &quot;count&quot;: 200, &quot;title&quot;: &quot;Organic Apples&quot;, &quot;remark&quot;: &quot;Fresh and crispy organic apples.&quot;, &quot;address&quot;: &quot;654 Grocery Ln, Chengdu, China&quot;, &quot;tags&quot;: [&quot;fruit&quot;, &quot;organic&quot;, &quot;healthy&quot;], &quot;created_at&quot;: &quot;2025-04-18 14:30:45&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;6&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;electronics&quot;, &quot;price&quot;: 1999.99, &quot;count&quot;: 15, &quot;title&quot;: &quot;Smartphone X - 256GB&quot;, &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;, &quot;address&quot;: &quot;广州天河公园&quot;, &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;], &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot; &#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Metric-Aggregation-指标聚合">Metric Aggregation(指标聚合)</h2><h3 id="单值分析︰只输出一个分析结果">单值分析︰只输出一个分析结果</h3><ul class="lvl-0"><li class="lvl-2"><p>min, max, avg, sum</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最大值、最小值、平均值、总和</span></span><br><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,  <span class="comment"># 不返回文档，只返回聚合结果</span></span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max_price&quot;</span>: &#123; <span class="comment"># 自定义名称，这里返回最大值</span></span><br><span class="line">      <span class="string">&quot;max&quot;</span>: &#123;     <span class="comment"># 指标聚合函数名称</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span> <span class="comment"># 指标聚合字段</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;min_price&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;min&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;sum_price&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;sum&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Cardinality（类似distinct Count)</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0, <span class="comment"># 不返回文档，只返回聚合结果</span></span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;cardinality_count&quot;</span>: &#123; <span class="comment"># 自定义名称，返回去重后的数量</span></span><br><span class="line">      <span class="string">&quot;cardinality&quot;</span>: &#123;  <span class="comment"># 指标聚合函数名称，cardinality表示去重</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span> <span class="comment"># 指标聚合字段，去重的字段</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多值分析-输出多个分析结果">多值分析:输出多个分析结果</h3><ul class="lvl-0"><li class="lvl-2"><p>stats（统计）, extended stats</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;stats_price&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;stats&quot;</span>: &#123; <span class="comment"># 指标聚合函数名称，stats表示统计，会返回多个指标</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span>: 15,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: 12,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: []     <span class="comment"># 因为设置size 为 0，所以返回的结果为空</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;aggregations&quot;</span>: &#123; <span class="comment"># 聚合结果</span></span><br><span class="line">    <span class="string">&quot;stats_price&quot;</span>: &#123; <span class="comment"># 自定义名称，返回多组聚合结果</span></span><br><span class="line">      <span class="string">&quot;count&quot;</span>: 12,</span><br><span class="line">      <span class="string">&quot;min&quot;</span>: 3.99,</span><br><span class="line">      <span class="string">&quot;max&quot;</span>: 1999.99,</span><br><span class="line">      <span class="string">&quot;avg&quot;</span>: 562.1666666666666,</span><br><span class="line">      <span class="string">&quot;sum&quot;</span>: 6746</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>percentile （百分位）, percentile rank</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;percentile_price&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;percentiles&quot;</span>: &#123; <span class="comment"># 指标聚合函数名称，percentiles表示百分位数聚合计算</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span>, <span class="comment"># 指标聚合字段</span></span><br><span class="line">        <span class="string">&quot;percents&quot;</span>: [1, 5, 25, 50, 75, 95, 99] <span class="comment"># 需要计算百分位数的数组</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 百分位数是一个统计学概念，用于描述一个给定集合的排序值。例如：</span></span><br><span class="line"><span class="comment"># 第 1 百分位数表示数据中小于这个值的所有数据占总数的 1%。</span></span><br><span class="line"><span class="comment"># 第 50 百分位数（中位数）表示数据中的一半小于这个值，另一半大于这个值。</span></span><br><span class="line"><span class="comment"># 第 99 百分位数表示数据中小于这个值的所有数据占总数的 99%。</span></span><br><span class="line"><span class="comment"># 通过计算这些百分位数，你可以了解 price 字段在整个shopping索引中的分布情况，从而可以用于数据分析、趋势判断等。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>top hits(排在前面的示例)</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;top_hits&quot;</span>: &#123; <span class="comment"># 自定义名称，返回排在前面的示例</span></span><br><span class="line">      <span class="string">&quot;top_hits&quot;</span>: &#123; <span class="comment"># 指标聚合函数名称，top_hits表示返回排在前面的示例</span></span><br><span class="line">        <span class="string">&quot;sort&quot;</span>: [&#123;<span class="string">&quot;price&quot;</span>: &#123;<span class="string">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span>&#125;&#125;], <span class="comment"># 排序，按照price字段降序排序</span></span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 3 <span class="comment"># 只返回前3个</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bucket-Aggregation-桶聚合">Bucket Aggregation(桶聚合)</h2><ul class="lvl-0"><li class="lvl-2"><p>按照一定的规则，将文档分配到不同的桶中，从而达到分类的目的。</p></li><li class="lvl-2"><p>ES提供的一些常见的 Bucket Aggregation。</p><ul class="lvl-2"><li class="lvl-4">terms（词条）, range（范围）, date_range（日期范围）, ip_range（IP范围）, missing（缺失）, histogram（直方图）, date_histogram（日期直方图）, geo_distance（地理距离）, significant_terms（重要词条）, composite（组合）</li></ul></li><li class="lvl-2"><p>桶聚合可以用于各种场景，例如：</p><ul class="lvl-2"><li class="lvl-4">对数据进行分组统计，比如按照地区、年龄段、性别等字段进行分组统计。</li><li class="lvl-4">对时间序列数据进行时间段分析，比如按照每小时、每天、每月、每季度、每年等时间段进行分析。</li><li class="lvl-4">对各种标签信息分类，并统计其数量。</li></ul></li></ul><h3 id="terms（词条）">terms（词条）</h3><ul class="lvl-0"><li class="lvl-2"><p>按照字段的值进行分组，并统计每个组的数量。</p></li><li class="lvl-2"><p>示例：按照category字段进行分组，并统计每个组的数量。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_count&quot;</span>: &#123; <span class="comment"># 自定义名称，返回每个组的数量</span></span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123; <span class="comment"># 桶聚合函数名称，terms表示按照字段的值进行分组</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span>, <span class="comment"># 按照category字段进行分组，注意不能是text类型，否则会报错</span></span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 10, <span class="comment"># 只返回前10个，默认是10</span></span><br><span class="line">        <span class="string">&quot;order&quot;</span>: &#123;<span class="string">&quot;_count&quot;</span>: <span class="string">&quot;desc&quot;</span>&#125; <span class="comment"># 按照数量降序排序，默认是desc，Bucket聚合会统计Bucket内的文档数量，记为_count，并且按照_count降序排序</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span>: 15,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: 12,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_count&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;doc_count_error_upper_bound&quot;</span>: 0,  <span class="comment"># 错误上界，表示在聚合过程中可能存在一些错误，但错误数量不会超过这个值</span></span><br><span class="line">      <span class="string">&quot;sum_other_doc_count&quot;</span>: 0,         <span class="comment"># 表示在聚合过程中，除了返回的10个bucket，还有其他数量，这个数量就是sum_other_doc_count</span></span><br><span class="line">      <span class="string">&quot;buckets&quot;</span>: [                     <span class="comment"># 返回的bucket</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;electronics&quot;</span>,          <span class="comment"># 分组的key</span></span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 4                 <span class="comment"># 分组的数量</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;books&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;fashion&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;groceries&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;home_appliances&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 2</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>限定聚合范围</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;gte&quot;</span>: 100 <span class="comment"># 限定价格范围</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_count&quot;</span>: &#123; <span class="comment"># 自定义名称，返回每个组的数量</span></span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123; <span class="comment"># 桶聚合函数名称，terms表示按照字段的值进行分组</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span>, <span class="comment"># 按照category字段进行分组</span></span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 10, <span class="comment"># 只返回前10个，默认是10</span></span><br><span class="line">        <span class="string">&quot;order&quot;</span>: &#123;<span class="string">&quot;_count&quot;</span>: <span class="string">&quot;desc&quot;</span>&#125; <span class="comment"># 按照数量降序排序，默认是desc，Bucket聚合会统计Bucket内的文档数量，记为_count，并且按照_count降序排序</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="range（范围）">range（范围）</h3><ul class="lvl-0"><li class="lvl-2"><p>按照字段的值进行分组，并统计每个组的数量。</p></li><li class="lvl-2"><p>示例：按照价格范围进行分组，并统计每个组的数量。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_range&quot;</span>: &#123; <span class="comment"># 自定义名称，返回每个组的数量</span></span><br><span class="line">      <span class="string">&quot;range&quot;</span>: &#123; <span class="comment"># 桶聚合函数名称，range表示按照字段的值进行分组</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span>, <span class="comment"># 按照price字段进行分组</span></span><br><span class="line">        <span class="string">&quot;ranges&quot;</span>: [</span><br><span class="line">          &#123;<span class="string">&quot;to&quot;</span>: 100&#125;, <span class="comment"># 小于100</span></span><br><span class="line">          &#123;<span class="string">&quot;from&quot;</span>: 100, <span class="string">&quot;to&quot;</span>: 200&#125;, <span class="comment"># 100-200，包括100，不包括200</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;key&quot;</span>:<span class="string">&quot;&gt;=200&quot;</span>, <span class="comment"># 设定键值，用于区分不同范围</span></span><br><span class="line">            <span class="string">&quot;from&quot;</span>:200 <span class="comment"># 大于等于200</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span>: 5,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: 12,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;buckets&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;*-100.0&quot;</span>,</span><br><span class="line">          <span class="string">&quot;to&quot;</span>: 100,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 6</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;100.0-200.0&quot;</span>,</span><br><span class="line">          <span class="string">&quot;from&quot;</span>: 100,</span><br><span class="line">          <span class="string">&quot;to&quot;</span>: 200,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;&gt;=200&quot;</span>,</span><br><span class="line">          <span class="string">&quot;from&quot;</span>: 200,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 6</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="date-range（日期范围）">date_range（日期范围）</h3><ul class="lvl-0"><li class="lvl-2"><p>按照字段的值进行分组，并统计每个组的数量。</p></li><li class="lvl-2"><p>示例：按照日期范围进行分组，并统计每个组的数量。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;date_range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;date_range&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;created_at&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ranges&quot;</span>: [</span><br><span class="line">          &#123;<span class="string">&quot;to&quot;</span>: <span class="string">&quot;now-3d&quot;</span>&#125;, <span class="comment"># 小于当前时间减去3天</span></span><br><span class="line">          &#123;<span class="string">&quot;from&quot;</span>: <span class="string">&quot;now-3d&quot;</span>,<span class="string">&quot;to&quot;</span>: <span class="string">&quot;now-1d&quot;</span>&#125;, <span class="comment"># 大于当前时间减去3天（包含），小于当前时间减去1天</span></span><br><span class="line">          &#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;now-1d&quot;</span>,<span class="string">&quot;from&quot;</span>: <span class="string">&quot;now-1d&quot;</span>&#125; <span class="comment"># 大于当前时间减去1天（包含），并设置键值</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span>: 3,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: 12,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;date_range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;buckets&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;*-2025-04-20 03:14:17&quot;</span>,</span><br><span class="line">          <span class="string">&quot;to&quot;</span>: 1745118857610,</span><br><span class="line">          <span class="string">&quot;to_as_string&quot;</span>: <span class="string">&quot;2025-04-20 03:14:17&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 4</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;2025-04-20 03:14:17-2025-04-22 03:14:17&quot;</span>,</span><br><span class="line">          <span class="string">&quot;from&quot;</span>: 1745118857610,</span><br><span class="line">          <span class="string">&quot;from_as_string&quot;</span>: <span class="string">&quot;2025-04-20 03:14:17&quot;</span>,</span><br><span class="line">          <span class="string">&quot;to&quot;</span>: 1745291657610,</span><br><span class="line">          <span class="string">&quot;to_as_string&quot;</span>: <span class="string">&quot;2025-04-22 03:14:17&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 4</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;now-1d&quot;</span>,</span><br><span class="line">          <span class="string">&quot;from&quot;</span>: 1745291657610,</span><br><span class="line">          <span class="string">&quot;from_as_string&quot;</span>: <span class="string">&quot;2025-04-22 03:14:17&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 4</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期格式</span></span><br><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;date_range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;date_range&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;created_at&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ranges&quot;</span>: [</span><br><span class="line">          &#123;<span class="string">&quot;to&quot;</span>: <span class="string">&quot;2025-04-20 00:00:00&quot;</span>&#125;, <span class="comment"># 注意这里的格式必须与字段格式一致</span></span><br><span class="line">          &#123;<span class="string">&quot;from&quot;</span>: <span class="string">&quot;2025-04-20 00:00:00&quot;</span>,<span class="string">&quot;to&quot;</span>: <span class="string">&quot;2025-04-22 00:00:00&quot;</span>&#125;,</span><br><span class="line">          &#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;2025-04-22 00:00:00&quot;</span>,<span class="string">&quot;from&quot;</span>: <span class="string">&quot;2025-04-22 00:00:00&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="histogram（直方图）">histogram（直方图）</h3><ul class="lvl-0"><li class="lvl-2"><p>按照间隔进行分组，并统计每个组的数量。</p></li><li class="lvl-2"><p>示例：按照价格的间隔进行分组，并统计每个组的数量。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_histogram&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;histogram&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span>,</span><br><span class="line">        <span class="string">&quot;interval&quot;</span>: 500, <span class="comment"># 间隔500</span></span><br><span class="line">        <span class="string">&quot;extended_bounds&quot;</span>:&#123; <span class="comment"># 设置边界</span></span><br><span class="line">          <span class="string">&quot;min&quot;</span>:0, <span class="comment"># 最小值0</span></span><br><span class="line">          <span class="string">&quot;max&quot;</span>:2000 <span class="comment"># 最大值2000</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span>: 2,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: 12,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_histogram&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;buckets&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: 0,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 8</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: 500,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: 1000,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: 1500,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: 2000,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 0</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="top-hits（分桶取前N条）">top_hits（分桶取前N条）</h3><ul class="lvl-0"><li class="lvl-2"><p>按照字段的值进行分组，并返回每个组的前N条数据。</p></li><li class="lvl-2"><p>示例：按照category进行分组，并返回每个组的前3条数据。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_top_hits&quot;</span>: &#123; <span class="comment"># 自定义名称</span></span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span>  <span class="comment"># 按照category字段进行分组</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;top_hits&quot;</span>: &#123; <span class="comment"># 自定义名称</span></span><br><span class="line">          <span class="string">&quot;top_hits&quot;</span>: &#123; <span class="comment"># 返回每个组的前3条数据</span></span><br><span class="line">            <span class="string">&quot;size&quot;</span>: 3, <span class="comment"># 返回前3条数据</span></span><br><span class="line">            <span class="string">&quot;sort&quot;</span>: &#123; <span class="comment"># 按照created_at字段进行排序</span></span><br><span class="line">              <span class="string">&quot;created_at&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span> <span class="comment"># 降序</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子聚合">子聚合</h3><ul class="lvl-0"><li class="lvl-2"><p>子聚合：在聚合函数中，还可以再定义一个聚合函数。</p></li><li class="lvl-2"><p>示例：按照category进行分组，并统计价格信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_buckets&quot;</span>: &#123; <span class="comment"># 自定义名称</span></span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span>  <span class="comment"># 按照category字段进行分组</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123; <span class="comment"># 定义子聚合</span></span><br><span class="line">        <span class="string">&quot;price_stats&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;stats&quot;</span>: &#123; <span class="comment"># 统计价格信息</span></span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多层嵌套</span></span><br><span class="line"><span class="comment"># 先按照category进行分组，再按照address进行分组，并统计价格信息</span></span><br><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>:0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;category_buckets&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>:<span class="string">&quot;category&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;address_buckets&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;terms&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>:<span class="string">&quot;address.keyword&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;price_stats&quot;</span>:&#123;</span><br><span class="line">              <span class="string">&quot;stats&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;field&quot;</span>:<span class="string">&quot;price&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pipeline-Aggregation-管道聚合">Pipeline Aggregation(管道聚合)</h2><ul class="lvl-0"><li class="lvl-2"><p>支持对聚合分析的结果，再次进行聚合分析。</p></li><li class="lvl-2"><p>Pipeline 的分析结果会输出到原结果中，根据位置的不同，分为两类：</p><ul class="lvl-2"><li class="lvl-4">Sibling - 结果和现有分析结果同级<ul class="lvl-4"><li class="lvl-6">Max，min，Avg &amp; Sum Bucket</li><li class="lvl-6">Stats，Extended Status Bucket</li><li class="lvl-6">Percentiles Bucket</li></ul></li><li class="lvl-4">Parent -结果内嵌到现有的聚合分析结果之中<ul class="lvl-4"><li class="lvl-6">Derivative(求导)</li><li class="lvl-6">Cumultive Sum(累计求和)</li><li class="lvl-6">Moving Function(移动平均值)</li></ul></li></ul></li></ul><h3 id="Max，min，Avg-Sum-Bucket">Max，min，Avg &amp; Sum Bucket</h3><ul class="lvl-0"><li class="lvl-2"><p>Max，min，Avg &amp; Sum Bucket：对聚合分析的结果进行最大值、最小值、平均值、求和等操作。</p></li><li class="lvl-2"><p>示例：按照category进行分组求出商品的平均价格，并找出平均价格最低的分组</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>:0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;category_buckets&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>:<span class="string">&quot;category&quot;</span> <span class="comment"># 按照category字段进行分组</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;price_avg&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;avg&quot;</span>:&#123; <span class="comment"># 求价格平均值</span></span><br><span class="line">            <span class="string">&quot;field&quot;</span>:<span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;min_price_in_category&quot;</span>:&#123; <span class="comment"># 找出平均价格最低的分组</span></span><br><span class="line">      <span class="string">&quot;min_bucket&quot;</span>:&#123; <span class="comment"># 对聚合结果进行最小值操作</span></span><br><span class="line">        <span class="string">&quot;buckets_path&quot;</span>:<span class="string">&quot;category_buckets&gt;price_avg&quot;</span> <span class="comment"># 指定路径，对category_buckets聚合结果中的price_avg字段进行最小值操作</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stats，Extended-Status-Bucket">Stats，Extended Status Bucket</h3><ul class="lvl-0"><li class="lvl-2"><p>Stats，Extended Status Bucket：对聚合分析的结果进行统计操作，包括最大值、最小值、平均值、求和、数量等。</p></li><li class="lvl-2"><p>示例：按照category进行分组求出商品的平均价格，并对分组结果进行统计操作</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_buckets&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 10 <span class="comment"># 指定分组数量</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;stats_price_by_job&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;stats_bucket&quot;</span>: &#123; <span class="comment"># 对聚合结果进行统计操作</span></span><br><span class="line">        <span class="string">&quot;buckets_path&quot;</span>: <span class="string">&quot;category_buckets&gt;avg_price&quot;</span> <span class="comment"># 指定路径，对category_buckets聚合结果中的avg_price字段进行统计操作</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Percentiles-Bucket">Percentiles Bucket</h3><ul class="lvl-0"><li class="lvl-2"><p>Percentiles Bucket：对聚合分析的结果进行百分比操作，包括百分比、中位数等。</p></li><li class="lvl-2"><p>示例：按照category进行分组求出商品的平均价格，并对分组结果进行百分比操作</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_buckets&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 10</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;percentiles_price_by_category&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;percentiles_bucket&quot;</span>: &#123; <span class="comment"># 对聚合结果进行统计操作</span></span><br><span class="line">        <span class="string">&quot;buckets_path&quot;</span>: <span class="string">&quot;category_buckets&gt;avg_price&quot;</span> <span class="comment"># 指定路径，对category_buckets聚合结果中的avg_price字段进行统计操作</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cumulative-Sum">Cumulative Sum</h3><ul class="lvl-0"><li class="lvl-2"><p>Cumulative Sum：对聚合分析的结果进行累计求和操作。</p></li><li class="lvl-2"><p>示例: 按照价格进行分组，并统计平均价格信息，对分组结果进行累计求和操作。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_histogram&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;histogram&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span>,</span><br><span class="line">        <span class="string">&quot;interval&quot;</span>: 500, <span class="comment"># 间隔500</span></span><br><span class="line">        <span class="string">&quot;extended_bounds&quot;</span>:&#123; <span class="comment"># 设置边界</span></span><br><span class="line">          <span class="string">&quot;min&quot;</span>:0, <span class="comment"># 最小值0</span></span><br><span class="line">          <span class="string">&quot;max&quot;</span>:2000 <span class="comment"># 最大值2000</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;cumulative_sum_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;cumulative_sum&quot;</span>: &#123; <span class="comment"># 对聚合结果进行累计求和操作</span></span><br><span class="line">            <span class="string">&quot;buckets_path&quot;</span>: <span class="string">&quot;avg_price&quot;</span> <span class="comment"># 指定路径，对avg_price字段进行累计求和操作</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Derivative">Derivative</h3><ul class="lvl-0"><li class="lvl-2"><p>Derivative：对聚合分析的结果进行求导操作。</p></li><li class="lvl-2"><p>Derivative 聚合查询是 Elasticsearch 中的一种高级聚合类型，用于计算某个度量值随时间（或其他顺序字段）变化的速率。它通常用于时间序列分析，以揭示度量值的增减趋势。</p></li><li class="lvl-2"><p>示例：显示每天的平均价格以及平均价格的变化趋势</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_over_time&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;date_histogram&quot;</span>: &#123; <span class="comment"># 按照日期进行分组</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;created_at&quot;</span>, <span class="comment"># 指定字段</span></span><br><span class="line">        <span class="string">&quot;calendar_interval&quot;</span>: <span class="string">&quot;day&quot;</span> <span class="comment"># 指定时间间隔，可用的值：year、quarter、month、week、day、hour、minute、second</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;average_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;price_derivative&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;derivative&quot;</span>: &#123; <span class="comment"># 对聚合结果进行求导操作</span></span><br><span class="line">            <span class="string">&quot;buckets_path&quot;</span>: <span class="string">&quot;average_price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Moving-Function">Moving Function</h3><ul class="lvl-0"><li class="lvl-2"><p>Moving Function：对聚合分析的结果进行移动平均值操作。</p></li><li class="lvl-2"><p>Moving Function 聚合查询是 Elasticsearch 中的一种高级聚合类型，用于计算某个度量值在时间窗口内的移动平均值。它通常用于时间序列分析，以了解度量值的变化趋势。</p></li><li class="lvl-2"><p>示例：计算 price 字段的 7 天移动平均值</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_over_time&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;date_histogram&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;created_at&quot;</span>,</span><br><span class="line">        <span class="string">&quot;calendar_interval&quot;</span>: <span class="string">&quot;day&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;daily_avg_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;moving_avg_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;moving_fn&quot;</span>: &#123; <span class="comment"># 对聚合结果进行移动平均值操作</span></span><br><span class="line">            <span class="string">&quot;buckets_path&quot;</span>: <span class="string">&quot;daily_avg_price&quot;</span>, <span class="comment"># 指定路径，对daily_avg_price字段进行移动平均值操作</span></span><br><span class="line">            <span class="string">&quot;script&quot;</span>: <span class="string">&quot;MovingFunctions.unweightedAvg(values)&quot;</span>, <span class="comment"># 指定脚本，计算移动平均值</span></span><br><span class="line">            <span class="string">&quot;window&quot;</span>: 7, <span class="comment"># 窗口大小，默认为 10</span></span><br><span class="line">            <span class="string">&quot;shift&quot;</span>: 0 <span class="comment"># 窗口偏移量，默认为 0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES-聚合性能优化">ES 聚合性能优化</h2><h3 id="索引预排序">索引预排序</h3><ul class="lvl-0"><li class="lvl-2"><p>如果是 Elasticsearch 6.X 之后版本，可以在插入数据时对索引进行预排序，而不是在查询时再对索引进行排序，这将提高范围查询（range query）和排序操作的性能。</p></li><li class="lvl-2"><p>但预排序将增加 Elasticsearch 写入的成本，导致大约 40%-50% 的写性能下降，如果应用场景是更关注写性能的业务，开启索引预排序不是一个很好的选择。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;index&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;sort.field&quot;</span>: <span class="string">&quot;create_time&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sort.order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;create_time&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用分片请求缓存">使用分片请求缓存</h3><ul class="lvl-0"><li class="lvl-2"><p>聚合语句中，设置：size：0，就会使用分片请求缓存缓存结果。size = 0 的含义是：只返回聚合结果，不返回查询结果。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;remark_agg&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;remark.keyword&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拆分聚合，使聚合并行化">拆分聚合，使聚合并行化</h3><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 查询条件中同时有多个条件聚合，默认情况下聚合不是并行运行的。</p></li><li class="lvl-2"><p>当为每个聚合提供自己的查询并执行 msearch 时，性能会有显著提升。</p></li><li class="lvl-2"><p>因此，在 CPU 资源不是瓶颈的前提下，如果想缩短响应时间，可以将多个聚合拆分为多个查询，借助：msearch 实现并行聚合。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常规的多条件聚合实现</span></span><br><span class="line">GET /employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;job_agg&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;job.keyword&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_salary&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;max&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;salary&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># msearch 拆分多个语句的聚合实现</span></span><br><span class="line">GET _msearch</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:<span class="string">&quot;employees&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;size&quot;</span>:0,<span class="string">&quot;aggs&quot;</span>:&#123;<span class="string">&quot;job_agg&quot;</span>:&#123;<span class="string">&quot;terms&quot;</span>:&#123;<span class="string">&quot;field&quot;</span>: <span class="string">&quot;job.keyword&quot;</span>&#125;&#125;&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:<span class="string">&quot;employees&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;size&quot;</span>:0,<span class="string">&quot;aggs&quot;</span>:&#123;<span class="string">&quot;max_salary&quot;</span>:&#123;<span class="string">&quot;max&quot;</span>:&#123;<span class="string">&quot;field&quot;</span>: <span class="string">&quot;salary&quot;</span>&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 Elasticsearch 的 REST APIs：聚合查询&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/8.17/rest-apis.html&quot;&gt;官方文档:REST APIs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/8.17/search-aggregations.html&quot;&gt;官方文档:Aggregations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;a href=&quot;/2025/04/17/elasticsearch-05-api/&quot; title=&quot;Elasticsearch 的 REST APIs&quot;&gt;Elasticsearch 的 REST APIs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 的 REST APIs</title>
    <link href="https://blog.hanqunfeng.com/2025/04/17/elasticsearch-05-api/"/>
    <id>https://blog.hanqunfeng.com/2025/04/17/elasticsearch-05-api/</id>
    <published>2025-04-17T13:30:05.000Z</published>
    <updated>2025-04-23T02:42:29.434Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 Elasticsearch 的 REST APIs</p></li><li class="lvl-2"><p>Elasticsearch版本8.17.3</p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/rest-apis.html">官方文档:REST APIs</a></p></li><li class="lvl-2"><a href="/2025/04/22/elasticsearch-06-api-aggs/" title="Elasticsearch 的 REST APIs:聚合查询">Elasticsearch 的 REST APIs:聚合查询</a></li></ul><span id="more"></span><h2 id="返回内容格式化">返回内容格式化</h2><ul class="lvl-0"><li class="lvl-2"><p>返回json信息格式: <code>?pretty</code> 输出格式化后的json，比如：<code>curl http://localhost:9200/_cluster/health?pretty</code></p></li><li class="lvl-2"><p>返回行信息格式: <code>?v</code> 输出内容上方会加上标题行，比如：<code>curl http://localhost:9200/_cat/health?v</code></p></li></ul><h2 id="CAT-APIs">CAT APIs</h2><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 提供了 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/cat.html">CAT APIs</a>，它们提供了一种简单的方式来查看集群状态和集群中的各种资源，比如索引、分片、节点等。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET     /_cat/health             <span class="comment">#查看集群当前状态：红、黄、绿</span></span><br><span class="line">GET     /_cat/master             <span class="comment">#查看master节点信息</span></span><br><span class="line">GET     /_cat/nodes              <span class="comment">#查看所有节点信息</span></span><br><span class="line">GET     /_cat/plugins            <span class="comment">#查看集群各个节点上的plugin信息</span></span><br><span class="line">GET     /_cat/indices            <span class="comment">#查看集群中所有index的详细信息</span></span><br><span class="line">GET     /_cat/indices/&#123;index&#125;    <span class="comment">#查看集群中指定index的详细信息，index：索引名称</span></span><br><span class="line">GET     /_cat/allocation         <span class="comment">#查看单节点的shard分配整体情况</span></span><br><span class="line">GET     /_cat/shards             <span class="comment">#查看各shard的详细情况</span></span><br><span class="line">GET     /_cat/shards/&#123;index&#125;     <span class="comment">#查看指定分片的详细情况</span></span><br><span class="line">GET     /_cat/segments           <span class="comment">#查看各index的segment详细信息,包括segment名, 所属shard, 内存(磁盘)占用大小, 是否刷盘</span></span><br><span class="line">GET     /_cat/segments/&#123;index&#125;   <span class="comment">#查看指定index的segment详细信息</span></span><br><span class="line">GET     /_cat/count              <span class="comment">#查看当前集群的doc数量</span></span><br><span class="line">GET     /_cat/count/&#123;index&#125;      <span class="comment">#查看指定索引的doc数量</span></span><br><span class="line">GET     /_cat/recovery           <span class="comment">#查看集群内每个shard的recovery过程.调整replica。</span></span><br><span class="line">GET     /_cat/recovery/&#123;index&#125;   <span class="comment">#查看指定索引shard的recovery过程</span></span><br><span class="line">GET     /_cat/pending_tasks      <span class="comment">#查看当前集群的pending task</span></span><br><span class="line">GET     /_cat/aliases            <span class="comment">#查看集群中所有alias信息,路由配置等</span></span><br><span class="line">GET     /_cat/aliases/&#123;<span class="built_in">alias</span>&#125;    <span class="comment">#查看指定索引的alias信息</span></span><br><span class="line">GET     /_cat/thread_pool        <span class="comment">#查看集群各节点内部不同类型的threadpool的统计信息,</span></span><br><span class="line">GET     /_cat/fielddata          <span class="comment">#查看当前集群各个节点的fielddata内存使用情况</span></span><br><span class="line">GET     /_cat/fielddata/&#123;fields&#125; <span class="comment">#查看指定field的内存使用情况,里面传field属性对应的值</span></span><br><span class="line">GET     /_cat/nodeattrs          <span class="comment">#查看单节点的自定义属性</span></span><br><span class="line">GET     /_cat/repositories       <span class="comment">#输出集群中注册快照存储库</span></span><br><span class="line">GET     /_cat/templates          <span class="comment">#输出当前正在存在的模板信息</span></span><br></pre></td></tr></table></figure><h2 id="Cluster-APIs">Cluster APIs</h2><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 提供了一系列的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/cluster.html">Cluster APIs</a>，它们提供了管理和监控集群状态的功能</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET     /_cluster/health            <span class="comment"># 获取集群的健康状态信息，包括了集群总体的状况如status、number_of_nodes等。</span></span><br><span class="line">GET     /_cluster/stats             <span class="comment"># 提供整个集群层面的统计信息，包含索引、节点和其他高级指标。</span></span><br><span class="line">GET     /_cluster/state             <span class="comment"># 显示集群元数据的状态，包括设置、块、路由表及元数据等，允许用户查看集群的当前视图。</span></span><br><span class="line">POST    /_cluster/reroute           <span class="comment"># POST请求，用于手动改变分片分配情况，可以实现如迁移分片、取消分配等操作。</span></span><br><span class="line">GET     /_cluster/nodes/hot_threads <span class="comment"># 返回集群中各个节点“最热”的线程堆栈跟踪，默认显示前三个CPU时间最长的线程。</span></span><br><span class="line">GET     /_cluster/allocation/explain <span class="comment"># 解释为何某个分片被如此分配，并提供如何调整的建议。</span></span><br><span class="line">GET     /_cluster/pending_tasks     <span class="comment"># 列出所有等待执行的任务列表。</span></span><br><span class="line">GET     /_cluster/settings          <span class="comment"># 查看整个集群级别的设置。</span></span><br><span class="line">PUT     /_cluster/settings          <span class="comment"># 更新整个集群级别的设置。</span></span><br></pre></td></tr></table></figure><h2 id="Index-APIs">Index APIs</h2><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 提供了 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/indices.html">Index APIs</a>，它们提供了对索引的创建、更新、查询和删除等操作。</p></li><li class="lvl-2"><p>创建索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PUT /&lt;target&gt;</span></span><br><span class="line"><span class="comment"># 这里 shopping 为索引名称，但此时没有为索引设置分片策略，也没有设置字段信息</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;shards_acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;index&quot;</span>:<span class="string">&quot;shopping&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建索引并设置索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PUT /&lt;target&gt;</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;settings&quot;:&#123;&quot;number_of_shards&quot;:&quot;1&quot;,&quot;number_of_replicas&quot;:&quot;2&quot;&#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;shards_acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;index&quot;</span>:<span class="string">&quot;shopping&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建并映射索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PUT /&lt;target&gt;</span></span><br><span class="line"><span class="comment"># 这里设置索引分片数量为1，副本数量为2，并设置字段信息</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;settings&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;number_of_shards&quot;:&quot;1&quot;,</span></span><br><span class="line"><span class="string">      &quot;number_of_replicas&quot;:&quot;2&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;mappings&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;properties&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;title&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;text&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;category&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;keyword&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;price&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;double&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;count&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;integer&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment">## settings: 这个参数用于配置索引的设置，包括分片数量和副本数量。</span></span><br><span class="line"><span class="comment">### number_of_shards: 这个参数指定了索引中分片的数量。在这个例子中，number_of_shards 设置为 1，意味着索引将只有一个主分片。</span></span><br><span class="line"><span class="comment">### number_of_replicas: 这个参数指定了每个主分片的副本数量。在这个例子中，number_of_replicas 设置为 2，意味着每个主分片将有两个副本。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## mappings: 这个参数用于定义索引中的字段和字段类型。</span></span><br><span class="line"><span class="comment">### properties: 这个参数定义了索引中的字段和字段类型。在这个例子中，有四个字段：title、category、images 和 price。</span></span><br><span class="line"><span class="comment">### title: 这个字段的类型是 text，表示它是一个全文检索字段。text 适合存储长文本数据，并支持全文搜索。</span></span><br><span class="line"><span class="comment">### category: 这个字段的类型是 keyword，表示它是一个关键字字段，不支持全文检索。keyword 适合存储不需要分词的短文本数据（如标签、类别等），并且可以用于聚合和过滤。</span></span><br><span class="line"><span class="comment">### price: 这个字段的类型是 double，表示它是一个数字字段。double 表示这是一个双精度浮点数字段，适合存储数值数据，如价格</span></span><br><span class="line"><span class="comment">### count: 这个字段的类型是 integer，表示它是一个整数字段。integer 表示这是一个整数字段，适合存储整数数据，如商品数量等。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;shards_acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;index&quot;</span>:<span class="string">&quot;shopping&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>更新索引映射</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PUT /&lt;target&gt;/_mapping</span></span><br><span class="line"><span class="comment"># 注意该api只能增加新的字段，不能修改已有字段，如果要修改源字段类型或者分词器类型，下文会介绍</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_mapping&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;properties&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;remark&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;:&quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;:&quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;search_analyzer&quot;:&quot;ik_smart&quot;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;address&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;fields&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;keyword&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;tags&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;created_at&quot;: &#123;&quot;type&quot;: &quot;date&quot;, &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;&#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># 这里为索引添加了4个字段</span></span><br><span class="line"><span class="comment"># remark：新增字段，类型为text，分词器为ik_max_word，搜索分词器为ik_smart</span></span><br><span class="line">  <span class="comment"># analyzer: 索引分词器</span></span><br><span class="line">  <span class="comment"># search_analyzer：搜索分词器</span></span><br><span class="line">  <span class="comment"># ik_max_word：中文分词器，将句子拆分为最多词元，适合长句子</span></span><br><span class="line">  <span class="comment"># ik_smart：中文分词器，将句子拆分为最少词元，适合短句子</span></span><br><span class="line"><span class="comment"># address：新增字段，类型为text，分词器为ik_max_word，搜索分词器未指定，默认与分词器同一个，这里还为address添加了keyword字段，用于存储原始数据，以支持精确搜索</span></span><br><span class="line"><span class="comment"># tags：新增字段，类型为keyword，不支持分词，适合存储短文本数据（如标签、类别等），并且可以用于聚合和过滤，可以存储数组</span></span><br><span class="line"><span class="comment"># created_at：新增字段，类型为date，格式为yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>更新索引设置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PUT /&lt;target&gt;/_settings</span></span><br><span class="line"><span class="comment"># 注意这里不能更新number_of_shards</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_settings&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;number_of_replicas&quot;:&quot;1&quot;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看指定索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /&lt;target&gt;</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping?pretty&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;shopping&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;aliases&quot;</span> : &#123; &#125;,</span><br><span class="line">    <span class="string">&quot;mappings&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;properties&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;fields&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;keyword&quot;</span> : &#123;</span><br><span class="line">              <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;category&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;count&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;created_at&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;date&quot;</span>,</span><br><span class="line">          <span class="string">&quot;format&quot;</span> : <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;price&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;double&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;remark&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">          <span class="string">&quot;search_analyzer&quot;</span> : <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;title&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;settings&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;index&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;routing&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;allocation&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;include&quot;</span> : &#123;</span><br><span class="line">              <span class="string">&quot;_tier_preference&quot;</span> : <span class="string">&quot;data_content&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;number_of_shards&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;provided_name&quot;</span> : <span class="string">&quot;shopping&quot;</span>,</span><br><span class="line">        <span class="string">&quot;creation_date&quot;</span> : <span class="string">&quot;1745291743120&quot;</span>,</span><br><span class="line">        <span class="string">&quot;number_of_replicas&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uuid&quot;</span> : <span class="string">&quot;Y1IWrdlQTUm-CbbIWweSxQ&quot;</span>,</span><br><span class="line">        <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;created&quot;</span> : <span class="string">&quot;8525000&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看索引设置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /&lt;target&gt;/_settings</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_settings?pretty&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;shopping&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;mappings&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;properties&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;fields&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;keyword&quot;</span> : &#123;</span><br><span class="line">              <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;category&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;count&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;created_at&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;date&quot;</span>,</span><br><span class="line">          <span class="string">&quot;format&quot;</span> : <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;price&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;double&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;remark&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">          <span class="string">&quot;search_analyzer&quot;</span> : <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;title&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看字段映射</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /&lt;target&gt;/_mapping/field/&lt;field&gt;</span></span><br><span class="line"><span class="comment"># shopping 为索引名称，title 为字段名称</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_mapping/field/title?pretty&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;shopping&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;mappings&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;title&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;full_name&quot;</span> : <span class="string">&quot;title&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mapping&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;title&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>判断索引是否存在</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 -I 参数来发送 HEAD 请求，可以获取响应头而不必下载响应体。</span></span><br><span class="line"><span class="comment"># HEAD /&lt;target&gt;</span></span><br><span class="line">curl -I -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">X-elastic-product: Elasticsearch</span><br><span class="line">content-type: application/json</span><br><span class="line">content-length: 603</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个命令不会返回响应体，但它的 HTTP 响应代码可以告诉你索引的存在情况：</span></span><br><span class="line">  <span class="comment"># 200 OK 表示索引存在。</span></span><br><span class="line">  <span class="comment"># 404 Not Found 表示索引不存在。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DELETE /&lt;target&gt;</span></span><br><span class="line">curl -X DELETE -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>为索引创建别名</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：不同索引可以有相同名称的别名，所以在数据结构一致的情况下，我们可以为不同的索引创建相同的别名，然后根据别名进行数据查询</span></span><br><span class="line"><span class="comment"># POST /&lt;target&gt;/_alias/&lt;alias&gt;</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_alias/shopping_alias&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用如下方法</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_aliases&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;actions&quot;: [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        &quot;add&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;index&quot;: &quot;shopping&quot;,</span></span><br><span class="line"><span class="string">          &quot;alias&quot;: &quot;shopping_alias2&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看索引别名</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /&lt;target&gt;/_alias/&lt;alias&gt;</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_alias/shopping_alias?pretty&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;shopping&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;aliases&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;shopping_alias&quot;</span> : &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前索引的所有别名</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_alias?pretty&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有索引的别名</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_alias?pretty&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>为索引删除别名</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DELETE /&lt;target&gt;/_alias/&lt;alias&gt;</span></span><br><span class="line">curl -X DELETE -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_alias/shopping_alias&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="如何修改索引字段类型或分词器类型？">如何修改索引字段类型或分词器类型？</h3><ul class="lvl-0"><li class="lvl-2"><p>创建新的索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里为title字段增加分词器</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping_new&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;settings&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;number_of_shards&quot;:&quot;1&quot;,</span></span><br><span class="line"><span class="string">      &quot;number_of_replicas&quot;:&quot;2&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;mappings&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;properties&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;category&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;keyword&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;price&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;double&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;count&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;integer&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;title&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;text&quot;,</span></span><br><span class="line"><span class="string">          &quot;analyzer&quot;:&quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">          &quot;search_analyzer&quot;:&quot;ik_smart&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;remark&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;:&quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;:&quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;search_analyzer&quot;:&quot;ik_smart&quot;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;address&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;fields&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;keyword&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;tags&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;created_at&quot;: &#123;&quot;type&quot;: &quot;date&quot;, &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;&#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>将原索引的数据迁移到新索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_reindex&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;source&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;index&quot;: &quot;shopping&quot;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;dest&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;index&quot;: &quot;shopping_new&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;took&quot;</span>:101,<span class="string">&quot;timed_out&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;total&quot;</span>:2,<span class="string">&quot;updated&quot;</span>:0,<span class="string">&quot;created&quot;</span>:2,<span class="string">&quot;deleted&quot;</span>:0,<span class="string">&quot;batches&quot;</span>:1,<span class="string">&quot;version_conflicts&quot;</span>:0,<span class="string">&quot;noops&quot;</span>:0,<span class="string">&quot;retries&quot;</span>:&#123;<span class="string">&quot;bulk&quot;</span>:0,<span class="string">&quot;search&quot;</span>:0&#125;,<span class="string">&quot;throttled_millis&quot;</span>:0,<span class="string">&quot;requests_per_second&quot;</span>:-1.0,<span class="string">&quot;throttled_until_millis&quot;</span>:0,<span class="string">&quot;failures&quot;</span>:[]&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除原索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>为新索引创建别名</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping_new/_alias/shopping&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;errors&quot;</span>:<span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="数据增删改基本操作">数据增删改基本操作</h2><ul class="lvl-0"><li class="lvl-2"><p>新增数据</p><ul class="lvl-2"><li class="lvl-4">1.为指定索引插入一条数据(_doc方式：不指定id默认随机字符串)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _doc 的方式创建索引数据时，可以不指定id，默认会创建新的id，id类型为随机字符串</span></span><br><span class="line"><span class="comment"># POST /&lt;target&gt;/_doc</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_doc?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;category&quot;: &quot;electronics&quot;,</span></span><br><span class="line"><span class="string">    &quot;price&quot;: 999.99,</span></span><br><span class="line"><span class="string">    &quot;count&quot;: 10,</span></span><br><span class="line"><span class="string">    &quot;title&quot;: &quot;Smartphone X - 128GB&quot;,</span></span><br><span class="line"><span class="string">    &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;,</span></span><br><span class="line"><span class="string">    &quot;address&quot;: &quot;123 Electronic Ave, Beijing, China&quot;,</span></span><br><span class="line"><span class="string">    &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;],</span></span><br><span class="line"><span class="string">    &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;shopping_new&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;sImNW5YBmgASmV9McVvI&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 3,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4">2.为指定索引插入一条数据(_doc方式：指定id)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _doc 的方式创建索引数据时，如果指定id，再次执行时会先删除原数据再创建新数据，所以必须全量更新才行。</span></span><br><span class="line"><span class="comment"># PUT /&lt;target&gt;/_doc</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_doc/100?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;category&quot;: &quot;electronics&quot;,</span></span><br><span class="line"><span class="string">    &quot;price&quot;: 999.99,</span></span><br><span class="line"><span class="string">    &quot;count&quot;: 10,</span></span><br><span class="line"><span class="string">    &quot;title&quot;: &quot;Smartphone X - 128GB&quot;,</span></span><br><span class="line"><span class="string">    &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;,</span></span><br><span class="line"><span class="string">    &quot;address&quot;: &quot;123 Electronic Ave, Beijing, China&quot;,</span></span><br><span class="line"><span class="string">    &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;],</span></span><br><span class="line"><span class="string">    &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;shopping_new&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;100&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 3,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 2,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4"><p>3.为指定索引插入一条数据(_create方式：指定id)</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _create 的方式创建索引数据时，必须指定id,而且只能执行一次，因为执行过一次后指定id的数据就存在了，不能再次创建</span></span><br><span class="line"><span class="comment"># POST /&lt;target&gt;/_create/&lt;id&gt;</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_create/1?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;category&quot;: &quot;electronics&quot;,</span></span><br><span class="line"><span class="string">    &quot;price&quot;: 999.99,</span></span><br><span class="line"><span class="string">    &quot;count&quot;: 10,</span></span><br><span class="line"><span class="string">    &quot;title&quot;: &quot;Smartphone X - 128GB&quot;,</span></span><br><span class="line"><span class="string">    &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;,</span></span><br><span class="line"><span class="string">    &quot;address&quot;: &quot;123 Electronic Ave, Beijing, China&quot;,</span></span><br><span class="line"><span class="string">    &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;],</span></span><br><span class="line"><span class="string">    &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>修改数据</p><ul class="lvl-2"><li class="lvl-4">1.修改全部数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST /&lt;target&gt;/_doc/&lt;id&gt;</span></span><br><span class="line"><span class="comment"># 执行时会先删除原数据再创建新数据，所以必须全量更新才行。</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_doc/sImNW5YBmgASmV9McVvI&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;category&quot;: &quot;electronics&quot;,</span></span><br><span class="line"><span class="string">    &quot;price&quot;: 999.99,</span></span><br><span class="line"><span class="string">    &quot;count&quot;: 20,</span></span><br><span class="line"><span class="string">    &quot;title&quot;: &quot;Smartphone X - 128GB&quot;,</span></span><br><span class="line"><span class="string">    &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;,</span></span><br><span class="line"><span class="string">    &quot;address&quot;: &quot;123 Electronic Ave, Beijing, China&quot;,</span></span><br><span class="line"><span class="string">    &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;],</span></span><br><span class="line"><span class="string">    &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4">2.修改部分数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST /&lt;target&gt;/_update/&lt;id&gt;</span></span><br><span class="line"><span class="comment"># 执行时只会修改指定字段，不会删除原数据，所以可以部分更新。</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_update/1&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;doc&quot;:&#123;&quot;count&quot;:100&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>查询指定索引的指定id的数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /&lt;target&gt;/_doc/&lt;id&gt;</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_doc/100?pretty&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;shopping_new&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;100&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 2,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;category&quot;</span> : <span class="string">&quot;electronics&quot;</span>,</span><br><span class="line">    <span class="string">&quot;price&quot;</span> : 999.99,</span><br><span class="line">    <span class="string">&quot;count&quot;</span> : 10,</span><br><span class="line">    <span class="string">&quot;title&quot;</span> : <span class="string">&quot;Smartphone X - 128GB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;remark&quot;</span> : <span class="string">&quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;address&quot;</span> : <span class="string">&quot;123 Electronic Ave, Beijing, China&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tags&quot;</span> : [</span><br><span class="line">      <span class="string">&quot;latest&quot;</span>,</span><br><span class="line">      <span class="string">&quot;smartphone&quot;</span>,</span><br><span class="line">      <span class="string">&quot;technology&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;created_at&quot;</span> : <span class="string">&quot;2025-04-22 03:30:02&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除指定索引的指定id的数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DELETE /&lt;target&gt;/_doc/&lt;id&gt;</span></span><br><span class="line">curl -X DELETE -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_doc/100&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除索引全部数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_delete_by_query?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;match_all&quot;:&#123;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="批量操作">批量操作</h2><ul class="lvl-0"><li class="lvl-2"><p>批量新增数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意数据行要顶行写，前面不要有空格</span></span><br><span class="line"><span class="comment"># POST /_bulk</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;1&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;electronics&quot;, &quot;price&quot;: 999.99, &quot;count&quot;: 10, &quot;title&quot;: &quot;Smartphone X - 128GB&quot;, &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;, &quot;address&quot;: &quot;广州天河公园&quot;, &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;], &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;2&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;fashion&quot;, &quot;price&quot;: 49.99, &quot;count&quot;: 25, &quot;title&quot;: &quot;Designer T-shirt&quot;, &quot;remark&quot;: &quot;Trendy designer T-shirt made with high quality fabric.&quot;, &quot;address&quot;: &quot;广州荔湾大厦&quot;, &quot;tags&quot;: [&quot;clothing&quot;, &quot;designer&quot;, &quot;style&quot;], &quot;created_at&quot;: &quot;2025-04-21 12:15:00&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;3&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;home_appliances&quot;, &quot;price&quot;: 299.99, &quot;count&quot;: 5, &quot;title&quot;: &quot;Robot Vacuum Cleaner&quot;, &quot;remark&quot;: &quot;Efficient robot vacuum cleaner with smart navigation.&quot;, &quot;address&quot;: &quot;广州白云山公园&quot;, &quot;tags&quot;: [&quot;appliances&quot;, &quot;vacuum&quot;, &quot;robot&quot;], &quot;created_at&quot;: &quot;2025-04-20 08:45:30&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;4&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;books&quot;, &quot;price&quot;: 19.99, &quot;count&quot;: 100, &quot;title&quot;: &quot;Inspirational Novel&quot;, &quot;remark&quot;: &quot;A gripping novel that inspires and motivates.&quot;, &quot;address&quot;: &quot;321 Book Rd, Shenzhen, China&quot;, &quot;tags&quot;: [&quot;book&quot;, &quot;novel&quot;, &quot;inspiration&quot;], &quot;created_at&quot;: &quot;2025-04-19 10:05:00&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;5&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;groceries&quot;, &quot;price&quot;: 3.99, &quot;count&quot;: 200, &quot;title&quot;: &quot;Organic Apples&quot;, &quot;remark&quot;: &quot;Fresh and crispy organic apples.&quot;, &quot;address&quot;: &quot;654 Grocery Ln, Chengdu, China&quot;, &quot;tags&quot;: [&quot;fruit&quot;, &quot;organic&quot;, &quot;healthy&quot;], &quot;created_at&quot;: &quot;2025-04-18 14:30:45&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;6&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;electronics&quot;, &quot;price&quot;: 1999.99, &quot;count&quot;: 15, &quot;title&quot;: &quot;Smartphone X - 256GB&quot;, &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;, &quot;address&quot;: &quot;广州天河公园&quot;, &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;], &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot; &#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># index: 用于创建新文档或替换已有文档。</span></span><br><span class="line"><span class="comment"># create: 用于创建新文档，如果文档已存在，则返回错误。</span></span><br><span class="line"><span class="comment"># _index: 指定索引名称。</span></span><br><span class="line"><span class="comment"># _id: 指定文档ID。如果不指定则会自动生成一个随机的ID。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量新增数据时也可以在url中指定索引名称</span></span><br><span class="line"><span class="comment"># 此时可以指定id，如果不指定则自动生成一个随机字符串的ID</span></span><br><span class="line"><span class="comment"># POST /&lt;target&gt;/_bulk</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;electronics&quot;, &quot;price&quot;: 999.99, &quot;count&quot;: 10, &quot;title&quot;: &quot;Smartphone X - 128GB&quot;, &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;, &quot;address&quot;: &quot;广州天河公园&quot;, &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;], &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;fashion&quot;, &quot;price&quot;: 49.99, &quot;count&quot;: 25, &quot;title&quot;: &quot;Designer T-shirt&quot;, &quot;remark&quot;: &quot;Trendy designer T-shirt made with high quality fabric.&quot;, &quot;address&quot;: &quot;广州荔湾大厦&quot;, &quot;tags&quot;: [&quot;clothing&quot;, &quot;designer&quot;, &quot;style&quot;], &quot;created_at&quot;: &quot;2025-04-21 12:15:00&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;home_appliances&quot;, &quot;price&quot;: 299.99, &quot;count&quot;: 5, &quot;title&quot;: &quot;Robot Vacuum Cleaner&quot;, &quot;remark&quot;: &quot;Efficient robot vacuum cleaner with smart navigation.&quot;, &quot;address&quot;: &quot;广州白云山公园&quot;, &quot;tags&quot;: [&quot;appliances&quot;, &quot;vacuum&quot;, &quot;robot&quot;], &quot;created_at&quot;: &quot;2025-04-20 08:45:30&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;books&quot;, &quot;price&quot;: 19.99, &quot;count&quot;: 100, &quot;title&quot;: &quot;Inspirational Novel&quot;, &quot;remark&quot;: &quot;A gripping novel that inspires and motivates.&quot;, &quot;address&quot;: &quot;321 Book Rd, Shenzhen, China&quot;, &quot;tags&quot;: [&quot;book&quot;, &quot;novel&quot;, &quot;inspiration&quot;], &quot;created_at&quot;: &quot;2025-04-19 10:05:00&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;groceries&quot;, &quot;price&quot;: 3.99, &quot;count&quot;: 200, &quot;title&quot;: &quot;Organic Apples&quot;, &quot;remark&quot;: &quot;Fresh and crispy organic apples.&quot;, &quot;address&quot;: &quot;654 Grocery Ln, Chengdu, China&quot;, &quot;tags&quot;: [&quot;fruit&quot;, &quot;organic&quot;, &quot;healthy&quot;], &quot;created_at&quot;: &quot;2025-04-18 14:30:45&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;electronics&quot;, &quot;price&quot;: 1999.99, &quot;count&quot;: 15, &quot;title&quot;: &quot;Smartphone X - 256GB&quot;, &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;, &quot;address&quot;: &quot;广州天河公园&quot;, &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;], &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot; &#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>批量修改数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意数据行要顶行写，前面不要有空格</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;shopping&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;doc&quot;:&#123;&quot;title&quot;:&quot;Smartphone X2 - 128GB&quot;,&quot;price&quot;:1000.11&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;shopping&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;doc&quot;:&#123;&quot;title&quot;:&quot;T-shirt&quot;,&quot;price&quot;:45.99&#125;&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># update: 用于更新文档。</span></span><br><span class="line"><span class="comment"># doc: 指定要更新的字段。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>批量删除数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意数据行要顶行写，前面不要有空格</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;shopping&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;shopping&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;shopping&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;shopping&quot;,&quot;_id&quot;:&quot;4&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># delete: 用于删除文档。</span></span><br></pre></td></tr></table></figure><h2 id="条件更新">条件更新</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST /&lt;target&gt;/_update_by_query</span></span><br><span class="line"><span class="comment"># 这里将category为华为的数据价格改为1999</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_update_by_query?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;match&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;category&quot;: &quot;books&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;script&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;source&quot;: &quot;ctx._source.price = 20.99&quot;,</span></span><br><span class="line"><span class="string">      &quot;lang&quot;: &quot;painless&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment">## &quot;query&quot;: &#123;&#125;  查询条件</span></span><br><span class="line"><span class="comment">## &quot;script&quot;: &#123;&#125;  脚本</span></span><br><span class="line"><span class="comment">### source: 脚本内容</span></span><br><span class="line"><span class="comment">### lang: 脚本语言</span></span><br><span class="line"><span class="comment">#### painless 是 Elasticsearch 官方提供的脚本语言，它提供了许多内置函数和变量，可以方便地实现各种复杂的逻辑操作。https://www.elastic.co/guide/en/elasticsearch/painless/current/painless-lang-spec.html</span></span><br></pre></td></tr></table></figure><h2 id="条件删除">条件删除</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST /&lt;target&gt;/_delete_by_query</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_delete_by_query?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;category&quot;:&quot;books&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="条件查询">条件查询</h2><h3 id="match-all-全部匹配查询">match_all: 全部匹配查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /&lt;target&gt;/_search</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span></span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;match_all&quot;:&#123;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者简写为</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="term-精确匹配查询（关键字查询，即不分词）">term: 精确匹配查询（关键字查询，即不分词）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;category&quot;:&quot;electronics&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果字段被额外设置 keyword 类型，则需要加上 .keyword 后缀</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;address.keyword&quot;:&quot;广州白云山公园&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># term处理多值字段(数组)时，term查询是包含，不是等于</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;tags&quot;:&quot;technology&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="terms-多关键字精确匹配查询">terms: 多关键字精确匹配查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;terms&quot;:&#123;&quot;category&quot;:[&quot;electronics&quot;,&quot;books&quot;]&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="range-范围查询">range: 范围查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;range&quot;:&#123;&quot;price&quot;:&#123;&quot;gte&quot;:20,&quot;lte&quot;:30&#125;&#125;&#125;&#125;&#x27;</span></span><br><span class="line">  <span class="comment"># gte: 大于等于</span></span><br><span class="line">  <span class="comment"># lte: 小于等于</span></span><br><span class="line">  <span class="comment"># gt: 大于</span></span><br><span class="line">  <span class="comment"># lt: 小于</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间范围查询</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;range&quot;:&#123;&quot;created_at&quot;:&#123;&quot;gte&quot;:&quot;2025-04-20 00:00:00&quot;,&quot;lte&quot;:&quot;2025-05-20 23:59:59&quot;&#125;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于日期数学表达式查询</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;range&quot;:&#123;&quot;created_at&quot;:&#123;&quot;gte&quot;:&quot;now-1y&quot;&#125;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持的日期表达式</span></span><br><span class="line"><span class="comment"># - now：当前时间点。</span></span><br><span class="line"><span class="comment"># - now-1d：从当前时间点向前推1天的时间点。</span></span><br><span class="line"><span class="comment"># - now-1w：从当前时间点向前推1周的时间点。</span></span><br><span class="line"><span class="comment"># - now-1M：从当前时间点向前推1个月的时间点。</span></span><br><span class="line"><span class="comment"># - now-1y：从当前时间点向前推1年的时间点。</span></span><br><span class="line"><span class="comment"># - now+1h：从当前时间点向后推1小时的时间点。</span></span><br></pre></td></tr></table></figure><h3 id="exists-查询字段存在的数据">exists: 查询字段存在的数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;exists&quot;:&#123;&quot;field&quot;:&quot;title&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line">  <span class="comment"># field: 指定要查询的字段</span></span><br><span class="line">  <span class="comment"># 示例：查询 title 字段存在的文档</span></span><br></pre></td></tr></table></figure><h3 id="ids-根据一组ID查询">ids: 根据一组ID查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;ids&quot;:&#123;&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;]&#125;&#125;&#125;&#x27;</span></span><br><span class="line">  <span class="comment"># values: 指定要查询的ID列表</span></span><br><span class="line">  <span class="comment"># 示例：查询ID为1和2的文档</span></span><br></pre></td></tr></table></figure><h3 id="prefix-前缀查询">prefix: 前缀查询</h3><ul class="lvl-0"><li class="lvl-2"><p>仅适用于关键字类型(keyword)的字段</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;prefix&quot;:&#123;&quot;category&quot;:&quot;elec&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅适用于keyword类型字段，所以下面这个请求查询不到数据</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;prefix&quot;:&#123;&quot;address&quot;:&quot;广州白云山&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 因为address被附加了keyword类型，所以需要加上.keyword后缀后可以查询到数据</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;prefix&quot;:&#123;&quot;address.keyword&quot;:&quot;广州白云山&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="wildcard-通配符查询">wildcard: 通配符查询</h3><ul class="lvl-0"><li class="lvl-2"><p>仅适用于关键字类型(keyword)的字段</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;wildcard&quot;:&#123;&quot;category&quot;:&quot;e?e*&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># ?: 任意单个字符</span></span><br><span class="line"><span class="comment"># *: 任意多个字符</span></span><br></pre></td></tr></table></figure><h3 id="regexp-正则表达式查询">regexp: 正则表达式查询</h3><ul class="lvl-0"><li class="lvl-2"><p>仅适用于关键字类型(keyword)的字段</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;regexp&quot;:&#123;&quot;category&quot;:&quot;e.e.*&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="fuzzy-支持编辑距离的模糊查询">fuzzy: 支持编辑距离的模糊查询</h3><ul class="lvl-0"><li class="lvl-2"><p>仅适用于关键字类型(keyword)的字段</p></li><li class="lvl-2"><p>fuzzy检索是一种强大的搜索功能，它能够在用户输入内容存在拼写错误或上下文不一致时，仍然返回与搜索词相似的文档。通过使用编辑距离算法来度量输入词与文档中词条的相似程度，模糊查询在保证搜索结果相关性的同时，有效地提高了搜索容错能力。</p></li><li class="lvl-2"><p>编辑距离是指从一个单词转换到另一个单词需要编辑单字符的次数。如中文集团到中威集团编辑距离就是1，只需要修改一个字符；如果fuzziness值在这里设置成2，会把编辑距离为2的东东集团也查出来。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">      &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;fuzzy&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;category&quot;:&#123;</span></span><br><span class="line"><span class="string">            &quot;value&quot;:&quot;beeks&quot;,</span></span><br><span class="line"><span class="string">            &quot;fuzziness&quot;:&quot;2&quot;,</span></span><br><span class="line"><span class="string">            &quot;prefix_length&quot;:1</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span></span><br><span class="line"><span class="comment"># fuzziness：用于编辑距离的设置，其默认值为AUTO，支持的数值为[0，1，2]。如果值设置越界会报错。</span></span><br><span class="line"><span class="comment"># prefix_length: 搜索词的前缀长度，在此长度内不会应用模糊匹配。默认是0，即整个词都会被模糊匹配。</span></span><br></pre></td></tr></table></figure><h3 id="match-全文检索-即分词">match: 全文检索(即分词)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;address&quot;:&quot;广州白云山公园&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为 desc 的索引分词器是 ik_max_word，查看“广州白云山公园”被分词后的结果</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_analyze?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;text&quot;: &quot;广州白云山公园&quot;</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span> : <span class="string">&quot;广州&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start_offset&quot;</span> : 0,</span><br><span class="line">      <span class="string">&quot;end_offset&quot;</span> : 2,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span> : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span> : <span class="string">&quot;白云山&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start_offset&quot;</span> : 2,</span><br><span class="line">      <span class="string">&quot;end_offset&quot;</span> : 5,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span> : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span> : <span class="string">&quot;白云&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start_offset&quot;</span> : 2,</span><br><span class="line">      <span class="string">&quot;end_offset&quot;</span> : 4,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span> : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span> : <span class="string">&quot;云山&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start_offset&quot;</span> : 3,</span><br><span class="line">      <span class="string">&quot;end_offset&quot;</span> : 5,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span> : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span> : <span class="string">&quot;公园&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start_offset&quot;</span> : 5,</span><br><span class="line">      <span class="string">&quot;end_offset&quot;</span> : 7,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span> : 4</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 所以只要desc中包含如上这些内容的数据都会被匹配上</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是这样匹配的结果就不够精确，如何尽量匹配更多的分词呢，可以增加 minimum_should_match</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;match&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;address&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;query&quot;: &quot;广州白云山公园&quot;,</span></span><br><span class="line"><span class="string">          &quot;minimum_should_match&quot;: 2</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># minimum_should_match: 2 表示至少匹配两个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果希望全部都匹配呢</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;match&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;address&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;query&quot;: &quot;广州白云山公园&quot;,</span></span><br><span class="line"><span class="string">          &quot;operator&quot;: &quot;and&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># operator: and 表示全部匹配，此时相当于精确匹配，其默认值是 or</span></span><br></pre></td></tr></table></figure><h3 id="multi-match-多字段查询">multi_match: 多字段查询</h3><ul class="lvl-0"><li class="lvl-2"><p>multi_match查询在Elasticsearch中用于在多个字段上执行相同的搜索操作。它可以接受一个查询字符串，并在指定的字段集合中搜索这个字符串。multi_match查询提供了灵活的匹配类型和操作符选项，以便根据不同的搜索需求调整搜索行为。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;multi_match&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;query&quot;: &quot;广州shirt&quot;,</span></span><br><span class="line"><span class="string">        &quot;fields&quot;:[&quot;title&quot;,&quot;address&quot;]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># query: 查询条件</span></span><br><span class="line"><span class="comment"># fields: 指定多个字段进行匹配</span></span><br></pre></td></tr></table></figure><h3 id="match-phrase-短语查询">match_phrase: 短语查询</h3><ul class="lvl-0"><li class="lvl-2"><p>match_phrase查询在Elasticsearch中用于执行短语搜索，它不仅匹配整个短语，而且还考虑了短语中各个词的顺序和位置。这种查询类型对于搜索精确短语非常有用，尤其是在用户输入的查询与文档中的文本表达方式需要严格匹配时。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;match_phrase&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;address&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;query&quot;:&quot;广州白云山&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 要求查询结果中的数据必须包含&quot;广州白云山&quot;，而且“广州”和“白云山”这两个词是不能分开的，因为 match_phrase 匹配的是相邻词条</span></span><br></pre></td></tr></table></figure><h3 id="query-string-支持与或非表达式的查询">query_string: 支持<code>与或非</code>表达式的查询</h3><ul class="lvl-0"><li class="lvl-2"><p>query_string查询是一种灵活的查询类型，它允许使用Lucene查询语法来构建复杂的搜索查询。这种查询类型支持多种逻辑运算符，包括与（AND）、或（OR）和非（NOT），以及通配符、模糊搜索和正则表达式等功能。query_string查询可以在单个或多个字段上进行搜索，并且可以处理复杂的查询逻辑。</p></li><li class="lvl-2"><p>注意: 查询字段分词就将查询条件分词查询，查询字段不分词将查询条件不分词查询</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有字段中包含 &quot;公园&quot;和 &quot;华为&quot; 的文档</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;query_string&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;query&quot;:&quot;公园 AND electronics&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定查询的单个字段</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;query_string&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;default_field&quot;:&quot;category&quot;,</span></span><br><span class="line"><span class="string">        &quot;query&quot;:&quot;白云山 OR books&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定查询的多个字段</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;query_string&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;fields&quot;:[&quot;category&quot;,&quot;address&quot;],</span></span><br><span class="line"><span class="string">        &quot;query&quot;:&quot;白云山 OR (electronics AND shirt)&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="simple-query-string-类似-query-string，但是会忽略错误的语法，同时只支持部分查询语法">simple_query_string: 类似 <code>query_string</code>，但是会忽略错误的语法，同时只支持部分查询语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;simple_query_string&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;query&quot;:&quot;广州公园&quot;,</span></span><br><span class="line"><span class="string">        &quot;default_operator&quot;:&quot;AND&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># default_operator: 默认为 OR，设置为 AND 则必须同时匹配</span></span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>ES查询结果属性含义</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span>:16,          <span class="comment"># 表示查询从请求到完成耗时 16 毫秒。</span></span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>:<span class="literal">false</span>,  <span class="comment"># 表示查询在规定的时间内完成，没有发生超时。如果为 true，则表示查询超时。</span></span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>:&#123;         <span class="comment"># 涉及到查询过程中使用的分片信息</span></span><br><span class="line">    <span class="string">&quot;total&quot;</span>:1,        <span class="comment"># 表示查询涉及到的总分片数为 1</span></span><br><span class="line">    <span class="string">&quot;successful&quot;</span>:1,   <span class="comment"># 表示查询成功完成的分片数为 1</span></span><br><span class="line">    <span class="string">&quot;skipped&quot;</span>:0,      <span class="comment"># 表示查询过程中被跳过的分片数为 0</span></span><br><span class="line">    <span class="string">&quot;failed&quot;</span>:0        <span class="comment"># 表示查询过程中失败的分片数为 0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>:&#123;            <span class="comment"># 包含查询结果的详细信息</span></span><br><span class="line">    <span class="string">&quot;total&quot;</span>:&#123;         <span class="comment"># 包含查询结果的总数</span></span><br><span class="line">      <span class="string">&quot;value&quot;</span>:4,      <span class="comment"># 表示查询结果的总数为 4</span></span><br><span class="line">      <span class="string">&quot;relation&quot;</span>:<span class="string">&quot;eq&quot;</span> <span class="comment"># 表示返回的总数 value 是确切的（equal）。如果为 gte，则表示返回的总数是一个下限值。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span>:0.0,  <span class="comment"># 表示匹配到的文档中最高的得分。如果是排序查询，这个值会有意义。当前结果因为 size: 0，没有实际返回文档，所以得分为 0.0</span></span><br><span class="line">    <span class="string">&quot;hits&quot;</span>:[ ]        <span class="comment"># 包含查询结果的列表，每个结果都是一个对象，包含文档的元数据，如 id、分数等。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="bool-查询">bool 查询</h2><ul class="lvl-0"><li class="lvl-2"><p>布尔查询可以按照布尔逻辑条件组织多条查询语句，只有符合整个布尔条件的文档才会被搜索出来。</p></li><li class="lvl-2"><p>在布尔条件中，可以包含两种不同的上下文。</p><ul class="lvl-2"><li class="lvl-4">1.搜索上下文(query context)：使用搜索上下文时，Elasticsearch需要计算每个文档与搜索条件的相关度得分，这个得分的计算需使用一套复杂的计算公式，有一定的性能开销，带文本分析的全文检索的查询语句很适合放在搜索上下文中。</li><li class="lvl-4">2.过滤上下文(filter context)：使用过滤上下文时，Elasticsearch只需要判断搜索条件跟文档数据是否匹配，例如使用<code>Term query</code>判断一个值是否跟搜索内容一致，使用<code>Range query</code>判断某数据是否位于某个区间等。过滤上下文的查询不需要进行相关度得分计算，还可以使用缓存加快响应速度，很多术语级查询语句都适合放在过滤上下文中。</li></ul></li><li class="lvl-2"><p>bool 查询包含 must、must_not、should、filter 四种子句。</p></li></ul><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>must</td><td>可包含多个查询条件，每个条件均满足的文档才能被搜索到，每次查询需要计算相关度得分，属于搜索上下文</td></tr><tr><td>should</td><td>可包含多个查询条件，不存在must和fiter条件时，至少要满足多个查询条件中的一个，文档才能被搜索到，否则需满足的条件数量不受限制,匹配到的查询越多相关度越高，也属于搜索上下文</td></tr><tr><td>filter</td><td>可包含多个过滤条件，每个条件均满足的文档才能被搜索到，每个过滤条件不计算相关度得分，结果在一定条件下会被缓存， 属于过滤上下文</td></tr><tr><td>must_not</td><td>可包含多个过滤条件，每个条件均不满足的文档才能被搜索到，每个过滤条件不计算相关度得分，结果在一定条件下会被缓存， 属于过滤上下文</td></tr></tbody></table><h3 id="must">must</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两个条件都需要满足</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;bool&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;must&quot;:[</span></span><br><span class="line"><span class="string">          &#123;&quot;match&quot;:&#123;&quot;category&quot;:&quot;electronics&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;&quot;match&quot;:&#123;&quot;desc&quot;:&quot;公园&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="must-not">must_not</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两个条件都不满足</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;bool&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;must_not&quot;:[</span></span><br><span class="line"><span class="string">          &#123;&quot;match&quot;:&#123;&quot;category&quot;:&quot;electronics&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;&quot;match&quot;:&#123;&quot;desc&quot;:&quot;公园&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="should">should</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两个条件满足一个即可</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;bool&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;should&quot;:[</span></span><br><span class="line"><span class="string">          &#123;&quot;match&quot;:&#123;&quot;category&quot;:&quot;electronics&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;&quot;match&quot;:&#123;&quot;desc&quot;:&quot;公园&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="filter">filter</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter中的条件为非 match，即不能是全文检索</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;bool&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;filter&quot;:[</span></span><br><span class="line"><span class="string">          &#123;&quot;term&quot;:&#123;&quot;category&quot;:&quot;electronics&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;&quot;range&quot;:&#123;&quot;price&quot;:&#123;&quot;gte&quot;:20&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="分页与排序">分页与排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from: 从第几条开始，默认0</span></span><br><span class="line"><span class="comment"># size: 取多少条</span></span><br><span class="line"><span class="comment"># sort: 排序，默认为按文档id升序</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;&quot;range&quot;:&#123;&quot;price&quot;:&#123;&quot;gte&quot;:20,&quot;lte&quot;:30&#125;&#125;&#125;,</span></span><br><span class="line"><span class="string">  &quot;sort&quot;:[&#123;&quot;price&quot;:&quot;address&quot;&#125;],</span></span><br><span class="line"><span class="string">  &quot;from&quot;:0,</span></span><br><span class="line"><span class="string">  &quot;size&quot;:5</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="只返回部分字段">只返回部分字段</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _source: 指定要返回的字段列表</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &#123;&quot;query&quot;:&#123;&quot;range&quot;:&#123;&quot;price&quot;:&#123;&quot;gte&quot;:20,&quot;lte&quot;:30&#125;&#125;&#125;,</span></span><br><span class="line"><span class="string">  &quot;_source&quot;:[&quot;category&quot;,&quot;title&quot;,&quot;price&quot;]</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="高亮显示">高亮显示</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 高亮显示仅支持全文检索字段</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;multi_match&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;fields&quot;: [&quot;title&quot;,&quot;address&quot;],</span></span><br><span class="line"><span class="string">        &quot;query&quot;: &quot;公园shirt&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;highlight&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;post_tags&quot;: [&quot;&lt;/span&gt;&quot;],</span></span><br><span class="line"><span class="string">      &quot;pre_tags&quot;: [&quot;&lt;span style=&#x27;</span>color:red<span class="string">&#x27;&gt;&quot;],</span></span><br><span class="line"><span class="string">      &quot;fields&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;*&quot;:&#123;&#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="地理空间位置查询">地理空间位置查询</h2><ul class="lvl-0"><li class="lvl-2"><p>地理空间位置查询是数据库和搜索系统中的一个重要特性，特别是在地理信息系统（GIS）和位置服务中。它允许用户基于地理位置信息来搜索和过滤数据。在Elasticsearch这样的全文搜索引擎中，地理空间位置查询被广泛应用，例如在旅行、房地产、物流和零售等行业，用于提供基于位置的搜索功能。</p></li><li class="lvl-2"><p>在Elasticsearch中，地理空间数据通常存储在<code>geo_point</code>字段类型中。这种字段类型可以存储纬度和经度坐标，用于表示地球上的一个点。</p></li></ul><h3 id="示例">示例</h3><ul class="lvl-0"><li class="lvl-2"><p>创建一个索引，并添加一个<code>geo_point</code>字段：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/tourist_spots&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;mappings&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;properties&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;name&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;location&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;geo_point&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>插入数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/tourist_spots/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;index&quot;:&#123;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;name&quot;:&quot;雷峰塔&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:30.2615,&quot;lon&quot;:120.1480&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;index&quot;:&#123;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;name&quot;:&quot;西湖&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:30.2614,&quot;lon&quot;:120.1479&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;index&quot;:&#123;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;name&quot;:&quot;苏堤春晓&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:30.2624,&quot;lon&quot;:120.1708&#125;&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment"># lat: 纬度</span></span><br><span class="line"><span class="comment"># lon: 经度</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查询数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询杭州西湖5km附近的景点</span></span><br><span class="line"><span class="comment"># 雷峰塔 - 位于西湖附近，距离约2.8公里。</span></span><br><span class="line"><span class="comment"># 苏堤春晓 - 位于西湖边，距离西湖中心约1公里。</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/tourist_spots/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;bool&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;must&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;match_all&quot;: &#123;&#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;filter&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;geo_distance&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;distance&quot;: &quot;5km&quot;,</span></span><br><span class="line"><span class="string">            &quot;distance_type&quot;: &quot;arc&quot;,</span></span><br><span class="line"><span class="string">            &quot;location&quot;: &#123;</span></span><br><span class="line"><span class="string">              &quot;lat&quot;: 30.2614,</span></span><br><span class="line"><span class="string">              &quot;lon&quot;: 120.1479</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># distance: 5km 表示距离为5公里</span></span><br><span class="line"><span class="comment"># distance_type: arc, plane, sloppy_arc,</span></span><br><span class="line">  <span class="comment"># arc: 默认值，使用haversine公式计算距离，结果是精确的，但计算速度较慢。</span></span><br><span class="line">  <span class="comment"># plane: 使用平面直角坐标系计算距离，结果是粗略的，但计算速度更快。</span></span><br><span class="line">  <span class="comment"># sloppy_arc: 使用haversine公式计算距离，但允许误差。</span></span><br><span class="line"><span class="comment"># location: 搜索条件</span></span><br></pre></td></tr></table></figure><h2 id="向量搜索">向量搜索</h2><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 8.x 引入了一个重要的新特性：向量检索（Vector Search），特别是通过KNN（K-Nearest Neighbors）算法支持向量近邻检索。这一特性使得Elasticsearch在机器学习、数据分析和推荐系统等领域的应用变得更加广泛和强大。</p></li><li class="lvl-2"><p>向量检索的基本思路是，将文档（或数据项）表示为高维向量，并使用这些向量来执行相似性搜索。在Elasticsearch中，这些向量被存储在<code>dense_vector</code>类型的字段中，然后使用KNN算法来找到与给定向量最相似的其他向量。</p></li></ul><h3 id="示例-2">示例</h3><ul class="lvl-0"><li class="lvl-2"><p>创建索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/image-index&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;mappings&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;properties&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;image-vector&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;dense_vector&quot;,</span></span><br><span class="line"><span class="string">          &quot;dims&quot;: 3</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;title&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;text&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;file-type&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;my_label&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;text&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># dims: 3  表示3维向量，最高支持2048</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>添加数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/image-index/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;image-vector&quot;: [-5, 9, -12], &quot;title&quot;: &quot;Image A&quot;, &quot;file-type&quot;: &quot;jpeg&quot;, &quot;my_label&quot;: &quot;red&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;image-vector&quot;: [10, -2, 3], &quot;title&quot;: &quot;Image B&quot;, &quot;file-type&quot;: &quot;png&quot;, &quot;my_label&quot;: &quot;blue&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;image-vector&quot;: [4, 0, -1], &quot;title&quot;: &quot;Image C&quot;, &quot;file-type&quot;: &quot;gif&quot;, &quot;my_label&quot;: &quot;red&quot; &#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>向量检索</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/image-index/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;:&#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span></span><br><span class="line"><span class="string">    &quot;knn&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;field&quot;: &quot;image-vector&quot;,</span></span><br><span class="line"><span class="string">      &quot;query_vector&quot;: [-5, 10, -12],</span></span><br><span class="line"><span class="string">      &quot;k&quot;: 10,</span></span><br><span class="line"><span class="string">      &quot;num_candidates&quot;: 100</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;fields&quot;: [ &quot;title&quot;, &quot;file-type&quot; ]</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># query: 搜索条件，这里可以不加这个</span></span><br><span class="line"><span class="comment"># knn: 8.8.1 版本开始默认支持</span></span><br><span class="line"><span class="comment"># field: 搜索向量字段</span></span><br><span class="line"><span class="comment"># query_vector: 搜索向量</span></span><br><span class="line"><span class="comment"># k: 搜索结果数量</span></span><br><span class="line"><span class="comment"># num_candidates: 搜索候选数量，用于优化性能</span></span><br><span class="line"><span class="comment"># fields: 搜索结果返回字段</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 Elasticsearch 的 REST APIs&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/8.17/rest-apis.html&quot;&gt;官方文档:REST APIs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;a href=&quot;/2025/04/22/elasticsearch-06-api-aggs/&quot; title=&quot;Elasticsearch 的 REST APIs:聚合查询&quot;&gt;Elasticsearch 的 REST APIs:聚合查询&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch的证书过期处理方法</title>
    <link href="https://blog.hanqunfeng.com/2025/04/16/elasticsearch-04-cert/"/>
    <id>https://blog.hanqunfeng.com/2025/04/16/elasticsearch-04-cert/</id>
    <published>2025-04-16T13:30:05.000Z</published>
    <updated>2025-04-16T09:41:30.609Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍Elasticsearch证书过期时的处理方法</p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/index.html">Elasticsearch</a>版本8.17.3</p></li><li class="lvl-2"><p>本文基于 <a href="/2025/03/20/elasticsearch-01-install/" title="linux下安装Elasticsearch">linux下安装Elasticsearch</a></p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/update-node-certs.html">官方文档:Updating node security certificates</a></p></li></ul><span id="more"></span><h2 id="ES证书简介">ES证书简介</h2><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 8 默认情况下创建的证书只有3年有效期，过期时需要创建新的证书，为了不必要的麻烦，也可以一开始就创建一个有效期比较长的证书。</p></li><li class="lvl-2"><p>在 Elasticsearch 8 的配置下，<code>config/certs</code> 目录通常存放的是用于安全通信的证书和密钥文件。这些文件确保了 Elasticsearch 实例之间的通讯以及与外部客户端的通讯能够被加密且经过认证。</p></li><li class="lvl-2"><p><code>config/certs</code> 目录包含三个文件分别是：</p><ul class="lvl-2"><li class="lvl-4"><code>http.p12</code>: 这是一个 PKCS#12 格式的文件（通常带有.p12或.pfx扩展名），包含了 Elasticsearch HTTP 层用来进行 TLS/SSL 通信所需的一切，包括一个私钥、相应的公钥证书（服务器证书）及 CA 证书链。客户端使用这个文件来验证它们正在与正确的服务器进行通信，并且此服务器也信任该客户端。</li><li class="lvl-4"><code>http_ca.crt</code>: CA (Certificate Authority) 根证书或中间证书，用于验证通过 HTTP 协议连接至 Elasticsearch 服务端点的身份。当客户端尝试建立 HTTPS 连接时，它会检查来自 Elasticsearch 的证书是否由这个 CA 签名；这是确保双方通信安全的重要步骤之一。</li><li class="lvl-4"><code>transport.p12</code>: 同样为 PKCS#12 格式，但这个特定的文件是给 Elasticsearch 节点之间内部传输层使用的。在集群内，节点间需<br>要相互认证，transport.p12就包含着让不同 Elasticsearch 实例能互相识别所需的私钥和证书。</li></ul></li><li class="lvl-2"><p>总之，<code>http.p12</code>服务于面向 Web 的接口，而<code>transport.p12</code>则处理 Elasticsearch 群集内的交互；两者都依赖于<code>http_ca.crt</code>来进行身份验证过程的一部分。</p></li></ul><h2 id="ES证书过期的影响">ES证书过期的影响</h2><ul class="lvl-0"><li class="lvl-2"><p>‌集群无法增加新节点‌：特别是在重启集群时，节点无法加入集群，导致无法正常重启。‌</p></li><li class="lvl-2"><p>‌访问异常‌：如果使用证书连接ES集群，会导致无法正常访问集群。</p></li><li class="lvl-2"><p>‌安全风险‌：证书过期会破坏证书链的信任，可能引发安全漏洞。</p></li><li class="lvl-2"><p>‌日志干扰‌：会持续出现证书过期的错误日志，干扰问题排查和诊断。</p></li></ul><h2 id="查看证书的过期时间">查看证书的过期时间</h2><ul class="lvl-0"><li class="lvl-2"><p>通过openssl查看证书的过期时间</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看crt证书到期时间</span></span><br><span class="line"><span class="comment"># -dates: 显示证书的开始时间和结束时间</span></span><br><span class="line"><span class="comment"># -noout: 不输出证书的详细信息</span></span><br><span class="line">openssl x509 -<span class="keyword">in</span> config/certs/http_ca.crt -dates -noout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看p12证书到期时间</span></span><br><span class="line"><span class="comment"># -clcerts: 只显示证书，不显示私钥</span></span><br><span class="line"><span class="comment"># -nokeys: 不输出私钥</span></span><br><span class="line"><span class="comment"># -password pass: 指定私钥的密码，这里为空(因为在创建证书时没有设置密码)，注意密码必须写在pass:的后面，不加这个参数会提示你输入密码，直接回车即可</span></span><br><span class="line">openssl pkcs12 -<span class="keyword">in</span> ca.p12 -password pass: -clcerts -nokeys | openssl x509 -dates -noout</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>通过ES的API查看证书过期时间</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET -k -u <span class="string">&#x27;elastic:123456&#x27;</span> <span class="string">&#x27;https://127.0.0.1:9200/_ssl/certificates?pretty&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="证书过期处理">证书过期处理</h2><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 8 的证书创建需要使用命令行工具 <code>elasticsearch-certutil</code>，这部分的详细信息可以参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/certutil.html">官方文档:elasticsearch-certutil</a></p></li><li class="lvl-2"><p>当证书过期时，需要重新生成证书，并更新<code>config/certs</code>目录下的文件，更新前要备份原证书。</p></li></ul><h3 id="备份原证书">备份原证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> -r config/certs config/certs.bak</span><br><span class="line">$ <span class="built_in">rm</span> -rf config/certs/*</span><br></pre></td></tr></table></figure><h3 id="生成新证书">生成新证书</h3><h4 id="生成CA证书">生成CA证书</h4><ul class="lvl-0"><li class="lvl-2"><p>生成crt证书</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --days 36500: 指定证书的有效期，单位为天，这里设置为 36500 天，大约 10 年</span></span><br><span class="line">$ bin/elasticsearch-certutil ca --pem --out new-ca.zip --days 36500</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">$ unzip new-ca.zip</span><br><span class="line"><span class="comment"># 将创建的证书移动到指定目录</span></span><br><span class="line">$ <span class="built_in">mv</span> ca/ca.crt config/certs/http_ca.crt</span><br><span class="line">$ <span class="built_in">mv</span> ca/ca.key config/certs/http_ca.key</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>也可以生成PKCS#12格式的证书</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/elasticsearch-certutil ca --out config/certs/ca.p12 --days 36500</span><br></pre></td></tr></table></figure><h4 id="生成transport证书">生成transport证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于crt证书</span></span><br><span class="line">$ bin/elasticsearch-certutil cert --ca-cert config/certs/http_ca.crt --ca-key config/certs/http_ca.key --out config/certs/transport.p12 --days 36500</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于PKCS#12格式的证书</span></span><br><span class="line">$ bin/elasticsearch-certutil cert --ca config/certs/ca.p12 --out config/certs/transport.p12 --days 36500</span><br></pre></td></tr></table></figure><h4 id="生成http证书">生成http证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里是交互式命令行</span></span><br><span class="line">$ bin/elasticsearch-certutil http</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>输出说明</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">Generate a CSR? [y/N]n # 不生成CSR</span><br><span class="line">Use an existing CA? [y/N]y # 使用已有的CA</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下区分crt证书和PKCS#12格式的证书</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">crt 证书</span></span><br><span class="line">CA Path: certs/http_ca.crt # CA证书，这里相对路径是相对应 config 目录，也可以是绝对路径</span><br><span class="line">CA Key: certs/http_ca.key # CA密钥，这里相对路径是相对应 config 目录，也可以是绝对路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PKCS#12格式的证书</span></span><br><span class="line">CA Path: certs/ca.p12 # CA证书，这里相对路径是相对应 config 目录，也可以是绝对路径</span><br><span class="line">Password for ca.p12: # CA密码，因为没有设置密码，所以这里直接回车</span><br><span class="line"></span><br><span class="line">For how long should your certificate be valid? [5y] 100y # 证书有效期，单位为年，默认是 5 年，这里设置为 100 年</span><br><span class="line">Generate a certificate per node? [y/N]n # 不为每个节点创建独立的证书，即所有节点都使用同一个证书</span><br><span class="line">Enter all the hostnames that you need, one per line.</span><br><span class="line">When you are done, press &lt;ENTER&gt; once more to move on to the next step.</span><br><span class="line"></span><br><span class="line">localhost # 主机名，这里可以添加多个，回车一行一个，这里应该填写集群内所有节点服务器的hostname，可以通过 hostname 命令查看</span><br><span class="line">ip-10-250-0-17.cn-northwest-1.compute.internal</span><br><span class="line">ip-10-250-0-173.cn-northwest-1.compute.internal</span><br><span class="line">ip-10-250-0-239.cn-northwest-1.compute.internal</span><br><span class="line"></span><br><span class="line">You entered the following hostnames.</span><br><span class="line"></span><br><span class="line"> - localhost</span><br><span class="line"> - ip-10-250-0-17.cn-northwest-1.compute.internal</span><br><span class="line"> - ip-10-250-0-173.cn-northwest-1.compute.internal</span><br><span class="line"> - ip-10-250-0-239.cn-northwest-1.compute.internal</span><br><span class="line"></span><br><span class="line">Is this correct [Y/n]y # 确认主机名是否正确</span><br><span class="line"></span><br><span class="line">Enter all the IP addresses that you need, one per line.</span><br><span class="line">When you are done, press &lt;ENTER&gt; once more to move on to the next step.</span><br><span class="line"></span><br><span class="line">127.0.0.1 # 主机IP，这里可以添加多个，回车一行一个，这里应该填写集群内所有节点服务器的IP地址</span><br><span class="line">10.250.0.17</span><br><span class="line">10.250.0.173</span><br><span class="line">10.250.0.239</span><br><span class="line"></span><br><span class="line">You entered the following IP addresses.</span><br><span class="line"></span><br><span class="line"> - 127.0.0.1</span><br><span class="line"> - 10.250.0.17</span><br><span class="line"> - 10.250.0.173</span><br><span class="line"> - 10.250.0.239</span><br><span class="line"></span><br><span class="line">Is this correct [Y/n]y # 确认IP是否正确</span><br><span class="line"></span><br><span class="line">Do you wish to change any of these options? [y/N]n # 不修改任何选项</span><br><span class="line"></span><br><span class="line">If you wish to use a blank password, simply press &lt;enter&gt; at the prompt below.</span><br><span class="line">Provide a password for the &quot;http.p12&quot; file:  [&lt;ENTER&gt; for none] # 直接回车不设置密码</span><br><span class="line"></span><br><span class="line">What filename should be used for the output zip file? [/usr/local/elasticsearch/elasticsearch-8.17.3/elasticsearch-ssl-http.zip] # 输出文件名，这里可以自定义，默认是 elasticsearch-ssl-http.zip</span><br><span class="line"></span><br><span class="line">Zip file written to /usr/local/elasticsearch/elasticsearch-8.17.3/elasticsearch-ssl-http.zip</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>解压并将http证书拷贝到config/certs目录下</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ unzip elasticsearch-ssl-http.zip</span><br><span class="line">Archive:  elasticsearch-ssl-http.zip</span><br><span class="line">   creating: elasticsearch/</span><br><span class="line">  inflating: elasticsearch/README.txt <span class="comment"># 说明文件</span></span><br><span class="line">  inflating: elasticsearch/http.p12  <span class="comment"># http证书</span></span><br><span class="line">  inflating: elasticsearch/sample-elasticsearch.yml <span class="comment"># 示例elasticsearch配置文件</span></span><br><span class="line">   creating: kibana/</span><br><span class="line">  inflating: kibana/README.txt <span class="comment"># 说明文件</span></span><br><span class="line">  inflating: kibana/elasticsearch-ca.pem  <span class="comment"># kibana用于验证ES的证书，即 elasticsearch.ssl.certificateAuthorities 中的配置</span></span><br><span class="line">  inflating: kibana/sample-kibana.yml <span class="comment"># 示例kibana配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将http证书拷贝到config/certs目录下</span></span><br><span class="line">$ <span class="built_in">cp</span> elasticsearch/http.p12 config/certs/http.p12</span><br></pre></td></tr></table></figure><h3 id="分发到ES集群中的每个节点">分发到ES集群中的每个节点</h3><ul class="lvl-0"><li class="lvl-2"><p>上面创建新的证书时我们只在一个节点上进行即可，之后将生成好的证书分发到ES集群中的其它节点，这里就是 <code>http.p12</code> 和 <code>transport.p12</code>，将其拷贝到每个节点的 <code>config/certs</code> 目录下，拷贝前做好原证书的备份。</p></li><li class="lvl-2"><p>如有必要也可以拷贝 <code>ca.p12</code> 或者 <code>http_ca.crt</code> 和 <code>http_ca.key</code> 到每个节点的 <code>config/certs</code> 目录下</p></li></ul><h3 id="重启ES服务">重启ES服务</h3><ul class="lvl-0"><li class="lvl-2"><p>集群中的节点依次重启</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/elasticsearch -d</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>重启时可能会报错</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.elasticsearch.ElasticsearchSecurityException: failed to load SSL configuration [xpack.security.transport.ssl] - cannot <span class="built_in">read</span> configured [PKCS12] keystore (as a truststore) [/usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/transport.p12] - this is usually caused by an incorrect password; (a keystore password was provided)</span><br><span class="line"><span class="comment"># 虽然我们没有给transport.p12设置密码，但这里依旧提示提供的密码不正确，实际上这里使用的是 secure_password</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>解决方法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用bin/elasticsearch-keystore list查看现有的密钥列表</span></span><br><span class="line">$ bin/elasticsearch-keystore list</span><br><span class="line">keystore.seed</span><br><span class="line">xpack.security.http.ssl.keystore.secure_password</span><br><span class="line">xpack.security.transport.ssl.keystore.secure_password</span><br><span class="line">xpack.security.transport.ssl.truststore.secure_password</span><br><span class="line"><span class="comment"># 删除secure_password后再次重启ES服务就会正常了</span></span><br><span class="line">$ bin/elasticsearch-keystore remove xpack.security.http.ssl.keystore.secure_password</span><br><span class="line">$ bin/elasticsearch-keystore remove xpack.security.transport.ssl.keystore.secure_password</span><br><span class="line">$ bin/elasticsearch-keystore remove xpack.security.transport.ssl.truststore.secure_password</span><br></pre></td></tr></table></figure><h3 id="替换Kibana的证书">替换Kibana的证书</h3><ul class="lvl-0"><li class="lvl-2"><p>将上面创建好的 <code>kibana/elasticsearch-ca.pem</code> 拷贝到Kibana服务器，比如 <code>/usr/local/kibana/kibana-8.17.3/config/certs/elasticsearch-ca.pem</code></p></li><li class="lvl-2"><p>修改Kibana配置文件 <code>config/kibana.yml</code> 中的 <code>elasticsearch.ssl.certificateAuthorities</code> 配置，使其指向 <code>/usr/local/kibana/kibana-8.17.3/config/certs/elasticsearch-ca.pem</code></p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elasticsearch.ssl.certificateAuthorities:</span> [<span class="string">&quot;/usr/local/kibana/kibana-8.17.3/config/certs/elasticsearch-ca.pem&quot;</span>]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>重启Kibana服务</p></li></ul><h2 id="证书格式转换">证书格式转换</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p12转换为crt格式</span></span><br><span class="line">$ openssl pkcs12 -<span class="keyword">in</span> config/certs/ca.p12 -out config/certs/http_ca.crt -nokeys</span><br><span class="line"><span class="comment"># p12转换为key格式</span></span><br><span class="line">$ openssl pkcs12 -<span class="keyword">in</span> config/certs/ca.p12 -out config/certs/http_ca.key -nocerts -nodes</span><br><span class="line"><span class="comment"># p12转换为pem格式</span></span><br><span class="line">$ openssl pkcs12 -<span class="keyword">in</span> config/certs/ca.p12 -out config/certs/http_ca.pem -nodes</span><br><span class="line"><span class="comment"># crt转换回PKCS12格式</span></span><br><span class="line">$ openssl pkcs12 -<span class="built_in">export</span> -out config/certs/http_ca.p12 -inkey config/certs/http_ca.key -<span class="keyword">in</span> config/certs/http_ca.crt -name <span class="string">&quot;My CA&quot;</span></span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>生成http证书时为每个节点单独配置证书</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Generate a certificate per node? [y/N]y <span class="comment"># 是否为每个节点单独配置证书，这里选择是</span></span><br><span class="line">node <span class="comment">#1 name: node-1 # 节点名称，必须与ES配置文件中的node.name一致</span></span><br><span class="line"></span><br><span class="line">Enter all the hostnames that you need, one per line. <span class="comment"># 输入 node-1 节点的hostname</span></span><br><span class="line">When you are <span class="keyword">done</span>, press &lt;ENTER&gt; once more to move on to the next step.</span><br><span class="line"></span><br><span class="line">localhost                                         <span class="comment"># 习惯加上 localhost</span></span><br><span class="line">ip-10-250-0-239.cn-northwest-1.compute.internal   <span class="comment"># node-1 的 hostname</span></span><br><span class="line"></span><br><span class="line">You entered the following hostnames.</span><br><span class="line"></span><br><span class="line"> - localhost</span><br><span class="line"> - ip-10-250-0-239.cn-northwest-1.compute.internal</span><br><span class="line"></span><br><span class="line">Is this correct [Y/n]y <span class="comment"># 确认是否正确</span></span><br><span class="line"></span><br><span class="line">Enter all the IP addresses that you need, one per line. <span class="comment"># 输入 node-1 节点的IP地址</span></span><br><span class="line">When you are <span class="keyword">done</span>, press &lt;ENTER&gt; once more to move on to the next step.</span><br><span class="line"></span><br><span class="line">127.0.0.1                                         <span class="comment"># 习惯加上 127.0.0.1</span></span><br><span class="line">10.250.0.239                                      <span class="comment"># node-1 的 IP</span></span><br><span class="line"></span><br><span class="line">You entered the following IP addresses.</span><br><span class="line"></span><br><span class="line"> - 127.0.0.1</span><br><span class="line"> - 10.250.0.239</span><br><span class="line"></span><br><span class="line">Is this correct [Y/n]y <span class="comment"># 确认是否正确</span></span><br><span class="line"></span><br><span class="line">Do you wish to change any of these options? [y/N]n <span class="comment"># 不修改任何选项</span></span><br><span class="line">Generate additional certificates? [Y/n]y  <span class="comment"># 是否生成其他证书，这里选择是，接着为其它节点创建证书</span></span><br><span class="line">node <span class="comment">#2 name: node-2 # 节点名称，必须与ES配置文件中的node.name一致</span></span><br><span class="line"><span class="comment"># 依次为每个节点创建证书</span></span><br><span class="line">………………</span><br><span class="line"></span><br><span class="line">Generate additional certificates? [Y/n]n <span class="comment"># 创建好所有节点的证书后，选择n，不再创建新的证书</span></span><br><span class="line"></span><br><span class="line">If you wish to use a blank password, simply press &lt;enter&gt; at the prompt below.</span><br><span class="line">Provide a password <span class="keyword">for</span> the <span class="string">&quot;http.p12&quot;</span> file:  [&lt;ENTER&gt; <span class="keyword">for</span> none] <span class="comment"># 直接回车不设置密码</span></span><br><span class="line"></span><br><span class="line">What filename should be used <span class="keyword">for</span> the output zip file? [/usr/local/elasticsearch/elasticsearch-8.17.3/elasticsearch-ssl-http.zip] <span class="comment"># 输出文件名，这里可以自定义，默认是 elasticsearch-ssl-http.zip</span></span><br><span class="line"></span><br><span class="line">Zip file written to /usr/local/elasticsearch/elasticsearch-8.17.3/elasticsearch-ssl-http.zip</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">此时解压查看文件结构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unzip elasticsearch-ssl-http.zip</span><br><span class="line">Archive:  elasticsearch-ssl-http.zip</span><br><span class="line">   creating: elasticsearch/</span><br><span class="line">   creating: elasticsearch/node-1/</span><br><span class="line">  inflating: elasticsearch/node-1/README.txt</span><br><span class="line">  inflating: elasticsearch/node-1/http.p12  <span class="comment"># node-1 的证书</span></span><br><span class="line">  inflating: elasticsearch/node-1/sample-elasticsearch.yml</span><br><span class="line">   creating: elasticsearch/node-2/</span><br><span class="line">  inflating: elasticsearch/node-2/README.txt</span><br><span class="line">  inflating: elasticsearch/node-2/http.p12 <span class="comment"># node-2 的证书</span></span><br><span class="line">  inflating: elasticsearch/node-2/sample-elasticsearch.yml</span><br><span class="line">  creating: elasticsearch/node-3/</span><br><span class="line">  inflating: elasticsearch/node-3/README.txt</span><br><span class="line">  inflating: elasticsearch/node-3/http.p12 <span class="comment"># node-3 的证书</span></span><br><span class="line">  inflating: elasticsearch/node-3/sample-elasticsearch.yml</span><br><span class="line">   creating: kibana/</span><br><span class="line">  inflating: kibana/README.txt</span><br><span class="line">  inflating: kibana/elasticsearch-ca.pem <span class="comment"># kibana 的证书</span></span><br><span class="line">  inflating: kibana/sample-kibana.yml</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2"><p>将对应的证书拷贝到对应节点的 <code>config/certs</code> 目录下</p></li></ul></div>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍Elasticsearch证书过期时的处理方法&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/8.17/index.html&quot;&gt;Elasticsearch&lt;/a&gt;版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于 &lt;a href=&quot;/2025/03/20/elasticsearch-01-install/&quot; title=&quot;linux下安装Elasticsearch&quot;&gt;linux下安装Elasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/8.17/update-node-certs.html&quot;&gt;官方文档:Updating node security certificates&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Springboot整合Logstash实现日志采集</title>
    <link href="https://blog.hanqunfeng.com/2025/04/07/elk-02-springboot/"/>
    <id>https://blog.hanqunfeng.com/2025/04/07/elk-02-springboot/</id>
    <published>2025-04-07T13:30:05.000Z</published>
    <updated>2025-04-08T08:26:08.292Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何在Springboot项目中整合LogStash实现日志采集</p></li><li class="lvl-2"><p>本文基于Springboot2.7.x版本进行测试，Logstash版本为8.17.3</p></li></ul><span id="more"></span><h2 id="使用logstash日志插件">使用logstash日志插件</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://github.com/logfellow/logstash-logback-encoder">SpringBoot的Logstash日志插件</a>，本文只进行简单介绍，更多详细配置可以参考<a href="https://github.com/logfellow/logstash-logback-encoder">官方文档</a></p></li><li class="lvl-2"><p>引入依赖，这里需要注意8.x以上的版本需要jdk11，如果是jdk8的话可以使用6.x或7.x版本</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 版本号根据实际情况修改 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>springboot2.7.x以下版本，建议使用logstash-logback-encoder的7.3以下版本。<br>springboot3.x.x以上版本，建议使用logstash-logback-encoder的7.4及以上版本。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><code>logback-spring.xml</code>中添加logstash配置</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %logger&#123;50&#125;：类路径，最大显示50个字符 %M：方法名称 %L：行号 %msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%thread] %-5level [%X&#123;userName&#125;][%X&#123;userLocale&#125;] %logger&#123;50&#125; - %M - %L - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- logstash输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOGSTASH&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>161.189.78.202:4560<span class="tag">&lt;/<span class="name">destination</span>&gt;</span> <span class="comment">&lt;!-- logstash地址和端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LogstashEncoder&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timestampPattern</span>&gt;</span>yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS<span class="tag">&lt;/<span class="name">timestampPattern</span>&gt;</span> <span class="comment">&lt;!-- 时间格式，这个是默认值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeMdc</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeMdc</span>&gt;</span>   <span class="comment">&lt;!-- 默认true, true表示输出MDC信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeCallerData</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeCallerData</span>&gt;</span> <span class="comment">&lt;!-- 默认false, true表示输出打印日志的类名、方法名、行号等信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">customFields</span>&gt;</span>&#123;&quot;appname&quot;: &quot;springboot-logstash-demo&quot;&#125;<span class="tag">&lt;/<span class="name">customFields</span>&gt;</span> <span class="comment">&lt;!-- 自定义字段 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOGSTASH&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>添加<code>config/springboot-demo.conf</code>配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    host =&gt; <span class="string">&quot;0.0.0.0&quot;</span> <span class="comment"># 监听任意地址</span></span><br><span class="line">    port =&gt; <span class="string">&quot;4560&quot;</span> <span class="comment"># 监听端口</span></span><br><span class="line">    mode =&gt; <span class="string">&quot;server&quot;</span> <span class="comment"># server模式</span></span><br><span class="line">    codec =&gt; json_lines <span class="comment"># 使用json_lines格式</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">  elasticsearch &#123; <span class="comment"># 输出到ES</span></span><br><span class="line">        index =&gt; <span class="string">&quot;%&#123;[appname]&#125;-%&#123;+YYYY-MM-DD&#125;&quot;</span> <span class="comment"># 索引名,按天分隔，这里使用变量appname作为索引名</span></span><br><span class="line">        hosts =&gt; [<span class="string">&quot;https://10.250.0.239:9200&quot;</span>] <span class="comment"># ES地址</span></span><br><span class="line">        user =&gt; <span class="string">&quot;elastic&quot;</span>                   <span class="comment"># ES用户名</span></span><br><span class="line">        password =&gt; <span class="string">&quot;123456&quot;</span>                <span class="comment"># ES密码</span></span><br><span class="line">        ssl =&gt; <span class="literal">true</span>                         <span class="comment"># 是否启用SSL，因为这里是https访问ES</span></span><br><span class="line">        ssl_certificate_verification =&gt; <span class="literal">false</span> <span class="comment"># 禁用证书验证</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动logstash</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/springboot-demo.conf --config.reload.automatic</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>logstash启动成功后，会输出类似如下信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;Tomcat started on port(s): 8088 (http) with context path &#x27;/springboot-logstash&#x27;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;level_value&quot;</span> =&gt; 20000,</span><br><span class="line">            <span class="string">&quot;appname&quot;</span> =&gt; <span class="string">&quot;springboot-logstash-demo&quot;</span>,</span><br><span class="line">              <span class="string">&quot;level&quot;</span> =&gt; <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">        <span class="string">&quot;logger_name&quot;</span> =&gt; <span class="string">&quot;org.springframework.boot.web.embedded.tomcat.TomcatWebServer&quot;</span>,</span><br><span class="line">         <span class="string">&quot;@timestamp&quot;</span> =&gt; 2025-04-07T09:39:43.569Z,</span><br><span class="line">           <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;thread_name&quot;</span> =&gt; <span class="string">&quot;restartedMain&quot;</span>,</span><br><span class="line">        <span class="string">&quot;caller_class_name&quot;</span> =&gt; <span class="string">&quot;org.springframework.boot.web.embedded.tomcat.TomcatWebServer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;caller_file_name&quot;</span> =&gt; <span class="string">&quot;TomcatWebServer.java&quot;</span>,</span><br><span class="line">        <span class="string">&quot;caller_method_name&quot;</span> =&gt; <span class="string">&quot;start&quot;</span>,</span><br><span class="line">        <span class="string">&quot;caller_line_number&quot;</span> =&gt; 220,</span><br><span class="line">        <span class="string">&quot;userName&quot;</span> =&gt; <span class="string">&quot;admin&quot;</span>, <span class="comment"># MDC信息默认会打印</span></span><br><span class="line">        <span class="string">&quot;userLocale&quot;</span> =&gt; <span class="string">&quot;zh_CN&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>可以访问ES或者Kibana查看索引信息，这里不再赘述。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在Springboot项目中整合LogStash实现日志采集&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于Springboot2.7.x版本进行测试，Logstash版本为8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/"/>
    
    <category term="logstash" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/logstash/"/>
    
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/tags/springboot/"/>
    
    <category term="logstash" scheme="https://blog.hanqunfeng.com/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>一文搞懂ELK</title>
    <link href="https://blog.hanqunfeng.com/2025/03/27/elk-01/"/>
    <id>https://blog.hanqunfeng.com/2025/03/27/elk-01/</id>
    <published>2025-03-27T13:30:05.000Z</published>
    <updated>2025-04-08T08:42:47.683Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何在linux下安装LogStash和FileBeat</p></li><li class="lvl-2"><p>通过示例讲解ELK的经典架构和高并发架构的实现过程</p></li><li class="lvl-2"><p>LogStash版本8.17.3，FileBeat版本8.17.3</p></li><li class="lvl-2"><p>Elasticsearch版本8.17.3，<a href="/2025/03/20/elasticsearch-01-install/" title="linux下安装Elasticsearch">linux下安装Elasticsearch</a></p></li><li class="lvl-2"><p>Kibana版本8.17.3，<a href="/2025/03/21/kibana-01-install/" title="linux下安装Kibana">linux下安装Kibana</a></p></li><li class="lvl-2"><p>Elasticsearch集群搭建，<a href="/2025/03/24/elasticsearch-02-install-cluster/" title="linux下安装Elasticsearch集群">linux下安装Elasticsearch集群</a></p></li></ul><span id="more"></span><h2 id="Logstash概述">Logstash概述</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.elastic.co/cn/logstash">Logstash</a> 是免费且开放的服务器端数据处理管道，能够从多个来源采集数据，转换数据，然后将数据发送到您最喜欢的存储库中。</p></li><li class="lvl-2"><p>Logstash数据传输原理<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/image-2.png" alt=""></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.数据采集与输入：Logstash支持各种输入选择，能够以连续的流式传输方式，轻松地从日志、指标、Web应用以及数据存储中采集数据。</span><br><span class="line">2.实时解析和数据转换：通过Logstash过滤器解析各个事件，识别已命名的字段来构建结构，并将它们转换成通用格式，最终将数据从源端传输到存储库中。</span><br><span class="line">3.存储与数据导出：Logstash提供多种输出选择，可以将数据发送到指定的地方。</span><br></pre></td></tr></table></figure><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/%E6%88%AA%E5%9B%BE-3.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>Logstash通过管道完成数据的采集与处理，管道配置中包含input、output和filter（可选）插件，input和output用来配置输入和输出数据源、filter用来对数据进行过滤或预处理。</p></li></ul><h2 id="Logstash下载安装">Logstash下载安装</h2><ul class="lvl-0"><li class="lvl-2"><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#logstash">https://www.elastic.co/cn/downloads/past-releases#logstash</a></p></li><li class="lvl-2"><p>选择对应的版本：这里选择当前的最新版<code>LogStash 8.17.3</code>，之后选择对应的操作系统<code>LINUX X86_64</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-8.17.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>下载完成后解压到<code>/usr/local/logstash</code>目录下，解压命令如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/logstash</span><br><span class="line">tar -zxvf logstash-8.17.3-linux-x86_64.tar.gz -C /usr/local/logstash</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>elasticsearch和kibana都不能用root用户启动，为了统一管理，logstash也使用这个用户（非必要）</p></li><li class="lvl-2"><p>创建用户<code>elastic</code>，并设置密码，这一步我们在安装elasticsearch的时候已经配置过了，这里就不再赘述了</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd elastic</span><br><span class="line">passwd elastic</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改logstash安装目录的用户权限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R elastic:elastic /usr/local/logstash</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>切换到elastic用户下执行命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su - elastic</span><br><span class="line"><span class="comment"># 进入logstash安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/logstash/logstash-8.17.3/</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>运行一个简单的测试</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -e: 直接把配置放在命令中，这样可以有效快速进行测试</span></span><br><span class="line"><span class="comment"># input &#123; stdin &#123; &#125; &#125;: 输入插件，从标准输入中读取数据</span></span><br><span class="line"><span class="comment"># output &#123; stdout &#123;&#125; &#125;: 输出插件，将数据输出到标准输出</span></span><br><span class="line"><span class="comment"># 这里只包含了 input 和 output 两个部分，实际使用中还需要添加 filter 部分</span></span><br><span class="line">./bin/logstash -e <span class="string">&#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">。。。。。。。 <span class="comment"># 输出启动信息</span></span><br><span class="line">The stdin plugin is now waiting <span class="keyword">for</span> input: <span class="comment"># 输出提示信息，提示你输入内容</span></span><br><span class="line">hello world  <span class="comment"># 我输入内容</span></span><br><span class="line"><span class="comment"># logstash输出内容</span></span><br><span class="line">&#123;</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">         <span class="string">&quot;event&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;original&quot;</span> =&gt; <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;hostname&quot;</span> =&gt; <span class="string">&quot;ip-10-250-0-239.cn-northwest-1.compute.internal&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2025-03-27T06:48:12.810617855Z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>也可以通过配置文件启动logstash</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim test.conf</span></span><br><span class="line">input &#123;</span><br><span class="line">  stdin &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># codec =&gt; rubydebug : 是指定了一个编码器（Codec）为 rubydebug。</span></span><br><span class="line"><span class="comment"># 编码器负责如何格式化输出的数据。</span></span><br><span class="line"><span class="comment"># Rubydebug 编码器是一种特别适合开发和调试目的的编码器，因为它能以相当易读的形式展示复杂的结构化数据，比如嵌套的哈希表或者数组。</span></span><br><span class="line"><span class="comment"># 除了 Rubydebug 编码器，Logstash 还提供了其他几种编码器，比如 json、plain、multiline 等等。</span></span><br><span class="line"><span class="comment"># 具体可以参考官方文档：https://www.elastic.co/guide/en/logstash/current/codec-plugins.html</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/logstash -f ./test.conf</span><br></pre></td></tr></table></figure><h2 id="Logstash插件">Logstash插件</h2><h3 id="Input-Plugins">Input Plugins</h3><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/8.17/input-plugins.html">https://www.elastic.co/guide/en/logstash/8.17/input-plugins.html</a></p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>一个 Pipeline可以有多个input插件</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- Stdin / File</span><br><span class="line">- Beats / Log4J /Elasticsearch / JDBC / Kafka /Rabbitmq /Redis</span><br><span class="line">- JMX/ HTTP / Websocket / UDP / TCP</span><br><span class="line">- Google Cloud Storage / S3</span><br><span class="line">- Github / Twitter</span><br></pre></td></tr></table></figure><h3 id="Filter-Plugins">Filter Plugins</h3><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/8.17/filter-plugins.html">https://www.elastic.co/guide/en/logstash/8.17/filter-plugins.html</a></p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>Filter Plugin可以对Logstash Event进行各种处理，例如解析，删除字段，类型转换</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- Date: 日期解析</span><br><span class="line">- Dissect: 分割符解析</span><br><span class="line">- Grok: 正则匹配解析</span><br><span class="line">- Mutate: 对字段做各种操作</span><br><span class="line">- Convert : 类型转换</span><br><span class="line">- Gsub : 字符串替换</span><br><span class="line">- Split / Join /Merge:  字符串切割，数组合并字符串，数组合并数组</span><br><span class="line">- Rename: 字段重命名</span><br><span class="line">- Update / Replace: 字段内容更新替换</span><br><span class="line">- Remove_field: 字段删除</span><br><span class="line">- Ruby: 利用Ruby 代码来动态修改Event</span><br></pre></td></tr></table></figure><h3 id="Output-Plugins">Output Plugins</h3><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/8.17/output-plugins.html">https://www.elastic.co/guide/en/logstash/8.17/output-plugins.html</a></p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>将Event发送到特定的目的地，是 Pipeline 的最后一个阶段。常见 Output Plugins：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- Elasticsearch</span><br><span class="line">- Email / Pageduty</span><br><span class="line">- Influxdb / Kafka / Mongodb / Opentsdb / Zabbix</span><br><span class="line">- Http / TCP / Websocket</span><br></pre></td></tr></table></figure><h3 id="Codec-Plugins">Codec Plugins</h3><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/8.17/codec-plugins.html">https://www.elastic.co/guide/en/logstash/8.17/codec-plugins.html</a></p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>将原始数据decode成Event;将Event encode成目标数据，内置的Codec Plugins:</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- Line / Multiline</span><br><span class="line">- JSON / Avro / Cef (ArcSight Common Event Format)</span><br><span class="line">- Dots / Rubydebug</span><br></pre></td></tr></table></figure><h2 id="FileBeat概述">FileBeat概述</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.elastic.co/cn/beats">Beats</a> 是一个免费且开放的平台，集合了多种单一用途的数据采集器。它们从成百上千或成千上万台机器和系统向 Logstash 或 Elasticsearch 发送数据。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/iEmI1C.png" alt=""></p></li><li class="lvl-2"><p><a href="https://www.elastic.co/cn/beats/filebeat">FileBeat</a> 专门用于转发和收集日志数据的轻量级采集工具。它可以作为代理安装在服务器上，FileBeat监视指定路径的日志文件，收集日志数据，并将收集到的日志转发到Elasticsearch或者Logstash。</p></li></ul><h2 id="logstash-vs-FileBeat">logstash vs FileBeat</h2><ul class="lvl-0"><li class="lvl-2"><p>Logstash是在jvm上运行的，资源消耗比较大。而FileBeat是基于golang编写的，功能较少但资源消耗也比较小，更轻量级。</p></li><li class="lvl-2"><p>Logstash 和Filebeat都具有日志收集功能，Filebeat更轻量，占用资源更少</p></li><li class="lvl-2"><p>Logstash 具有Filter功能，能过滤分析日志</p></li><li class="lvl-2"><p>一般结构都是Filebeat采集日志，然后发送到消息队列、Redis、MQ中，然后Logstash去获取，利用Filter功能过滤分析，然后存储到Elasticsearch中</p></li><li class="lvl-2"><p>FileBeat和Logstash配合，实现背压机制。当将数据发送到Logstash或 Elasticsearch时，Filebeat使用背压敏感协议，以应对更多的数据量。如果Logstash正在忙于处理数据，则会告诉Filebeat 减慢读取速度。一旦拥堵得到解决，Filebeat就会恢复到原来的步伐并继续传输数据。</p></li></ul><h2 id="FileBeat下载和安装">FileBeat下载和安装</h2><ul class="lvl-0"><li class="lvl-2"><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#filebeat">https://www.elastic.co/cn/downloads/past-releases#filebeat</a></p></li><li class="lvl-2"><p>选择对应的版本：这里选择当前的最新版<code>FileBeat 8.17.3</code>，之后选择对应的操作系统<code>LINUX X86_64</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-8.17.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>下载完成后解压到<code>/usr/local/filebeat</code>目录下，解压命令如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/filebeat</span><br><span class="line">tar -zxvf filebeat-8.17.3-linux-x86_64.tar.gz -C /usr/local/filebeat</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改logstash安装目录的用户权限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R elastic:elastic /usr/local/filebeat</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>切换到elastic用户下执行命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su - elastic</span><br><span class="line"><span class="comment"># 进入 filebeat 安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/filebeat/filebeat-8.17.3-linux-x86_64/</span><br></pre></td></tr></table></figure><h2 id="经典的ELK架构">经典的ELK架构</h2><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/%E6%88%AA%E5%9B%BE.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>Filebeat日志收集：Filebeat作为轻量级的日志收集代理，部署在客户端上，消耗资源少，能够高效地收集日志数据。</p></li><li class="lvl-2"><p>Logstash数据处理：Logstash作为数据处理管道，负责将Filebeat收集的日志数据进行过滤、转换等操作，然后发送到Elasticsearch进行存储。</p></li><li class="lvl-2"><p>Elasticsearch存储与搜索：Elasticsearch是一个基于Lucene的分布式搜索和分析引擎，提供强大的数据存储和搜索能力。</p></li><li class="lvl-2"><p>Kibana可视化：Kibana为Elasticsearch提供Web可视化界面，允许用户通过图表、仪表盘等方式直观地查看和分析日志数据。</p></li><li class="lvl-2"><p>适用场景：经典的ELK架构主要适用于数据量较小的开发环境。然而，由于缺少消息队列的缓冲机制，当Logstash或Elasticsearch出现故障时，可能存在数据丢失的风险。</p></li></ul><h2 id="一个经典ELK架构示例">一个经典ELK架构示例</h2><h3 id="FileBeat采集Nginx服务器日志并发送到Logstash">FileBeat采集Nginx服务器日志并发送到Logstash</h3><ul class="lvl-0"><li class="lvl-2"><p>创建配置文件<code>filebeat-nginx.yml</code>，将其保存到Filebeat安装目录下的conf目录下。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为Nginx的access.log日志都是以IP地址开头的，所以我们需要修改下匹配字段。</span></span><br><span class="line"><span class="comment"># 不以ip地址开头的行追加到上一行</span></span><br><span class="line"><span class="attr">filebeat.inputs:</span> <span class="comment"># 输入源配置</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span> <span class="comment"># 日志类型</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">paths:</span> <span class="comment"># 采集路径</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/log/nginx/access*.*</span></span><br><span class="line">  <span class="attr">exclude_files:</span> [<span class="string">&quot;.gz$&quot;</span>] <span class="comment"># 排除以.gz 结尾的文件</span></span><br><span class="line">  <span class="attr">multiline.pattern:</span> <span class="string">&#x27;^\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\s&#x27;</span> <span class="comment"># 匹配以IP地址开头，并紧跟一个空白字符</span></span><br><span class="line">  <span class="attr">multiline.negate:</span> <span class="literal">true</span> <span class="comment"># 不以ip地址开头的行追加到上一行</span></span><br><span class="line">  <span class="attr">multiline.match:</span> <span class="string">after</span> <span class="comment"># 追加到上一行的后面</span></span><br><span class="line">  <span class="comment"># multiline: 多行日志配置，这里实际上不需要配置多行设置，因为nginx的access日志都是单行日志，这里只做演示</span></span><br><span class="line">    <span class="comment"># pattern: 正则表达式</span></span><br><span class="line">    <span class="comment"># negate: false，匹配pattern的行合并到上一行；true，不匹配pattern的行合并到上一行</span></span><br><span class="line">    <span class="comment"># match: after，合并到上一行的末尾；before，合并到上一行的开头</span></span><br><span class="line">  <span class="attr">scan_frequency:</span> <span class="string">10s</span> <span class="comment"># 每 10 秒扫描一次日志文件</span></span><br><span class="line">  <span class="attr">clean_removed:</span> <span class="literal">true</span> <span class="comment"># 在日志文件被删除后是否从其内部状态中移除该文件的记录</span></span><br><span class="line">  <span class="attr">clean_inactive:</span> <span class="string">2h</span> <span class="comment"># 在日志文件处于非活动状态多长时间后将其从状态数据库中移,设置为比 ignore_older + scan_frequency 更大的值</span></span><br><span class="line">  <span class="attr">ignore_older:</span> <span class="string">1h</span> <span class="comment"># 忽略那些比当前时间早于 1 小时的日志文件</span></span><br><span class="line"><span class="attr">output.logstash:</span> <span class="comment"># 输出配置，这里是发送到Logstash</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;10.250.0.239:5044&quot;</span>] <span class="comment"># Logstash服务地址</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>为FileBeat的用户分配日志目录的读取权限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 setfacl命令为elastic用户分配日志目录的读取权限</span></span><br><span class="line"><span class="built_in">sudo</span> setfacl -d -m u:elastic:r-x -R /var/log/nginx/</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动FileBeat</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e -c conf/filebeat-nginx.yml</span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line"><span class="built_in">nohup</span> ./filebeat -e -c conf/filebeat-nginx.yml &amp;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在启动filebeat时可能会遇到如下错误</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exiting: error loading config file: config file (<span class="string">&quot;conf/filebeat-nginx.yml&quot;</span>) can only be writable by the owner but the permissions are <span class="string">&quot;-rw-rw-r--&quot;</span> (to fix the permissions use: <span class="string">&#x27;chmod go-w /usr/local/filebeat/filebeat-8.17.3-linux-x86_64/conf/filebeat-nginx.yml&#x27;</span>)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-4"><p>因为安全原因不要其他用户写的权限，去掉写的权限就可以了</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> go-w conf/filebeat-nginx.yml</span><br></pre></td></tr></table></figure><h3 id="配置Logstash接收FileBeat收集的数据并打印">配置Logstash接收FileBeat收集的数据并打印</h3><ul class="lvl-0"><li class="lvl-2"><p>创建配置文件<code>logstash-nginx.conf</code>，将其保存到Logstash安装目录下的config目录下。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入logstash安装目录</span></span><br><span class="line"><span class="comment"># vim config/logstash-nginx.conf</span></span><br><span class="line"><span class="comment"># 配置从FileBeat接收数据</span></span><br><span class="line">input &#123; <span class="comment"># 输入源配置</span></span><br><span class="line">    beats &#123; <span class="comment"># 从FileBeat接收数据</span></span><br><span class="line">      port =&gt; 5044 <span class="comment"># 监听5044端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123; <span class="comment"># 输出配置</span></span><br><span class="line">    stdout &#123; <span class="comment"># 打印到控制台</span></span><br><span class="line">      codec =&gt; rubydebug <span class="comment"># 指定编码器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>测试logstash配置是否正确</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/logstash-nginx.conf --config.test_and_exit</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动logstash</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reload.automatic：修改配置文件时自动重新加载</span></span><br><span class="line">bin/logstash -f config/logstash-nginx.conf --config.reload.automatic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时在控制台会看到如下输出：</span></span><br><span class="line">&#123;</span><br><span class="line">         <span class="string">&quot;input&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;log&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;1.119.161.30 - elastic [27/Mar/2025:08:52:41 +0000] \&quot;GET /_cluster/stats HTTP/1.1\&quot; 200 7445 \&quot;-\&quot; \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36\&quot; \&quot;-\&quot;&quot;</span>,</span><br><span class="line">           <span class="string">&quot;log&quot;</span> =&gt; &#123;</span><br><span class="line">          <span class="string">&quot;file&quot;</span> =&gt; &#123;</span><br><span class="line">            <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;/var/log/nginx/access.log&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;offset&quot;</span> =&gt; 42985</span><br><span class="line">    &#125;,</span><br><span class="line">          <span class="string">&quot;tags&quot;</span> =&gt; [</span><br><span class="line">        [0] <span class="string">&quot;beats_input_codec_plain_applied&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2025-03-27T08:52:42.947Z,</span><br><span class="line">           <span class="string">&quot;ecs&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;version&quot;</span> =&gt; <span class="string">&quot;8.0.0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">         <span class="string">&quot;agent&quot;</span> =&gt; &#123;</span><br><span class="line">                  <span class="string">&quot;id&quot;</span> =&gt; <span class="string">&quot;4dbe185b-900d-4990-b841-c13bf9618fc6&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;ip-10-250-0-239.cn-northwest-1.compute.internal&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ephemeral_id&quot;</span> =&gt; <span class="string">&quot;6bb04808-7da7-4acb-95fd-f3f915651457&quot;</span>,</span><br><span class="line">                <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">             <span class="string">&quot;version&quot;</span> =&gt; <span class="string">&quot;8.17.3&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">         <span class="string">&quot;event&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;original&quot;</span> =&gt; <span class="string">&quot;1.119.161.30 - elastic [27/Mar/2025:08:52:41 +0000] \&quot;GET /_cluster/stats HTTP/1.1\&quot; 200 7445 \&quot;-\&quot; \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36\&quot; \&quot;-\&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;ip-10-250-0-239.cn-northwest-1.compute.internal&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用Logstash过滤器解析日志">利用Logstash过滤器解析日志</h4><ul class="lvl-0"><li class="lvl-2"><p>从打印结果看到包含了大量的无关数据，此时可以利用Logstash过滤器解析日志，这里使用<code>Grok</code>插件</p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/logstash/8.17/plugins-filters-grok.html">Grok</a>是一种将非结构化日志解析为结构化的插件。这个工具非常适合用来解析系统日志、Web服务器日志、MySQL或者是任意其他的日志格式。</p></li><li class="lvl-2"><p>Grok是通过模式匹配的方式来识别日志中的数据,可以把Grok插件简单理解为升级版本的正则表达式。它拥有更多的模式，默认Logstash拥有120个模式。如果这些模式不满足我们解析日志的需求，我们可以直接使用正则表达式来进行匹配。</p></li><li class="lvl-2"><p><a href="https://help.aliyun.com/zh/sls/user-guide/grok-patterns">GROK模式参考</a></p></li><li class="lvl-2"><p>grok模式的语法是:</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%&#123;SYNTAX:SEMANTIC&#125;</span><br><span class="line"><span class="comment"># SYNTAX（语法）指的是Grok模式名称，SEMANTIC（语义）是给模式匹配到的文本字段名。例如：</span></span><br><span class="line">%&#123;NUMBER:duration&#125; %&#123;IP:client&#125;</span><br><span class="line"><span class="comment"># duration表示：匹配一个数字，client表示匹配一个IP地址。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>匹配nginx日志</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx access日志格式</span></span><br><span class="line">1.119.161.30 - elastic [27/Mar/2025:03:05:36 +0000] <span class="string">&quot;GET /_cluster/stats HTTP/1.1&quot;</span> 200 7446 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36&quot;</span> <span class="string">&quot;-&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grok</span></span><br><span class="line">%&#123;IP:client_ip&#125; - %&#123;USER:remote_user&#125; \[%&#123;HTTPDATE:timestamp&#125;\] \&quot;%&#123;WORD:verb&#125; %&#123;URIPATHPARAM:request&#125; HTTP/%&#123;NUMBER:httpversion&#125;\&quot; %&#123;INT:http_status&#125; %&#123;INT:body_bytes_sent&#125; \&quot;%&#123;NOTSPACE:referrer&#125;\&quot; \&quot;%&#123;GREEDYDATA:agent&#125;\&quot; %&#123;QUOTEDSTRING:x_forwarded_for&#125;</span><br><span class="line"><span class="comment"># 解释每个部分的作用：</span></span><br><span class="line"><span class="comment"># %&#123;IP:client_ip&#125;：匹配客户端 IP 地址。</span></span><br><span class="line"><span class="comment"># -：匹配一个破折号（-），表示匿名用户或未认证用户。</span></span><br><span class="line"><span class="comment"># %&#123;USER:remote_user&#125;：匹配远程用户名， - 表示匿名用户。</span></span><br><span class="line"><span class="comment"># \[%&#123;HTTPDATE:timestamp&#125;\]：匹配请求的时间戳，格式为 [27/Mar/2025:03:05:36 +0000]。</span></span><br><span class="line"><span class="comment"># \&quot;%&#123;WORD:verb&#125; : 匹配请求方法 (GET)</span></span><br><span class="line"><span class="comment"># %&#123;URIPATHPARAM:request&#125; : 匹配请求路径 (/_cluster/stats)</span></span><br><span class="line"><span class="comment"># HTTP/%&#123;NUMBER:httpversion&#125;\\\&quot;：匹配 HTTP 版本 (HTTP/1.1)。</span></span><br><span class="line"><span class="comment"># %&#123;INT:http_status&#125;：匹配 HTTP 响应状态码 (200)。</span></span><br><span class="line"><span class="comment"># %&#123;INT:body_bytes_sent&#125;：匹配响应体的字节数 (7446)。</span></span><br><span class="line"><span class="comment"># \&quot;%&#123;NOTSPACE:referrer&#125;\&quot;：匹配引用页 (Referer) 字段，这里为空 (&quot;-&quot;)。</span></span><br><span class="line"><span class="comment"># \&quot;%&#123;GREEDYDATA:agent&#125;\&quot;：匹配用户代理 (User-Agent) 字段。GREEDYDATA 会匹配尽可能多的数据，直到遇到下一个分隔符。</span></span><br><span class="line"><span class="comment"># %&#123;QUOTEDSTRING:x_forwarded_for&#125;：匹配 X-Forwarded-For 头字段，这里为空 (&quot;-&quot;)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;request&quot;</span>: <span class="string">&quot;/_cluster/stats&quot;</span>,</span><br><span class="line">  <span class="string">&quot;agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">  <span class="string">&quot;body_bytes_sent&quot;</span>: <span class="string">&quot;7446&quot;</span>,</span><br><span class="line">  <span class="string">&quot;verb&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="string">&quot;x_forwarded_for&quot;</span>: <span class="string">&quot;\&quot;-\&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;remote_user&quot;</span>: <span class="string">&quot;elastic&quot;</span>,</span><br><span class="line">  <span class="string">&quot;referrer&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">  <span class="string">&quot;client_ip&quot;</span>: <span class="string">&quot;1.119.161.30&quot;</span>,</span><br><span class="line">  <span class="string">&quot;httpversion&quot;</span>: <span class="string">&quot;1.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;http_status&quot;</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timestamp&quot;</span>: <span class="string">&quot;27/Mar/2025:03:05:36 +0000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>匹配Grok模式是个非常繁琐的过程，我们可以使用Kibana来进行可视化的Grok调试<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/nhgnKY.png" alt=""></p></li><li class="lvl-2"><p>grok配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;%&#123;IP:client_ip&#125; - %&#123;USER:remote_user&#125; \[%&#123;HTTPDATE:timestamp&#125;\] \&quot;%&#123;WORD:verb&#125; %&#123;URIPATHPARAM:request&#125; HTTP/%&#123;NUMBER:httpversion&#125;\&quot; %&#123;INT:http_status&#125; %&#123;INT:body_bytes_sent&#125; \&quot;%&#123;NOTSPACE:referrer&#125;\&quot; \&quot;%&#123;GREEDYDATA:agent&#125;\&quot; %&#123;QUOTEDSTRING:x_forwarded_for&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用mutate插件过滤掉不需要的字段">使用mutate插件过滤掉不需要的字段</h4><ul class="lvl-0"><li class="lvl-2"><p>除了nginx日志本身的格式外，logstash还会打印许多我们不需要的字段，此时可以使用<code>mutate</code>插件来过滤掉不需要的字段。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mutate &#123;</span><br><span class="line">    enable_metric =&gt; <span class="string">&quot;false&quot;</span> <span class="comment"># 禁用指标上报</span></span><br><span class="line">    remove_field =&gt; [<span class="string">&quot;message&quot;</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;agent&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;ecs&quot;</span>, <span class="string">&quot;@version&quot;</span>] <span class="comment"># 移除不需要的字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Date插件对时间进行格式转换">使用Date插件对时间进行格式转换</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> &#123;</span><br><span class="line">    match =&gt; [<span class="string">&quot;timestamp&quot;</span>,<span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>] <span class="comment"># 时间格式转换</span></span><br><span class="line">    target =&gt; <span class="string">&quot;timestamp&quot;</span> <span class="comment"># 目标字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整的Logstash配置">完整的Logstash配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入logstash安装目录</span></span><br><span class="line"><span class="comment"># vim config/logstsh-nginx.conf</span></span><br><span class="line"><span class="comment"># 配置从FileBeat接收数据</span></span><br><span class="line">input &#123; <span class="comment"># 输入源配置</span></span><br><span class="line">    beats &#123; <span class="comment"># 从FileBeat接收数据</span></span><br><span class="line">      port =&gt; 5044 <span class="comment"># 监听5044端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123; <span class="comment"># 过滤器配置</span></span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;%&#123;IP:client_ip&#125; - %&#123;USER:remote_user&#125; \[%&#123;HTTPDATE:timestamp&#125;\] \&quot;%&#123;WORD:verb&#125; %&#123;URIPATHPARAM:request&#125; HTTP/%&#123;NUMBER:httpversion&#125;\&quot; %&#123;INT:http_status&#125; %&#123;INT:body_bytes_sent&#125; \&quot;%&#123;NOTSPACE:referrer&#125;\&quot; \&quot;%&#123;GREEDYDATA:agent&#125;\&quot; %&#123;QUOTEDSTRING:x_forwarded_for&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mutate &#123;</span><br><span class="line">        enable_metric =&gt; <span class="string">&quot;false&quot;</span> <span class="comment"># 禁用指标上报</span></span><br><span class="line">        remove_field =&gt; [<span class="string">&quot;message&quot;</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;agent&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;ecs&quot;</span>, <span class="string">&quot;@version&quot;</span>] <span class="comment"># 移除不需要的字段</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">date</span> &#123;</span><br><span class="line">        match =&gt; [<span class="string">&quot;timestamp&quot;</span>,<span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>] <span class="comment"># 时间格式转换</span></span><br><span class="line">        target =&gt; <span class="string">&quot;timestamp&quot;</span> <span class="comment"># 目标字段</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123; <span class="comment"># 输出配置</span></span><br><span class="line">    stdout &#123; <span class="comment"># 打印到控制台</span></span><br><span class="line">      codec =&gt; rubydebug <span class="comment"># 指定编码器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>重新启动logstash后得到如下结果：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">              <span class="string">&quot;event&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;original&quot;</span> =&gt; <span class="string">&quot;1.119.161.30 - elastic [27/Mar/2025:09:49:41 +0000] \&quot;GET /_cluster/stats HTTP/1.1\&quot; 200 7445 \&quot;-\&quot; \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36\&quot; \&quot;-\&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">          <span class="string">&quot;client_ip&quot;</span> =&gt; <span class="string">&quot;1.119.161.30&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span> =&gt; <span class="string">&quot;/_cluster/stats&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http_status&quot;</span> =&gt; <span class="string">&quot;200&quot;</span>,</span><br><span class="line">         <span class="string">&quot;@timestamp&quot;</span> =&gt; 2025-03-27T09:49:45.751Z,</span><br><span class="line">    <span class="string">&quot;body_bytes_sent&quot;</span> =&gt; <span class="string">&quot;7445&quot;</span>,</span><br><span class="line">    <span class="string">&quot;x_forwarded_for&quot;</span> =&gt; <span class="string">&quot;\&quot;-\&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;timestamp&quot;</span> =&gt; 2025-03-27T09:49:41.000Z,</span><br><span class="line">           <span class="string">&quot;referrer&quot;</span> =&gt; <span class="string">&quot;-&quot;</span>,</span><br><span class="line">        <span class="string">&quot;remote_user&quot;</span> =&gt; <span class="string">&quot;elastic&quot;</span>,</span><br><span class="line">        <span class="string">&quot;httpversion&quot;</span> =&gt; <span class="string">&quot;1.1&quot;</span>,</span><br><span class="line">               <span class="string">&quot;verb&quot;</span> =&gt; <span class="string">&quot;GET&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将结果输出到ES">将结果输出到ES</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在输出配置中添加ES输出配置</span></span><br><span class="line">output &#123; <span class="comment"># 输出配置</span></span><br><span class="line">    stdout &#123; <span class="comment"># 打印到控制台</span></span><br><span class="line">      codec =&gt; rubydebug <span class="comment"># 指定编码器</span></span><br><span class="line">    &#125;</span><br><span class="line">    elasticsearch &#123; <span class="comment"># 输出到ES</span></span><br><span class="line">        index =&gt; <span class="string">&quot;nginx_access_log_%&#123;+YYYY-MM&#125;&quot;</span> <span class="comment"># 索引名,按月分隔</span></span><br><span class="line">        hosts =&gt; [<span class="string">&quot;https://10.250.0.239:9200&quot;</span>] <span class="comment"># ES地址</span></span><br><span class="line">        user =&gt; <span class="string">&quot;elastic&quot;</span>                   <span class="comment"># ES用户名</span></span><br><span class="line">        password =&gt; <span class="string">&quot;123456&quot;</span>                <span class="comment"># ES密码</span></span><br><span class="line">        ssl =&gt; <span class="literal">true</span>                         <span class="comment"># 是否启用SSL，因为这里是https访问ES</span></span><br><span class="line">        ssl_certificate_verification =&gt; <span class="literal">false</span> <span class="comment"># 禁用证书验证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果需要开启证书校验，可以通过如下方法进行配置</p><ul class="lvl-2"><li class="lvl-6">获取 Elasticsearch 的 SSL 证书：</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 Elasticsearch 的配置文件或证书文件路径中获取证书（通常是 .pem 或 .crt 文件）。</span></span><br><span class="line">/usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/http_ca.crt</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">导入证书到 Java 信任库：注意这里要导入到启动Logstash的JAVA进程的信任库</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># logstash的jdk路径，默认在logstash的安装目录下</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/logstash/logstash-8.17.3/jdk</span><br><span class="line"></span><br><span class="line">bin/keytool -importcert -<span class="built_in">alias</span> es-cert -keystore /usr/local/logstash/logstash-8.17.3/logstash.keystore -file /usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/http_ca.crt</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">Enter keystore password:  <span class="comment"># 输入密码 这里是123456</span></span><br><span class="line">Re-enter new password:</span><br><span class="line">Owner: CN=Elasticsearch security auto-configuration HTTP CA</span><br><span class="line">Issuer: CN=Elasticsearch security auto-configuration HTTP CA</span><br><span class="line">Serial number: 89d5c501a2efd5d45a6ee5e08daa16bd605d8c28</span><br><span class="line">Valid from: Thu Mar 20 08:53:26 UTC 2025 <span class="keyword">until</span>: Sun Mar 19 08:53:26 UTC 2028</span><br><span class="line">Certificate fingerprints:</span><br><span class="line">    SHA1: DE:73:0C:EC:46:59:69:83:52:7C:C4:CC:6B:65:EC:B6:31:BE:10:22</span><br><span class="line">    SHA256: 3F:14:1C:16:DF:C6:E1:65:89:4B:C1:67:20:84:B2:20:DC:DD:22:FF:E0:21:16:D5:1A:C1:80:03:CF:AA:5A:1D</span><br><span class="line">Signature algorithm name: SHA256withRSA</span><br><span class="line">Subject Public Key Algorithm: 4096-bit RSA key</span><br><span class="line">Version: 3</span><br><span class="line"></span><br><span class="line">Extensions:</span><br><span class="line"></span><br><span class="line"><span class="comment">#1: ObjectId: 2.5.29.35 Criticality=false</span></span><br><span class="line">AuthorityKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 25 EF BA 81 AE 5E 14 1C   7E FF A1 87 12 F8 D0 2E  %....^..........</span><br><span class="line">0010: 3A D7 54 5F                                        :.T_</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#2: ObjectId: 2.5.29.19 Criticality=true</span></span><br><span class="line">BasicConstraints:[</span><br><span class="line">CA:<span class="literal">true</span></span><br><span class="line">PathLen: no <span class="built_in">limit</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#3: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class="line">SubjectKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 25 EF BA 81 AE 5E 14 1C   7E FF A1 87 12 F8 D0 2E  %....^..........</span><br><span class="line">0010: 3A D7 54 5F                                        :.T_</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Trust this certificate? [no]:  <span class="built_in">yes</span> <span class="comment"># yes确认</span></span><br><span class="line">Certificate was added to keystore</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><p>配置 Logstash 使用信任库</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        index =&gt; <span class="string">&quot;nginx_access_log_%&#123;+YYYY-MM&#125;&quot;</span> <span class="comment"># 索引名,按月分隔</span></span><br><span class="line">        hosts =&gt; [<span class="string">&quot;https://10.250.0.239:9200&quot;</span>] <span class="comment"># ES地址</span></span><br><span class="line">        user =&gt; <span class="string">&quot;elastic&quot;</span>                     <span class="comment"># ES用户名</span></span><br><span class="line">        password =&gt; <span class="string">&quot;123456&quot;</span>                  <span class="comment"># ES密码</span></span><br><span class="line">        ssl =&gt; <span class="literal">true</span>                           <span class="comment"># 是否启用SSL，因为这里是https访问ES</span></span><br><span class="line">        ssl_certificate_verification =&gt; <span class="literal">true</span>  <span class="comment"># 启用证书校验</span></span><br><span class="line">        ssl_truststore_path =&gt; <span class="string">&quot;/usr/local/logstash/logstash-8.17.3/logstash.keystore&quot;</span> <span class="comment"># 指定信任库路径</span></span><br><span class="line">        ssl_truststore_password =&gt; <span class="string">&quot;123456&quot;</span>   <span class="comment"># 信任库密码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="整合消息队列-Nginx的ELK架构">整合消息队列+Nginx的ELK架构</h2><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/%E6%88%AA%E5%9B%BE-2.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>消息队列：引入消息队列作为缓冲机制，确保即使在Logstash或Elasticsearch出现故障时，日志数据也不会丢失。消息队列能够均衡网络传输，降低数据丢失的可能性。</p></li><li class="lvl-2"><p>Nginx：Nginx作为高性能的Web和反向代理服务器，可以进一步优化整个系统的性能和可用性。它可以在负载均衡、缓存等方面发挥作用，提升用户访问体验。</p></li><li class="lvl-2"><p>扩展性：由于引入了消息队列和Nginx等组件，整个架构的扩展性得到增强。可以根据实际需求动态调整各组件的资源分配和部署规模。</p></li><li class="lvl-2"><p>适用场景：整合消息队列+Nginx的架构主要适用于生产环境，特别是需要处理大数据量的场景。它能够确保数据的安全性和完整性，同时提供高性能的日志处理和可视化分析服务。</p></li><li class="lvl-2"><p>总结来说就是</p><ul class="lvl-2"><li class="lvl-4">filebeat将采集的日志发送到Redis\RabbitMQ\Kafka等</li><li class="lvl-4">Logstash再从Redis\RabbitMQ\Kafka中读取日志数据，并进行解析后发送到ES中。</li><li class="lvl-4">ES集群使用nginx进行负载均衡，以实现高可用和高性能。具体实现方法查看：<a href="/2025/03/24/elasticsearch-02-install-cluster/" title="linux下安装Elasticsearch集群">linux下安装Elasticsearch集群</a></li></ul></li></ul><h2 id="基于Redis的ELK架构示例">基于Redis的ELK架构示例</h2><h3 id="filebeat将采集的日志发送到Redis">filebeat将采集的日志发送到Redis</h3><ul class="lvl-0"><li class="lvl-2"><p>创建配置文件<code>filebeat-nginx-to-redis.yml</code>，将其保存到Filebeat安装目录下的conf目录下。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为Nginx的access.log日志都是以IP地址开头的，所以我们需要修改下匹配字段。</span></span><br><span class="line"><span class="comment"># 不以ip地址开头的行追加到上一行</span></span><br><span class="line"><span class="attr">filebeat.inputs:</span> <span class="comment"># 输入源配置</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span> <span class="comment"># 日志类型</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">paths:</span> <span class="comment"># 采集路径</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/log/nginx/access*.*</span></span><br><span class="line">  <span class="attr">exclude_files:</span> [<span class="string">&quot;.gz$&quot;</span>] <span class="comment"># 排除以.gz 结尾的文件</span></span><br><span class="line">  <span class="attr">multiline.pattern:</span> <span class="string">&#x27;^\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\s&#x27;</span> <span class="comment"># 匹配以IP地址开头，并紧跟一个空白字符</span></span><br><span class="line">  <span class="attr">multiline.negate:</span> <span class="literal">true</span> <span class="comment"># 不以ip地址开头的行追加到上一行</span></span><br><span class="line">  <span class="attr">multiline.match:</span> <span class="string">after</span> <span class="comment"># 追加到上一行的后面</span></span><br><span class="line">  <span class="comment"># multiline: 多行日志配置，这里实际上不需要配置多行设置，因为nginx的access日志都是单行日志，这里只做演示</span></span><br><span class="line">    <span class="comment"># pattern: 正则表达式</span></span><br><span class="line">    <span class="comment"># negate: false，匹配pattern的行合并到上一行；true，不匹配pattern的行合并到上一行</span></span><br><span class="line">    <span class="comment"># match: after，合并到上一行的末尾；before，合并到上一行的开头</span></span><br><span class="line">  <span class="attr">scan_frequency:</span> <span class="string">10s</span> <span class="comment"># 每 10 秒扫描一次日志文件</span></span><br><span class="line">  <span class="attr">clean_removed:</span> <span class="literal">true</span> <span class="comment"># 在日志文件被删除后是否从其内部状态中移除该文件的记录</span></span><br><span class="line">  <span class="attr">clean_inactive:</span> <span class="string">2h</span> <span class="comment"># 在日志文件处于非活动状态多长时间后将其从状态数据库中移,设置为比 ignore_older + scan_frequency 更大的值</span></span><br><span class="line">  <span class="attr">ignore_older:</span> <span class="string">1h</span> <span class="comment"># 忽略那些比当前时间早于 1 小时的日志文件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.redis:</span> <span class="comment"># Redis输出配置</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;10.250.0.214:6379&quot;</span>] <span class="comment"># Redis服务器地址</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;123456&quot;</span> <span class="comment"># Redis密码</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;filebeat_nginx&quot;</span> <span class="comment"># Redis的key，类型为 list</span></span><br><span class="line">  <span class="attr">db:</span> <span class="number">3</span> <span class="comment"># Redis数据库</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3</span> <span class="comment"># Redis连接超时时间，单位秒</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动Filebeat，并查看日志输出。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e -c conf/filebeat-nginx-to-redis.yml</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看Redis中的数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h 10.250.0.214 -p 6379 -a 123456</span><br><span class="line">10.250.0.214:6379&gt; <span class="keyword">select</span> 3</span><br><span class="line">OK</span><br><span class="line">10.250.0.214:6379[3]&gt; keys filebeat*</span><br><span class="line">1) <span class="string">&quot;filebeat_nginx&quot;</span></span><br><span class="line">10.250.0.214:6379[3]&gt; <span class="built_in">type</span> filebeat_nginx</span><br><span class="line">list</span><br><span class="line">10.250.0.214:6379[3]&gt; LLEN filebeat_nginx</span><br><span class="line">(<span class="built_in">integer</span>) 14</span><br><span class="line">10.250.0.214:6379[3]&gt; LINDEX filebeat_nginx 1</span><br><span class="line"><span class="string">&quot;&#123;\&quot;@timestamp\&quot;:\&quot;2025-03-28T09:15:23.402Z\&quot;,\&quot;@metadata\&quot;:&#123;\&quot;beat\&quot;:\&quot;filebeat\&quot;,\&quot;type\&quot;:\&quot;_doc\&quot;,\&quot;version\&quot;:\&quot;8.17.3\&quot;&#125;,\&quot;host\&quot;:&#123;\&quot;name\&quot;:\&quot;ip-10-250-0-239.cn-northwest-1.compute.internal\&quot;&#125;,\&quot;agent\&quot;:&#123;\&quot;version\&quot;:\&quot;8.17.3\&quot;,\&quot;ephemeral_id\&quot;:\&quot;c0a521fe-690b-46b1-aadc-bbe16ef1db9a\&quot;,\&quot;id\&quot;:\&quot;4dbe185b-900d-4990-b841-c13bf9618fc6\&quot;,\&quot;name\&quot;:\&quot;ip-10-250-0-239.cn-northwest-1.compute.internal\&quot;,\&quot;type\&quot;:\&quot;filebeat\&quot;&#125;,\&quot;log\&quot;:&#123;\&quot;offset\&quot;:46745,\&quot;file\&quot;:&#123;\&quot;path\&quot;:\&quot;/var/log/nginx/access.log\&quot;&#125;&#125;,\&quot;message\&quot;:\&quot;1.119.161.30 - elastic [28/Mar/2025:09:15:13 +0000] \\\&quot;GET /_cluster/stats HTTP/1.1\\\&quot; 200 7457 \\\&quot;-\\\&quot; \\\&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36\\\&quot; \\\&quot;-\\\&quot;\&quot;,\&quot;input\&quot;:&#123;\&quot;type\&quot;:\&quot;log\&quot;&#125;,\&quot;ecs\&quot;:&#123;\&quot;version\&quot;:\&quot;8.0.0\&quot;&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Logstash从Redis中读取日志并写入Elasticsearch">Logstash从Redis中读取日志并写入Elasticsearch</h3><ul class="lvl-0"><li class="lvl-2"><p>创建配置文件<code>logstash-nginx-redis-to-es.conf</code>，将其保存到Logstash安装目录下的conf目录下。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入logstash安装目录</span></span><br><span class="line"><span class="comment"># vim logstash-nginx-redis-to-es.conf</span></span><br><span class="line"><span class="comment"># 配置从 redis 接收数据</span></span><br><span class="line">input &#123; <span class="comment"># 输入源配置</span></span><br><span class="line">    redis &#123; <span class="comment"># Redis输入配置</span></span><br><span class="line">        host =&gt; <span class="string">&#x27;10.250.0.214&#x27;</span> <span class="comment"># Redis服务器地址</span></span><br><span class="line">        port =&gt; <span class="string">&quot;6379&quot;</span> <span class="comment"># Redis服务器端口</span></span><br><span class="line">        password =&gt; <span class="string">&quot;123456&quot;</span> <span class="comment"># Redis密码</span></span><br><span class="line">        db =&gt; <span class="string">&quot;3&quot;</span>           <span class="comment"># Redis数据库</span></span><br><span class="line">        data_type =&gt; <span class="string">&#x27;list&#x27;</span> <span class="comment"># 数据类型为list</span></span><br><span class="line">        key =&gt; <span class="string">&quot;filebeat_nginx&quot;</span>   <span class="comment"># Redis的key</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123; <span class="comment"># 过滤器配置</span></span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;%&#123;IP:client_ip&#125; - %&#123;USER:remote_user&#125; \[%&#123;HTTPDATE:timestamp&#125;\] \&quot;%&#123;WORD:verb&#125; %&#123;URIPATHPARAM:request&#125; HTTP/%&#123;NUMBER:httpversion&#125;\&quot; %&#123;INT:http_status&#125; %&#123;INT:body_bytes_sent&#125; \&quot;%&#123;NOTSPACE:referrer&#125;\&quot; \&quot;%&#123;GREEDYDATA:agent&#125;\&quot; %&#123;QUOTEDSTRING:x_forwarded_for&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mutate &#123;</span><br><span class="line">        enable_metric =&gt; <span class="string">&quot;false&quot;</span> <span class="comment"># 禁用指标上报</span></span><br><span class="line">        remove_field =&gt; [<span class="string">&quot;message&quot;</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;agent&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;ecs&quot;</span>, <span class="string">&quot;@version&quot;</span>] <span class="comment"># 移除不需要的字段</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">date</span> &#123;</span><br><span class="line">        match =&gt; [<span class="string">&quot;timestamp&quot;</span>,<span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>] <span class="comment"># 时间格式转换</span></span><br><span class="line">        target =&gt; <span class="string">&quot;timestamp&quot;</span> <span class="comment"># 目标字段</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在输出配置中添加ES输出配置</span></span><br><span class="line">output &#123; <span class="comment"># 输出配置</span></span><br><span class="line">    stdout &#123; <span class="comment"># 打印到控制台</span></span><br><span class="line">      codec =&gt; rubydebug <span class="comment"># 指定编码器</span></span><br><span class="line">    &#125;</span><br><span class="line">    elasticsearch &#123; <span class="comment"># 输出到ES</span></span><br><span class="line">        index =&gt; <span class="string">&quot;redis_nginx_access_log_%&#123;+YYYY-MM&#125;&quot;</span> <span class="comment"># 索引名,按月分隔</span></span><br><span class="line">        hosts =&gt; [<span class="string">&quot;https://10.250.0.239:9200&quot;</span>] <span class="comment"># ES地址</span></span><br><span class="line">        user =&gt; <span class="string">&quot;elastic&quot;</span>                   <span class="comment"># ES用户名</span></span><br><span class="line">        password =&gt; <span class="string">&quot;123456&quot;</span>                <span class="comment"># ES密码</span></span><br><span class="line">        ssl =&gt; <span class="literal">true</span>                         <span class="comment"># 是否启用SSL，因为这里是https访问ES</span></span><br><span class="line">        ssl_certificate_verification =&gt; <span class="literal">false</span> <span class="comment"># 禁用证书验证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>测试logstash配置是否正确</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/logstash-nginx-redis-to-es.conf --config.test_and_exit</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动logstash</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reload.automatic：修改配置文件时自动重新加载</span></span><br><span class="line">bin/logstash -f config/logstash-nginx-redis-to-es.conf --config.reload.automatic</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在linux下安装LogStash和FileBeat&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;通过示例讲解ELK的经典架构和高并发架构的实现过程&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;LogStash版本8.17.3，FileBeat版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch版本8.17.3，&lt;a href=&quot;/2025/03/20/elasticsearch-01-install/&quot; title=&quot;linux下安装Elasticsearch&quot;&gt;linux下安装Elasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Kibana版本8.17.3，&lt;a href=&quot;/2025/03/21/kibana-01-install/&quot; title=&quot;linux下安装Kibana&quot;&gt;linux下安装Kibana&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch集群搭建，&lt;a href=&quot;/2025/03/24/elasticsearch-02-install-cluster/&quot; title=&quot;linux下安装Elasticsearch集群&quot;&gt;linux下安装Elasticsearch集群&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="kibana" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/kibana/"/>
    
    <category term="logstash" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/kibana/logstash/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
    <category term="kibana" scheme="https://blog.hanqunfeng.com/tags/kibana/"/>
    
    <category term="logstash" scheme="https://blog.hanqunfeng.com/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>linux下Elasticsearch插件安装</title>
    <link href="https://blog.hanqunfeng.com/2025/03/25/elasticsearch-03-plugins/"/>
    <id>https://blog.hanqunfeng.com/2025/03/25/elasticsearch-03-plugins/</id>
    <published>2025-03-25T13:30:05.000Z</published>
    <updated>2025-03-25T08:23:28.882Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何在linux为Elasticsearch安装插件</p></li><li class="lvl-2"><p>Elasticsearch版本8.17.3</p></li></ul><span id="more"></span><h2 id="安装Elasticsearch核心库插件">安装Elasticsearch核心库插件</h2><ul class="lvl-0"><li class="lvl-2"><p>以安装 <code>analysis-icu</code> 这个分词插件为例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入Elasticsearch安装目录，插件的安装路径在 plugins 目录下</span></span><br><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">bin/elasticsearch-plugin install analysis-icu</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装或卸载插件后，需要重启Elasticsearch服务</p></li></ul><h2 id="安装其它来源的插件">安装其它来源的插件</h2><ul class="lvl-0"><li class="lvl-2"><p>以安装 <code>analysis-ik</code> 这个中文分词插件为例</p></li><li class="lvl-2"><p>从<a href="https://release.infinilabs.com/analysis-ik/stable/">https://release.infinilabs.com/analysis-ik/stable/</a>找到对应版本的插件连接，这里以<code>8.17.3</code>为例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.基于url安装插件</span></span><br><span class="line">bin/elasticsearch-plugin install https://release.infinilabs.com/analysis-ik/stable/elasticsearch-analysis-ik-8.17.3.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.基于本地文件安装插件，我们可以先将插件下载的本地目录</span></span><br><span class="line">wget https://release.infinilabs.com/analysis-ik/stable/elasticsearch-analysis-ik-8.17.3.zip -P /tmp/</span><br><span class="line">bin/elasticsearch-plugin install file:///tmp/elasticsearch-analysis-ik-8.17.3.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.可以将下载好的包解压到plugins目录下，然后重启Elasticsearch服务</span></span><br><span class="line"><span class="built_in">mkdir</span> /usr/local/elasticsearch/elasticsearch-8.17.3/plugins/analysis-ik</span><br><span class="line">unzip elasticsearch-analysis-ik-8.17.3.zip -d /usr/local/elasticsearch/elasticsearch-8.17.3/plugins/analysis-ik</span><br></pre></td></tr></table></figure><h2 id="查看和卸载插件">查看和卸载插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有插件</span></span><br><span class="line">bin/elasticsearch-plugin list</span><br><span class="line"><span class="comment"># 卸载插件</span></span><br><span class="line">bin/elasticsearch-plugin remove analysis-ik</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过curl命令查看插件信息</span></span><br><span class="line">curl -u elastic:123456 -k https://localhost:9200/_cat/plugins?v</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装或卸载插件后，需要重启Elasticsearch服务</p></li></ul><h2 id="analysis-ik-中文分词插件的使用"><code>analysis-ik</code> 中文分词插件的使用</h2><ul class="lvl-0"><li class="lvl-2"><p>测试分词效果</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ES的默认分词器是standard，会单字拆分</span></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;中华人民共和国&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#analysis-ik的ik_smart分词器:会做最粗粒度的拆</span></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;中华人民共和国&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#analysis-ik的ik_max_word分词器:会将文本做最细粒度的拆分</span></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;中华人民共和国&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置索引的分词器</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建索引，并指定默认分词器为ik_max_word</span></span><br><span class="line">PUT /test_index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;settings&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;index&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;analysis.analyzer.default.type&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 查看索引setting信息</span></span><br><span class="line">GET /test_index/_settings</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置索引字段的分词器</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建索引</span></span><br><span class="line">PUT /index</span><br><span class="line"><span class="comment"># 指定content字段使用ik分词器</span></span><br><span class="line">POST /index/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">      <span class="string">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#索引文档，也就是插入文档</span></span><br><span class="line">POST /index/_create/1</span><br><span class="line">&#123;<span class="string">&quot;content&quot;</span>:<span class="string">&quot;美国留给伊拉克的是个烂摊子吗&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">POST /index/_create/2</span><br><span class="line">&#123;<span class="string">&quot;content&quot;</span>:<span class="string">&quot;公安部：各地校车将享最高路权&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">POST /index/_create/3</span><br><span class="line">&#123;<span class="string">&quot;content&quot;</span>:<span class="string">&quot;中韩渔警冲突调查：韩警平均每天扣1艘中国渔船&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">POST /index/_create/4</span><br><span class="line">&#123;<span class="string">&quot;content&quot;</span>:<span class="string">&quot;中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#带高亮的查询</span></span><br><span class="line">POST /index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;pre_tags&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;&lt;tag1&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;tag2&gt;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;post_tags&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;&lt;/tag1&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/tag2&gt;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在linux为Elasticsearch安装插件&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装Elasticsearch集群</title>
    <link href="https://blog.hanqunfeng.com/2025/03/24/elasticsearch-02-install-cluster/"/>
    <id>https://blog.hanqunfeng.com/2025/03/24/elasticsearch-02-install-cluster/</id>
    <published>2025-03-24T13:30:05.000Z</published>
    <updated>2025-03-25T10:10:54.922Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何在linux下安装Elasticsearch集群(三节点)</p></li><li class="lvl-2"><p>Elasticsearch版本8.17.3</p></li><li class="lvl-2"><p>单节点安装参考<a href="/2025/03/20/elasticsearch-01-install/" title="linux下安装Elasticsearch">linux下安装Elasticsearch</a>，本文在此基础上完成集群安装</p></li></ul><span id="more"></span><h2 id="集群安装">集群安装</h2><ul class="lvl-0"><li class="lvl-2"><p>三个节点分别安照单节点的安装方式完成下载，用户配置，环境变量配置，系统参数配置，等等。</p></li><li class="lvl-2"><p>任选一个节点作为集群的master节点，我们命名为<code>node-1</code>，其它节点命名为<code>node-2</code>和<code>node-3</code></p></li><li class="lvl-2"><p>先配置<code>node-1</code>节点的配置文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line">cluster.name: test-elk</span><br><span class="line"><span class="comment"># 节点名称</span></span><br><span class="line">node.name: node-1</span><br><span class="line"><span class="comment"># 数据存储路径，默认值 $ES_HOME/data</span></span><br><span class="line">path.data: /usr/local/elasticsearch/data</span><br><span class="line"><span class="comment"># 日志存储路径，默认值 $ES_HOME/logs</span></span><br><span class="line">path.logs: /usr/local/elasticsearch/logs</span><br><span class="line"><span class="comment"># 配置ES启动时是否进行内存锁定检查，默认值true，本机内存比较小时设置为false</span></span><br><span class="line">bootstrap.memory_lock: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 允许通过任何地址访问，开启远程访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的http端口，默认 9200</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的tcp端口，默认 9300</span></span><br><span class="line">transport.port: 9300</span><br><span class="line"><span class="comment"># 集群内的主机列表，开启安全认证时无需配置，注意这里不要进行配置</span></span><br><span class="line"><span class="comment"># discovery.seed_hosts: [&quot;127.0.0.1&quot;]</span></span><br><span class="line"><span class="comment"># 第一次启动时需要参与选主的节点名称，这里只配置node-1</span></span><br><span class="line">cluster.initial_master_nodes: [<span class="string">&quot;node-1&quot;</span>]</span><br><span class="line"><span class="comment">#解决跨域问题</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置<code>node-2</code>节点的配置文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line">cluster.name: test-elk</span><br><span class="line"><span class="comment"># 节点名称</span></span><br><span class="line">node.name: node-2</span><br><span class="line"><span class="comment"># 数据存储路径，默认值 $ES_HOME/data</span></span><br><span class="line">path.data: /usr/local/elasticsearch/data</span><br><span class="line"><span class="comment"># 日志存储路径，默认值 $ES_HOME/logs</span></span><br><span class="line">path.logs: /usr/local/elasticsearch/logs</span><br><span class="line"><span class="comment"># 配置ES启动时是否进行内存锁定检查，默认值true，本机内存比较小时设置为false</span></span><br><span class="line">bootstrap.memory_lock: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 允许通过任何地址访问，开启远程访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的http端口，默认 9200</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的tcp端口，默认 9300</span></span><br><span class="line">transport.port: 9300</span><br><span class="line"><span class="comment">#解决跨域问题</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置<code>node-3</code>节点的配置文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line">cluster.name: test-elk</span><br><span class="line"><span class="comment"># 节点名称</span></span><br><span class="line">node.name: node-3</span><br><span class="line"><span class="comment"># 数据存储路径，默认值 $ES_HOME/data</span></span><br><span class="line">path.data: /usr/local/elasticsearch/data</span><br><span class="line"><span class="comment"># 日志存储路径，默认值 $ES_HOME/logs</span></span><br><span class="line">path.logs: /usr/local/elasticsearch/logs</span><br><span class="line"><span class="comment"># 配置ES启动时是否进行内存锁定检查，默认值true，本机内存比较小时设置为false</span></span><br><span class="line">bootstrap.memory_lock: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 允许通过任何地址访问，开启远程访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的http端口，默认 9200</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的tcp端口，默认 9300</span></span><br><span class="line">transport.port: 9300</span><br><span class="line"><span class="comment">#解决跨域问题</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动<code>node-1</code>，启动成功后我们会在日志中看到如下安全认证信息信息，记录其中的加入集群的节点的token信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line"><span class="comment"># 这些日志信息提供了 Elasticsearch 8 在首次启动时自动配置的安全特性、生成的默认密码、证书指纹以及如何配置 Kibana 和其他节点加入集群的详细说明。</span></span><br><span class="line">✅ Elasticsearch security features have been automatically configured!</span><br><span class="line">✅ Authentication is enabled and cluster connections are encrypted.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是 elastic 用户的默认密码。系统建议你使用 bin/elasticsearch-reset-password -u elastic 命令来重置此密码。</span></span><br><span class="line">ℹ️  Password <span class="keyword">for</span> the elastic user (reset with `bin/elasticsearch-reset-password -u elastic`):</span><br><span class="line">  BNb=*qz6_M*mXL9uZiSP <span class="comment"># 这里会打印出ES自动生成的密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是 HTTP CA 证书的 SHA-256 指纹。CA 证书用于验证 HTTPS 连接的身份。</span></span><br><span class="line">ℹ️  HTTP CA certificate SHA-256 fingerprint:</span><br><span class="line">  3f141c16dfc6e165894bc1672084b220dcdd22ffe02116d51ac18003cfaa5a1d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供了将 Kibana 配置为使用此 Elasticsearch 集群的步骤。</span></span><br><span class="line">ℹ️  Configure Kibana to use this cluster:</span><br><span class="line"><span class="comment"># 启动 Kibana 并按照终端中显示的配置链接进行操作。</span></span><br><span class="line">• Run Kibana and click the configuration <span class="built_in">link</span> <span class="keyword">in</span> the terminal when Kibana starts.</span><br><span class="line"><span class="comment"># 复制提供的注册令牌，并在浏览器中打开 Kibana 时粘贴此令牌。令牌在接下来的 30 分钟内有效。</span></span><br><span class="line"><span class="comment"># 补充说明：生成新的kibana注册令牌：bin/elasticsearch-create-enrollment-token -s kibana</span></span><br><span class="line">• Copy the following enrollment token and <span class="built_in">paste</span> it into Kibana <span class="keyword">in</span> your browser (valid <span class="keyword">for</span> the next 30 minutes):</span><br><span class="line">  eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6ImFSWFBzcFVCTVVmc1d5aUJnbjBtOmRzbVBLQV95UXhDZkJpXzQyWDNEMVEifQ==</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供了将新的 Elasticsearch 节点加入现有集群的步骤。</span></span><br><span class="line">ℹ️ Configure other nodes to <span class="built_in">join</span> this cluster:</span><br><span class="line"><span class="comment"># 使用 bin/elasticsearch --enrollment-token &lt;token&gt; 命令启动新的 Elasticsearch 节点。令牌在接下来的 30 分钟内有效。</span></span><br><span class="line"><span class="comment"># 补充说明：生成新的节点注册令牌：bin/elasticsearch-create-enrollment-token -s node</span></span><br><span class="line">• Copy the following enrollment token and start new Elasticsearch nodes with `bin/elasticsearch --enrollment-token &lt;token&gt;` (valid <span class="keyword">for</span> the next 30 minutes):</span><br><span class="line">  eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6ImF4WFBzcFVCTVVmc1d5aUJnbjFtOkFEallPdnpzUzh1MGJqOFpfVFE4a3cifQ==</span><br><span class="line"><span class="comment"># 如果你在 Docker 中运行 Elasticsearch，可以使用 docker run -e &quot;ENROLLMENT_TOKEN=&lt;token&gt;&quot; docker.elastic.co/elasticsearch/elasticsearch:8.17.3 命令启动新节点。</span></span><br><span class="line">  If you<span class="string">&#x27;re running in Docker, copy the enrollment token and run:</span></span><br><span class="line"><span class="string">  `docker run -e &quot;ENROLLMENT_TOKEN=&lt;token&gt;&quot; docker.elastic.co/elasticsearch/elasticsearch:8.17.3`</span></span><br><span class="line"><span class="string">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>token信息有效时间只有30分钟，超时后可以使用如下命令重新生成新的token</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入node-1节点的ES安装目录，此命令会生成新的节点注册令牌</span></span><br><span class="line">bin/elasticsearch-create-enrollment-token -s node</span><br><span class="line">eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6IlpoRVZ4NVVCeXRPajdLeTBqb3BvOmdHRW44ZW5mU0RDZHA2Yy1uSDF4eGcifQ==</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动<code>node-2</code>节点，启动时要带上token信息，<code>node-3</code>与此一样。这里要注意，只有第一次加入集群时启动才需要带上注册令牌，后续启动不需要token信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入node-2节点的ES安装目录，此命令会启动ES节点，并加入到集群中</span></span><br><span class="line"><span class="comment"># bin/elasticsearch --enrollment-token &lt;token&gt;</span></span><br><span class="line">bin/elasticsearch --enrollment-token eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6IlpoRVZ4NVVCeXRPajdLeTBqb3BvOmdHRW44ZW5mU0RDZHA2Yy1uSDF4eGcifQ==</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>加入集群失败</strong></em></p><ul class="lvl-1"><li class="lvl-2">在执行<code>bin/elasticsearch --enrollment-token &lt;token&gt;</code>时有可能会遇到如下异常：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Aborting auto configuration because the node keystore contains password settings already, with <span class="built_in">exit</span> code 78</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">这通常意味着节点的 <code>keystore</code> 已经包含了密码设置，因此自动配置过程被中止。</li><li class="lvl-2">产生这种错误的原因大概率是当前ES是从已经安装好的服务器上拷贝过来的，而不是全新安装的，此时我们除了需要清空<code>data</code>目录外，还需要删除 <code>keystore</code> 中的密码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看keystore中的密码</span></span><br><span class="line">$ bin/elasticsearch-keystore list</span><br><span class="line">keystore.seed</span><br><span class="line">xpack.security.http.ssl.keystore.secure_password</span><br><span class="line">xpack.security.transport.ssl.keystore.secure_password</span><br><span class="line">xpack.security.transport.ssl.truststore.secure_password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除keystore中的密码</span></span><br><span class="line">$ bin/elasticsearch-keystore remove xpack.security.http.ssl.keystore.secure_password</span><br><span class="line">$ bin/elasticsearch-keystore remove xpack.security.transport.ssl.keystore.secure_password</span><br><span class="line">$ bin/elasticsearch-keystore remove xpack.security.transport.ssl.truststore.secure_password</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2"><p>再次执行<code>bin/elasticsearch --enrollment-token &lt;token&gt;</code>即可。</p></li><li class="lvl-2"><p>另外还可能遇到如下报错：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Aborting enrolling to cluster. Could not communicate with the node on any of the addresses from the enrollment token. All of [10.250.0.239:9200] were attempted., with <span class="built_in">exit</span> code 69</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">这是由于token过期了，重新生成新的token即可</li></ul></div><ul class="lvl-0"><li class="lvl-2"><p>启动成功后会在<code>node-2</code>的配置文件中看到如下配置信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#----------------------- BEGIN SECURITY AUTO CONFIGURATION -----------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following settings, TLS certificates, and keys have been automatically</span></span><br><span class="line"><span class="comment"># generated to configure Elasticsearch security features on 24-03-2025 07:45:11</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable security features</span></span><br><span class="line">xpack.security.enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">xpack.security.enrollment.enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agents</span></span><br><span class="line">xpack.security.http.ssl:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  keystore.path: certs/http.p12</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable encryption and mutual authentication between cluster nodes</span></span><br><span class="line">xpack.security.transport.ssl:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  verification_mode: certificate</span><br><span class="line">  keystore.path: certs/transport.p12</span><br><span class="line">  truststore.path: certs/transport.p12</span><br><span class="line"><span class="comment"># Discover existing nodes in the cluster</span></span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;10.250.0.239:9300&quot;</span>] <span class="comment"># 这里是node-1节点的IP地址和端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 而node-3这里会显示如下信息，也就是越是后来加入进来的，这里就会加上之前所有节点的IP地址和端口号</span></span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;10.250.0.239:9300&quot;</span>, <span class="string">&quot;10.250.0.17:9300&quot;</span>] <span class="comment"># 这里是node-1和node-2节点的IP地址和端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------- END SECURITY AUTO CONFIGURATION -------------------------</span></span><br></pre></td></tr></table></figure><h2 id="验证集群状态">验证集群状态</h2><ul class="lvl-0"><li class="lvl-2"><p>启动完成后，可以通过如下命令查看集群状态：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">$ curl -u elastic:123456 --cacert /usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/http_ca.crt  https://127.0.0.1:9200/_cluster/health?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;test-elk&quot;</span>,</span><br><span class="line">  <span class="string">&quot;status&quot;</span> : <span class="string">&quot;green&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;number_of_nodes&quot;</span> : 3,</span><br><span class="line">  <span class="string">&quot;number_of_data_nodes&quot;</span> : 3,</span><br><span class="line">  <span class="string">&quot;active_primary_shards&quot;</span> : 31,</span><br><span class="line">  <span class="string">&quot;active_shards&quot;</span> : 62,</span><br><span class="line">  <span class="string">&quot;relocating_shards&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;initializing_shards&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;unassigned_shards&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;unassigned_primary_shards&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;delayed_unassigned_shards&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;number_of_pending_tasks&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;number_of_in_flight_fetch&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;task_max_waiting_in_queue_millis&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;active_shards_percent_as_number&quot;</span> : 100.0</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 查看节点信息，其中 * 表示当前节点为master节点</span></span><br><span class="line">$ curl -u elastic:123456 --cacert /usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/http_ca.crt  https://127.0.0.1:9200/_cat/nodes?v</span><br><span class="line">ip           heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name</span><br><span class="line">10.250.0.17             8          63  28    1.03    0.38     0.14 cdfhilmrstw -      node-2</span><br><span class="line">10.250.0.173            9          63  22    0.86    0.37     0.19 cdfhilmrstw -      node-3</span><br><span class="line">10.250.0.239            9          78   6    0.38    0.22     0.16 cdfhilmrstw *      node-1</span><br></pre></td></tr></table></figure><h2 id="重要说明">重要说明</h2><ul class="lvl-0"><li class="lvl-2"><p>集群一旦创建完成，则至少需要两个节点运行才能保证集群可用性，否则集群将无法运行。</p></li><li class="lvl-2"><p>如果<code>node-1</code>节点挂了，集群中剩下的两个节点会重新选择一个新的<code>master</code>节点，不会影响集群的可用性。</p></li><li class="lvl-2"><p>一旦关闭<code>node-1</code>，则重新启动<code>node-1</code>节点前要修改其配置文件，否则无法启动成功。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释掉该配置</span></span><br><span class="line"><span class="comment"># cluster.initial_master_nodes: [&quot;node-1&quot;]</span></span><br><span class="line"><span class="comment"># 加入该配置，实际上最好在重启每个节点前，将每个节点都配置为这样</span></span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;10.250.0.239:9300&quot;</span>, <span class="string">&quot;10.250.0.17:9300&quot;</span>, <span class="string">&quot;10.250.0.173:9300&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="Kibana关联ES集群">Kibana关联ES集群</h2><ul class="lvl-0"><li class="lvl-2"><p>Kibana 关联单节点ES参考 <a href="/2025/03/21/kibana-01-install/" title="linux下安装Kibana">linux下安装Kibana</a>，在此基础上对配置文件进行如下修改：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关联集群的节点地址，将集群内所有节点的地址都配置到该字段中</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">&#x27;https://10.250.0.239:9200&#x27;</span>, <span class="string">&#x27;https://10.250.0.173:9200&#x27;</span>, <span class="string">&#x27;https://10.250.0.17:9200&#x27;</span>]</span><br><span class="line"><span class="comment"># 关联集群的输出地址，将集群内所有节点的地址都配置到该字段中</span></span><br><span class="line">xpack.fleet.outputs: [&#123;<span class="built_in">id</span>: fleet-default-output, name: default, is_default: <span class="literal">true</span>, is_default_monitoring: <span class="literal">true</span>, <span class="built_in">type</span>: elasticsearch, hosts: [<span class="string">&#x27;https://10.250.0.239:9200&#x27;</span>, <span class="string">&#x27;https://10.250.0.173:9200&#x27;</span>, <span class="string">&#x27;https://10.250.0.17:9200&#x27;</span>], ca_trusted_fingerprint: 3f141c16dfc6e165894bc1672084b220dcdd22ffe02116d51ac18003cfaa5a1d&#125;]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>重启Kibana</p></li><li class="lvl-2"><p>只要保证集群内至少有两个ES节点工作正常，即可正常访问Kibana</p></li></ul><h2 id="nginx反向代理ES集群">nginx反向代理ES集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/es.conf <span class="comment"># 添加如下内容</span></span><br><span class="line">upstream es &#123;</span><br><span class="line">    server 10.250.0.239:9200;</span><br><span class="line">    server 10.250.0.173:9200;</span><br><span class="line">    server 10.250.0.17:9200;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       8888;</span><br><span class="line">        server_name  localhost es.domain;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass https://es; <span class="comment">#这个名称和要上面 upstream es 对应，注意这里是 https 协议</span></span><br><span class="line">            proxy_redirect     default;</span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">            proxy_set_header   Host              <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header   X-Real-IP         <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header   X-Forwarded-For   <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header   X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            proxy_max_temp_file_size 0;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#this is the maximum upload size</span></span><br><span class="line">            client_max_body_size       10m;</span><br><span class="line">            client_body_buffer_size    128k;</span><br><span class="line"></span><br><span class="line">            proxy_connect_timeout      90;</span><br><span class="line">            proxy_send_timeout         90;</span><br><span class="line">            proxy_read_timeout         90;</span><br><span class="line">            proxy_buffering            off;</span><br><span class="line">            proxy_request_buffering    off; <span class="comment"># Required for HTTP CLI commands</span></span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;&quot;</span>; <span class="comment"># Clear for keepalive</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="comment"># 访问ES集群</span></span><br><span class="line">curl -u elastic:123456 http://127.0.0.1:8888/_cluster/health?pretty</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在linux下安装Elasticsearch集群(三节点)&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;单节点安装参考&lt;a href=&quot;/2025/03/20/elasticsearch-01-install/&quot; title=&quot;linux下安装Elasticsearch&quot;&gt;linux下安装Elasticsearch&lt;/a&gt;，本文在此基础上完成集群安装&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装Kibana</title>
    <link href="https://blog.hanqunfeng.com/2025/03/21/kibana-01-install/"/>
    <id>https://blog.hanqunfeng.com/2025/03/21/kibana-01-install/</id>
    <published>2025-03-21T13:30:05.000Z</published>
    <updated>2025-04-22T02:38:15.404Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何在linux下安装Kibana</p></li><li class="lvl-2"><p>Kibana版本8.17.3</p></li><li class="lvl-2"><p>Elasticsearch版本8.17.3，<a href="/2025/03/20/elasticsearch-01-install/" title="linux下安装Elasticsearch">linux下安装Elasticsearch</a></p></li></ul><span id="more"></span><h2 id="下载">下载</h2><ul class="lvl-0"><li class="lvl-2"><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#kibana">https://www.elastic.co/cn/downloads/past-releases#kibana</a></p></li><li class="lvl-2"><p>选择对应的版本：这里选择当前的最新版<code>Kibana 8.17.3</code>，之后选择对应的操作系统<code>LINUX X86_64</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-8.17.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>下载完成后解压到<code>/usr/local/kibana</code>目录下，解压命令如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/kibana</span><br><span class="line">tar -zxvf kibana-8.17.3-linux-x86_64.tar.gz -C /usr/local/kibana</span><br></pre></td></tr></table></figure><h2 id="创建启动用户">创建启动用户</h2><ul class="lvl-0"><li class="lvl-2"><p>elasticsearch和kibana都不能用root用户启动</p></li><li class="lvl-2"><p>创建用户<code>elastic</code>，并设置密码，这一步我们在安装elasticsearch的时候已经配置过了，这里就不再赘述了</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd elastic</span><br><span class="line">passwd elastic</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改kibana安装目录的用户权限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R elastic:elastic /usr/local/kibana</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>切换到elastic用户下执行命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - elastic</span><br></pre></td></tr></table></figure><h2 id="关联Kibana和Elasticsearch">关联Kibana和Elasticsearch</h2><h3 id="方法1：注册令牌Token关联-官方推荐">方法1：注册令牌Token关联[官方推荐]</h3><ul class="lvl-0"><li class="lvl-2"><p>注意此方法要求<code>elasticsearch</code>必须开启安全认证，而且<code>xpack.security.http.ssl.enabled</code> 必须设置为 true</p></li><li class="lvl-2"><p>配置启动文件，进入<code>/usr/local/kibana/kibana-8.17.3/config</code>目录，根据需要修改<code>kibana.yml</code>文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口，默认5601</span></span><br><span class="line">server.port: 5601</span><br><span class="line"><span class="comment"># kibana服务器的ip，4个0表示任何一个网卡都可以访问，默认为localhost</span></span><br><span class="line">server.host: <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="comment"># 中文，默认为 en</span></span><br><span class="line">i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span><br><span class="line"><span class="comment"># 配置https，默认值为 certificate</span></span><br><span class="line">elasticsearch.ssl.verificationMode: <span class="string">&#x27;certificate&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>还记得我们第一次启动ES时日志信息中的有关kibana注册令牌的信息吗？那个令牌只有30分钟有效期，过期后可以进入elasticsearch安装目录，重新创建kibana注册令牌</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch-create-enrollment-token -s kibana</span><br><span class="line"><span class="comment"># 输出结果如下</span></span><br><span class="line">eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6ImxlTWh1SlVCcVJWQUw4WGFjMk1HOkVHYTYxcWlfVEotQWQ1Y3dQdXcyckEifQ==</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>进入kibana安装目录，通过下面的命令注册 Kibana</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bin/kibana-setup --enrollment-token &lt;enrollment-token&gt;</span></span><br><span class="line">bin/kibana-setup --enrollment-token eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6ImxlTWh1SlVCcVJWQUw4WGFjMk1HOkVHYTYxcWlfVEotQWQ1Y3dQdXcyckEifQ==</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册成功会输出</span></span><br><span class="line">✔ Kibana configured successfully.</span><br></pre></td></tr></table></figure><div class="tips"><ul class="lvl-1"><li class="lvl-2"><p>如果ES的<code>xpack.security.http.ssl.enabled</code> 设置为 false，注册Kibana时会报错，报错信息如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">✖ Unable to connect to Elasticsearch with the provided enrollment token: Unable to connect to any of the provided hosts.</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">注册成功后会在<code>/usr/local/kibana/kibana-8.17.3/config/kibana.yml</code>文件中添加如下内容：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This section was automatically generated during setup.</span></span><br><span class="line"><span class="comment"># ES服务URL</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">&#x27;https://10.250.0.239:9200&#x27;</span>] <span class="comment"># 10.250.0.239是本机的内网IP</span></span><br><span class="line"><span class="comment"># 指定用于认证的服务账户令牌</span></span><br><span class="line">elasticsearch.serviceAccountToken: AAEAAWVsYXN0aWMva2liYW5hL2Vucm9sbC1wcm9jZXNzLXRva2VuLTE3NDI1NTA5ODU0MTg6Z2lJUERGaG1TR3VNcC1sb0RyMnMydw</span><br><span class="line"><span class="comment"># 指定用来验证 Elasticsearch 服务器 SSL 证书的 CA 证书路径</span></span><br><span class="line">elasticsearch.ssl.certificateAuthorities: [/usr/local/kibana/kibana-8.17.3/data/ca_1742550986498.crt]</span><br><span class="line"><span class="comment"># 配置 Fleet 的输出目标。Fleet 是 Elastic 的一个管理工具，用于管理和监控弹性栈（Elastic Stack）。这个配置定义了 Fleet 默认输出的目标，即 Elasticsearch。</span></span><br><span class="line">xpack.fleet.outputs: [&#123;<span class="built_in">id</span>: fleet-default-output, name: default, is_default: <span class="literal">true</span>, is_default_monitoring: <span class="literal">true</span>, <span class="built_in">type</span>: elasticsearch, hosts: [<span class="string">&#x27;https://10.250.0.239:9200&#x27;</span>], ca_trusted_fingerprint: 3f141c16dfc6e165894bc1672084b220dcdd22ffe02116d51ac18003cfaa5a1d&#125;]</span><br><span class="line">  <span class="comment"># id: fleet-default-output：输出的唯一标识符。</span></span><br><span class="line">  <span class="comment"># name: default：输出的名称。</span></span><br><span class="line">  <span class="comment"># is_default: true：表示这是默认输出。</span></span><br><span class="line">  <span class="comment"># is_default_monitoring: true：表示这是默认的监控输出。</span></span><br><span class="line">  <span class="comment"># type: elasticsearch：输出类型是 Elasticsearch。</span></span><br><span class="line">  <span class="comment"># hosts: [&#x27;https://10.250.0.239:9200&#x27;]：连接到的 Elasticsearch 主机地址。</span></span><br><span class="line">  <span class="comment"># ca_trusted_fingerprint: 3f141c16dfc6e165894bc1672084b220dcdd22ffe02116d51ac18003cfaa5a1d：CA 证书的信任指纹，用于验证 CA 证书的身份。</span></span><br></pre></td></tr></table></figure><h3 id="方法2：用户名密码关联">方法2：用户名密码关联</h3><ul class="lvl-1"><li class="lvl-2"><p>创建kibana连接elasticsearch的用户密码，不能用 <code>elastic</code> 这个用户，因为这个是超级用户，要使用 kibana_system 用户</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入elasticsearch安装目录，执行下面的命令重置 kibana_system 用户的密码</span></span><br><span class="line">bin/elasticsearch-reset-password -u kibana_system -i</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2"><p>配置启动文件，进入<code>/usr/local/kibana/kibana-8.17.3/config</code>目录，修改<code>kibana.yml</code>文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口，默认5601</span></span><br><span class="line">server.port: 5601</span><br><span class="line"><span class="comment"># kibana服务器的ip，4个0表示任何一个网卡都可以访问</span></span><br><span class="line">server.host: <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elasctisearch关联</span></span><br><span class="line"><span class="comment"># ES服务地址，注意这里是https</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">&quot;https://10.250.0.239:9200&quot;</span>]</span><br><span class="line"><span class="comment"># 指定https证书路径，可以从ES的证书目录中获取</span></span><br><span class="line">elasticsearch.ssl.certificateAuthorities: [<span class="string">&quot;/usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/http_ca.crt&quot;</span>]</span><br><span class="line"><span class="comment"># 用户名密码</span></span><br><span class="line">elasticsearch.username: <span class="string">&quot;kibana_system&quot;</span></span><br><span class="line">elasticsearch.password: <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="comment"># 中文</span></span><br><span class="line">i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2"><p>如果ES没有开启安全认证，则只需要进行如下配置即可：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口，默认5601</span></span><br><span class="line">server.port: 5601</span><br><span class="line"><span class="comment"># kibana服务器的ip，4个0表示任何一个网卡都可以访问</span></span><br><span class="line">server.host: <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="comment"># ES服务地址，注意这里是http</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">&quot;http://10.250.0.239:9200&quot;</span>]</span><br><span class="line"><span class="comment"># 中文</span></span><br><span class="line">i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure></div><h2 id="启动Kibana服务">启动Kibana服务</h2><ul class="lvl-0"><li class="lvl-2"><p>进入<code>/usr/local/kibana/kibana-8.17.3</code>目录，执行以下命令启动服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/kibana</span><br><span class="line"><span class="comment"># 后台启动，并将日志写入到logs/kibana.log</span></span><br><span class="line"><span class="built_in">nohup</span> bin/kibana &gt; logs/kibana.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>访问地址：<a href="http://localhost:5601">http://localhost:5601</a>，这里注意登录用户需要使用：<code>elastic</code>，而不是<code>kibana_system</code>。</p></li></ul><h2 id="启动Kibana服务后的日志告警">启动Kibana服务后的日志告警</h2><ul class="lvl-0"><li class="lvl-2"><p>Kibana服务启动后，会在<code>/usr/local/kibana/kibana-8.17.3/logs/kibana.log</code>文件中记录一些错误日志，如果出现错误，可以查看日志，解决错误。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[WARN ][plugins.fleet] xpack.encryptedSavedObjects.encryptionKey is not configured, private key passphrase is being stored <span class="keyword">in</span> plain text</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这个警告信息表明 Kibana 的某些插件（如 Fleet）在缺少 <code>xpack.encryptedSavedObjects.encryptionKey</code> 配置的情况下运行，导致私钥密码和代理卸载令牌以明文形式存储。为了提高安全性，建议配置一个加密密钥。</p></li><li class="lvl-2"><p>生成加密密钥</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kibana-encryption-keys generate</span><br><span class="line">Kibana is currently running with legacy OpenSSL providers enabled! For details and instructions on how to <span class="built_in">disable</span> see https://www.elastic.co/guide/en/kibana/8.17/production.html#openssl-legacy-provider</span><br><span class="line"><span class="comment">## Kibana Encryption Key Generation Utility</span></span><br><span class="line"></span><br><span class="line">The <span class="string">&#x27;generate&#x27;</span> <span class="built_in">command</span> guides you through the process of setting encryption keys <span class="keyword">for</span>:</span><br><span class="line"></span><br><span class="line">xpack.encryptedSavedObjects.encryptionKey</span><br><span class="line">    Used to encrypt stored objects such as dashboards and visualizations</span><br><span class="line">    https://www.elastic.co/guide/en/kibana/current/xpack-security-secure-saved-objects.html#xpack-security-secure-saved-objects</span><br><span class="line"></span><br><span class="line">xpack.reporting.encryptionKey</span><br><span class="line">    Used to encrypt saved reports</span><br><span class="line">    https://www.elastic.co/guide/en/kibana/current/reporting-settings-kb.html#general-reporting-settings</span><br><span class="line"></span><br><span class="line">xpack.security.encryptionKey</span><br><span class="line">    Used to encrypt session information</span><br><span class="line">    https://www.elastic.co/guide/en/kibana/current/security-settings-kb.html#security-session-and-cookie-settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Already defined settings are ignored and can be regenerated using the --force flag.  Check the documentation links <span class="keyword">for</span> instructions on how to rotate encryption keys.</span><br><span class="line">Definitions should be <span class="built_in">set</span> <span class="keyword">in</span> the kibana.yml used configure Kibana.</span><br><span class="line"></span><br><span class="line">Settings:</span><br><span class="line">xpack.encryptedSavedObjects.encryptionKey: 47967e4b78bd26decb622b78f0ddd324</span><br><span class="line">xpack.reporting.encryptionKey: 78b5f603f3b0e6ad76c13a0f5d00cde0</span><br><span class="line">xpack.security.encryptionKey: 8aa7f4dfbc4e734a2a9f92a2730b36af</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置 Kibana 以使用加密密钥，添加到 kibana.yml 文件中：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xpack.encryptedSavedObjects.encryptionKey: 47967e4b78bd26decb622b78f0ddd324</span><br><span class="line">xpack.reporting.encryptionKey: 78b5f603f3b0e6ad76c13a0f5d00cde0</span><br><span class="line">xpack.security.encryptionKey: 8aa7f4dfbc4e734a2a9f92a2730b36af</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>重启 Kibana 服务 以应用更改。</p></li></ul><h2 id="Kibana-自启动脚本">Kibana 自启动脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建服务文件</span></span><br><span class="line">$ vim /usr/lib/systemd/system/kibana.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=kibana</span><br><span class="line">Documentation=https://www.elastic.co</span><br><span class="line">After=es.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 指定ES用户</span></span><br><span class="line">User=elastic</span><br><span class="line">Group=elastic</span><br><span class="line">LimitNOFILE=100000</span><br><span class="line">LimitNPROC=100000</span><br><span class="line">Restart=<span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line">ExecStart=/usr/local/kibana/kibana-8.17.3/bin/kibana</span><br><span class="line">ExecRestart=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载</span></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ systemctl start kibana</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">$ systemctl stop kibana</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">$ systemctl status kibana</span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> kibana</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在linux下安装Kibana&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Kibana版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch版本8.17.3，&lt;a href=&quot;/2025/03/20/elasticsearch-01-install/&quot; title=&quot;linux下安装Elasticsearch&quot;&gt;linux下安装Elasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="kibana" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/kibana/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
    <category term="kibana" scheme="https://blog.hanqunfeng.com/tags/kibana/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装Elasticsearch</title>
    <link href="https://blog.hanqunfeng.com/2025/03/20/elasticsearch-01-install/"/>
    <id>https://blog.hanqunfeng.com/2025/03/20/elasticsearch-01-install/</id>
    <published>2025-03-20T13:30:05.000Z</published>
    <updated>2025-04-21T09:22:28.281Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何在linux下安装Elasticsearch</p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/index.html">Elasticsearch</a>版本8.17.3</p></li></ul><span id="more"></span><h2 id="下载">下载</h2><ul class="lvl-0"><li class="lvl-2"><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></p></li><li class="lvl-2"><p>选择对应的版本：这里选择当前的最新版<code>Elasticsearch 8.17.3</code>，之后选择对应的操作系统<code>LINUX X86_64</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.17.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>下载完成后解压到<code>/usr/local/elasticsearch</code>目录下，解压命令如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/elasticsearch</span><br><span class="line">tar -zxvf elasticsearch-8.17.3-linux-x86_64.tar.gz -C /usr/local/elasticsearch</span><br></pre></td></tr></table></figure><h2 id="ElasticSearch目录结构">ElasticSearch目录结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin        <span class="comment"># 脚本文件，包括启动elasticsearch，安装插件，运行统计数据等</span></span><br><span class="line">config     <span class="comment"># 配置文件目录，如elasticsearch配置、角色配置、jvm配置、证书等。</span></span><br><span class="line">data       <span class="comment"># 数据目录，默认值 $ES_HOME/data，包含节点、分片、索引、文档的所有数据，生产环境建议修改</span></span><br><span class="line">jdk        <span class="comment"># JDK目录，用于运行Elasticsearch，7.x以后自带</span></span><br><span class="line">lib        <span class="comment"># Elasticsearch依赖的JAR包</span></span><br><span class="line">logs       <span class="comment"># 日志目录，默认值 $ES_HOME/logs，生产环境建议修改</span></span><br><span class="line">modules    <span class="comment"># 包含所有的Elasticsearch模块，如Cluster、Discovery、Indices等</span></span><br><span class="line">plugins    <span class="comment"># 已安装插件目录</span></span><br></pre></td></tr></table></figure><h2 id="创建启动用户">创建启动用户</h2><ul class="lvl-0"><li class="lvl-2"><p>elasticsearch和kibana都不能用root用户启动</p></li><li class="lvl-2"><p>创建用户<code>elastic</code>，并设置密码</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd elastic</span><br><span class="line">passwd elastic</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改elasticsearch安装目录的用户权限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R elastic:elastic /usr/local/elasticsearch</span><br></pre></td></tr></table></figure><h2 id="配置环境变量">配置环境变量</h2><ul class="lvl-0"><li class="lvl-2"><p>进入elastic用户主目录，/home/elastic目录下，设置用户级别的环境变量</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到elastic用户</span></span><br><span class="line">su - elastic</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>vim .bash_profile</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Elasticsearch安装目录，它用于定位Elasticsearch的配置文件、插件和其他相关资源。</span></span><br><span class="line"><span class="built_in">export</span> ES_HOME=/usr/local/elasticsearch/elasticsearch-8.17.3</span><br><span class="line"><span class="comment"># Elasticsearch使用的JDK安装目录，在启动Elasticsearch时，它会检查ES_JAVA_HOME环境变量并使用其中的Java路径。</span></span><br><span class="line"><span class="built_in">export</span> ES_JAVA_HOME=/usr/local/elasticsearch/elasticsearch-8.17.3/jdk/</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>执行以下命令使配置生效</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><h2 id="配置JVM参数（可选）">配置JVM参数（可选）</h2><ul class="lvl-0"><li class="lvl-2"><p>ES比较耗内存，建议虚拟机4G或以上内存，jvm1g以上的内存分配</p></li><li class="lvl-2"><p>进入<code>/usr/local/elasticsearch/elasticsearch-8.17.3/config</code>目录，修改<code>jvm.options</code>文件，调整jvm堆内存大小</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms4g <span class="comment"># 设置最小堆内存，默认4g，不能小于1g</span></span><br><span class="line">-Xmx4g <span class="comment"># 设置最大堆内存，默认4g，Xmx不要超过机器内存的50%，不要超过30g</span></span><br></pre></td></tr></table></figure><h2 id="创建数据和日志存储目录">创建数据和日志存储目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到elastic用户</span></span><br><span class="line">su - elastic</span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /usr/local/elasticsearch/data /usr/local/elasticsearch/log</span><br></pre></td></tr></table></figure><h2 id="配置启动文件">配置启动文件</h2><ul class="lvl-0"><li class="lvl-2"><p>如果是本地开发环境，也可以不做任何修改直接启动，因为大部分配置项都有默认值，但为了更好的控制ES，推荐按如下方式进行配置</p></li><li class="lvl-2"><p>进入<code>/usr/local/elasticsearch/elasticsearch-8.17.3/config</code>目录，修改<code>elasticsearch.yml</code>文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群名称，多个节点如果要组成同一个集群，那么集群名称一定要配置成相同，默认值elasticsearch</span></span><br><span class="line">cluster.name: test-elk</span><br><span class="line"><span class="comment"># 节点名称，默认值当前节点部署所在机器的主机名</span></span><br><span class="line">node.name: node-1</span><br><span class="line"><span class="comment"># 数据存储路径，默认值 $ES_HOME/data</span></span><br><span class="line">path.data: /usr/local/elasticsearch/data</span><br><span class="line"><span class="comment"># 日志存储路径，默认值 $ES_HOME/logs</span></span><br><span class="line">path.logs: /usr/local/elasticsearch/logs</span><br><span class="line"><span class="comment"># 配置ES启动时是否进行内存锁定检查，默认值true，本机内存比较小时设置为false</span></span><br><span class="line">bootstrap.memory_lock: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 允许通过任何地址访问，开启远程访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的http端口，默认 9200</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的tcp端口，默认 9300</span></span><br><span class="line">transport.port: 9300</span><br><span class="line"><span class="comment"># 集群内的主机列表，单节点启动时可以不配置</span></span><br><span class="line"><span class="comment"># discovery.seed_hosts: [&quot;127.0.0.1&quot;]</span></span><br><span class="line"><span class="comment"># 第一次启动时需要参与选主的节点名称</span></span><br><span class="line">cluster.initial_master_nodes: [<span class="string">&quot;node-1&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决跨域问题</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h2 id="启动ElasticSearch服务">启动ElasticSearch服务</h2><ul class="lvl-0"><li class="lvl-2"><p>进入<code>/usr/local/elasticsearch/elasticsearch-8.17.3</code>目录，执行以下命令启动服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch</span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line">./bin/elasticsearch -d</span><br></pre></td></tr></table></figure><h2 id="ES启动前的引导检查">ES启动前的引导检查</h2><ul class="lvl-0"><li class="lvl-2"><p>ES启动时，默认会进行引导检查，所谓引导检查就是在服务启动之前对一些重要的配置项进行检查，检查其配置值是否是合理的。引导检查包括对JVM大小、内存锁、虚拟内存、最大线程数、集群发现相关配置等相关的检查，如果某一项或者几项的配置不合理，ES会拒绝启动服务。</p></li><li class="lvl-2"><p>如果启动服务时，报以下错误，则需要解决引导检查中的问题</p></li><li class="lvl-2"><p>1.max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144];</p><ul class="lvl-2"><li class="lvl-6">原因：最大虚拟内存太小,调大系统的虚拟内存</li><li class="lvl-6">解决办法：</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root用户下运行</span></span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line"><span class="comment"># 追加以下内容：</span></span><br><span class="line">vm.max_map_count=262144</span><br><span class="line"><span class="comment"># 保存退出之后执行如下命令：</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>2.max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</p><ul class="lvl-2"><li class="lvl-6">原因：文件描述符太小，调大系统的文件描述符</li><li class="lvl-6">解决办法：</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root用户下运行</span></span><br><span class="line">vim /etc/security/limits.conf</span><br><span class="line"><span class="comment"># 末尾添加如下配置：</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft <span class="built_in">nproc</span> 4096</span><br><span class="line">* hard <span class="built_in">nproc</span> 4096</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>如果只是单节点的开发环境，则可以关闭引导检查，生成环境不建议这样做，因为关闭引导检查后，ES服务将无法保证集群的高可用性。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入elasticsearch安装目录</span></span><br><span class="line">vim config/elasticsearch.yml</span><br><span class="line"><span class="comment"># 添加如下配置：</span></span><br><span class="line"><span class="comment"># 指定节点为单节点，可以绕过引导检查</span></span><br><span class="line">discovery.type: single-node</span><br></pre></td></tr></table></figure><h2 id="服务正常启动后仍然不能正常访问">服务正常启动后仍然不能正常访问</h2><ul class="lvl-0"><li class="lvl-2"><p>访问服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:9200</span><br><span class="line">curl: (52) Empty reply from server</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看日志<code>/usr/local/elasticsearch/elasticsearch-8.17.3/logs/test-elk.log</code>，发现报如下警告：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[WARN ][o.e.h.n.Netty4HttpServerTransport] [node-1] received plaintext http traffic on an https channel, closing connection Netty4HttpChannel&#123;localAddress=/127.0.0.1:9200, remoteAddress=/127.0.0.1:38426&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>原因是ES在启动服务时默认开启了 <code>X-Pack 安全功能</code>，查看配置文件<code>/usr/local/elasticsearch/elasticsearch-8.17.3/config/elasticsearch.yml</code>，发现配置项<code>xpack.security.xxx</code>相关配置项被自动添加了，如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#----------------------- BEGIN SECURITY AUTO CONFIGURATION -----------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following settings, TLS certificates, and keys have been automatically</span></span><br><span class="line"><span class="comment"># generated to configure Elasticsearch security features on 20-03-2025 08:53:20</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable security features</span></span><br><span class="line"><span class="comment"># 启用 Elasticsearch 的安全特性，包括用户认证、角色管理、加密等。</span></span><br><span class="line"><span class="comment"># 开启了 X-Pack 安全功能，这意味着你需要进行用户认证才能访问 Elasticsearch。</span></span><br><span class="line"><span class="comment"># 如果需要关闭 X-Pack 安全功能，你可以将 xpack.security.enabled 设置为 false。</span></span><br><span class="line">xpack.security.enabled: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 启用安全注册功能，允许通过交互式向导来配置安全设置。</span></span><br><span class="line"><span class="comment"># 这使得你可以通过 Kibana 或命令行工具来自动配置 SSL 证书和其他安全设置。</span></span><br><span class="line">xpack.security.enrollment.enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agents</span></span><br><span class="line"><span class="comment"># 启用 HTTP API 客户端连接的加密</span></span><br><span class="line"><span class="comment"># Kibana、Logstash 和其他通过 HTTP API 连接到 Elasticsearch 的客户端将使用 HTTPS 进行通信，增强安全性。</span></span><br><span class="line">xpack.security.http.ssl:</span><br><span class="line">  enabled: <span class="literal">true</span> <span class="comment"># 启用 HTTP 层的 SSL 加密，即https访问，确保客户端与 Elasticsearch 之间的通信是加密的。设置为false时，关闭加密，即http访问</span></span><br><span class="line">  keystore.path: certs/http.p12 <span class="comment"># 指定用于 HTTP 层加密的密钥库文件路径。这是一个 PKCS12 文件，包含用于加密和验证的公钥和私钥。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable encryption and mutual authentication between cluster nodes</span></span><br><span class="line"><span class="comment"># 启用节点间的加密和双向认证</span></span><br><span class="line"><span class="comment"># Elasticsearch 集群中的节点之间的通信将使用 SSL 加密，并且每个节点都会验证其他节点的身份，从而增强集群的安全性。</span></span><br><span class="line"><span class="comment"># 所有节点要配置相同的证书</span></span><br><span class="line">xpack.security.transport.ssl:</span><br><span class="line">  enabled: <span class="literal">true</span> <span class="comment"># 启用传输层的 SSL 加密，确保节点之间的内部通信是加密的。</span></span><br><span class="line">  verification_mode: certificate <span class="comment"># 设置验证模式为 certificate，这意味着节点之间需要双向认证（即每个节点都需要验证对方的身份）。</span></span><br><span class="line">  keystore.path: certs/transport.p12 <span class="comment"># 指定用于传输层加密的密钥库文件路径。这是另一个 PKCS12 文件，包含用于加密和验证的公钥和私钥。</span></span><br><span class="line">  truststore.path: certs/transport.p12 <span class="comment"># 指定用于存储信任证书的信任库文件路径。这通常与密钥库相同，但可以不同。</span></span><br><span class="line"><span class="comment">#----------------------- END SECURITY AUTO CONFIGURATION -------------------------</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>解决方法：</p><ul class="lvl-2"><li class="lvl-6">1.不想开启安全认证，将 <code>xpack.security.enabled</code> 设置为 false，这样即便下面的配置都设置为true也不会有效。</li><li class="lvl-6">2.不想https访问，将 <code>xpack.security.http.ssl.enabled</code> 设置为 false，但这样会导致无法通过认证Token添加其它节点或Kibana。</li><li class="lvl-6">3.不想节点间通信加密，将 <code>xpack.security.transport.ssl.enabled</code> 设置为 false</li></ul></li><li class="lvl-2"><p>为了保证ES的安全，我这里就开启安全认证，并且通过https访问ES，但此时我们访问ES的API就需要带上认证用户，那么用户名和密码是什么呢？</p></li><li class="lvl-2"><p>实际上在ES第一次正常启动时其日志中就打印了自动配置的安全相关的信息提示，里面就给出了登录用户和初始的密码，如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line"><span class="comment"># 这些日志信息提供了 Elasticsearch 8 在首次启动时自动配置的安全特性、生成的默认密码、证书指纹以及如何配置 Kibana 和其他节点加入集群的详细说明。</span></span><br><span class="line">✅ Elasticsearch security features have been automatically configured!</span><br><span class="line">✅ Authentication is enabled and cluster connections are encrypted.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是 elastic 用户的默认密码。系统建议你使用 bin/elasticsearch-reset-password -u elastic 命令来重置此密码。</span></span><br><span class="line">ℹ️  Password <span class="keyword">for</span> the elastic user (reset with `bin/elasticsearch-reset-password -u elastic`):</span><br><span class="line">  BNb=*qz6_M*mXL9uZiSP <span class="comment"># 这里会打印出ES自动生成的密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是 HTTP CA 证书的 SHA-256 指纹。CA 证书用于验证 HTTPS 连接的身份。</span></span><br><span class="line">ℹ️  HTTP CA certificate SHA-256 fingerprint:</span><br><span class="line">  3f141c16dfc6e165894bc1672084b220dcdd22ffe02116d51ac18003cfaa5a1d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供了将 Kibana 配置为使用此 Elasticsearch 集群的步骤。</span></span><br><span class="line">ℹ️  Configure Kibana to use this cluster:</span><br><span class="line"><span class="comment"># 启动 Kibana 并按照终端中显示的配置链接进行操作。</span></span><br><span class="line">• Run Kibana and click the configuration <span class="built_in">link</span> <span class="keyword">in</span> the terminal when Kibana starts.</span><br><span class="line"><span class="comment"># 复制提供的注册令牌，并在浏览器中打开 Kibana 时粘贴此令牌。令牌在接下来的 30 分钟内有效。</span></span><br><span class="line"><span class="comment"># 补充说明：生成新的kibana注册令牌：bin/elasticsearch-create-enrollment-token -s kibana</span></span><br><span class="line">• Copy the following enrollment token and <span class="built_in">paste</span> it into Kibana <span class="keyword">in</span> your browser (valid <span class="keyword">for</span> the next 30 minutes):</span><br><span class="line">  eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6ImFSWFBzcFVCTVVmc1d5aUJnbjBtOmRzbVBLQV95UXhDZkJpXzQyWDNEMVEifQ==</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供了将新的 Elasticsearch 节点加入现有集群的步骤。</span></span><br><span class="line">ℹ️ Configure other nodes to <span class="built_in">join</span> this cluster:</span><br><span class="line"><span class="comment"># 使用 bin/elasticsearch --enrollment-token &lt;token&gt; 命令启动新的 Elasticsearch 节点。令牌在接下来的 30 分钟内有效。</span></span><br><span class="line"><span class="comment"># 补充说明：生成新的节点注册令牌：bin/elasticsearch-create-enrollment-token -s node</span></span><br><span class="line">• Copy the following enrollment token and start new Elasticsearch nodes with `bin/elasticsearch --enrollment-token &lt;token&gt;` (valid <span class="keyword">for</span> the next 30 minutes):</span><br><span class="line">  eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6ImF4WFBzcFVCTVVmc1d5aUJnbjFtOkFEallPdnpzUzh1MGJqOFpfVFE4a3cifQ==</span><br><span class="line"><span class="comment"># 如果你在 Docker 中运行 Elasticsearch，可以使用 docker run -e &quot;ENROLLMENT_TOKEN=&lt;token&gt;&quot; docker.elastic.co/elasticsearch/elasticsearch:8.17.3 命令启动新节点。</span></span><br><span class="line">  If you<span class="string">&#x27;re running in Docker, copy the enrollment token and run:</span></span><br><span class="line"><span class="string">  `docker run -e &quot;ENROLLMENT_TOKEN=&lt;token&gt;&quot; docker.elastic.co/elasticsearch/elasticsearch:8.17.3`</span></span><br><span class="line"><span class="string">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>登录用户为<code>elastic</code>[其角色为超级用户]，我们可以通过日志查看初始的密码，也可以通过如下命令重置密码</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置密码，密码自动生成</span></span><br><span class="line">bin/elasticsearch-reset-password -u elastic</span><br><span class="line"><span class="comment"># 重置密码，自己输入要设置的密码，比如我这里这是为 123456</span></span><br><span class="line">bin/elasticsearch-reset-password -u elastic -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过curl重置密码</span></span><br><span class="line">curl -X PUT -u elastic:old_password -k <span class="string">&#x27;https://127.0.0.1:9200/_security/user/elastic/_password&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">      &quot;password&quot;: &quot;new_password&quot;</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>curl 访问ES服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -k 忽略证书校验</span></span><br><span class="line">curl -u elastic:123456 -k https://127.0.0.1:9200</span><br><span class="line"><span class="comment"># 或者 将认证信息通过header传递，elastic:123456 通过base64加密</span></span><br><span class="line">curl -k https://127.0.0.1:9200 -H <span class="string">&#x27;Authorization: Basic ZWxhc3RpYzoxMjM0NTY=&#x27;</span></span><br><span class="line"><span class="comment"># 也可以通过证书访问https服务，这个证书就是ES在开启安全认证启动时自动生成的</span></span><br><span class="line">curl -u elastic:123456 --cacert /usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/http_ca.crt  https://127.0.0.1:9200</span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;node-1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;test-elk&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;RykjCSPnSCi4Hsi37uziWw&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span> : <span class="string">&quot;8.17.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_type&quot;</span> : <span class="string">&quot;tar&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_hash&quot;</span> : <span class="string">&quot;a091390de485bd4b127884f7e565c0cad59b10d2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_date&quot;</span> : <span class="string">&quot;2025-02-28T10:07:26.089129809Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_snapshot&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;lucene_version&quot;</span> : <span class="string">&quot;9.12.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;7.17.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;7.0.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>开发模式和生产模式</strong></em></p><ul class="lvl-1"><li class="lvl-2">开发模式：如果用户只是出于学习目的，可以在配置文件中添加 <code>discovery.type=single-node</code> ，表示单节点模式，即开发模式。此模式可以绕过引导检查。</li><li class="lvl-2">生产模式：当用户配置了有关集群的相关配置项时就会触发生产模式，在生产模式下，服务启动会触发ES的引导检查或者叫启动检查（bootstrap checks），引导检查十分严格，即某些检查项不通过则ES服务将无法启动。<ul class="lvl-3"><li class="lvl-4">引导检查：在服务启动之前对一些重要的配置项进行检查，检查其配置值是否是合理的。引导检查包括对JVM大小、内存锁、虚拟内存、最大线程数、集群发现相关配置等相关的检查，如果某一项或者几项的配置不合理，ES会拒绝启动服务，并且在开发模式下的某些警告信息会升级成错误信息输出。引导检查十分严格，之所以宁可拒绝服务也要阻止用户启动服务是为了防止用户在对ES的基本使用不了解的前提下启动服务而导致的后期性能问题无法解决或者解决起来很麻烦。因为一旦服务以某种不合理的配置启动，时间久了之后可能会产生较大的性能问题，但此时集群已经变得难以维护和扩展，ES为了避免这种情况而做出了引导检查的设置，本来在开发模式下为警告的启动日志会升级为报错（Error）。这种设定虽然增加了用户的使用门槛，但是避免了日后产生更大的问题。</li></ul></li></ul></div><h2 id="ES浏览器插件">ES浏览器插件</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://elasticvue.com/">Elasticvue</a> : chrome/edge 插件，用于在浏览器中查看ES集群信息，功能非常强大</p></li></ul><h2 id="ES自启动脚本">ES自启动脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建服务文件</span></span><br><span class="line">$ vim /usr/lib/systemd/system/es.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=elasticsearch</span><br><span class="line">Documentation=https://www.elastic.co</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 指定ES用户</span></span><br><span class="line">User=elastic</span><br><span class="line">Group=elastic</span><br><span class="line">LimitNOFILE=100000</span><br><span class="line">LimitNPROC=100000</span><br><span class="line">Restart=<span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line">ExecStart=/usr/local/elasticsearch/elasticsearch-8.17.3/bin/elasticsearch</span><br><span class="line">ExecRestart=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载</span></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ systemctl start es</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">$ systemctl stop es</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">$ systemctl status es</span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> es</span><br></pre></td></tr></table></figure><h2 id="通过ApiKey访问ES">通过ApiKey访问ES</h2><ul class="lvl-0"><li class="lvl-2"><p>关于ApiKey的详细介绍，可以参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-create-api-key.html">官方文档</a></p></li><li class="lvl-2"><p>创建ApiKey</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">curl -k <span class="string">&#x27;https://127.0.0.1:9200/_security/api_key?pretty&#x27;</span> \</span><br><span class="line">-u elastic:123456 \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;elastic_api_key&quot;,</span></span><br><span class="line"><span class="string">    &quot;expiration&quot;: &quot;1d&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 请求参数说明：</span></span><br><span class="line"><span class="comment"># name: ApiKey的名称</span></span><br><span class="line"><span class="comment"># expiration: ApiKey的过期时间，这里设置为一天，如果不设置，则永不过期</span></span><br><span class="line"><span class="comment"># 请求参数中还有一个重要的参数 `role_descriptors`，其含义是，指定ApiKey所拥有的权限，即角色。如果不进行设置，则默认使用当前认证用户的的角色</span></span><br><span class="line"><span class="comment"># metadata: ApiKey的元数据，即自定义的键值对，这里可以不设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;id&quot;</span>:<span class="string">&quot;70It0ZUBrL2GcOxX0d1L&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;elastic_api_key&quot;</span>,</span><br><span class="line">  <span class="string">&quot;expiration&quot;</span>:1743057595723,</span><br><span class="line">  <span class="string">&quot;api_key&quot;</span>:<span class="string">&quot;s85lqVkmQISkBlgXCTJmDQ&quot;</span>,</span><br><span class="line">  <span class="string">&quot;encoded&quot;</span>:<span class="string">&quot;NzBJdDBaVUJyTDJHY094WDBkMUw6czg1bHFWa21RSVNrQmxnWENUSm1EUQ==&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 输出参数说明：</span></span><br><span class="line"><span class="comment"># id: ApiKey的id</span></span><br><span class="line"><span class="comment"># name: ApiKey的名称</span></span><br><span class="line"><span class="comment"># expiration: ApiKey的过期时间，单位为毫秒</span></span><br><span class="line"><span class="comment"># api_key: ApiKey的密钥</span></span><br><span class="line"><span class="comment"># encoded: 对 `id:api_key` 进行base64编码，即可得到 `encoded`</span></span><br><span class="line">    <span class="comment"># echo -n &#x27;70It0ZUBrL2GcOxX0d1L:s85lqVkmQISkBlgXCTJmDQ&#x27; | base64</span></span><br><span class="line">    <span class="comment"># 输出：</span></span><br><span class="line">    <span class="comment"># NzBJdDBaVUJyTDJHY094WDBkMUw6czg1bHFWa21RSVNrQmxnWENUSm1EUQ==</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用ApiKey访问ES</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的ApiKey，就是上面输出的encoded</span></span><br><span class="line">curl -k <span class="string">&#x27;https://127.0.0.1:9200?pretty&#x27;</span> \</span><br><span class="line">-H <span class="string">&#x27;Authorization: ApiKey NzBJdDBaVUJyTDJHY094WDBkMUw6czg1bHFWa21RSVNrQmxnWENUSm1EUQ==&#x27;</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;node-1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;test-elk&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;RykjCSPnSCi4Hsi37uziWw&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span> : <span class="string">&quot;8.17.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_type&quot;</span> : <span class="string">&quot;tar&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_hash&quot;</span> : <span class="string">&quot;a091390de485bd4b127884f7e565c0cad59b10d2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_date&quot;</span> : <span class="string">&quot;2025-02-28T10:07:26.089129809Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_snapshot&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;lucene_version&quot;</span> : <span class="string">&quot;9.12.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;7.17.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;7.0.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看ApiKey信息，参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-api-key.html">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_security/api_key?name=elastic_api_key&amp;pretty&#x27;</span></span><br><span class="line"><span class="comment"># 请求参数说明：</span></span><br><span class="line"><span class="comment"># name: ApiKey的名称，不同的ApiKey可以拥有相同的名称，但id不同，所以通过name进行查询可能会返回多个结果</span></span><br><span class="line"><span class="comment"># 或者 id: ApiKey的id，建议通过id进行查询，id唯一，所以通过id进行查询只会返回一个结果</span></span><br><span class="line"><span class="comment"># username: 查询指定用户的ApiKey</span></span><br><span class="line"><span class="comment"># owner: 是否只查询当前认证用户名下的ApiKey，默认为false，为false时必须至少设置name\ids\username中的一个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不加任何参数进行查询，则返回所有ApiKey的信息</span></span><br><span class="line">curl -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_security/api_key?pretty&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>更新ApiKey，参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-update-api-key.html">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">curl -u elastic:123456 -X PUT -k <span class="string">&#x27;https://127.0.0.1:9200/_security/api_key/&#123;ApiKeyId&#125;?pretty&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;expiration&quot;: &quot;1h&quot;,</span></span><br><span class="line"><span class="string">    &quot;role_descriptors&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;role-a&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;indices&quot;: [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;names&quot;: [&quot;*&quot;],</span></span><br><span class="line"><span class="string">                &quot;privileges&quot;: [&quot;write&quot;]</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;metadata&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;environment&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;level&quot;: 2,</span></span><br><span class="line"><span class="string">            &quot;trusted&quot;: true,</span></span><br><span class="line"><span class="string">            &quot;tags&quot;: [&quot;production&quot;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以更新的参数有：</span></span><br><span class="line"><span class="comment"># expiration: ApiKey的过期时间，如果已经设置过expiration，此时希望使其永不过期，则只能将其设置为一个比较大的时间，比如 &quot;expiration&quot;: &quot;100y&quot;</span></span><br><span class="line"><span class="comment"># role_descriptors: ApiKey所拥有的角色，原先设置了role_descriptors，更新时希望其使用认证用户的角色，则此时可以将其设置为 &quot;role_descriptors&quot;: &#123;&#125;</span></span><br><span class="line"><span class="comment"># metadata: ApiKey的元数据，原先设置了 metadata ，更新时希望去除所有 metadata 信息，则此时可以将其设置为 &quot;metadata&quot;: &#123;&#125;</span></span><br><span class="line"><span class="comment"># 注意：三个参数可以只更新其中任何一个，更新哪个就只替换哪个，没有被更新的参数不会受到修改，当然也可以同时更新全部</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>置ApiKey无效，参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-invalidate-api-key.html">官方文档</a>，官方没有提供删除ApiKey的接口，只有置无效的接口</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">curl -u elastic:123456 -X DELETE -k <span class="string">&#x27;https://127.0.0.1:9200/_security/api_key?pretty&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;elastic_api_key&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 请求参数说明：</span></span><br><span class="line"><span class="comment"># name: ApiKey的名称，会</span></span><br><span class="line"><span class="comment"># 或者使用  &quot;ids&quot; : [ &quot;70It0ZUBrL2GcOxX0d1L&quot; ] ，通过id进行删除，此时可以一次删除多个ApiKey</span></span><br><span class="line"><span class="comment"># username: 删除指定用户的ApiKey</span></span><br><span class="line"><span class="comment"># owner: 是否只删除当前认证用户名下的ApiKey，默认为false，为false时必须至少设置name\ids\username中的一个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;invalidated_api_keys&quot;</span>:[</span><br><span class="line">    <span class="string">&quot;70It0ZUBrL2GcOxX0d1L&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;previously_invalidated_api_keys&quot;</span>:[ ],</span><br><span class="line">  <span class="string">&quot;error_count&quot;</span>:0</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 输出参数说明：</span></span><br><span class="line"><span class="comment"># invalidated_api_keys: 被删除的ApiKey的id列表</span></span><br><span class="line"><span class="comment"># previously_invalidated_api_keys: 之前被删除的ApiKey的id列表</span></span><br><span class="line"><span class="comment"># error_count: 错误数量，如果为0，则表示成功</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用ApiKey的优缺点</p><ul class="lvl-2"><li class="lvl-6">优点</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">安全性:</span><br><span class="line">    细粒度控制: API Key 可以与特定的角色描述符关联，允许非常细化的权限控制。这有助于遵循最小权限原则，只授予必要的访问权限。</span><br><span class="line">    时间限制: 可以为 API Key 设置过期时间，确保密钥不会永远有效，减少长期泄露的风险。</span><br><span class="line">    可撤销性: 如果怀疑某个 API Key 被泄露或不再需要，可以随时撤销该密钥，提高安全性。</span><br><span class="line">方便性:</span><br><span class="line">    易于生成和管理: 创建和管理 API Key 的过程通常很简单，可以通过 REST API 或 Kibana 界面进行。</span><br><span class="line">    无需用户交互: 一旦生成，API Key 可以直接用于自动化脚本或应用程序，无需用户手动登录或提供凭据。</span><br><span class="line">审计和监控:</span><br><span class="line">    跟踪使用情况: 通过日志记录和审计功能，可以跟踪哪个 API Key 进行了哪些操作，便于安全审计和问题排查。</span><br><span class="line">    活动监控: 可以监控 API Key 的活动，及时发现异常行为，并采取相应的措施。</span><br><span class="line">灵活性:</span><br><span class="line">    多种用途: API Key 可以用于各种用途，如应用程序集成、数据导入导出、监控工具等。</span><br><span class="line">    多环境支持: 可以为不同的环境（开发、测试、生产）生成独立的 API Key，确保各环境之间的隔离。</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">缺点</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">安全性风险:</span><br><span class="line">    密钥存储: API Key 需要安全地存储和传输，如果密钥被泄露，攻击者可以利用它进行未授权的操作。</span><br><span class="line">    静态凭证: 与动态的身份验证机制（如 OAuth 令牌）相比，API Key 是静态的，一旦泄露可能会导致长期的安全风险。</span><br><span class="line">管理复杂性:</span><br><span class="line">    密钥管理: 随着时间和使用规模的增长，管理和维护大量 API Key 可能会变得复杂。需要定期更新和撤销老旧的密钥。</span><br><span class="line">    角色分配: 细粒度的权限控制虽然提供了安全性，但也增加了配置和管理的复杂性。</span><br><span class="line">缺乏用户上下文:</span><br><span class="line">    匿名性: API Key 通常没有用户上下文信息，不像基于用户的认证机制（如 Basic Auth 或 OAuth），这可能不利于某些依赖用户身份的功能。</span><br><span class="line">依赖客户端配置:</span><br><span class="line">    易错性: 如果客户端配置不当，如错误地处理或暴露 API Key，可能会导致安全漏洞。</span><br><span class="line">    更新挑战: 更新 API Key 后，所有使用该密钥的客户端都需要同步更新，这在大规模环境中可能是一个挑战。</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>何时使用 API Key</p><ul class="lvl-2"><li class="lvl-6">当您需要为自动化脚本、第三方服务或应用程序提供访问权限时。</li><li class="lvl-6">当您希望实现细粒度的权限控制并能够轻松管理密钥的生命周期时。</li><li class="lvl-6">当不需要用户上下文或复杂的用户会话管理时。</li></ul></li><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建ApiKey</span></span><br><span class="line">curl -X POST -k <span class="string">&#x27;https://127.0.0.1:9200/_security/api_key?pretty&#x27;</span> \</span><br><span class="line">-u elastic:123456 \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;name&quot;: &quot;my-api-key&quot;,</span></span><br><span class="line"><span class="string">  &quot;expiration&quot;: &quot;1d&quot;,</span></span><br><span class="line"><span class="string">  &quot;role_descriptors&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;role-a&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;cluster&quot;: [&quot;all&quot;],</span></span><br><span class="line"><span class="string">      &quot;indices&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;names&quot;: [&quot;index-a*&quot;],</span></span><br><span class="line"><span class="string">          &quot;privileges&quot;: [&quot;read&quot;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;role-b&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;cluster&quot;: [&quot;all&quot;],</span></span><br><span class="line"><span class="string">      &quot;indices&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;names&quot;: [&quot;index-b*&quot;],</span></span><br><span class="line"><span class="string">          &quot;privileges&quot;: [&quot;all&quot;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;metadata&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;application&quot;: &quot;my-application&quot;,</span></span><br><span class="line"><span class="string">    &quot;environment&quot;: &#123;</span></span><br><span class="line"><span class="string">       &quot;level&quot;: 1,</span></span><br><span class="line"><span class="string">       &quot;trusted&quot;: true,</span></span><br><span class="line"><span class="string">       &quot;tags&quot;: [&quot;dev&quot;, &quot;staging&quot;]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># name: ApiKey的名称</span></span><br><span class="line"><span class="comment"># expiration: ApiKey的过期时间，支持的时间单位为：s（秒），m（分钟），h（小时），d（天），w（周），M（月），y（年）</span></span><br><span class="line">    <span class="comment"># expiration不能设置小于1分钟的时间，如果省略expiration，则表示无过期时间</span></span><br><span class="line"><span class="comment"># role_descriptors: 角色描述符，包含多个角色</span></span><br><span class="line">    <span class="comment"># role-a: 角色描述符名称，包含集群和索引的权限描述</span></span><br><span class="line">        <span class="comment"># cluster: 集群权限</span></span><br><span class="line">            <span class="comment"># all: 表示拥有全部集群权限</span></span><br><span class="line">            <span class="comment"># manage: 可以管理集群设置、模板和节点上的分片分配。</span></span><br><span class="line">            <span class="comment"># monitor: 可以监视集群的状态。</span></span><br><span class="line">            <span class="comment"># manage_security: 可以管理安全设置，如用户、角色和角色映射。</span></span><br><span class="line">            <span class="comment"># manage_api_key: 管理 API Key</span></span><br><span class="line">        <span class="comment"># indices: 索引权限，包含names和privileges，</span></span><br><span class="line">            <span class="comment"># names: 表示索引名称，index-a*表示所有以index-a开头的索引，all表示所有索引</span></span><br><span class="line">            <span class="comment"># privileges: 表示索引权限</span></span><br><span class="line">                <span class="comment"># read: 表示拥有索引的读取权限</span></span><br><span class="line">                <span class="comment"># write: 表示拥有索引的写入权限</span></span><br><span class="line">                <span class="comment"># delete: 表示拥有索引的删除权限</span></span><br><span class="line">                <span class="comment"># index: 表示拥有索引的索引权限</span></span><br><span class="line">                <span class="comment"># manage: 表示拥有索引的设置和映射权限</span></span><br><span class="line">                <span class="comment"># monitor: 表示拥有索引的监控权限</span></span><br><span class="line">                <span class="comment"># create_index: 表示允许创建索引</span></span><br><span class="line">                <span class="comment"># crud: 组合了 read, index, delete 权限</span></span><br><span class="line">                <span class="comment"># all: 表示拥有全部索引权限</span></span><br><span class="line">            <span class="comment"># allow_restricted_indices: 表示是否允许对 restricted indices(受限制索引，比如以.开头的索引) 进行操作，true表示允许，false表示不允许</span></span><br><span class="line"><span class="comment"># metadata: 元数据</span></span><br><span class="line">    <span class="comment"># application: 表示应用程序名称</span></span><br><span class="line">    <span class="comment"># environment: 表示环境信息</span></span><br><span class="line">        <span class="comment"># level: 表示环境级别</span></span><br><span class="line">        <span class="comment"># trusted: 表示是否受信任</span></span><br><span class="line">        <span class="comment"># tags: 表示环境标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;id&quot;</span> : <span class="string">&quot;-kKu0ZUBrL2GcOxX0t1R&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;my-api-key&quot;</span>,</span><br><span class="line">  <span class="string">&quot;expiration&quot;</span> : 1743066050130,</span><br><span class="line">  <span class="string">&quot;api_key&quot;</span> : <span class="string">&quot;03eNOYg_SCCHdzc0orsRvw&quot;</span>,</span><br><span class="line">  <span class="string">&quot;encoded&quot;</span> : <span class="string">&quot;LWtLdTBaVUJyTDJHY094WDB0MVI6MDNlTk9ZZ19TQ0NIZHpjMG9yc1J2dw==&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ApiKey信息，根据id查询只会返回一个ApiKey，根据name查询会返回多个ApiKey</span></span><br><span class="line">curl -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_security/api_key?id=-kKu0ZUBrL2GcOxX0t1R&amp;pretty&#x27;</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;api_keys&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span> : <span class="string">&quot;-kKu0ZUBrL2GcOxX0t1R&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span> : <span class="string">&quot;my-api-key&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;rest&quot;</span>,</span><br><span class="line">      <span class="string">&quot;creation&quot;</span> : 1742979650130,</span><br><span class="line">      <span class="string">&quot;expiration&quot;</span> : 1743066050130,</span><br><span class="line">      <span class="string">&quot;invalidated&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;username&quot;</span> : <span class="string">&quot;elastic&quot;</span>,</span><br><span class="line">      <span class="string">&quot;realm&quot;</span> : <span class="string">&quot;reserved&quot;</span>,</span><br><span class="line">      <span class="string">&quot;realm_type&quot;</span> : <span class="string">&quot;reserved&quot;</span>,</span><br><span class="line">      <span class="string">&quot;metadata&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;environment&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;level&quot;</span> : 1,</span><br><span class="line">          <span class="string">&quot;trusted&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;tags&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;dev&quot;</span>,</span><br><span class="line">            <span class="string">&quot;staging&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;application&quot;</span> : <span class="string">&quot;my-application&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;role_descriptors&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;role-a&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;cluster&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;all&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;indices&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;names&quot;</span> : [</span><br><span class="line">                <span class="string">&quot;index-a*&quot;</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">&quot;privileges&quot;</span> : [</span><br><span class="line">                <span class="string">&quot;read&quot;</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">&quot;allow_restricted_indices&quot;</span> : <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;applications&quot;</span> : [ ],</span><br><span class="line">          <span class="string">&quot;run_as&quot;</span> : [ ],</span><br><span class="line">          <span class="string">&quot;metadata&quot;</span> : &#123; &#125;,</span><br><span class="line">          <span class="string">&quot;transient_metadata&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;enabled&quot;</span> : <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;role-b&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;cluster&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;all&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;indices&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;names&quot;</span> : [</span><br><span class="line">                <span class="string">&quot;index-b*&quot;</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">&quot;privileges&quot;</span> : [</span><br><span class="line">                <span class="string">&quot;all&quot;</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">&quot;allow_restricted_indices&quot;</span> : <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;applications&quot;</span> : [ ],</span><br><span class="line">          <span class="string">&quot;run_as&quot;</span> : [ ],</span><br><span class="line">          <span class="string">&quot;metadata&quot;</span> : &#123; &#125;,</span><br><span class="line">          <span class="string">&quot;transient_metadata&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;enabled&quot;</span> : <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新ApiKey</span></span><br><span class="line">curl -u elastic:123456 -X PUT -k <span class="string">&#x27;https://127.0.0.1:9200/_security/api_key/-kKu0ZUBrL2GcOxX0t1R?pretty&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;metadata&quot;: &#123;&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;updated&quot;</span> : <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 置ApiKey无效</span></span><br><span class="line">curl -u elastic:123456 -X DELETE -k <span class="string">&#x27;https://127.0.0.1:9200/_security/api_key?pretty&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">   &quot;ids&quot; : [ &quot;-kKu0ZUBrL2GcOxX0t1R&quot; ]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;invalidated_api_keys&quot;</span> : [</span><br><span class="line">    <span class="string">&quot;-kKu0ZUBrL2GcOxX0t1R&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;previously_invalidated_api_keys&quot;</span> : [ ],</span><br><span class="line">  <span class="string">&quot;error_count&quot;</span> : 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在linux下安装Elasticsearch&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/8.17/index.html&quot;&gt;Elasticsearch&lt;/a&gt;版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>npm使用手册</title>
    <link href="https://blog.hanqunfeng.com/2025/03/13/npm-study/"/>
    <id>https://blog.hanqunfeng.com/2025/03/13/npm-study/</id>
    <published>2025-03-13T13:30:05.000Z</published>
    <updated>2025-03-17T07:18:07.043Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何使用npm</p></li><li class="lvl-2"><p>npm版本10.5.0</p></li></ul><span id="more"></span><h2 id="npm简介">npm简介</h2><ul class="lvl-0"><li class="lvl-2"><p>npm（Node Package Manager）是 Node.js 的包管理工具，也是 JavaScript 编程社区中最常用的管理和分享代码的工具。</p></li><li class="lvl-2"><p>它允许开发者轻松地安装、共享、和管理在项目中使用的 JavaScript 包。</p></li><li class="lvl-2"><p>npm 分为两个主要部分：命令行工具（CLI）和 npm 注册表。</p></li><li class="lvl-2"><p>命令行工具（CLI）：用于与注册表进行交互，安装和管理项目中的依赖。</p></li><li class="lvl-2"><p>npm 注册表：一个在线的数据库，存储了数百万个开源的 Node.js 包，开发者可以在自己的项目中使用这些包。</p></li></ul><h2 id="npm-的安装与配置">npm 的安装与配置</h2><ul class="lvl-0"><li class="lvl-2"><p>npm 通常与 Node.js 一起安装，因此安装 Node.js 会自动安装 npm。</p></li><li class="lvl-2"><p>从 <a href="https://nodejs.org/zh-cn">Node.js 官网</a>下载并安装 Node.js。</p></li><li class="lvl-2"><p>跟随<a href="https://nodejs.org/zh-cn/download">Node.js 官网–Download</a>的提示完成 Node.js 的安装，</p></li><li class="lvl-2"><p>现在官方更推荐使用<a href="https://github.com/nvm-sh/nvm">nvm</a>的方式进行安装，当然你也可以选择对应系统的二进制包进行安装（此种方法要将node的bin目录配置到PATH环境变量），node.js安装完成后，npm 也会一起安装。</p></li><li class="lvl-2"><p>打开命令行或终端工具，输入以下命令来验证是否成功安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><h2 id="npm-常用命令">npm 常用命令</h2><h3 id="npm-init：初始化项目">npm init：初始化项目</h3><ul class="lvl-0"><li class="lvl-2"><p>npm init命令用于初始化一个新的 Node.js 项目，生成一个package.json文件，其中包含项目的元数据和配置。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>执行该命令后，会按照提示输入一些项目相关的信息，如名称、版本、描述等。也可以使用 <code>npm init -y</code> 跳过提示，生成一个默认的package.json文件。</p></li></ul><h3 id="npm-create：基于模板创建项目">npm create：基于模板创建项目</h3><ul class="lvl-0"><li class="lvl-2"><p>npm create命令用于基于模板创建一个新的 Node.js 项目，比如我们创建一个基于Vue的Web项目，可以执行以下命令：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vue@latest</span><br></pre></td></tr></table></figure><h3 id="npm-install：安装依赖包">npm install：安装依赖包</h3><ul class="lvl-0"><li class="lvl-2"><p>npm install命令用于安装项目中所需的依赖包，比如在package.json文件中指定了依赖包，可以执行以下命令：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装完成后，会在node_modules目录下生成依赖包，并更新package-lock.json文件。</p></li><li class="lvl-2"><p>安装指定依赖包，默认安装最新版，自动将依赖包添加到 package.json 的 “dependencies” 部分。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果需要安装特定的版本，可以执行以下命令：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express@4.17.1</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装开发依赖包，安装并写入package.json的&quot;devDependencies&quot;中</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install express -D</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">npm install express --save-dev</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装全局依赖包</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装的包会被安装到全局的node_modules目录下，不会被安装到项目目录下，也不会出现在package.json中</span></span><br><span class="line">npm install express -g</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">npm install express --global</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局node_modules目录路径查看</span></span><br><span class="line">npm root -g</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>从本地安装依赖包</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从本地安装</span></span><br><span class="line">npm install ./path/to/local_project</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>从远程Git仓库安装依赖包</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装公共项目：</span></span><br><span class="line"><span class="comment"># npm install https://github.com/user_name/node_project</span></span><br><span class="line">npm install https://github.com/trentm/json.git</span><br><span class="line"><span class="comment"># 缩写，如果是gitlab仓库，则需要使用gitlab前缀，推荐使用上面的完整语义版本</span></span><br><span class="line">npm install github:trentm/json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装特定提交：</span></span><br><span class="line"><span class="comment"># npm install https://github.com/user_name/node_project#commit</span></span><br><span class="line">npm install https://github.com/trentm/json.git\#6912b25272312d0f13ad32e98ebc1b4deb6334cc</span><br><span class="line"><span class="comment"># 安装特定分支：</span></span><br><span class="line"><span class="comment"># npm install https://github.com/user_name/node_project#branchName</span></span><br><span class="line">npm install https://github.com/trentm/json.git\#streaming</span><br><span class="line"><span class="comment"># 通过标签安装：</span></span><br><span class="line"><span class="comment"># npm install https://github.com/user_name/node_project#tag</span></span><br><span class="line">npm install https://github.com/trentm/json.git\#10.0.0</span><br><span class="line"><span class="comment"># 安装特定版本：</span></span><br><span class="line"><span class="comment"># npm install https://github.com/user_name/node_project#version</span></span><br><span class="line">npm install https://github.com/trentm/json.git\#10.0.0</span><br><span class="line"><span class="comment"># 完整的语义版本：</span></span><br><span class="line">npm install https://github.com/trentm/json.git\#semver:v10.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用git的ssh repo link 安装私有库：后面同样可以接 commit、branchName、tag、version等</span></span><br><span class="line"><span class="comment"># npm install git+ssh://git@github.com:user_name/node_project.git</span></span><br><span class="line">npm install git+ssh://git@github.com/trentm/json.git</span><br></pre></td></tr></table></figure><h3 id="npm-update：更新依赖包">npm update：更新依赖包</h3><ul class="lvl-0"><li class="lvl-2"><p>npm update命令用于更新项目中的依赖包，比如要更新express依赖包到最新版本，可以执行以下命令：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新生产环境依赖包</span></span><br><span class="line">npm update express</span><br><span class="line"><span class="comment"># 更新开发环境依赖包</span></span><br><span class="line">npm update express -D</span><br><span class="line"><span class="comment"># 全局更新</span></span><br><span class="line">npm update express -g</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改了package.json文件，并希望更新依赖包，可以执行以下命令：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># #为了避免不必要的麻烦，可以先删除项目中的node_modules文件夹在执行，此时和 npm install 一样</span></span><br><span class="line">npm update</span><br></pre></td></tr></table></figure><h3 id="npm-outdate：检查哪些包可以升级">npm outdate：检查哪些包可以升级</h3><ul class="lvl-0"><li class="lvl-2"><p>npm outdate命令用于检查哪些包可以升级</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查当前项目下哪些包可以升级</span></span><br><span class="line">npm outdate</span><br><span class="line"><span class="comment"># 检查指定包</span></span><br><span class="line">npm outdated express</span><br><span class="line"><span class="comment"># 检查全局模块</span></span><br><span class="line">npm outdate -g</span><br><span class="line">npm outdated -g express</span><br></pre></td></tr></table></figure><h3 id="npm-upgrade：判断package-json哪些包需要升级">npm-upgrade：判断package.json哪些包需要升级</h3><ul class="lvl-0"><li class="lvl-2"><p>安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-upgrade</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断package.json哪些包需要升级，用户确认后会自动更新package.json文件，此时只是更新文件，并没有真正升级</span></span><br><span class="line">npm-upgrade</span><br><span class="line"><span class="comment"># 基于package.json中的配置进行升级，可以先删除node_modules再执行，此时和 npm install 一样</span></span><br><span class="line">npm update</span><br></pre></td></tr></table></figure><h3 id="npm-list：列出依赖包">npm list：列出依赖包</h3><ul class="lvl-0"><li class="lvl-2"><p>npm list命令用于列出项目中的依赖包，比如要列出当前项目下的依赖包，可以执行以下命令：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时列出的是package.json中的dependencies依赖包</span></span><br><span class="line">npm list</span><br><span class="line"><span class="comment"># 列出开发依赖包，此时会列出package.json中的devDependencies和dependencies依赖包</span></span><br><span class="line">npm list -D</span><br><span class="line"><span class="comment"># 列出指定包</span></span><br><span class="line">npm list express</span><br><span class="line"><span class="comment"># 列出全局模块</span></span><br><span class="line">npm list -g</span><br><span class="line">npm list -g express</span><br></pre></td></tr></table></figure><h3 id="npm-uninstall：卸载依赖包">npm uninstall：卸载依赖包</h3><ul class="lvl-0"><li class="lvl-2"><p>npm uninstall命令用于卸载项目中的依赖包，比如要卸载express依赖包，可以执行以下命令：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall express</span><br><span class="line"><span class="comment"># 删除全局模块</span></span><br><span class="line">npm uninstall -g express</span><br></pre></td></tr></table></figure><h3 id="npm-search：搜索依赖包">npm search：搜索依赖包</h3><ul class="lvl-0"><li class="lvl-2"><p>npm search命令用于搜索依赖包，比如要搜索express依赖包，可以执行以下命令：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm search express</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>可以使用正则表达式搜索依赖包，比如要搜索以express开头的依赖包，可以执行以下命令：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm search /^express/</span><br></pre></td></tr></table></figure><h3 id="npm-view-npm-info：查看包信息">npm view == npm info：查看包信息</h3><ul class="lvl-0"><li class="lvl-2"><p>npm view命令用于查看包的信息，比如要查看express依赖包的信息，可以执行以下命令：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm view express</span><br><span class="line"><span class="comment"># 或者，view与info命令可以互换使用</span></span><br><span class="line">npm info express</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>npm view命令还可以查看包的所有版本信息，比如要查看express依赖包的所有版本信息，可以执行以下命令：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时我们从结果中选择一个版本进行安装即可</span></span><br><span class="line">npm view express versions</span><br></pre></td></tr></table></figure><h3 id="npm-home：打开包的主页">npm home：打开包的主页</h3><ul class="lvl-0"><li class="lvl-2"><p>打开某个 npm 包的主页（通常是 GitHub 主页或 npm 页面）。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm home express</span><br></pre></td></tr></table></figure><h2 id="npm-镜像源">npm 镜像源</h2><ul class="lvl-0"><li class="lvl-2"><p>npm 默认使用官方的镜像源，但是官方的镜像源速度很慢，我们可以使用第三方的镜像源来加速下载。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm 官方原始镜像网址是：https://registry.npmjs.org/</span><br><span class="line">淘宝 NPM 镜像：http://registry.npmmirror.com</span><br><span class="line">阿里云 NPM 镜像：https://npm.aliyun.com</span><br><span class="line">腾讯云 NPM 镜像：https://mirrors.cloud.tencent.com/npm/</span><br><span class="line">华为云 NPM 镜像：https://mirrors.huaweicloud.com/repository/npm/</span><br><span class="line">网易 NPM 镜像：https://mirrors.163.com/npm/</span><br><span class="line">中国科学技术大学开源镜像站：http://mirrors.ustc.edu.cn/</span><br><span class="line">清华大学开源镜像站：https://mirrors.tuna.tsinghua.edu.cn/</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>可以通过以下命令来查看当前使用的镜像源：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>可以通过以下命令来设置镜像源：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>可以通过以下命令来删除用户配置的镜像源，删除后恢复为默认镜像源：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config delete registry</span><br></pre></td></tr></table></figure><h2 id="npm-配置">npm 配置</h2><ul class="lvl-0"><li class="lvl-2"><p>可以通过以下命令来查看npm的配置信息：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看全局配置信息，只显示用户自定义的配置信息</span></span><br><span class="line">npm config list</span><br><span class="line"><span class="comment"># 查看全局配置信息，显示所有配置信息及其默认缺省值</span></span><br><span class="line">npm config <span class="built_in">ls</span> -l</span><br><span class="line"><span class="comment"># json 格式 显示全部配置信息</span></span><br><span class="line">npm config list --json</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>默认全局配置在当前用户HOME目录下的.npmrc文件中，可以通过以下命令来查看全局配置信息：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.npmrc</span><br><span class="line"><span class="built_in">cat</span> ~/.npmrc | grep registry</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在项目根目录创建一个.npmrc 文件可以为该项目单独设置 npm 配置。</p></li><li class="lvl-2"><p>npm config 允许你控制 npm 的行为，包括 安装目录、代理、日志级别、依赖管理 等。</p></li><li class="lvl-2"><p>你可以使用 <code>npm config get &lt;key&gt;</code> 查看值，<code>npm config set &lt;key&gt; &lt;value&gt;</code> 进行修改，<code>npm config delete &lt;key&gt;</code> 删除设置。</p></li><li class="lvl-2"><p>npm常用配置</p></li></ul><table><thead><tr><th>配置项</th><th>作用</th><th>默认值</th></tr></thead><tbody><tr><td>prefix</td><td>设置 npm 全局安装的路径（npm install -g 影响的目录）</td><td>环境变量 NODE_HOME 或 /usr/local（系统）</td></tr><tr><td>cache</td><td>npm 的缓存目录</td><td>~/.npm</td></tr><tr><td>registry</td><td>指定 npm 的包管理仓库地址（如官方、淘宝镜像）</td><td><a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></td></tr><tr><td>strict-ssl</td><td>是否强制使用 HTTPS 进行 npm 操作</td><td>true</td></tr><tr><td>proxy</td><td>配置 HTTP 代理</td><td>null</td></tr><tr><td>https-proxy</td><td>配置 HTTPS 代理</td><td>null</td></tr><tr><td>init-author-name</td><td>设置 package.json 默认作者名称</td><td>“”</td></tr><tr><td>init-author-email</td><td>设置 package.json 默认作者邮箱</td><td>“”</td></tr><tr><td>init-author-url</td><td>设置 package.json 默认作者网站</td><td>“”</td></tr><tr><td>init-license</td><td>设置 package.json 默认许可证</td><td>“ISC”</td></tr><tr><td>init-version</td><td>package.json 默认版本号</td><td>“1.0.0”</td></tr><tr><td>save-exact</td><td>true 时，安装依赖时不使用 ^ 或 ~，直接锁定版本</td><td>false</td></tr><tr><td>engine-strict</td><td>是否强制匹配 package.json 的 engines 字段</td><td>false</td></tr><tr><td>loglevel</td><td>设置日志输出级别（silent, error, warn, notice, info, verbose, silly）</td><td>notice</td></tr><tr><td>fund</td><td>是否显示 package 的资金支持信息</td><td>true</td></tr><tr><td>audit</td><td>是否启用安全审计</td><td>true</td></tr></tbody></table><h3 id="npm-config-save-exact">npm config save-exact</h3><ul class="lvl-0"><li class="lvl-2"><p>推荐配置为 true，避免因为版本更新导致依赖包版本不匹配</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> save-exact <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="npm-config-loglevel">npm config loglevel</h3><ul class="lvl-0"><li class="lvl-2"><p>loglevel 可选值</p></li></ul><table><thead><tr><th>级别</th><th>说明</th><th>适用场景</th></tr></thead><tbody><tr><td>silent</td><td>不输出任何日志（除非发生错误）</td><td>适用于 CI/CD 需要最少日志的环境</td></tr><tr><td>error</td><td>仅显示错误信息</td><td>只关心 npm 运行是否出错</td></tr><tr><td>warn</td><td>显示警告和错误</td><td>发现潜在问题但不影响使用</td></tr><tr><td>notice (默认)</td><td>显示关键信息、警告和错误</td><td>npm 默认值，适合大多数场景</td></tr><tr><td>http</td><td>记录 HTTP 请求的详细信息</td><td>用于调试 npm 下载速度问题</td></tr><tr><td>info</td><td>显示一般信息、依赖安装情况等</td><td>适用于一般开发者调试</td></tr><tr><td>verbose</td><td>详细的调试信息</td><td>适用于深入分析 npm 运行情况</td></tr><tr><td>silly</td><td>最详细的日志，包含所有调试信息</td><td>适用于 npm 开发者或极端调试需求</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>设置方法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> loglevel verbose</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>临时使用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm --loglevel verbose install</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm -<span class="built_in">dd</span> install</span><br><span class="line"></span><br><span class="line"><span class="comment">#  支持快捷方式的值：</span></span><br><span class="line"><span class="comment"># • -s, --silent: --loglevel silent</span></span><br><span class="line"><span class="comment"># • -q, --quiet: --loglevel warn</span></span><br><span class="line"><span class="comment"># • -d: --loglevel info</span></span><br><span class="line"><span class="comment"># • -dd, --verbose: --loglevel verbose</span></span><br><span class="line"><span class="comment"># • -ddd: --loglevel silly</span></span><br></pre></td></tr></table></figure><h3 id="npm-config-timing">npm config timing</h3><ul class="lvl-0"><li class="lvl-2"><p>timing 是 npm 的一个 日志输出配置项，用于控制是否在命令执行时显示详细的时间信息，默认值为 false。</p></li><li class="lvl-2"><p>当 timing 设为 true 时，npm 会在命令执行结束后 打印详细的时间统计信息，包括：</p><ul class="lvl-2"><li class="lvl-6">每个子任务的执行时间（如解析 package.json、解析 node_modules、下载依赖等）</li><li class="lvl-6">网络请求的耗时</li><li class="lvl-6">依赖解析和安装的耗时</li><li class="lvl-6">整体执行的时间开销</li></ul></li><li class="lvl-2"><p>这对分析 npm 性能、优化依赖安装速度非常有用，特别是在大项目或 CI/CD 环境中。</p></li><li class="lvl-2"><p>启用 timing</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> timing <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>临时启用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --timing install</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>适用场景</p><ul class="lvl-2"><li class="lvl-6">分析 npm 命令执行时间，优化构建速度</li><li class="lvl-6">CI/CD 环境中排查 npm 安装变慢的原因</li><li class="lvl-6">排查 npm 依赖解析、安装或下载过程的性能瓶颈</li></ul></li><li class="lvl-2"><p>一般日常开发：日志会变长，可能影响可读性，所以再没有遇到问题时不建议开启</p></li></ul><h2 id="npm、pnpm、yarn-之间的联系和区别">npm、pnpm、yarn 之间的联系和区别</h2><ul class="lvl-0"><li class="lvl-2"><p>这三者都是 JavaScript 生态中的包管理工具，主要用于安装、管理和运行 Node.js 项目的依赖。它们的关系如下：</p><ul class="lvl-2"><li class="lvl-6">npm（Node Package Manager）是 Node.js 官方自带的包管理工具。</li><li class="lvl-6"><a href="https://classic.yarnpkg.com/en/docs">yarn（Yet Another Resource Negotiator）</a>是 Facebook 开发的替代 npm 的工具，提供更快、更安全的依赖管理。</li><li class="lvl-6"><a href="https://pnpm.io/zh/">pnpm（Performant npm）</a>是一个更高效的 npm 替代品，使用硬链接和去重机制来减少磁盘占用并加快安装速度。</li></ul></li><li class="lvl-2"><p>npm、pnpm、yarn 的主要区别</p></li></ul><table><thead><tr><th>特性</th><th>npm</th><th>yarn</th><th>pnpm</th></tr></thead><tbody><tr><td>默认包管理方式</td><td>直接安装到 node_modules/</td><td>直接安装到 node_modules/</td><td>使用 硬链接 + 共享依赖，占用更少磁盘</td></tr><tr><td>安装速度</td><td>5+ 版本后速度较快，但依赖解析仍有性能问题</td><td>速度较快，支持并行下载</td><td>最快，去重能力强</td></tr><tr><td>磁盘占用</td><td>较大（每个项目都会存一份完整的依赖）</td><td>较大（和 npm 类似）</td><td>最小（共享全局缓存，多个项目共用依赖）</td></tr><tr><td>锁文件</td><td>package-lock.json</td><td>yarn.lock</td><td>pnpm-lock.yaml</td></tr><tr><td>并发安装</td><td>支持（npm 5+ 优化）</td><td>支持（更快）</td><td>支持（最优化）</td></tr><tr><td>全局缓存</td><td>支持（但项目仍会存副本）</td><td>支持（仍会拷贝到 node_modules/）</td><td>强制启用（多个项目共用依赖，节省空间）</td></tr><tr><td>monorepo（多包管理）</td><td>需要手动配置</td><td>支持 Workspaces</td><td>原生支持 Workspaces（最强大）</td></tr><tr><td>命令兼容性</td><td>标准</td><td>兼容 npm，部分不同</td><td>兼容 npm，大部分命令相同</td></tr><tr><td>自动修复 package.json</td><td>是</td><td>是</td><td>是</td></tr><tr><td>生态兼容性</td><td>官方标准，兼容性最好</td><td>兼容 npm，但部分特性不同</td><td>兼容 npm，但采用不同的依赖管理方式</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>常见命令对比</p></li></ul><table><thead><tr><th>任务</th><th>npm</th><th>yarn</th><th>pnpm</th></tr></thead><tbody><tr><td>初始化项目</td><td>npm init</td><td>yarn init</td><td>pnpm init</td></tr><tr><td>安装依赖</td><td>npm install</td><td>yarn install</td><td>pnpm install</td></tr><tr><td>安装特定依赖</td><td>npm install lodash</td><td>yarn add lodash</td><td>pnpm add lodash</td></tr><tr><td>安装开发依赖</td><td>npm install lodash -D</td><td>yarn add lodash -D</td><td>pnpm add lodash -D</td></tr><tr><td>删除依赖</td><td>npm uninstall lodash</td><td>yarn remove lodash</td><td>pnpm remove lodash</td></tr><tr><td>更新依赖</td><td>npm update lodash</td><td>yarn upgrade lodash</td><td>pnpm update lodash</td></tr><tr><td>全局安装</td><td>npm install -g serve</td><td>yarn global add serve</td><td>pnpm add -g serve</td></tr><tr><td>运行脚本</td><td>npm run dev</td><td>yarn dev</td><td>pnpm dev</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>什么时候使用 npm、yarn、pnpm？</p><ul class="lvl-2"><li class="lvl-6"><p>✅ 使用 pnpm（推荐）：<br>1.你希望减少磁盘占用、加快安装速度<br>2.你正在开发 monorepo（多包）项目<br>3.你希望更高效地管理依赖</p></li><li class="lvl-6"><p>✅ 使用 yarn：<br>1.你希望更快的安装速度，但又不想改变 npm 传统结构<br>2.你的团队习惯使用 yarn.lock 文件<br>3.你在用 React Native（官方推荐 yarn）</p></li><li class="lvl-6"><p>✅ 使用 npm（适合简单项目）：<br>1.你希望使用 Node.js 官方的默认工具<br>2.你不想安装额外的包管理工具<br>3.你在开发小型项目，不需要 workspaces</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何使用npm&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;npm版本10.5.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="npm" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/npm/"/>
    
    <category term="nodejs" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/npm/nodejs/"/>
    
    
    <category term="npm" scheme="https://blog.hanqunfeng.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next 主题的图形工具 -- Mermaid</title>
    <link href="https://blog.hanqunfeng.com/2025/01/02/mermaid/"/>
    <id>https://blog.hanqunfeng.com/2025/01/02/mermaid/</id>
    <published>2025-01-02T13:55:05.000Z</published>
    <updated>2025-01-03T09:49:43.412Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %--><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://mermaid.js.org/intro/">Mermaid</a> 是一个支持在Markdown文档中绘制流程图、甘特图、序列图等图形的工具。它基于JavaScript实现，能够将Markdown中的元素渲染成HTML元素，从而在网页上直观地展示各种图表‌</p></li><li class="lvl-2"><p><a href="https://theme-next.js.org/docs/tag-plugins/mermaid">Next主题中使用Mermaid说明</a></p></li><li class="lvl-2"><p>本文介绍如何在 <code>Hexo-Next</code> 主题中使用 <code>Mermaid</code></p></li></ul><span id="more"></span><h2 id="配置和使用方法">配置和使用方法</h2><ul class="lvl-0"><li class="lvl-2"><p>NexT config file 中找到<code>mermaid</code>配置，并设置为<code>true</code>，<code>theme</code> 可以设置浅色和深色背景的样式，共有4个可用选项</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">dark</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用方法，其中mermaid与endmermaid是固定搭配，type 用于设置图形的种类，如流程图、时序图、甘特图等，下面示例中会介绍</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid type %&#125;</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>有些小伙伴喜欢使用代码块的形式，使用时去掉前面的<code>#</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#```mermaid</span><br><span class="line">type</span><br><span class="line"></span><br><span class="line">#```</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>但是此时需要在 Hexo config file 中找到<code>highlight</code>，并添加如下内容，才会使代码块的形式生效</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">exclude_languages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mermaid</span></span><br></pre></td></tr></table></figure><h2 id="图形示例">图形示例</h2><ul class="lvl-0"><li class="lvl-2"><p>这里只介绍常用的一些图表，更多图表的使用方法可以参考<a href="https://mermaid.js.org/intro/">Mermaid帮助文档</a></p></li></ul><h3 id="Flowchart">Flowchart</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制流程图，支持方向（例如从左到右、从上到下）和节点间关系的定义。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/flowchart.html">Mermaid Flowchart</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;graph TD&quot;</code>或者<code>&quot;graph LR&quot;</code>，分别表示从上到下和从左到右的方向</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 流程图方向:</span><br><span class="line">  - TB - 从上到下</span><br><span class="line">  - TD - 自上而下，等同于TB</span><br><span class="line">  - BT - 从下到上</span><br><span class="line">  - RL - 从右到左</span><br><span class="line">  - LR - 从左到右</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>&quot;graph TD&quot;</code>：从上到下</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid graph TD %&#125;</span><br><span class="line">A[Hard] --&gt;|Text| B(Round)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result 1]</span><br><span class="line">C --&gt;|Two| E[Result 2]</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">graph TDA[Hard] --&gt;|Text| B(Round)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result 1]C --&gt;|Two| E[Result 2]</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">graph TD，定义一个从上到下的流程图。</span><br><span class="line">TD 是 Top to Down 的缩写，表示流程图从上向下排列。</span><br><span class="line"></span><br><span class="line">A[Hard] --&gt;|Text| B(Round)，定义了一个节点 A，显示为 Hard。</span><br><span class="line">一个带标签的箭头 --&gt;|Text| 指向节点 B，箭头上的标签为 Text。</span><br><span class="line">节点 B 被定义为 Round，这是一个椭圆形节点。</span><br><span class="line"></span><br><span class="line">B --&gt; C&#123;Decision&#125;，节点 B 指向节点 C。</span><br><span class="line">节点 C 被定义为 Decision，这是一个决策节点，用大括号 &#123;&#125; 表示。</span><br><span class="line"></span><br><span class="line">C --&gt;|One| D[Result 1]，决策节点 C 的一个分支，带标签 One，指向节点 D。</span><br><span class="line">节点 D 显示为 Result 1，这是一个矩形节点。</span><br><span class="line"></span><br><span class="line">C --&gt;|Two| E[Result 2]，决策节点 C 的另一个分支，带标签 Two，指向节点 E。</span><br><span class="line">节点 E 显示为 Result 2，也是一个矩形节点。</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>&quot;graph LR&quot;</code>：从左到右</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid graph LR %&#125;</span><br><span class="line">A[长方形] -- 链接 --&gt; B((圆))</span><br><span class="line">A --&gt; C(圆角长方形)</span><br><span class="line">B --&gt; D&#123;菱形&#125;</span><br><span class="line">C --&gt; D</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">graph LRA[长方形] -- 链接 --&gt; B((圆))A --&gt; C(圆角长方形)B --&gt; D&#123;菱形&#125;C --&gt; D</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">graph LR，定义流程图的方向是从左到右（Left to Right）。</span><br><span class="line">节点和箭头从左向右排列。</span><br><span class="line"></span><br><span class="line">A[长方形] -- 链接 --&gt; B((圆))，定义了节点 A 和节点 B。</span><br><span class="line">A 是一个长方形节点，显示内容为“长方形”。</span><br><span class="line">B 是一个圆形节点，内容为空。</span><br><span class="line">它们之间通过一个带标签的箭头 -- 链接 --&gt; 连接，箭头上标注了“链接”。</span><br><span class="line"></span><br><span class="line">A --&gt; C(圆角长方形)，节点 A 指向节点 C。</span><br><span class="line">C 是一个圆角长方形节点，显示内容为“圆角长方形”。</span><br><span class="line"></span><br><span class="line">B --&gt; D&#123;菱形&#125;，节点 B 指向节点 D。</span><br><span class="line">D 是一个菱形节点，显示内容为“菱形”。</span><br><span class="line"></span><br><span class="line">C --&gt; D，节点 C 也指向节点 D，箭头不带标签。</span><br><span class="line"></span><br><span class="line">节点类型和形状</span><br><span class="line">长方形 [] ：如 A[长方形]，是默认的矩形节点。</span><br><span class="line">圆形 (()) ：如 B((圆))，用于表示一个圆形节点。</span><br><span class="line">圆角长方形 () ：如 C(圆角长方形)，用于表示圆角矩形节点。</span><br><span class="line">菱形 &#123;&#125; ：如 D&#123;菱形&#125;，用于表示决策点或条件分支。</span><br></pre></td></tr></table></figure><h3 id="Sequence-Diagram">Sequence Diagram</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制时序图，显示多个实体之间的交互关系，包括消息、时间、状态和数据交换。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/sequenceDiagram.html">Mermaid Sequence Diagram</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;sequenceDiagram&quot;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid sequenceDiagram %&#125;</span><br><span class="line">Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">loop Healthcheck</span><br><span class="line">    John-&gt;&gt;John: Fight against hypochondria</span><br><span class="line">end</span><br><span class="line">Note right of John: Rational thoughts!</span><br><span class="line">John--&gt;&gt;Alice: Great!</span><br><span class="line">John-&gt;&gt;Bob: How about you?</span><br><span class="line">Bob--&gt;&gt;John: Jolly good!</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">sequenceDiagramAlice-&gt;&gt;John: Hello John, how are you?loop Healthcheck    John-&gt;&gt;John: Fight against hypochondriaendNote right of John: Rational thoughts!John--&gt;&gt;Alice: Great!John-&gt;&gt;Bob: How about you?Bob--&gt;&gt;John: Jolly good!</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">基本结构说明</span><br><span class="line">sequenceDiagram: 定义一个序列图，表示消息和事件的时间顺序。</span><br><span class="line">参与者</span><br><span class="line">    Alice、John 和 Bob 是参与者。</span><br><span class="line">    每个参与者在图中会以垂直排列的形式显示。</span><br><span class="line">消息和箭头</span><br><span class="line">    -&gt;&gt; 表示一个消息的发送，方向由箭头决定。</span><br><span class="line">    消息内容写在箭头旁边。</span><br><span class="line">循环（loop）</span><br><span class="line">    使用 loop 定义一个循环块，循环中的消息会重复执行，表示某种持续行为。</span><br><span class="line">备注（Note）</span><br><span class="line">    Note right of John 定义了一条备注，显示在 John 的右侧，用来补充说明。</span><br><span class="line"></span><br><span class="line">代码逐步解析</span><br><span class="line">Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    表示 Alice 给 John 发送一条消息：“Hello John, how are you?”</span><br><span class="line">loop Healthcheck</span><br><span class="line">    定义一个循环块，标题为“Healthcheck”（健康检查）。</span><br><span class="line">    循环内容是：</span><br><span class="line">        John-&gt;&gt;John: Fight against hypochondria</span><br><span class="line">        表示 John 自己向自己发送一条消息：“Fight against hypochondria”（与疑病症抗争）。</span><br><span class="line">Note right of John: Rational thoughts!</span><br><span class="line">    定义了一条备注，显示在 John 的右侧。</span><br><span class="line">    备注内容为：“Rational thoughts!”（理性思考！）。</span><br><span class="line">John--&gt;&gt;Alice: Great!</span><br><span class="line">    John 回复 Alice 一条消息：“Great!”（很好！）。</span><br><span class="line">    使用 --&gt;&gt; 表示回复消息。</span><br><span class="line">John-&gt;&gt;Bob: How about you?</span><br><span class="line">    John 询问 Bob 一条消息：“How about you?”（你怎么样？）。</span><br><span class="line">Bob--&gt;&gt;John: Jolly good!</span><br><span class="line">    Bob 回复 John 一条消息：“Jolly good!”（非常好！）。</span><br></pre></td></tr></table></figure><h3 id="Class-Diagram">Class Diagram</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制类图，显示对象之间的关系，包括继承、关联、依赖等。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/classDiagram.html">Mermaid Class Diagram</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;classDiagram&quot;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid classDiagram %&#125;</span><br><span class="line">Class01 &lt;|-- AveryLongClass : Cool</span><br><span class="line">&lt;&lt;interface&gt;&gt; Class01</span><br><span class="line">Class09 --&gt; C2 : Where am i?</span><br><span class="line">Class09 --* C3</span><br><span class="line">Class09 --|&gt; Class07</span><br><span class="line">Class07 : equals()</span><br><span class="line">Class07 : Object[] elementData</span><br><span class="line">Class01 : size()</span><br><span class="line">Class01 : int chimp</span><br><span class="line">Class01 : int gorilla</span><br><span class="line">class Class10 &#123;</span><br><span class="line">  &lt;&lt;service&gt;&gt;</span><br><span class="line">  int id</span><br><span class="line">  size()</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">classDiagramClass01 &lt;|-- AveryLongClass : Cool&lt;&lt;interface&gt;&gt; Class01Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaclass Class10 &#123;  &lt;&lt;service&gt;&gt;  int id  size()&#125;</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">基本结构</span><br><span class="line">classDiagram</span><br><span class="line">    定义一个类图，展示类的属性、方法以及它们之间的关系。</span><br><span class="line">类和修饰符</span><br><span class="line">    使用 class ClassName 定义一个类。</span><br><span class="line">    类的属性和方法定义在 class 块内。</span><br><span class="line">    特殊修饰符如 &lt;&lt;interface&gt;&gt; 和 &lt;&lt;service&gt;&gt; 用于说明类的角色或类型。</span><br><span class="line">关系符号</span><br><span class="line">    &lt;|-- 表示继承（extends）。</span><br><span class="line">    --|&gt; 表示实现（implements，接口的实现）。</span><br><span class="line">    --&gt; 表示关联（普通引用）。</span><br><span class="line">    --* 表示组合关系（一个类包含另一个类）。</span><br><span class="line">    : 后跟关系的说明或注释。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码逐步解析</span><br><span class="line">Class01 &lt;|-- AveryLongClass : Cool</span><br><span class="line">    表示 AveryLongClass 继承了 Class01，关系名称为 Cool。</span><br><span class="line">    &lt;|-- 表示继承（父类到子类）。</span><br><span class="line">&lt;&lt;interface&gt;&gt; Class01</span><br><span class="line">    将 Class01 标记为一个接口。</span><br><span class="line">Class09 --&gt; C2 : Where am i?</span><br><span class="line">    表示 Class09 与 C2 有一个关联关系，注释为 “Where am i?”。</span><br><span class="line">Class09 --* C3</span><br><span class="line">    表示 Class09 与 C3 有一个组合关系。</span><br><span class="line">    Class09 包含一个或多个 C3 的实例。</span><br><span class="line">Class09 --|&gt; Class07</span><br><span class="line">    表示 Class09 实现了 Class07。</span><br><span class="line">    --|&gt; 通常用于表示接口实现。</span><br><span class="line">Class07 : equals()</span><br><span class="line">    表示 Class07 定义了一个方法 equals()。</span><br><span class="line">Class07 : Object[] elementData</span><br><span class="line">    表示 Class07 有一个属性 elementData，类型是 Object[]（数组）。</span><br><span class="line">Class01 : size()</span><br><span class="line">    表示 Class01 有一个方法 size()。</span><br><span class="line">Class01 : int chimp 和 Class01 : int gorilla</span><br><span class="line">    表示 Class01 有两个整型属性：chimp 和 gorilla。</span><br><span class="line">class Class10 &#123; ... &#125;</span><br><span class="line">    定义了一个名为 Class10 的类。</span><br><span class="line">    类中有一个修饰符 &lt;&lt;service&gt;&gt;，表示这是一个服务类。</span><br><span class="line">    属性和方法：</span><br><span class="line">        int id：整型属性。</span><br><span class="line">        size()：方法。</span><br></pre></td></tr></table></figure><h3 id="State-Diagram">State Diagram</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制状态图，显示对象的状态转移和行为。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/stateDiagram.html">Mermaid State Diagram</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;stateDiagram&quot;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid stateDiagram %&#125;</span><br><span class="line">[*] --&gt; Still</span><br><span class="line">Still --&gt; [*]</span><br><span class="line">Still --&gt; Moving</span><br><span class="line">Moving --&gt; Still</span><br><span class="line">Moving --&gt; Crash</span><br><span class="line">Crash --&gt; [*]</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">stateDiagram[*] --&gt; StillStill --&gt; [*]Still --&gt; MovingMoving --&gt; StillMoving --&gt; CrashCrash --&gt; [*]</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">基本结构</span><br><span class="line">stateDiagram</span><br><span class="line">    定义这是一个状态图，用于表示状态和状态之间的转换。</span><br><span class="line">[*]</span><br><span class="line">    表示初始状态或终止状态。</span><br><span class="line">    起始状态通常有箭头指向第一个状态。</span><br><span class="line">    终止状态通常有箭头指向它。</span><br><span class="line">状态</span><br><span class="line">    用状态名称定义状态，例如 Still、Moving、Crash。</span><br><span class="line">箭头</span><br><span class="line">    --&gt; 表示状态之间的转换方向。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码逐步解析</span><br><span class="line">[*] --&gt; Still</span><br><span class="line">    系统从初始状态进入 Still 状态。</span><br><span class="line">Still --&gt; [*]</span><br><span class="line">    系统从 Still 状态可以直接进入终止状态（系统结束）。</span><br><span class="line">Still --&gt; Moving</span><br><span class="line">    系统从 Still 状态可以转换为 Moving 状态。</span><br><span class="line">Moving --&gt; Still</span><br><span class="line">    系统从 Moving 状态可以返回到 Still 状态。</span><br><span class="line">Moving --&gt; Crash</span><br><span class="line">    系统从 Moving 状态可以进入 Crash 状态。</span><br><span class="line">Crash --&gt; [*]</span><br><span class="line">    系统从 Crash 状态可以进入终止状态（表示系统崩溃或终止）。</span><br></pre></td></tr></table></figure><h3 id="Entity-Relationship-Diagram">Entity Relationship Diagram</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制实体关系图，显示实体之间的关系，包括关联、依赖等。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/entityRelationshipDiagram.html">Mermaid Entity Relationship Diagram</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;erDiagram&quot;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid erDiagram %&#125;</span><br><span class="line">CUSTOMER ||--o&#123; ORDER : places</span><br><span class="line">ORDER ||--|&#123; ITEM : contains</span><br><span class="line">CUSTOMER &#125;|..|&#123; DELIVERY-ADDRESS : has</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">erDiagramCUSTOMER ||--o&#123; ORDER : placesORDER ||--|&#123; ITEM : containsCUSTOMER &#125;|..|&#123; DELIVERY-ADDRESS : has</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">基本结构</span><br><span class="line">erDiagram</span><br><span class="line">    定义这是一个实体关系图。</span><br><span class="line">    展示数据库中表（实体）之间的关系。</span><br><span class="line">实体</span><br><span class="line">    例如 CUSTOMER、ORDER 和 ITEM，每个实体对应数据库中的一个表。</span><br><span class="line">关系</span><br><span class="line">    ||--o&#123; 表示一对多关系（1:N）。</span><br><span class="line">    ||--|&#123; 表示一对多关系（1:N），但强调实体的唯一性（每个子记录属于唯一的父记录）。</span><br><span class="line">    &#125;|..|&#123; 表示多对多关系（N:M）。</span><br><span class="line">注释</span><br><span class="line">    : 后的文字是关系的描述，例如 places、contains、has。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码逐步解析</span><br><span class="line">CUSTOMER ||--o&#123; ORDER : places</span><br><span class="line">    表示一个客户 (CUSTOMER) 可以下多个订单 (ORDER)。</span><br><span class="line">    ||--o&#123; 表示 一对多关系（1:N），即一个客户对应多个订单。</span><br><span class="line">ORDER ||--|&#123; ITEM : contains</span><br><span class="line">    表示一个订单 (ORDER) 包含多个商品 (ITEM)。</span><br><span class="line">    ||--|&#123; 表示 一对多关系，且每个商品的记录与某个订单唯一对应。</span><br><span class="line">CUSTOMER &#125;|..|&#123; DELIVERY-ADDRESS : has</span><br><span class="line">    表示一个客户 (CUSTOMER) 可以有多个配送地址 (DELIVERY-ADDRESS)，而每个配送地址也可能对应多个客户。</span><br><span class="line">    &#125;|..|&#123; 表示 多对多关系（N:M）。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Gantt-Chart">Gantt Chart</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制甘特图，显示任务计划、进度和资源分配。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/gantt.html">Mermaid Gantt Chart</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;gantt&quot;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid gantt %&#125;</span><br><span class="line">title Project Timeline</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">section Section1</span><br><span class="line">Completed :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">Active        :active,  des2, 2014-01-07, 3d</span><br><span class="line">Parallel 1   :         des3, after des1, 1d</span><br><span class="line">Parallel 2   :         des4, after des1, 1d</span><br><span class="line">Parallel 3   :         des5, after des3, 1d</span><br><span class="line">Parallel 4   :         des6, after des4, 1d</span><br><span class="line">section Section2</span><br><span class="line">Task 1 :  t1,after des6,5d</span><br><span class="line">Task 2 :  t2,after t1,3d</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">gantttitle Project TimelinedateFormat  YYYY-MM-DDsection Section1Completed :done,    des1, 2014-01-06,2014-01-08Active        :active,  des2, 2014-01-07, 3dParallel 1   :         des3, after des1, 1dParallel 2   :         des4, after des1, 1dParallel 3   :         des5, after des3, 1dParallel 4   :         des6, after des4, 1dsection Section2Task 1 :  t1,after des6,5dTask 2 :  t2,after t1,3d</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">基本结构</span><br><span class="line">gantt</span><br><span class="line">    定义一个甘特图，用于表示任务的时间分布和依赖关系。</span><br><span class="line">title</span><br><span class="line">    定义甘特图的标题，这里是 Project Timeline。</span><br><span class="line">dateFormat</span><br><span class="line">    定义日期格式，这里是 YYYY-MM-DD（年-月-日）。</span><br><span class="line">section</span><br><span class="line">    定义任务的分类（部分）。</span><br><span class="line">    每个 section 下包含一组任务，任务在图表中分组显示。</span><br><span class="line">任务格式</span><br><span class="line">    每个任务按以下格式定义：</span><br><span class="line">        任务名称 : 状态, 标识符, 开始日期或依赖, 持续时间</span><br><span class="line">    任务名称：任务的描述。</span><br><span class="line">    状态：可选，表示任务状态：</span><br><span class="line">        done：已完成。</span><br><span class="line">        active：正在进行。</span><br><span class="line">    标识符：任务的唯一标识符，用于定义依赖关系。</span><br><span class="line">    时间：可以是开始日期、结束日期、或依赖任务。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码逐步解析</span><br><span class="line">section Section1</span><br><span class="line">    定义一个名为 Section1 的部分，包含一组任务。</span><br><span class="line">Completed :done, des1, 2014-01-06,2014-01-08</span><br><span class="line">    任务名称：Completed。</span><br><span class="line">    状态：done（已完成）。</span><br><span class="line">    标识符：des1。</span><br><span class="line">    开始日期：2014-01-06。</span><br><span class="line">    结束日期：2014-01-08。</span><br><span class="line">Active :active, des2, 2014-01-07, 3d</span><br><span class="line">    任务名称：Active。</span><br><span class="line">    状态：active（正在进行）。</span><br><span class="line">    标识符：des2。</span><br><span class="line">    开始日期：2014-01-07。</span><br><span class="line">    持续时间：3d（3天）。</span><br><span class="line">Parallel 1 : des3, after des1, 1d</span><br><span class="line">    任务名称：Parallel 1。</span><br><span class="line">    无状态（默认值）。</span><br><span class="line">    标识符：des3。</span><br><span class="line">    开始时间：依赖任务 des1（在任务 Completed 后开始）。</span><br><span class="line">    持续时间：1d（1天）。</span><br><span class="line">Parallel 2 : des4, after des1, 1d</span><br><span class="line">    任务名称：Parallel 2。</span><br><span class="line">    无状态。</span><br><span class="line">    标识符：des4。</span><br><span class="line">    开始时间：依赖任务 des1（在任务 Completed 后开始）。</span><br><span class="line">    持续时间：1d（1天）。</span><br><span class="line">Parallel 3 : des5, after des3, 1d</span><br><span class="line">    任务名称：Parallel 3。</span><br><span class="line">    无状态。</span><br><span class="line">    标识符：des5。</span><br><span class="line">    开始时间：依赖任务 des3（在任务 Parallel 1 后开始）。</span><br><span class="line">    持续时间：1d（1天）。</span><br><span class="line">Parallel 4 : des6, after des4, 1d</span><br><span class="line">    任务名称：Parallel 4。</span><br><span class="line">    无状态。</span><br><span class="line">    标识符：des6。</span><br><span class="line">    开始时间：依赖任务 des4（在任务 Parallel 2 后开始）。</span><br><span class="line">    持续时间：1d（1天）。</span><br><span class="line">section Section2</span><br><span class="line">    定义甘特图的第二部分，用于分组显示后续任务。</span><br><span class="line">    任务属于不同的部分以便分类和分组。</span><br><span class="line">Task 1 : t1, after des6, 5d</span><br><span class="line">    任务名称：Task 1。</span><br><span class="line">    标识符：t1。</span><br><span class="line">    开始时间：依赖任务 des6（Parallel 4）完成后开始。</span><br><span class="line">    持续时间：5d（5天）。</span><br><span class="line">Task 2 : t2, after t1, 3d</span><br><span class="line">    任务名称：Task 2。</span><br><span class="line">    标识符：t2。</span><br><span class="line">    开始时间：依赖任务 t1（Task 1）完成后开始。</span><br><span class="line">    持续时间：3d（3天）。</span><br></pre></td></tr></table></figure><h3 id="Pie-Chart">Pie Chart</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制饼状图，显示数据分布情况。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/pie.html">Mermaid Pie Chart</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;pie&quot;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid pie showData %&#125;</span><br><span class="line">%%&#123;init: &#123;&quot;pie&quot;: &#123;&quot;textPosition&quot;: 0.4&#125;, &quot;themeVariables&quot;: &#123;&quot;pieOuterStrokeWidth&quot;: &quot;5px&quot;,&quot;pie1&quot;: &quot;#ff9999&quot;,&quot;pie2&quot;: &quot;#99ccff&quot;,&quot;pie3&quot;: &quot;#99ff99&quot;&#125;&#125; &#125;%%</span><br><span class="line">title Expenses</span><br><span class="line">&quot;Rent&quot; : 200</span><br><span class="line">&quot;Food&quot; : 200</span><br><span class="line">&quot;Transport&quot; : 400</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">%%&#123;init: &#123;&quot;pie&quot;: &#123;&quot;textPosition&quot;: 0.4&#125;, &quot;themeVariables&quot;: &#123;&quot;pieOuterStrokeWidth&quot;: &quot;5px&quot;,&quot;pie1&quot;: &quot;#ff9999&quot;,&quot;pie2&quot;: &quot;#99ccff&quot;,&quot;pie3&quot;: &quot;#99ff99&quot;&#125;&#125; &#125;%%pie showDatatitle Expenses&quot;Rent&quot; : 200&quot;Food&quot; : 200&quot;Transport&quot; : 400</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">基本结构</span><br><span class="line">%%&#123;init: ...&#125;%%：</span><br><span class="line">    Mermaid.js 的初始化配置，用于全局设置图表属性和样式。</span><br><span class="line">    pie 属性</span><br><span class="line">        textPosition: 设置饼图数据标签的相对位置。</span><br><span class="line">            值范围为 0 到 1，表示标签距离饼图中心的比例。0.4 表示标签距离中心较近，接近 40% 的半径位置。</span><br><span class="line">    themeVariables</span><br><span class="line">        pieOuterStrokeWidth: 设置饼图外环的宽度。设置为 5px，表示饼图有明显的外边框。</span><br><span class="line">        &quot;pie1&quot;: &quot;#ff9999&quot;,&quot;pie2&quot;: &quot;#99ccff&quot;,&quot;pie3&quot;: &quot;#99ff99&quot;: 配置每个分区的颜色。</span><br><span class="line">pie</span><br><span class="line">    定义这是一个饼图。</span><br><span class="line">showData</span><br><span class="line">    显示数据项的数值。</span><br><span class="line">title Expenses</span><br><span class="line">    设置饼图的标题为 Expenses（费用）。</span><br><span class="line">数据项</span><br><span class="line">    数据项定义了饼图的各个部分：</span><br><span class="line">        &quot;Rent&quot; : 200，占比：200 / (200 + 200 + 400) = 1/4 = 25%。</span><br><span class="line">        &quot;Food&quot; : 200，占比：200 / (200 + 200 + 400) = 1/4 = 25%。</span><br><span class="line">        &quot;Transport&quot; : 400，占比：400 / (200 + 200 + 400) = 1/2 = 50%。</span><br><span class="line">    每个数据项包含：</span><br><span class="line">        标签：如 &quot;Rent&quot;、&quot;Food&quot;、&quot;Transport&quot;。</span><br><span class="line">        数值：如 200、400，表示该部分的权重或数值大小。</span><br></pre></td></tr></table></figure><h3 id="XY-Chart">XY Chart</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制 XY 轴图(柱状图和折线图)，显示数据分布和趋势。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/xyChart.html">Mermaid XY Chart</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;xychart-beta&quot;</code>，目前 xychart-beta 还处在改进阶段</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid xychart-beta %&#125;</span><br><span class="line">%%&#123;init: &#123;&quot;xyChart&quot;: &#123;&quot;width&quot;: 900,&quot;height&quot;:600&#125;, &quot;themeVariables&quot;: &#123;&quot;xyChart&quot;:&#123;&quot;titleColor&quot;: &quot;#ff0000&quot;&#125;&#125;&#125; &#125;%%</span><br><span class="line">title &quot;Sales Revenue&quot;</span><br><span class="line">x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]</span><br><span class="line">y-axis &quot;Revenue (in $)&quot; 4000 --&gt; 11000</span><br><span class="line">bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]</span><br><span class="line">line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">---config:    xyChart:        width: 900        height: 600    themeVariables:        xyChart:            titleColor: &quot;#ff0000&quot;---xychart-betatitle &quot;Sales Revenue&quot;x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]y-axis &quot;Revenue (in $)&quot; 4000 --&gt; 11000bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">代码结构解析</span><br><span class="line">%%&#123;init: ...&#125;%%：</span><br><span class="line">    Mermaid.js 的初始化配置，用于全局设置图表属性和样式。</span><br><span class="line">    xyChart.width 和 xyChart.height : 设置图表的宽度和高度。</span><br><span class="line">    themeVariables.xyChart.titleColor: 设置标题的颜色。</span><br><span class="line">title</span><br><span class="line">    设置图表的标题。</span><br><span class="line">坐标轴定义</span><br><span class="line">    x-axis：X轴标签为月份（从1月到12月）。</span><br><span class="line">    y-axis：Y轴范围从 $4000 到 $11000，单位为美元。</span><br><span class="line">数据</span><br><span class="line">    bar：柱状图数据，表示每个月的销售收入。</span><br><span class="line">    line：折线图数据，表示每个月的销量趋势。</span><br></pre></td></tr></table></figure><h3 id="Journey-Diagram">Journey Diagram</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制旅程图，显示用户的体验流程，包括用户进入系统、操作、退出系统等。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/userJourney.html">Mermaid Journey Diagram</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;journey&quot;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid journey %&#125;</span><br><span class="line">title My working day</span><br><span class="line">section Morning</span><br><span class="line">  wake up : 5 : me</span><br><span class="line">  go to work : 3 : me,you</span><br><span class="line">section Lunch</span><br><span class="line">  have lunch : 5 : me,you</span><br><span class="line">  go to work : 1 : me,you</span><br><span class="line">section Dinner</span><br><span class="line">  finish your meal : 5 : me</span><br><span class="line">section Go home</span><br><span class="line">  go home : 5 : me</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">journeytitle My working daysection Morning  wake up : 5 : me  go to work : 3 : me,yousection Lunch  have lunch : 5 : me,you  go to work : 1 : me,yousection Dinner  finish your meal : 5 : mesection Go home  go home : 5 : me</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">基本结构</span><br><span class="line">journey</span><br><span class="line">    定义这是一个旅程图。</span><br><span class="line">title My working day</span><br><span class="line">    设置旅程图的标题为 &quot;My working day&quot;（我的工作日）。</span><br><span class="line">section</span><br><span class="line">    定义旅程图的分段，用于表示一天中的不同阶段，例如：</span><br><span class="line">        Morning（早晨）。</span><br><span class="line">        Lunch（午餐时间）。</span><br><span class="line">        Dinner（晚餐）。</span><br><span class="line">        Go home（回家）。</span><br><span class="line">任务格式</span><br><span class="line">    任务描述 : 满意度评分 : 参与者</span><br><span class="line">        任务描述：描述具体的任务或活动。</span><br><span class="line">        满意度评分：从 1 到 5，表示对任务或活动的满意程度。</span><br><span class="line">        参与者：参与任务的人，可以是 me（自己）、you（其他人）或两者。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码逐步解析</span><br><span class="line">section Morning</span><br><span class="line">    wake up : 5 : me</span><br><span class="line">        活动：wake up（起床）。</span><br><span class="line">        满意度：5（非常满意）。</span><br><span class="line">        参与者：me（自己）。</span><br><span class="line">    go to work : 3 : me,you</span><br><span class="line">        活动：go to work（去工作）。</span><br><span class="line">        满意度：3（中等满意）。</span><br><span class="line">        参与者：me 和 you（自己和其他人）。</span><br><span class="line">section Lunch</span><br><span class="line">    have lunch : 5 : me,you</span><br><span class="line">        活动：have lunch（吃午饭）。</span><br><span class="line">        满意度：5（非常满意）。</span><br><span class="line">        参与者：me 和 you（自己和其他人）。</span><br><span class="line">    go to work : 1 : me,you</span><br><span class="line">        活动：go to work（吃完饭继续工作）。</span><br><span class="line">        满意度：1（非常不满意）。</span><br><span class="line">        参与者：me 和 you。</span><br><span class="line">section Dinner</span><br><span class="line">    finish your meal : 5 : me</span><br><span class="line">        活动：finish your meal（吃完饭）。</span><br><span class="line">        满意度：5（非常满意）。</span><br><span class="line">        参与者：me（自己）。</span><br><span class="line">section Go home</span><br><span class="line">    go home : 5 : me</span><br><span class="line">        活动：go home（回家）。</span><br><span class="line">        满意度：5（非常满意）。</span><br><span class="line">        参与者：me（自己）。</span><br></pre></td></tr></table></figure><h3 id="Requirement-Diagram">Requirement Diagram</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制需求图，显示系统的功能需求和依赖关系。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/requirementDiagram.html">Mermaid Requirement Diagram</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;requirementDiagram&quot;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid requirementDiagram %&#125;</span><br><span class="line">requirement &quot;测试需求&quot; &#123;</span><br><span class="line">    id: 1</span><br><span class="line">    text: &quot;测试文本&quot;</span><br><span class="line">    risk: High</span><br><span class="line">    verifymethod: test</span><br><span class="line">&#125;</span><br><span class="line">requirement &quot;测试需求2&quot; &#123;</span><br><span class="line">    id: 2</span><br><span class="line">    text: &quot;测试文本&quot;</span><br><span class="line">    risk: High</span><br><span class="line">    verifymethod: test</span><br><span class="line">&#125;</span><br><span class="line">element &quot;测试实体&quot; &#123;</span><br><span class="line">    type: &quot;模拟&quot;</span><br><span class="line">&#125;</span><br><span class="line">&quot;测试实体&quot; - satisfies -&gt; &quot;测试需求&quot;</span><br><span class="line">&quot;测试实体&quot; - satisfies -&gt; &quot;测试需求2&quot;</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">requirementDiagramrequirement &quot;测试需求&quot; &#123;    id: 1    text: &quot;测试文本&quot;    risk: High    verifymethod: test&#125;requirement &quot;测试需求2&quot; &#123;    id: 2    text: &quot;测试文本&quot;    risk: High    verifymethod: test&#125;element &quot;测试实体&quot; &#123;    type: &quot;模拟&quot;&#125;&quot;测试实体&quot; - satisfies -&gt; &quot;测试需求&quot;&quot;测试实体&quot; - satisfies -&gt; &quot;测试需求2&quot;</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">基本结构</span><br><span class="line">requirementDiagram</span><br><span class="line">    定义这是一个需求图。</span><br><span class="line">requirement</span><br><span class="line">    定义一个需求节点，包含需求的详细属性，如：</span><br><span class="line">        id：需求编号。</span><br><span class="line">        text：需求的描述。</span><br><span class="line">        risk：需求的风险级别（如 High 表示高风险）。</span><br><span class="line">        verifymethod：验证需求的方法（如 test 表示通过测试验证）。</span><br><span class="line">element</span><br><span class="line">    定义一个元素，用于表示系统中的某个实体或对象。</span><br><span class="line">    包含属性，如：</span><br><span class="line">        type：实体的类型（如 模拟 表示模拟实体）。</span><br><span class="line">关系定义</span><br><span class="line">    定义了两个关系：</span><br><span class="line">        &quot;测试实体&quot; - satisfies -&gt; &quot;测试需求&quot;  : 测试实体 满足了 测试需求</span><br><span class="line">        &quot;测试实体&quot; - satisfies -&gt; &quot;测试需求2&quot; : 测试实体 满足了 测试需求2</span><br><span class="line">    - satisfies -&gt;：satisfies 表示满足关系，箭头方向从实体指向需求</span><br><span class="line"></span><br><span class="line">代码逐步解析</span><br><span class="line">需求定义</span><br><span class="line">    requirement &quot;测试需求&quot;</span><br><span class="line">        定义第一个需求，显示名称为 测试需求。</span><br><span class="line">        属性：</span><br><span class="line">            id: 1（需求编号为 1）。</span><br><span class="line">            text: &quot;测试文本&quot;（描述文本为 &quot;测试文本&quot;）。</span><br><span class="line">            risk: High（高风险需求）。</span><br><span class="line">            verifymethod: test（验证方法为测试）。</span><br><span class="line">    requirement &quot;测试需求2&quot;</span><br><span class="line">        定义第二个需求，显示名称为 测试需求2。</span><br><span class="line">        属性：</span><br><span class="line">            id: 2（需求编号为 2）。</span><br><span class="line">            text: &quot;测试文本&quot;（描述文本与第一个需求相同）。</span><br><span class="line">            risk: High（高风险需求）。</span><br><span class="line">            verifymethod: test（验证方法为测试）。</span><br><span class="line">实体定义</span><br><span class="line">    element &quot;测试实体&quot;</span><br><span class="line">        定义一个系统实体，显示名称为 测试实体。</span><br><span class="line">        属性：</span><br><span class="line">            type: &quot;模拟&quot;（实体类型为 &quot;模拟&quot;）。</span><br></pre></td></tr></table></figure><h3 id="Gitgraph-Diagram">Gitgraph Diagram</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制Git图，显示代码仓库的提交历史和分支关系。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/gitgraph.html">Mermaid Gitgraph Diagram</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;gitgraph&quot;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid gitGraph %&#125;</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">branch newbranch</span><br><span class="line">checkout newbranch</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">checkout main</span><br><span class="line">merge newbranch</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">gitGraphcommitcommitcommitbranch newbranchcheckout newbranchcommitcommitcheckout mainmerge newbranch</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">基本结构</span><br><span class="line">gitGraph</span><br><span class="line">    定义这是一个 Git 图。</span><br><span class="line">commit</span><br><span class="line">    表示一次提交操作，每个 commit 节点代表代码仓库的某个提交点。</span><br><span class="line">branch</span><br><span class="line">    创建一个新分支。</span><br><span class="line">    格式：branch 分支名称。</span><br><span class="line">checkout</span><br><span class="line">    切换到指定分支。</span><br><span class="line">    格式：checkout 分支名称。</span><br><span class="line">merge</span><br><span class="line">    将指定分支合并到当前分支。</span><br><span class="line">    格式：merge 分支名称。</span><br></pre></td></tr></table></figure><h3 id="Mindmap">Mindmap</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制思维导图，显示主题和子主题之间的 hierarchical 关系。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/mindmap.html">Mermaid Mindmap</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;mindmap&quot;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid mindmap %&#125;</span><br><span class="line">root((mindmap))</span><br><span class="line">    (origins)</span><br><span class="line">        Long history</span><br><span class="line">        ::icon(fa fa-book)</span><br><span class="line">        Popularisation</span><br><span class="line">            British popular psychology author Tony Buzan</span><br><span class="line">    [Research]</span><br><span class="line">        On effectivness&lt;br/&gt;and features</span><br><span class="line">        On Automatic creation</span><br><span class="line">            Uses</span><br><span class="line">                Creative techniques</span><br><span class="line">                Strategic planning</span><br><span class="line">                Argument mapping</span><br><span class="line">    Tools</span><br><span class="line">        Pen and paper</span><br><span class="line">        Mermaid</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">mindmaproot((mindmap))    (origins)        Long history        ::icon(fa fa-book)        Popularisation            British popular psychology author Tony Buzan    [Research]        On effectivness&lt;br/&gt;and features        On Automatic creation            Uses                Creative techniques                Strategic planning                Argument mapping    Tools        Pen and paper        Mermaid</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">基本结构</span><br><span class="line">mindmap</span><br><span class="line">    定义这是一个思维导图。</span><br><span class="line">root((mindmap))</span><br><span class="line">    定义思维导图的根节点，显示为圆形并标注为 &quot;mindmap&quot;。</span><br><span class="line">子节点使用缩进表示从属关系：</span><br><span class="line">    每一级缩进代表一个层级的子节点。</span><br><span class="line">    子节点可以直接添加内容或通过 &lt;br/&gt; 换行。</span><br><span class="line">::icon(...)</span><br><span class="line">    为节点添加图标。Mermaid.js 支持使用 FontAwesome 的图标。</span><br><span class="line"></span><br><span class="line">节点形状</span><br><span class="line">长方形 [] ：如 [长方形]，是默认的矩形节点。这个是默认的节点类型。</span><br><span class="line">圆形 (()) ：如 ((圆))，用于表示一个圆形节点。</span><br><span class="line">圆角长方形 () ：如 (圆角长方形)，用于表示圆角矩形节点。</span><br></pre></td></tr></table></figure><h3 id="QuadrantChart">QuadrantChart</h3><ul class="lvl-0"><li class="lvl-2"><p>用于绘制象限图，显示不同维度之间的比较关系。</p></li><li class="lvl-2"><p><a href="https://mermaid.js.org/syntax/quadrantChart.html">Mermaid QuadrantChart</a></p></li><li class="lvl-2"><p>type 为 <code>&quot;quadrantChart&quot;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid quadrantChart %&#125;</span><br><span class="line">%%&#123;init: &#123;&quot;quadrantChart&quot;: &#123;&quot;chartHeight&quot;: 600, &quot;chartWidth&quot;: 800, &quot;pointTextPadding&quot;: 10&#125;, &quot;themeVariables&quot;: &#123;&quot;quadrant1Fill&quot;: &quot;#ff0000&quot;, &quot;quadrant2Fill&quot;: &quot;#FFFF00&quot;, &quot;quadrant3Fill&quot;: &quot;#32CD32&quot;, &quot;quadrant4Fill&quot;: &quot;#800080&quot;&#125;&#125;&#125;%%</span><br><span class="line">title Reach and engagement of carpaigns</span><br><span class="line">x-axis Low Reach --&gt; High Reach</span><br><span class="line">y-axis Low Engagement --&gt; High Engagement</span><br><span class="line">quadrant-1 we should expand</span><br><span class="line">quadrant-2 Need to promote</span><br><span class="line">quadrant-3 Re-evaluate</span><br><span class="line">quadrant-4 May be improved</span><br><span class="line">Campaign A: [0.3,0.6]</span><br><span class="line">Campaign B: [0.45,0.23]</span><br><span class="line">Campaign C: [0.57,0.69]</span><br><span class="line">Campaign D: [0.78,0.34]</span><br><span class="line">Campaign E: [0.40,0.34]</span><br><span class="line">Campaign F: [0.35,0.78]</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>效果</p></li></ul><pre><code class="highlight mermaid">%%&#123;init: &#123;&quot;quadrantChart&quot;: &#123;&quot;chartHeight&quot;: 600, &quot;chartWidth&quot;: 800, &quot;pointTextPadding&quot;: 10&#125;, &quot;themeVariables&quot;: &#123;&quot;quadrant1Fill&quot;: &quot;#ff0000&quot;, &quot;quadrant2Fill&quot;: &quot;#FFFF00&quot;, &quot;quadrant3Fill&quot;: &quot;#32CD32&quot;, &quot;quadrant4Fill&quot;: &quot;#800080&quot;&#125;&#125;&#125;%%quadrantCharttitle Reach and engagement of carpaignsx-axis Low Reach --&gt; High Reachy-axis Low Engagement --&gt; High Engagementquadrant-1 we should expandquadrant-2 Need to promotequadrant-3 Re-evaluatequadrant-4 May be improvedCampaign A: [0.3,0.6]Campaign B: [0.45,0.23]Campaign C: [0.57,0.69]Campaign D: [0.78,0.34]Campaign E: [0.40,0.34]Campaign F: [0.35,0.78]</code></pre><ul class="lvl-0"><li class="lvl-2"><p>说明</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">基本结构</span><br><span class="line">%%&#123;init: ...&#125;%%</span><br><span class="line">    这是 Mermaid.js 的初始化配置块，用于自定义图表的全局参数和样式。</span><br><span class="line">    配置内容，详见下文：</span><br><span class="line">        quadrantChart：自定义象限图的相关参数。</span><br><span class="line">        themeVariables： 图表主题配色。</span><br><span class="line">quadrantChart</span><br><span class="line">    定义这是一个象限图。</span><br><span class="line">title</span><br><span class="line">    标题</span><br><span class="line"></span><br><span class="line">坐标轴，定义 X 轴和 Y 轴的范围和方向：</span><br><span class="line">x-axis Low Reach --&gt; High Reach</span><br><span class="line">    X 轴 从 “Low Reach” 到 “High Reach”。</span><br><span class="line">y-axis Low Engagement --&gt; High Engagement</span><br><span class="line">    Y 轴 从 “Low Engagement” 到 “High Engagement”。</span><br><span class="line"></span><br><span class="line">象限定义</span><br><span class="line">quadrant-1 we should expand</span><br><span class="line">    象限 1（右上）：&quot;we should expand&quot;</span><br><span class="line">quadrant-2 Need to promote</span><br><span class="line">    象限 2（左上）：&quot;Need to promote&quot;</span><br><span class="line">quadrant-3 Re-evaluate</span><br><span class="line">    象限 3（左下）：&quot;Re-evaluate&quot;</span><br><span class="line">quadrant-4 May be improved</span><br><span class="line">    象限 4（右下）：&quot;May be improved&quot;</span><br><span class="line"></span><br><span class="line">数据点</span><br><span class="line">Campaign A: [0.3,0.6]</span><br><span class="line">Campaign B: [0.45,0.23]</span><br><span class="line">Campaign C: [0.57,0.69]</span><br><span class="line">Campaign D: [0.78,0.34]</span><br><span class="line">Campaign E: [0.40,0.34]</span><br><span class="line">Campaign F: [0.35,0.78]</span><br><span class="line">定义了 6 个活动（Campaign）的数据点，使用 [name]: [x, y] 的格式来添加数据点，其中 [name] 是数据点的名称，[x, y] 是数据点在 x 轴和 y 轴上的坐标值，对于点x和y值，最小值为0，最大值为1。</span><br><span class="line">X 值：表示活动的 Reach（覆盖面）。</span><br><span class="line">Y 值：表示活动的 Engagement（参与度）。</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>初始化配置</p><ul class="lvl-2"><li class="lvl-6">quadrantChart：自定义象限图的相关参数</li></ul><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>chartHeight</td><td>图表的高度</td><td>500</td></tr><tr><td>chartWidth</td><td>图表的宽度</td><td>500</td></tr><tr><td>pointLabelFontSize</td><td>点文本字体大小</td><td>12</td></tr><tr><td>pointRadius</td><td>要绘制的点的半径</td><td>5</td></tr><tr><td>pointTextPadding</td><td>点和下面文本之间的填充</td><td>5</td></tr><tr><td>quadrantExternalBorderStrokeWidth</td><td>象限外边框描边宽度</td><td>2</td></tr><tr><td>quadrantInternalBorderStrokeWidth</td><td>象限内的边框描边宽度</td><td>1</td></tr><tr><td>quadrantLabelFontSize</td><td>象限文本字体大小</td><td>16</td></tr><tr><td>quadrantPadding</td><td>所有象限外的填充</td><td>5</td></tr><tr><td>quadrantTextTopPadding</td><td>当文本绘制在顶部时象限文本顶部填充（那里没有数据点）</td><td>5</td></tr><tr><td>titlePadding</td><td>标题的顶部和底部填充</td><td>10</td></tr><tr><td>titleFontSize</td><td>标题字体大小</td><td>20</td></tr><tr><td>xAxisLabelPadding</td><td>x 轴文本的顶部和底部填充</td><td>5</td></tr><tr><td>xAxisLabelFontSize</td><td>X 轴文本字体大小</td><td>16</td></tr><tr><td>xAxisPosition</td><td>x 轴的位置（顶部、底部）如果有点，则 x 轴将始终渲染在底部</td><td>‘top’</td></tr><tr><td>yAxisLabelPadding</td><td>y 轴文本的左右填充</td><td>5</td></tr><tr><td>yAxisLabelFontSize</td><td>Y 轴文本字体大小</td><td>16</td></tr><tr><td>yAxisPosition</td><td>y 轴位置（左、右）</td><td>‘left’</td></tr></tbody></table><ul class="lvl-2"><li class="lvl-6"><p>themeVariables： 图表主题配色</p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>quadrant1Fill</td><td>右上象限的填充颜色</td></tr><tr><td>quadrant2Fill</td><td>左上象限的填充颜色</td></tr><tr><td>quadrant3Fill</td><td>左下象限的填充颜色</td></tr><tr><td>quadrant4Fill</td><td>右下象限的填充颜色</td></tr><tr><td>quadrant1TextFill</td><td>右上象限的文本颜色</td></tr><tr><td>quadrant2TextFill</td><td>左上象限的文本颜色</td></tr><tr><td>quadrant3TextFill</td><td>左下象限的文本颜色</td></tr><tr><td>quadrant4TextFill</td><td>右下象限的文本颜色</td></tr><tr><td>quadrantPointFill</td><td>点填充颜色</td></tr><tr><td>quadrantPointTextFill</td><td>点文本颜色</td></tr><tr><td>quadrantXAxisTextFill</td><td>X 轴文本颜色</td></tr><tr><td>quadrantYAxisTextFill</td><td>Y 轴文本颜色</td></tr><tr><td>quadrantInternalBorderStrokeFill</td><td>象限内边框颜色</td></tr><tr><td>quadrantExternalBorderStrokeFill</td><td>象限外边框颜色</td></tr><tr><td>quadrantTitleFill</td><td>标题颜色</td></tr></tbody></table></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

--&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://mermaid.js.org/intro/&quot;&gt;Mermaid&lt;/a&gt; 是一个支持在Markdown文档中绘制流程图、甘特图、序列图等图形的工具。它基于JavaScript实现，能够将Markdown中的元素渲染成HTML元素，从而在网页上直观地展示各种图表‌&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://theme-next.js.org/docs/tag-plugins/mermaid&quot;&gt;Next主题中使用Mermaid说明&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在 &lt;code&gt;Hexo-Next&lt;/code&gt; 主题中使用 &lt;code&gt;Mermaid&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://blog.hanqunfeng.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://blog.hanqunfeng.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>MacOS软件包管理器--brew</title>
    <link href="https://blog.hanqunfeng.com/2024/11/28/brew/"/>
    <id>https://blog.hanqunfeng.com/2024/11/28/brew/</id>
    <published>2024-11-28T13:55:05.000Z</published>
    <updated>2024-12-03T07:24:40.709Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %--><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://brew.sh">brew</a>是一个软件包管理器，同时支持MacOS和Linux，可以很方便地安装各种软件，比如<code>git</code>、<code>node</code>、<code>python</code>等。</p></li><li class="lvl-2"><p><code>brew</code>虽然支持linux，但是实际使用中很少会使用brew来管理linux的软件包。</p></li><li class="lvl-2"><p>本文介绍如何在macos下安装brew，以及如何使用brew管理各种软件包。</p></li><li class="lvl-2"><p>本文基于 MacOS Intel Ventura 13.7.1，brew 版本为4.4.8。</p></li></ul><span id="more"></span><h2 id="安装">安装</h2><ul class="lvl-0"><li class="lvl-2"><p>首先要确保系统中安装了 <code>git</code> 和 <code>curl</code>，对于 macOS 用户来说，这些系统都自带了，唯一需额外要求安装的是<code>Command Line Tools (CLT) for Xcode</code>。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查系统中是否安装了 Command Line Tools (CLT) for Xcode</span></span><br><span class="line">xcode-select --version <span class="comment"># 能够输出版本号说明安装了，否则需要安装。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Command Line Tools (CLT) for Xcode</span></span><br><span class="line">xcode-select --install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印当前的 Command Line Tools (CLT) for Xcode 的安装路径</span></span><br><span class="line">xcode-select -p <span class="comment"># /Library/Developer/CommandLineTools</span></span><br></pre></td></tr></table></figure><h3 id="在MacOS上安装brew的方法">在MacOS上安装brew的方法</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://github.com/Homebrew/install">参考资料</a></p></li></ul><h4 id="方法一：使用脚本安装">方法一：使用脚本安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装时可以指定镜像下载源，默认是<a href="https://github.com/Homebrew/brew.git">Homebrew的GitHub下载源</a>，也可以选择国内的镜像源，比如使用<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华大学的Homebrew</a>镜像源</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制了 Homebrew 在安装软件包时是否从 Homebrew 的 API 服务器获取信息，brew4.0后是默认行为，无需设置</span></span><br><span class="line"><span class="built_in">export</span> HOMEBREW_INSTALL_FROM_API=1</span><br><span class="line"><span class="comment"># 设置brew仓库上游</span></span><br><span class="line"><span class="built_in">export</span> HOMEBREW_BREW_GIT_REMOTE=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span></span><br><span class="line"><span class="comment"># 设置homebrew核心上游</span></span><br><span class="line"><span class="built_in">export</span> HOMEBREW_CORE_GIT_REMOTE=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;</span></span><br><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><h4 id="方法二：使用PKG文件安装">方法二：使用PKG文件安装</h4><ul class="lvl-0"><li class="lvl-2"><p>从<a href="https://github.com/Homebrew/brew">Homebrew的github</a>上下载最新版的<a href="https://github.com/Homebrew/brew/releases/latest">Homebrew-x.x.x.pkg</a></p></li></ul><h4 id="方法三：国内无法访问github地址时可以使用国内镜像源">方法三：国内无法访问github地址时可以使用国内镜像源</h4><ul class="lvl-0"><li class="lvl-2"><p>这里依旧以清华大学的Homebrew镜像源为例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HOMEBREW_BREW_GIT_REMOTE=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span></span><br><span class="line"><span class="built_in">export</span> HOMEBREW_CORE_GIT_REMOTE=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;</span></span><br><span class="line"><span class="comment"># 从镜像下载安装脚本并安装 Homebrew / Linuxbrew</span></span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.git brew-install</span><br><span class="line">/bin/bash brew-install/install.sh</span><br><span class="line"><span class="built_in">rm</span> -rf brew-install</span><br></pre></td></tr></table></figure><h4 id="验证是否安装成功">验证是否安装成功</h4><ul class="lvl-0"><li class="lvl-2"><p><code>brew</code> 命令本身及通过brew安装的所有命令都会被软链接到<code>/usr/local/bin/</code>下，所以需要将该路径加入系统环境PATH中</p></li><li class="lvl-2"><p>重启终端，然后执行<code>brew -v</code>命令查看brew的版本，如果安装成功，会输出类似如下内容</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew -v</span><br><span class="line">Homebrew 4.4.8-40-g13c3def</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Homebrew本身的安装位置可以通过<code>brew --repo</code>查看，默认为<code>/usr/local/Homebrew</code></p></li><li class="lvl-2"><p>通过brew安装的软件包默认会被安装到<code>/usr/local/Cellar/</code>下，比如<code>git</code>安装后会在<code>/usr/local/Cellar/git/</code>目录下，可以通过<code>brew info git</code>查看安装信息，包括依赖库等。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示 Homebrew 安装路径，macOS ARM: /opt/homebrew，macOS Intel: /usr/local</span></span><br><span class="line">$ brew --prefix</span><br><span class="line">/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 Homebrew 本地的 Git 仓库</span></span><br><span class="line">$ brew --repo</span><br><span class="line">/usr/local/Homebrew</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 Homebrew Cellar 路径，命令行工具的安装路径</span></span><br><span class="line">$ brew --cellar</span><br><span class="line">/usr/local/Cellar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 Homebrew Caskroom 路径，GUI工具的安装路径</span></span><br><span class="line">$ brew --caskroom</span><br><span class="line">/usr/local/Caskroom</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存路径，下载安装包的缓存路径，通过 brew cleanup 清理</span></span><br><span class="line">$ brew --cache</span><br><span class="line">~/Library/Caches/Homebrew</span><br></pre></td></tr></table></figure><h4 id="配置命令补全">配置命令补全</h4><ul class="lvl-0"><li class="lvl-2"><p>参考官网<a href="https://docs.brew.sh/Shell-Completion">Homebrew Documentation–brew Shell Completion</a></p></li><li class="lvl-2"><p>我这里使用的是<code>zsh</code>，在<code>~/.zshrc</code>中加入如下内容并重启终端即可生效</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">autoload</span> -Uz compinit</span><br><span class="line">compinit</span><br></pre></td></tr></table></figure><h4 id="卸载brew">卸载brew</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="常用命令">常用命令</h2><ul class="lvl-0"><li class="lvl-2"><p><code>brew</code>支持安装<code>命令行工具(formula)</code>和<code>GUI工具(cask)</code></p><ul class="lvl-2"><li class="lvl-5"><code>brew install xxx</code> 安装命令行工具，这个最为常用，比如 <code>brew install fd</code></li><li class="lvl-5"><code>brew install --cask xxx</code> 安装GUI工具，一般很少使用brew安装GUI工具，比如 <code>brew install --cask firefox</code></li></ul></li><li class="lvl-2"><p>brew的命令和参数非常多，但日常使用只需要记住常用的几个就够了，详细的命令列表可以参考<a href="https://docs.brew.sh/Manpage">Homebrew Documentation</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看brew支持哪些命令</span></span><br><span class="line">brew commands</span><br><span class="line"><span class="comment"># 查看命令的帮助信息，比如</span></span><br><span class="line">brew install --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3 id="一些常用的命令">一些常用的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">brew update <span class="comment"># 更新brew到最新版本</span></span><br><span class="line">brew --version <span class="comment"># 查看brew的版本，可以简写为 brew -v</span></span><br><span class="line">brew config <span class="comment"># 查看brew的配置信息，这个命令很有用，可以查看到与brew相关的环境变量的值</span></span><br><span class="line">brew home <span class="comment"># 浏览器打开brew官网</span></span><br><span class="line">brew home xxx <span class="comment"># 浏览器打开xxx官网 如：打开fd命令的官网 brew home fd ,具体的名称可以通过brew list查看</span></span><br><span class="line">brew cleanup <span class="comment"># 清理缓存及日志文件，建议定期清理，当运行brew时会自动清理（2.0以后的版本）</span></span><br><span class="line">brew cleanup -n <span class="comment"># 显示将要清理的缓存及日志文件，只查看不删除</span></span><br><span class="line">brew doctor <span class="comment"># 检查是否有依赖问题，比如没有安装依赖库，或者依赖库版本过低，当运行brew报错时可以通过该命令进行检查并根据提示进行修改</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看已安装的包</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line">brew list <span class="comment"># 查看已安装的包</span></span><br><span class="line">brew list --versions <span class="comment"># 查看已安装的包及版本</span></span><br><span class="line">brew info xxx <span class="comment"># 查看xxx的安装信息</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装、卸载</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找、安装、卸载</span></span><br><span class="line">brew search xxx <span class="comment"># 查找软件包，也可以通过 https://formulae.brew.sh 网页进行搜索</span></span><br><span class="line">brew install xxx <span class="comment"># 安装软件包，此命令相当于加上了 --formula ，安装时会自动下载依赖库，比如安装`nginx`时，会自动下载`openssl@3`和`pcre2`等</span></span><br><span class="line">brew install --cask xxx <span class="comment"># 安装GUI工具，比如`firefox`</span></span><br><span class="line">brew uninstall xxx <span class="comment"># 卸载软件包，此命令相当于加上了 --formula ，只会卸载当前包，不会卸载依赖库，这样就有可能存在很多冗余包</span></span><br><span class="line">brew uninstall --cask xxx <span class="comment"># 卸载GUI工具</span></span><br><span class="line">brew autoremove <span class="comment"># 删除所有仅作为另一个软件包的依赖项安装并且现在不再需要的包</span></span><br><span class="line">brew autoremove --dry-run <span class="comment"># --dry-run 仅查看哪些包可以删除，并不会真的删除</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>升级</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升级</span></span><br><span class="line">brew outdated <span class="comment"># 查看需要升级的包</span></span><br><span class="line">brew upgrade xxx <span class="comment"># 升级xxx到最新版</span></span><br><span class="line">brew upgrade <span class="comment"># 更新全部命令到最新版</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>依赖关系</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依赖关系</span></span><br><span class="line">brew deps --tree xxx <span class="comment"># 树形显示包的依赖树</span></span><br><span class="line">brew deps --installed --tree <span class="comment"># 树形显示所有安装包的依赖关系</span></span><br><span class="line">brew deps --installed xxx <span class="comment"># 显示当前安装包的依赖关系，纵向展示</span></span><br><span class="line">brew deps --installed --for-each xxx <span class="comment"># 显示当前安装包的依赖关系，横向展示</span></span><br><span class="line">brew uses --installed xxx <span class="comment"># 查看已经安装的哪些工具依赖当前包</span></span><br><span class="line">brew leaves <span class="comment"># 查看顶级安装包，即你通过brew直接安装的包，而不是通过安装其他软件包间接安装的</span></span><br><span class="line">brew leaves | xargs brew deps --installed --for-each --formula <span class="comment"># 查看顶级包，并列出每个顶级包的已安装依赖</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>仓库管理，参考资料<a href="https://docs.brew.sh/Taps">Homebrew Documentation–Taps</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仓库管理</span></span><br><span class="line">brew tap <span class="comment"># 查看所有已安装的仓库，tap安装路径 /usr/local/Homebrew/Library/Taps/</span></span><br><span class="line">brew tap user/repo <span class="comment"># 添加一个仓库，从gitthub下载</span></span><br><span class="line">brew tap repo_url <span class="comment"># 添加一个仓库，从给定的仓库地址下载</span></span><br><span class="line">brew untap user/repo <span class="comment"># 删除一个仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从第三方仓库安装工具，此时会自动将 homebrew-ffmpeg/ffmpeg 这个仓库添加到本地</span></span><br><span class="line">brew install homebrew-ffmpeg/ffmpeg/ffmpeg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新仓库，无论是brew自己的仓库还是第三方仓库，都会自动更新</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>brew services</code>: brew的服务管理工具，可以方便的管理通过brew安装的服务，包括启动、停止、重启服务，等等，比如<code>nginx、redis、mysql</code>等，具体命令可以参考<a href="https://docs.brew.sh/Manpage#services-subcommand">Homebrew Documentation</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一次执行 services 相关的命令时会自动下载 homebrew/services，也可以 通过 brew tap homebrew/services 提前下载</span></span><br><span class="line">brew services list <span class="comment"># 查看已安装的所有服务</span></span><br><span class="line">brew services start nginx <span class="comment"># 启动服务，并注册到系统启动服务列表，即创建系统自启动文件： ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</span></span><br><span class="line">brew services stop nginx <span class="comment"># 停止服务，并从系统启动服务列表中移除，即删除系统自启动文件</span></span><br><span class="line">brew services <span class="built_in">kill</span> nginx <span class="comment"># 立即杀死服务，但不从系统启动服务列表中移除</span></span><br><span class="line">brew services restart nginx <span class="comment"># 重启服务</span></span><br><span class="line">brew services info nginx <span class="comment"># 查看服务的状态和进程IP</span></span><br><span class="line">brew services run nginx <span class="comment"># 运行服务，但不会保存到服务列表中</span></span><br><span class="line">brew services cleanup <span class="comment"># 清理无效的服务，即已卸载应用的无用的配置</span></span><br><span class="line">brew services --<span class="built_in">help</span> <span class="comment"># 查看帮助</span></span><br></pre></td></tr></table></figure><h2 id="配置国内镜像源">配置国内镜像源</h2><ul class="lvl-0"><li class="lvl-2"><p>上面安装部分介绍了如何在安装brew时就指定镜像源，但有些时候因为我们在安装时忘记配置，或者原来的镜像源已经失效需要重新配置，此时可以按照下面的方法进行配置。</p></li><li class="lvl-2"><p>此处以配置<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华镜像源</a>为例，阿里镜像源请参考<a href="https://developer.aliyun.com/mirror/homebrew/">阿里的官网文档–Homebrew镜像</a>，科大源参考<a href="https://mirrors.ustc.edu.cn/help/brew.git.html">Homebrew</a></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 临时替换</span></span><br><span class="line"><span class="comment"># 配置brew国内镜像源</span></span><br><span class="line">$ <span class="built_in">export</span> HOMEBREW_BREW_GIT_REMOTE=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span></span><br><span class="line"><span class="comment"># 配置brew-core国内镜像源</span></span><br><span class="line">$ <span class="built_in">export</span> HOMEBREW_CORE_GIT_REMOTE=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;</span></span><br><span class="line"><span class="comment"># 配置brew-bottle国内镜像源</span></span><br><span class="line">$ <span class="built_in">export</span> HOMEBREW_API_DOMAIN=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;</span></span><br><span class="line">$ <span class="built_in">export</span> HOMEBREW_BOTTLE_DOMAIN=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&quot;</span></span><br><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line">$ brew update</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置永久生效，zsh用户</span></span><br><span class="line"><span class="comment"># 配置brew国内镜像源</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="comment"># 配置brew-core国内镜像源</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="comment"># 配置brew-bottle国内镜像源</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_API_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line">$ brew update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时查看brew配置信息，可以看到已经生效了</span></span><br><span class="line">$ brew config</span><br><span class="line">HOMEBREW_VERSION: 4.4.8-38-g6089077</span><br><span class="line">ORIGIN: https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line">HEAD: 60890774e0a70fe93f94973b080068cf7b0d1c93</span><br><span class="line">Last commit: 9 hours ago</span><br><span class="line">Branch: master</span><br><span class="line">Core tap origin: https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line">Core tap HEAD: 787d1587bfa92794f7d141063a31773064ef9107</span><br><span class="line">Core tap last commit: 11 minutes ago</span><br><span class="line">Core tap JSON: 29 Nov 09:56 UTC</span><br><span class="line">Core cask tap HEAD: 4c34bd8c418e13160fc79f1ca9312555d2edc254</span><br><span class="line">Core cask tap last commit: 19 minutes ago</span><br><span class="line">Core cask tap JSON: 29 Nov 09:56 UTC</span><br><span class="line">HOMEBREW_PREFIX: /usr/local</span><br><span class="line">HOMEBREW_API_DOMAIN: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api</span><br><span class="line">HOMEBREW_BOTTLE_DOMAIN: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles</span><br><span class="line">HOMEBREW_BREW_GIT_REMOTE: https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line">HOMEBREW_CASK_OPTS: []</span><br><span class="line">HOMEBREW_CORE_GIT_REMOTE: https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line">HOMEBREW_GITHUB_API_TOKEN: <span class="built_in">set</span></span><br><span class="line">HOMEBREW_MAKE_JOBS: 12</span><br><span class="line">HOMEBREW_SORBET_RUNTIME: <span class="built_in">set</span></span><br><span class="line">Homebrew Ruby: 3.3.6 =&gt; /usr/local/Homebrew/Library/Homebrew/vendor/portable-ruby/3.3.6/bin/ruby</span><br><span class="line">CPU: dodeca-core 64-bit kabylake</span><br><span class="line">Clang: 15.0.0 build 1500</span><br><span class="line">Git: 2.43.0 =&gt; /usr/local/bin/git</span><br><span class="line">Curl: 8.7.1 =&gt; /usr/bin/curl</span><br><span class="line">macOS: 13.7.1-x86_64</span><br><span class="line">CLT: 15.0.0.0.1.1694021235</span><br><span class="line">Xcode: N/A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过brew升级fd，可以看到使用了清华源</span></span><br><span class="line">$ brew upgrade fd</span><br><span class="line">==&gt; Upgrading 1 outdated package:</span><br><span class="line">fd 8.2.1 -&gt; 10.2.0</span><br><span class="line">==&gt; Fetching fd</span><br><span class="line">==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/fd-10.2.0.ventura.bottle.tar.gz</span><br><span class="line"><span class="comment">################################################################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Verifying attestation <span class="keyword">for</span> fd</span><br><span class="line">==&gt; Upgrading fd</span><br><span class="line">  8.2.1 -&gt; 10.2.0</span><br><span class="line">==&gt; Pouring fd-10.2.0.ventura.bottle.tar.gz</span><br><span class="line">==&gt; Caveats</span><br><span class="line">zsh completions have been installed to:</span><br><span class="line">  /usr/local/share/zsh/site-functions</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/fd/10.2.0: 14 files, 2.9MB</span><br><span class="line">==&gt; Running `brew cleanup fd`...</span><br><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br><span class="line">Removing: /usr/local/Cellar/fd/8.2.1... (13 files, 2.4MB)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>恢复为默认的GitHub镜像源</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">unset</span> HOMEBREW_BREW_GIT_REMOTE</span><br><span class="line">$ <span class="built_in">unset</span> HOMEBREW_CORE_GIT_REMOTE</span><br><span class="line">$ <span class="built_in">unset</span> HOMEBREW_API_DOMAIN</span><br><span class="line">$ <span class="built_in">unset</span> HOMEBREW_BOTTLE_DOMAIN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果您之前永久配置了 HOMEBREW 环境变量，还需要在对应的 ~/.bash_profile 或者 ~/.zshrc 配置文件中，将对应的 HOMEBREW 环境变量配置行删除</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新brew</span></span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/brew</span><br><span class="line"><span class="comment"># 更新brew-core，brew4.0后不会再下载brew-core，所以可以忽略</span></span><br><span class="line"><span class="comment"># 不过从低版本升级上来的还会有这个仓库，可以通过 brew tap 查看是否存在，实际上改不改都不会有影响，看着不舒服就修改吧</span></span><br><span class="line">$ git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-core</span><br><span class="line">$ brew update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看brew配置信息</span></span><br><span class="line">$ brew config</span><br><span class="line">HOMEBREW_VERSION: 4.4.8-38-g6089077</span><br><span class="line">ORIGIN: https://github.com/Homebrew/brew</span><br><span class="line">HEAD: 60890774e0a70fe93f94973b080068cf7b0d1c93</span><br><span class="line">Last commit: 9 hours ago</span><br><span class="line">Branch: master</span><br><span class="line">Core tap HEAD: 787d1587bfa92794f7d141063a31773064ef9107</span><br><span class="line">Core tap last commit: 13 minutes ago</span><br><span class="line">Core tap JSON: 29 Nov 10:09 UTC</span><br><span class="line">Core cask tap HEAD: 871fe2e8b93aac896a1808571ff11f8b89e6d90e</span><br><span class="line">Core cask tap last commit: 48 seconds ago</span><br><span class="line">Core cask tap JSON: 29 Nov 10:09 UTC</span><br><span class="line">HOMEBREW_PREFIX: /usr/local</span><br><span class="line">HOMEBREW_CASK_OPTS: []</span><br><span class="line">HOMEBREW_GITHUB_API_TOKEN: <span class="built_in">set</span></span><br><span class="line">HOMEBREW_MAKE_JOBS: 12</span><br><span class="line">HOMEBREW_SORBET_RUNTIME: <span class="built_in">set</span></span><br><span class="line">Homebrew Ruby: 3.3.6 =&gt; /usr/local/Homebrew/Library/Homebrew/vendor/portable-ruby/3.3.6/bin/ruby</span><br><span class="line">CPU: dodeca-core 64-bit kabylake</span><br><span class="line">Clang: 15.0.0 build 1500</span><br><span class="line">Git: 2.43.0 =&gt; /usr/local/bin/git</span><br><span class="line">Curl: 8.7.1 =&gt; /usr/bin/curl</span><br><span class="line">macOS: 13.7.1-x86_64</span><br><span class="line">CLT: 15.0.0.0.1.1694021235</span><br><span class="line">Xcode: N/A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过brew升级telnet，可以看到使用了GitHub源</span></span><br><span class="line">$ brew upgrade telnet</span><br><span class="line">==&gt; Upgrading 1 outdated package:</span><br><span class="line">telnet 294 -&gt; 303.141.1</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/telnet/manifests/303.141.1</span><br><span class="line"><span class="comment">################################################################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Fetching telnet</span><br><span class="line">==&gt; Downloading https://ghcr.io/v2/homebrew/core/telnet/blobs/sha256:1be6b7b6a17a311fb3a2f1bffe7dae52284f3239b8af03f651c4fac11362f702</span><br><span class="line"><span class="comment">################################################################################################################################################################################### 100.0%</span></span><br><span class="line">==&gt; Verifying attestation <span class="keyword">for</span> telnet</span><br><span class="line">==&gt; Upgrading telnet</span><br><span class="line">  294 -&gt; 303.141.1</span><br><span class="line">==&gt; Pouring telnet--303.141.1.ventura.bottle.tar.gz</span><br><span class="line">🍺  /usr/local/Cellar/telnet/303.141.1: 5 files, 207.5KB</span><br><span class="line">==&gt; Running `brew cleanup telnet`...</span><br><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br><span class="line">Removing: /usr/local/Cellar/telnet/294... (4 files, 208.2KB)</span><br></pre></td></tr></table></figure><h2 id="重要的说明">重要的说明</h2><h3 id="环境变量">环境变量</h3><ul class="lvl-0"><li class="lvl-2"><p>brew安装的软件包会被软连接到<code>/usr/local/bin/</code>下，所以需要将该路径加入系统环境PATH中</p></li><li class="lvl-2"><p>这里要注意一点，如果该路径在PATH中声明的比较靠前，就可能会被优先使用，比如我们已经手工在系统中安装了<code>python</code>的某个版本，但通过brew安装某些软件包时因为其依赖python，就会通过brew同时安装对应的python版本，此时我们在使用python命令时，就会优先使用这个</p></li><li class="lvl-2"><p>有两种方法可以解决，1是通过<code>brew unlink python</code>来解除链接，此时并不是删除，而只是解除了软链，不会影响依赖它的工具的使用，如果需要恢复链接，可以通过<code>brew link python</code>来恢复链接；2是将我们的系统中自己安装的一些工具的路径声明在<code>/usr/local/bin/</code>之前，这样就不会有影响了。</p></li></ul><h3 id="Homebrew-4-0-带来的新变化">Homebrew 4.0 带来的新变化</h3><ul class="lvl-0"><li class="lvl-2"><p>Homebrew 4.0 进行了一项最大的改动，组织方式从Git仓库管理改为<a href="https://formulae.brew.sh/api/formula.jws.json">JSON文件</a>下载。</p></li><li class="lvl-2"><p>JSON文件会从<a href="https://formulae.brew.sh">formulae.brew.sh</a>下载，而不再使用<code>homebrew/core</code>、<code>homebrew/cask</code>两个仓库，所以升级到4.0后，本地的<code>homebrew/core</code>、<code>homebrew/cask</code> 仓库都可以删除以释放磁盘空间。</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地仓库</span></span><br><span class="line">$ brew tap</span><br><span class="line">homebrew/cask <span class="comment"># cask 仓库，GUI的工具会从此下载，brew4.0后不再使用</span></span><br><span class="line">homebrew/core <span class="comment"># core 仓库，即 formula 仓库，命令行工具会从此下载，brew4.0后不再使用</span></span><br><span class="line">homebrew/services <span class="comment"># services 仓库，services 工具本身会从此下载，brew4.0后依旧使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地仓库</span></span><br><span class="line">$ brew untap homebrew/core</span><br><span class="line">$ brew untap homebrew/cask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时再次执行 brew outdated 等命令时，会看到json文件被下载了，默认情况下，该json文件间隔24小时更新一次</span></span><br><span class="line">$ brew outdated</span><br><span class="line">==&gt; Downloading https://formulae.brew.sh/api/formula.jws.json</span><br><span class="line"><span class="comment">##################################################################################### 100.0%</span></span><br><span class="line">==&gt; Downloading https://formulae.brew.sh/api/cask.jws.json</span><br><span class="line"><span class="comment">##################################################################################### 100.0%</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果还想使用旧的仓库模式，只要配置下环境变量</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_NO_INSTALL_FROM_API=1&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="从镜像源的切换来理解brew下载安装包的过程">从镜像源的切换来理解brew下载安装包的过程</h3><ul class="lvl-0"><li class="lvl-2"><p>前面我们介绍过，切换镜像源时要设置4个环境变量，那么为什么要设置这几个变量呢？它们的作用是什么呢，下面我就一个一个说明：</p><ul class="lvl-2"><li class="lvl-4"><p>HOMEBREW_BREW_GIT_REMOTE</p><ul class="lvl-4"><li class="lvl-6">设置brew仓库，用于更新brew命令本身，这个比较容易理解</li></ul></li><li class="lvl-4"><p>HOMEBREW_CORE_GIT_REMOTE</p><ul class="lvl-4"><li class="lvl-6">设置core仓库，用于更新formula的安装脚本</li><li class="lvl-6">当通过<code>brew info xxx</code>查看安装包信息时，可以看到<code>From</code>信息，这个就是命令的安装脚本，比如下面的<code>fd.rb</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ brew info fd</span><br><span class="line">==&gt; fd: stable 10.2.0 (bottled), HEAD</span><br><span class="line">Simple, fast and user-friendly alternative to find</span><br><span class="line">https://github.com/sharkdp/fd</span><br><span class="line">Conflicts with:</span><br><span class="line">  fdclone (because both install `fd` binaries)</span><br><span class="line">Installed</span><br><span class="line">/usr/local/Cellar/fd/10.2.0 (14 files, 2.9MB) *</span><br><span class="line">  Poured from bottle using the formulae.brew.sh API on 2024-11-29 at 18:02:16</span><br><span class="line">From: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/f/fd.rb</span><br><span class="line">License: Apache-2.0 OR MIT</span><br><span class="line">==&gt; Dependencies</span><br><span class="line">Build: rust ✘</span><br><span class="line">==&gt; Options</span><br><span class="line">--HEAD</span><br><span class="line">  Install HEAD version</span><br><span class="line">==&gt; Caveats</span><br><span class="line">zsh completions have been installed to:</span><br><span class="line">  /usr/local/share/zsh/site-functions</span><br><span class="line">==&gt; Analytics</span><br><span class="line">install: 6,327 (30 days), 24,518 (90 days), 116,476 (365 days)</span><br><span class="line">install-on-request: 6,326 (30 days), 24,515 (90 days), 116,363 (365 days)</span><br><span class="line">build-error: 0 (30 days)</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-6">这个安装脚本中包含<code>bottle do</code>部分，其作用是当安装脚本时，优先从该部分获取对应的操作系统的二进制预编译包的sha256校验值，如果从对应的二进制源中找到，则直接从二进制预编译包的地址进行下载，该预编译下载地址由<code>HOMEBREW_BOTTLE_DOMAIN</code>指定，默认从官方源下载。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class Fd &lt; Formula</span><br><span class="line">  desc <span class="string">&quot;Simple, fast and user-friendly alternative to find&quot;</span></span><br><span class="line">  homepage <span class="string">&quot;https://github.com/sharkdp/fd&quot;</span></span><br><span class="line">  url <span class="string">&quot;https://github.com/sharkdp/fd/archive/refs/tags/v10.2.0.tar.gz&quot;</span></span><br><span class="line">  sha256 <span class="string">&quot;73329fe24c53f0ca47cd0939256ca5c4644742cb7c14cf4114c8c9871336d342&quot;</span></span><br><span class="line">  license any_of: [<span class="string">&quot;Apache-2.0&quot;</span>, <span class="string">&quot;MIT&quot;</span>]</span><br><span class="line">  <span class="built_in">head</span> <span class="string">&quot;https://github.com/sharkdp/fd.git&quot;</span>, branch: <span class="string">&quot;master&quot;</span></span><br><span class="line"></span><br><span class="line">  bottle <span class="keyword">do</span></span><br><span class="line">    sha256 cellar: :any_skip_relocation, arm64_sequoia:  <span class="string">&quot;9d17cfb029fbdc6ed31c732108f7aa746d3082dd4783ed35471ef79340615509&quot;</span></span><br><span class="line">    sha256 cellar: :any_skip_relocation, arm64_sonoma:   <span class="string">&quot;82d5c2ffc2e2d0d8643a7c3f620c81ed49d7b23920aa23b6a7f4c50be69abc0b&quot;</span></span><br><span class="line">    sha256 cellar: :any_skip_relocation, arm64_ventura:  <span class="string">&quot;354412ababb7d6c52abd9153ff96f133391406ce292b2122c76b96c2ab714f87&quot;</span></span><br><span class="line">    sha256 cellar: :any_skip_relocation, arm64_monterey: <span class="string">&quot;0b41f292041767fd1c3c5b92daaa6c823fb07c1d7cd11b0427a415f08463f035&quot;</span></span><br><span class="line">    sha256 cellar: :any_skip_relocation, sonoma:         <span class="string">&quot;4fa0fb4b3f512e45d35c569953efc7c59ebd8976caac9b2c1b1394b7e29157a0&quot;</span></span><br><span class="line">    sha256 cellar: :any_skip_relocation, ventura:        <span class="string">&quot;b1406e5414252b1e1b90cfad188454eb31058256ed6246baed48c4e1cfe593a1&quot;</span></span><br><span class="line">    sha256 cellar: :any_skip_relocation, monterey:       <span class="string">&quot;0ac060bf7d1529aa1f65e634f64b98b906df533d71f2185c883165c01f59ad53&quot;</span></span><br><span class="line">    sha256 cellar: :any_skip_relocation, x86_64_linux:   <span class="string">&quot;2464fb21cc981166ffa9783fa14a09265790af4d89ce3a763421ddaf29119541&quot;</span></span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  depends_on <span class="string">&quot;rust&quot;</span> =&gt; :build</span><br><span class="line"></span><br><span class="line">  conflicts_with <span class="string">&quot;fdclone&quot;</span>, because: <span class="string">&quot;both install `fd` binaries&quot;</span></span><br><span class="line"></span><br><span class="line">  def install</span><br><span class="line">    system <span class="string">&quot;cargo&quot;</span>, <span class="string">&quot;install&quot;</span>, *std_cargo_args</span><br><span class="line">    man1.install <span class="string">&quot;doc/fd.1&quot;</span></span><br><span class="line">    generate_completions_from_executable(bin/<span class="string">&quot;fd&quot;</span>, <span class="string">&quot;--gen-completions&quot;</span>, shells: [:bash, :fish])</span><br><span class="line">    zsh_completion.install <span class="string">&quot;contrib/completion/_fd&quot;</span></span><br><span class="line">    <span class="comment"># Bash completions are not compatible with Bash 3 so don&#x27;t use v1 directory.</span></span><br><span class="line">    <span class="comment"># bash: complete: nosort: invalid option name</span></span><br><span class="line">    <span class="comment"># Issue ref: https://github.com/clap-rs/clap/issues/5190</span></span><br><span class="line">    (share/<span class="string">&quot;bash-completion/completions&quot;</span>).install bash_completion.children</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  <span class="built_in">test</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">touch</span> <span class="string">&quot;foo_file&quot;</span></span><br><span class="line">    <span class="built_in">touch</span> <span class="string">&quot;test_file&quot;</span></span><br><span class="line">    assert_equal <span class="string">&quot;test_file&quot;</span>, shell_output(<span class="string">&quot;#&#123;bin&#125;/fd test&quot;</span>).chomp</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-6">注意，brew4.0后不再使用从该git仓库中获取安装脚本，因为formula的安装源代码已经全部存储在json文件中(见<code>HOMEBREW_API_DOMAIN</code>说明)，不再需要通过Git仓库下载</li><li class="lvl-6">切换镜像源时，brew4.0后不需要设置该环境变量</li></ul></li><li class="lvl-4"><p>HOMEBREW_API_DOMAIN</p><ul class="lvl-4"><li class="lvl-6">设置<code>formula\cask</code>的安装脚本下载源，默认<a href="https://formulae.brew.sh">https://formulae.brew.sh</a></li><li class="lvl-6">brew4.0后不再从git仓库获取安装脚本，而是从这个json文件中一次性获取所有工具的安装脚本，默认24小时更新一次</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">官方源：</span><br><span class="line">  formula源：https://formulae.brew.sh/api/formula.jws.json</span><br><span class="line">  cask源：https://formulae.brew.sh/api/cask.jws.json</span><br><span class="line"></span><br><span class="line">清华源：</span><br><span class="line">  formula源：https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api/formula.jws.json</span><br><span class="line">  cask源：https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api/cask.jws.json</span><br></pre></td></tr></table></figure><ul class="lvl-4"><li class="lvl-6">如果还想使用旧的仓库模式，只要配置下环境变量，这样即使你升级后已经删除了对应的仓库，它也会在第一次使用到时自动下载</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方也提到，非开发人员没必要这样做</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_NO_INSTALL_FROM_API=1&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure></li><li class="lvl-4"><p>HOMEBREW_BOTTLE_DOMAIN</p><ul class="lvl-4"><li class="lvl-6">指定预编译二进制包（也称为 bottles）的下载地址，Homebrew 使用这些 bottles 来加速软件安装过程，避免在每个用户的计算机上都重新从源代码构建软件。</li><li class="lvl-6">当我们通过<code>brew install xxx</code>安装软件时，brew会先从该formula的安装脚本（4.0以前从HOMEBREW_CORE_GIT_REMOTE指定的git仓库获取，4.0以后从HOMEBREW_API_DOMAIN指定的json文件中获取）中获取该软件的安装信息，然后根据安装信息从bottle中下载对应的预编译二进制包，再将其安装到本地。</li><li class="lvl-6">下载后的二进制包会被保存到缓存目录中(<code>brew --cache</code>)，安装后的软件包存储到Cellar目录中(<code>brew --cellar</code>)</li></ul></li></ul></li><li class="lvl-2"><p>通过上面的分析，我们可以得出结论，切换镜像源时，实际上只需要设置3个变量就够了</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HOMEBREW_BREW_GIT_REMOTE</span><br><span class="line">HOMEBREW_API_DOMAIN</span><br><span class="line">HOMEBREW_BOTTLE_DOMAIN</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

--&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://brew.sh&quot;&gt;brew&lt;/a&gt;是一个软件包管理器，同时支持MacOS和Linux，可以很方便地安装各种软件，比如&lt;code&gt;git&lt;/code&gt;、&lt;code&gt;node&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;等。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;code&gt;brew&lt;/code&gt;虽然支持linux，但是实际使用中很少会使用brew来管理linux的软件包。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在macos下安装brew，以及如何使用brew管理各种软件包。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于 MacOS Intel Ventura 13.7.1，brew 版本为4.4.8。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="macos" scheme="https://blog.hanqunfeng.com/categories/macos/"/>
    
    
    <category term="macos" scheme="https://blog.hanqunfeng.com/tags/macos/"/>
    
    <category term="brew" scheme="https://blog.hanqunfeng.com/tags/brew/"/>
    
  </entry>
  
  <entry>
    <title>Poetry--轻量级的python包管理器</title>
    <link href="https://blog.hanqunfeng.com/2024/11/22/python_poetry/"/>
    <id>https://blog.hanqunfeng.com/2024/11/22/python_poetry/</id>
    <published>2024-11-22T15:33:15.000Z</published>
    <updated>2024-12-05T03:41:10.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><a href="https://python-poetry.org/docs/">Poetry</a>是一个轻量级的python包管理器，其目标是帮助开发者快速、轻松地构建、发布和分享python包。说它轻量，是与 <a href="https://docs.conda.io/projects/conda/en/stable/">conda</a> 相比 poetry 更轻量，同时与 <code>venv + pip</code> <a href="/2018/04/28/python_virtualenv/" title="Python--virtualenv">Python--virtualenv</a> 的方式相比具有如下优点：<ul class="lvl-2"><li class="lvl-6">使用缓存机制，避免重复下载依赖包</li><li class="lvl-6">包管理上更加精确，删除不需要的包时会同时删除与其关联的且没有被使用的那些依赖包，避免无用的依赖包造成打包体积过大</li><li class="lvl-6">打包和发布更加简单，只需要一个命令就可以打包和发布</li></ul></li></ul><span id="more"></span><h2 id="安装">安装</h2><ul class="lvl-0"><li class="lvl-2"><p>参考官方文档<a href="https://python-poetry.org/docs/#installation">Installation</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方推荐使用pipx安装，当然也可以使用 pip</span></span><br><span class="line">$ pipx install poetry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否安装成功</span></span><br><span class="line">$ poetry --version</span><br><span class="line">Poetry (version 1.8.4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加命令自动补全</span></span><br><span class="line">$ <span class="built_in">mkdir</span>  ~/.zfunc</span><br><span class="line">$ poetry completions zsh &gt; ~/.zfunc/_poetry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 ~/.zshrc 中添加以下配置（我是用的是zsh，其他shell可以参考官方文档）</span></span><br><span class="line">fpath+=~/.zfunc</span><br><span class="line"><span class="built_in">autoload</span> -Uz compinit &amp;&amp; compinit</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>pipx简介</strong></em></p><ul class="lvl-1"><li class="lvl-2"><p><a href="https://github.com/pypa/pipx">pipx</a> 是一个 Python 包管理工具，使用pipx安装工具包时，每个工具都会被安装在一个独立的虚拟环境中，避免不同工具之间的依赖冲突。</p></li><li class="lvl-2"><p>场景：两个工具依赖不同版本的同一个库<br>假设我们有两个命令行工具：</p><p>工具A 依赖于 requests 库的版本 2.27.1。<br>工具B 依赖于 requests 库的版本 2.31.0。</p><p>如果使用 pip 安装<br>工具会被安装到全局环境，共享相同的依赖版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install toolA  <span class="comment"># 安装时会安装 requests 2.27.1</span></span><br><span class="line">pip install toolB  <span class="comment"># 安装时会将 requests 升级到 2.31.0</span></span><br></pre></td></tr></table></figure><p>结果：<br>当你运行工具A时，它可能会报错，因为它依赖的 requests 2.27.1 已被 requests 2.31.0 替换。<br>全局环境中的所有工具都共享一个 requests，版本冲突不可避免。</p><p>如果使用 pipx 安装<br>每个工具会被安装到独立的虚拟环境中，各自的依赖互不影响：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipx install toolA  <span class="comment"># 在虚拟环境A中安装 toolA 和 requests 2.27.1</span></span><br><span class="line">pipx install toolB  <span class="comment"># 在虚拟环境B中安装 toolB 和 requests 2.31.0</span></span><br></pre></td></tr></table></figure><p>结果：<br>虚拟环境A 只包含 toolA 和它的依赖 requests 2.27.1。<br>虚拟环境B 只包含 toolB 和它的依赖 requests 2.31.0。<br>工具之间完全隔离，不会因为依赖版本冲突而导致问题。</p></li><li class="lvl-2"><p>所以，当需要安装全局命令行工具时，使用pipx是个很好的选择</p></li><li class="lvl-2"><p><a href="https://github.com/pypa/pipx">pipx</a> 的安装</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pipx</span></span><br><span class="line">pip install pipx</span><br><span class="line"><span class="comment"># 配置环境变量，运行该命令会将</span></span><br><span class="line">pipx ensurepath</span><br><span class="line"><span class="comment"># 运行上面的命令会将如下内容加入你的shell配置文件中，我的是 .zshrc 文件，实际上你也可以手工添加该配置，将$HOME/.local/bin放到前面更好一些。</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.local/bin&quot;</span></span><br><span class="line"><span class="comment"># 注意添加完成后要重启shell</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加pipx自动代码补全</span></span><br><span class="line"><span class="comment"># 运行如下命令，并根据提示完成</span></span><br><span class="line">pipx completions</span><br><span class="line"><span class="comment"># 我的是zsh，所以在 .zshrc中添加如下内容</span></span><br><span class="line"><span class="built_in">autoload</span> -Uz compinit &amp;&amp; compinit <span class="comment"># 如果没有添加过就需要先添加这个</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(register-python-argcomplete pipx)</span>&quot;</span> <span class="comment"># 添加自动代码补全</span></span><br><span class="line"><span class="comment"># 注意添加完成后要重启shell</span></span><br></pre></td></tr></table></figure></div><h2 id="查看所有命令">查看所有命令</h2><blockquote><p>我已经将其翻译为中文</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">$ poetry list</span><br><span class="line">Poetry (版本 1.8.4)</span><br><span class="line"></span><br><span class="line">用法：</span><br><span class="line">  <span class="built_in">command</span> [选项] [参数]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">  -h, --<span class="built_in">help</span>                 显示给定命令的帮助。如果没有指定命令，则显示列表命令的帮助。</span><br><span class="line">  -q, --quiet                不输出任何消息。</span><br><span class="line">  -V, --version              显示此应用程序版本。</span><br><span class="line">      --ansi                强制输出ANSI格式。</span><br><span class="line">      --no-ansi             禁用ANSI输出。</span><br><span class="line">  -n, --no-interaction       不要提问任何交互性问题。</span><br><span class="line">      --no-plugins           禁用插件。</span><br><span class="line">      --no-cache            禁用源缓存。</span><br><span class="line">  -C, --directory=目录      Poetry命令的工作目录（默认为当前工作目录）。</span><br><span class="line">  -v|vv|vvv, --verbose       增加消息的冗长度：1 表示正常输出，2 表示更详细的输出，3 表示调试。</span><br><span class="line"></span><br><span class="line">可用命令：</span><br><span class="line">  about              显示关于Poetry的信息。</span><br><span class="line">  add                将新依赖项添加到pyproject.toml并安装它。</span><br><span class="line">  build              默认构建一个包，分别是tarball和wheel。</span><br><span class="line">  check              验证pyproject.toml文件的内容及其与poetry.lock文件的一致性。</span><br><span class="line">  config             管理配置设置。</span><br><span class="line">  <span class="built_in">export</span>             将锁文件导出到其他格式。</span><br><span class="line">  <span class="built_in">help</span>               显示特定命令的帮助。</span><br><span class="line">  init               在当前目录创建一个基础的pyproject.toml文件。</span><br><span class="line">  install            安装项目依赖项。</span><br><span class="line">  list               列出命令。</span><br><span class="line">  lock              锁定项目依赖项。</span><br><span class="line">  new               在&lt;path&gt;处创建一个新的Python项目。</span><br><span class="line">  publish           将包发布到远程仓库。</span><br><span class="line">  remove            从项目依赖项中移除包。</span><br><span class="line">  run                在适当的环境中运行命令。</span><br><span class="line">  search            在远程仓库中搜索包。</span><br><span class="line">  shell            在虚拟环境中启动shell。</span><br><span class="line">  show              显示有关包的信息。</span><br><span class="line">  update            根据pyproject.toml文件更新依赖项。</span><br><span class="line">  version           显示项目的版本或在提供有效版本规则时更新它。</span><br><span class="line"></span><br><span class="line">缓存</span><br><span class="line">  cache clear        按名称清除Poetry缓存。</span><br><span class="line">  cache list         列出Poetry的缓存列表。</span><br><span class="line"></span><br><span class="line">调试</span><br><span class="line">  debug info        显示调试信息。</span><br><span class="line">  debug resolve    调试依赖项解析。</span><br><span class="line"></span><br><span class="line">环境</span><br><span class="line">  <span class="built_in">env</span> info         显示当前环境的信息。</span><br><span class="line">  <span class="built_in">env</span> list          列出与当前项目关联的所有虚拟环境。</span><br><span class="line">  <span class="built_in">env</span> remove        移除与项目关联的虚拟环境。</span><br><span class="line">  <span class="built_in">env</span> use           激活或创建当前项目的新的虚拟环境。</span><br><span class="line"></span><br><span class="line">自身</span><br><span class="line">  self add          向Poetry的运行时环境添加其他包。</span><br><span class="line">  self install      安装此Poetry安装所需的锁定包（包括插件）。</span><br><span class="line">  self lock         锁定Poetry安装的系统要求。</span><br><span class="line">  self remove       从Poetry的运行时环境中移除其他包。</span><br><span class="line">  self show         显示Poetry运行时环境中的包。</span><br><span class="line">  self show plugins 显示当前已安装插件的信息。</span><br><span class="line">  self update       更新Poetry到最新版本。</span><br><span class="line"></span><br><span class="line">源</span><br><span class="line">  <span class="built_in">source</span> add         为项目添加源配置。</span><br><span class="line">  <span class="built_in">source</span> remove      移除为项目配置的源。</span><br><span class="line">  <span class="built_in">source</span> show        显示为项目配置的源信息。</span><br></pre></td></tr></table></figure><h2 id="常用命令">常用命令</h2><ul class="lvl-0"><li class="lvl-2"><p>这里只对日常开发中比较常用的命令进行简要说明，详细介绍可以参考<a href="https://python-poetry.org/docs/">官方文档</a></p></li></ul><h3 id="new-创建项目">new : 创建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照默认规则创建一个基于 poetry 的项目</span></span><br><span class="line">$ poetry new my-project</span><br><span class="line">Created package my_project <span class="keyword">in</span> my-project</span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看生成的目录结构</span></span><br><span class="line">$ exa -T</span><br><span class="line">.</span><br><span class="line">├── my_project</span><br><span class="line">│  └── __init__.py</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── README.md</span><br><span class="line">└── tests</span><br><span class="line">   └── __init__.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 pyproject.toml 内容，该文件为项目的配置的配置文件</span></span><br><span class="line">$ more pyproject.toml</span><br><span class="line">[tool.poetry]</span><br><span class="line">name = <span class="string">&quot;my-project&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">description = <span class="string">&quot;&quot;</span></span><br><span class="line">authors = [<span class="string">&quot;hanqunfeng &lt;hanqf2008@163.com&gt;&quot;</span>]</span><br><span class="line">readme = <span class="string">&quot;README.md&quot;</span></span><br><span class="line"></span><br><span class="line">[tool.poetry.dependencies]</span><br><span class="line">python = <span class="string">&quot;^3.11&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[build-system]</span><br><span class="line">requires = [<span class="string">&quot;poetry-core&quot;</span>]</span><br><span class="line">build-backend = <span class="string">&quot;poetry.core.masonry.api&quot;</span></span><br></pre></td></tr></table></figure><h3 id="init-初始化一个已有的项目目录">init : 初始化一个已有的项目目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设我们已经有个项目目录，目录名称为 poetryDemo</span></span><br><span class="line">$ <span class="built_in">cd</span> poetryDemo</span><br><span class="line"><span class="comment"># 初始化 poetryDemo ，在当前目录下创建 pyproject.toml 文件，注意该操作只会创建该文件，包目录以及readme文件都没有，需要手工创建</span></span><br><span class="line">$ poetry init</span><br><span class="line">This <span class="built_in">command</span> will guide you through creating your pyproject.toml config.</span><br><span class="line"></span><br><span class="line">Package name [poetrydemo]:  <span class="comment"># 包名称</span></span><br><span class="line">Version [0.1.0]:  <span class="comment"># 版本号</span></span><br><span class="line">Description []:   <span class="comment"># 描述信息</span></span><br><span class="line">Author [hanqunfeng &lt;hanqf2008@163.com&gt;, n to skip]:  <span class="comment"># 作者</span></span><br><span class="line">License []:  <span class="comment"># License</span></span><br><span class="line">Compatible Python versions [^3.11]:  <span class="comment"># python 版本</span></span><br><span class="line"></span><br><span class="line">Would you like to define your main dependencies interactively? (<span class="built_in">yes</span>/no) [<span class="built_in">yes</span>] <span class="comment"># 您想以交互方式定义您的主环境依赖关系吗？默认yes</span></span><br><span class="line">You can specify a package <span class="keyword">in</span> the following forms:  <span class="comment"># 您可以按以下形式指定包：</span></span><br><span class="line">  - A single name (requests): this will search <span class="keyword">for</span> matches on PyPI <span class="comment"># 单个名称（requests）：这将在官方仓库PyPI上搜索匹配项，如果指定了其它镜像源就会从指定的源下载</span></span><br><span class="line">  - A name and a constraint (requests@^2.23.0) <span class="comment"># 名称和版本约束</span></span><br><span class="line">  - A git url (git+https://github.com/python-poetry/poetry.git) <span class="comment"># git地址</span></span><br><span class="line">  - A git url with a revision (git+https://github.com/python-poetry/poetry.git#develop) <span class="comment"># git地址，指定某个分支</span></span><br><span class="line">  - A file path (../my-package/my-package.whl) <span class="comment"># 文件路径</span></span><br><span class="line">  - A directory (../my-package/) <span class="comment"># 目录路径</span></span><br><span class="line">  - A url (https://example.com/packages/my-package-0.1.0.tar.gz) <span class="comment"># 一个安装包的地址</span></span><br><span class="line"></span><br><span class="line">Package to add or search <span class="keyword">for</span> (leave blank to skip): <span class="comment"># 添加主环境依赖，按上面的格式要求填写</span></span><br><span class="line"></span><br><span class="line">Would you like to define your development dependencies interactively? (<span class="built_in">yes</span>/no) [<span class="built_in">yes</span>] <span class="comment"># 您想以交互方式定义您的开发依赖关系吗？默认yes</span></span><br><span class="line">Package to add or search <span class="keyword">for</span> (leave blank to skip): <span class="comment"># 添加开发环境依赖，按上面的格式要求填写</span></span><br><span class="line"></span><br><span class="line">Generated file</span><br><span class="line"><span class="comment"># 要生成的 pyproject.toml 内容</span></span><br><span class="line">[tool.poetry]</span><br><span class="line">name = <span class="string">&quot;poetrydemo&quot;</span>  <span class="comment"># 包名称</span></span><br><span class="line">version = <span class="string">&quot;0.1.0&quot;</span>    <span class="comment"># 版本</span></span><br><span class="line">description = <span class="string">&quot;&quot;</span>     <span class="comment"># 描述信息</span></span><br><span class="line">authors = [<span class="string">&quot;hanqunfeng &lt;hanqf2008@163.com&gt;&quot;</span>] <span class="comment"># 作者信息</span></span><br><span class="line">readme = <span class="string">&quot;README.md&quot;</span> <span class="comment"># 说明文件</span></span><br><span class="line"></span><br><span class="line">[tool.poetry.dependencies] <span class="comment"># 主环境依赖</span></span><br><span class="line">python = <span class="string">&quot;^3.11&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[build-system]</span><br><span class="line">requires = [<span class="string">&quot;poetry-core&quot;</span>]</span><br><span class="line">build-backend = <span class="string">&quot;poetry.core.masonry.api&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you confirm generation? (<span class="built_in">yes</span>/no) [<span class="built_in">yes</span>] <span class="comment"># 确认是否按照上面的内容创建 pyproject.toml 文件，默认yes</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>上面的方式在初始化时会询问你相关的信息，如果你希望都用默认值的话，可以使用如下命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry init -n</span><br></pre></td></tr></table></figure><h3 id="config-poetry的全局配置">config : poetry的全局配置</h3><ul class="lvl-0"><li class="lvl-2"><p>查看全局配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ poetry config --list</span><br><span class="line">cache-dir = <span class="string">&quot;/Users/hanqf/Library/Caches/pypoetry&quot;</span>  <span class="comment"># 缓存目录,用于存储项目依赖和虚拟环境等缓存信息。</span></span><br><span class="line">experimental.system-git-client = <span class="literal">false</span>              <span class="comment"># 是否使用系统自带的git客户端,false表示使用Poetry内置的git客户端</span></span><br><span class="line">installer.max-workers = null                        <span class="comment"># 安装依赖时的最大线程数,null表示使用默认线程数，可以设置为cpu核数+4</span></span><br><span class="line">installer.modern-installation = <span class="literal">true</span>                <span class="comment"># 是否使用Poetry的现代安装方案,true表示使用</span></span><br><span class="line">installer.no-binary = null                          <span class="comment"># 是否不使用预编译的二进制包,null表示不限制</span></span><br><span class="line">installer.parallel = <span class="literal">true</span>                           <span class="comment"># 是否并行安装依赖,true表示并行安装</span></span><br><span class="line">keyring.enabled = <span class="literal">true</span>                              <span class="comment"># 是否启用密钥环（keyring）以保存认证信息。true 表示启用。</span></span><br><span class="line">solver.lazy-wheel = <span class="literal">true</span>                            <span class="comment"># 是否延迟解析 wheel 包。true 表示延迟解析。</span></span><br><span class="line">virtualenvs.create = <span class="literal">true</span>                           <span class="comment"># 是否自动创建虚拟环境,true表示创建</span></span><br><span class="line">virtualenvs.in-project = null                       <span class="comment"># 是否在项目内创建虚拟环境，null 表示使用默认值（通常为 false），即不在项目中创建。true表示在项目中创建</span></span><br><span class="line">virtualenvs.options.always-copy = <span class="literal">false</span>             <span class="comment"># 如果设置为 true，Poetry 会始终复制文件到虚拟环境中，而不是使用符号链接（symlinks）。这可以避免某些系统上的权限问题，但会增加虚拟环境的存储需求。</span></span><br><span class="line">virtualenvs.options.no-pip = <span class="literal">false</span>                  <span class="comment"># 如果设置为 true，Poetry 在创建虚拟环境时不会安装 pip。如果你的项目不需要直接使用 pip，并且你希望通过 Poetry 管理所有的依赖项，可以将 no-pip 设置为 true，以减少虚拟环境中的不必要的依赖项。</span></span><br><span class="line">virtualenvs.options.no-setuptools = <span class="literal">false</span>           <span class="comment"># 如果设置为 true，Poetry 在创建虚拟环境时不会安装 setuptools。默认情况下，Poetry 会安装 pip 和 setuptools，以便你可以使用这些工具来管理依赖项。</span></span><br><span class="line">virtualenvs.options.system-site-packages = <span class="literal">false</span>    <span class="comment"># 默认值false，此时 Poetry 创建的虚拟环境将不会包含全局 Python 安装的 site-packages 目录中的包。这有助于确保项目依赖项的隔离性，避免与系统中的其他包发生冲突。</span></span><br><span class="line">virtualenvs.path = <span class="string">&quot;&#123;cache-dir&#125;/virtualenvs&quot;</span>  <span class="comment"># /Users/hanqf/Library/Caches/pypoetry/virtualenvs # 虚拟环境存放的路径，如果virtualenvs.in-project设置为true，就只会在项目中创建</span></span><br><span class="line">virtualenvs.prefer-active-python = <span class="literal">false</span>            <span class="comment"># 是否优先使用系统激活的Python解释器</span></span><br><span class="line">virtualenvs.prompt = <span class="string">&quot;&#123;project_name&#125;-py&#123;python_version&#125;&quot;</span>  <span class="comment"># 虚拟环境的命令提示格式</span></span><br><span class="line">warnings.export = <span class="literal">true</span>                              <span class="comment"># 是否在导出时显示警告信息。true 表示显示</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改全局配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改全局配置，此后会在项目目录下创建 .venv 目录存放虚拟环境</span></span><br><span class="line">$ poetry config virtualenvs.in-project <span class="literal">true</span></span><br><span class="line"><span class="comment"># 进入虚拟环境，如果虚拟环境尚未创建会自动创建</span></span><br><span class="line">$ poetry shell</span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只对当前项目有效，此时会在当前项目目录下创建 poetry.toml 来保存这些配置信息</span></span><br><span class="line">$ poetry config virtualenvs.in-project <span class="literal">true</span> --<span class="built_in">local</span></span><br><span class="line">$ poetry config virtualenvs.options.system-site-packages <span class="literal">true</span> --<span class="built_in">local</span></span><br><span class="line">$ more poetry.toml</span><br><span class="line">[virtualenvs]</span><br><span class="line">in-project = <span class="literal">true</span></span><br><span class="line">[virtualenvs.options]</span><br><span class="line">system-site-packages = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里要注意 virtualenvs 下的属性必须在创建虚拟环境前设置才会有效</span></span><br></pre></td></tr></table></figure><h3 id="env-虚拟环境管理">env : 虚拟环境管理</h3><ul class="lvl-0"><li class="lvl-2"><p>Poetry 会在你第一次运行某些命令（如 <code>poetry shell</code> 或者 <code>poetry add somepackage</code>）时自动创建虚拟环境。</p></li><li class="lvl-2"><p>不过这种时候都是使用系统默认的python来创建虚拟环境，如果系统中安装了多个python，则可以通过如下方式设置虚拟环境要使用哪个python版本</p></li><li class="lvl-2"><p>创建/切换虚拟环境</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定python的版本，这会从python的默认安装路径下查找对应的版本</span></span><br><span class="line"><span class="comment"># 比如macOs会从该路径下查找：/Library/Frameworks/Python.framework/Versions</span></span><br><span class="line">$ poetry <span class="built_in">env</span> use 3.11</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果可以直接在命令行使用python命令,比如：python3.12 -V，则可以使用如下方式创建虚拟环境</span></span><br><span class="line">$ poetry <span class="built_in">env</span> use python3.12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果python安装到了其它路径，可以指定python安装路径</span></span><br><span class="line">$ poetry <span class="built_in">env</span> use /pythonDir/3.13/bin/python3</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看当前项目的虚拟环境信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个基于 python3.13 的虚拟环境</span></span><br><span class="line">$ poetry <span class="built_in">env</span> use python3.13</span><br><span class="line">Creating virtualenv poetrydemo-fyqYbfje-py3.13 <span class="keyword">in</span> /Users/hanqf/Library/Caches/pypoetry/virtualenvs</span><br><span class="line">Using virtualenv: /Users/hanqf/Library/Caches/pypoetry/virtualenvs/poetrydemo-fyqYbfje-py3.13</span><br><span class="line"><span class="comment"># 再创建一个基于 python3.11 的虚拟环境，最后被use的处于默认激活状态</span></span><br><span class="line">$ poetry <span class="built_in">env</span> use python3.11</span><br><span class="line">Creating virtualenv poetrydemo-fyqYbfje-py3.11 <span class="keyword">in</span> /Users/hanqf/Library/Caches/pypoetry/virtualenvs</span><br><span class="line">Using virtualenv: /Users/hanqf/Library/Caches/pypoetry/virtualenvs/poetrydemo-fyqYbfje-py3.11</span><br><span class="line"><span class="comment"># 查看当前项目有多少个虚拟环境</span></span><br><span class="line">$ poetry <span class="built_in">env</span> list</span><br><span class="line">poetrydemo-fyqYbfje-py3.11 (Activated) <span class="comment"># poetrydemo-fyqYbfje-py3.11 表示虚拟环境名称，Activated表示当前虚拟环境已经被激活</span></span><br><span class="line">poetrydemo-fyqYbfje-py3.13</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看虚拟化环境路径</span></span><br><span class="line">$ poetry <span class="built_in">env</span> list  --full-path</span><br><span class="line">/Users/hanqf/Library/Caches/pypoetry/virtualenvs/poetrydemo-fyqYbfje-py3.11 (Activated)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前激活的虚拟环境信息</span></span><br><span class="line">$ poetry <span class="built_in">env</span> info</span><br><span class="line"></span><br><span class="line">Virtualenv</span><br><span class="line">Python:         3.11.3</span><br><span class="line">Implementation: CPython</span><br><span class="line">Path:           /Users/hanqf/Library/Caches/pypoetry/virtualenvs/poetrydemo-fyqYbfje-py3.11</span><br><span class="line">Executable:     /Users/hanqf/Library/Caches/pypoetry/virtualenvs/poetrydemo-fyqYbfje-py3.11/bin/python</span><br><span class="line">Valid:          True</span><br><span class="line"></span><br><span class="line">Base</span><br><span class="line">Platform:   darwin</span><br><span class="line">OS:         posix</span><br><span class="line">Python:     3.11.3</span><br><span class="line">Path:       /Library/Frameworks/Python.framework/Versions/3.11</span><br><span class="line">Executable: /Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除虚拟环境</span></span><br><span class="line">$ poetry <span class="built_in">env</span> remove python3.13</span><br><span class="line">Deleted virtualenv: /Users/hanqf/Library/Caches/pypoetry/virtualenvs/poetrydemo-fyqYbfje-py3.13</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部虚拟环境</span></span><br><span class="line">$ poetry <span class="built_in">env</span> remove --all</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>注意，当<code>virtualenvs.in-project</code>被设置为<code>true</code>时，即只在项目目录下创建虚拟环境时，只会保留一个环境，即<code>.venv</code></p></li><li class="lvl-2"><p>切换到新的虚拟环境时会全新创建一个新的环境，原先的环境会被删除，所以要使用<code>poetry install</code>命令重新安装依赖</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ poetry <span class="built_in">env</span> use python3.11</span><br><span class="line">Recreating virtualenv poetrydemo <span class="keyword">in</span> /Users/hanqf/Desktop/pythonDir/poetryDir/poetryDemo/.venv</span><br><span class="line">Using virtualenv: /Users/hanqf/Desktop/pythonDir/poetryDir/poetryDemo/.venv</span><br><span class="line"></span><br><span class="line">$ poetry <span class="built_in">env</span> list <span class="comment"># 虽然可以通过 poetry env use 的方式来创建新的虚拟环境，但实际上只会有一个环境被保留，所以这里只会显示一个</span></span><br><span class="line">.venv (Activated) <span class="comment"># .venv 表示虚拟环境名称，Activated表示当前虚拟环境已经被激活</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看虚拟环境信息</span></span><br><span class="line">$ poetry <span class="built_in">env</span> info</span><br><span class="line"></span><br><span class="line">Virtualenv</span><br><span class="line">Python:         3.11.3</span><br><span class="line">Implementation: CPython</span><br><span class="line">Path:           /Users/hanqf/Desktop/pythonDir/poetryDir/poetryDemo/.venv</span><br><span class="line">Executable:     /Users/hanqf/Desktop/pythonDir/poetryDir/poetryDemo/.venv/bin/python</span><br><span class="line">Valid:          True</span><br><span class="line"></span><br><span class="line">Base</span><br><span class="line">Platform:   darwin</span><br><span class="line">OS:         posix</span><br><span class="line">Python:     3.11.3</span><br><span class="line">Path:       /Library/Frameworks/Python.framework/Versions/3.11</span><br><span class="line">Executable: /Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11</span><br></pre></td></tr></table></figure><h3 id="依赖包管理">依赖包管理</h3><ul class="lvl-0"><li class="lvl-2"><p>add : 安装依赖包</p></li></ul><blockquote><p>这个命令会修改 pyproject.toml 文件，在 [tool.poetry.dependencies] 部分添加新的依赖项。还会自动更新 poetry.lock 文件，锁定依赖的确切版本。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖，安装后会将依赖信息写入 pyproject.toml 中</span></span><br><span class="line"><span class="comment"># 不指定版本则安装最新版</span></span><br><span class="line">$ poetry add fastapi</span><br><span class="line">Using version ^0.115.5 <span class="keyword">for</span> fastapi</span><br><span class="line"></span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies... (1.3s)</span><br><span class="line"></span><br><span class="line">Package operations: 9 installs, 0 updates, 0 removals</span><br><span class="line"></span><br><span class="line">  - Installing idna (3.10)</span><br><span class="line">  - Installing sniffio (1.3.1)</span><br><span class="line">  - Installing typing-extensions (4.12.2)</span><br><span class="line">  - Installing annotated-types (0.7.0)</span><br><span class="line">  - Installing anyio (4.6.2.post1)</span><br><span class="line">  - Installing pydantic-core (2.23.4)</span><br><span class="line">  - Installing pydantic (2.9.2)</span><br><span class="line">  - Installing starlette (0.41.3)</span><br><span class="line">  - Installing fastapi (0.115.5)</span><br><span class="line"></span><br><span class="line">Writing lock file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定版本号安装依赖</span></span><br><span class="line">poetry add package_name@^1.2.3</span><br><span class="line">    <span class="comment"># 规则说明</span></span><br><span class="line">    ^1.2.3 表示兼容 1.2.3 及更高的小版本，但不包括 2.0.0。    如：poetry add requests@^2.28.0</span><br><span class="line">    ~1.2.3：允许升级到 1.2.x，但不包括 1.3.0。               如：poetry add requests@~2.28.0</span><br><span class="line">    1.2.3：固定为 1.2.3。                                   如：poetry add requests@2.28.0</span><br><span class="line">    &gt;=1.2.3：允许使用 1.2.3 及以上版本。注意zsh下要加上双引号，如：poetry add <span class="string">&quot;requests@&gt;=2.28.0&quot;</span></span><br><span class="line">    &lt;2.0.0：允许使用小于 2.0.0 的版本。 注意zsh下要加上双引号，如：poetry add <span class="string">&quot;requests@&lt;3.0.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到指定的分组，默认都是安装到主环境中的，poetry build默认只会打包主环境的依赖</span></span><br><span class="line">poetry add flask <span class="comment"># 安装到主环境中</span></span><br><span class="line">poetry add flask --group=<span class="built_in">test</span> <span class="comment">#添加分组名 test</span></span><br><span class="line">poetry add flask --dev  <span class="comment">#相当于--group=dev</span></span><br><span class="line"><span class="comment"># 分别执行上面3个安装命令后，输出 pyproject.toml 的内容如下</span></span><br><span class="line">[tool.poetry]</span><br><span class="line">name = <span class="string">&quot;poetrydemo&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">description = <span class="string">&quot;&quot;</span></span><br><span class="line">authors = [<span class="string">&quot;hanqunfeng &lt;hanqf2008@163.com&gt;&quot;</span>]</span><br><span class="line">readme = <span class="string">&quot;README.md&quot;</span></span><br><span class="line"></span><br><span class="line">[tool.poetry.dependencies] <span class="comment"># 主环境</span></span><br><span class="line">python = <span class="string">&quot;^3.11&quot;</span></span><br><span class="line">flask = <span class="string">&quot;^3.1.0&quot;</span></span><br><span class="line"></span><br><span class="line">[tool.poetry.group.test.dependencies] <span class="comment"># test分组依赖</span></span><br><span class="line">flask = <span class="string">&quot;^3.1.0&quot;</span></span><br><span class="line"></span><br><span class="line">[tool.poetry.group.dev.dependencies] <span class="comment"># dev分组依赖</span></span><br><span class="line">flask = <span class="string">&quot;^3.1.0&quot;</span></span><br><span class="line"></span><br><span class="line">[build-system]</span><br><span class="line">requires = [<span class="string">&quot;poetry-core&quot;</span>]</span><br><span class="line">build-backend = <span class="string">&quot;poetry.core.masonry.api&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>show : 查看依赖包</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前项目都需要哪些依赖，这些依赖不一定都安装了，它只是解析 pyproject.toml 中的声明来解析依赖树</span></span><br><span class="line">$ poetry show</span><br><span class="line">annotated-types   0.7.0       Reusable constraint types to use with typing.Annotated</span><br><span class="line">anyio             4.6.2.post1 High level compatibility layer <span class="keyword">for</span> multiple asynchronous ...</span><br><span class="line">fastapi           0.115.5     FastAPI framework, high performance, easy to learn, fast ...</span><br><span class="line">idna              3.10        Internationalized Domain Names <span class="keyword">in</span> Applications (IDNA)</span><br><span class="line">pydantic          2.9.2       Data validation using Python <span class="built_in">type</span> hints</span><br><span class="line">pydantic-core     2.23.4      Core functionality <span class="keyword">for</span> Pydantic validation and serialization</span><br><span class="line">sniffio           1.3.1       Sniff out <span class="built_in">which</span> async library your code is running under</span><br><span class="line">starlette         0.41.3      The little ASGI library that shines.</span><br><span class="line">typing-extensions 4.12.2      Backported and Experimental Type Hints <span class="keyword">for</span> Python 3.8+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只查看顶级依赖，即只查看在 pyproject.toml 中声明的依赖</span></span><br><span class="line">$ poetry show --top-level</span><br><span class="line">fastapi           0.115.5     FastAPI framework, high performance, easy to learn, fast ...</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>remove : 删除依赖包</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除依赖，此时会将当前包及其所有依赖一块删除</span></span><br><span class="line">$ poetry remove fastapi</span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies... (0.1s)</span><br><span class="line"></span><br><span class="line">Package operations: 0 installs, 0 updates, 9 removals</span><br><span class="line"></span><br><span class="line">  - Removing annotated-types (0.7.0)</span><br><span class="line">  - Removing anyio (4.6.2.post1)</span><br><span class="line">  - Removing fastapi (0.115.5)</span><br><span class="line">  - Removing idna (3.10)</span><br><span class="line">  - Removing pydantic (2.9.2)</span><br><span class="line">  - Removing pydantic-core (2.23.4)</span><br><span class="line">  - Removing sniffio (1.3.1)</span><br><span class="line">  - Removing starlette (0.41.3)</span><br><span class="line">  - Removing typing-extensions (4.12.2)</span><br><span class="line"></span><br><span class="line">Writing lock file</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>search : 搜索远程仓库</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索远程仓库</span></span><br><span class="line">$ poetry search fastapi</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>install 和 update : 安装和更新依赖包<br><em><strong>在 Poetry 中，install 和 update 是两个常用的命令，但它们的作用和使用场景不同</strong></em></p><ul class="lvl-2"><li class="lvl-7"><p><code>poetry install</code> 的作用是根据现有的 poetry.lock 文件来安装依赖，确保安装的依赖版本与锁文件中记录的版本完全一致。<br>核心特点：</p><ul class="lvl-4"><li class="lvl-10">安装锁定的版本：它只会安装 poetry.lock 文件中指定的版本，即使 pyproject.toml 文件中定义的版本范围已经有更新版本。</li><li class="lvl-10">重现依赖环境：适用于团队协作或部署环境，确保所有人或机器安装的依赖版本完全相同。</li><li class="lvl-10">锁文件存在时更高效：如果 poetry.lock 文件存在，poetry install 不会重新解析依赖树。</li><li class="lvl-10">首次运行时生成锁文件：如果没有 poetry.lock 文件，poetry install 会解析依赖并生成锁文件。<br>使用场景：</li><li class="lvl-10">新克隆的项目，需要安装依赖环境。</li><li class="lvl-10">部署生产环境，确保依赖版本的稳定性。</li><li class="lvl-10">重新安装之前已定义的依赖（例如清空了虚拟环境）。</li></ul></li><li class="lvl-6"><p><code>poetry update</code> 的作用是根据 pyproject.toml 文件中定义的依赖范围重新解析依赖树，并更新 poetry.lock 文件为最新的版本。<br>核心特点：</p><ul class="lvl-4"><li class="lvl-10">更新到最新版本：它会尝试安装依赖范围内的最新版本，并更新 poetry.lock 文件。</li><li class="lvl-10">解析新的依赖树：即使 poetry.lock 文件存在，poetry update 也会忽略它并重新解析依赖。</li><li class="lvl-10">更改锁文件：它会覆盖现有的 poetry.lock 文件，因此团队其他成员需要重新运行 poetry install 以同步。<br>使用场景：</li><li class="lvl-10">更新依赖到最新版本（在依赖范围内）。</li><li class="lvl-10">当添加新依赖后，想要安装并更新锁文件。</li><li class="lvl-10">修复可能的版本冲突或不兼容问题。</li></ul></li></ul></li></ul><h3 id="lock-锁定依赖包">lock : 锁定依赖包</h3><ul class="lvl-0"><li class="lvl-2"><p><code>poetry lock</code> 是 Poetry（一个 Python 包管理工具）中的一个命令，用于锁定项目的依赖关系。使用这个命令可以创建或更新 <code>poetry.lock</code> 文件，确保你的项目中所使用的每个包的版本都被明确记录下来。这样做对于项目的可复现性和稳定性至关重要。</p></li><li class="lvl-2"><p>实际上，当运行 <code>poetry install</code> 、 <code>poetry update</code> 或者 <code>poetry add</code> 等命令时， poetry 都会根据<br><code>pyproject.toml</code> 文件中的依赖范围，解析依赖树，并在项目目录下创建或更新 <code>poetry.lock</code> 文件。</p></li><li class="lvl-2"><p>当我们手工修改了 <code>pyproject.toml</code> 文件中的依赖范围，此时又不想立刻更新依赖，而是希望在某个时机再更新，此时就可以使用 <code>poetry lock</code> 命令，先锁定这些依赖，之后再通过 <code>poetry install</code> 命令安装。</p></li><li class="lvl-2"><p>可以使用 <code>poetry check</code> 命令检查 <code>pyproject.toml</code> 文件 与 <code>poetry.lock</code> 文件的一致性。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如我手工删除了 `pyproject.toml` 文件中的某个依赖</span></span><br><span class="line"><span class="comment"># 此时运行 check 检查一致性会报错</span></span><br><span class="line">$ poetry check</span><br><span class="line">Error: pyproject.toml changed significantly since poetry.lock was last generated. Run `poetry lock [--no-update]` to fix the lock file.</span><br><span class="line"><span class="comment"># 锁定依赖</span></span><br><span class="line">$ poetry lock</span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies... (0.1s)</span><br><span class="line"></span><br><span class="line">Writing lock file</span><br><span class="line"><span class="comment"># 检查一致性通过</span></span><br><span class="line">$ poetry check</span><br><span class="line">All <span class="built_in">set</span>!</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em></p><ul class="lvl-1"><li class="lvl-2">注意，此时通过 <code>poetry show</code> 查看不到那个手工删除的依赖包，但实际上依赖依旧在于虚拟环境中</li><li class="lvl-2">所以尽量避免手工删除依赖，而是通过 <code>poetry remove</code> 命令来删除依赖</li></ul></div><h3 id="source-镜像源管理">source : 镜像源管理</h3><ul class="lvl-0"><li class="lvl-2"><p>默认情况下都是从Pypi的官方仓库下载，国内一般需要指定镜像源来加速下载</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加镜像源，默认就是主要源，注意该方式只对当前项目有效</span></span><br><span class="line"><span class="comment"># 命令格式：poetry source add [选项] [--] &lt;name&gt; [&lt;url&gt;]，name：源仓库的名称，url：源仓库的 URL</span></span><br><span class="line">$ poetry <span class="built_in">source</span> add tsinghua https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Adding <span class="built_in">source</span> with name tsinghua.</span><br><span class="line"></span><br><span class="line"><span class="comment"># --priority=PRIORITY设置此源的优先级。可以是以下值之一：default（默认）、primary（主要）、supplemental（备用）、explicit（显式源，只有当包明确声明使用该源时才会被使用）。默认为 primary。</span></span><br><span class="line">$ poetry <span class="built_in">source</span> add  --priority=supplemental aliyun http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像源信息</span></span><br><span class="line">$ poetry <span class="built_in">source</span> show</span><br><span class="line"> name      : tsinghua</span><br><span class="line"> url       : https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"> priority  : primary</span><br><span class="line"></span><br><span class="line"> name      : aliyun</span><br><span class="line"> url       : http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"> priority  : supplemental</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时查看 pyproject.toml 文件可以看到镜像源信息</span></span><br><span class="line">[[tool.poetry.source]]</span><br><span class="line">name = <span class="string">&quot;tsinghua&quot;</span></span><br><span class="line">url = <span class="string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span></span><br><span class="line">priority = <span class="string">&quot;primary&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[tool.poetry.source]]</span><br><span class="line">name = <span class="string">&quot;aliyun&quot;</span></span><br><span class="line">url = <span class="string">&quot;http://mirrors.aliyun.com/pypi/simple/&quot;</span></span><br><span class="line">priority = <span class="string">&quot;supplemental&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除镜像源</span></span><br><span class="line">$ poetry <span class="built_in">source</span> remove aliyun <span class="comment"># 指定镜像源名称</span></span><br><span class="line">Removing <span class="built_in">source</span> with name aliyun.</span><br></pre></td></tr></table></figure><h3 id="运行">运行</h3><p>这里以一个小示例来说明这个功能</p><ul class="lvl-0"><li class="lvl-2"><p>创建一个新的项目</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ poetry new poetryDemo</span><br><span class="line">Created package poetrydemo <span class="keyword">in</span> poetryDemo</span><br><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line">$ <span class="built_in">cd</span> poetryDemo</span><br><span class="line"><span class="comment"># 查看生成的文件</span></span><br><span class="line">$ ll</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x  6 hanqf  staff  192 11 21 17:32 .</span><br><span class="line">drwxr-xr-x  4 hanqf  staff  128 11 21 17:32 ..</span><br><span class="line">-rw-r--r--  1 hanqf  staff    0 11 21 17:32 README.md</span><br><span class="line">drwxr-xr-x  3 hanqf  staff   96 11 21 17:32 poetrydemo</span><br><span class="line">-rw-r--r--  1 hanqf  staff  266 11 21 17:32 pyproject.toml</span><br><span class="line">drwxr-xr-x  3 hanqf  staff   96 11 21 17:32 tests</span><br><span class="line"><span class="comment"># 进入包目录</span></span><br><span class="line">$ <span class="built_in">cd</span> poetrydemo</span><br><span class="line"><span class="comment"># 查看包目录下的文件</span></span><br><span class="line">$ ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  3 hanqf  staff   96 11 21 17:32 .</span><br><span class="line">drwxr-xr-x  6 hanqf  staff  192 11 21 17:32 ..</span><br><span class="line">-rw-r--r--  1 hanqf  staff    0 11 21 17:32 __init__.py</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在包目录下创建 array_util.py，内容如下</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">def generate_random_array(shape, distribution=<span class="string">&quot;uniform&quot;</span>, params=None, seed=None):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    生成随机数组的工具方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param shape: tuple，指定数组的形状，例如 (3, 4) 表示 3 行 4 列。</span></span><br><span class="line"><span class="string">    :param distribution: str，指定随机数分布类型，可选值：</span></span><br><span class="line"><span class="string">        - &quot;</span>uniform<span class="string">&quot;：均匀分布（默认）。</span></span><br><span class="line"><span class="string">        - &quot;</span>normal<span class="string">&quot;：正态分布。</span></span><br><span class="line"><span class="string">        - &quot;</span><span class="built_in">integer</span><span class="string">&quot;：随机整数。</span></span><br><span class="line"><span class="string">    :param params: dict，分布的参数配置：</span></span><br><span class="line"><span class="string">        - 均匀分布：&#123;&quot;</span>low<span class="string">&quot;: 最小值, &quot;</span>high<span class="string">&quot;: 最大值&#125;，默认 low=0, high=1。</span></span><br><span class="line"><span class="string">        - 正态分布：&#123;&quot;</span>mean<span class="string">&quot;: 均值, &quot;</span>std<span class="string">&quot;: 标准差&#125;，默认 mean=0, std=1。</span></span><br><span class="line"><span class="string">        - 随机整数：&#123;&quot;</span>low<span class="string">&quot;: 最小值, &quot;</span>high<span class="string">&quot;: 最大值, &quot;</span>dtype<span class="string">&quot;: 类型&#125;，默认 low=0, high=10。</span></span><br><span class="line"><span class="string">    :param seed: int，随机数种子（可选），用于结果可复现。</span></span><br><span class="line"><span class="string">    :return: np.ndarray，生成的随机数组。</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> seed is not None:</span><br><span class="line">        np.random.seed(seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> params is None:</span><br><span class="line">        params = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> distribution == <span class="string">&quot;uniform&quot;</span>:</span><br><span class="line">        low = params.get(<span class="string">&quot;low&quot;</span>, 0)</span><br><span class="line">        high = params.get(<span class="string">&quot;high&quot;</span>, 1)</span><br><span class="line">        <span class="built_in">return</span> np.random.uniform(low, high, size=shape)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> distribution == <span class="string">&quot;normal&quot;</span>:</span><br><span class="line">        mean = params.get(<span class="string">&quot;mean&quot;</span>, 0)</span><br><span class="line">        std = params.get(<span class="string">&quot;std&quot;</span>, 1)</span><br><span class="line">        <span class="built_in">return</span> np.random.normal(mean, std, size=shape)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> distribution == <span class="string">&quot;integer&quot;</span>:</span><br><span class="line">        low = params.get(<span class="string">&quot;low&quot;</span>, 0)</span><br><span class="line">        high = params.get(<span class="string">&quot;high&quot;</span>, 10)</span><br><span class="line">        dtype = params.get(<span class="string">&quot;dtype&quot;</span>, int)</span><br><span class="line">        <span class="built_in">return</span> np.random.randint(low, high, size=shape, dtype=dtype)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        raise ValueError(<span class="string">&quot;不支持的分布类型！可选值为 &#x27;uniform&#x27;, &#x27;normal&#x27;, &#x27;integer&#x27;。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    array_uniform = generate_random_array((<span class="number">3</span>, <span class="number">4</span>), distribution=&quot;uniform&quot;, params=&#123;&quot;low&quot;: <span class="number">1</span>, &quot;high&quot;: <span class="number">10</span>&#125;)</span><br><span class="line">    array_normal = generate_random_array((<span class="number">2</span>, <span class="number">3</span>), distribution=&quot;normal&quot;, params=&#123;&quot;mean&quot;: <span class="number">0</span>, &quot;std&quot;: <span class="number">1</span>&#125;, seed=<span class="number">42</span>)</span><br><span class="line">    array_integer = generate_random_array((<span class="number">4</span>, <span class="number">5</span>), distribution=&quot;integer&quot;, params=&#123;&quot;low&quot;: <span class="number">0</span>, &quot;high&quot;: <span class="number">20</span>&#125;)</span><br><span class="line"></span><br><span class="line">    print(&quot;均匀分布随机数组：\n&quot;, array_uniform)</span><br><span class="line">    print(&quot;正态分布随机数组：\n&quot;, array_normal)</span><br><span class="line">    print(&quot;随机整数数组：\n&quot;, array_integer)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装依赖</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ poetry add numpy</span><br><span class="line">Using version ^2.1.3 <span class="keyword">for</span> numpy</span><br><span class="line"></span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies... (1.1s)</span><br><span class="line"></span><br><span class="line">Package operations: 1 install, 0 updates, 0 removals</span><br><span class="line"></span><br><span class="line">  - Installing numpy (2.1.3)</span><br><span class="line"></span><br><span class="line">Writing lock file</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>运行，两种方法</p><ul class="lvl-2"><li class="lvl-6"><code>poetry run</code></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ poetry run python array_util.py</span><br><span class="line">均匀分布随机数组：</span><br><span class="line">[[7.44623063 1.89415788 4.81008329 4.25556572]</span><br><span class="line">[3.31925154 6.44037063 5.3216543  7.54950573]</span><br><span class="line">[3.97160747 5.04800698 3.28299934 3.42841887]]</span><br><span class="line">正态分布随机数组：</span><br><span class="line">[[ 0.49671415 -0.1382643   0.64768854]</span><br><span class="line">[ 1.52302986 -0.23415337 -0.23413696]]</span><br><span class="line">随机整数数组：</span><br><span class="line">[[10 10  3  7  2]</span><br><span class="line">[ 1 11  5  1  0]</span><br><span class="line">[11 11 16  9 15]</span><br><span class="line">[14 14 18 11 19]]</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><code>poetry shell</code> : 此时会开启一个新的shell，并开启虚拟环境</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启虚拟环境</span></span><br><span class="line">$ poetry shell</span><br><span class="line">Spawning shell within /Users/hanqf/Library/Caches/pypoetry/virtualenvs/poetrydemo-fyqYbfje-py3.11</span><br><span class="line">Restored session: 2024年11月21日 星期四 15时31分52秒 CST</span><br><span class="line">➜  poetrydemo <span class="built_in">emulate</span> bash -c <span class="string">&#x27;. /Users/hanqf/Library/Caches/pypoetry/virtualenvs/poetrydemo-fyqYbfje-py3.11/bin/activate&#x27;</span></span><br><span class="line"><span class="comment"># 在虚拟环境下运行</span></span><br><span class="line">$ python array_util.py</span><br></pre></td></tr></table></figure></li></ul><h3 id="打包和发布">打包和发布</h3><ul class="lvl-0"><li class="lvl-2"><p>接着上面的项目</p></li><li class="lvl-2"><p>打包</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会在项目目录下创建 dist 目录，并将打好的包存放于此</span></span><br><span class="line">$ poetry build</span><br><span class="line">Building poetrydemo (0.1.0)</span><br><span class="line">  - Building sdist</span><br><span class="line">  - Built poetrydemo-0.1.0.tar.gz</span><br><span class="line">  - Building wheel</span><br><span class="line">  - Built poetrydemo-0.1.0-py3-none-any.whl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看生成的打包文件</span></span><br><span class="line">$ exa -1 dist</span><br><span class="line">hqf_poetrydemo-0.1.0-py3-none-any.whl</span><br><span class="line">hqf_poetrydemo-0.1.0.tar.gz</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>发布</p></li><li class="lvl-2"><p>首先要先在<a href="https://pypi.org/">PyPI</a>上注册个帐号，需要开启“双要素身份验证 （2FA）”，否则不能获取发布时的API令牌。</p></li><li class="lvl-2"><p>获取API令牌<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/iShot_2024-11-21_18.00.50.png" alt=""></p></li><li class="lvl-2"><p>发布，不过这次发布提示包名已经存在了</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发布时提示包名已经存在了</span></span><br><span class="line">$ poetry publish -u __token__  -p pypi-AgEIcHlwaS5vcmcCJDU0Y2Q5NjhkLWYyYTEtN</span><br><span class="line">Publishing poetrydemo (0.1.0) to PyPI</span><br><span class="line"> - Uploading poetrydemo-0.1.0-py3-none-any.whl FAILED</span><br><span class="line"></span><br><span class="line">HTTP Error 400: The name <span class="string">&#x27;poetrydemo&#x27;</span> is too similar to an existing project. See https://pypi.org/help/#project-name <span class="keyword">for</span> more information. | b<span class="string">&quot;&lt;html&gt;\n &lt;head&gt;\n  &lt;title&gt;400 The name &#x27;poetrydemo&#x27; is too similar to an existing project. See https://pypi.org/help/#project-name for more information.\n \n &lt;body&gt;\n  &lt;h1&gt;400 The name &#x27;poetrydemo&#x27; is too similar to an existing project. See https://pypi.org/help/#project-name for more information.\n  The server could not comply with the request since it is either malformed or otherwise incorrect.&lt;br/&gt;&lt;br/&gt;\nThe name &amp;#x27;poetrydemo&amp;#x27; is too similar to an existing project. See https://pypi.org/help/#project-name for more information.\n\n\n \n&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>先修改包名，直接编辑 pyproject.toml 即可，将name属性修改为“hqf_poetrydemo”，然后将包目录的名称也修改为这个<code>mv poetrydemo hqf_poetrydemo</code>，并删除dist目录，之后重新打包<code>poetry build</code>，再次发布</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ vim pyproject.toml <span class="comment"># 将name属性修改为“hqf_poetrydemo”</span></span><br><span class="line">$ <span class="built_in">mv</span> poetrydemo hqf_poetrydemo <span class="comment"># 将包目录的名称也修改为这个</span></span><br><span class="line">$ <span class="built_in">rm</span> -rf dist <span class="comment"># 删除dist目录</span></span><br><span class="line">$ poetry build    <span class="comment"># 重新打包</span></span><br><span class="line">Creating virtualenv hqf-poetrydemo-fyqYbfje-py3.11 <span class="keyword">in</span> /Users/hanqf/Library/Caches/pypoetry/virtualenvs</span><br><span class="line">Building hqf_poetrydemo (0.1.0)</span><br><span class="line">  - Building sdist</span><br><span class="line">  - Built hqf_poetrydemo-0.1.0.tar.gz</span><br><span class="line">  - Building wheel</span><br><span class="line">  - Built hqf_poetrydemo-0.1.0-py3-none-any.whl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次发布</span></span><br><span class="line">$ poetry publish -u __token__  -p pypi-AgEIcHlwaS5vcmcCJDU0Y2Q5NjhkLWYyYTEtN</span><br><span class="line"></span><br><span class="line">Publishing hqf_poetrydemo (0.1.0) to PyPI</span><br><span class="line"> - Uploading hqf_poetrydemo-0.1.0-py3-none-any.whl 100%</span><br><span class="line"> - Uploading hqf_poetrydemo-0.1.0.tar.gz 100%</span><br></pre></td></tr></table></figure><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/iShot_2024-11-21_18.13.21.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>之后就可以在其它项目中安装这个包了</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install</span></span><br><span class="line">$ pip install hqf_poetrydemo</span><br><span class="line"></span><br><span class="line"><span class="comment"># poetry add</span></span><br><span class="line">$ poetry add hqf_poetrydemo</span><br><span class="line">Using version ^0.1.0 <span class="keyword">for</span> hqf-poetrydemo</span><br><span class="line"></span><br><span class="line">Updating dependencies</span><br><span class="line">Resolving dependencies... (0.5s)</span><br><span class="line"></span><br><span class="line">Package operations: 2 installs, 0 updates, 0 removals</span><br><span class="line"></span><br><span class="line">  - Installing numpy (2.1.3)</span><br><span class="line">  - Installing hqf-poetrydemo (0.1.0)</span><br><span class="line"></span><br><span class="line">Writing lock file</span><br></pre></td></tr></table></figure><h3 id="self-update-升级-poetry-版本"><code>self update</code> : 升级 poetry 版本</h3><ul class="lvl-0"><li class="lvl-2"><p>self 相关命令主要用于 poetry 自身安装插件使用</p></li><li class="lvl-2"><p>估计插件功能目前还不成熟，官网也没有进行详细的说明，并且 windows 下无法使用，所以这里不讨论。</p></li><li class="lvl-2"><p><code>self</code>命令下目前只需要记住一个命令： <code>self update</code> : 升级 poetry 版本</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry self update</span><br></pre></td></tr></table></figure><h3 id="debug-resolve-查看包的依赖关系"><code>debug resolve</code> : 查看包的依赖关系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只查看，不安装</span></span><br><span class="line">$ poetry debug resolve requests</span><br><span class="line">Resolving dependencies... (0.4s)</span><br><span class="line"></span><br><span class="line">Resolution results:</span><br><span class="line"></span><br><span class="line">certifi            2024.8.30</span><br><span class="line">charset-normalizer 3.4.0</span><br><span class="line">idna               3.10</span><br><span class="line">urllib3            2.2.3</span><br><span class="line">requests           2.32.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定版本的依赖关系</span></span><br><span class="line">$ poetry debug resolve requests@2.32.3</span><br></pre></td></tr></table></figure><h3 id="cache-缓存管理">cache : 缓存管理</h3><ul class="lvl-0"><li class="lvl-2"><p>poetry一个很重要的功能就是缓存安装包，可以 <code>减少</code> 相同的安装包被重复下载。为什么是减少而不是避免呢？因为不同的镜像源的包是分别缓存的。</p></li><li class="lvl-2"><p>通过 <code>poetry config --list </code> 可以看到 <code>cache-dir</code> 的地址，这里就是缓存下载包的目录。</p></li><li class="lvl-2"><p>以下是一些常见的使用场景</p><ul class="lvl-2"><li class="lvl-6">解决依赖安装问题：<br>如果你在安装或更新依赖时遇到问题（例如，某个包无法正确安装或版本不对），清空缓存可以帮助你确保 Poetry 重新下载所有必要的文件，从而解决问题。</li><li class="lvl-6">清理磁盘空间：<br>如果你的项目很多或者经常修改依赖项，缓存可能会变得非常大。使用 poetry cache clear 可以帮助释放磁盘空间，特别是当你不经常使用某些包时。</li><li class="lvl-6">测试最新版本的依赖：<br>如果你想测试某个包的新版本是否解决了某个问题，或者想确保你使用的确实是最新的版本，清除缓存可以强制 Poetry 从远程仓库重新下载最新的包。</li><li class="lvl-6">环境变化：<br>如果你的开发或生产环境发生了变化（例如，切换了操作系统、更新了 Python 版本等），清除缓存可以帮助你确保依赖项在新环境中正确安装。</li><li class="lvl-6">调试依赖问题：<br>在调试依赖项问题时，有时候清除缓存可以帮助你确定问题是否与缓存中的旧版本有关。</li><li class="lvl-6">CI/CD 环境的一致性：<br>在持续集成或持续部署 (CI/CD) 环境中，为了确保每次构建都基于最新的依赖，有时会在构建脚本中包含清除缓存的步骤。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看缓存列表，这里会按镜像源进行分组</span></span><br><span class="line">$ poetry cache list</span><br><span class="line">PyPI</span><br><span class="line">_default_cache</span><br><span class="line">tsinghua</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除指定源的全部缓存</span></span><br><span class="line">$ poetry cache clear pypi --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除指定源下某个包的缓存</span></span><br><span class="line">$ poetry cache clear pypi:requests:2.24.0</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;&lt;a href=&quot;https://python-poetry.org/docs/&quot;&gt;Poetry&lt;/a&gt;是一个轻量级的python包管理器，其目标是帮助开发者快速、轻松地构建、发布和分享python包。说它轻量，是与 &lt;a href=&quot;https://docs.conda.io/projects/conda/en/stable/&quot;&gt;conda&lt;/a&gt; 相比 poetry 更轻量，同时与 &lt;code&gt;venv + pip&lt;/code&gt; &lt;a href=&quot;/2018/04/28/python_virtualenv/&quot; title=&quot;Python--virtualenv&quot;&gt;Python--virtualenv&lt;/a&gt; 的方式相比具有如下优点：
&lt;ul class=&quot;lvl-2&quot;&gt;
&lt;li class=&quot;lvl-6&quot;&gt;使用缓存机制，避免重复下载依赖包&lt;/li&gt;
&lt;li class=&quot;lvl-6&quot;&gt;包管理上更加精确，删除不需要的包时会同时删除与其关联的且没有被使用的那些依赖包，避免无用的依赖包造成打包体积过大&lt;/li&gt;
&lt;li class=&quot;lvl-6&quot;&gt;打包和发布更加简单，只需要一个命令就可以打包和发布&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="https://blog.hanqunfeng.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pip--CERTIFICATE_VERIFY_FAILED</title>
    <link href="https://blog.hanqunfeng.com/2024/11/18/python_pip/"/>
    <id>https://blog.hanqunfeng.com/2024/11/18/python_pip/</id>
    <published>2024-11-18T15:33:15.000Z</published>
    <updated>2024-12-05T03:41:10.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2">测试环境：macOS 13.7.1，Python 3.11.3</li><li class="lvl-2">今天将<code>pip</code>升级(<code>pip install --upgrade pip</code>)到<code>24.3.1</code>版本后，通过<code>pip install</code>命令安装依赖时会报错，比如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install certifi</span><br><span class="line">Could not fetch URL https://pypi.org/simple/certifi/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host=<span class="string">&#x27;pypi.org&#x27;</span>, port=443): Max retries exceeded with url: /simple/certifi/ (Caused by SSLError(SSLCertVerificationError(1, <span class="string">&#x27;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1002)&#x27;</span>))) - skipping</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2">很奇怪，从<code>pip</code>自己的网站上下载依赖都会出现证书无法验证的错误。测试了一下，该问题只在macOS上遇到，其他平台没有遇到过。</li><li class="lvl-2">先说结论，推荐使用第五种方法。</li></ul><span id="more"></span><h2 id="解决方法">解决方法</h2><h3 id="1-trusted-host-忽略证书验证">1. <code>--trusted-host</code>: 忽略证书验证</h3><ul class="lvl-0"><li class="lvl-2"><p>指定信任的证书域名，从而不进行验证证书，可以指定多个</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install certifi --trusted-host pypi.org --trusted-host files.pythonhosted.org</span><br></pre></td></tr></table></figure><h3 id="2-cert-指定证书文件">2. <code>--cert</code>: 指定证书文件</h3><ul class="lvl-0"><li class="lvl-2"><p>此时需要先下载证书文件，用Chrome浏览器打开<a href="https://pypi.org">https://pypi.org</a>，按如下步骤导出证书文件<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/tMocyD.png" alt="" width="300" height="300"><br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/uS4W2W.png" alt="" width="300" height="300"><br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/OiZf9R.png" alt="" width="400" height="500"><br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/JHw2ML.png" alt="" width="400" height="300"></p></li><li class="lvl-2"><p>然后再执行如下命令进行安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install certifi --cert ~/Downloads/GlobalSign.pem</span><br></pre></td></tr></table></figure><h3 id="3-pip-conf-配置全局证书文件">3. <code>pip.conf</code>: 配置全局证书文件</h3><ul class="lvl-0"><li class="lvl-2"><p>还是需要先下载证书文件，参考上面方法</p></li><li class="lvl-2"><p><code>pip</code> 的配置文件位置因操作系统而异。可以通过以下命令找到配置文件路径：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我使用的是 macOS</span></span><br><span class="line">$ pip config -v list</span><br><span class="line">For variant <span class="string">&#x27;global&#x27;</span>, will try loading <span class="string">&#x27;/Library/Application Support/pip/pip.conf&#x27;</span></span><br><span class="line">For variant <span class="string">&#x27;user&#x27;</span>, will try loading <span class="string">&#x27;/Users/hanqf/.pip/pip.conf&#x27;</span></span><br><span class="line">For variant <span class="string">&#x27;user&#x27;</span>, will try loading <span class="string">&#x27;/Users/hanqf/.config/pip/pip.conf&#x27;</span></span><br><span class="line">For variant <span class="string">&#x27;site&#x27;</span>, will try loading <span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.11/pip.conf&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>pip</code>会从上面的路径中查找配置信息，我这里选择第二个，如果不存在就创建<code>~/.pip/pip.conf</code>文件，内容如下：</p></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">cert</span> = ~/Downloads/GlobalSign.pem</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置好后可以通过如下命令查看配置信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip config list</span><br><span class="line">global.cert=<span class="string">&#x27;~/.pip/GlobalSign.pem&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>然后再执行如下命令进行安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install certifi</span><br></pre></td></tr></table></figure><h3 id="4-将证书添加到系统信任的证书存储">4.将证书添加到系统信任的证书存储</h3><h4 id="对于-macOS：">对于 macOS：</h4><div class="danger"><p><em><strong>我设置后依旧报错，暂不清楚原因</strong></em></p></div><ul class="lvl-0"><li class="lvl-2"><p>打开 <code>钥匙串访问</code> 应用程序，并选择 <code>系统钥匙串</code> 中的 <code>系统</code> (从网上查询说是要加入<code>系统根证书</code>，但是我没有加入成功)</p></li><li class="lvl-2"><p><code>文件</code> 》<code>导入项目</code> 》 <code>选择证书文件</code></p></li><li class="lvl-2"><p>会提示你输入密码，如果证书不受信任，可以将证书设置为为始终信任该证书 (双击证书 》 信任 》 使用此证书时 》设置为<code>始终信任</code>)。</p></li></ul><h3 id="5-使用-Python-官方推荐的证书修复工具-（推荐）">5.使用 Python 官方推荐的证书修复工具 （推荐）</h3><ul class="lvl-0"><li class="lvl-2"><p>这个方法最简单</p></li><li class="lvl-2"><p>运行这个脚本前需要先安装 <code>certifi</code>，其主要用于提供权威的CA根证书列表</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install certifi --trusted-host pypi.org --trusted-host files.pythonhosted.org</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>运行证书安装脚本（适用于 macOS 内置的 Python）</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首次运行依旧会报错，但实际上已经进行了修复，主要就是最后4步进行的操作</span></span><br><span class="line"><span class="comment"># 注意替换你自己的Python版本号</span></span><br><span class="line">$ /Applications/Python\ 3.11/Install\ Certificates.<span class="built_in">command</span></span><br><span class="line"></span><br><span class="line"> -- pip install --upgrade certifi</span><br><span class="line">Requirement already satisfied: certifi <span class="keyword">in</span> /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages (2024.8.30)</span><br><span class="line">WARNING: Retrying (Retry(total=4, connect=None, <span class="built_in">read</span>=None, redirect=None, status=None)) after connection broken by <span class="string">&#x27;SSLError(SSLCertVerificationError(1, &#x27;</span>[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="built_in">local</span> issuer certificate (_ssl.c:1002)<span class="string">&#x27;))&#x27;</span>: /simple/certifi/</span><br><span class="line">WARNING: Retrying (Retry(total=3, connect=None, <span class="built_in">read</span>=None, redirect=None, status=None)) after connection broken by <span class="string">&#x27;SSLError(SSLCertVerificationError(1, &#x27;</span>[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="built_in">local</span> issuer certificate (_ssl.c:1002)<span class="string">&#x27;))&#x27;</span>: /simple/certifi/</span><br><span class="line">WARNING: Retrying (Retry(total=2, connect=None, <span class="built_in">read</span>=None, redirect=None, status=None)) after connection broken by <span class="string">&#x27;SSLError(SSLCertVerificationError(1, &#x27;</span>[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="built_in">local</span> issuer certificate (_ssl.c:1002)<span class="string">&#x27;))&#x27;</span>: /simple/certifi/</span><br><span class="line">WARNING: Retrying (Retry(total=1, connect=None, <span class="built_in">read</span>=None, redirect=None, status=None)) after connection broken by <span class="string">&#x27;SSLError(SSLCertVerificationError(1, &#x27;</span>[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="built_in">local</span> issuer certificate (_ssl.c:1002)<span class="string">&#x27;))&#x27;</span>: /simple/certifi/</span><br><span class="line">WARNING: Retrying (Retry(total=0, connect=None, <span class="built_in">read</span>=None, redirect=None, status=None)) after connection broken by <span class="string">&#x27;SSLError(SSLCertVerificationError(1, &#x27;</span>[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get <span class="built_in">local</span> issuer certificate (_ssl.c:1002)<span class="string">&#x27;))&#x27;</span>: /simple/certifi/</span><br><span class="line">Could not fetch URL https://pypi.org/simple/certifi/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host=<span class="string">&#x27;pypi.org&#x27;</span>, port=443): Max retries exceeded with url: /simple/certifi/ (Caused by SSLError(SSLCertVerificationError(1, <span class="string">&#x27;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1002)&#x27;</span>))) - skipping</span><br><span class="line"> -- removing any existing file or <span class="built_in">link</span></span><br><span class="line"> -- creating symlink to certifi certificate bundle</span><br><span class="line"> -- setting permissions</span><br><span class="line"> -- update complete</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>之后再运行<code>pip install</code>命令，就不会报错了</p></li></ul><h3 id="6-使用其它镜像源">6.使用其它镜像源</h3><ul class="lvl-0"><li class="lvl-2"><p>该问题是因为Pypi软件仓库官网的证书文件存在问题导致的，只要我们不从官网下载就不会有问题。</p></li><li class="lvl-2"><p>在国内为了加速下载我们一般会使用国内的镜像源，例如<a href="https://developer.aliyun.com/mirror/pypi">阿里云的Pypi镜像源</a>或者<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">清华大学的Pypi镜像源</a>，具体使用方法参考各自的官网说明即可。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;测试环境：macOS 13.7.1，Python 3.11.3&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;今天将&lt;code&gt;pip&lt;/code&gt;升级(&lt;code&gt;pip install --upgrade pip&lt;/code&gt;)到&lt;code&gt;24.3.1&lt;/code&gt;版本后，通过&lt;code&gt;pip install&lt;/code&gt;命令安装依赖时会报错，比如：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pip install certifi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Could not fetch URL https://pypi.org/simple/certifi/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host=&lt;span class=&quot;string&quot;&gt;&amp;#x27;pypi.org&amp;#x27;&lt;/span&gt;, port=443): Max retries exceeded with url: /simple/certifi/ (Caused by SSLError(SSLCertVerificationError(1, &lt;span class=&quot;string&quot;&gt;&amp;#x27;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1002)&amp;#x27;&lt;/span&gt;))) - skipping&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;很奇怪，从&lt;code&gt;pip&lt;/code&gt;自己的网站上下载依赖都会出现证书无法验证的错误。测试了一下，该问题只在macOS上遇到，其他平台没有遇到过。&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;先说结论，推荐使用第五种方法。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="https://blog.hanqunfeng.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT -- 数学公式</title>
    <link href="https://blog.hanqunfeng.com/2024/11/12/mathjax-demo/"/>
    <id>https://blog.hanqunfeng.com/2024/11/12/mathjax-demo/</id>
    <published>2024-11-12T13:55:05.000Z</published>
    <updated>2024-11-18T02:08:19.229Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %--><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>Hexo是基于markdown的，所以可以使用LaTex语法来编写数学公式，只不过需要安装相应的公式渲染插件来实现。</p></li><li class="lvl-2"><p>Next主题 支持的公式插件为<code>MathJax</code>和<code>KaTeX</code>，它们都支持LaTex语法，参考: <a href="https://theme-next.js.org/docs/third-party-services/math-equations">https://theme-next.js.org/docs/third-party-services/math-equations</a></p></li><li class="lvl-2"><p>本文使用的是<a href="https://katex.org/docs/supported">Katex</a>，原因是我已经使用了<a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a>渲染器，其与 mathjax 的 <a href="https://github.com/hexojs/hexo-renderer-pandoc">hexo-renderer-pandoc</a>渲染器不能并存，所以只能选<code>Katex</code>了。</p></li></ul><span id="more"></span><h2 id="安装">安装</h2><ul class="lvl-0"><li class="lvl-2"><p>详细的安装方法请参考:<a href="https://theme-next.js.org/docs/third-party-services/math-equations">Math Equations</a></p></li><li class="lvl-2"><p>因为已经使用了<a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a>渲染器，所以这里就没有使用<a href="https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus">hexo-renderer-markdown-it-plus</a>渲染器，其实两者也没有太大的区别，只不过后者默认就加载了一些插件，而前者需要自己安装插件并配置才可以使用。</p></li><li class="lvl-2"><p>但是测试时发现，按照官网的配置<code>hexo-renderer-markdown-it</code> + <code>markdown-it-katex</code> 的方式并不能很好的进行公式的渲染，所以这里参考了 <code>hexo-renderer-markdown-it-plus</code> 渲染器，将其更换为<a href="https://github.com/iktakahiro/markdown-it-katex#readme">@iktakahiro/markdown-it-katex</a>。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @iktakahiro/markdown-it-katex --save</span><br></pre></td></tr></table></figure><p>在<code>_config.yml</code>配置上该插件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config of hexo-renderer-markdown-it</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="comment"># katex公式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;@iktakahiro/markdown-it-katex&quot;</span></span><br></pre></td></tr></table></figure><h2 id="安装后遇到的问题">安装后遇到的问题</h2><h3 id="1-安装后发现通过hexo编译时会报类似如下警告">1.安装后发现通过hexo编译时会报类似如下警告</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LaTeX-incompatible input and strict mode is set to &#x27;warn&#x27;: Unicode text character &quot;即&quot; used in math mode [unicodeTextInMathMode]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>原因是<code>@iktakahiro/markdown-it-katex</code>插件默认开启的是严格模式，不能在<code>$$...$$</code>或<code>$...$</code>中包含中文，虽然我设置的是<code>math -- every_page: false</code>，但其在编译阶段依旧会检查所有的页面，不过报这个警告并不会有什么影响，所以可以忽略。</p></li><li class="lvl-2"><p>如果不希望看到这个警告，可以为 <code>@iktakahiro/markdown-it-katex</code> 添加模式的控制行为</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config of hexo-renderer-markdown-it</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="comment"># katex公式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;@iktakahiro/markdown-it-katex&quot;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">         <span class="attr">strict:</span> <span class="string">error</span> <span class="comment"># 默认为warn，这里设置为error，只有当解析器遇到不支持的公式时才报错，也可以设置为 false，表示不检查</span></span><br></pre></td></tr></table></figure><h3 id="不支持Katex的Auto-render-Extension">不支持<code>Katex</code>的<code>Auto-render Extension</code></h3><ul class="lvl-0"><li class="lvl-2"><p>通过查看<code>Katex</code>官网可以知道，开启<a href="https://katex.org/docs/autorender">Auto-render Extension</a>后，<code>Katex</code>可以渲染更多的公式语法，但要注意这并不是<code>LaTex</code>的标准语法</p></li><li class="lvl-2"><p>但是<code>@iktakahiro/markdown-it-katex</code>中并没有相应的配置，为了解决这个问题，简单的方法就是将所需要的资源添加到页面中，比如我在<code>source\_data\post-body-start.njk</code>中添加了如下内容</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if page.mathjax %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-nB0miv6/jRmo5UMMR1wu3Gz6NLsoTkbqJghGIsx//Rlm+ZU03BU6SQNC66uf4l5+&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-7zkQWkzuo3B5mTepMUcHkMB5jZaolc2xDwL6VFqjFALcbeS9Ggm/Yr2r3Dy4lfFg&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/contrib/auto-render.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-43gviWU0YVjaDtb/GhzOouOXtZMP/7XUzwPTstBeZFe/+rCMvRwr4yROQP43s0Xk&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">renderMathInElement</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// customised options</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// • auto-render specific keys, e.g.:</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">delimiters</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">left</span>: <span class="string">&quot;$$&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;$$&quot;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">left</span>: <span class="string">&quot;\\(&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;\\)&quot;</span>, <span class="attr">display</span>: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">left</span>: <span class="string">&quot;\\begin&#123;equation&#125;&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;\\end&#123;equation&#125;&quot;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">left</span>: <span class="string">&quot;\\begin&#123;align&#125;&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;\\end&#123;align&#125;&quot;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">left</span>: <span class="string">&quot;\\begin&#123;alignat&#125;&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;\\end&#123;alignat&#125;&quot;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">left</span>: <span class="string">&quot;\\begin&#123;gather&#125;&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;\\end&#123;gather&#125;&quot;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">left</span>: <span class="string">&quot;\\begin&#123;CD&#125;&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;\\end&#123;CD&#125;&quot;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">left</span>: <span class="string">&quot;\\[&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;\\]&quot;</span>, <span class="attr">display</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// • rendering keys, e.g.:</span></span></span><br><span class="line"><span class="language-javascript">          throwOnError : <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em><br>可以通过next模板的<code>_config.yml</code>中的<code>custom_file_path</code>配置项来自定义渲染页面的某个部分，这样对应的每个页面都会加上该模板内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">postBodyStart:</span> <span class="string">source/_data/post-body-start.njk</span></span><br></pre></td></tr></table></figure></div><hr><div class="warning"><ul class="lvl-1"><li class="lvl-2"><p>使用<code>hexo-renderer-markdown-it-plus</code>渲染器时，如果修改了页面的内容，此时刷新页面，会发现页面中的公式不能被渲染了，只能重新启动hexo服务。</p></li><li class="lvl-2"><p>但是使用<code>hexo-renderer-markdown-it</code>渲染器时，刷新页面后公式就可以被渲染了。</p></li></ul></div><hr><h2 id="使用">使用</h2><ul class="lvl-0"><li class="lvl-2"><p>每个页面的<code>front-matter</code>中要添加<code>mathjax: true</code>，这样在页面中就可以使用公式了。</p></li><li class="lvl-2"><p><code>Katex</code>公式的渲染方式支持<code>$...$</code>和<code>$$...$$</code>两种方式</p><ul class="lvl-2"><li class="lvl-5"><code>$...$</code>为行级公式</li></ul> <figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span>sin(<span class="keyword">\omega</span> t)=<span class="keyword">\frac</span>&#123;1&#125;&#123;2j&#125;(e<span class="built_in">^</span>&#123;j<span class="keyword">\omega</span> t&#125;-e<span class="built_in">^</span>&#123;-j<span class="keyword">\omega</span> t&#125;)<span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>ω</mi><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>j</mi></mrow></mfrac><mo stretchy="false">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>ω</mi><mi>t</mi></mrow></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>ω</mi><mi>t</mi></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">sin(\omega t)=\frac{1}{2j}(e^{j\omega t}-e^{-j\omega t})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.326216em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><ul class="lvl-2"><li class="lvl-5"><code>$$...$$</code>为块级公式，独占一行且居中展示</li></ul> <figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">sin(<span class="keyword">\omega</span> t)=<span class="keyword">\frac</span>&#123;1&#125;&#123;2j&#125;(e<span class="built_in">^</span>&#123;j<span class="keyword">\omega</span> t&#125;-e<span class="built_in">^</span>&#123;-j<span class="keyword">\omega</span> t&#125;)</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>ω</mi><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>j</mi></mrow></mfrac><mo stretchy="false">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>ω</mi><mi>t</mi></mrow></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>ω</mi><mi>t</mi></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">sin(\omega t)=\frac{1}{2j}(e^{j\omega t}-e^{-j\omega t})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.124664em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p></li><li class="lvl-2"><p><code>$$...$$</code>和<code>$...$</code>中不能出现Unicode字符，否则会报错，即不支持中文，如果需要显示中文，则需要使用<code>\text&#123;中文&#125;</code></p></li><li class="lvl-2"><p>块级公式，在开头的<code>$$</code>之前和结尾的<code>$$</code>之后，不得有任何字符（空格除外）</p></li><li class="lvl-2"><p>行级公式，在开头的<code>$</code>之后和结尾的<code>$</code>之前，不得有空格</p></li></ul><h2 id="示例">示例</h2><ul class="lvl-0"><li class="lvl-2"><p>使用方式可以参考 <a href="https://katex.org/docs/supported">KaTeX公式符号</a> 以及 <a href="https://zh.wikipedia.org/wiki/Help:%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">维基百科：LaTeX公式手册</a></p></li><li class="lvl-2"><p>不过记住这些公式符号还是比较困难的，这里推荐两个工具</p><ul class="lvl-2"><li class="lvl-5"><a href="https://webdemo.myscript.com/views/math/index.html">MyScript</a>: 手写转LaTeX公式，直接将你需要的数学公式画出来，它会自动将其转换为LaTeX公式，然后复制即可</li><li class="lvl-5"><a href="https://www.latexlive.com/home">LaTeX公式编辑器</a>: 提供公式模板、图片识别(有次数限制)等功能，并且支持输出各种格式。</li><li class="lvl-5"><a href="https://simpletex.cn/ai/latex_ocr">Simpletex</a>: 支持LaTex公式图片识别和手写转公式，且无次数限制，但是需要注册账号。同时也提供了客户端版本。</li></ul></li></ul><hr><ul class="lvl-0"><li class="lvl-2"><p>这里随便给几个示例，以下是<code>LaTeX</code>的标准语法</p></li></ul><hr><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\left</span>(<span class="keyword">\beta</span> m c<span class="built_in">^</span>2 + c <span class="keyword">\left</span>(<span class="keyword">\sum</span><span class="built_in">_</span>&#123;n=1&#125;<span class="built_in">^</span>3<span class="keyword">\alpha</span><span class="built_in">_</span>n p<span class="built_in">_</span>n<span class="keyword">\right</span>)<span class="keyword">\right</span>) <span class="keyword">\psi</span>(x,t)</span><br><span class="line">= i<span class="keyword">\hbar</span> <span class="keyword">\frac</span>&#123;<span class="keyword">\partial</span> <span class="keyword">\psi</span>(x,t)&#125;&#123;<span class="keyword">\partial</span> t&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mi>β</mi><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup><mo>+</mo><mi>c</mi><mrow><mo fence="true">(</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mn>3</mn></munderover><msub><mi>α</mi><mi>n</mi></msub><msub><mi>p</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow><mi>ψ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>i</mi><mi mathvariant="normal">ℏ</mi><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>ψ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\left(\beta m c^2 + c \left(\sum_{n=1}^3\alpha_n p_n\right)\right) \psi(x,t)= i\hbar \frac{\partial \psi(x,t)}{\partial t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.068226em;vertical-align:-1.267113em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em;"><span style="top:-1.882887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.267113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord mathnormal">i</span><span class="mord">ℏ</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><hr><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Aha! <span class="built_in">$</span>E = mc<span class="built_in">^</span>&#123;2&#125;<span class="built_in">$</span>.</span><br></pre></td></tr></table></figure><p>Aha! <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E = mc^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>.</p><hr><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\left</span>(<span class="keyword">\LARGE</span>&#123;AB&#125;<span class="keyword">\right</span>)</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">(</mo><mstyle mathsize="1.728em"><mrow><mi>A</mi><mi>B</mi></mrow></mstyle><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left(\LARGE{AB}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.83081424em;vertical-align:-0.65002em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord sizing reset-size6 size9"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span></span></p><hr><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;matrix&#125;</span><br><span class="line">   a <span class="built_in">&amp;</span> b <span class="keyword">\\</span></span><br><span class="line">   c <span class="built_in">&amp;</span> d</span><br><span class="line"><span class="keyword">\end</span>&#123;matrix&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{matrix}   a &amp; b \\   c &amp; d\end{matrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4000000000000004em;vertical-align:-0.9500000000000004em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><hr><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\arraystretch</span>&#123;1.5&#125;</span><br><span class="line">   <span class="keyword">\begin</span>&#123;array&#125;&#123;c:c:c&#125;</span><br><span class="line">   a <span class="built_in">&amp;</span> b <span class="built_in">&amp;</span> c <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line">   d <span class="built_in">&amp;</span> e <span class="built_in">&amp;</span> f <span class="keyword">\\</span></span><br><span class="line">   <span class="keyword">\hdashline</span></span><br><span class="line">   g <span class="built_in">&amp;</span> h <span class="built_in">&amp;</span> i</span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.6599999999999999em" columnalign="center center center" columnlines="dashed dashed" columnspacing="1em" rowlines="solid dashed"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>e</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>f</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>g</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>h</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>i</mi></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\def\arraystretch{1.5}   \begin{array}{c:c:c}   a &amp; b &amp; c \\ \hline   d &amp; e &amp; f \\   \hdashline   g &amp; h &amp; i\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.4em;vertical-align:-2.45em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-4.95em;"><span class="pstrut" style="height:4.95em;"></span><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-4.95em;"><span class="pstrut" style="height:3.26em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.26em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span><span style="top:-1.3499999999999996em;"><span class="pstrut" style="height:3.26em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator" style="height:5.4em;border-right-width:0.04em;border-right-style:dashed;margin:0 -0.02em;vertical-align:-2.45em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-4.95em;"><span class="pstrut" style="height:3.26em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.26em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span><span style="top:-1.3499999999999996em;"><span class="pstrut" style="height:3.26em;"></span><span class="mord"><span class="mord mathnormal">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator" style="height:5.4em;border-right-width:0.04em;border-right-style:dashed;margin:0 -0.02em;vertical-align:-2.45em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-4.95em;"><span class="pstrut" style="height:3.26em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.26em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span><span style="top:-1.3499999999999996em;"><span class="pstrut" style="height:3.26em;"></span><span class="mord"><span class="mord mathnormal">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span style="top:-4.300000000000001em;"><span class="pstrut" style="height:4.95em;"></span><span class="hdashline" style="border-bottom-width:0.04em;"></span></span><span style="top:-6.1000000000000005em;"><span class="pstrut" style="height:4.95em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span></span></span></span></p><hr><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="keyword">\tilde</span>&#123;a&#125;<span class="built_in">$</span>  <span class="built_in">&amp;</span>nbsp;<span class="built_in">&amp;</span>nbsp; <span class="built_in">&amp;</span>nbsp; <span class="built_in">&amp;</span>nbsp; <span class="built_in">&amp;</span>nbsp; <span class="built_in">$</span><span class="keyword">\underrightarrow</span>&#123;AB&#125;<span class="built_in">$</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">\tilde{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6678599999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">~</span></span></span></span></span></span></span></span></span></span>           <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder accentunder="true"><mrow><mi>A</mi><mi>B</mi></mrow><mo stretchy="true">→</mo></munder></mrow><annotation encoding="application/x-tex">\underrightarrow{AB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20533em;vertical-align:-0.522em;"></span><span class="mord accentunder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span class="svg-align" style="top:-2.4779999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.522em;"><span></span></span></span></span></span></span></span></span></p><hr><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\tilde</span>&#123;a&#125; <span class="keyword">\underrightarrow</span>&#123;AB&#125;<span class="keyword">\begin</span>&#123;array&#125;&#123;l&#125;</span><br><span class="line">  a<span class="keyword">\mathop</span>&#123;x&#125;<span class="keyword">\nolimits</span><span class="built_in">^</span>&#123;2&#125;+bx+c=0 <span class="keyword">\\</span></span><br><span class="line">  <span class="keyword">\Delta</span> =<span class="keyword">\mathop</span>&#123;b&#125;<span class="keyword">\nolimits</span><span class="built_in">^</span>&#123;2&#125;-4ac <span class="keyword">\\</span></span><br><span class="line">  <span class="keyword">\left</span><span class="keyword">\&#123;</span><span class="keyword">\begin</span>&#123;matrix&#125;</span><br><span class="line">  <span class="keyword">\Delta</span> <span class="keyword">\gt</span> 0<span class="keyword">\text</span>&#123;方程有两个不相等的实根&#125; <span class="keyword">\\</span></span><br><span class="line">  <span class="keyword">\Delta</span> = 0<span class="keyword">\text</span>&#123;方程有两个相等的实根&#125; <span class="keyword">\\</span></span><br><span class="line">  <span class="keyword">\Delta</span> <span class="keyword">\lt</span> 0<span class="keyword">\text</span>&#123;方程无实根&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;matrix&#125;<span class="keyword">\right</span>.</span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>a</mi><mo>~</mo></mover><munder accentunder="true"><mrow><mi>A</mi><mi>B</mi></mrow><mo stretchy="true">→</mo></munder><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><msup><mo><mi>x</mi></mo><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mo>=</mo><msup><mo><mi>b</mi></mo><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mo>&gt;</mo><mn>0</mn><mtext> 方程有两个不相等的实根</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mo>=</mo><mn>0</mn><mtext> 方程有两个相等的实根</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mo>&lt;</mo><mn>0</mn><mtext> 方程无实根</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\tilde{a} \underrightarrow{AB}\begin{array}{l}  a\mathop{x}\nolimits^{2}+bx+c=0 \\  \Delta =\mathop{b}\nolimits^{2}-4ac \\  \left\{\begin{matrix}  \Delta \gt 0\text{ 方程有两个不相等的实根} \\  \Delta = 0\text{ 方程有两个相等的实根} \\  \Delta \lt 0\text{ 方程无实根}\end{matrix}\right.\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.0584880000000005em;vertical-align:-2.7792439999999994em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">~</span></span></span></span></span></span></span><span class="mord accentunder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span class="svg-align" style="top:-2.4779999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.522em;"><span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2792440000000007em;"><span style="top:-6.489264000000001em;"><span class="pstrut" style="height:4.05002em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop mathnormal" style="position:relative;top:-0.03472em;">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">+</span><span class="mord mathnormal">b</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-5.230816em;"><span class="pstrut" style="height:4.05002em;"></span><span class="mord"><span class="mord">Δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop"><span class="mop mathnormal" style="position:relative;top:0.09721999999999997em;">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span></span></span><span style="top:-2.8207960000000005em;"><span class="pstrut" style="height:4.05002em;"></span><span class="mord"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.00501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">方程有两个不相等的实根</span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">方程有两个相等的实根</span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">方程无实根</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7792439999999994em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><hr><ul class="lvl-0"><li class="lvl-2"><p>以下为开启<code>Auto-render Extension</code>后支持的公式语法，并不是<code>LaTex</code>的标准语法</p></li></ul><hr><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;split&#125;   a <span class="built_in">&amp;</span>=b+c<span class="keyword">\\</span></span><br><span class="line">      <span class="built_in">&amp;</span>=e+f</span><br><span class="line"><span class="keyword">\end</span>&#123;split&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: equation at position 7: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲\begin{split} …'>\begin{equation}\begin{split}   a &amp;=b+c\\      &amp;=e+f\end{split}\end{equation}</p><hr><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;align&#125;</span><br><span class="line">   a<span class="built_in">&amp;</span>=b+c <span class="keyword">\\</span></span><br><span class="line">   d+e<span class="built_in">&amp;</span>=f</span><br><span class="line"><span class="keyword">\end</span>&#123;align&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align at position 7: \begin{̲a̲l̲i̲g̲n̲}̲   a&amp;=b+c \\ …'>\begin{align}   a&amp;=b+c \\   d+e&amp;=f\end{align}</p><hr><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;CD&#125;</span><br><span class="line">   A @&gt;a&gt;&gt; B <span class="keyword">\\</span></span><br><span class="line">@VbVV @AAcA <span class="keyword">\\</span></span><br><span class="line">   C @= D</span><br><span class="line"><span class="keyword">\end</span>&#123;CD&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: CD at position 7: \begin{̲C̲D̲}̲   A @&gt;a&gt;&gt; B \…'>\begin{CD}   A @&gt;a&gt;&gt; B \\@VbVV @AAcA \\   C @= D\end{CD}</p>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

--&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Hexo是基于markdown的，所以可以使用LaTex语法来编写数学公式，只不过需要安装相应的公式渲染插件来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Next主题 支持的公式插件为&lt;code&gt;MathJax&lt;/code&gt;和&lt;code&gt;KaTeX&lt;/code&gt;，它们都支持LaTex语法，参考: &lt;a href=&quot;https://theme-next.js.org/docs/third-party-services/math-equations&quot;&gt;https://theme-next.js.org/docs/third-party-services/math-equations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文使用的是&lt;a href=&quot;https://katex.org/docs/supported&quot;&gt;Katex&lt;/a&gt;，原因是我已经使用了&lt;a href=&quot;https://github.com/hexojs/hexo-renderer-markdown-it&quot;&gt;hexo-renderer-markdown-it&lt;/a&gt;渲染器，其与 mathjax 的 &lt;a href=&quot;https://github.com/hexojs/hexo-renderer-pandoc&quot;&gt;hexo-renderer-pandoc&lt;/a&gt;渲染器不能并存，所以只能选&lt;code&gt;Katex&lt;/code&gt;了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://blog.hanqunfeng.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://blog.hanqunfeng.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>zabbix监控告警--vfs.fs.inode不足5%的解决过程</title>
    <link href="https://blog.hanqunfeng.com/2024/09/05/linux-zabbix_vfs_fs_inode/"/>
    <id>https://blog.hanqunfeng.com/2024/09/05/linux-zabbix_vfs_fs_inode/</id>
    <published>2024-09-05T14:30:05.000Z</published>
    <updated>2024-11-25T06:56:28.738Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>解决Linux索引节点(inode)用满导致故障的方法</p></li></ul><span id="more"></span><h2 id="zabbix告警">zabbix告警</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vfs.fs.inode[/,pfree]):5 %</span><br></pre></td></tr></table></figure><h2 id="解决过程">解决过程</h2><ul class="lvl-0"><li class="lvl-2"><p>登录linux系统后查看inode使用情况和磁盘使用情况</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># inode 不足了</span></span><br><span class="line"><span class="built_in">df</span> -hi</span><br><span class="line">文件系统      Inode  已用(I)  可用(I) 已用(I)%% 挂载点</span><br><span class="line">/dev/xvda1              1.9M    1.8M     96K   96% /</span><br><span class="line">tmpfs                   251K       1    251K    1% /dev/shm</span><br><span class="line"></span><br><span class="line"><span class="comment"># disk 充足</span></span><br><span class="line"><span class="built_in">df</span> -hT</span><br><span class="line">文件系统    类型      容量  已用  可用 已用%% 挂载点</span><br><span class="line">/dev/xvda1    ext4     30G   18G   12G  61% /</span><br><span class="line">tmpfs        tmpfs   1003M     0 1003M   0% /dev/shm</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>根据上面的查询结果初步判断是系统产生了大量的临时文件导致inode用尽了</p></li><li class="lvl-2"><p>排查到底哪个目录下的文件数过多</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过下面的命令统计文件数量前十名，这里发现是/var目录中文件异常的多</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> /*; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(find $i |wc -l)</span>:<span class="variable">$i</span>&quot;</span>; <span class="keyword">done</span> | <span class="built_in">sort</span> -nr | <span class="built_in">head</span> -n 10</span><br><span class="line">1815728:/var</span><br><span class="line">52498:/usr</span><br><span class="line">18804:/proc</span><br><span class="line">7333:/sys</span><br><span class="line">1834:/lib</span><br><span class="line">1447:/opt</span><br><span class="line">1047:/etc</span><br><span class="line">457:/dev</span><br><span class="line">411:/lib64</span><br><span class="line">245:/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着查看/var中的文件数量</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> /var/*; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(find $i |wc -l)</span>:<span class="variable">$i</span>&quot;</span>; <span class="keyword">done</span> | <span class="built_in">sort</span> -nr | <span class="built_in">head</span> -n 10</span><br><span class="line">1813442:/var/spool</span><br><span class="line">2033:/var/lib</span><br><span class="line">85:/var/cache</span><br><span class="line">82:/var/log</span><br><span class="line">39:/var/run</span><br><span class="line">24:/var/lock</span><br><span class="line">7:/var/db</span><br><span class="line">3:/var/yp</span><br><span class="line">2:/var/empty</span><br><span class="line">2:/var/account</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着查看/var/spool中的文件数量，这里基本定位到是/var/spool/clientmqueue目录</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> /var/spool/*; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(find $i |wc -l)</span>:<span class="variable">$i</span>&quot;</span>; <span class="keyword">done</span> | <span class="built_in">sort</span> -nr | <span class="built_in">head</span> -n 10</span><br><span class="line">1812413:/var/spool/clientmqueue</span><br><span class="line">7:/var/spool/mail</span><br><span class="line">4:/var/spool/anacron</span><br><span class="line">3:/var/spool/at</span><br><span class="line">2:/var/spool/cron</span><br><span class="line">1:/var/spool/mqueue</span><br><span class="line">1:/var/spool/lpd</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>百度一下<code>/var/spool/clientmqueue</code>目录的作用</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">‌Linux文件目录 /var/spool/clientmqueue/ 下的文件主要是由cron任务产生的输出文件。‌ 当cron任务中有输出内容时，如果服务器上没有配置sendmail服务，这些输出内容就会被保存到 /var/spool/clientmqueue/ 目录内。这是因为cron任务中的命令如果有输出（比如错误信息或者正常的输出信息），默认会通过sendmail发送，但如果服务器上没有配置sendmail服务，这些输出内容就会被保存到 /var/spool/clientmqueue/ 目录中。因此，这个目录下主要包含的是由cron任务产生的输出文件，这些文件记录了cron任务执行过程中的输出信息。</span><br><span class="line"></span><br><span class="line">如果需要处理这些文件，可以通过修改crontab配置来实现。具体来说，可以在每个cron任务命令的末尾添加重定向操作，将输出内容抛弃，例如使用命令 &gt;/dev/null 2&gt;&amp;1。这样，无论标准输出还是错误输出都会被重定向到 /dev/null，即被抛弃，从而避免在 /var/spool/clientmqueue/ 目录下产生不必要的文件。</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>上面的解释说明<code>/var/spool/clientmqueue</code>目录下的文件可以被删除，所以直接删了就可以解决该问题了</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件数量过多，不能这么删除</span></span><br><span class="line"><span class="comment"># rm -rf /var/spool/clientmqueue/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确方法</span></span><br><span class="line">find /var/spool/clientmqueue -name <span class="string">&quot;*&quot;</span> -<span class="built_in">type</span> f | xargs <span class="built_in">rm</span> -rf</span><br></pre></td></tr></table></figure><h2 id="详解inode">详解inode</h2><ul class="lvl-0"><li class="lvl-2"><p>inode是文件系统内一个重要的数据结构，它用来描述一个文件，包括文件名、文件类型、权限、所有者、创建时间、修改时间等。在Linux系统中，每个文件都有一个唯一的inode号，这个inode号是分配给该文件的，并且不能被改变。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前目录的inode号</span></span><br><span class="line"><span class="built_in">ls</span> -li</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作系统打开文件时会按如下步骤执行：</p><ul class="lvl-2"><li class="lvl-6">查找文件名称对应的inode号</li><li class="lvl-6">根据inode号获取inode信息</li><li class="lvl-6">根据inode信息找到文件对应的数据块，读出数据</li></ul></li><li class="lvl-2"><p>inode的大小是有限制的，通常取决于文件系统和操作系统。在大多数Linux文件系统中，inode大小通常是128字节或256字节。这是由文件系统在格式化时决定的，并且格式化后不能更改。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看inode大小</span></span><br><span class="line">dumpe2fs /dev/xvda1 | grep <span class="string">&quot;Inode size&quot;</span></span><br><span class="line">dumpe2fs 1.43.5 (04-Aug-2017)</span><br><span class="line">Inode size:          256</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看文件系统的inode总数</p></li></ul><blockquote><p>一个inode只对应一个实际文件，所以inodes最大数量就是文件的最大数量。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有挂载磁盘</span></span><br><span class="line"><span class="built_in">df</span> -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定磁盘</span></span><br><span class="line"><span class="built_in">df</span> -i /dev/xvda1</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>不同的文件系统默认的inode数量不同，以<code>1G</code>磁盘空间为例，<code>ext4</code>文件系统默认为<code>65536</code>，<code>xfs</code>文件系统默认为<code>52万</code>(每2k设置一个inode)，并且<code>xfs</code>会动态扩容inode数量。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;解决Linux索引节点(inode)用满导致故障的方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="zabbix" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/zabbix/"/>
    
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/tags/linux/"/>
    
    <category term="zabbix" scheme="https://blog.hanqunfeng.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>发布Jar到Maven中央仓库--Gradle版(最新方式)</title>
    <link href="https://blog.hanqunfeng.com/2024/08/02/gradle-depoly-maven-center-repository-new/"/>
    <id>https://blog.hanqunfeng.com/2024/08/02/gradle-depoly-maven-center-repository-new/</id>
    <published>2024-08-02T13:30:05.000Z</published>
    <updated>2024-08-02T06:39:05.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><a href="https://oss.sonatype.org">https://oss.sonatype.org</a>已经不再支持新用户注册，新的注册地址为<a href="https://central.sonatype.com">https://central.sonatype.com</a></li><li class="lvl-2">通过本文，你将知道如何将Gradle构建的项目发布到Maven中央仓库</li><li class="lvl-2">Maven构建方式请看 <a href="/2024/08/01/mvn-depoly-maven-center-repository-new/" title="发布Jar到Maven中央仓库--Maven版(最新方式)">发布Jar到Maven中央仓库--Maven版(最新方式)</a> 。</li><li class="lvl-2">前三个步骤与 <a href="/2024/08/01/mvn-depoly-maven-center-repository-new/" title="发布Jar到Maven中央仓库--Maven版(最新方式)">发布Jar到Maven中央仓库--Maven版(最新方式)</a> 相同，不在赘述。</li></ul><span id="more"></span><h2 id="一、将项目推送到远程仓库，如-Github或者Gitee">一、将项目推送到远程仓库，如 <code>Github</code>或者<code>Gitee</code></h2><h2 id="二、注册-Sonatype-账户">二、注册 <code>Sonatype</code> 账户</h2><h2 id="三、登录-Sonatype-创建Namespace">三、登录 Sonatype 创建<code>Namespace</code></h2><p>前三个步骤与 <a href="/2024/08/01/mvn-depoly-maven-center-repository-new/" title="发布Jar到Maven中央仓库--Maven版(最新方式)">发布Jar到Maven中央仓库--Maven版(最新方式)</a> 相同，不在赘述。</p><h2 id="四、发布">四、发布</h2><ul class="lvl-0"><li class="lvl-2"><p>签名<br>我是mac电脑，于是签名工具使用的是<a href="https://gpgtools.org">https://gpgtools.org</a>，gradle签名时需要使用到<code>.gpg</code>证书文件，这个工具不支持直接导出<code>.gpg</code>，其导出的证书文件是<code>.asc</code>格式的，<code>asc</code>其实就是<code>字符串</code>，可以用记事本打开查看。</p><p>使用如下命令导出<code>.gpg</code>格式的证书：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出当前全部证书</span></span><br><span class="line">gpg -k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出私钥，qunfeng_han@126.com是创建证书时使用的邮箱，会要求你输入创建证书时的密码</span></span><br><span class="line">gpg --output private.pgp --armor --export-secret-key qunfeng_han@126.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出公钥</span></span><br><span class="line">gpg --output public.pgp --armor --<span class="built_in">export</span> qunfeng_han@126.com</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>build.gradle<br>官方没有出gradle发布插件，但是<a href="https://central.sonatype.org/publish/publish-portal-gradle/">官网</a>推荐使用第三方的<a href="https://jreleaser.org/guide/latest/examples/maven/maven-central.html#_gradle">jreleaser</a>插件。</p></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line"><span class="comment">//    id &#x27;io.spring.dependency-management&#x27; version &#x27;1.0.10.RELEASE&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;io.spring.dependency-management&#x27;</span> version <span class="string">&#x27;1.1.6&#x27;</span></span><br><span class="line">    <span class="comment">//此处必须是java-library，如果是java则api方法不可用，api可以理解为就是compile，支持传递依赖</span></span><br><span class="line">    id <span class="string">&#x27;java-library&#x27;</span></span><br><span class="line">    <span class="comment">//发布插件</span></span><br><span class="line">    id <span class="string">&#x27;maven-publish&#x27;</span></span><br><span class="line">    <span class="comment">//自动发布到maven中央仓库插件</span></span><br><span class="line">    <span class="comment">//https://jreleaser.org/guide/latest/examples/maven/maven-central.html#_gradle</span></span><br><span class="line">    id <span class="string">&#x27;org.jreleaser&#x27;</span> version <span class="string">&#x27;1.13.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> = <span class="string">&#x27;io.github.hanqunfeng&#x27;</span></span><br><span class="line"><span class="comment">//version = &#x27;1.0.0-SNAPSHOT&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;1.0.1&#x27;</span></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java &#123;</span><br><span class="line">    withJavadocJar()</span><br><span class="line">    withSourcesJar()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/public/&#x27;</span> &#125;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123; mavenBom(<span class="string">&quot;software.amazon.awssdk:bom:2.23.10&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">//lombok</span></span><br><span class="line">    compileOnly <span class="string">&#x27;org.projectlombok:lombok:1.18.32&#x27;</span></span><br><span class="line">    annotationProcessor <span class="string">&#x27;org.projectlombok:lombok:1.18.32&#x27;</span></span><br><span class="line">    api <span class="string">&#x27;software.amazon.awssdk:s3&#x27;</span></span><br><span class="line">    api <span class="string">&#x27;software.amazon.awssdk:apache-client&#x27;</span></span><br><span class="line">    api <span class="string">&#x27;software.amazon.awssdk:s3-transfer-manager&#x27;</span></span><br><span class="line">    api <span class="string">&#x27;software.amazon.awssdk:aws-crt-client&#x27;</span></span><br><span class="line">    api <span class="string">&#x27;org.springframework:spring-core:5.3.29&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java编译的时候缺省状态下会因为中文字符而失败</span></span><br><span class="line">[compileJava, compileTestJava]*.<span class="keyword">options</span>*.encoding = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布插件</span></span><br><span class="line"><span class="comment"> * 参考：https://docs.gradle.org/6.6.1/userguide/publishing_maven.html#publishing_maven:resolved_dependencies</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 发布为bom，参考：https://zhuanlan.zhihu.com/p/195678201</span></span><br><span class="line"><span class="comment"> * 注意：java-platform不能与java和java-library同时存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        maven(MavenPublication) &#123;</span><br><span class="line">            groupId = <span class="keyword">project</span>.<span class="keyword">group</span></span><br><span class="line">            artifactId = <span class="keyword">project</span>.name</span><br><span class="line">            version = <span class="keyword">project</span>.version</span><br><span class="line">            <span class="comment">//如果不定义，则会按照以上默认值执行</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">from</span> components.java</span><br><span class="line"></span><br><span class="line">            pom &#123;</span><br><span class="line">                name = <span class="string">&#x27;aws-s3-v2-tools-gradle&#x27;</span></span><br><span class="line">                <span class="keyword">description</span> = <span class="string">&#x27;AWS S3 Tools.&#x27;</span></span><br><span class="line">                url = <span class="string">&#x27;https://blog.hanqunfeng.com&#x27;</span></span><br><span class="line">                licenses &#123;</span><br><span class="line">                    license &#123;</span><br><span class="line">                        name = <span class="string">&#x27;The Apache License, Version 2.0&#x27;</span></span><br><span class="line">                        url = <span class="string">&#x27;http://www.apache.org/licenses/LICENSE-2.0.txt&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                developers &#123;</span><br><span class="line">                    developer &#123;</span><br><span class="line">                        id = <span class="string">&#x27;hanqf&#x27;</span></span><br><span class="line">                        name = <span class="string">&#x27;han qunfeng&#x27;</span></span><br><span class="line">                        email = <span class="string">&#x27;qunfeng_han@126.com&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                scm &#123;</span><br><span class="line">                    connection = <span class="string">&#x27;scm:git:https://github.com/hanqunfeng/aws-s3-v2-tools-gradle.git&#x27;</span></span><br><span class="line">                    developerConnection = <span class="string">&#x27;scm:git:https://github.com:hanqunfeng/aws-s3-v2-tools-gradle.git&#x27;</span></span><br><span class="line">                    url = <span class="string">&#x27;https://github.com/hanqunfeng/aws-s3-v2-tools-gradle&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            versionMapping &#123;</span><br><span class="line">                usage(<span class="string">&#x27;java-api&#x27;</span>) &#123;</span><br><span class="line">                    fromResolutionOf(<span class="string">&#x27;runtimeClasspath&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                usage(<span class="string">&#x27;java-runtime&#x27;</span>) &#123;</span><br><span class="line">                    fromResolutionResult()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url = layout.buildDirectory.dir(<span class="string">&#x27;staging-deploy&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    <span class="keyword">options</span>.encoding = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//javadoc，如果用jdk11，默认就支持中文</span></span><br><span class="line"><span class="comment">//查看可以配置的属性：https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html</span></span><br><span class="line">tasks.withType(Javadoc) &#123;</span><br><span class="line">    <span class="keyword">options</span>.version = <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">options</span>.author = <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">options</span>.encoding = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    <span class="keyword">options</span>.charSet = <span class="string">&quot;UTF-8&quot;</span>  <span class="comment">//解决中文乱码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">javadoc &#123;</span><br><span class="line">    <span class="keyword">if</span> (JavaVersion.current().isJava9Compatible()) &#123;</span><br><span class="line">        <span class="keyword">options</span>.addBooleanOption(<span class="string">&#x27;html5&#x27;</span>, <span class="keyword">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (JavaVersion.current().isJava8Compatible()) &#123;</span><br><span class="line">        tasks.withType(Javadoc) &#123;</span><br><span class="line">            <span class="comment">// disable the crazy super-strict doclint tool in Java 8</span></span><br><span class="line">            <span class="comment">// noinspection SpellCheckingInspection</span></span><br><span class="line">            <span class="keyword">options</span>.addStringOption(<span class="string">&#x27;Xdoclint:none&#x27;</span>, <span class="string">&#x27;-quiet&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jreleaser配置文件：~/.jreleaser/config.toml</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JRELEASER_MAVENCENTRAL_USERNAME = &quot;&lt;your-publisher-portal-username&gt;&quot;</span></span><br><span class="line"><span class="comment">JRELEASER_MAVENCENTRAL_PASSWORD = &quot;&lt;your-publisher-portal-password&gt;&quot;</span></span><br><span class="line"><span class="comment">JRELEASER_NEXUS2_USERNAME = &quot;&lt;your-sonatype-account-username&gt;&quot;</span></span><br><span class="line"><span class="comment">JRELEASER_NEXUS2_PASSWORD = &quot;&lt;your-sonatype-account-password&gt;&quot;</span></span><br><span class="line"><span class="comment">JRELEASER_GPG_PASSPHRASE = &quot;&lt;your-pgp-passphrase&gt;&quot;</span></span><br><span class="line"><span class="comment">JRELEASER_GITHUB_TOKEN = &quot;&lt;your-github-token&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">jreleaser &#123;</span><br><span class="line">    signing &#123;</span><br><span class="line">        active = <span class="string">&#x27;ALWAYS&#x27;</span></span><br><span class="line">        armored = <span class="keyword">true</span></span><br><span class="line">        mode = <span class="string">&#x27;FILE&#x27;</span></span><br><span class="line">        publicKey = <span class="string">&#x27;/Users/hanqf/develop_soft/gpg_key/hanqf/public.pgp&#x27;</span></span><br><span class="line">        secretKey = <span class="string">&#x27;/Users/hanqf/develop_soft/gpg_key/hanqf/private.pgp&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    deploy &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Portal Publisher API */</span></span><br><span class="line">            mavenCentral &#123;</span><br><span class="line">                sonatype &#123;</span><br><span class="line">                    active = <span class="string">&#x27;ALWAYS&#x27;</span></span><br><span class="line">                    url = <span class="string">&#x27;https://central.sonatype.com/api/v1/publisher&#x27;</span></span><br><span class="line">                    stagingRepository(<span class="string">&#x27;build/staging-deploy&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>~/.jreleaser/config.toml ：配置相关认证信息</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://central.sonatype.com 的认证信息</span></span><br><span class="line"><span class="attr">JRELEASER_MAVENCENTRAL_USERNAME</span> = <span class="string">&quot;&lt;your-publisher-portal-username&gt;&quot;</span></span><br><span class="line"><span class="attr">JRELEASER_MAVENCENTRAL_PASSWORD</span> = <span class="string">&quot;&lt;your-publisher-portal-password&gt;&quot;</span></span><br><span class="line"><span class="comment"># https://oss.sonatype.org 的认证信息，这里没有用到，可以不进行配置</span></span><br><span class="line"><span class="attr">JRELEASER_NEXUS2_USERNAME</span> = <span class="string">&quot;&lt;your-sonatype-account-username&gt;&quot;</span></span><br><span class="line"><span class="attr">JRELEASER_NEXUS2_PASSWORD</span> = <span class="string">&quot;&lt;your-sonatype-account-password&gt;&quot;</span></span><br><span class="line"><span class="comment"># 创建 pgp 密钥时的密码</span></span><br><span class="line"><span class="attr">JRELEASER_GPG_PASSPHRASE</span> = <span class="string">&quot;&lt;your-pgp-passphrase&gt;&quot;</span></span><br><span class="line"><span class="comment"># github token</span></span><br><span class="line"><span class="attr">JRELEASER_GITHUB_TOKEN</span> = <span class="string">&quot;&lt;your-github-token&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>执行命令</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./gradlew jreleaserConfig <span class="comment"># 验证配置文件是否正确</span></span><br><span class="line">./gradlew clean publish <span class="comment"># 发布到本地 build/staging-deploy</span></span><br><span class="line">./gradlew jreleaserFullRelease <span class="comment"># 发布到远程Maven中央仓库</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>更新部署<br>与 <a href="/2024/08/01/mvn-depoly-maven-center-repository-new/" title="发布Jar到Maven中央仓库--Maven版(最新方式)">发布Jar到Maven中央仓库--Maven版(最新方式)</a> 中的描述类似，只需要修改<code>build.gradle</code>中对应的版本号后重新执行上面的发布命令即可，发布的jar包可以在<a href="https://central.sonatype.com">https://central.sonatype.com</a>中检索。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;&lt;a href=&quot;https://oss.sonatype.org&quot;&gt;https://oss.sonatype.org&lt;/a&gt;已经不再支持新用户注册，新的注册地址为&lt;a href=&quot;https://central.sonatype.com&quot;&gt;https://central.sonatype.com&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;通过本文，你将知道如何将Gradle构建的项目发布到Maven中央仓库&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;Maven构建方式请看 &lt;a href=&quot;/2024/08/01/mvn-depoly-maven-center-repository-new/&quot; title=&quot;发布Jar到Maven中央仓库--Maven版(最新方式)&quot;&gt;发布Jar到Maven中央仓库--Maven版(最新方式)&lt;/a&gt; 。&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;前三个步骤与 &lt;a href=&quot;/2024/08/01/mvn-depoly-maven-center-repository-new/&quot; title=&quot;发布Jar到Maven中央仓库--Maven版(最新方式)&quot;&gt;发布Jar到Maven中央仓库--Maven版(最新方式)&lt;/a&gt; 相同，不在赘述。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="maven" scheme="https://blog.hanqunfeng.com/tags/maven/"/>
    
    <category term="gradle" scheme="https://blog.hanqunfeng.com/tags/gradle/"/>
    
  </entry>
  
</feed>
