<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飘逸峰的博客</title>
  
  <subtitle>Spring--Java程序员的春天</subtitle>
  <link href="https://blog.hanqunfeng.com/atom.xml" rel="self"/>
  
  <link href="https://blog.hanqunfeng.com/"/>
  <updated>2025-06-05T10:49:21.503Z</updated>
  <id>https://blog.hanqunfeng.com/</id>
  
  <author>
    <name>飘逸峰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker 之 远程连接</title>
    <link href="https://blog.hanqunfeng.com/2025/06/05/docker-remote-connection/"/>
    <id>https://blog.hanqunfeng.com/2025/06/05/docker-remote-connection/</id>
    <published>2025-06-05T13:30:05.000Z</published>
    <updated>2025-06-05T10:49:21.503Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何远程连接Docker</p></li><li class="lvl-2"><p><a href="https://docs.docker.com">Docker官方文档</a></p></li></ul><span id="more"></span><h2 id="远程连接Docker有如下三种方式">远程连接Docker有如下三种方式</h2><h3 id="方式一：开启-TCP（不带-TLS，仅用于内网调试）">方式一：开启 TCP（不带 TLS，仅用于内网调试）</h3><ul class="lvl-0"><li class="lvl-2"><p>开启方式</p><ul class="lvl-2"><li class="lvl-6">编辑 <code>/etc/docker/daemon.json</code>，加上：</li></ul>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hosts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;unix:///var/run/docker.sock&quot;</span><span class="punctuation">,</span> <span class="string">&quot;tcp://0.0.0.0:2375&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">禁用 <code>-H fd://</code>（systemd 与 daemon.json 冲突的根源）</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br><span class="line"><span class="built_in">sudo</span> vi /etc/systemd/system/docker.service.d/override.conf</span><br><span class="line"><span class="comment"># 填入</span></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">重启 docker daemon</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">在客户端测试连接</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H tcp://远程IP:2375 ps</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">加入环境变量后就不需要每次都加上 -H 参数了</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zsh 就换成 ~/.zshrc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export DOCKER_HOST=tcp://远程IP:2376&quot;</span>  &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>❗不要开启无认证的 tcp://0.0.0.0:2375 在公网，这是裸奔的安全风险，任何人都能控制你的 Docker。</p></li><li class="lvl-2"><p>✅ 推荐方式是：</p><ul class="lvl-2"><li class="lvl-6">使用 tcp://0.0.0.0:2376 + --tlsverify</li><li class="lvl-6">或通过 ssh:// 隧道访问 Docker</li></ul></li></ul><h3 id="方式二：开启-TCP-TLS-安全访问（推荐用于公网）">方式二：开启 TCP + TLS 安全访问（推荐用于公网）</h3><ul class="lvl-0"><li class="lvl-2"><p>创建 TLS 证书，通过一个脚本实现，脚本名称 <code>generate-docker-certs.sh</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">SERVER_IP=166.189.9.114  <span class="comment"># 🚨 修改为你的 Docker 服务器 IP 或域名</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] 创建 CA...&quot;</span></span><br><span class="line">openssl genrsa -out ca-key.pem 4096</span><br><span class="line">openssl req -new -x509 -days 365 \</span><br><span class="line">  -key ca-key.pem -subj <span class="string">&quot;/CN=docker-ca&quot;</span> -out ca.pem</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] 创建服务器私钥...&quot;</span></span><br><span class="line">openssl genrsa -out server-key.pem 4096</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] 创建 OpenSSL 配置文件...&quot;</span></span><br><span class="line"><span class="built_in">cat</span> &gt; extfile.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[req]</span></span><br><span class="line"><span class="string">distinguished_name = req_distinguished_name</span></span><br><span class="line"><span class="string">x509_extensions = v3_req</span></span><br><span class="line"><span class="string">prompt = no</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[req_distinguished_name]</span></span><br><span class="line"><span class="string">CN = $&#123;SERVER_IP&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[v3_req]</span></span><br><span class="line"><span class="string">keyUsage = keyEncipherment, dataEncipherment</span></span><br><span class="line"><span class="string">extendedKeyUsage = serverAuth</span></span><br><span class="line"><span class="string">subjectAltName = @alt_names</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[alt_names]</span></span><br><span class="line"><span class="string">IP.1 = $&#123;SERVER_IP&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] 创建服务器证书签名请求 (CSR)...&quot;</span></span><br><span class="line">openssl req -new -key server-key.pem \</span><br><span class="line">  -out server.csr -config extfile.cnf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] 签发服务器证书...&quot;</span></span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> server.csr \</span><br><span class="line">  -CA ca.pem -CAkey ca-key.pem -CAcreateserial \</span><br><span class="line">  -out server-cert.pem -extensions v3_req -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] 创建客户端私钥...&quot;</span></span><br><span class="line">openssl genrsa -out key.pem 4096</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] 创建客户端 CSR...&quot;</span></span><br><span class="line">openssl req -new -key key.pem -subj <span class="string">&quot;/CN=client&quot;</span> -out client.csr</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] 签发客户端证书...&quot;</span></span><br><span class="line"><span class="built_in">cat</span> &gt; client-ext.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">extendedKeyUsage = clientAuth</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> client.csr \</span><br><span class="line">  -CA ca.pem -CAkey ca-key.pem -CAcreateserial \</span><br><span class="line">  -out cert.pem -extfile client-ext.cnf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[✓] 所有证书生成完成！&quot;</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; 服务器证书: server-cert.pem, server-key.pem&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; 客户端证书: cert.pem, key.pem&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; CA根证书:   ca.pem&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>执行脚本</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x generate-docker-certs.sh</span><br><span class="line">./generate-docker-certs.sh</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>将以下证书文件部署到docker服务端</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端：server-cert.pem, server-key.pem, ca.pem</span></span><br><span class="line"><span class="built_in">cp</span> server-cert.pem /etc/docker/server-cert.pem</span><br><span class="line"><span class="built_in">cp</span> server-key.pem /etc/docker/server-key.pem</span><br><span class="line"><span class="built_in">cp</span> ca.pem /etc/docker/ca.pem</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>将以下证书文件部署到docker客户端</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cert.pem, key.pem, ca.pem</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>编辑 /etc/docker/daemon.json</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hosts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;unix:///var/run/docker.sock&quot;</span><span class="punctuation">,</span> <span class="string">&quot;tcp://0.0.0.0:2376&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlsverify&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlscacert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/docker/ca.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlscert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/docker/server-cert.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlskey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/docker/server-key.pem&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>禁用 <code>-H fd://</code>（systemd 与 daemon.json 冲突的根源）</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br><span class="line"><span class="built_in">sudo</span> vi /etc/systemd/system/docker.service.d/override.conf</span><br><span class="line"><span class="comment"># 填入</span></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>重启 docker daemon</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在客户端测试连接</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker \</span><br><span class="line">  --tlsverify \</span><br><span class="line">  --tlscacert=ca.pem \</span><br><span class="line">  --tlscert=cert.pem \</span><br><span class="line">  --tlskey=key.pem \</span><br><span class="line">  -H tcp://166.189.9.114:2376 \</span><br><span class="line">  ps</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>加入环境变量后就不需要每次都加上 -H 参数 和证书参数了</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOT &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="string"># 远程Docker IP和端口</span></span><br><span class="line"><span class="string">export DOCKER_HOST=tcp://166.189.9.114:2376</span></span><br><span class="line"><span class="string"># 用于通过 TLS（SSL）安全连接远程 Docker 守护进程，类似于 docker --tlsverify</span></span><br><span class="line"><span class="string">export DOCKER_TLS_VERIFY=1</span></span><br><span class="line"><span class="string"># 这个目录下要有这些证书文件：ca.pem, cert.pem, key.pem</span></span><br><span class="line"><span class="string">export DOCKER_CERT_PATH=/path/to/certs</span></span><br><span class="line"><span class="string">EOT</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="方式三：ssh-隧道访问（推荐）">方式三：ssh:// 隧道访问（推荐）</h3><ul class="lvl-0"><li class="lvl-2"><p>基于密码或免密认证</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H ssh://user@host ps</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>基于密钥文件</p><ul class="lvl-2"><li class="lvl-6">在 ~/.ssh/config 中指定具体的密钥文件</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host mydocker</span><br><span class="line">HostName 161.189.9.146</span><br><span class="line">User centos</span><br><span class="line">Port 22</span><br><span class="line">IdentityFile ~/.ssh/my_docker_key</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">测试</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H ssh://mydocker ps</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>添加环境变量避免每次都加上 -H 参数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 基于密码或免密认证</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export DOCKER_HOST=ssh://user@host&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="comment">## 或者基于密码的方式</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export DOCKER_HOST=ssh://mydocker&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="三种远程连接-Docker-的方式及其优缺点总结">三种远程连接 Docker 的方式及其优缺点总结</h2><table><thead><tr><th>连接方式</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>1. SSH 方式 (<code>ssh://</code>)</strong></td><td>- 配置简单，无需额外开启 Docker TCP 端口和 TLS<br>- 安全性高，基于 SSH 加密和认证<br>- 支持密码和密钥登录<br>- 不用开放额外端口，防火墙友好<br>- 易于用 SSH 代理和密钥管理</td><td>- 需要远程用户有 Docker 权限（如属于 <code>docker</code> 组）<br>- 连接速度可能受 SSH 连接影响<br>- 需要在本地安装并配置 SSH</td><td>开发环境、内网管理、小规模远程操作</td></tr><tr><td><strong>2. TCP + TLS 方式</strong></td><td>- 标准的远程 Docker API 访问<br>- 支持证书认证，安全性高<br>- 可以配置多个客户端和权限控制<br>- 适合自动化脚本、CI/CD 访问</td><td>- 配置较复杂，需要生成和管理 CA、服务器和客户端证书<br>- 需要开放 TCP 端口（如 2376），增加安全风险<br>- 证书配置错误容易导致连接失败</td><td>生产环境、自动化集成、需要高安全认证</td></tr><tr><td><strong>3. TCP 明文访问（无 TLS）</strong></td><td>- 配置最简单，只需监听 TCP 端口<br>- 方便快速测试和调试</td><td>- 极度不安全，数据明文传输<br>- 任何人都可访问 Docker API，极易被攻击<br>- 生产环境严重不建议使用</td><td>仅限局域网内测试或极简环境</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何远程连接Docker&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com&quot;&gt;Docker官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/docker/"/>
    
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 命令 之 docker compose</title>
    <link href="https://blog.hanqunfeng.com/2025/06/04/docker-compose/"/>
    <id>https://blog.hanqunfeng.com/2025/06/04/docker-compose/</id>
    <published>2025-06-04T13:30:05.000Z</published>
    <updated>2025-06-05T06:53:58.871Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 Docker 命令 中 <code>docker compose</code> 的使用方法</p></li><li class="lvl-2"><p><a href="https://docs.docker.com">Docker官方文档</a></p></li><li class="lvl-2"><p><a href="https://docs.docker.com/compose/">docker compose</a></p></li><li class="lvl-2"><p><a href="https://docs.docker.com/reference/compose-file/">Compose file reference</a></p></li></ul><span id="more"></span><h2 id="docker-compose-是什么？"><code>docker compose</code> 是什么？</h2><ul class="lvl-0"><li class="lvl-2"><p>Docker Compose是一个用于定义和运行多容器应用程序的工具。</p></li><li class="lvl-2"><p>Compose简化了对整个应用程序堆栈的控制，便于在单个YAML配置文件中管理服务、网络和卷。然后，通过一个命令，您从配置文件中创建并启动所有服务。</p></li><li class="lvl-2"><p>Docker Compose 的优势：</p></li></ul><table><thead><tr><th>优点</th><th>描述</th></tr></thead><tbody><tr><td>简化控制</td><td>Docker Compose 允许在单个 YAML 文件中定义和管理多容器应用程序，简化了服务编排与协调，使环境管理和复制更容易。</td></tr><tr><td>高效的协作</td><td>配置文件易于共享，促进开发人员、运营团队和其他利益相关者之间的协作，从而提升工作流程效率和问题解决速度。</td></tr><tr><td>快速应用程序开发</td><td>Compose 利用缓存重复使用未更改服务的容器，加快环境变更速度，提高开发效率。</td></tr><tr><td>跨环境的可移植性</td><td>支持在 Compose 文件中使用变量，使配置能根据不同环境或用户进行自定义，增强了可移植性。</td></tr><tr><td>广泛的社区和支持</td><td>拥有活跃的社区，提供丰富的资源、教程和技术支持，有助于持续改进与高效排障。</td></tr></tbody></table><h2 id="docker-compose-安装"><code>docker compose</code> 安装</h2><ul class="lvl-0"><li class="lvl-2"><p>同docker一起安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装docker同时安装docker compose，这里 docker-compose-plugin 就是docker compose</span></span><br><span class="line"><span class="built_in">sudo</span> dnf install docker-ce-3:26.1.3-1.el8 docker-ce-cli-3:26.1.3-1.el8 containerd.io docker-buildx-plugin docker-compose-plugin -y</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>单独安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若安装docker时没有安装 docker-compose-plugin ，则需要单独安装</span></span><br><span class="line"><span class="built_in">sudo</span> dnf install docker-compose-plugin -y</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看版本</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose version</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>直接下载docker-compose的命令文件</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install Docker Compose，注意通过这种方式安装的compose的使用方式为 `docker-compose`，而非标准的 `docker compose`</span></span><br><span class="line"><span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># Make the docker-compose command available</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># Check Docker Compose version</span></span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure></div><h2 id="docker-compose-命令"><code>docker compose</code> 命令</h2><table><thead><tr><th>命令</th><th>中文说明</th><th>示例</th></tr></thead><tbody><tr><td>attach</td><td>连接到服务的运行中容器的标准输入、输出和错误流</td><td><code>docker compose attach web</code></td></tr><tr><td>build</td><td>构建或重新构建服务</td><td><code>docker compose build</code></td></tr><tr><td>config</td><td>解析并标准化 Compose 文件</td><td><code>docker compose config</code></td></tr><tr><td>cp</td><td>在服务容器与本地文件系统之间复制文件/文件夹</td><td><code>docker compose cp web:/app/file.txt ./file.txt</code></td></tr><tr><td>create</td><td>为服务创建容器，但不启动</td><td><code>docker compose create</code></td></tr><tr><td>down</td><td>停止并移除容器、网络等资源</td><td><code>docker compose down</code></td></tr><tr><td>events</td><td>实时接收容器事件</td><td><code>docker compose events</code></td></tr><tr><td>exec</td><td>在运行中的容器中执行命令</td><td><code>docker compose exec web ls /app</code></td></tr><tr><td>images</td><td>列出已创建容器所使用的镜像</td><td><code>docker compose images</code></td></tr><tr><td>kill</td><td>强制停止服务容器</td><td><code>docker compose kill</code></td></tr><tr><td>logs</td><td>查看服务容器的日志输出</td><td><code>docker compose logs</code></td></tr><tr><td>ls</td><td>列出当前运行的 Compose 项目</td><td><code>docker compose ls</code></td></tr><tr><td>pause</td><td>暂停服务容器</td><td><code>docker compose pause</code></td></tr><tr><td>port</td><td>显示某端口映射的公网地址</td><td><code>docker compose port web 80</code></td></tr><tr><td>ps</td><td>列出服务的容器</td><td><code>docker compose ps</code></td></tr><tr><td>pull</td><td>拉取服务使用的镜像</td><td><code>docker compose pull</code></td></tr><tr><td>push</td><td>推送服务镜像到仓库</td><td><code>docker compose push</code></td></tr><tr><td>restart</td><td>重启服务容器</td><td><code>docker compose restart</code></td></tr><tr><td>rm</td><td>移除已停止的服务容器</td><td><code>docker compose rm</code></td></tr><tr><td>run</td><td>在服务上运行一次性命令</td><td><code>docker compose run web echo Hello</code></td></tr><tr><td>scale</td><td>扩展服务实例数量</td><td><code>docker compose up --scale web=3</code></td></tr><tr><td>start</td><td>启动已存在但已停止的服务容器</td><td><code>docker compose start</code></td></tr><tr><td>stats</td><td>实时显示容器资源使用情况</td><td><code>docker compose stats</code></td></tr><tr><td>stop</td><td>停止运行中的服务容器</td><td><code>docker compose stop</code></td></tr><tr><td>top</td><td>显示容器内的运行进程</td><td><code>docker compose top</code></td></tr><tr><td>unpause</td><td>取消暂停服务容器</td><td><code>docker compose unpause</code></td></tr><tr><td>up</td><td>创建并启动服务容器</td><td><code>docker compose up</code></td></tr><tr><td>version</td><td>显示 Docker Compose 版本信息</td><td><code>docker compose version</code></td></tr><tr><td>wait</td><td>阻塞直到第一个服务容器停止</td><td><code>docker compose wait</code></td></tr><tr><td>watch</td><td>监听服务构建上下文变更并重新构建/刷新容器</td><td><code>docker compose watch</code></td></tr></tbody></table><h3 id="docker-compose-常用命令"><code>docker compose</code> 常用命令</h3><ul class="lvl-0"><li class="lvl-2"><p>启动与关闭</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动并运行，默认使用当前目录的 docker-compose.yml 文件</span></span><br><span class="line">docker compose up</span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">docker compose up -d</span><br><span class="line"><span class="comment"># 指定compose文件</span></span><br><span class="line">docker compose -f docker-compose.yml up -d</span><br><span class="line"><span class="comment"># 启动时重建服务，当修改了 compose 文件时</span></span><br><span class="line">docker compose up --build</span><br><span class="line"><span class="comment"># 停止service</span></span><br><span class="line">docker compose stop</span><br><span class="line"><span class="comment"># 强制停止service，当 stop 命令无法停止时</span></span><br><span class="line">docker compose <span class="built_in">kill</span></span><br><span class="line"><span class="comment"># 重启service</span></span><br><span class="line">docker compose restart</span><br><span class="line"><span class="comment"># 删除service，-s 参数表示删除前先停止容器</span></span><br><span class="line">docker compose <span class="built_in">rm</span> -s</span><br><span class="line"><span class="comment"># 停止并删除service，同时删除网络，但不会删除卷</span></span><br><span class="line">docker compose down</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>监控</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出当前运行的 Compose 项目</span></span><br><span class="line">docker compose <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 查看service状态，-a 显示所有service</span></span><br><span class="line">docker compose ps -a</span><br><span class="line"><span class="comment"># 解析并标准化 compose 文件，这个命令可以检查 docker-compose.yml 文件语法是否正确</span></span><br><span class="line">docker compose config</span><br><span class="line"><span class="comment"># 查看使用的镜像</span></span><br><span class="line">docker compose images</span><br><span class="line"><span class="comment"># 查看进程</span></span><br><span class="line">docker compose top</span><br><span class="line"><span class="comment"># 查看service资源使用情况</span></span><br><span class="line">docker compose stats</span><br><span class="line"><span class="comment"># 查看service日志，-f 表示持续跟踪</span></span><br><span class="line">docker compose logs -f</span><br><span class="line"><span class="comment"># 查看指定service的日志</span></span><br><span class="line">docker compose logs -f service_name</span><br><span class="line"><span class="comment"># 进入指定的service容器</span></span><br><span class="line">docker compose <span class="built_in">exec</span> service_name bash</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>升级镜像</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先停止所有service</span></span><br><span class="line">docker compose down</span><br><span class="line"><span class="comment"># 拉取最新镜像</span></span><br><span class="line">docker compose pull</span><br><span class="line"><span class="comment"># 启动service</span></span><br><span class="line">docker compose up -d --build</span><br></pre></td></tr></table></figure><h2 id="docker-compose-yml-的语法"><code>docker-compose.yml</code> 的语法</h2><ul class="lvl-0"><li class="lvl-2"><p>常用指令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3.8&quot;</span> <span class="comment"># 定义版本，表示当前使用的 docker compose 语法的版本，已过时 ，新版 Docker 会使用最新的 Compose Specification 自动解析</span></span><br><span class="line">name: <span class="string">&quot;project_name&quot;</span> <span class="comment">#  项目名，默认 docker-compose.yml 文件所在的目录名，不推荐设置</span></span><br><span class="line">services: <span class="comment"># 服务列表</span></span><br><span class="line">  servicename: <span class="comment"># 服务名字，只能包含小写字母、数字、下划线、中划线，必须以字母或数字开头</span></span><br><span class="line">    build: <span class="comment"># 基于Dockerfile构建目录，如果同时设置了 image 选项，则image指定的就是构建后的镜像名称</span></span><br><span class="line">    image: <span class="comment"># 镜像的名字，默认从远程仓库拉取，如果配置了 build 选项，则image指定的就是构建后的镜像名称</span></span><br><span class="line">    <span class="built_in">command</span>: <span class="comment"># 可选，如果设置，则会覆盖默认镜像里的 CMD 命令</span></span><br><span class="line">    environment: <span class="comment"># 可选，等价于 docker container run 里的 --env 选项设置环境变量</span></span><br><span class="line">    volumes: <span class="comment"># 可选，等价于 docker container run 里的 -v 选项 绑定数据卷</span></span><br><span class="line">    networks: <span class="comment"># 可选，等价于 docker container run 里的 --network 选项指定网络</span></span><br><span class="line">    ports: <span class="comment"># 可选，等价于 docker container run 里的 -p 选项指定端口映射</span></span><br><span class="line">    expose: <span class="comment"># 可选，指定容器暴露的端口</span></span><br><span class="line">    depends_on: <span class="comment"># 服务依赖的其它服务</span></span><br><span class="line">    env_file: <span class="comment"># 环境变量文件，生产环境更推荐这种方式</span></span><br><span class="line">  servicename2:</span><br><span class="line">    image:</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">    networks:</span><br><span class="line">    ports:</span><br><span class="line">  servicename3:</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line"></span><br><span class="line">volumes: <span class="comment"># 可选，等价于 docker volume create</span></span><br><span class="line">networks: <span class="comment"># 可选，等价于 docker network create</span></span><br></pre></td></tr></table></figure><h3 id="volumes">volumes</h3><ul class="lvl-0"><li class="lvl-2"><p>卷是由容器引擎实现的持久数据存储。Compose 为服务提供了一种中立的挂载卷的方式，并通过配置参数将卷分配给基础架构。顶级volumes声明允许您配置可在多个服务之间重复使用的命名卷。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/database</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 挂载卷映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/etc/data</span> <span class="comment"># 挂载到容器的/etc/data目录</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">backup:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">backup-service</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/var/lib/backup/data</span> <span class="comment"># 一个卷可以被多个服务使用</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment"># 存储卷配置</span></span><br><span class="line">  <span class="attr">db-data:</span>  <span class="comment"># 创建一个名为db-data的卷，实际的网络名称是 容器组名称_这里的名称</span></span><br></pre></td></tr></table></figure><h4 id="volumes-的属性">volumes 的属性</h4><ul class="lvl-0"><li class="lvl-2"><p>driver: 卷类型，默认为local，指定应使用哪个卷驱动程序。如果该驱动程序不可用，Compose 将返回错误并且不会部署该应用程序。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span> <span class="comment"># 声明一个名为db-data的卷</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span> <span class="comment"># 指定卷类型，这个是默认值，可以不配置</span></span><br><span class="line">  <span class="attr">db-data2:</span> <span class="comment"># 声明一个名为db-data2的卷，这是最简单的 volumes 配置</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>driver_opts: 卷类型参数，指定要传递给此卷驱动程序的选项列表（以键值对的形式）。这些选项与驱动程序相关。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br><span class="line">    <span class="attr">driver_opts:</span> <span class="comment"># 卷类型参数，指定要传递给此卷驱动程序的选项列表（以键值对的形式）</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">&quot;nfs&quot;</span> <span class="comment"># 卷类型，指定应使用哪个卷驱动程序，这里是nfs</span></span><br><span class="line">      <span class="attr">o:</span> <span class="string">&quot;addr=10.40.0.199,nolock,soft,rw&quot;</span> <span class="comment"># nfs参数，addr为nfs服务器地址，nolock为不锁定文件，soft为软链接，rw为读写权限</span></span><br><span class="line">      <span class="attr">device:</span> <span class="string">&quot;:/docker/example&quot;</span> <span class="comment"># nfs挂载路径</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>external: 卷是否为外部卷，默认为false</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span> <span class="comment"># true 表示不会创建，而是使用已存在的，即会去volumes中查找(docker volume ls) 容器组名称_da-data ，默认为false</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>name: 卷的名称，默认为 容器组名称_声明的名称</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">db-data</span> <span class="comment"># 创建一个名为db-data的卷，实际的卷名称就是 db-data，不会再加上容器组名称前缀</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span> <span class="comment"># name 属性经常与  external: true 一起使用</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>labels: 用于向卷添加元数据，可以添加任意的键值对</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">com.example.description:</span> <span class="string">&quot;Database volume&quot;</span></span><br><span class="line">      <span class="attr">com.example.department:</span> <span class="string">&quot;IT/Ops&quot;</span></span><br><span class="line">      <span class="attr">com.example.label-with-empty-value:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="networks">networks</h3><ul class="lvl-0"><li class="lvl-2"><p>网络使服务能够相互通信。默认情况下，Compose 会为您的应用设置单个网络。服务的每个容器都会加入默认网络，并且该网络上的其他容器都可以访问，并且可以通过服务名称发现。顶级networks元素允许您配置可在多个服务之间重复使用的命名网络。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/webapp</span></span><br><span class="line">    <span class="attr">networks:</span>  <span class="comment">#  网络映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">front-tier</span> <span class="comment">#  加入front-tier网络</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">back-tier</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span>    <span class="comment"># 网络配置</span></span><br><span class="line">  <span class="attr">front-tier:</span> <span class="comment"># 创建一个名为front-tier的网络，实际的网络名称是 容器组名称_front-tier</span></span><br><span class="line">  <span class="attr">back-tier:</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果 Compose 文件未显式声明网络，Compose 将使用隐式default网络。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">some-service:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个例子实际上等同于：</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">some-service:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">foo</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">default:</span> &#123;&#125;</span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="networks-的属性">networks 的属性</h4><ul class="lvl-0"><li class="lvl-2"><p>driver: 网络类型，默认为bridge</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">gitea:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>driver_opts: 网络类型参数，指定要传递给此网络驱动程序的选项列表（以键值对的形式）。这些选项与驱动程序相关。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">driver_opts:</span></span><br><span class="line">      <span class="attr">com.docker.network.bridge.host_binding_ipv4:</span> <span class="string">&quot;127.0.0.1&quot;</span> <span class="comment"># 设置容器端口绑定到主机的哪个 IP（如 &quot;127.0.0.1&quot;，绑定到本地）</span></span><br></pre></td></tr></table></figure><blockquote><p>driver_opts 常见配置项（针对 bridge 网络驱动）</p></blockquote><table><thead><tr><th>选项键名（<code>driver_opts</code>）</th><th>说明</th></tr></thead><tbody><tr><td><code>com.docker.network.bridge.name</code></td><td>指定桥接网络的名称（默认是随机生成，如 <code>br-xxxxx</code>）</td></tr><tr><td><code>com.docker.network.bridge.enable_icc</code></td><td>是否允许容器之间的通信（<code>true</code> 或 <code>false</code>）</td></tr><tr><td><code>com.docker.network.bridge.enable_ip_masquerade</code></td><td>是否启用 IP 假冒（NAT，通常用于外网访问）</td></tr><tr><td><code>com.docker.network.bridge.host_binding_ipv4</code></td><td>设置容器端口绑定到主机的哪个 IP（如 <code>&quot;127.0.0.1&quot;</code>，绑定到本地）</td></tr><tr><td><code>com.docker.network.bridge.default_bridge</code></td><td>是否将该网络设置为默认 bridge 网络（<code>true</code> 或 <code>false</code>）</td></tr><tr><td><code>com.docker.network.driver.mtu</code></td><td>设置网络的最大传输单元（MTU，例如 <code>&quot;1500&quot;</code>）</td></tr><tr><td><code>com.docker.network.bridge.allow_non_default_bridge</code></td><td>是否允许容器加入非默认的 bridge 网络（较少使用）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>attachable: 如果为true，则允许将其它独立容器也加入到此网络。默认值为false。如果独立容器连接到此网络，它可以与同样连接到此网络的服务和其他独立容器进行通信。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">gitea:</span></span><br><span class="line">    <span class="attr">attachable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>external: true 表示不会创建新的网络，回去networks中查找（docker network ls），默认为false</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">gitea:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>name: 网络名称，不会再加上容器组名称前缀</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">gitea:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gitea</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span> <span class="comment"># name 属性经常与  external: true 一起使用</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>labels: 用于向网络添加元数据，可以添加任意的键值对</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mynet1:</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">com.example.description:</span> <span class="string">&quot;Financial transaction network&quot;</span></span><br><span class="line">      <span class="attr">com.example.department:</span> <span class="string">&quot;Finance&quot;</span></span><br><span class="line">      <span class="attr">com.example.label-with-empty-value:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>internal: 默认情况下，Compose 提供网络的外部连接。internal当设置为 时true，可让您创建与外部隔离的网络。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">gitea:</span></span><br><span class="line">    <span class="attr">internal:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="services">services</h3><ul class="lvl-0"><li class="lvl-2"><p>服务是应用程序中计算资源的抽象定义，可以独立于其他组件进行扩展或替换。服务由一组容器支持，由平台根据复制要求和布局约束运行。由于服务由容器支持，因此它们由 Docker 镜像和一组运行时参数定义。服务中的所有容器都使用这些参数以相同的方式创建。</p></li><li class="lvl-2"><p>service 包含的属性非常多，具体请参考<a href="https://docs.docker.com/reference/compose-file/services/">services顶级元素</a>，这里只介绍比较常用的属性，以<code>gitea</code>的<code>docker-compose.yml</code>为例</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># version: &#x27;3.8&#x27; # 配置文件版本，已过时，配置上会告警但不会报错</span></span><br><span class="line"><span class="comment"># name: gitea # 容器组名称，默认使用所在目录的名称，不推荐使用</span></span><br><span class="line"><span class="attr">networks:</span> <span class="comment"># 网络配置</span></span><br><span class="line">  <span class="attr">gitea:</span> <span class="comment"># 创建一个名为gitea的网络，实际的网络名称是 gitea_gitea，即 容器组名称_这里的名称</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">false</span> <span class="comment"># 如果为true，则表示此网络不会由compose创建，而是使用已有的网络，默认为false</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span>  <span class="comment"># 网络类型，默认为bridge</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment"># 存储卷配置</span></span><br><span class="line">  <span class="attr">gitea:</span> <span class="comment"># 创建一个名为gitea的存储卷，实际的卷名称是 gitea_gitea，即 容器组名称_这里的名称</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span> <span class="comment"># 存储卷类型，默认为local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 服务配置，这里可以定义一组容器</span></span><br><span class="line">  <span class="attr">server:</span> <span class="comment"># 定义一个名为server的服务，注意这个不是容器名称</span></span><br><span class="line">    <span class="comment"># build: . # 构建镜像，使用当前目录下的Dockerfile</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitea/gitea:latest</span> <span class="comment"># 镜像名称</span></span><br><span class="line">    <span class="comment"># container_name: gitea #  容器名称，默认为 “容器组名称-服务名称-索引”，不推荐配置，因为 水平扩展(--scale) 时,容器名称不能重复</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="comment"># 定义环境变量</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">USER_UID=1000</span> <span class="comment"># key=value</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">USER_GID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_TYPE=mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_HOST=db:3306</span> <span class="comment"># 这里配置的 db 就是 下面的服务名称，相同 network 下的服务名称，docker compose会自动解析为容器的ip地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_NAME=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_USER=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PASSWD=gitea</span></span><br><span class="line">    <span class="comment"># env_file: .gitea.env # 从 .gitea.env 文件读取环境变量，生产环境更推荐</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 容器启动时，自动重启</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="comment"># 网络关联</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gitea</span> <span class="comment"># 网络名称，就是上面创建的gitea网络</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment">#  数据卷关联</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gitea:/data</span> <span class="comment"># volume映射，数据卷名称:/容器路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/timezone:/etc/timezone:ro</span> <span class="comment"># 路径映射，宿主机路径:/容器路径:读写权限</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment"># 端口映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span> <span class="comment"># 宿主机端口:容器端口</span></span><br><span class="line">    <span class="attr">depends_on:</span> <span class="comment"># 启动依赖，就是依赖的服务启动后才能启动本服务</span></span><br><span class="line">      <span class="attr">db:</span> <span class="comment"># 启动db服务</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span> <span class="comment"># 服务通过健康检查，也可以配置为 service_started：服务启动，这个是默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span> <span class="comment"># 数据库服务</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8</span> <span class="comment"># 镜像</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="comment"># 环境变量</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=gitea</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 启动策略</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="comment"># 网络映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gitea</span> <span class="comment"># 映射到gitea网络</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 卷映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span> <span class="comment"># 宿主机路径:/容器路径，这里宿主机支持相对路径</span></span><br><span class="line">    <span class="attr">healthcheck:</span> <span class="comment"># 健康检查</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;mysql -u root -pgitea&quot;</span>, <span class="string">&quot;-e &#x27;SELECT 1;&#x27;&quot;</span>] <span class="comment"># 执行命令，如果返回0，则健康检查通过，这里不支持上面的环境变量，test只支持  CMD-SHELL 和 CMD</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span> <span class="comment"># 健康检查间隔</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span> <span class="comment"># 健康检查超时时间</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span> <span class="comment"># 健康检查重试次数</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>build</code>: 构建镜像</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span> <span class="comment"># Dockerfile的目录，“.” 表示使用当前目录下的Dockerfile</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/webapp</span> <span class="comment"># 镜像名称，如果有build，则该名称就是build后的镜像名称，如果没有build，则就会从远程仓库拉取</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./webapp</span> <span class="comment"># Dockerfile的目录，默认是当前目录</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> <span class="comment"># 构建镜像的Dockerfile名称，默认是Dockerfile</span></span><br><span class="line">      <span class="attr">platforms:</span> <span class="comment"># 构建镜像的架构</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">linux/amd64</span> <span class="comment"># 构建镜像的架构，默认是当前架构</span></span><br><span class="line">      <span class="attr">args:</span> <span class="comment"># 构建镜像的参数</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">FOO=bar</span></span><br><span class="line">      <span class="attr">labels:</span> <span class="comment"># 构建镜像的标签</span></span><br><span class="line">        <span class="attr">com.example.description:</span> <span class="string">&quot;Accounting webapp&quot;</span></span><br><span class="line">        <span class="attr">com.example.department:</span> <span class="string">&quot;Finance&quot;</span></span><br><span class="line">        <span class="attr">com.example.label-with-empty-value:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>command</code>: 覆盖容器映像声明的默认命令</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/webapp</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>entrypoint</code>: 声明服务容器的默认入口点，这覆盖了服务Dockerfile中的ENTRYPOINT指令。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/webapp</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">php</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">memory_limit=-1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">vendor/bin/phpunit</span></span><br><span class="line">      <span class="comment"># 如果值为null，则使用图像的默认入口点。 entrypoint: null</span></span><br><span class="line">      <span class="comment"># 如果值是 []（空列表）或 &#x27;&#x27;（空字符串），图像声明的默认入口点被忽略，或者换句话说，被覆盖为空。 entrypoint: []</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>depends_on</code>: 服务启动依赖，就是依赖的服务启动后才能启动本服务</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span> <span class="comment"># 短语法</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="attr">db:</span>  <span class="comment"># 长语法</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span> <span class="comment"># 满足的条件</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="literal">true</span>      <span class="comment"># 当设置为true，Compose在更新依赖服务后重新启动此服务。</span></span><br><span class="line">      <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_started</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## condition：设置依赖性被视为满足的条件</span></span><br><span class="line"><span class="comment">#   service_started：相当于之前描述的简短语法</span></span><br><span class="line"><span class="comment">#   service_healthy：指定在启动依赖服务之前，依赖预期为“健康”（如healthcheck所示）。</span></span><br><span class="line"><span class="comment">#   service_completed_successfully：指定在启动依赖服务之前，依赖项预计将运行到成功完成。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>environment</code>: 定义环境变量</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/webapp</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FOO=bar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">BAZ=qux</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/webapp</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">FOO:</span> <span class="string">bar</span></span><br><span class="line">      <span class="attr">BAZ:</span> <span class="string">qux</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>env_file</code>: 用于指定一个或多个包含要传递到容器的环境变量的文件。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/webapp</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./a.env</span> <span class="comment"># 列表中的文件是从上到下处理的。对于两个环境文件中指定的相同变量，列表中最后一个文件的值是有效的。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./b.env</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/webapp</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">./default.env</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span> <span class="comment"># default</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">./override.env</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span> <span class="comment"># 当required设置为false且.env文件缺失时，Compose会忽略</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>restart</code>: 定义平台在容器终止时适用的策略</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/webapp</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;no&quot;</span>            <span class="comment"># 默认重启策略。在任何情况下，它都不会重新启动容器。</span></span><br><span class="line">    <span class="comment"># restart: always        # 策略总是重新启动容器，直到它被移除。</span></span><br><span class="line">    <span class="comment"># restart: on-failure    # 如果退出代码表明错误，策略将重新启动容器。</span></span><br><span class="line">    <span class="comment"># restart: on-failure:3  # 如果退出代码表明错误，策略将重新启动容器。但仅尝试重启3次。</span></span><br><span class="line">    <span class="comment"># restart: unless-stopped # 无论退出代码如何，策略都会重新启动容器，但当服务停止或删除时，策略会停止重新启动。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>healthcheck</code>: 健康检查。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/webapp</span></span><br><span class="line">    <span class="attr">healthcheck:</span>  <span class="comment"># 健康检查</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost&quot;</span>] <span class="comment"># 监控检查时执行的命令</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m30s</span> <span class="comment"># 健康检查的间隔，默认值为 30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span>    <span class="comment">#  健康检查的超时时间，默认值为 30s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span>      <span class="comment"># 健康检查的尝试次数，默认值为 3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">40s</span> <span class="comment"># 启动宽限期：在此期间，失败不会计入重试次数（仅用于判断服务是否启动完毕）</span></span><br><span class="line">      <span class="attr">start_interval:</span> <span class="string">5s</span> <span class="comment"># 启动宽限期内检查的频率，本示例为在前 40 秒内每 5 秒检查一次</span></span><br></pre></td></tr></table></figure><blockquote><p>test定义Compose运行的命令来检查容器运行状况。它可以是字符串，也可以是列表。如果是列表，第一个项目必须是NONE、CMD或CMD-SHELL。如果它是一个字符串，它等同于指定CMD-SHELL后跟该字符串。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line"><span class="comment"># 使用CMD-SHELL运行配置为字符串的命令，使用容器的默认外壳（Linux的/bin/sh）。以下两种形式是等价的</span></span><br><span class="line"><span class="attr">test:</span> [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;curl -f http://localhost || exit 1&quot;</span>]</span><br><span class="line"><span class="attr">test:</span> <span class="string">curl</span> <span class="string">-f</span> <span class="string">https://localhost</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>test 中的 CMD 和 CMD-SHELL 是两种不同的执行方式，它们的主要区别在于：</p></blockquote><table><thead><tr><th>项目</th><th><code>CMD</code></th><th><code>CMD-SHELL</code></th></tr></thead><tbody><tr><td>✅ <strong>用途</strong></td><td>直接执行命令（不通过 shell）</td><td>通过 shell（如 <code>/bin/sh -c</code>）执行命令</td></tr><tr><td>🧾 <strong>写法格式</strong></td><td><code>[&quot;CMD&quot;, &quot;executable&quot;, &quot;arg1&quot;, &quot;arg2&quot;]</code></td><td><code>[&quot;CMD-SHELL&quot;, &quot;command string&quot;]</code></td></tr><tr><td>🔧 <strong>是否使用 shell</strong></td><td>否</td><td>是</td></tr><tr><td>🧠 <strong>是否支持 shell 语法</strong></td><td>❌ 否<br>（不能使用 <code>&amp;&amp;</code>、 <code>||</code>、<code>\$VAR</code> 等）</td><td>✅ 是<br>（支持管道、重定向、变量、命令组合）</td></tr><tr><td>🛡️ <strong>安全性/可移植性</strong></td><td>✅ 更安全，执行更明确</td><td>⚠ 依赖容器中存在 shell（如 <code>/bin/sh</code>）</td></tr><tr><td>⚙️ <strong>执行效率</strong></td><td>✅ 稍快，因无需 shell 解析</td><td>⚠ 稍慢，需通过 shell 启动</td></tr><tr><td>📦 <strong>推荐使用场景</strong></td><td>- 简单健康检查命令<br>- 安全环境<br>- 精简镜像</td><td>- 需要使用逻辑控制（<code>||</code>, <code>&amp;&amp;</code>）<br>- 复杂检查逻辑</td></tr><tr><td>📌 <strong>示例</strong></td><td><code>[&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost&quot;]</code></td><td><code>[&quot;CMD-SHELL&quot;, &quot;curl -f http\://localhost || exit 1&quot;]</code></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p><code>volumes</code>: 挂载数据卷。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 长语法格式</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/backend</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span>   <span class="comment"># 安装类型。可以是是volume、bind、tmpfs、image、npipe、cluster</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">db-data</span> <span class="comment"># 挂载的源、绑定挂载的主机上的路径、映像挂载的Docker映像引用或顶层volumes键中定义的卷名称。不适用于tmpfs支架。</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/data</span> <span class="comment"># 容器中装载卷的路径。</span></span><br><span class="line">        <span class="attr">volume:</span>  <span class="comment"># 配置其他卷选项</span></span><br><span class="line">          <span class="attr">nocopy:</span> <span class="literal">true</span> <span class="comment"># 在创建卷时禁用从容器复制数据的标志，默认值为false。</span></span><br><span class="line">          <span class="attr">subpath:</span> <span class="string">sub</span> <span class="comment"># 挂载卷的子目录。即 db-data/sub</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span> <span class="comment"># bind 表示挂载主机上的路径</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">/var/run/postgres/postgres.sock</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/var/run/postgres/postgres.sock</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment"># 声明数据卷</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 短语法格式</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example/backend</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/data</span> <span class="comment"># 这种语法不支持 subpath 和 nocopy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>networks</code>: 配置网络。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">some-service:</span></span><br><span class="line">    <span class="attr">networks:</span>  <span class="comment"># 配置网络</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">some-network</span> <span class="comment"># 关联网络</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">other-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span> <span class="comment"># 声明网络</span></span><br><span class="line">  <span class="attr">some-network:</span></span><br><span class="line">  <span class="attr">other-network:</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 Docker 命令 中 &lt;code&gt;docker compose&lt;/code&gt; 的使用方法&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com&quot;&gt;Docker官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;docker compose&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/reference/compose-file/&quot;&gt;Compose file reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/docker/"/>
    
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 命令 之 网络(Network)</title>
    <link href="https://blog.hanqunfeng.com/2025/05/28/docker-command-network/"/>
    <id>https://blog.hanqunfeng.com/2025/05/28/docker-command-network/</id>
    <published>2025-05-28T13:40:05.000Z</published>
    <updated>2025-05-29T09:58:22.618Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 Docker 命令 中 网络管理 相关命令</p></li><li class="lvl-2"><p><a href="https://docs.docker.com">Docker官方文档</a></p></li></ul><span id="more"></span><h2 id="什么是Network-网络">什么是Network(网络)?</h2><ul class="lvl-0"><li class="lvl-2"><p>在 Docker 中，<strong>网络（Network）</strong> 是容器之间通信、容器与外部通信的重要机制。Docker 提供了一套灵活的网络模型，使得你可以自由配置容器的网络环境以适配不同场景。</p></li><li class="lvl-2"><p>安装docker时，会自动在宿主机上安装一个 <code>docker0</code> 网络设备，它是一个网桥设备，用于 Docker 各容器及宿主机的网络通信。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看宿主机网卡信息，可以找到docker0</span></span><br><span class="line">$ ip addr</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 9001 qdisc mq state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 0a:6b:88:11:66:39 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.250.0.205/24 brd 10.250.0.255 scope global dynamic noprefixroute eth0</span><br><span class="line">       valid_lft 3076sec preferred_lft 3076sec</span><br><span class="line">    inet6 fe80::86b:88ff:fe11:6639/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:d6:d5:09:b1 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:d6ff:fed5:9b1/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="comment">## 说明</span></span><br><span class="line">eth0 宿主机的ip地址是 10.250.0.205</span><br><span class="line">docker0 本身的ip地址是 172.17.0.1</span><br><span class="line">docker0 的子网掩码是 255.255.0.0</span><br><span class="line">docker0 的广播地址是 172.17.255.255</span><br><span class="line">docker0 可以为容器分配的ip地址范围是 172.17.0.2-172.17.255.254，总计65534个ip地址</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>既然docker0是一个网桥设备，我们可以通过如下命令来查看网桥的详细信息：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brctl show</span><br><span class="line"><span class="comment">## 输出结果</span></span><br><span class="line">brctl show</span><br><span class="line">bridge name    bridge <span class="built_in">id</span>      STP enabled    interfaces</span><br><span class="line">docker0    8000.0242d6d509b1        no</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动docker服务后，docker就为我们自动创建了三个网络，可以通过如下命令查看</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker network <span class="built_in">ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">4182e112bf34   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">958daf8a8a0d   host      host      <span class="built_in">local</span></span><br><span class="line">4674a17c6617   none      null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这里<code>NAME</code>为<code>bridge</code>的网络就是与<code>docker0</code>设备相对应的网络，其也是docker<code>默认</code>的网络，如果创建的容器没有指定网络，那么容器就会加入这个 <code>bridge</code> 网络。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  启动一个容器，没有指定网络</span></span><br><span class="line">docker run -itd --name ap1 alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时在宿主机上查看网卡信息，会看到多出一个设备</span></span><br><span class="line">ip addr</span><br><span class="line"><span class="comment">## 输出结果</span></span><br><span class="line">10: vethc0e0cc3@if9: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether c6:0d:02:c8:<span class="built_in">df</span>:a4 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::c40d:2ff:fec8:dfa4/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的网卡信息</span></span><br><span class="line">docker <span class="built_in">exec</span> -it ap1 ip addr</span><br><span class="line"><span class="comment">## 输出结果</span></span><br><span class="line">9: eth0@if10: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue state UP</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment">## 此时聪明的你已经发现了：宿主机的网卡与容器的网卡是成对出现的，并且基于序号进行关联</span></span><br><span class="line">宿主机: 10 : veth c0e0cc3 @ <span class="keyword">if</span> 9  <span class="comment"># 序号 10 与 容器后缀的 10 匹配，veth 是虚拟网卡，c0e0cc3 是随机字符串，if 是 interface</span></span><br><span class="line">容器:    9 : eth0         @ <span class="keyword">if</span> 10 <span class="comment"># 序号 9 与宿主机的后缀 9 匹配，eth0 是容器的网卡，if 是 interface</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时查看宿主机的网桥信息</span></span><br><span class="line">brctl show</span><br><span class="line"><span class="comment">## 输出结果，可以在 interfaces 中看到 vethc0e0cc3，说明 vethc0e0cc3 已经加入到网桥中</span></span><br><span class="line">bridge name  bridge <span class="built_in">id</span>      STP enabled  interfaces</span><br><span class="line">docker0   8000.0242d6d509b1      no  vethc0e0cc3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络中的容器信息，这里 jq 是 json 格式化，可以通过 dnf install jq -y 安装</span></span><br><span class="line">docker network inspect bridge --format <span class="string">&#x27;&#123;&#123;json .Containers&#125;&#125;&#x27;</span> | jq</span><br><span class="line"><span class="comment">## 输出结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;c2436a1d750cc3de3a6f8ab8a693af25b3371aa8f7f168d5561538dcd4a8ff2d&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;ap1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;75469fddbbdeb8b7a328c1a1c3cc7070bb1a3e102f5fb97cc332dcbc22829af5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.2/16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取容器的 IP 地址</span></span><br><span class="line">docker <span class="built_in">exec</span> ap1 hostname -i</span><br><span class="line"><span class="comment">## 输出结果</span></span><br><span class="line">172.17.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相同网络设备下的容器可以通过 IP 地址通信</span></span><br><span class="line"><span class="comment"># 我们再创建一个容器，并查看能否正常通信</span></span><br><span class="line">docker run -itd --name ap2 alpine</span><br><span class="line">docker <span class="built_in">exec</span> -it ap2 ping 172.17.0.2</span><br><span class="line"><span class="comment">## 输出结果，说明可以通过IP地址通信</span></span><br><span class="line">PING 172.17.0.2 (172.17.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.17.0.2: <span class="built_in">seq</span>=0 ttl=64 time=0.137 ms</span><br><span class="line">64 bytes from 172.17.0.2: <span class="built_in">seq</span>=1 ttl=64 time=0.084 ms</span><br><span class="line">64 bytes from 172.17.0.2: <span class="built_in">seq</span>=2 ttl=64 time=0.081 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络中的容器</span></span><br><span class="line">docker network inspect bridge --format <span class="string">&#x27;&#123;&#123;json .Containers&#125;&#125;&#x27;</span> | jq</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;9d3ed5be1916b14ec9befe3649c08cc9de247c595de248600f8ef8d0fc16c5cb&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;ap2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;35615a7ec10842401ad8c40187c792555b5089551a8eca39ddff6734aeba549e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:03&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.3/16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;c2436a1d750cc3de3a6f8ab8a693af25b3371aa8f7f168d5561538dcd4a8ff2d&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;ap1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;75469fddbbdeb8b7a328c1a1c3cc7070bb1a3e102f5fb97cc332dcbc22829af5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.2/16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否可以通过容器名称访问</span></span><br><span class="line">docker <span class="built_in">exec</span> -it ap2 ping ap1</span><br><span class="line"><span class="comment">## 输出，不可以通过容器名称访问</span></span><br><span class="line">ping: bad address <span class="string">&#x27;ap1&#x27;</span></span><br><span class="line"><span class="comment">## 如果希望通过容器名称访问，我们可以通过 docker network create 创建一个新的网络</span></span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>如果没有安装 brctl，可以通过如下方式安装</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centos7:</span></span><br><span class="line">yum install bridge-utils -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos8: 不支持yum源安装，需要手动编译安装</span></span><br><span class="line"><span class="comment"># 下载源码安装，目前最新版本为1.7.1</span></span><br><span class="line">wget https://mirrors.edge.kernel.org/pub/linux/utils/net/bridge-utils/bridge-utils-1.7.1.tar.gz</span><br><span class="line">tar -zxvf bridge-utils-1.7.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> bridge-utils-1.7.1</span><br><span class="line"><span class="comment"># 需要先安装编译所需的工具和依赖</span></span><br><span class="line">dnf install autoconf automake libtool make -y</span><br><span class="line"><span class="comment"># 因为源码目录中没有 configure 文件（但有 configure.ac），所以需要先运行如下命令生成 configure 文件</span></span><br><span class="line">autoreconf -i</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">./configure</span><br><span class="line"><span class="comment"># 编译 且 安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 添加到环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/usr/local/sbin&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">brctl --version</span><br><span class="line"><span class="comment">## 输出结果</span></span><br><span class="line">bridge-utils, 1.7</span><br></pre></td></tr></table></figure></div><ul class="lvl-0"><li class="lvl-2"><p>Docker 默认的 bridge 网络和 Linux 内核中的 docker0 网桥是一一对应的关系。bridge 是 Docker 对网络的命名，而 docker0 是内核中网桥的名字。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/wjWiNA.png" alt=""></p></li><li class="lvl-2"><p>docker0负责给连接其上的容器分配ip地址，并且是每个容器的默认网关。当容器需要访问外网时，会通过docker0转到宿主机的eth0上，所以只要宿主机可以访问外网，那么容器也可以访问外网。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看宿主机的路由表</span></span><br><span class="line">$ route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         10.250.0.1      0.0.0.0         UG    100    0        0 eth0</span><br><span class="line">10.250.0.0      0.0.0.0         255.255.255.0   U     100    0        0 eth0</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ap1容器的路由表</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it ap1 route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Docker Container 的 bridge 桥接模式可以参考下图<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/32fupw.png" alt=""></p></li></ul><h2 id="docker-network-相关命令"><code>docker network</code> 相关命令</h2><table><thead><tr><th>命令</th><th>功能说明</th><th>示例</th><th>示例输出（简略）</th></tr></thead><tbody><tr><td><code>docker network ls</code></td><td>列出所有 Docker 网络</td><td><code>docker network ls</code></td><td><code>bridge</code>, <code>host</code>, <code>none</code> 等网络名称</td></tr><tr><td><code>docker network inspect &lt;网络名&gt;</code></td><td>查看指定网络的详细信息（如 IP 范围、连接容器等）</td><td><code>docker network inspect bridge</code></td><td>显示 JSON，含子网、网关、容器等信息</td></tr><tr><td><code>docker network create &lt;网络名&gt;</code></td><td>创建自定义网络（默认桥接）</td><td><code>docker network create my-net</code></td><td><code>my-net</code> 网络 ID</td></tr><tr><td><code>docker network rm &lt;网络名&gt;</code></td><td>删除网络（不能有容器连接）</td><td><code>docker network rm my-net</code></td><td>成功删除无提示，失败会有错误信息</td></tr><tr><td><code>docker network connect &lt;网络名&gt; &lt;容器名&gt;</code></td><td>将一个容器连接到指定网络</td><td><code>docker network connect my-net my-container</code></td><td>无输出，容器连接成功</td></tr><tr><td><code>docker network disconnect &lt;网络名&gt; &lt;容器名&gt;</code></td><td>将容器从网络中断开连接</td><td><code>docker network disconnect my-net my-container</code></td><td>无输出，断开成功</td></tr><tr><td><code>docker network prune</code></td><td>删除所有未使用的网络（慎用）</td><td><code>docker network prune</code></td><td>会提示是否确认，清理未使用网络</td></tr></tbody></table><h3 id="docker-network-create-创建网络"><code>docker network create</code> : 创建网络</h3><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create [OPTIONS] NETWORK_NAME</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>常用参数说明表</p></li></ul><table><thead><tr><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>--driver</code> 或 <code>-d</code></td><td>指定网络驱动类型，如 <code>bridge</code>, <code>overlay</code>, <code>macvlan</code>, <code>host</code>, <code>none</code></td><td><code>--driver bridge</code></td></tr><tr><td><code>--subnet</code></td><td>指定子网地址范围（CIDR）</td><td><code>--subnet 192.168.100.0/24</code></td></tr><tr><td><code>--gateway</code></td><td>指定网关 IP 地址</td><td><code>--gateway 192.168.100.1</code></td></tr><tr><td><code>--ip-range</code></td><td>指定可分配的 IP 范围</td><td><code>--ip-range 192.168.100.0/25</code></td></tr><tr><td><code>--aux-address</code></td><td>保留某些 IP 地址不被分配</td><td><code>--aux-address=&quot;reserved=192.168.100.254&quot;</code></td></tr><tr><td><code>--internal</code></td><td>创建一个内部网络（不能访问外部）</td><td><code>--internal</code></td></tr><tr><td><code>--attachable</code></td><td>创建可供单独容器连接的网络（Swarm 中）</td><td><code>--attachable</code></td></tr><tr><td><code>--label</code></td><td>添加标签</td><td><code>--label env=dev</code></td></tr><tr><td><code>--opt</code></td><td>提供自定义驱动选项</td><td><code>--opt encrypted=true</code></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p><code>--driver</code> 或 <code>-d</code> : 常见的 Docker 网络驱动类型</p></li></ul><table><thead><tr><th>类型</th><th>含义</th><th>是否支持端口映射</th><th>特点与应用场景</th></tr></thead><tbody><tr><td><code>bridge</code>（默认）</td><td>默认的桥接网络，容器通过虚拟网桥连接，共享宿主机的网络接口。</td><td>✅ 是</td><td>默认模式，适用于单主机部署、多个容器需要互通的场景。可映射端口对外访问。</td></tr><tr><td><code>host</code></td><td>容器与宿主机共用网络命名空间，容器直接使用宿主机的 IP 和端口。</td><td>❌ 否</td><td>无网络隔离，性能高，适用于高性能、低延迟场景（如游戏服务器）。</td></tr><tr><td><code>none</code></td><td>容器没有网络接口，完全隔离。</td><td>❌ 否</td><td>用于安全性或测试网络不可达场景。</td></tr><tr><td><code>macvlan</code></td><td>为容器分配独立 MAC 和 IP，容器像物理主机一样出现在局域网中。</td><td>✅ 是（少见）</td><td>适用于容器必须直接暴露在物理网络中的场景（如 DHCP 服务、ARP 广播）。</td></tr><tr><td><code>ipvlan</code>（高级）</td><td>类似 macvlan，但不使用虚拟 MAC 地址。</td><td>✅ 是（少见）</td><td>高级网络方案，适用于对网络拓扑精细控制的场景。</td></tr><tr><td><code>overlay</code></td><td>用于多主机之间容器通信，需要 Docker Swarm 支持。</td><td>✅ 是（Swarm）</td><td>跨主机部署服务的必要手段，适合容器编排平台（如 Swarm、Kubernetes）。</td></tr></tbody></table><blockquote><p>前面我们说过，Docker会自动创建三个网络，即：bridge、host、none。对于单台宿主机的场景，绝大多数情况下我们都只会使用bridge网络。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个名为my-network的网络</span></span><br><span class="line">$ docker network create my-network</span><br><span class="line"><span class="comment"># 等同于，因为默认的网络驱动为bridge</span></span><br><span class="line">$ docker network create --driver bridge my-network</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络，可以看到新建的网络的驱动为bridge</span></span><br><span class="line">$ docker network <span class="built_in">ls</span> -f name=my-network</span><br><span class="line">NETWORK ID     NAME         DRIVER    SCOPE</span><br><span class="line">c2dbe1686790   my-network   bridge    <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看宿主机的网桥信息</span></span><br><span class="line">$ brctl show</span><br><span class="line"><span class="comment">## 输出，可以看到此时有一个网桥设备 br-c2dbe1686790，br: bridge，c2dbe1686790：network id</span></span><br><span class="line">bridge name      bridge <span class="built_in">id</span>          STP enabled    interfaces</span><br><span class="line">br-c2dbe1686790      8000.02425be81fae          no</span><br><span class="line">docker0      8000.0242d6d509b1          no    vethc0e0cc3</span><br><span class="line">            vethf4b7577</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看宿主机的网卡</span></span><br><span class="line">$ ip addr</span><br><span class="line"><span class="comment">## 输出，br-c2dbe1686790 网卡名称，其IP网段为 172.18.0.1/16</span></span><br><span class="line">13: br-c2dbe1686790: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:5b:e8:1f:ae brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global br-c2dbe1686790</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动两个容器并添加到my-network网络中</span></span><br><span class="line">$ docker run -itd --network my-network --name a1 alpine</span><br><span class="line">$ docker run -itd --network my-network --name a2 alpine</span><br><span class="line"></span><br><span class="line">$ ip addr</span><br><span class="line"><span class="comment">## 输出,可以看到两个容器都添加到了my-network网络中</span></span><br><span class="line">bridge name      bridge <span class="built_in">id</span>        STP enabled    interfaces</span><br><span class="line">br-c2dbe16867908000.02425be81fae    no    veth094946c</span><br><span class="line">            vetha2ba68a</span><br><span class="line">docker0        8000.0242d6d509b1    no    vethc0e0cc3</span><br><span class="line">            vethf4b7577</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试连通性，可以看到 a1可以ping通 a2，反过来 a2也可以ping通 a1</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it a1 ping a2</span><br><span class="line">PING a2 (172.18.0.4): 56 data bytes</span><br><span class="line">64 bytes from 172.18.0.4: <span class="built_in">seq</span>=0 ttl=64 time=2.127 ms</span><br><span class="line">64 bytes from 172.18.0.4: <span class="built_in">seq</span>=1 ttl=64 time=0.119 ms</span><br><span class="line"></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND     CREATED         STATUS         PORTS     NAMES</span><br><span class="line">e0fb0614591e   alpine    <span class="string">&quot;/bin/sh&quot;</span>   4 minutes ago   Up 4 minutes             a2</span><br><span class="line">fc6e9477d2b7   alpine    <span class="string">&quot;/bin/sh&quot;</span>   4 minutes ago   Up 4 minutes             a1</span><br><span class="line">9d3ed5be1916   alpine    <span class="string">&quot;/bin/sh&quot;</span>   4 hours ago     Up 4 hours               ap2</span><br><span class="line">c2436a1d750c   alpine    <span class="string">&quot;/bin/sh&quot;</span>   4 hours ago     Up 4 hours               ap1</span><br><span class="line"><span class="comment"># 不同网络中的容器之间不能相互ping通</span></span><br><span class="line"><span class="comment">## 通过容器名称无法ping通</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it a1 ping ap1</span><br><span class="line">ping: bad address <span class="string">&#x27;ap1&#x27;</span></span><br><span class="line"><span class="comment">## 通过ap1容器IP也无法ping通，这就实现了不同网络中的网络隔离</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it a1 ping 172.17.0.2</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果创建网络时没有指定子网，则从<code>docker0</code>的<code>172.17.0.0/16</code>往后排，比如我们上面创建的<code>my-network</code>，其子网就是<code>172.18.0.0/16</code>，如下命令创建一个bridge网络，并指定子网、网关等信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create \</span><br><span class="line">  --driver bridge \</span><br><span class="line">  --subnet 192.168.50.0/24 \</span><br><span class="line">  --gateway 192.168.50.1 \</span><br><span class="line">  my-custom-net</span><br></pre></td></tr></table></figure><h4 id="bridge-总结"><code>bridge</code> 总结</h4><ul class="lvl-0"><li class="lvl-2"><p>默认创建的 <code>docker0</code> 网络，是一个桥接网络，在 docker network 中的名称为 <code>bridge</code>，该网络下的容器可以通过IP地址相互访问，但不能通过容器名称访问</p></li><li class="lvl-2"><p>通过<code>docker network create &lt;网络名称&gt;</code>创建的网络也是一个桥接网络，在这个网络下，容器可以通过IP地址相互访问，也能通过容器名称访问。</p></li></ul><h3 id="docker-network-ls-列出所有网络"><code>docker network ls</code> : 列出所有网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有网络</span></span><br><span class="line">$ docker network <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 输出指定的信息</span></span><br><span class="line">$ docker network <span class="built_in">ls</span> --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Name&#125;&#125;\t&#123;&#123;.Scope&#125;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 输出json格式</span></span><br><span class="line">$ docker network <span class="built_in">ls</span> --format <span class="string">&quot;json&quot;</span></span><br><span class="line"><span class="comment"># 过滤</span></span><br><span class="line">$ docker network <span class="built_in">ls</span> -f <span class="string">&quot;driver=bridge&quot;</span></span><br><span class="line"><span class="comment"># 不截断输出</span></span><br><span class="line">$ docker network <span class="built_in">ls</span> --no-trunc</span><br><span class="line"><span class="comment"># 只显示network id</span></span><br><span class="line">$ docker network <span class="built_in">ls</span> -q</span><br></pre></td></tr></table></figure><h3 id="docker-network-inspect-查看网络详情"><code>docker network inspect</code> : 查看网络详情</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看名称为bridge网络详情</span></span><br><span class="line">$ docker network inspect bridge</span><br><span class="line"><span class="comment"># 查看当前网络下有哪些容器</span></span><br><span class="line">$ docker network inspect bridge --format <span class="string">&quot;&#123;&#123;.Containers&#125;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 输出json格式</span></span><br><span class="line">$ docker network inspect bridge --format <span class="string">&quot;json&quot;</span></span><br></pre></td></tr></table></figure><h3 id="docker-network-prune-清理没用的网络"><code>docker network prune</code> : 清理没用的网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除所有未使用的网络</span></span><br><span class="line">$ docker network prune</span><br><span class="line"><span class="comment"># 删除所有未使用的网络，无需确认</span></span><br><span class="line">$ docker network prune -f</span><br><span class="line"><span class="comment"># 清理24小时内未使用的网络</span></span><br><span class="line">$ docker network prune --filter <span class="string">&quot;until=24h&quot;</span></span><br></pre></td></tr></table></figure><h3 id="docker-network-rm-删除网络"><code>docker network rm</code> : 删除网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除指定的网络</span></span><br><span class="line">$ docker network <span class="built_in">rm</span> &lt;network-name&gt;</span><br><span class="line"><span class="comment"># 删除所有网络</span></span><br><span class="line">$ docker network <span class="built_in">rm</span> $(docker network <span class="built_in">ls</span> -q)</span><br><span class="line"><span class="comment"># 删除所有bridge网络，这里要注意，docker默认创建的3个网络是删除不掉的</span></span><br><span class="line">$ docker network <span class="built_in">rm</span> $(docker network <span class="built_in">ls</span> -q -f driver=bridge)</span><br></pre></td></tr></table></figure><h3 id="docker-network-connect-将容器连接到网络"><code>docker network connect</code> : 将容器连接到网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将容器连接到网络，如果容器启动时忘记连接网络，这里可以手动添加</span></span><br><span class="line">$ docker network connect &lt;network-name&gt; &lt;container-name&gt;</span><br></pre></td></tr></table></figure><h3 id="docker-network-disconnect-将容器从网络断开"><code>docker network disconnect</code> : 将容器从网络断开</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network disconnect &lt;network-name&gt; &lt;container-name&gt;</span><br></pre></td></tr></table></figure><h2 id="本文总结">本文总结</h2><ul class="lvl-0"><li class="lvl-2"><p>容器与网络是多对多的关系，即一个网络可以有多个容器，一个容器也可以连接到多个网络。</p></li><li class="lvl-2"><p>docker0 是 docker 默认创建的网络，不指定网络的情况下所有容器都连接到 docker0 网络。</p></li><li class="lvl-2"><p>docker0 是 bridge 网络，该网络中的容器之间可以通过 IP 互相访问，但不能通过容器名称访问。</p></li><li class="lvl-2"><p>自建的 bridge 网络中的容器可以通过容器名称（或容器ID，但不常用）访问。</p></li><li class="lvl-2"><p>不同的 bridge 网络中的容器不能互相访问。</p></li></ul><h2 id="link-vs-network"><code>--link</code> vs <code>--network</code></h2><table><thead><tr><th>项目</th><th><code>--link</code></th><th><code>--network</code></th></tr></thead><tbody><tr><td>功能</td><td>将一个容器链接到另一个容器，并设置环境变量和主机名映射</td><td>将容器加入到一个自定义网络中，实现灵活、隔离的网络通信</td></tr><tr><td>是否推荐</td><td>❌ 不推荐（已废弃）</td><td>✅ 推荐使用</td></tr><tr><td>网络隔离</td><td>基于默认 <code>bridge</code> 网络，隔离性差</td><td>可以创建自定义网络（bridge、overlay 等），隔离性强</td></tr><tr><td>可扩展性</td><td>只适用于已运行的容器，连接固定</td><td>支持多个容器，灵活组合和动态扩展</td></tr><tr><td>DNS 支持</td><td>仅设置环境变量，不支持自动 DNS</td><td>自定义网络中支持容器名称作为 DNS 名称</td></tr><tr><td>生命周期</td><td>一方容器关闭，另一方仍保存过时链接</td><td>网络存在即可，容器生命周期不互相影响</td></tr><tr><td>安全性</td><td>所有容器共享 bridge，容易相互访问</td><td>自定义网络间默认隔离，安全性更好</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 Docker 命令 中 网络管理 相关命令&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com&quot;&gt;Docker官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/docker/"/>
    
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 命令 之 数据卷(Volume)</title>
    <link href="https://blog.hanqunfeng.com/2025/05/28/docker-command-volume/"/>
    <id>https://blog.hanqunfeng.com/2025/05/28/docker-command-volume/</id>
    <published>2025-05-28T13:30:05.000Z</published>
    <updated>2025-05-29T09:27:21.992Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 Docker 命令 中 数据卷管理 相关命令</p></li><li class="lvl-2"><p><a href="https://docs.docker.com">Docker官方文档</a></p></li></ul><span id="more"></span><h2 id="什么是Volume-数据卷">什么是Volume(数据卷)?</h2><ul class="lvl-0"><li class="lvl-2"><p>Volume 是由 Docker 管理的特殊目录，位于宿主机文件系统中(<code>/var/lib/docker/volumes/</code>)，用于存储和共享容器的数据。</p></li><li class="lvl-2"><p>当容器被删除后，容器内的文件系统也会一起删除，但挂载在 Volume 中的数据不会丢失，可供多个容器共享。</p></li><li class="lvl-2"><p>Volume 的特点</p></li></ul><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>数据持久化</td><td>即使容器删除，数据仍保留在卷中</td></tr><tr><td>多容器共享访问</td><td>多个容器可以挂载同一个卷，实现数据共享</td></tr><tr><td>不依赖容器路径</td><td>卷与容器生命周期解耦，支持灵活的容器重建和升级</td></tr><tr><td>管理简便</td><td>可用 <code>docker volume</code> 命令进行查看、创建、删除等操作</td></tr><tr><td>安全隔离</td><td>Docker 管理的路径比绑定挂载更安全</td></tr></tbody></table><h2 id="docker-volume-相关命令"><code>docker volume</code> 相关命令</h2><table><thead><tr><th>命令</th><th>作用说明</th><th>示例</th></tr></thead><tbody><tr><td><code>docker volume create</code></td><td>创建一个新的卷，名称可选（不指定会自动生成）</td><td><code>docker volume create myvolume</code></td></tr><tr><td><code>docker volume ls</code></td><td>列出所有已存在的卷</td><td><code>docker volume ls</code></td></tr><tr><td><code>docker volume inspect &lt;name&gt;</code></td><td>查看指定卷的详细信息，包括挂载点、驱动等</td><td><code>docker volume inspect myvolume</code></td></tr><tr><td><code>docker volume rm &lt;name&gt;</code></td><td>删除一个卷（前提是没有容器正在使用该卷）</td><td><code>docker volume rm myvolume</code></td></tr><tr><td><code>docker volume prune</code></td><td>删除所有未被使用的卷（会有确认提示）</td><td><code>docker volume prune</code></td></tr></tbody></table><h3 id="docker-volume-create-创建一个新的卷"><code>docker volume create</code> : 创建一个新的卷</h3><ul class="lvl-0"><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create [OPTIONS] [VOLUME]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>参数详解</p></li></ul><table><thead><tr><th>选项</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>-d, --driver string</code></td><td>指定卷驱动程序，默认是 <code>local</code>（本地存储）</td><td><code>-d local</code> 或 第三方驱动名称(需要安装第三方插件)</td></tr><tr><td><code>--label list</code></td><td>给卷添加标签（元数据），可用于分类、过滤</td><td><code>--label env=prod</code></td></tr><tr><td><code>-o, --opt map</code></td><td>设置驱动的特定选项，格式为 <code>key=value</code>，多个选项可重复使用</td><td><code>-o type=tmpfs -o device=tmpfs</code></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个默认卷（local 驱动）</span></span><br><span class="line">docker volume create myvolume</span><br><span class="line"><span class="comment"># 也可以在启动容器的时候创建默认数据卷，如下命令，若 myvolume 卷不存在，则会自动创建</span></span><br><span class="line">docker run -d -v myvolume:/data nginx</span><br><span class="line">docker run -d --mount <span class="built_in">type</span>=volume,<span class="built_in">source</span>=myvolume,target=/data nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个带有标签的卷</span></span><br><span class="line">docker volume create --label <span class="built_in">env</span>=dev --label team=backend myvolume</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建匿名卷（不指定名称）</span></span><br><span class="line">docker volume create</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tmpfs 类型卷（只存于内存中，不落盘）,适用于高速读写但不需要持久化的数据</span></span><br><span class="line">docker volume create \</span><br><span class="line">  -d <span class="built_in">local</span> \            <span class="comment"># 指定驱动程序为 local</span></span><br><span class="line">  -o <span class="built_in">type</span>=tmpfs \       <span class="comment"># 指定底层文件系统类型为 tmpfs（内存文件系统）</span></span><br><span class="line">  -o device=tmpfs \     <span class="comment"># 设置挂载设备为 tmpfs，用于与 type=tmpfs 配合</span></span><br><span class="line">  -o o=size=100m \      <span class="comment"># 设置 tmpfs 的最大容量为 100MB</span></span><br><span class="line">  mytmpfs               <span class="comment"># 卷的名称，可通过 docker volume ls 查看</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个自定义驱动的卷（如 nfs）</span></span><br><span class="line">docker volume create \</span><br><span class="line">  -d <span class="built_in">local</span> \                    <span class="comment"># 默认驱动程序为 local</span></span><br><span class="line">  -o <span class="built_in">type</span>=nfs \                 <span class="comment"># 底层文件系统类型为 nfs</span></span><br><span class="line">  -o o=addr=192.168.1.100,rw \  <span class="comment"># 设置 nfs 的地址和读写权限，若只读为 ro</span></span><br><span class="line">  -o device=:/path/to/share \   <span class="comment"># 挂载设备为 nfs，格式为：nfs://192.168.1.100:/path/to/share</span></span><br><span class="line">  mynfs                         <span class="comment"># 卷的名称，可通过 docker volume ls 查看</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建的数据卷会保存在 <code>/var/lib/docker/volumes/</code> 目录下，比如我们创建了一个卷 myvolume，那么该卷会保存在 <code>/var/lib/docker/volumes/myvolume/_data</code> 目录下</p></li></ul><h3 id="docker-volume-ls-列出所有已存在的卷"><code>docker volume ls</code> : 列出所有已存在的卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有卷</span></span><br><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 列出所有卷的ID</span></span><br><span class="line">docker volume <span class="built_in">ls</span> -q</span><br><span class="line"><span class="comment"># 列出指定驱动的卷</span></span><br><span class="line">docker volume <span class="built_in">ls</span> -f driver=<span class="built_in">local</span></span><br><span class="line"><span class="comment"># 列出指定标签的卷</span></span><br><span class="line">docker volume <span class="built_in">ls</span> -f label=<span class="built_in">env</span>=dev</span><br><span class="line"><span class="comment"># 列出所有未使用的卷，包括匿名卷和命名卷</span></span><br><span class="line">docker volume <span class="built_in">ls</span> -f dangling=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="docker-volume-inspect-name-查看指定卷的详细信息"><code>docker volume inspect &lt;name&gt;</code> : 查看指定卷的详细信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出指定卷的详细信息</span></span><br><span class="line">docker volume inspect myvolume</span><br><span class="line"><span class="comment"># 列出指定卷的详细信息，并使用json格式输出</span></span><br><span class="line">docker volume inspect -f json myvolume</span><br><span class="line"><span class="comment"># 列出指定卷的挂载点</span></span><br><span class="line">docker volume inspect myvolume --format <span class="string">&quot;&#123;&#123;.Mountpoint&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="docker-volume-prune-删除所有未被容器使用的卷"><code>docker volume prune</code> : 删除所有未被容器使用的卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除所有未被使用的匿名数据卷，会提示确认</span></span><br><span class="line">docker volume prune</span><br><span class="line"><span class="comment"># 删除所有未被使用的数据卷，会提示确认</span></span><br><span class="line">docker volume prune -a</span><br><span class="line"><span class="comment"># 删除所有未被使用的卷，无需确认立刻删除</span></span><br><span class="line">docker volume prune -a -f</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>匿名卷 vs 命名卷</p><ul class="lvl-2"><li class="lvl-4">匿名卷：没有名称，只在 <code>docker run -v /container/path</code> 时自动创建；</li><li class="lvl-4">命名卷：有名称，例如 <code>docker run -v mydata:/container/path</code>；</li></ul></li></ul><h3 id="docker-volume-rm-name-删除数据卷"><code>docker volume rm &lt;name&gt;</code> : 删除数据卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除指定数据卷</span></span><br><span class="line">docker volume <span class="built_in">rm</span> myvolume</span><br><span class="line"><span class="comment"># 删除所有数据卷</span></span><br><span class="line">docker volume <span class="built_in">rm</span> $(docker volume <span class="built_in">ls</span> -q)</span><br><span class="line"><span class="comment"># 删除所有未使用的数据卷</span></span><br><span class="line">docker volume <span class="built_in">rm</span> $(docker volume <span class="built_in">ls</span> -qf dangling=<span class="literal">true</span>)</span><br><span class="line"><span class="comment"># 删除所有未使用的数据卷，无需确认</span></span><br><span class="line">docker volume <span class="built_in">rm</span> $(docker volume <span class="built_in">ls</span> -qf dangling=<span class="literal">true</span>) -f</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 Docker 命令 中 数据卷管理 相关命令&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com&quot;&gt;Docker官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/docker/"/>
    
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 命令 之 容器(Container)</title>
    <link href="https://blog.hanqunfeng.com/2025/05/27/docker-command-container/"/>
    <id>https://blog.hanqunfeng.com/2025/05/27/docker-command-container/</id>
    <published>2025-05-27T13:30:05.000Z</published>
    <updated>2025-05-29T09:02:17.040Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 Docker 命令 中 容器管理 相关命令</p></li><li class="lvl-2"><p><a href="https://docs.docker.com">Docker官方文档</a></p></li></ul><span id="more"></span><h2 id="容器的生命周期">容器的生命周期</h2><ul class="lvl-0"><li class="lvl-2"><p>容器可能处于以下几种状态：</p><ul class="lvl-2"><li class="lvl-5">初建（created）</li><li class="lvl-5">运行（running）</li><li class="lvl-5">暂停（paused）</li><li class="lvl-5">停止（stopped）</li><li class="lvl-5">删除（deleted）</li></ul></li><li class="lvl-2"><p>各生命周期之间的转换关系如图所示：<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/19n9NJ.png" alt=""></p></li></ul><table><thead><tr><th>命令/情况</th><th>说明</th><th>容器状态变更</th></tr></thead><tbody><tr><td><code>docker create</code></td><td>创建容器后，不立即启动运行，容器进入初建状态</td><td>初建状态</td></tr><tr><td><code>docker run</code></td><td>创建容器，并立即启动运行，进入运行状态</td><td>初建 → 运行</td></tr><tr><td><code>docker start</code></td><td>启动已创建的容器，容器转为运行状态</td><td>停止 → 运行</td></tr><tr><td><code>docker stop</code></td><td>停止正在运行的容器，容器转入停止状态</td><td>运行 → 停止</td></tr><tr><td><code>docker kill</code></td><td>强制终止容器，相当于“断电”，容易丢失数据，不建议轻易使用</td><td>运行 → 停止（非正常）</td></tr><tr><td><code>docker restart</code></td><td>重启容器，容器重新进入运行状态</td><td>运行 → 停止 → 运行</td></tr><tr><td><code>docker pause</code></td><td>暂停容器内所有进程，容器进入暂停状态</td><td>运行 → 暂停</td></tr><tr><td><code>docker unpause</code></td><td>取消暂停状态，容器恢复运行</td><td>暂停 → 运行</td></tr><tr><td><code>docker rm</code></td><td>删除容器，容器转入删除状态</td><td>任意 → 删除</td></tr><tr><td>Killed by out-of-memory (OOM)</td><td>宿主机内存耗尽，容器被系统终止，此为非计划终止；建议杀死内存占用最高的容器</td><td>运行 → 停止（异常）</td></tr><tr><td>Container process exited</td><td>容器进程异常终止后，进入“是否重启”判断流程：是则执行 <code>start</code> 进入运行；否则保持停止状态</td><td>异常 → 停止或运行</td></tr></tbody></table><h2 id="docker-container-容器管理"><code>docker container</code> : 容器管理</h2><ul class="lvl-0"><li class="lvl-2"><p><code>docker container --help</code></p></li></ul><table><thead><tr><th>命令</th><th>说明</th><th>别名</th></tr></thead><tbody><tr><td>attach</td><td>将本地的标准输入、输出和错误流附加到一个正在运行的容器上</td><td>docker attach</td></tr><tr><td>commit</td><td>根据容器的更改创建一个新的镜像</td><td>docker commit</td></tr><tr><td>cp</td><td>在容器和本地文件系统之间复制文件/文件夹</td><td>docker cp</td></tr><tr><td>create</td><td>创建一个新的容器</td><td>docker create</td></tr><tr><td>diff</td><td>检查容器文件系统上的文件或目录的更改</td><td>docker diff</td></tr><tr><td>exec</td><td>在正在运行的容器中执行命令</td><td>docker exec</td></tr><tr><td>export</td><td>将容器的文件系统导出为 tar 归档文件</td><td>docker export</td></tr><tr><td>inspect</td><td>显示一个或多个容器的详细信息</td><td>可以使用 <code>docker inspect</code></td></tr><tr><td>kill</td><td>终止一个或多个正在运行的容器</td><td>docker kill</td></tr><tr><td>logs</td><td>获取容器的日志</td><td>docker logs</td></tr><tr><td>ls</td><td>列出容器</td><td>docker ps</td></tr><tr><td>pause</td><td>暂停一个或多个容器内的所有进程</td><td>docker pause</td></tr><tr><td>port</td><td>列出容器的端口映射或特定的端口映射</td><td>docker port</td></tr><tr><td>prune</td><td>删除所有已停止的容器</td><td></td></tr><tr><td>rename</td><td>重命名一个容器</td><td>docker rename</td></tr><tr><td>restart</td><td>重启一个或多个容器</td><td>docker restart</td></tr><tr><td>rm</td><td>删除一个或多个容器</td><td>docker rm</td></tr><tr><td>run</td><td>根据镜像创建并运行一个新容器</td><td>docker run</td></tr><tr><td>start</td><td>启动一个或多个已停止的容器</td><td>docker start</td></tr><tr><td>stats</td><td>实时显示容器资源使用统计信息</td><td>docker stats</td></tr><tr><td>stop</td><td>停止一个或多个正在运行的容器</td><td>docker stop</td></tr><tr><td>top</td><td>显示容器中运行的进程</td><td>docker top</td></tr><tr><td>unpause</td><td>取消暂停一个或多个容器内的所有进程</td><td>docker unpause</td></tr><tr><td>update</td><td>更新一个或多个容器的配置</td><td>docker update</td></tr><tr><td>wait</td><td>阻塞直到一个或多个容器停止，然后打印其退出代码</td><td>docker wait</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>运行 <code>docker container COMMAND --help</code> 可获取某个命令的更多信息。</p></li></ul><h3 id="docker-create-创建容器，但不启动"><code>docker create</code> : 创建容器，但不启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker create \</span><br><span class="line">    --name my-container \ <span class="comment"># 容器名</span></span><br><span class="line">    -e MY_ENV_VAR=my-value \ <span class="comment"># 设置环境变量</span></span><br><span class="line">    -p 80:80 \ <span class="comment"># 映射端口，格式：宿主机端口:容器端口</span></span><br><span class="line">    -v /path/to/my/dir:/path/in/container \ <span class="comment"># 映射目录，格式：宿主机目录:容器目录，都必须是绝对路径</span></span><br><span class="line">    --restart always \ <span class="comment"># 设置重启策略</span></span><br><span class="line">    nginx:latest \ <span class="comment"># 镜像名，镜像不存在时会自动下载</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>docker create</code> 与 <code>docker run</code> 的参数基本一致，具体查看下面 <code>docker run</code> 中的介绍。</p></li></ul><h3 id="docker-start-启动一个容器"><code>docker start</code> : 启动一个容器</h3><ul class="lvl-0"><li class="lvl-2"><p>启动一个容器，容器必须已经创建，并且处于停止状态。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法：docker start &lt;container_id|container_name&gt;</span></span><br><span class="line">$ docker start my-container</span><br></pre></td></tr></table></figure><h3 id="docker-run-创建并启动一个容器"><code>docker run</code> : 创建并启动一个容器</h3><ul class="lvl-0"><li class="lvl-2"><p>相当于<code>docker create</code> + <code>docker start</code></p></li><li class="lvl-2"><p>常用参数说明</p></li></ul><table><thead><tr><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--detach</code></td><td>后台运行容器（即“守护态”），<code>run</code>独有</td><td><code>docker run -d nginx</code></td></tr><tr><td><code>-it</code></td><td>交互式运行容器并分配终端（常用于调试）</td><td><code>docker run -it ubuntu bash</code></td></tr><tr><td><code>--name</code></td><td>指定容器名称</td><td><code>docker run --name my-nginx nginx</code></td></tr><tr><td><code>--rm</code></td><td>容器退出时自动删除</td><td><code>docker run --rm ubuntu</code></td></tr><tr><td><code>-p</code>, <code>--publish</code></td><td>端口映射（宿主机:容器）</td><td><code>docker run -p 8080:80 nginx</code></td></tr><tr><td><code>-P</code>, <code>--publish-all</code></td><td>自动随机映射容器内部所有暴露端口到宿主机端口</td><td><code>docker run -P nginx</code></td></tr><tr><td><code>-v</code>, <code>--volume</code></td><td>挂载卷（宿主机目录:容器目录）</td><td><code>docker run -v /data:/app/data myapp</code></td></tr><tr><td><code>--mount</code></td><td>更灵活的挂载方式（推荐新项目使用）</td><td><code>docker run --mount type=bind,source=/host,target=/container nginx</code></td></tr><tr><td><code>--env</code>, <code>-e</code></td><td>设置环境变量</td><td><code>docker run -e ENV=prod myapp</code></td></tr><tr><td><code>--env-file</code></td><td>从文件中加载多个环境变量</td><td><code>docker run --env-file .env myapp</code></td></tr><tr><td><code>--network</code></td><td>设置容器使用的网络模式</td><td><code>docker run --network host myapp</code></td></tr><tr><td><code>--restart</code></td><td>设置容器的自动重启策略</td><td><code>docker run --restart=always myapp</code></td></tr><tr><td><code>--privileged</code></td><td>给予容器更多的权限（如访问 host 设备）</td><td><code>docker run --privileged myapp</code></td></tr><tr><td><code>--entrypoint</code></td><td>覆盖镜像默认的 ENTRYPOINT</td><td><code>docker run --entrypoint /bin/bash myapp</code></td></tr><tr><td><code>-u</code>, <code>--user</code></td><td>指定容器内运行的用户（格式：UID 或 UID:GID）</td><td><code>docker run --user 1000:1000 myapp</code></td></tr><tr><td><code>-c</code>, <code>--cpu-shares</code></td><td>设置 CPU 权重（相对值）</td><td><code>docker run --cpu-shares=512 myapp</code></td></tr><tr><td><code>-m</code>, <code>--memory</code></td><td>限制容器最大内存（如 <code>512m</code>, <code>1g</code>）</td><td><code>docker run --memory=512m myapp</code></td></tr><tr><td><code>-h</code>,<code> --hostname</code></td><td>设置容器主机名</td><td><code>docker run -h myhost myapp</code></td></tr><tr><td><code>--link</code>(更推荐使用 <code>--network</code>)</td><td>创建链接到其他容器</td><td><code>docker run --link myapp:app myapp2</code></td></tr><tr><td><code>--cpus</code></td><td>限制容器使用的CPU核数</td><td><code>docker run --cpus=&quot;1.5&quot;</code></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p><code>-p</code>, <code>--publish</code> 端口映射</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p [主机IP:]主机端口:容器端口[/协议]</span><br></pre></td></tr></table></figure><table><thead><tr><th>示例</th><th>含义说明</th></tr></thead><tbody><tr><td><code>-p 8080:80</code></td><td>将主机的 8080 端口映射到容器的 80 端口（默认 TCP）</td></tr><tr><td><code>-p 127.0.0.1:8080:80</code></td><td>仅将主机本地 IP（127.0.0.1）的 8080 映射到容器的 80 端口（外部无法访问）</td></tr><tr><td><code>-p 8080:80/tcp</code></td><td>显式指定协议为 TCP（等同于不加 <code>/tcp</code>）</td></tr><tr><td><code>-p 8080:80/udp</code></td><td>映射 UDP 协议端口（如 DNS 服务等）</td></tr><tr><td><code>-p 8080</code></td><td>宿主机随机端口映射到容器的8080端口</td></tr><tr><td><code>-p 3000-3006:4000-4006</code></td><td><strong>范围映射</strong>，不能映射非对称范围（如 3000-3006:4000-4006），只能一一对应</td></tr><tr><td>多个 <code>-p</code></td><td>可以多次使用 <code>-p</code>，映射多个端口。例如：<code>-p 80:80 -p 443:443</code></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p><code>-v, --volume</code> 数据卷映射</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker run -v &lt;本地路径&gt;:&lt;容器路径&gt;[:权限]</span><br><span class="line">  <span class="comment"># &lt;本地路径&gt;主机上的路径（绝对路径，或命名卷），目录不存在会自动创建</span></span><br><span class="line">  <span class="comment"># &lt;容器路径&gt;容器内的路径，目录不存在会自动创建</span></span><br><span class="line">  <span class="comment"># [:权限]可选：ro（只读） 或 rw（读写，默认）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 挂载本地目录到容器</span></span><br><span class="line">docker run -v /data:/app/data myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载为只读</span></span><br><span class="line">docker run -v /data:/app/data:ro myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载多个数据卷</span></span><br><span class="line">docker run -v /data1:/app/data1 -v /data2:/app/data2 myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用命名卷</span></span><br><span class="line">docker volume create mydata</span><br><span class="line">docker run -v mydata:/app/data myapp</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>--mount</code> 挂载卷</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --mount 是 Docker 推荐使用的 现代挂载方式，功能和 -v（或 --volume）类似，但语法更清晰、结构更规范，适用于卷（volume）、绑定挂载（bind）和临时挂载（tmpfs）。</span></span><br><span class="line">docker run --mount <span class="built_in">type</span>=&lt;类型&gt;,<span class="built_in">source</span>=&lt;主机路径或卷名&gt;,target=&lt;容器路径&gt;[,<span class="built_in">readonly</span>]</span><br></pre></td></tr></table></figure><blockquote><p>三种挂载类型对比</p></blockquote><table><thead><tr><th>类型 (<code>type</code>)</th><th>用途</th><th>示例 <code>source</code></th></tr></thead><tbody><tr><td><code>volume</code></td><td>使用 Docker 管理的卷</td><td>卷名，如 <code>mydata</code></td></tr><tr><td><code>bind</code></td><td>挂载宿主机的实际路径</td><td>绝对路径，如 <code>/home/user/app/config</code></td></tr><tr><td><code>tmpfs</code></td><td>挂载内存中的临时文件系统</td><td>无需指定 <code>source</code></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用命名卷挂载（推荐方式）,这里 --target 指定容器内的挂载点，也可以替换为 --destination</span></span><br><span class="line">docker run --mount <span class="built_in">type</span>=volume,<span class="built_in">source</span>=mydata,target=/app/data myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用本地路径挂载（绑定挂载）,source指定的本地路径必须存在</span></span><br><span class="line">docker run --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/home/user/app/config,target=/app/config myapp</span><br><span class="line"><span class="comment"># 只读挂载，readonly 可以简写为 ro</span></span><br><span class="line">docker run --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/home/user/app/config,target=/app/config,<span class="built_in">readonly</span> myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用内存中的临时文件系统挂载，数据不会持久化，只存储在容器运行时的内存中</span></span><br><span class="line">docker run --mount <span class="built_in">type</span>=tmpfs,target=/app/tmpfs myapp</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>--link</code> 容器间链接</p></li></ul><blockquote><p>用于在容器之间建立连接，使一个容器可以通过另一个容器的名称访问其网络信息（如 IP、环境变量等）。<br>注意：<code>--link</code> 已被弃用，建议使用 <code>--network</code> 来实现容器间链接。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">link</span> &lt;目标容器名&gt;:&lt;别名&gt; &lt;其他参数&gt; &lt;镜像名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 示例</span></span><br><span class="line"><span class="comment"># 场景：一个 web 容器想要连接另一个运行中的 db 容器</span></span><br><span class="line"><span class="comment"># 先启动数据库容器</span></span><br><span class="line">docker run -d --name db mysql</span><br><span class="line"><span class="comment"># 启动 web 容器并连接到 db 容器</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> --name web --<span class="built_in">link</span> db:mydb ubuntu bash</span><br><span class="line"><span class="comment"># 在 web 容器中，现在你可以用 mydb 来访问 db 容器，但反过来 db 容器无法访问 web 容器</span></span><br><span class="line">docker <span class="built_in">exec</span> web ping mydb</span><br><span class="line"></span><br><span class="line"><span class="comment">## 改用 --network 实现</span></span><br><span class="line">docker network create mynet</span><br><span class="line">docker run -d --name db --network mynet mysql</span><br><span class="line">docker run -it --<span class="built_in">rm</span> --name web --network mynet ubuntu bash</span><br><span class="line">docker <span class="built_in">exec</span> web ping db</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>--network</code> 网络模式类型</p></li></ul><table><thead><tr><th>类型</th><th>含义</th><th>特点/适用场景</th><th>是否允许端口映射</th></tr></thead><tbody><tr><td><code>bridge</code></td><td>默认网络类型（用户自定义或 Docker 默认桥接网络）</td><td>容器通过虚拟网桥连接，可相互通信；适用于单主机部署</td><td>✅ 是</td></tr><tr><td><code>host</code></td><td>容器与宿主机共享网络栈</td><td>没有网络隔离，容器使用宿主机的 IP 和端口，性能高，适合对网络要求高的服务</td><td>❌ 否</td></tr><tr><td><code>none</code></td><td>容器没有网络接口</td><td>完全隔离；适用于需要完全控制网络的场景或测试网络不可达性</td><td>❌ 否</td></tr><tr><td><code>&lt;user-defined&gt;</code></td><td>用户自定义的网络名称，通过 <code>docker network create</code> 创建</td><td>支持容器名称互解析（DNS），适合多容器通信场景，如 Docker Compose</td><td>✅ 是</td></tr><tr><td><code>container:&lt;name|id&gt;</code></td><td>与另一个容器共享网络命名空间</td><td>两个容器共享 IP 和端口，适用于主-辅容器模式，如 sidecar 容器共享主容器网络</td><td>❌ 否</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用默认 bridge 网络</span></span><br><span class="line">docker run -p 8080:80 --network bridge --name my-nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与宿主机共享网络，不能使用-p</span></span><br><span class="line">docker run --network host nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不使用任何网络，不能使用-p</span></span><br><span class="line">docker run --network none nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用已创建的自定义网络，相同网络命名空间下的容器，可以通过容器 名称或ID 互相访问</span></span><br><span class="line">docker network create nginx_net</span><br><span class="line">docker run -p 8080:80 --network nginx_net nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与另一个容器共享网络命名空间，不能使用-p，并且此时新启动的容器占用的端口不能与要连接的容器端口一致，否则将启动失败</span></span><br><span class="line">docker run --network container:my-nginx busybox</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>--restart</code> 重启策略</p></li></ul><table><thead><tr><th>策略</th><th>含义</th></tr></thead><tbody><tr><td><code>no</code>（默认）</td><td>容器退出后不会自动重启</td></tr><tr><td><code>always</code></td><td>无论退出状态码如何，容器总是自动重启</td></tr><tr><td><code>unless-stopped</code></td><td>容器总是自动重启，除非用户手动停止它</td></tr><tr><td><code>on-failure[:N]</code></td><td>仅在容器非 0 状态码退出时自动重启（可选设置最大重启次数 N）</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器非正常退出时自动重启</span></span><br><span class="line">docker run --restart on-failure my-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最多重启 5 次</span></span><br><span class="line">docker run --restart on-failure:5 my-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总是重启（即使你重启 Docker 服务后）</span></span><br><span class="line">docker run --restart always my-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除非手动停止，否则一直重启</span></span><br><span class="line">docker run --restart unless-stopped my-app</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>--cpu-shares</code> : 设置容器的 CPU 相对权重，即在 CPU 资源竞争时的相对优先级，默认值为 1024。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器1，权重 1024（默认）</span></span><br><span class="line">docker run -d --name c1 --cpu-shares 1024 nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器2，权重 512（优先级低）</span></span><br><span class="line">docker run -d --name c2 --cpu-shares 512 nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">## 说明：</span></span><br><span class="line">  <span class="comment"># c1的权重1024，c2的权重512,不是绝对限制，而是分配比例</span></span><br><span class="line">  <span class="comment"># 该权重表示容器在 CPU 竞争下，权重越高则优先级越高，会尽可能使用 CPU 资源。</span></span><br><span class="line">  <span class="comment"># 如果这两个容器都运行在 CPU 忙碌的环境下(只有在 多容器共享 CPU 且竞争资源 的情况下才生效)：</span></span><br><span class="line">    <span class="comment"># c1 将获得大约 2/3 的 CPU 时间</span></span><br><span class="line">    <span class="comment"># c2 将获得大约 1/3 的 CPU 时间</span></span><br><span class="line">  <span class="comment"># 如果系统 CPU 空闲，所有容器都可以使用 100% 的 CPU。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>docker run</code> 示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动一个nginx 容器</span></span><br><span class="line">docker run -d -p 80:80 --name nginx nginx</span><br><span class="line"><span class="comment"># 替换nginx镜像默认的启动命令，nginx 镜像默认启动 nginx 服务，此命令会改为执行 nginx -v 显示版本号</span></span><br><span class="line">docker run --name test_nginx --entrypoint <span class="string">&quot;&quot;</span> nginx nginx -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本或命令，这里添加 --rm 参数，表示运行结束后自动删除容器，这里是安装 ping 命令</span></span><br><span class="line">docker run --<span class="built_in">rm</span> ubuntu bash -c <span class="string">&quot;apt update &amp;&amp; apt install -y iputils-ping&quot;</span></span><br><span class="line"><span class="comment"># 交互式执行 shell 命令，执行命令后会进入容器的shell</span></span><br><span class="line">docker run --<span class="built_in">rm</span> -it ubuntu /bin/bash</span><br><span class="line"><span class="comment"># 这样也可以，因为 ubuntu 的默认启动命令是 /bin/bash</span></span><br><span class="line">docker run --<span class="built_in">rm</span> -it ubuntu</span><br><span class="line"><span class="comment"># 转到后台运行</span></span><br><span class="line">docker run --<span class="built_in">rm</span> -itd ubuntu</span><br></pre></td></tr></table></figure><h3 id="docker-stop-停止容器，容器优雅退出"><code>docker stop</code> : 停止容器，容器优雅退出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止容器，通过容器名称</span></span><br><span class="line">docker stop test_nginx</span><br><span class="line"><span class="comment"># 停止容器，通过容器ID</span></span><br><span class="line">docker stop 5d7c0c5d5c0c</span><br><span class="line"><span class="comment"># 停止所有正在运行的容器</span></span><br><span class="line">docker stop $(docker ps -q)</span><br><span class="line"><span class="comment"># 等待5秒后强制关闭</span></span><br><span class="line">docker stop -t 5 test_nginx</span><br></pre></td></tr></table></figure><h3 id="docker-kill-强制停止容器"><code>docker kill</code> : 强制停止容器</h3><ul class="lvl-0"><li class="lvl-2"><p>当容器完全卡死、挂起、不响应 <code>stop</code> 命令时使用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> test_nginx</span><br><span class="line">docker <span class="built_in">kill</span> 5d7c0c5d5c0c</span><br><span class="line">docker <span class="built_in">kill</span> $(docker ps -q)</span><br></pre></td></tr></table></figure><h3 id="docker-restart-重启容器"><code>docker restart</code> : 重启容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker restart test_nginx</span><br><span class="line">docker restart 5d7c0c5d5c0c</span><br><span class="line">docker restart $(docker ps -q)</span><br></pre></td></tr></table></figure><h3 id="docker-pause-暂停容器"><code>docker pause</code> : 暂停容器</h3><ul class="lvl-0"><li class="lvl-2"><p>暂停后宿主机将不再为容器分配CPU时间片，但内存依然有效，你可以理解为此时为容器保存了快照</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pause test_nginx</span><br><span class="line">docker pause 5d7c0c5d5c0c</span><br><span class="line">docker pause $(docker ps -q)</span><br></pre></td></tr></table></figure><h3 id="docker-unpause-恢复容器"><code>docker unpause</code> : 恢复容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker unpause test_nginx</span><br><span class="line">docker unpause 5d7c0c5d5c0c</span><br><span class="line">docker unpause $(docker ps -q)</span><br></pre></td></tr></table></figure><h3 id="docker-ps-查看容器列表"><code>docker ps</code> : 查看容器列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有正在运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 显示所有容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 显示所有正在运行的容器的ID</span></span><br><span class="line">docker ps -q</span><br><span class="line"><span class="comment"># 不截断输出，此时 COMMAND 列会显示完整的命令</span></span><br><span class="line">docker ps -notrunc</span><br><span class="line"><span class="comment"># 显示最近创建的5条容器</span></span><br><span class="line">docker ps -n 5</span><br><span class="line"><span class="comment"># 过滤器，显示状态为exited的容器</span></span><br><span class="line">docker ps -a --filter <span class="string">&quot;status=exited&quot;</span></span><br><span class="line"><span class="comment"># 指定模板，只显示 ID 和 Names</span></span><br><span class="line">docker ps --format <span class="string">&quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Names&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="docker-inspect-查看容器信息"><code>docker inspect</code> : 查看容器信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看容器信息</span></span><br><span class="line">docker inspect &lt;container_id&gt;</span><br><span class="line"><span class="comment"># 获取容器名称</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;.Name&#125;&#125;&#x27;</span> &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器镜像</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;.Config.Image&#125;&#125;&#x27;</span> &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器环境变量</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;.Config.Env&#125;&#125;&#x27;</span> &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器状态，前面的 json 表示输出为 json 格式</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;json .State&#125;&#125;&#x27;</span> &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器内存限制</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;.HostConfig.Memory&#125;&#125;&#x27;</span> &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器label</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;json .Config.Labels&#125;&#125;&#x27;</span> &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器的网络信息</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;json .NetworkSettings&#125;&#125;&#x27;</span> &lt;container_id | container_name&gt;</span><br></pre></td></tr></table></figure><h3 id="docker-logs-获取容器日志"><code>docker logs</code> : 获取容器日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取容器日志</span></span><br><span class="line">docker logs &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器实时日志</span></span><br><span class="line">docker logs -f &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器最新的 10 行日志</span></span><br><span class="line">docker logs -n 10 &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器的带时间戳的日志</span></span><br><span class="line">docker logs -t &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器的日志，从 1 小时前开始</span></span><br><span class="line">docker logs --since 1h &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器的日志，直到 1 小时前</span></span><br><span class="line">docker logs --<span class="keyword">until</span> 1h &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器的详细日志</span></span><br><span class="line">docker logs --details &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 获取容器的日志，从 2 小时前开始，直到 1 小时前</span></span><br><span class="line">docker logs --since 2h --<span class="keyword">until</span> 1h &lt;container_id | container_name&gt;</span><br></pre></td></tr></table></figure><h3 id="docker-exec-在已经运行的容器中执行命令"><code>docker exec</code> : 在已经运行的容器中执行命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在已经运行的容器中执行命令</span></span><br><span class="line">docker <span class="built_in">exec</span> &lt;container_id | container_name&gt; &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"><span class="comment"># 进入容器shell</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container_id | container_name&gt; bash</span><br></pre></td></tr></table></figure><h3 id="docker-rename-重命名容器"><code>docker rename</code> : 重命名容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename &lt;old_container_name&gt; &lt;new_container_name&gt;</span><br></pre></td></tr></table></figure><h3 id="docker-cp-容器与宿主机间复制文件"><code>docker cp</code> : 容器与宿主机间复制文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 宿主机 -&gt; 容器</span></span><br><span class="line"><span class="comment"># docker cp &lt;host_path&gt; &lt;container_id | container_name&gt;:&lt;container_path&gt;</span></span><br><span class="line">docker <span class="built_in">cp</span> ./docker-command-container.md nginx:/tmp</span><br><span class="line"><span class="comment"># 容器 -&gt; 宿主机</span></span><br><span class="line"><span class="comment"># docker cp &lt;container_id | container_name&gt;:&lt;container_path&gt; &lt;host_path&gt;</span></span><br><span class="line">docker <span class="built_in">cp</span> nginx:/tmp/docker-command-container.md ./</span><br></pre></td></tr></table></figure><h3 id="docker-rm-删除容器"><code>docker rm</code> : 删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除指定容器</span></span><br><span class="line">docker <span class="built_in">rm</span> &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 删除所有容器</span></span><br><span class="line">docker <span class="built_in">rm</span> $(docker ps -aq)</span><br></pre></td></tr></table></figure><h3 id="docker-container-prune-删除所有停止的容器"><code>docker container prune</code> : 删除所有停止的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure><h3 id="docker-update-更新容器配置"><code>docker update</code> : 更新容器配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新指定容器的CPU核数和内存大小</span></span><br><span class="line">docker update --cpus=2 --memory=2g &lt;container_id | container_name&gt;</span><br><span class="line"><span class="comment"># 更新指定容器自动重启</span></span><br><span class="line">docker update --restart=always &lt;container_id | container_name&gt;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>并不是所有的配置都支持更新，update 命令只支持如下配置，基本上也就只能调一下cpu和内存，以及自动重启策略，所以制作容器时一定要做好规划。</p></li></ul><table><thead><tr><th>参数名</th><th>说明</th><th>示例值</th></tr></thead><tbody><tr><td><code>--blkio-weight</code></td><td>设置 Block IO 的相对权重，范围是 10 到 1000，设置为 0 表示禁用（默认值为 0）</td><td><code>--blkio-weight=500</code></td></tr><tr><td><code>--cpu-period</code></td><td>设置 CPU CFS（完全公平调度器）的周期限制（单位：微秒）</td><td><code>--cpu-period=100000</code></td></tr><tr><td><code>--cpu-quota</code></td><td>设置 CPU CFS 的配额限制（单位：微秒）</td><td><code>--cpu-quota=50000</code></td></tr><tr><td><code>--cpu-rt-period</code></td><td>设置实时 CPU 的调度周期（单位：微秒）</td><td><code>--cpu-rt-period=1000000</code></td></tr><tr><td><code>--cpu-rt-runtime</code></td><td>设置实时 CPU 的运行时间限制（单位：微秒）</td><td><code>--cpu-rt-runtime=950000</code></td></tr><tr><td><code>-c</code>, <code>--cpu-shares</code></td><td>设置 CPU 共享权重，默认值为 1024</td><td><code>--cpu-shares=512</code></td></tr><tr><td><code>--cpus</code></td><td>限制容器使用的 CPU 数量（支持小数）</td><td><code>--cpus=1.5</code></td></tr><tr><td><code>--cpuset-cpus</code></td><td>指定容器可以在哪些 CPU 上运行（如 0-3、0,1）</td><td><code>--cpuset-cpus=&quot;0,1&quot;</code></td></tr><tr><td><code>--cpuset-mems</code></td><td>指定容器可以使用哪些内存节点（如 0-3、0,1），适用于 NUMA 系统</td><td><code>--cpuset-mems=&quot;0&quot;</code></td></tr><tr><td><code>-m</code>, <code>--memory</code></td><td>设置内存限制（例如 512m、2g）</td><td><code>--memory=1g</code></td></tr><tr><td><code>--memory-reservation</code></td><td>设置内存软限制（低于 <code>--memory</code> 的值时，允许系统在压力较小时回收）</td><td><code>--memory-reservation=512m</code></td></tr><tr><td><code>--memory-swap</code></td><td>设置 swap 限制（内存 + swap 总和），设为 -1 表示无限制</td><td><code>--memory-swap=2g</code></td></tr><tr><td><code>--pids-limit</code></td><td>设置容器的最大进程数量，设为 -1 表示无限制</td><td><code>--pids-limit=100</code></td></tr><tr><td><code>--restart</code></td><td>设置容器退出后的重启策略</td><td><code>--restart=always</code></td></tr></tbody></table><h3 id="docker-stats-显示容器的实时资源使用情况"><code>docker stats</code> : 显示容器的实时资源使用情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有容器的实时资源使用情况</span></span><br><span class="line">docker stats</span><br><span class="line"><span class="comment">## 输出</span></span><br><span class="line">CONTAINER ID   NAME         CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O     PIDS</span><br><span class="line">15caf520e3a5   nginx        0.00%     10.22MiB / 7.752GiB   0.13%     6.38kB / 2.61kB   0B / 28.7kB   13</span><br><span class="line">b680087420b8   dockge       0.01%     199.5MiB / 7.752GiB   2.51%     6.44kB / 1.48kB   94.8MB / 0B   24</span><br><span class="line">861dd9c1475f   remote-api   0.00%     4.188MiB / 7.752GiB   0.05%     2.77kB / 126B     3.31MB / 0B   1</span><br><span class="line"><span class="comment">### CONTAINER ID 与 NAME：容器 ID 与名称。</span></span><br><span class="line"><span class="comment">### CPU % 与 MEM %：容器使用的 CPU 和内存的百分比。</span></span><br><span class="line"><span class="comment">### MEM USAGE / LIMIT：容器正在使用的总内存，以及允许使用的内存总量。</span></span><br><span class="line"><span class="comment">### NET I/O：容器通过其网络接口发送和接收的数据量。</span></span><br><span class="line"><span class="comment">### BLOCK I/O：容器从主机上的块设备读取和写入的数据量。</span></span><br><span class="line"><span class="comment">### PIDs：容器创建的进程或线程数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有容器的资源使用情况，包括运行和停止的</span></span><br><span class="line">docker stats -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示当前状态就直接退出了，不再实时更新。</span></span><br><span class="line">docker stats --no-stream</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定输出模板，这里加不加 table 都可以</span></span><br><span class="line">docker stats --no-stream --format <span class="string">&quot;table &#123;&#123;.Name&#125;&#125;\t&#123;&#123;.CPUPerc&#125;&#125;\t&#123;&#123;.MemUsage&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出json格式</span></span><br><span class="line">docker stats --no-stream --format json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器</span></span><br><span class="line">docker stats &lt;container_id | container_name&gt;</span><br></pre></td></tr></table></figure><h3 id="docker-top-查看正在运行的进程"><code>docker top</code> :  查看正在运行的进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker top &lt;container_id | container_name&gt; [ps options]</span></span><br><span class="line">docker top nginx</span><br></pre></td></tr></table></figure><h3 id="docker-port-列出指定的容器的端口映射"><code>docker port</code> : 列出指定的容器的端口映射</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker port &lt;container_id | container_name&gt;</span></span><br><span class="line">$ docker port nginx</span><br><span class="line">80/tcp -&gt; 0.0.0.0:8081</span><br></pre></td></tr></table></figure><h3 id="docker-diff-列出容器运行时对文件系统的修改"><code>docker diff</code> : 列出容器运行时对文件系统的修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker diff &lt;container_id | container_name&gt;</span></span><br><span class="line">$ docker diff nginx</span><br><span class="line">C /root</span><br><span class="line">A /root/.bash_history</span><br><span class="line">C /run</span><br><span class="line">A /run/nginx.pid</span><br><span class="line">C /tmp</span><br><span class="line">A /tmp/demo.py</span><br><span class="line">C /var</span><br><span class="line">C /var/cache</span><br><span class="line">C /var/cache/nginx</span><br><span class="line">A /var/cache/nginx/client_temp</span><br><span class="line">A /var/cache/nginx/fastcgi_temp</span><br><span class="line">A /var/cache/nginx/proxy_temp</span><br><span class="line">A /var/cache/nginx/scgi_temp</span><br><span class="line">A /var/cache/nginx/uwsgi_temp</span><br><span class="line">C /etc</span><br><span class="line">C /etc/nginx</span><br><span class="line">C /etc/nginx/conf.d</span><br><span class="line">C /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>前缀含义说明：</p></li></ul><table><thead><tr><th>标志</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td><code>A</code></td><td><strong>Added（新增）</strong></td><td>文件或目录是容器运行后新增的</td></tr><tr><td><code>C</code></td><td><strong>Changed（修改）</strong></td><td>文件或目录是已有的，但内容或元数据（如权限、时间戳等）被修改了</td></tr><tr><td><code>D</code></td><td><strong>Deleted（删除）</strong></td><td>文件或目录是存在于原镜像中的，但在容器中被删除</td></tr></tbody></table><h3 id="docker-commit-从容器创建一个新的镜像"><code>docker commit</code> : 从容器创建一个新的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker commit &lt;container_id | container_name&gt; [image_name[:tag]]</span></span><br><span class="line">docker commit nginx nginx:v1.0</span><br></pre></td></tr></table></figure><h3 id="docker-export-导出容器内容为-tar-文件"><code>docker export</code> : 导出容器内容为 tar 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> nginx &gt; nginx.tar</span><br><span class="line">dcoker <span class="built_in">export</span> -o nginx.tar nginx</span><br><span class="line">docker <span class="built_in">export</span> nginx | gzip &gt; nginx.tar.gz</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Docker Export / Save / Commit 命令对比与导入方式一览表</p></li></ul><table><thead><tr><th>命令</th><th>操作对象</th><th>输出内容</th><th>是否包含历史层（镜像层）</th><th>是否保留元数据（标签、命令等）</th><th>典型用途</th><th>导入命令</th></tr></thead><tbody><tr><td><code>docker export</code></td><td><strong>容器</strong></td><td>容器的文件系统（tar 归档）</td><td>❌ 否</td><td>❌ 否</td><td>备份容器文件系统或迁移容器状态</td><td><code>docker import &lt;tar&gt; &lt;image:tag&gt;</code></td></tr><tr><td><code>docker save</code></td><td><strong>镜像</strong></td><td>镜像的完整内容（含所有层的 tar）</td><td>✅ 是</td><td>✅ 是</td><td>分发或备份镜像</td><td><code>docker load &lt; &lt;tar&gt;</code></td></tr><tr><td><code>docker commit</code></td><td><strong>容器</strong></td><td>创建一个新的镜像</td><td>✅ 是（但只一层）</td><td>✅ 是</td><td>将当前容器状态打包成新镜像</td><td>不适用（直接生成镜像）</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 Docker 命令 中 容器管理 相关命令&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com&quot;&gt;Docker官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/docker/"/>
    
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 命令 之 Dockerfile</title>
    <link href="https://blog.hanqunfeng.com/2025/05/26/docker-dockerfile/"/>
    <id>https://blog.hanqunfeng.com/2025/05/26/docker-dockerfile/</id>
    <published>2025-05-26T13:30:05.000Z</published>
    <updated>2025-06-03T08:24:05.349Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 Docker 命令 中 Dockerfile 的使用方法</p></li><li class="lvl-2"><p><a href="https://docs.docker.com">Docker官方文档</a></p></li><li class="lvl-2"><p><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile官方文档</a></p></li></ul><span id="more"></span><h2 id="Dockerfile-是什么？">Dockerfile 是什么？</h2><ul class="lvl-0"><li class="lvl-2"><p>Docker可以通过读取 <code>Dockerfile</code> 中的指令来自动构建镜像。</p></li><li class="lvl-2"><p><code>Dockerfile</code> 是一个文本文档，其中包含用户可以在命令行上调用以组装镜像的所有指令。</p></li><li class="lvl-2"><p>可以在Dockerfile中使用的指令：</p></li></ul><table><thead><tr><th>指令</th><th>中文描述</th></tr></thead><tbody><tr><td><strong>ADD</strong></td><td>将本地或远程的文件/目录添加到镜像中，支持自动解压 <code>.tar</code> 文件和使用 URL 下载远程资源。通常推荐使用 <code>COPY</code>，除非需要这些高级功能。</td></tr><tr><td><strong>ARG</strong></td><td>定义构建阶段使用的变量，可在 <code>docker build</code> 命令中通过 <code>--build-arg</code> 传入，变量仅在构建时有效，不会保留在最终镜像中。</td></tr><tr><td><strong>CMD</strong></td><td>指定容器默认执行的命令和参数，容器运行时若未指定命令，则使用该指令设置的命令。如果配置了多个<code>CMD</code>，则只有最后一个生效。和<code>ENTRYPOINT</code>共同使用时，作为传递给<code>ENTRYPOINT</code>的参数。可被 <code>docker run</code> 提供的命令覆盖。</td></tr><tr><td><strong>COPY</strong></td><td>将构建上下文中的文件或目录复制到镜像中。相比 <code>ADD</code> 更简单、安全，推荐优先使用。</td></tr><tr><td><strong>ENTRYPOINT</strong></td><td>指定容器启动时的主命令，不容易被 <code>docker run</code> 中的命令覆盖。可与 <code>CMD</code> 配合使用，用于提供默认参数。</td></tr><tr><td><strong>ENV</strong></td><td>设置环境变量，变量将在构建和容器运行时均可使用。例如：配置应用参数或系统路径等。</td></tr><tr><td><strong>EXPOSE</strong></td><td>声明容器运行时将开放的端口，仅用于文档说明或与容器编排工具配合，不会自动进行端口映射。</td></tr><tr><td><strong>FROM</strong></td><td>指定基础镜像，是 Dockerfile 的起点。也可以用于多阶段构建，通过多次使用 <code>FROM</code> 指令创建多个构建阶段。</td></tr><tr><td><strong>HEALTHCHECK</strong></td><td>定义容器健康检查命令，用于定期检测容器内部服务的健康状态，可结合容器编排系统实现故障自动恢复。</td></tr><tr><td><strong>LABEL</strong></td><td>为镜像添加键值对形式的元数据，例如版本、维护者、用途说明等，方便镜像管理与自动化处理。</td></tr><tr><td><strong>MAINTAINER</strong></td><td>（已弃用）用于指定镜像维护者信息，推荐改用 <code>LABEL</code> 来设置作者信息。</td></tr><tr><td><strong>ONBUILD</strong></td><td>定义一个触发指令，当当前镜像作为基础镜像被其他 Dockerfile 使用时自动执行。常用于基础镜像的预设行为。</td></tr><tr><td><strong>RUN</strong></td><td>执行一条命令并提交结果作为新镜像层，常用于安装软件包、复制文件、设置权限等构建操作。</td></tr><tr><td><strong>SHELL</strong></td><td>更改 Dockerfile 中后续 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 等指令的默认 shell（如使用 <code>sh</code> 或 <code>powershell</code>）。</td></tr><tr><td><strong>STOPSIGNAL</strong></td><td>设置容器终止时发送的系统信号（如 <code>SIGTERM</code>），用于优雅关闭应用。</td></tr><tr><td><strong>USER</strong></td><td>设置执行后续命令时所使用的用户和用户组，增强容器的安全性，避免使用 root 权限。</td></tr><tr><td><strong>VOLUME</strong></td><td>定义容器内的挂载点，用于持久化数据或与宿主机/其他容器共享数据。运行容器时可指定挂载路径。</td></tr><tr><td><strong>WORKDIR</strong></td><td>设置工作目录，相当于执行 <code>cd</code>，用于简化后续命令中的路径。若目录不存在则自动创建。</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>构建阶段指令：FROM, ARG, ENV, COPY, ADD, RUN, WORKDIR, LABEL, USER, SHELL, ONBUILD</p></li><li class="lvl-2"><p>启动配置指令：CMD, ENTRYPOINT, HEALTHCHECK, EXPOSE, VOLUME, STOPSIGNAL</p></li></ul><h2 id="Dockerfile-指令介绍">Dockerfile 指令介绍</h2><h3 id="FROM">FROM</h3><ul class="lvl-0"><li class="lvl-2"><p>FROM 指令用于指定基础镜像（base image），是每一个 Dockerfile 中必须的第一条指令。所有后续指令都是基于这个基础镜像构建的。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt;[:&lt;tag&gt;] [AS &lt;stage-name&gt;]</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment">#   &lt;image&gt;：镜像名称（可以是本地已有的，也可以是从 Docker Hub 或其他镜像仓库拉取的）</span></span><br><span class="line"><span class="comment">#   [:&lt;tag&gt;]：镜像标签（可选，默认是 latest）</span></span><br><span class="line"><span class="comment">#   [AS &lt;stage-name&gt;]：为该构建阶段指定名称，用于多阶段构建</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用最新版本的镜像（默认标签是 latest）</span></span><br><span class="line"><span class="keyword">FROM</span> node</span><br><span class="line"><span class="comment"># 使用指定的标签</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">16.13</span>.<span class="number">2</span>-alpine</span><br><span class="line"><span class="comment"># 使用私有镜像仓库</span></span><br><span class="line"><span class="keyword">FROM</span> private.registry.com/my-image:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用多阶段构建</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.20</span> AS builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o myapp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/myapp /usr/local/bin/myapp</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;myapp&quot;</span>]</span></span><br><span class="line"><span class="comment">## 这里用了两个阶段：</span></span><br><span class="line"><span class="comment">###   builder 阶段用来编译应用；</span></span><br><span class="line"><span class="comment">###   alpine 阶段用来打包最终镜像，只包含编译好的二进制文件，减少体积。</span></span><br></pre></td></tr></table></figure><h3 id="WORKDIR">WORKDIR</h3><ul class="lvl-0"><li class="lvl-2"><p>WORKDIR 指定了工作目录，即后续所有指令（如 RUN、CMD、ENTRYPOINT、COPY、ADD 等）所运行的当前路径（working directory）。</p></li><li class="lvl-2"><p>如果目录不存在，Docker 会自动创建它。</p></li><li class="lvl-2"><p>每个 WORKDIR 都会创建一层镜像（layer），所以不要重复设置无意义的路径。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR &lt;path&gt;</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment">#   &lt;path&gt;：要切换的工作目录，可以是绝对路径或相对路径。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置绝对路径</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续设置多个工作目录（逐层嵌套）</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /var</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> www</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> html</span></span><br><span class="line"><span class="comment"># 等同于:</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 避免在 RUN cd some_dir 后继续执行依赖路径的命令，因为 Docker 每一条指令都是新的 shell 实例，cd 不会跨指令保留，应该改用 WORKDIR。</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> some_dir  <span class="comment"># 错误</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> some_dir <span class="comment"># 正确</span></span></span><br></pre></td></tr></table></figure><h3 id="ARG">ARG</h3><ul class="lvl-0"><li class="lvl-2"><p>ARG 用于在 构建镜像时（build-time）传入参数。这些参数只在 构建阶段有效，不会出现在最终镜像中，也不会在容器运行时被保留。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ARG &lt;name&gt;[=&lt;default_value&gt;]</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment">#   &lt;name&gt;：参数名称</span></span><br><span class="line"><span class="comment">#   [=&lt;default_value&gt;]：参数的默认值，如果未传入参数，则使用默认值，如果为设置default_value，则构建镜像时必须传递参数，--build-arg</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个参数，在构建镜像时必须传入参数，--build-arg APP_ENV=development</span></span><br><span class="line"><span class="keyword">ARG</span> APP_ENV</span><br><span class="line"><span class="comment"># 带默认值的 ARG</span></span><br><span class="line"><span class="keyword">ARG</span> APP_ENV=development</span><br><span class="line"><span class="comment"># 使用参数</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;当前环境：<span class="variable">$&#123;APP_ENV&#125;</span>&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与 FROM 一起用（从 Docker 17.05 起）</span></span><br><span class="line"><span class="keyword">ARG</span> BASE=ubuntu</span><br><span class="line"><span class="keyword">FROM</span> $&#123;BASE&#125;:<span class="number">22.04</span></span><br></pre></td></tr></table></figure><h3 id="ENV">ENV</h3><ul class="lvl-0"><li class="lvl-2"><p>ENV 指令用于在镜像构建过程中定义环境变量（Environment Variables）。这些变量可以在之后的构建步骤（比如 RUN、CMD 等）中使用，也会在容器运行时生效。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两种语法</span></span><br><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key&gt;=&lt;value&gt; ...</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment">#   &lt;key&gt;：环境变量的名称</span></span><br><span class="line"><span class="comment">#   &lt;value&gt;：环境变量的值</span></span><br><span class="line"><span class="comment"># 如果定义多个变量，推荐使用 key=value 的形式。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> APP_ENV=production</span><br><span class="line"><span class="comment"># 定义多个变量</span></span><br><span class="line"><span class="keyword">ENV</span> APP_PORT=<span class="number">8080</span> NODE_ENV=production</span><br><span class="line"><span class="comment"># 使用多行格式（提高可读性）</span></span><br><span class="line"><span class="keyword">ENV</span> PATH=<span class="string">&quot;/usr/local/bin:$&#123;PATH&#125;&quot;</span> \</span><br><span class="line">    LANG=<span class="string">&quot;en_US.UTF-8&quot;</span> \</span><br><span class="line">    TZ=<span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="comment"># 也可以分开定义</span></span><br><span class="line"><span class="keyword">ENV</span> PATH=<span class="string">&quot;/usr/local/bin:$PATH&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> LANG=<span class="string">&quot;en_US.UTF-8&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=<span class="string">&quot;Asia/Shanghai&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>注意：ENV 指令定义的环境变量在构建阶段和运行阶段都会生效，但运行阶段会覆盖构建阶段定义的变量。</p></li></ul><h3 id="LABEL">LABEL</h3><ul class="lvl-0"><li class="lvl-2"><p>LABEL 用于为镜像添加元数据标签，以 <code>key=value</code> 的形式存在。这些标签可以是作者信息、版本描述、用途说明、构建时间等。</p></li><li class="lvl-2"><p>旧的 <code>MAINTAINER</code> 指令现在已被废弃，推荐使用 <code>LABEL</code> 来代替。</p></li><li class="lvl-2"><p>每个 LABEL 都会创建一层镜像（layer），推荐一次设置多个。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LABEL &lt;key&gt;=&lt;value&gt; [&lt;key&gt;=&lt;value&gt;...]</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment">#   &lt;key&gt;：标签的键</span></span><br><span class="line"><span class="comment">#   &lt;value&gt;：标签的值</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个标签</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;yourname@example.com&quot;</span></span></span><br><span class="line"><span class="comment"># 换行格式（推荐）,以下标签符合 OCI（Open Container Initiative） 镜像规范</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.title=<span class="string">&quot;MyApp&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.description=<span class="string">&quot;演示项目&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.version=<span class="string">&quot;1.0.0&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.authors=<span class="string">&quot;zhangsan@example.com&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="USER">USER</h3><ul class="lvl-0"><li class="lvl-2"><p>USER 指令用于指定后续指令（如 RUN、CMD、ENTRYPOINT、COPY 等）以哪个用户身份来执行。</p></li><li class="lvl-2"><p>默认情况下，Docker 容器中的命令以 root 用户运行，这虽然灵活但不安全。使用 USER 可以让我们切换到普通用户，从而提升容器的安全性，防止潜在的权限滥用。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USER &lt;user&gt;[:&lt;group&gt;]</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment">#   &lt;user&gt;：用户名或 UID</span></span><br><span class="line"><span class="comment">#   [:&lt;group&gt;]：可选，用户组名或 GID</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置用户</span></span><br><span class="line"><span class="keyword">USER</span> appuser</span><br><span class="line"><span class="comment"># 设置用户组</span></span><br><span class="line"><span class="keyword">USER</span> appuser:appgroup</span><br><span class="line"><span class="comment"># 使用 UID 和 GID</span></span><br><span class="line"><span class="keyword">USER</span> <span class="number">1000</span>:<span class="number">1000</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果基础镜像中没有你想要的用户，需要在 Dockerfile 中手动创建</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户和组</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> groupadd -r appgroup &amp;&amp; useradd -r -g appgroup appuser</span></span><br><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line"><span class="keyword">USER</span> appuser</span><br></pre></td></tr></table></figure><h3 id="ADD">ADD</h3><ul class="lvl-0"><li class="lvl-2"><p>ADD 用于将本地文件或目录、远程文件（URL） 或 压缩包 复制到镜像中的指定位置。</p></li><li class="lvl-2"><p>它的功能类似于 COPY，但比 COPY 多几个功能（解压、拉取远程文件等）。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ADD &lt;src&gt;... &lt;dest&gt;</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment">#   &lt;src&gt;：要复制的文件或目录，可以是本地文件、远程 URL、压缩包等</span></span><br><span class="line"><span class="comment">#   &lt;dest&gt;：目标路径</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从本地文件复制</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> app.jar /app.jar</span></span><br><span class="line"><span class="comment"># 复制多个</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> app1.jar app2.jar /app/</span></span><br><span class="line"><span class="comment"># 通配符</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> static-assets/*.html /app/public/</span></span><br><span class="line"><span class="comment"># 从远程 URL 复制</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> https://example.com/app.jar /app.jar</span></span><br><span class="line"><span class="comment"># 从压缩包中复制</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> static-assets.tar.gz /app/public/</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>最佳实践是优先使用 COPY，只有在需要 ADD 的额外功能时才使用它。</p></li></ul><h3 id="COPY">COPY</h3><ul class="lvl-0"><li class="lvl-2"><p>COPY 指令用于将主机上的文件或目录复制到镜像的文件系统中。它是构建镜像过程中最常用的数据引入方式之一。</p></li><li class="lvl-2"><p>与 ADD 类似，但功能更简单、明确、安全</p></li><li class="lvl-2"><p>推荐优先使用 COPY，除非你确实需要 ADD 提供的自动解压或远程下载功能。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY &lt;src&gt;... &lt;dest&gt;</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment">#   &lt;src&gt;：要复制的文件或目录</span></span><br><span class="line"><span class="comment">#   &lt;dest&gt;：目标路径</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制单个文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.jar /app.jar</span></span><br><span class="line"><span class="comment"># 复制多个文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app1.jar app2.jar /app/</span></span><br><span class="line"><span class="comment"># 复制目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> static-assets/ /app/public/</span></span><br><span class="line"><span class="comment"># 通配符</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> static-assets/*.html /app/public/</span></span><br><span class="line"><span class="comment"># 设置目标文件属主属组</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=appuser:appgroup app.jar /app.jar</span></span><br></pre></td></tr></table></figure><h3 id="RUN">RUN</h3><ul class="lvl-0"><li class="lvl-2"><p>RUN 指令用于在镜像构建阶段执行命令，结果会被打包进镜像层中。</p></li><li class="lvl-2"><p>它可以用于安装依赖、编译代码、运行命令等。</p></li><li class="lvl-2"><p>每一条 RUN 指令会创建一层镜像（layer）,合并多个命令成一条 RUN，可以减少镜像层数（例如使用 &amp;&amp; 串联）。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种格式：实际运行的是：/bin/sh -c &quot;&lt;命令字符串&gt;&quot;</span></span><br><span class="line">RUN &lt;命令字符串&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种格式</span></span><br><span class="line">RUN [<span class="string">&quot;可执行文件&quot;</span>, <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>, ...]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令字符串</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y curl</span></span><br><span class="line"><span class="comment"># 构建多个命令(用 &amp;&amp; 串联)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y python3 &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可执行文件参数</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;curl https://example.com/app.jar &gt; app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="CMD">CMD</h3><ul class="lvl-0"><li class="lvl-2"><p>CMD 用于指定容器启动时默认执行的命令及其参数。</p></li><li class="lvl-2"><p>如果用户在运行容器时没有手动指定其他命令，Docker 就会使用 CMD 提供的内容。</p></li><li class="lvl-2"><p>它可以定义多个，但只有最后一个会被使用。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Shell 形式（字符串）</span></span><br><span class="line">CMD <span class="built_in">command</span> param1 param2</span><br><span class="line"><span class="comment"># 等价于 /bin/sh -c &quot;command param1 param2&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Exec 形式（数组）</span></span><br><span class="line">CMD [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>, ...]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单 shell 命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Hello from container&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Exec 形式</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;start&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 作为 ENTRYPOINT 的参数</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;--host=0.0.0.0&quot;</span>, <span class="string">&quot;--port=8080&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>用户可以覆盖 CMD：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run &lt;myapp&gt; npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="ENTRYPOINT">ENTRYPOINT</h3><ul class="lvl-0"><li class="lvl-2"><p>ENTRYPOINT 定义容器启动时执行的主命令，相比 CMD，它不容易被覆盖，更适合制作“专用型”容器（如 nginx、python 脚本等）。</p></li><li class="lvl-2"><p>你可以把 ENTRYPOINT 理解为容器的“主程序”，而 CMD 是为它提供的默认“命令行参数”。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Shell 形式（字符串）</span></span><br><span class="line">ENTRYPOINT <span class="built_in">command</span> param1 param2</span><br><span class="line"><span class="comment">#  等价于 /bin/sh -c &quot;command param1 param2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Exec 形式（数组）</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>, ...]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单 shell 命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Hello from container&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Exec 形式</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;start&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结合 CMD 使用</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;--host=0.0.0.0&quot;</span>, <span class="string">&quot;--port=8080&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="EXPOSE">EXPOSE</h3><ul class="lvl-0"><li class="lvl-2"><p>EXPOSE 用于声明容器将会监听的端口，让使用该镜像的人知道应该对外开放哪些端口。</p></li><li class="lvl-2"><p>⚠️ 注意：EXPOSE 并不会真的开放端口，只是“声明”这个容器监听了这些端口。</p></li><li class="lvl-2"><p>要让端口真正暴露出来，还需要在运行容器时加上 <code>-p</code> 或 <code>--publish</code> 参数。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment">#   &lt;port&gt;：端口号，可以是单个端口号，也可以是范围（如 8080-8085）</span></span><br><span class="line"><span class="comment">#   &lt;protocol&gt;：协议，可以是 tcp 或 udp，默认为 tcp</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span>/udp</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span>-<span class="number">8085</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> <span class="number">8081</span> <span class="number">8082</span> <span class="number">8083</span> <span class="number">8084</span> <span class="number">8085</span></span><br></pre></td></tr></table></figure><h3 id="VOLUME">VOLUME</h3><ul class="lvl-0"><li class="lvl-2"><p>VOLUME 指令用于声明一个或多个容器中的挂载点（mount point），用于持久化数据或与宿主机/其他容器共享数据。</p></li><li class="lvl-2"><p>语法：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [<span class="string">&quot;/path/in/container&quot;</span>, ...]</span><br><span class="line"><span class="comment"># 路径必须是容器内部的绝对路径</span></span><br><span class="line"><span class="comment"># 可以一次声明一个，也可以是多个。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明一个挂载点</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /app/public</span></span><br><span class="line"><span class="comment"># 声明多个挂载点</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/app/public&quot;</span>, <span class="string">&quot;/app/logs&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>当容器运行时，可以将镜像中声明的挂载点映射到宿主机上，从而实现持久化数据。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /host/path:/app/public myimage</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果你没有手动绑定挂载，Docker 会自动创建一个匿名卷，卷的内容默认保存在宿主机的 <code>/var/lib/docker/volumes</code> 下。</p></li></ul><h3 id="HEALTHCHECK">HEALTHCHECK</h3><ul class="lvl-0"><li class="lvl-2"><p>HEALTHCHECK 用来定义容器运行时的健康检查命令，定期检测容器内服务的状态，帮助编排工具（Docker Swarm、Kubernetes 等）判断容器是否健康。</p></li><li class="lvl-2"><p>如果健康检查失败，Docker 会将容器标记为 unhealthy，便于自动重启或替换。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HEALTHCHECK &lt;options&gt; CMD &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment"># &lt;options&gt;：可选项，用于设置健康检查的选项，如超时时间、重试次数等。</span></span><br><span class="line"><span class="comment"># &lt;command&gt;：健康检查命令，可以是任何有效的 shell 命令。</span></span><br><span class="line">            <span class="comment"># 必须返回退出码:</span></span><br><span class="line">              <span class="comment"># 0 表示健康</span></span><br><span class="line">              <span class="comment"># 1 表示不健康</span></span><br><span class="line">              <span class="comment"># 2 表示未知</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>可选参数（OPTIONS）</p></li></ul><table><thead><tr><th>参数</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td><code>--interval=DURATION</code></td><td>两次健康检查之间的时间间隔</td><td>30s</td></tr><tr><td><code>--timeout=DURATION</code></td><td>单次检测命令的超时时间</td><td>30s</td></tr><tr><td><code>--start-period=DURATION</code></td><td>容器启动后，开始健康检查前的等待时间</td><td>0s</td></tr><tr><td><code>--retries=N</code></td><td>连续失败几次后判定容器不健康</td><td>3</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 curl 检测 Web 服务是否响应</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=5s --<span class="built_in">timeout</span>=3s --retries=3 CMD curl -f http://localhost:8080/health || <span class="built_in">exit</span> 1</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>运行容器后，可以用命令查看健康状态</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果镜像中有健康检查，可以查看容器状态（STATUS）</span></span><br><span class="line">docker ps</span><br><span class="line">  <span class="comment"># STATUS 列会显示：</span></span><br><span class="line">  <span class="comment">#   healthy</span></span><br><span class="line">  <span class="comment">#   unhealthy</span></span><br><span class="line">  <span class="comment">#   starting（启动中）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看更详细的信息</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;json .State.Health&#125;&#125;&#x27;</span> &lt;container-id&gt;</span><br></pre></td></tr></table></figure><h3 id="SHELL">SHELL</h3><ul class="lvl-0"><li class="lvl-2"><p>SHELL 指令用来自定义后续 RUN、CMD 和 ENTRYPOINT 指令所使用的默认 shell 程序和参数。</p></li><li class="lvl-2"><p>默认情况下：</p><ul class="lvl-2"><li class="lvl-4">在 Linux 镜像中，Docker 使用 /bin/sh -c</li><li class="lvl-4">在 Windows 镜像中，使用 cmd /S /C</li></ul></li><li class="lvl-2"><p>使用 SHELL，你可以替换为其他 shell，如 Bash、PowerShell、zsh 等。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHELL [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>, ...]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到 bash</span></span><br><span class="line"><span class="keyword">SHELL</span><span class="language-bash"> [<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多次切换</span></span><br><span class="line"><span class="keyword">SHELL</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Hello from Bash&quot;</span> <span class="comment"># 在 Bash 中执行</span></span></span><br><span class="line"><span class="keyword">SHELL</span><span class="language-bash"> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Now back to sh&quot;</span> <span class="comment">#  在 sh 中执行</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line"><span class="keyword">SHELL</span><span class="language-bash"> [<span class="string">&quot;powershell&quot;</span>, <span class="string">&quot;-Command&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="STOPSIGNAL">STOPSIGNAL</h3><ul class="lvl-0"><li class="lvl-2"><p>STOPSIGNAL 指定当容器收到 <code>docker stop</code> 命令时，发送给容器主进程的信号类型。</p></li><li class="lvl-2"><p>默认情况下，Docker 会向容器的主进程发送 <code>SIGTERM</code> 信号，让它有机会优雅地退出（在超时时未退出则发 <code>SIGKILL</code> 强制终止）。</p></li><li class="lvl-2"><p>默认情况，大多数程序（如 nginx），不需要设置（默认 SIGTERM）</p></li><li class="lvl-2"><p>但有些程序可能需要使用不同的信号，比如 SIGINT、SIGHUP，这时你可以通过 STOPSIGNAL 来修改。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">STOPSIGNAL &lt;signal&gt;</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment"># 其中 &lt;signal&gt; 可以是：</span></span><br><span class="line"><span class="comment">#   信号名称，例如：SIGTERM、SIGKILL、SIGINT、SIGHUP</span></span><br><span class="line"><span class="comment">#   或信号编号，例如：15（等价于 SIGTERM）</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是默认行为，不写也一样。</span></span><br><span class="line"><span class="keyword">STOPSIGNAL</span> SIGTERM</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为 SIGINT</span></span><br><span class="line"><span class="keyword">STOPSIGNAL</span> SIGINT</span><br></pre></td></tr></table></figure><h3 id="ONBUILD">ONBUILD</h3><ul class="lvl-0"><li class="lvl-2"><p>ONBUILD 用于定义延迟执行的构建指令，即这些命令不会在当前 Dockerfile 构建时执行，而是在 以当前镜像为基础的子镜像中构建时触发执行。</p></li><li class="lvl-2"><p>它的典型用途是：构建一个“通用基础镜像”，让使用者在自己的 Dockerfile 中 FROM 它时自动继承一些操作（比如 COPY、RUN 等）。</p></li><li class="lvl-2"><p>ONBUILD 是一种设计模式，方便基础镜像作者预先定义“未来子镜像构建时一定要执行的步骤”，而不是在基础镜像中“硬编码”那些步骤。</p></li><li class="lvl-2"><p>语法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ONBUILD &lt;INSTRUCTION&gt;</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment"># &lt;INSTRUCTION&gt;：必须是一个合法的 Dockerfile 指令，如 RUN、COPY、ADD、CMD 等（但不能是 FROM, ONBUILD, HEALTHCHECK 等）。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>示例</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像中使用 ONBUILD</span></span><br><span class="line"><span class="comment"># 文件：Dockerfile.base</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建基础镜像</span></span><br><span class="line">docker build -t my-node-base -f Dockerfile.base .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用基础镜像构建子镜像</span></span><br><span class="line"><span class="comment"># 文件：Dockerfile（子镜像）</span></span><br><span class="line"><span class="keyword">FROM</span> my-node-base</span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;index.js&quot;</span>]</span></span><br><span class="line"><span class="comment"># 构建子镜像时，等于自动插入了：</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>ONBUILD 是一种“构建钩子”机制</p><ul class="lvl-2"><li class="lvl-4">ONBUILD 可以理解成“钩子”或“触发器”：<ul class="lvl-4"><li class="lvl-6">在基础镜像构建时不执行</li><li class="lvl-6">但当某人以这个基础镜像为起点写自己的 Dockerfile，并构建时，这些 ONBUILD 里的指令自动插入执行</li></ul></li><li class="lvl-4">这样：<ul class="lvl-4"><li class="lvl-6">基础镜像只负责定义环境（node、npm版本、系统依赖等），保持轻量</li><li class="lvl-6">下游项目可以不用写重复的代码复制和安装指令，自动继承基础镜像预定义的构建步骤</li><li class="lvl-6">代码复制和依赖安装在下游镜像构建时执行，使用自己的上下文（也就是项目代码）</li></ul></li></ul></li><li class="lvl-2"><p><code>ONBUILD</code> 总结</p></li></ul><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>⏱ 延迟执行</td><td>构建基础镜像时不会执行，在子镜像构建时触发</td></tr><tr><td>✅ 支持指令</td><td>例如 <code>RUN</code>, <code>COPY</code>, <code>ADD</code>, <code>CMD</code>, <code>WORKDIR</code>, <code>ENV</code> 等</td></tr><tr><td>❌ 不支持</td><td><code>FROM</code>, <code>ONBUILD</code>, <code>HEALTHCHECK</code>, <code>SHELL</code>, <code>STOPSIGNAL</code></td></tr><tr><td>👎 不推荐滥用</td><td>会隐藏构建行为，降低可维护性</td></tr><tr><td>✅ 推荐场景</td><td>团队共享模板、构建“标准开发镜像”</td></tr></tbody></table><h2 id="Dockerfile-哪些-指令-会创建新的层">Dockerfile 哪些 指令 会创建新的层</h2><ul class="lvl-0"><li class="lvl-2"><p>当 Dockerfile 中创建新层的指令内容发生变化时，使用 <code>--no-cache</code> 选项可以确保这些变更被正确应用。</p></li></ul><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>ADD</td><td>从 <src> 复制文件并自动解压（如果是一个 tar 文件）到容器的 <dest> 路径。</td></tr><tr><td>COPY</td><td>从 <src> 复制文件到容器的 <dest> 路径，不会自动解压。</td></tr><tr><td>RUN</td><td>执行任意命令并在容器中做出更改。每条 RUN 指令都会创建一个新的层。</td></tr><tr><td>ENV</td><td>设置环境变量。每一行 ENV 指令都会创建一个新的层。</td></tr><tr><td>WORKDIR</td><td>设置工作目录。每一行 WORKDIR 指令都会创建一个新的层。</td></tr><tr><td>VOLUME</td><td>创建一个挂载点。每一行 VOLUME 指令都会创建一个新的层。</td></tr><tr><td>LABEL</td><td>添加元数据标签。每一行 LABEL 指令都会创建一个新的层。</td></tr></tbody></table><h2 id="Dockerfile-示例-Spring-Boot-应用">Dockerfile 示例: Spring Boot 应用</h2><ul class="lvl-0"><li class="lvl-2"><p>目录结构</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">springbootweb/</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── target/</span><br><span class="line">│   └── app.jar</span><br><span class="line">├── <span class="type">static</span>-assets.tar.gz</span><br><span class="line">└── ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Dockerfile</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用轻量级 Alpine 版本的 OpenJDK 17 官方镜像，适合部署 Spring Boot 应用</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">17</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置构建时变量，默认使用构建好的 jar 文件</span></span><br><span class="line"><span class="keyword">ARG</span> JAR_FILE=target/app.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置运行时环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_OPTS=<span class="string">&quot;-Xms1024M -Xmx1024M -XX:MetaspaceSize=128M -XX:MaxMetaspaceSize=128M&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像元信息</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;yourname@example.com&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;1.0.0&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> description=<span class="string">&quot;用于部署 Spring Boot 应用的生产级镜像&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 RUN：安装 curl（用于容器健康检查或调试）</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache curl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 Spring Boot 构建生成的 jar 包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> <span class="variable">$&#123;JAR_FILE&#125;</span> app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压静态资源到容器中（ADD 可以自动解压 tar.gz）</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> static-assets.tar.gz /app/public/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明暴露的应用端口（Spring Boot 默认是 8080）</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器健康检查：访问 actuator 健康端点</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=30s --<span class="built_in">timeout</span>=5s --retries=3 \</span></span><br><span class="line"><span class="language-bash">  CMD curl -f http://localhost:8080/app/actuator/health || <span class="built_in">exit</span> 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器终止时优雅关闭（Java 推荐 SIGTERM）</span></span><br><span class="line"><span class="keyword">STOPSIGNAL</span> SIGTERM</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置容器启动时的主命令（ENTRYPOINT 不会被 docker run 参数覆盖）</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java <span class="variable">$JAVA_OPTS</span> -jar app.jar&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CMD 提供默认的运行参数，可以被 docker run 覆盖</span></span><br><span class="line"><span class="comment"># 这里通过 Spring Boot 参数设置启动环境和端口号</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;--spring.profiles.active=app&quot;</span>, <span class="string">&quot;--server.port=8080&quot;</span>]</span></span><br><span class="line"><span class="comment"># 这里使用的是 ENTRYPOINT + CMD 的混合模式</span></span><br><span class="line"><span class="comment"># 完整命令： java $JAVA_OPTS -jar app.jar --spring.profiles.active=app --server.port=8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个卷挂载点，运行容器时可将该路径映射到宿主机，实现数据持久化</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/app/logs&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>构建镜像</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像时用 --build-arg 指定构建参数，如果需要多个，就配置多个 --build-arg</span></span><br><span class="line">docker build --build-arg JAR_FILE=target/app.jar -t springbootweb:latest .</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>运行容器</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name springbootweb \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -e JAVA_OPTS=<span class="string">&quot;-Xms512m -Xmx1024m&quot;</span> \</span><br><span class="line">  -v /home/centos/logs/app/:/app/logs \</span><br><span class="line">  springbootweb:latest</span><br></pre></td></tr></table></figure><h2 id="Dockerfile-示例-多阶段构建">Dockerfile 示例: 多阶段构建</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一阶段：获取代码</span></span><br><span class="line"><span class="keyword">FROM</span> alpine/git as fetcher</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /workspace/application</span></span><br><span class="line"><span class="comment"># 将替换为实际的Git仓库URL和分支/标签</span></span><br><span class="line"><span class="keyword">ARG</span> GIT_REPOSITORY=https://gitee.com/hanqunfeng/springbootweb.git</span><br><span class="line"><span class="keyword">ARG</span> GIT_BRANCH=master</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> git <span class="built_in">clone</span> -b <span class="variable">$&#123;GIT_BRANCH&#125;</span> <span class="variable">$&#123;GIT_REPOSITORY&#125;</span> .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二阶段：使用Maven环境进行构建</span></span><br><span class="line"><span class="keyword">FROM</span> maven:<span class="number">3.8</span>.<span class="number">4</span>-openjdk-<span class="number">17</span> AS builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /workspace/application</span></span><br><span class="line"><span class="comment"># 从第一阶段复制代码</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=fetcher /workspace/application .</span></span><br><span class="line"><span class="comment"># 使用Maven清理并打包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> mvn clean package -DskipTests</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三阶段：创建最终的运行环境</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">17</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="comment"># 设置运行时环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_OPTS=<span class="string">&quot;-Xms1024M -Xmx1024M -XX:MetaspaceSize=128M -XX:MaxMetaspaceSize=128M&quot;</span></span><br><span class="line"><span class="comment"># 将第二阶段生成的目标文件复制到这里。注意这里假设你的spring boot工程打成的jar名是target/app.jar</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /workspace/application/target/app.jar app.jar</span></span><br><span class="line"><span class="comment"># 暴露端口（如果需要的话）。请根据实际情况修改端口号</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 声明一个卷挂载点，运行容器时可将该路径映射到宿主机，实现数据持久化</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/app/logs&quot;</span>]</span></span><br><span class="line"><span class="comment"># 设置容器启动时的主命令（ENTRYPOINT 不会被 docker run 参数覆盖）</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java <span class="variable">$JAVA_OPTS</span> -jar app.jar&quot;</span>]</span></span><br><span class="line"><span class="comment"># CMD 提供默认的运行参数，可以被 docker run 覆盖</span></span><br><span class="line"><span class="comment"># 这里通过 Spring Boot 参数设置启动环境和端口号</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;--spring.profiles.active=app&quot;</span>, <span class="string">&quot;--server.port=8080&quot;</span>]</span></span><br><span class="line"><span class="comment"># 这里使用的是 ENTRYPOINT + CMD 的混合模式</span></span><br><span class="line"><span class="comment"># 完整命令： java $JAVA_OPTS -jar app.jar --spring.profiles.active=app --server.port=8080</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>构建镜像</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像，--no-cache 表示不使用缓存，每次构建都会重新构建</span></span><br><span class="line">docker build --no-cache -t app:latest .</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>运行容器</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name app \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -e JAVA_OPTS=<span class="string">&quot;-Xms512m -Xmx1024m&quot;</span> \</span><br><span class="line">  -v /home/centos/logs/app/:/app/logs \</span><br><span class="line">  app:latest</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 Docker 命令 中 Dockerfile 的使用方法&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com&quot;&gt;Docker官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot;&gt;Dockerfile官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/docker/"/>
    
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 命令 之 镜像(Image)</title>
    <link href="https://blog.hanqunfeng.com/2025/05/22/docker-command-image/"/>
    <id>https://blog.hanqunfeng.com/2025/05/22/docker-command-image/</id>
    <published>2025-05-22T13:30:05.000Z</published>
    <updated>2025-06-05T08:14:31.115Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 Docker 命令 中 镜像管理 相关命令</p></li><li class="lvl-2"><p><a href="https://docs.docker.com">Docker官方文档</a></p></li><li class="lvl-2"><p><a href="https://docs.docker.com/reference/#application-programming-interfaces-apis">Application programming interfaces (APIs)</a></p></li></ul><span id="more"></span><h2 id="docker-search-搜索镜像"><code>docker search</code> : 搜索镜像</h2><ul class="lvl-0"><li class="lvl-2"><p>推荐在<a href="https://hub.docker.com/">dockerhub</a>上搜索镜像，以获取更详细的镜像信息。</p></li><li class="lvl-2"><p>国内也可以通过<a href="https://1ms.run/">毫秒镜像</a>,<a href="https://dockers.xuanyuan.me">轩辕 Docker 镜像搜索</a>来搜索镜像。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker search --<span class="built_in">help</span></span><br><span class="line">用法:  docker search [OPTIONS] TERM</span><br><span class="line"></span><br><span class="line">在 Docker Hub 中搜索镜像</span><br><span class="line"></span><br><span class="line">选项:</span><br><span class="line">  -f, --filter filter   根据提供的条件过滤输出，常见的过滤条件包括：stars（星级）、is-official（是否为官方镜像）</span><br><span class="line">      --format string   使用 Go 模板美化输出，不太常用</span><br><span class="line">      --<span class="built_in">limit</span> int       搜索结果的最大数量</span><br><span class="line">      --no-trunc        不截断输出内容，显示完整信息（默认输出中某些字段如描述可能被截断）</span><br></pre></td></tr></table></figure><h3 id="示例">示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索名称中包含 nginx 的镜像</span></span><br><span class="line">$ docker search nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索名称中包含 nginx 且星级不少于 100 的镜像。</span></span><br><span class="line">$ docker search -f stars=100 nginx</span><br><span class="line"><span class="comment"># 搜索官方镜像</span></span><br><span class="line">$ docker search -f is-official=<span class="literal">true</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索 nginx，按照指定模板格式化输出</span></span><br><span class="line">$ docker search nginx --format <span class="string">&quot;&#123;&#123;.Name&#125;&#125;: &#123;&#123;.StarCount&#125;&#125; stars:  &#123;&#123;.Description&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索nginx镜像，并限制5个结果</span></span><br><span class="line">$ docker search nginx --<span class="built_in">limit</span> 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合使用多个选项</span></span><br><span class="line">$ docker search -f stars=100 --<span class="built_in">limit</span> 5 --no-trunc nginx</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong><code>docker search</code> 命令报错的解决方法</strong></em></p><ul class="lvl-1"><li class="lvl-2">目前国内使用<code>docker search</code>时会出现<code>Error response from daemon: Get &quot;https://index.docker.io/v1/search?q=nginx&amp;n=25&quot;: dial tcp 210.56.51.193:443: i/o timeout</code>的错误，即便我们配置了国内的镜像源，这个错误还是会存在。</li><li class="lvl-2">即便为宿主机和docker都配置上DNS也依然会报错。</li><li class="lvl-2">不过可以通过第三方镜像仓库进行查询，比如在查询的镜像名称前加上 <code>docker.1ms.run/</code>，比如查询<code>nginx</code>镜像，则输入<code>docker search docker.1ms.run/nginx</code>，这里要注意并不是所有的第三方镜像仓库都支持查询。</li><li class="lvl-2">可以编写一个脚本<code>docker_search</code>，查询镜像并输出结果，如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">&#x27;EOF&#x27;</span> &gt; docker_search</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">QUERY=<span class="variable">$&#123;1&#125;</span>     <span class="comment"># 查询关键词，这里要注意，第一个参数必须是查询关键词</span></span><br><span class="line"><span class="comment"># 获取除第一个参数外的所有参数</span></span><br><span class="line">ARGS=<span class="variable">$&#123;@:2&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;查询镜像：docker search docker.1ms.run/<span class="variable">$QUERY</span> <span class="variable">$ARGS</span>&quot;</span></span><br><span class="line">docker search docker.1ms.run/<span class="variable">$QUERY</span> <span class="variable">$ARGS</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x docker_search</span><br><span class="line"><span class="comment"># 将其移动到 /usr/local/bin/</span></span><br><span class="line"><span class="built_in">mv</span> docker_search /usr/local/bin/docker_search</span><br><span class="line"><span class="comment"># 如果/usr/local/bin/没有在PATH中，请添加到环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/usr/local/sbin&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">docker_search redis -f stars=100 --<span class="built_in">limit</span> 5 --no-trunc</span><br><span class="line"><span class="comment">## 输出</span></span><br><span class="line">NAME                DESCRIPTION                                                                                       STARS     OFFICIAL</span><br><span class="line">redis               Redis is the world’s fastest data platform <span class="keyword">for</span> caching, vector search, and NoSQL databases.      13315     [OK]</span><br><span class="line">redis/redis-stack   redis-stack installs a Redis server with additional database capabilities and the RedisInsight.   149</span><br><span class="line">bitnami/redis       Bitnami container image <span class="keyword">for</span> Redis</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">基于url搜索，支持分页，但不能支持其它search参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">&#x27;EOF&#x27;</span> &gt; docker_search_by_url</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数处理</span></span><br><span class="line">QUERY=<span class="variable">$&#123;1:-nginx&#125;</span>     <span class="comment"># 默认查询关键词</span></span><br><span class="line">N=<span class="variable">$&#123;2:-25&#125;</span>            <span class="comment"># 默认每页条数</span></span><br><span class="line">PAGE=<span class="variable">$&#123;3:-1&#125;</span>          <span class="comment"># 默认页码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像源列表：依次尝试访问这些域名，这里要注意，并不是所有的镜像源都支持搜索功能</span></span><br><span class="line">REGISTRIES=(</span><br><span class="line">  <span class="string">&quot;docker.1ms.run&quot;</span></span><br><span class="line">  <span class="string">&quot;register.librax.org&quot;</span></span><br><span class="line">  <span class="comment"># 你可以继续添加备用域名</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化成功标志</span></span><br><span class="line">WORKING_URL=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历域名，找到第一个可访问的</span></span><br><span class="line"><span class="keyword">for</span> REG <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;REGISTRIES[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  TEST_URL=<span class="string">&quot;https://<span class="variable">$&#123;REG&#125;</span>/v1/search?q=test&amp;n=1&quot;</span></span><br><span class="line">  <span class="keyword">if</span> curl -s --connect-timeout 2 <span class="string">&quot;<span class="variable">$TEST_URL</span>&quot;</span> | grep -q <span class="string">&#x27;&quot;results&quot;&#x27;</span>; <span class="keyword">then</span></span><br><span class="line">    WORKING_URL=<span class="string">&quot;https://<span class="variable">$&#123;REG&#125;</span>/v1/search?q=<span class="variable">$&#123;QUERY&#125;</span>&amp;n=<span class="variable">$&#123;N&#125;</span>&amp;page=<span class="variable">$&#123;PAGE&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果都失败，退出</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$WORKING_URL</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;❌ 无法连接任何镜像源，请检查网络或备用域名设置。&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求数据并格式化输出</span></span><br><span class="line">curl -s <span class="string">&quot;<span class="variable">$WORKING_URL</span>&quot;</span> \</span><br><span class="line">| jq -r <span class="string">&#x27;[&quot;NAME&quot;,&quot;STARS&quot;,&quot;OFFICIAL&quot;,&quot;DESCRIPTION&quot;],</span></span><br><span class="line"><span class="string">         (.results[] |</span></span><br><span class="line"><span class="string">         [.name,</span></span><br><span class="line"><span class="string">          (.star_count|tostring),</span></span><br><span class="line"><span class="string">          (if .is_official then &quot;[OK]&quot; else &quot;&quot; end),</span></span><br><span class="line"><span class="string">          .description])</span></span><br><span class="line"><span class="string">         | @tsv&#x27;</span> \</span><br><span class="line">| column -t -s $<span class="string">&#x27;\t&#x27;</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></div><h2 id="docker-image-镜像管理"><code>docker image</code> : 镜像管理</h2><ul class="lvl-0"><li class="lvl-2"><p><code>docker image --help</code></p></li></ul><table><thead><tr><th>命令</th><th>说明</th><th>别名(简写)</th></tr></thead><tbody><tr><td>build</td><td>从 Dockerfile 构建一个镜像</td><td>docker build</td></tr><tr><td>history</td><td>显示镜像的历史记录</td><td>docker history</td></tr><tr><td>import</td><td>从 tar 包导入内容以创建文件系统镜像</td><td>docker import</td></tr><tr><td>inspect</td><td>显示一个或多个镜像的详细信息</td><td>可以使用 <code>docker inspect</code></td></tr><tr><td>load</td><td>从 tar 归档或标准输入中加载镜像</td><td>docker load</td></tr><tr><td>ls</td><td>列出镜像</td><td>docker images</td></tr><tr><td>prune</td><td>移除未使用的镜像</td><td></td></tr><tr><td>pull</td><td>从镜像仓库下载镜像</td><td>docker pull</td></tr><tr><td>push</td><td>上传镜像到镜像仓库</td><td>docker push</td></tr><tr><td>rm</td><td>移除一个或多个镜像</td><td>docker rmi</td></tr><tr><td>save</td><td>将一个或多个镜像保存为 tar 归档（默认输出到标准输出）</td><td>docker save</td></tr><tr><td>tag</td><td>创建一个标签 TARGET_IMAGE 指向 SOURCE_IMAGE</td><td>docker tag</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>运行 <code>docker image COMMAND --help</code> 可获取某个命令的更多信息。</p></li></ul><h3 id="docker-pull-拉取镜像"><code>docker pull</code> : 拉取镜像</h3><ul class="lvl-0"><li class="lvl-2"><p><code>docker image pull</code> == <code>docker pull</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式，不加tag默认拉取 :latest</span></span><br><span class="line">$ docker pull &lt;image_name&gt;[:&lt;tag&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取nginx镜像，默认拉取最新版本：latest，nginx是官方镜像，完整名称实际上是 library/nginx</span></span><br><span class="line">$ docker pull nginx  ==  docker pull library/nginx  ==  docker pull nginx:latest</span><br><span class="line"><span class="comment"># 拉取指定tag的镜像</span></span><br><span class="line">$ docker pull nginx:1.28.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取非官方镜像，用户上传的</span></span><br><span class="line">$ docker pull hanqunfeng/alpine-jre8-slim:1.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取指定平台的镜像，如果不指定 --platform 参数，默认会拉取与你当前 Docker 客户端运行平台匹配的镜像，通过 docker version 查看</span></span><br><span class="line">$ docker pull --platform=linux/amd64 nginx:latest</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在 <a href="/2025/05/20/docker-install/" title="Linux 安装 Docker">Linux 安装 Docker</a> 中介绍了如配置国内的镜像加速源来加快镜像的拉取，但是国内镜像源不稳定，随时都有可能不可用，而且每次重新配置镜像源还需要重启Docker，可以编写一个脚本来完成<code>pull</code>，这样每次更新镜像源时只需要修改脚本，而不需要重启Docker了。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 脚本名称：docker_pull</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用法检查</span></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;用法: <span class="variable">$0</span> &lt;镜像名&gt;，例如：docker_pull redis&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始镜像名称，例如 nginx 或 someuser/image</span></span><br><span class="line">ORIGINAL_IMAGE_NAME=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像源列表，修改镜像源时只需要修改该列表即可</span></span><br><span class="line">MIRROR_LIST=(</span><br><span class="line">  <span class="string">&quot;docker.1ms.run&quot;</span></span><br><span class="line">  <span class="string">&quot;docker.xuanyuan.me&quot;</span></span><br><span class="line">  <span class="string">&quot;docker.m.daocloud.io&quot;</span></span><br><span class="line">  <span class="string">&quot;docker.1panel.live&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果镜像名中不包含 &quot;/&quot;，加上 &quot;library/&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$ORIGINAL_IMAGE_NAME</span>&quot;</span> != *<span class="string">&quot;/&quot;</span>* ]]; <span class="keyword">then</span></span><br><span class="line">  IMAGE_NAME=<span class="string">&quot;library/<span class="variable">$ORIGINAL_IMAGE_NAME</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  IMAGE_NAME=<span class="string">&quot;<span class="variable">$ORIGINAL_IMAGE_NAME</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历镜像源</span></span><br><span class="line"><span class="keyword">for</span> MIRROR <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;MIRROR_LIST[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  FULL_IMAGE=<span class="string">&quot;<span class="variable">$MIRROR</span>/<span class="variable">$IMAGE_NAME</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;尝试从 <span class="variable">$FULL_IMAGE</span> 拉取镜像...&quot;</span></span><br><span class="line">  <span class="keyword">if</span> docker pull <span class="string">&quot;<span class="variable">$FULL_IMAGE</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;成功拉取镜像：<span class="variable">$FULL_IMAGE</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将镜像重命名为去除镜像源前缀的版本</span></span><br><span class="line">    docker tag <span class="string">&quot;<span class="variable">$FULL_IMAGE</span>&quot;</span> <span class="string">&quot;<span class="variable">$ORIGINAL_IMAGE_NAME</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;镜像重命名为：<span class="variable">$ORIGINAL_IMAGE_NAME</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可选：删除带镜像源前缀的镜像</span></span><br><span class="line">    docker rmi <span class="string">&quot;<span class="variable">$FULL_IMAGE</span>&quot;</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;从 <span class="variable">$MIRROR</span> 拉取失败，尝试下一个镜像源...&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有镜像源尝试失败，无法拉取镜像：<span class="variable">$ORIGINAL_IMAGE_NAME</span>&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>如何获取镜像tag</strong></em></p><ul class="lvl-1"><li class="lvl-2">docker 命令中没有提供直接获取镜像tag的命令，如果不想到<code>dockerhub</code>上查看，可以通过如下方式获取(需要科学上网)：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只显示tag名称，官方镜像替换 nginx，非官方镜像替换 libryary/nginx，page_size=5表示每页5条数据，page=1表示第一页（默认为1）</span></span><br><span class="line">curl -s <span class="string">&quot;https://registry.hub.docker.com/v2/repositories/library/nginx/tags?page_size=5&amp;page=1&quot;</span> | jq <span class="string">&#x27;.results[].name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 也可以使用如下url，两者效果相同</span></span><br><span class="line"><span class="comment">## https://hub.docker.com/v2/namespaces/&#123;namespace&#125;/repositories/&#123;repository&#125;/tags?page_size=5&amp;page=1</span></span><br><span class="line"><span class="comment">## 示例：https://hub.docker.com/v2/namespaces/library/repositories/nginx/tags?page_size=1&amp;page=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出json格式，并显示最后更新时间和镜像大小</span></span><br><span class="line">curl -s <span class="string">&quot;https://registry.hub.docker.com/v2/repositories/library/nginx/tags?page_size=5&amp;page=1&quot;</span> | jq <span class="string">&#x27;.results[] | &#123;name,last_updated,full_size&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出表格格式，并格式化输出</span></span><br><span class="line">curl -s <span class="string">&quot;https://registry.hub.docker.com/v2/repositories/library/nginx/tags?page_size=5&amp;page=1&quot;</span> \</span><br><span class="line">| jq -r <span class="string">&#x27;.results[] |</span></span><br><span class="line"><span class="string">  &quot;\(.name)\t\t\(.last_updated | sub(&quot;T&quot;; &quot; &quot;) | sub(&quot;\\..*&quot;; &quot;&quot;))\t\t\(((.full_size / 1024 / 1024 * 100 | round)/100) | tostring) MB&quot;&#x27;</span> \</span><br><span class="line">  | awk <span class="string">&#x27;&#123;printf &quot;%-30s %-20s %8.2f MB\n&quot;, $1, $2&quot; &quot;$3, $4&#125;&#x27;</span></span><br></pre></td></tr></table></figure></div><h3 id="docker-images-列出镜像"><code>docker images</code> : 列出镜像</h3><ul class="lvl-0"><li class="lvl-2"><p><code>docker image ls</code> == <code>docker images</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有镜像，不包括悬空镜像，（dangling images:没有 tag 的镜像,通常是构建中间产物,例如：&lt;none&gt;:&lt;none&gt; 形式。）</span></span><br><span class="line">$ docker images</span><br><span class="line"><span class="comment"># 列出所有镜像，包括悬空镜像</span></span><br><span class="line">$ docker images -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有镜像，并显示镜像的摘要信息</span></span><br><span class="line">$ docker images --digests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有镜像，并输出为json格式</span></span><br><span class="line">$ docker images --format json</span><br><span class="line"><span class="comment"># 只显示镜像名称和标签</span></span><br><span class="line">$ docker images --format <span class="string">&quot;&#123;&#123;.Repository&#125;&#125;:&#123;&#123;.Tag&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示镜像ID</span></span><br><span class="line">$ docker images -q</span><br></pre></td></tr></table></figure><h3 id="docker-inspect-查看镜像的详细信息"><code>docker inspect</code> : 查看镜像的详细信息</h3><ul class="lvl-0"><li class="lvl-2"><p><code>docker image inspect</code> == <code>docker inspect</code></p></li><li class="lvl-2"><p>这里要注意，<code>docker inspect</code>如果基于名称查找会优先查找容器</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式</span></span><br><span class="line">$ docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示镜像的详细信息，镜像名称</span></span><br><span class="line">$ docker inspect nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示镜像的详细信息，镜像ID</span></span><br><span class="line">$ docker inspect 9f0c0d0a0f0f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示镜像的Labels信息，获取json中指定的字段</span></span><br><span class="line">$ docker image inspect --format=<span class="string">&#x27;&#123;&#123;json .Config.Labels&#125;&#125;&#x27;</span> nginx</span><br></pre></td></tr></table></figure><h3 id="docker-image-prune-删除未使用的镜像"><code>docker image prune</code> : 删除未使用的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除悬空镜像，（dangling images:没有 tag 的镜像,通常是构建中间产物,例如：&lt;none&gt;:&lt;none&gt; 形式。）</span></span><br><span class="line">$ docker image prune</span><br><span class="line"><span class="comment"># 删除全部未使用镜像(未被任何一个容器引用)，包括悬空镜像</span></span><br><span class="line">$ docker image prune -a</span><br><span class="line"><span class="comment"># 不进行确认提示，直接执行</span></span><br><span class="line">$ docker image prune -f</span><br></pre></td></tr></table></figure><h3 id="docker-rmi-删除镜像"><code>docker rmi</code> : 删除镜像</h3><ul class="lvl-0"><li class="lvl-2"><p><code>docker image rm</code> == <code>docker rmi</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式</span></span><br><span class="line">$ docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除镜像，镜像名称</span></span><br><span class="line">$ docker rmi nginx</span><br><span class="line"><span class="comment"># 删除多个镜像，空格分隔</span></span><br><span class="line">$ docker rmi nginx mysql</span><br><span class="line"><span class="comment"># 删除镜像，镜像ID</span></span><br><span class="line">$ docker rmi 9f0c0d0a0f0f</span><br><span class="line"><span class="comment"># 强制删除镜像，当镜像被容器引用时，会报错，需要使用-f参数进行强制删除</span></span><br><span class="line">$ docker rmi -f nginx</span><br><span class="line"><span class="comment"># 删除全部镜像</span></span><br><span class="line">$ docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="docker-history-查看镜像的构建历史"><code>docker history</code> : 查看镜像的构建历史</h3><ul class="lvl-0"><li class="lvl-2"><p><code>docker image history</code> == <code>docker history</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式</span></span><br><span class="line">$ docker <span class="built_in">history</span> [OPTIONS] IMAGE</span><br><span class="line"><span class="comment"># 查看镜像的历史记录，镜像名称</span></span><br><span class="line">$ docker <span class="built_in">history</span> nginx</span><br><span class="line"><span class="comment"># 查看镜像的历史记录，镜像ID</span></span><br><span class="line">$ docker <span class="built_in">history</span> 9f0c0d0a0f0f</span><br><span class="line"><span class="comment"># 显示完整的镜像历史记录，默认`CREATED BY`中的信息太长会被截断</span></span><br><span class="line">$ docker <span class="built_in">history</span> --no-trunc nginx</span><br><span class="line"><span class="comment"># 显示为json格式</span></span><br><span class="line">$ docker <span class="built_in">history</span> --format=json nginx</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>docker history</code> 显示的是构建历史，会将每一个 Dockerfile 指令都算一层，而不是物理镜像层（layer）数量，若要查看镜像的物理层数，可以通过如下命令查看</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image inspect --format <span class="string">&#x27;&#123;&#123; len .RootFS.Layers &#125;&#125;&#x27;</span> nginx</span><br></pre></td></tr></table></figure><h3 id="docker-tag-创建一个标签"><code>docker tag</code> : 创建一个标签</h3><ul class="lvl-0"><li class="lvl-2"><p><code>docker image tag</code> == <code>docker tag</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式</span></span><br><span class="line">$ docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span><br><span class="line"><span class="comment"># 创建一个标签</span></span><br><span class="line">$ docker tag nginx:latest hanqunfeng/nginx:latest</span><br><span class="line"><span class="comment"># 查看镜像，可以看到两个镜像的 IMAGE ID 一致</span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY         TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">hanqunfeng/nginx   latest    be69f2940aaf   5 weeks ago   192MB</span><br><span class="line">nginx              latest    be69f2940aaf   5 weeks ago   192MB</span><br><span class="line"><span class="comment"># 此时若通过 IMAGE ID 删除镜像，会报错，提示被多个 REPOSITORY 关联，需要使用 -f 参数进行强制删除</span></span><br><span class="line">$ docker rmi be69f2940aaf</span><br><span class="line">Error response from daemon: conflict: unable to delete be69f2940aaf (must be forced) - image is referenced <span class="keyword">in</span> multiple repositories</span><br></pre></td></tr></table></figure><h3 id="docker-save-将镜像保存为-tar-归档"><code>docker save</code> : 将镜像保存为 tar 归档</h3><ul class="lvl-0"><li class="lvl-2"><p><code>docker image save</code> == <code>docker save</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式</span></span><br><span class="line">$ docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line"><span class="comment"># 将镜像保存为 tar 归档，-o  指定输出文件，文件名称任意，甚至都不需要以 .tar 结尾</span></span><br><span class="line">$ docker save -o nginx.tar nginx</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ docker save nginx &gt; nginx.tar</span><br></pre></td></tr></table></figure><h3 id="docker-load-从-tar-归档中加载镜像"><code>docker load</code> : 从 tar 归档中加载镜像</h3><ul class="lvl-0"><li class="lvl-2"><p><code>docker image load</code> == <code>docker load</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式</span></span><br><span class="line">$ docker load [OPTIONS]</span><br><span class="line"><span class="comment"># 从 tar 归档中加载镜像，导出tar归档时的镜像名称就是加载后的镜像名称</span></span><br><span class="line">$ docker load -i nginx.tar</span><br><span class="line"><span class="comment"># -q 参数表示不显示进度条</span></span><br><span class="line">$ docker load -q -i nginx.tar</span><br></pre></td></tr></table></figure><h3 id="docker-import-从文件创建镜像"><code>docker import</code> : 从文件创建镜像</h3><ul class="lvl-0"><li class="lvl-2"><p><code>docker image import</code> == <code>docker import</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式</span></span><br><span class="line">$ docker import [OPTIONS] FILE|URL|- [REPOSITORY[:TAG]]</span><br><span class="line"><span class="comment">## 参数说明</span></span><br><span class="line">file本地 tar 文件，例如 rootfs.tar</span><br><span class="line">URL    网络地址（http/https）</span><br><span class="line">-    从标准输入读取（比如通过管道）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出镜像名称与标签</span></span><br><span class="line">REPOSITORY[:TAG]导入后镜像的名称与标签</span><br><span class="line"></span><br><span class="line"><span class="comment"># OPTIONS</span></span><br><span class="line">--change在导入镜像时设置 Dockerfile 指令，如 CMD、ENV、EXPOSE 等</span><br><span class="line">--message, -m添加导入说明（commit message）</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>docker import</code> 与  <code>docker load</code> 的区别</p></li></ul><table><thead><tr><th>命令</th><th>用途</th><th>格式</th><th>是否保留历史</th></tr></thead><tbody><tr><td><code>docker import</code></td><td>导入文件系统，创建镜像(由 <code>docker export</code> 生成)</td><td>纯文件系统 tar 包</td><td>❌ 不保留历史、标签等元数据</td></tr><tr><td><code>docker load</code></td><td>加载镜像（通常由 <code>docker save</code> 生成）</td><td>Docker 镜像 tar（含元数据）</td><td>✅ 保留 tag、层、历史等</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>示例: 从容器导出再导入</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动一个容器</span></span><br><span class="line">$ docker run -d -p 8080:80 --name nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出容器文件系统，此时 nginx 容器中的所有文件都保存在 my_nginx.tar 文件中</span></span><br><span class="line">$ docker <span class="built_in">export</span> -o my_nginx.tar nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入文件系统，导入时指定 启动命令，因为 my_nginx.tar 只是文件，并不包含任何启动命令</span></span><br><span class="line">$ docker import --change=<span class="string">&#x27;CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]&#x27;</span> my_nginx.tar nginx:my_tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像，镜像ID不一致</span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY         TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx              my_tag    4ab42de31bac   4 seconds ago   191MB</span><br><span class="line">nginx              latest    be69f2940aaf   5 weeks ago     192MB</span><br></pre></td></tr></table></figure><h3 id="docker-build-从指定目录或URL中的-Dockerfile-构建-Docker-镜像"><code>docker build</code> : 从指定目录或URL中的 Dockerfile 构建 Docker 镜像</h3><ul class="lvl-0"><li class="lvl-2"><p><code>docker image build</code> == <code>docker build</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式</span></span><br><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">PATH  Dockerfile 所在的目录</span><br><span class="line">URL      Git 仓库的 URL</span><br><span class="line">-      从标准输入读取 Dockerfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像，-t: 指定镜像名称，.: 表示从当前目录查找Dockerfile，默认文件名称为 Dockerfile</span></span><br><span class="line">docker build -t myimage:latest .</span><br><span class="line"><span class="comment"># 构建镜像，-f: 指定 Dockerfile 的相对路径，.: 表示基于当前目录，实际的 Dockerfile 路径就是 ./path/MyDockerfile</span></span><br><span class="line">docker build -t myimage:latest -f path/MyDockerfile .</span><br><span class="line"><span class="comment"># 实际的 Dockerfile 路径就是 /usr/local/path/MyDockerfile</span></span><br><span class="line">docker build -t myimage:latest -f path/MyDockerfile /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像，从 Git 仓库中构建，git 仓库的 Dockerfile 必须在根目录下</span></span><br><span class="line">docker build https://github.com/hanqunfeng/docker_test.git -t abc:1.0.0</span><br><span class="line"><span class="comment"># 构建镜像，从 Git 仓库中构建，指定 Dockerfile 的相对路径</span></span><br><span class="line">docker build -f docker/Dockerfile https://github.com/hanqunfeng/docker_test.git -t abc:1.0.1</span><br><span class="line"><span class="comment"># 构建镜像，从 Git 仓库中构建，指定分支或 tag</span></span><br><span class="line">docker build -f docker/Dockerfile https://github.com/hanqunfeng/docker_test.git#release -t abc:1.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像，--no-cache 表示不使用缓存，每次构建都会重新构建，但会非常慢，一般没有导致某一个层发生变化时不需要加上这个参数</span></span><br><span class="line">docker build --no-cache -t app:latest .</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>docker build</code>中还有一些重要的参数，以及<code>Dockerfile</code>文件该怎么编写，请参考<a href="/2025/05/26/docker-dockerfile/" title="Docker 命令 之 Dockerfile">Docker 命令 之 Dockerfile</a></p></li></ul><h3 id="docker-push-推送本地镜像到远程仓库"><code>docker push</code> : 推送本地镜像到远程仓库</h3><ul class="lvl-0"><li class="lvl-2"><p><code>docker image push</code> == <code>docker push</code></p></li><li class="lvl-2"><p>这里介绍如何将镜像推送到<code>docker hub</code>远程仓库</p></li><li class="lvl-2"><p>需要先在<a href="https://hub.docker.com/">docker hub</a>网站上创建一个账号，比如我的用户名是<code>hanqunfeng</code></p></li><li class="lvl-2"><p>然后就可以使用下面的命令将本地镜像推送到远程仓库了</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地镜像</span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY         TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx              latest    e573c6323878   18 hours ago   191MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对nginx镜像打tag,前缀必须与用户名一致</span></span><br><span class="line">$ docker tag nginx hanqunfeng/nginx:1.0.0</span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY         TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hanqunfeng/nginx   1.0.0     be69f2940aaf   5 weeks ago    192MB</span><br><span class="line">nginx              latest    be69f2940aaf   5 weeks ago    192MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 loghup</span></span><br><span class="line">$ docker login -u hanqunfeng</span><br><span class="line"></span><br><span class="line">i Info → A Personal Access Token (PAT) can be used instead.</span><br><span class="line">          To create a PAT, visit https://app.docker.com/settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Password: <span class="comment"># 输入密码</span></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录同时输入密码</span></span><br><span class="line"><span class="comment"># docker login -u hanqunfeng -p 12345678</span></span><br><span class="line"><span class="comment"># 登录其它仓库</span></span><br><span class="line"><span class="comment"># docker login -u username -p password registry.orther.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到docker hub，此后就可以通过 docker pull hanqunfeng/nginx:1.0.0 获取了</span></span><br><span class="line">$ docker push hanqunfeng/nginx:1.0.0</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 Docker 命令 中 镜像管理 相关命令&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com&quot;&gt;Docker官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/reference/#application-programming-interfaces-apis&quot;&gt;Application programming interfaces (APIs)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/docker/"/>
    
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux 安装 Docker</title>
    <link href="https://blog.hanqunfeng.com/2025/05/20/docker-install/"/>
    <id>https://blog.hanqunfeng.com/2025/05/20/docker-install/</id>
    <published>2025-05-20T13:30:05.000Z</published>
    <updated>2025-06-05T09:10:04.065Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 Linux 下的 Docker 安装方法，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p>windows、macos、ubuntu等桌面系统请安装 <a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a>。</p></li><li class="lvl-2"><p>阿里云专有服务器参考：<a href="https://help.aliyun.com/zh/ecs/use-cases/install-and-use-docker">阿里云专有服务器如何安装Docker</a></p></li><li class="lvl-2"><p>腾讯云专有服务器参考：<a href="https://cloud.tencent.com/document/product/1207/45596">腾讯云专有服务器如何安装Docker</a></p></li><li class="lvl-2"><p>AWS专有服务器参考：<a href="/2025/05/19/docker-install-aws/" title="AWS专有服务器如何安装Docker">AWS专有服务器如何安装Docker</a></p></li><li class="lvl-2"><p><a href="https://docs.docker.com">Docker官方文档</a></p></li><li class="lvl-2"><p><a href="https://docs.docker.com/engine/install/">安装Docker Engine</a></p></li></ul><span id="more"></span><h2 id="Docker-简介">Docker 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>Docker 是一个开源的容器化平台，用于打包、分发和运行应用程序。它通过将应用程序及其依赖打包到一个“容器”中，确保应用在不同环境中始终能够一致运行。与传统的虚拟机相比，Docker 容器更轻量、启动更快、资源占用更少。</p></li><li class="lvl-2"><p>Docker 采用<code>客户端-服务器</code>架构，核心组件包括 <code>Docker Engine</code>（负责构建和运行容器）、<code>Dockerfile</code>（定义构建镜像的指令）、<code>镜像</code>（应用和依赖的只读模板）和<code>容器</code>（基于镜像运行的实例）。开发者可以通过 Docker Hub 共享或下载镜像，极大简化了部署流程。</p></li><li class="lvl-2"><p>总结来说，Docker 提高了开发效率，支持持续集成与部署（CI/CD），在微服务架构中尤为常用，是现代 DevOps 流程的重要工具。</p></li><li class="lvl-2"><p><a href="https://docs.docker.com/get-started/docker-overview/">Docker是什么？</a><br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/nIdftv.png" alt=""></p></li></ul><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Docker 仓库（Registry）</td><td>Docker仓库用于存储Docker镜像。Docker Hub是一个任何人都可以使用的公共仓库，默认情况下，Docker在Docker Hub上查找图像。你也可以配置自己的私人仓库。<br>当您使用docker pull或docker run命令时，Docker会从您配置的仓库中提取所需的镜像。当您使用docker push命令时，Docker会将您的镜像推送到已配置的仓库中。</td></tr><tr><td>Docker 守护进程（Daemon）</td><td>监听Docker API请求，并管理Docker对象，如镜像、容器、网络和卷。守护程序还可以与其他守护程序通信来管理Docker服务。</td></tr><tr><td>Docker 客户端（Client）</td><td>Docker 客户端（docker）是许多用户与 Docker 交互的主要方式。当你使用如 docker run 这样的命令时，客户端会将这些命令发送给 dockerd（Docker 守护进程），由它来执行这些操作。<br>docker 命令是通过 Docker API 进行通信的。Docker 客户端可以与多个守护进程进行通信。</td></tr><tr><td>Docker 主机（Host）</td><td>运行 Docker 守护进程和容器的物理或虚拟机器。</td></tr><tr><td>Docker 镜像（Images）</td><td>创建容器的只读模板，包含运行应用所需的所有文件和配置。</td></tr><tr><td>Docker 容器（Container）</td><td>基于镜像运行的实例，是一个或多个应用的独立运行环境。</td></tr></tbody></table><h2 id="Docker-安装">Docker 安装</h2><ul class="lvl-0"><li class="lvl-2"><p>全新安装前需要先卸载旧版本，卸载<code>docker</code>也可以按照如下方式操作</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除Docker相关源</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -f /etc/yum.repos.d/docker*.repo</span><br><span class="line"><span class="comment"># 删除Docker相关软件包，dnf可能会报告您没有安装这些软件包。</span></span><br><span class="line"><span class="comment"># 卸载docker旧版本</span></span><br><span class="line"><span class="built_in">sudo</span> dnf -y remove \</span><br><span class="line">               docker \</span><br><span class="line">               docker-client \</span><br><span class="line">               docker-client-latest \</span><br><span class="line">               docker-common \</span><br><span class="line">               docker-latest \</span><br><span class="line">               docker-latest-logrotate \</span><br><span class="line">               docker-logrotate \</span><br><span class="line">               docker-engine</span><br><span class="line"><span class="comment"># 卸载docker新版本</span></span><br><span class="line"><span class="built_in">sudo</span> dnf -y remove \</span><br><span class="line">            docker-ce \</span><br><span class="line">            containerd.io \</span><br><span class="line">            docker-ce-rootless-extras \</span><br><span class="line">            docker-buildx-plugin \</span><br><span class="line">            docker-ce-cli \</span><br><span class="line">            docker-compose-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Docker数据,镜像、容器、卷和网络</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /var/lib/docker</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /var/lib/containerd</span><br><span class="line"><span class="comment"># 删除Docker配置</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /etc/docker/</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>设置docker存储库</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dnf -y install dnf-plugins-core</span><br><span class="line"><span class="comment"># 海外，添加Docker的官方存储库</span></span><br><span class="line"><span class="built_in">sudo</span> dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 国内，添加阿里云的存储库</span></span><br><span class="line"><span class="built_in">sudo</span> dnf config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装 Docker</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装最新版本，升级 docker 时也是执行如下命令</span></span><br><span class="line"><span class="built_in">sudo</span> dnf -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line"><span class="comment"># 先查看所有版本</span></span><br><span class="line"><span class="built_in">sudo</span> dnf list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"><span class="comment">## 输出</span></span><br><span class="line">docker-ce.x86_64               3:26.1.3-1.el8                  docker-ce-stable</span><br><span class="line">docker-ce.x86_64               3:26.1.3-1.el8                  @docker-ce-stable</span><br><span class="line">docker-ce.x86_64               3:26.1.2-1.el8                  docker-ce-stable</span><br><span class="line">docker-ce.x86_64               3:26.1.1-1.el8                  docker-ce-stable</span><br><span class="line">docker-ce.x86_64               3:26.1.0-1.el8                  docker-ce-stable</span><br><span class="line">…………………………</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本，这里 VERSION_STRING 为版本号，例如 3:26.1.3-1.el8</span></span><br><span class="line"><span class="built_in">sudo</span> dnf install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-buildx-plugin docker-compose-plugin -y</span><br><span class="line"><span class="comment">## 比如</span></span><br><span class="line"><span class="built_in">sudo</span> dnf install docker-ce-3:26.1.3-1.el8 docker-ce-cli-3:26.1.3-1.el8 containerd.io docker-buildx-plugin docker-compose-plugin -y</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动 Docker</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置Docker守护进程在系统启动时自动启动</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>添加当前用户到docker组</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加当前用户到docker组，这样当前用户就可以不需要使用sudo就能使用docker命令</span></span><br><span class="line"><span class="comment"># 当前用户是centos</span></span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker centos</span><br><span class="line"><span class="comment"># 让组权限立即生效最稳妥的做法是：注销并重新登录远程主机，但也可以尝试用下面命令立即加载新组</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>验证 Docker 安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker version <span class="comment"># 查看 Docker version</span></span><br><span class="line"><span class="comment"># 显示 Docker 基本信息，包括版本信息，插件信息，镜像加速信息等等。</span></span><br><span class="line">docker info</span><br><span class="line"><span class="comment"># 拉取hello-world镜像，此时国内会提示访问失败，需要添加国内镜像源</span></span><br><span class="line">docker pull hello-world</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>添加国内镜像源</p></li></ul><blockquote><p>目前国内大部分的Docker镜像源都关闭了，另外阿里云的Docker镜像源只允许在阿里云的机器上使用。<br>参考：<a href="https://blog.xuanyuan.me/archives/1154">Docker/DockerHub 国内镜像源/加速列表</a>,<a href="https://status.1panel.top/status/docker">国内 Docker 服务状态 &amp; 镜像加速监控</a><br>注意：国内镜像源的更新会比官网滞后，但只要不是获取最新版本基本上是够用的。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">        &quot;https://docker.1ms.run&quot;,</span></span><br><span class="line"><span class="string">        &quot;https://docker.xuanyuan.me&quot;,</span></span><br><span class="line"><span class="string">        &quot;https://docker.m.daocloud.io&quot;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Docker</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过如下命令查看是否配置生效，查看 Registry Mirrors 中的配置</span></span><br><span class="line">docker info</span><br><span class="line"><span class="comment"># 验证国内镜像源</span></span><br><span class="line">docker pull hello-world</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Docker命令自动补全，参考：<a href="https://docs.docker.com/engine/cli/completion/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用的bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装bash-completion</span></span><br><span class="line"><span class="built_in">sudo</span> dnf install bash-completion -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加自动补全到当前登录用户</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOT &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="string">if [ -f /etc/bash_completion ]; then</span></span><br><span class="line"><span class="string">    . /etc/bash_completion</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">EOT</span></span><br><span class="line"><span class="comment"># 刷新bash</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建自动补全文件</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.local/share/bash-completion/completions</span><br><span class="line">docker completion bash &gt; ~/.local/share/bash-completion/completions/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个新的bash</span></span><br><span class="line"><span class="built_in">exec</span> bash</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>/var/lib/docker</code> 用于存储 Docker 运行时生成的数据，如镜像、容器、网络、卷、配置文件、日志等，其目录结构说明如下：</p></li></ul><table><thead><tr><th>目录名</th><th>作用说明</th></tr></thead><tbody><tr><td><code>buildkit/</code></td><td>存放 Docker BuildKit 构建缓存和状态信息；构建镜像时的中间文件和上下文会存于此，空间占用可能较大。</td></tr><tr><td><code>containers/</code></td><td>每个容器一个子目录，包含配置文件和运行日志（如 <code>container.log</code>），用于容器的运行状态记录和管理。</td></tr><tr><td><code>engine-id</code></td><td>存储 Docker 引擎的唯一 ID，Docker 安装时生成，常用于 swarm 节点识别。</td></tr><tr><td><code>image/</code></td><td>镜像的元数据（不含实际 layer 数据），组织镜像的结构、标签、驱动等信息。</td></tr><tr><td><code>network/</code></td><td>网络配置及状态信息，如默认 <code>bridge</code> 网络、自定义网络配置等。</td></tr><tr><td><code>overlay2/</code></td><td>镜像和容器实际的数据层（overlay2 是存储驱动），包含所有联合文件系统层，是 Docker 中最大的空间使用者。</td></tr><tr><td><code>plugins/</code></td><td>存放 Docker 插件（如网络、卷插件）的配置和数据，一般为空，除非使用了扩展插件。</td></tr><tr><td><code>runtimes/</code></td><td>支持的 OCI runtime 配置目录，如默认的 <code>runc</code>，也可能包含其他 runtime（如 <code>kata</code>, <code>gvisor</code>）。</td></tr><tr><td><code>swarm/</code></td><td>Docker swarm 模式下的集群元数据与节点状态，仅在初始化 swarm 后存在实际数据。</td></tr><tr><td><code>tmp/</code></td><td>Docker 的临时文件目录，如镜像下载缓存、挂载操作中的临时文件，通常可以清理但需小心。</td></tr><tr><td><code>volumes/</code></td><td>Docker 卷的数据目录，每个卷一个子目录，卷中的持久化数据实际存放于此。</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p><code>/var/lib/containerd</code> 是 Containerd 守护进程的默认数据存储目录。Containerd 是 Docker 和其他容器平台（如 Kubernetes）底层的 容器运行时（Container Runtime），负责拉取镜像、管理容器生命周期、挂载文件系统等操作。其目录结构说明如下：</p></li></ul><table><thead><tr><th>目录名</th><th>作用说明</th></tr></thead><tbody><tr><td><code>io.containerd.content.v1.content/</code></td><td>存储镜像 layer 的实际二进制内容（blob），遵循 OCI 镜像规范，是镜像和容器文件系统的数据来源。</td></tr><tr><td><code>io.containerd.metadata.v1.bolt/</code></td><td>使用 BoltDB 存储 containerd 的元数据（如镜像信息、容器状态、快照引用等），是 containerd 的核心元数据数据库。</td></tr><tr><td><code>io.containerd.runtime.v1.linux/</code></td><td>存储旧版（v1 API）运行时容器信息，目前已逐步被 <code>v2</code> 接口取代，仅在向后兼容场景中存在。</td></tr><tr><td><code>io.containerd.runtime.v2.task/</code></td><td>存储 v2 运行时接口下容器的运行时状态，如容器进程的 shim、PID、日志路径等，是容器实际运行时所依赖的。</td></tr><tr><td><code>io.containerd.snapshotter.v1.native/</code></td><td>使用 native 模式存储的容器快照（文件系统层），直接复制底层文件；性能较差，占用空间较大，主要用于测试或特定用途。</td></tr><tr><td><code>io.containerd.snapshotter.v1.overlayfs/</code></td><td>使用 overlayfs 模式存储容器的文件系统快照（镜像层和容器层）；这是生产环境默认的高效存储驱动。</td></tr><tr><td><code>tmpmounts/</code></td><td>临时挂载点目录，containerd 用于镜像解包、中间构建过程中的挂载操作，通常是构建或运行过程的临时数据。</td></tr></tbody></table><div class="tips"><p><em><strong>MacOS/Windows下无法查看<code>/var/lib/docker</code>的解决方法</strong></em></p><ul class="lvl-1"><li class="lvl-2">在 MacOS/Windows 上使用Docker时，是启动了一个虚拟机来运行docker的，由于其运行在虚拟机内部，直接查找<code>/var/lib/docker</code>路径是无效的。</li><li class="lvl-2">解决方法如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动一个临时容器，并进入其内部</span></span><br><span class="line">docker run --<span class="built_in">rm</span> -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh</span><br><span class="line"><span class="comment">## 说明</span></span><br><span class="line">--it</span><br><span class="line">    交互式地运行容器,并分配一个伪终端</span><br><span class="line"></span><br><span class="line">--<span class="built_in">rm</span></span><br><span class="line">    退出容器时，自动删除容器</span><br><span class="line"></span><br><span class="line">--privileged</span><br><span class="line">    给容器特权权限，这意味着容器几乎拥有宿主机的所有能力，能访问 /dev、修改内核参数等。非常强大但也很危险。</span><br><span class="line"></span><br><span class="line">--pid=host</span><br><span class="line">    容器共享宿主机的进程命名空间（PID Namespace）。</span><br><span class="line">    这使得容器可以看到并访问宿主机的所有进程（包括 PID 1，即系统 init 进程）。</span><br><span class="line"></span><br><span class="line">debian</span><br><span class="line">    使用的基础镜像是 Debian，容器里运行的是这个系统。</span><br><span class="line"></span><br><span class="line">nsenter -t 1 -m -u -n -i sh</span><br><span class="line">    这是容器内部运行的命令，用来进入宿主机的命名空间：</span><br><span class="line">        nsenter：Linux 工具，用于进入其他进程的命名空间。</span><br><span class="line">        -t 1：指定目标进程的 PID 是 1（宿主机的 init 或 systemd）。</span><br><span class="line">        -m：进入目标进程的 Mount Namespace（文件系统挂载）。</span><br><span class="line">        -u：进入目标的 UTS Namespace（主机名等）。</span><br><span class="line">        -n：进入目标的 Network Namespace（网络）。</span><br><span class="line">        -i：进入目标的 IPC Namespace（进程间通信）。</span><br><span class="line">        sh：在这些命名空间中执行一个 shell。</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">这个命令启动一个基于 Debian 的容器，给它所有特权，让它能看到宿主机的进程，然后使用 nsenter 进入 PID 为 1 的所有命名空间（相当于进入宿主机的视角），最后启动一个 sh，你就在容器里 “变成了宿主机”。</li><li class="lvl-2">这样，你就可以在这个容器中查看<code>/var/lib/docker</code>目录了。</li></ul></div>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 Linux 下的 Docker 安装方法，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;windows、macos、ubuntu等桌面系统请安装 &lt;a href=&quot;https://www.docker.com/products/docker-desktop/&quot;&gt;Docker Desktop&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;阿里云专有服务器参考：&lt;a href=&quot;https://help.aliyun.com/zh/ecs/use-cases/install-and-use-docker&quot;&gt;阿里云专有服务器如何安装Docker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;腾讯云专有服务器参考：&lt;a href=&quot;https://cloud.tencent.com/document/product/1207/45596&quot;&gt;腾讯云专有服务器如何安装Docker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;AWS专有服务器参考：&lt;a href=&quot;/2025/05/19/docker-install-aws/&quot; title=&quot;AWS专有服务器如何安装Docker&quot;&gt;AWS专有服务器如何安装Docker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com&quot;&gt;Docker官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;安装Docker Engine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/docker/"/>
    
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>AWS专有服务器如何安装Docker</title>
    <link href="https://blog.hanqunfeng.com/2025/05/19/docker-install-aws/"/>
    <id>https://blog.hanqunfeng.com/2025/05/19/docker-install-aws/</id>
    <published>2025-05-19T13:30:05.000Z</published>
    <updated>2025-06-05T09:08:14.574Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何在 AWS 专有服务器上安装 Docker</p></li></ul><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Update and install Docker</span></span><br><span class="line"><span class="built_in">sudo</span> yum update -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Amazon Linux 2</span></span><br><span class="line"><span class="built_in">sudo</span> amazon-linux-extras install docker -y</span><br><span class="line"><span class="comment"># Amazon Linux 2023</span></span><br><span class="line"><span class="built_in">sudo</span> yum install docker -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Docker Compose，注意通过这种方式安装的compose的使用方式为 `docker-compose`，而非标准的 `docker compose`</span></span><br><span class="line"><span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make the docker-compose command available</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable Docker service</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="comment"># Start the service</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br><span class="line"><span class="comment"># Add the current user to the docker group</span></span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker ec2-user</span><br><span class="line"><span class="comment"># 让组权限立即生效最稳妥的做法是：注销并重新登录远程主机，但也可以尝试用下面命令立即加载新组</span></span><br><span class="line">newgrp docker</span><br><span class="line"><span class="comment"># Check Docker version</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment"># Test Docker</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在 AWS 专有服务器上安装 Docker&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/docker/"/>
    
    
    <category term="docker" scheme="https://blog.hanqunfeng.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>JVM 之 命令行工具</title>
    <link href="https://blog.hanqunfeng.com/2025/05/13/jvm-tools-01/"/>
    <id>https://blog.hanqunfeng.com/2025/05/13/jvm-tools-01/</id>
    <published>2025-05-13T13:30:05.000Z</published>
    <updated>2025-05-19T02:45:12.011Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍JVM的命令行工具</p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html">JDK8 The Java® Virtual Machine Specification</a></p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">JDK8的java指令的官⽅⽂档</a></p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/en/java/javase/17/docs/specs/man/index.html">JDK⼯具官⽹⽂档</a></p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html">JDK17的java指令的官⽅⽂档</a></p></li></ul><span id="more"></span><h2 id="JVM-的参数-三类">JVM 的参数(三类)</h2><ul class="lvl-0"><li class="lvl-2"><p>标准参数: 以<code>-</code>开头，所有 HotSpot 都⽀持。例如<code>java -version</code>。这类参数可以使⽤<code>java -help</code> 或者<code>java -?</code>全部打印出来</p></li><li class="lvl-2"><p>⾮标准参数: 以<code>-X</code>开头，是特定 HotSpot版本⽀持的指令。例如<code>java -Xms200M -Xmx200M</code>。这类指令可以⽤<code>java -X</code> 全部打印出来。</p></li><li class="lvl-2"><p>不稳定参数: 这也是 JVM调优的噩梦。以<code>-XX</code> 开头，这些参数是跟特定HotSpot版本对应的，很有可能换个版本就没有了。详细的⽂档资料也特别少。JDK8 中的以下⼏个指令可以帮助开发者了解 JDK8 中的这⼀类不稳定参数。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintFlagsInitial -version   <span class="comment"># 所有参数的默认值</span></span><br><span class="line">java -XX:+PrintFlagsFinal -version      <span class="comment"># 所有参数最终⽣效的值。</span></span><br><span class="line">java -XX:+UnlockExperimentalVMOptions -XX:+PrintFlagsFinal -version      <span class="comment"># 所有参数最终⽣效的值，包含实验性参数。</span></span><br><span class="line">java -XX:+PrintCommandLineFlags -version <span class="comment"># 当前命令生效的值，可以看到是⽤的哪种GC。 JDK1.8默认⽤的ParallelGC</span></span><br></pre></td></tr></table></figure><h3 id="运行-java-XX-UnlockExperimentalVMOptions-XX-PrintFlagsFinal-version-返回值说明">运行 <code>java -XX:+UnlockExperimentalVMOptions -XX:+PrintFlagsFinal -version</code> 返回值说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Global flags]</span><br><span class="line">     intx ActiveProcessorCount                      = -1                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeDecrementScaleFactor          = 4                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeMajorGCDecayTimeScale         = 10                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePausePolicy                   = 0                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyCollectionCostMargin    = 50                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyInitializingSteps       = 20                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyOutputInterval          = 0                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyWeight                  = 10                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeThroughPutPolicy              = 0                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveTimeWeight                        = 25                                  &#123;product&#125;</span><br><span class="line">     bool AdjustConcurrency                         = <span class="literal">false</span>                               &#123;product&#125;</span><br><span class="line">     bool AggressiveHeap                            = <span class="literal">false</span>                               &#123;product&#125;</span><br><span class="line">     bool AggressiveOpts                            = <span class="literal">false</span>                               &#123;product&#125;</span><br><span class="line">     intx AliasLevel                                = 3                                   &#123;C2 product&#125;</span><br><span class="line">     ………………………………</span><br><span class="line"><span class="comment"># 格式：flag类型，flag名称，flag值，flag来源与作用域修饰符</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>flag类型:</p></li></ul><blockquote><p>jdk8</p></blockquote><table><thead><tr><th>标识符</th><th>含义</th><th>描述说明</th></tr></thead><tbody><tr><td><code>intx</code></td><td>有符号整数（int extended）</td><td>用于表示带符号整数型参数</td></tr><tr><td><code>uintx</code></td><td>无符号整数（unsigned int extended）</td><td>表示非负整数型参数</td></tr><tr><td><code>uint64_t</code></td><td>无符号 64 位整数</td><td>适用于需要更大整数值的参数，比如内存大小、纳秒时间戳等</td></tr><tr><td><code>bool</code></td><td>布尔型</td><td><code>true</code> 或 <code>false</code>，表示开关型参数。<code>+</code>表示开启，<code>-</code>表示关闭。 如 <code>-XX:+UseG1GC</code>，表示开启 G1 回收器功能。</td></tr><tr><td><code>double</code></td><td>双精度浮点型</td><td>用于表示浮点数值类型的 JVM 参数</td></tr><tr><td><code>ccstr</code></td><td>常量 C 字符串指针</td><td>表示字符串参数（不可变）</td></tr><tr><td><code>ccstrlist</code></td><td>C 字符串列表</td><td>表示以逗号分隔的字符串列表</td></tr></tbody></table><blockquote><p>jdk11后出现更多的类型</p></blockquote><table><thead><tr><th>标识符</th><th>含义</th><th>描述说明</th></tr></thead><tbody><tr><td><code>int</code></td><td>有符号整数,通常是 32 位</td><td>JVM 内部使用的普通 int 参数</td></tr><tr><td><code>uint</code></td><td>无符号整数,通常是 32 位</td><td>少量用于特殊场景的参数</td></tr><tr><td><code>size_t</code></td><td>内存大小</td><td>表示内存大小参数（单位一般为字节）,jdk11后出现，原来是 <code>uintx</code></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>flag来源与作用域修饰符</p></li></ul><blockquote><p>jdk8</p></blockquote><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td><code>&#123;product&#125;</code></td><td>正式产品参数（用户可用，可通过 <code>-XX:</code> 进行设置）</td></tr><tr><td><code>&#123;pd product&#125;</code></td><td>平台相关的正式参数（platform-dependent），在某些操作系统/CPU 上可用</td></tr><tr><td><code>&#123;C1 product&#125;</code></td><td>仅在使用 <strong>C1 编译器（优化编译器）</strong> 时有效的参数</td></tr><tr><td><code>&#123;C2 product&#125;</code></td><td>仅在使用 <strong>C2 编译器（优化编译器）</strong> 时有效的参数</td></tr><tr><td><code>&#123;manageable&#125;</code></td><td>可通过 JMX 动态管理的参数（运行时可调整）</td></tr><tr><td><code>&#123;ARCH product&#125;</code></td><td>与 CPU 架构相关的产品参数（如 x86、ARM 等）</td></tr><tr><td><code>&#123;lp64_product&#125;</code></td><td>仅在 64 位 JVM 上才有效的产品参数</td></tr><tr><td><code>&#123;experimental&#125;</code></td><td>实验性的 参数，可能在将来的版本中删除或更改。需要开启 -XX:+UnlockExperimentalVMOptions</td></tr></tbody></table><blockquote><p>jdk11后出现更多的类型</p></blockquote><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td><code>&#123;C1 pd product&#125;</code></td><td>平台相关的正式参数,仅在使用 <strong>C1 编译器（优化编译器）</strong> 时有效的参数</td></tr><tr><td><code>&#123;C2 pd product&#125;</code></td><td>平台相关的正式参数,仅在使用 <strong>C2 编译器（优化编译器）</strong> 时有效的参数</td></tr><tr><td><code>&#123;JVMCI product&#125;</code></td><td>此参数适用于 JVMCI 或 Graal 编译器相关功能，jdk21添加</td></tr></tbody></table><blockquote><p>另外，jdk11+ 中，最后还会多出一列，其作用是说明该参数的设置来源</p></blockquote><table><thead><tr><th>来源标识</th><th>含义说明</th></tr></thead><tbody><tr><td><code>&#123;default&#125;</code></td><td>使用的是该参数的默认值（没有被用户或系统设置）</td></tr><tr><td><code>&#123;command line&#125;</code></td><td>用户通过命令行显式设置的参数（如 <code>-XX:+UseG1GC</code>）</td></tr><tr><td><code>&#123;ergonomic&#125;</code></td><td>JVM 根据系统环境自动选择的值（自适应设置）</td></tr></tbody></table><h2 id="jps-查看当前jvm中的进程">jps: 查看当前jvm中的进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看java进程ID</span></span><br><span class="line">jps</span><br><span class="line"><span class="comment"># 查看java进程信息，包括ID和启动类或jar的名称</span></span><br><span class="line">jps -l</span><br><span class="line"><span class="comment"># 查看启动java进程时传递给jvm的参数设置</span></span><br><span class="line">jps -v</span><br><span class="line"><span class="comment"># 查看java进程信息，同时显示启动java进程时传递给jvm的参数设置</span></span><br><span class="line">jps -lv</span><br></pre></td></tr></table></figure><h2 id="jinfo-查看JVM参数">jinfo: 查看JVM参数</h2><ul class="lvl-0"><li class="lvl-2"><p>jinfo 是 JDK 自带的命令行工具之一，用于 查看和修改正在运行中的 Java 进程的配置信息，主要包括 JVM 参数、系统属性等信息。</p></li><li class="lvl-2"><p>在 Java 9+ 之后被标记为 deprecated，建议改用 jcmd 替代</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看正在运行的 JVM 参数</span></span><br><span class="line">jinfo &lt;PID&gt;</span><br><span class="line"><span class="comment"># jcmd 命令，分成三个</span></span><br><span class="line">jcmd &lt;pid&gt; VM.flags <span class="comment"># VM Flags</span></span><br><span class="line">jcmd &lt;pid&gt; VM.system_properties <span class="comment"># System Properties</span></span><br><span class="line">jcmd &lt;pid&gt; VM.command_line <span class="comment"># Command Line</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定进程的系统属性（-sysprops）</span></span><br><span class="line">jinfo -sysprops &lt;PID&gt;</span><br><span class="line"><span class="comment"># jcmd 命令</span></span><br><span class="line">jcmd &lt;pid&gt; VM.system_properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态修改 JVM 参数（仅支持部分参数）</span></span><br><span class="line">jinfo -flag [+|-]&lt;flagname&gt; &lt;pid&gt;</span><br><span class="line"><span class="comment">## 例：打开 GC 日志</span></span><br><span class="line">jinfo -flag +PrintGC &lt;pid&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否开启了某个 JVM 特性（如 UseG1GC）</span></span><br><span class="line">jinfo -flag UseG1GC &lt;pid&gt;</span><br></pre></td></tr></table></figure><h2 id="jstat-查看指定JAVA进程的运行状态">jstat: 查看指定JAVA进程的运行状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看运行状态</span></span><br><span class="line">jstat -gc &lt;PID&gt;</span><br><span class="line"><span class="comment"># 查看运行状态，每隔5000毫秒输出一次，共输出20次</span></span><br><span class="line">jstat -gc &lt;PID&gt; 5000 20</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">512.0  512.0   0.0   224.0  29696.0  27138.2   105984.0   96531.8   122368.0 114450.4 15360.0 14018.9    733    5.099   4      0.833    5.931</span><br><span class="line">512.0  512.0   0.0   224.0  29696.0  27203.9   105984.0   96531.8   122368.0 114450.4 15360.0 14018.9    733    5.099   4      0.833    5.931</span><br><span class="line">512.0  512.0   0.0   224.0  29696.0  27220.4   105984.0   96531.8   122368.0 114450.4 15360.0 14018.9    733    5.099   4      0.833    5.931</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>内存区统计（单位：KB）</p></li></ul><table><thead><tr><th>列名</th><th>含义说明</th></tr></thead><tbody><tr><td><strong>S0C</strong></td><td>Survivor 0 区的容量（KB）</td></tr><tr><td><strong>S1C</strong></td><td>Survivor 1 区的容量（KB）</td></tr><tr><td><strong>S0U</strong></td><td>Survivor 0 区已使用内存（KB）</td></tr><tr><td><strong>S1U</strong></td><td>Survivor 1 区已使用内存（KB）</td></tr><tr><td><strong>EC</strong></td><td>Eden 区的容量（KB）</td></tr><tr><td><strong>EU</strong></td><td>Eden 区已使用内存（KB）</td></tr><tr><td><strong>OC</strong></td><td>Old Generation（老年代）的容量（KB）</td></tr><tr><td><strong>OU</strong></td><td>Old Generation 已使用内存（KB）</td></tr><tr><td><strong>MC</strong></td><td>Metaspace（元空间）的容量（KB）</td></tr><tr><td><strong>MU</strong></td><td>Metaspace 已使用内存（KB）</td></tr><tr><td><strong>CCSC</strong></td><td>Compressed Class Space 的容量（KB）</td></tr><tr><td><strong>CCSU</strong></td><td>Compressed Class Space 已使用内存（KB）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>GC 次数与耗时(从应用程序启动到采样时)</p></li></ul><table><thead><tr><th>列名</th><th>含义说明</th></tr></thead><tbody><tr><td><strong>YGC</strong></td><td>Young GC（Minor GC） 的累计次数</td></tr><tr><td><strong>YGCT</strong></td><td>Young GC 累计耗时（单位：秒）</td></tr><tr><td><strong>FGC</strong></td><td>Full GC 的累计次数</td></tr><tr><td><strong>FGCT</strong></td><td>Full GC 累计耗时（单位：秒）</td></tr><tr><td><strong>GCT</strong></td><td>GC 总耗时（YGCT + FGCT，总和）</td></tr></tbody></table><h2 id="jstack-查看指定JAVA进程中各线程的调用堆栈">jstack: 查看指定JAVA进程中各线程的调用堆栈</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印线程的标准栈信息（栈帧 + 线程状态）</span></span><br><span class="line">jstack &lt;PID&gt;</span><br><span class="line"><span class="comment"># 在标准输出基础上，额外打印线程拥有的锁（monitor）和 waited on 锁对象信息</span></span><br><span class="line">jstack -l &lt;PID&gt;</span><br><span class="line"><span class="comment"># 输出到文件</span></span><br><span class="line">jstack -l &lt;PID&gt; &gt; jstack.tdump <span class="comment"># 这个文件名后缀只是为了方便 jvisualvm 查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="string">&quot;idle-connection-reaper&quot;</span> <span class="comment">#68 daemon prio=5 os_prio=0 tid=0x00007f38b6ae2800 nid=0x62e9 waiting on condition [0x00007f385b0f5000]</span></span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">at java.lang.Thread.<span class="built_in">sleep</span>(Native Method)</span><br><span class="line">at software.amazon.awssdk.http.apache.internal.conn.IdleConnectionReaper<span class="variable">$ReaperTask</span>.run(IdleConnectionReaper.java:151)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:624)</span><br><span class="line">at java.lang.Thread.run(Thread.java:750)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">- &lt;0x00000000c561cfd8&gt; (a java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>jstack输出内容含义</p></li></ul><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td><code>&quot;idle-connection-reaper&quot;</code></td><td>线程名称。这个线程是 AWS SDK 中用于清理空闲连接的后台线程。</td></tr><tr><td><code>#68</code></td><td>线程 ID（Java 层分配的编号）。</td></tr><tr><td><code>daemon</code></td><td>表示这是一个 <strong>守护线程</strong>。JVM 退出时不会等待守护线程运行结束。</td></tr><tr><td><code>prio=5</code></td><td>Java 层的线程优先级（默认 1–10，5 是默认）。</td></tr><tr><td><code>os_prio=0</code></td><td>操作系统层线程优先级（取决于操作系统和 JVM 的实现）。</td></tr><tr><td><code>tid=0x00007f38b6ae2800</code></td><td>线程 ID（Java 层使用的地址标识）。</td></tr><tr><td><code>nid=0x62e9</code></td><td>Native ID，操作系统分配的线程 ID（十六进制表示），可以通过命令<code>printf &quot;%d\n&quot; 0x62e9</code>转换为10进制。<br>  <code>ps -Lp &lt;PID&gt;</code> 和 <code>top -Hp &lt;PID&gt;</code> 展示的线程id是10进制</td></tr><tr><td><code>waiting on condition</code></td><td>线程状态说明：正在等待某种条件，一般指 <code>sleep()</code> 或 <code>wait()</code> 等。</td></tr><tr><td><code>[0x00007f385b0f5000]</code></td><td>栈帧的内存地址。</td></tr><tr><td><code>java.lang.Thread.State: TIMED_WAITING (sleeping)</code></td><td>线程状态。</td></tr><tr><td><code>at java.lang.Thread.sleep(Native Method)</code> <br> …………………………</td><td>线程调用栈信息，包括调用方法、调用参数、调用栈帧。</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>另外还有如下信息，表示此线程持有的可拥有同步器（例如 ReentrantLock），具体内容如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Locked ownable synchronizers:</span><br><span class="line">- &lt;0x00000000c561cfd8&gt; (a java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>内容</th><th>含义</th></tr></thead><tbody><tr><td><code>&lt;0x00000000c561cfd8&gt;</code></td><td>持有锁的对象地址。可以在其他线程中查找这个地址，以判断死锁等问题。</td></tr><tr><td><code>(a ThreadPoolExecutor$Worker)</code></td><td>表示该锁属于 <code>ThreadPoolExecutor</code> 的某个 <code>Worker</code> 线程（这是线程池的工作线程）。</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>线程状态</p></li></ul><table><thead><tr><th>状态</th><th>含义</th><th>常见原因 / 示例方法</th><th>示例 jstack 输出</th></tr></thead><tbody><tr><td><code>RUNNABLE</code></td><td>线程正在运行或准备运行，等待 CPU 时间片。</td><td>线程活跃运行中</td><td><code>&quot;Thread-0&quot; #1 prio=5 os_prio=0 tid=0x00007f8d9c001000 nid=0x1a runnable [0x00007f8dbf7fe000]</code></td></tr><tr><td><code>BLOCKED (on object monitor)</code></td><td>等待获取对象的监视器锁（同步锁），即等待进入同步块或方法。</td><td><code>synchronized</code> 同步块或方法</td><td><code>&quot;Thread-1&quot; #2 prio=5 os_prio=0 tid=0x00007f8d9c002000 nid=0x1b waiting for monitor entry [0x00007f8dbeaff000]</code></td></tr><tr><td><code>WAITING (on object monitor)</code></td><td>无限期等待其他线程执行某操作。</td><td><code>Object.wait()</code><br><code>Thread.join()</code><br><code>LockSupport.park()</code><br><code>Condition.await()</code></td><td><code>&quot;Thread-2&quot; #3 prio=5 os_prio=0 tid=0x00007f8d9c003000 nid=0x1c waiting on condition [0x00007f8dbebff000]</code></td></tr><tr><td><code>TIMED_WAITING (on object monitor)</code></td><td>等待固定时间，直到条件满足或超时。</td><td><code>Object.wait(long)</code><br><code>Thread.sleep(long)</code><br><code>Condition.awaitNanos(long)</code><br><code>DelayQueue.take()</code></td><td><code>&quot;Thread-3&quot; #4 prio=5 os_prio=0 tid=0x00007f8d9c004000 nid=0x1d timed_waiting [0x00007f8dbebff000]</code></td></tr><tr><td><code>TERMINATED</code></td><td>线程已运行完毕并退出（通常不在 jstack 中显示）。</td><td>-</td><td>-</td></tr></tbody></table><h3 id="使用jstack检查死锁">使用jstack检查死锁</h3><ul class="lvl-0"><li class="lvl-2"><p>死锁是指多个线程互相等待对方释放锁，导致无法继续运行的情况。</p></li></ul><h4 id="直接查找-Found-one-Java-level-deadlock-提示">直接查找 <code>Found one Java-level deadlock</code> 提示</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line">  waiting to lock monitor 0x0000000005c0a098 (object 0x00000000d5c10a70, a java.lang.Object),</span><br><span class="line">  <span class="built_in">which</span> is held by <span class="string">&quot;Thread-2&quot;</span></span><br><span class="line"><span class="string">&quot;Thread-2&quot;</span>:</span><br><span class="line">  waiting to lock monitor 0x0000000005c0a128 (object 0x00000000d5c10aa0, a java.lang.Object),</span><br><span class="line">  <span class="built_in">which</span> is held by <span class="string">&quot;Thread-1&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>表示两个线程互相等待对方释放锁，造成死锁。</p></li><li class="lvl-2"><p>目前只支持找出 <code>synchronized</code> 关键字阻塞住的线程，如果是 <code>java.util.concurrent.Lock</code> 目前还不支持。</p></li></ul><h4 id="手动判断死锁的特征（如果没有上面的提示）">手动判断死锁的特征（如果没有上面的提示）</h4><ul class="lvl-0"><li class="lvl-2"><p>如果 JVM 没有显式提示，你可以通过以下死锁特征进行手动识别：</p></li></ul><table><thead><tr><th>特征</th><th>描述</th></tr></thead><tbody><tr><td>线程处于 <code>BLOCKED</code> 状态</td><td>线程被锁阻塞在 <code>monitor</code> 上。</td></tr><tr><td><code>waiting to lock</code> 和 <code>locked</code> 出现交叉</td><td>一个线程正在等待另一个线程持有的锁，而另一个线程也在等待当前线程的锁。</td></tr><tr><td>没有能继续执行的线程</td><td>多个线程都处于 <code>BLOCKED</code> 状态，且相互依赖。</td></tr></tbody></table><div class="tips"><p><em><strong>在 Java 8 之后支持获取 JVM 内部线程</strong></em></p><ul class="lvl-1"><li class="lvl-2">VM 内部线程包括下面几种：</li></ul><table><thead><tr><th>线程类型</th><th>示例名称</th></tr></thead><tbody><tr><td>JIT（Just-In-Time）编译线程</td><td>C1 CompilerThread0, C2 CompilerThread0</td></tr><tr><td>GC 线程</td><td>GC Thread0, G1 Young RemSet Sampling</td></tr><tr><td>其它内部线程</td><td>VM Periodic Task Thread, VM Thread, Service Thread</td></tr></tbody></table><ul class="lvl-1"><li class="lvl-2"><p>自 JDK 7 及以上版本开始，HotSpot JVM 默认启用了：分层编译（Tiered Compilation），即同时使用 C1 和 C2 编译器。</p></li></ul><table><thead><tr><th>编译器</th><th>特性</th><th>用途</th></tr></thead><tbody><tr><td><strong>C1（Client Compiler）</strong></td><td>编译速度快，优化少</td><td>程序启动时使用，提升启动速度</td></tr><tr><td><strong>C2（Server Compiler）</strong></td><td>编译速度慢，优化强</td><td>热点代码达到一定门槛后使用，提升长期运行性能</td></tr></tbody></table><blockquote><p>JVM 启动后，先解释执行字节码；热点代码首先由 C1 编译器处理；如果进一步变热，交由 C2 编译器优化；整个过程由 JVM 自动管理，不需要手动干预。</p></blockquote><ul class="lvl-1"><li class="lvl-2"><p>是否可以指定只用某个编译器？是的，你可以用 JVM 参数控制，但真没必要。</p></li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-client</code></td><td>使用 C1 编译器（适合启动快）</td></tr><tr><td><code>-server</code></td><td>使用 C2 编译器（适合长时间运行的服务）</td></tr><tr><td><code>-XX:-TieredCompilation</code></td><td>禁用分层编译，仅使用 <code>-client</code> 或 <code>-server</code> 指定的编译器</td></tr></tbody></table></div><h2 id="jmap-分析运行中-Java-进程的内存使用情况">jmap: 分析运行中 Java 进程的内存使用情况</h2><ul class="lvl-0"><li class="lvl-2"><p>jmap 比较消耗内存，所以不推荐生产环境使用。</p></li></ul><h3 id="jmap-histo-pid-查看类实例数量及占用内存"><code>jmap -histo &lt;pid&gt;</code>: 查看类实例数量及占用内存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ jmap -histo 25238</span><br><span class="line">25238:</span><br><span class="line"></span><br><span class="line"> num     <span class="comment">#instances         #bytes  class name</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:        106175       10838440  [C</span><br><span class="line">   2:         94344        3019008  java.util.concurrent.ConcurrentHashMap<span class="variable">$Node</span></span><br><span class="line">   3:        105529        2532696  java.lang.String</span><br><span class="line">   4:         11203        2496608  [B</span><br><span class="line">   5:         20178        2430136  [Ljava.lang.Object;</span><br><span class="line">   6:         21642        2399904  java.lang.Class</span><br><span class="line">…………………………</span><br><span class="line">Total        857252       51328200</span><br><span class="line"></span><br><span class="line"><span class="comment"># num: 序号</span></span><br><span class="line"><span class="comment"># instances: 实例数量</span></span><br><span class="line"><span class="comment"># bytes: 实例字节数</span></span><br><span class="line"><span class="comment"># class name: 类名, [C is a char[]，[S is a short[]，[I is a int[]，[B is a byte[]，[L is a List</span></span><br><span class="line"><span class="comment"># Total: 总数</span></span><br></pre></td></tr></table></figure><h3 id="jmap-heap-pid-查看堆使用情况"><code>jmap -heap &lt;pid&gt;</code>: 查看堆使用情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$ jmap -heap 25238</span><br><span class="line">Attaching to process ID 25238, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.371-b11</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC with 2 thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:    <span class="comment"># 堆配置</span></span><br><span class="line">   MinHeapFreeRatio         = 0                     <span class="comment"># 最小空闲百分比</span></span><br><span class="line">   MaxHeapFreeRatio         = 100                     <span class="comment"># 最大空闲百分比</span></span><br><span class="line">   MaxHeapSize              = 1010827264 (964.0MB)    <span class="comment"># 最大堆大小</span></span><br><span class="line">   NewSize                  = 21495808 (20.5MB)       <span class="comment"># 新生代大小</span></span><br><span class="line">   MaxNewSize               = 336592896 (321.0MB)     <span class="comment"># 新生代最大大小</span></span><br><span class="line">   OldSize                  = 43515904 (41.5MB)       <span class="comment"># 老年代大小</span></span><br><span class="line">   NewRatio                 = 2                       <span class="comment"># 新生代与老年代比例</span></span><br><span class="line">   SurvivorRatio            = 8                       <span class="comment"># 幸存者比例</span></span><br><span class="line">   MetaspaceSize            = 21807104 (20.796875MB)   <span class="comment"># 元空间大小</span></span><br><span class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)   <span class="comment"># 压缩类空间大小，用于存储所有 类指针（Klass pointer）</span></span><br><span class="line">   MaxMetaspaceSize         = 17592186044415 MB       <span class="comment"># 元空间最大大小</span></span><br><span class="line">   G1HeapRegionSize         = 0 (0.0MB)               <span class="comment"># G1堆大小</span></span><br><span class="line"></span><br><span class="line">Heap Usage:       <span class="comment"># 堆使用情况</span></span><br><span class="line">PS Young Generation <span class="comment"># 年轻生代</span></span><br><span class="line">Eden Space:         <span class="comment"># Eden 区</span></span><br><span class="line">   capacity = 30932992 (29.5MB)    <span class="comment">#  Eden 区大小</span></span><br><span class="line">   used     = 16705104 (15.931228637695312MB) <span class="comment">#  Eden 区使用情况</span></span><br><span class="line">   free     = 14227888 (13.568771362304688MB) <span class="comment">#  Eden 区剩余情况</span></span><br><span class="line">   54.00416487354343% used                    <span class="comment">#  Eden 区使用百分比</span></span><br><span class="line">From Space:                      <span class="comment"># 幸存者区 survivor0</span></span><br><span class="line">   capacity = 524288 (0.5MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 524288 (0.5MB)</span><br><span class="line">   0.0% used</span><br><span class="line">To Space:                       <span class="comment"># 幸存者区 survivor1</span></span><br><span class="line">   capacity = 524288 (0.5MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 524288 (0.5MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Old Generation                <span class="comment"># 老年代</span></span><br><span class="line">   capacity = 193462272 (184.5MB)</span><br><span class="line">   used     = 43292112 (41.28657531738281MB)</span><br><span class="line">   free     = 150170160 (143.2134246826172MB)</span><br><span class="line">   22.377547597497458% used</span><br><span class="line"></span><br><span class="line">38722 interned Strings occupying 4184168 bytes. <span class="comment"># 堆中字符串数量及占用内存</span></span><br></pre></td></tr></table></figure><h3 id="jmap-dump-live-format-b-file-file-pid-创建一个快照，并保存到文件中"><code>jmap -dump:live,format=b,file=&lt;file&gt; &lt;pid&gt;</code>: 创建一个快照，并保存到文件中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个快照，并保存到当前目录下</span></span><br><span class="line">$ jmap -dump:live,format=b,file=test.hprof 25238</span><br><span class="line">Dumping heap to /tmp/test.hprof ...</span><br><span class="line">Heap dump file created</span><br></pre></td></tr></table></figure><h2 id="jcmd-可以替代jmap命令，jdk1-8-推荐使用">jcmd: 可以替代<code>jmap</code>命令，<code>jdk1.8+</code>推荐使用</h2><ul class="lvl-0"><li class="lvl-2"><p><code>jcmd</code> 是 <code>JDK</code> 的一个命令行工具，用于管理 <code>JVM</code>，<code>jcmd</code> 可以查看 <code>JVM</code> 的运行状态、查看堆内存信息、触发 GC、查看线程信息、查看类信息等等。</p></li><li class="lvl-2"><p>生产环境不建议使用<code>jmap</code>，因其会占用大量内存，推荐使用 <code>jcmd</code>。</p></li></ul><h3 id="jcmd-pid-GC-heap-info-查看堆使用情况"><code>jcmd &lt;pid&gt; GC.heap_info</code>: 查看堆使用情况</h3><ul class="lvl-0"><li class="lvl-2"><p>类似 <code>jmap -heap &lt;pid&gt;</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ jcmd 25238 GC.heap_info</span><br><span class="line">25238:</span><br><span class="line"> PSYoungGen      total 30208K, used 23593K [0x00000000ebf00000, 0x00000000edd80000, 0x0000000100000000)</span><br><span class="line">  eden space 29696K, 78% used [0x00000000ebf00000,0x00000000ed5d2560,0x00000000edc00000)</span><br><span class="line">  from space 512K, 43% used [0x00000000edd00000,0x00000000edd38000,0x00000000edd80000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000edc80000,0x00000000edc80000,0x00000000edd00000)</span><br><span class="line"> ParOldGen       total 105984K, used 96547K [0x00000000c3c00000, 0x00000000ca380000, 0x00000000ebf00000)</span><br><span class="line">  object space 105984K, 91% used [0x00000000c3c00000,0x00000000c9a48f10,0x00000000ca380000)</span><br><span class="line"> Metaspace       used 114450K, capacity 122262K, committed 122368K, reserved 1157120K</span><br><span class="line">  class space    used 14018K, capacity 15294K, committed 15360K, reserved 1048576K</span><br></pre></td></tr></table></figure><h3 id="jcmd-pid-GC-class-histogram-查看类加载情况"><code>jcmd &lt;pid&gt; GC.class_histogram</code>: 查看类加载情况</h3><ul class="lvl-0"><li class="lvl-2"><p>类似 <code>jmap -histo &lt;pid&gt;</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ jcmd 25238 GC.class_histogram</span><br><span class="line">25238:</span><br><span class="line"></span><br><span class="line"> num     <span class="comment">#instances         #bytes  class name</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:        106175       10838440  [C</span><br><span class="line">   2:         94344        3019008  java.util.concurrent.ConcurrentHashMap<span class="variable">$Node</span></span><br><span class="line">   3:        105529        2532696  java.lang.String</span><br><span class="line">   4:         11203        2496608  [B</span><br><span class="line">   5:         20178        2430136  [Ljava.lang.Object;</span><br><span class="line">   6:         21642        2399904  java.lang.Class</span><br><span class="line">…………………………</span><br><span class="line">Total        857252       51328200</span><br><span class="line"></span><br><span class="line"><span class="comment"># num: 序号</span></span><br><span class="line"><span class="comment"># instances: 实例数量</span></span><br><span class="line"><span class="comment"># bytes: 实例字节数</span></span><br><span class="line"><span class="comment"># class name: 类名, [C is a char[]，[S is a short[]，[I is a int[]，[B is a byte[]，[L is a List</span></span><br><span class="line"><span class="comment"># Total: 总数</span></span><br></pre></td></tr></table></figure><h3 id="jcmd-pid-GC-heap-dump-path-to-heap-hprof-导出-heap-dump"><code>jcmd &lt;pid&gt; GC.heap_dump /path/to/heap.hprof</code>: 导出 heap dump</h3><ul class="lvl-0"><li class="lvl-2"><p>替代 <code>jmap -dump:format=b,file=heap.hprof &lt;pid&gt;</code>，但仍会有停顿（触发FullGC），dump 过程慢，生产环境慎重使用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ jcmd 25238 GC.heap_dump ./heap.hprof</span><br><span class="line">25238:</span><br><span class="line">Heap dump file created</span><br><span class="line"><span class="comment"># 注意这里使用的是相对目录，./heap.hprof，但此时 &quot;./&quot; 并不是运行命令时所在的目录，而是指 Java 进程的工作目录，如果你不知道工作目录，可以通过如下命令查看</span></span><br><span class="line">jcmd &lt;pid&gt; VM.system_properties | grep <span class="string">&quot;user.dir&quot;</span></span><br><span class="line"><span class="comment"># linux下也可以通过如下命令查看</span></span><br><span class="line"><span class="built_in">ls</span> -l /proc/&lt;pid&gt;/cwd</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>因为生产环境不推荐使用 <code>jmap</code> 或 <code>jcmd</code> 导出 heap dump，所以我们需要在生产环境中配置如下jvm参数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeadDumpOnOutOfMemoryError <span class="comment"># 内存溢出（OOM）时会自动保存堆内存快照文件</span></span><br><span class="line">-XX:HeapDumpPath=/path/to/dump.hprof <span class="comment"># 指定堆内存快照文件保存路径，如果不配置，则默认保存在 Java 进程的工作目录下，文件名称默认为 java_&lt;pid&gt;.hprof</span></span><br></pre></td></tr></table></figure><h2 id="jhat-分析-Java-Heap-Dump-文件（-hprof）的工具">jhat: 分析 Java Heap Dump 文件（.hprof）的工具</h2><ul class="lvl-0"><li class="lvl-2"><p>jhat（Java Heap Analysis Tool）是 JDK 附带的一个用于**分析 Java Heap Dump 文件（.hprof）**的工具。它可以将堆快照作为 HTTP 服务加载，并允许你通过浏览器交互式地查看和查询对象信息。</p></li><li class="lvl-2"><p>不过需要注意的是：<br>🔺 从 JDK 9 起，jhat 已被官方废弃，推荐使用更强大的工具如 <code>VisualVM</code>、<code>Eclipse MAT</code> 或 <code>jcmd + 外部工具</code>。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认端口7000</span></span><br><span class="line">jhat &lt;heap dump file&gt;</span><br><span class="line"><span class="comment"># 指定端口</span></span><br><span class="line">jhat -port 8000 &lt;heap dump file&gt;</span><br></pre></td></tr></table></figure><h2 id="jvisualvm-图形化的-JVM-监控与分析工具">jvisualvm: 图形化的 JVM 监控与分析工具</h2><ul class="lvl-0"><li class="lvl-2"><p>jvisualvm（全称：Java VisualVM）是 Java 官方提供的一款 图形化的 JVM 监控与分析工具，用于观察、分析和调试正在运行的 Java 程序。它非常适合开发和测试环境中进行内存分析、线程分析、GC 行为观察等任务。</p></li><li class="lvl-2"><p>功能概览</p></li></ul><table><thead><tr><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><strong>进程监控</strong></td><td>查看本地或远程 JVM 进程的内存、CPU、线程等运行状态</td></tr><tr><td><strong>内存使用分析</strong></td><td>查看堆内存使用情况、GC 次数和时间、类实例分布等</td></tr><tr><td><strong>线程分析</strong></td><td>查看线程状态、线程栈、是否存在死锁</td></tr><tr><td><strong>GC 分析</strong></td><td>图形化展示 GC 活动、频率与耗时</td></tr><tr><td><strong>堆转储分析</strong></td><td>导入 <code>.hprof</code> 文件进行对象实例、类、引用关系分析</td></tr><tr><td><strong>CPU 分析</strong></td><td>分析方法调用路径、耗时、热点代码（需手动启用 CPU profiler）</td></tr><tr><td><strong>插件支持</strong></td><td>可以通过插件安装更多功能（如 Visual GC）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>启动 jvisualvm</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不要在生产环境使用，如果是分析服务端 .hprof 文件，可以导出到本地后在本地启动</span></span><br><span class="line">$ jvisualvm</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在 jvisualvm 中导入 .hprof 文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ jvisualvm --openfile &lt;heap dump file&gt;</span><br><span class="line"><span class="comment"># 或者 先打开 jvisualvm 后，点击 File -&gt; Open File -&gt; 选择 .hprof 文件</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>⚠️ 注意事项</p></li></ul><table><thead><tr><th>注意点</th><th>说明</th></tr></thead><tbody><tr><td>不适用于大规模生产环境监控</td><td>因为其分析过程可能会对 JVM 有轻微影响</td></tr><tr><td><code>.hprof</code> 文件过大时加载缓慢</td><td>可配合 Eclipse MAT 使用</td></tr><tr><td>CPU/Memory Profiler 会增加系统负担</td><td>使用时谨慎，建议只在测试环境启用</td></tr></tbody></table><h2 id="Eclipse-MAT-Java-Heap-Dump-分析工具">Eclipse MAT: Java Heap Dump 分析工具</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://eclipse.dev/mat">Eclipse MAT</a>（Eclipse Memory Analyzer Tool）是一个用于分析 Java 堆快照的工具，它提供了许多功能来帮助开发人员理解 Java 应用程序中的内存问题。</p></li></ul><div class="tips"><p><em><strong>MaxOS系统安装Eclipse MAT后，启动报错，报错信息为：The JVM shared library “/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/bin/…/lib/server/libjvm.dylib” does not contain the JNI_CreateJavaVM symbol.</strong></em></p><ul class="lvl-1"><li class="lvl-2">解决方法：<br>1.在应用列表，找到<code>MemoryAnalyzer.app</code>，然后右键单击后，选择<code>显示包内容</code>,进入Contents目录，找到<code>Info.plist</code>文件<br>2.打开<code>Info.plist</code>文件后，可以看到注释<code>&lt;string&gt;-vm&lt;/string&gt;</code>配置项，我们需要做的就是打开这个配置项，并且将其设置为我们系统的Java路径，最新版需要<code>jdk17+</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>-vm<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/hanqf/develop_soft/jdk17/bin/java<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="Arthas-推荐">Arthas : 推荐</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://arthas.aliyun.com">Arthas</a> 是阿里巴巴开源的一款 Java 诊断工具，专为线上诊断而设计。它可以帮助开发者在不重启、不修改代码的情况下，排查生产环境中 Java 应用的问题。</p></li><li class="lvl-2"><p>Arthas 支持 JDK 6+，支持 Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。</p></li><li class="lvl-2"><p>这里要注意一点，就是Arthas从<code>4.x</code>版本开始，需要依赖<code>JDK8+</code>，如果是<code>JDK6/7</code>，可以下载最后一个3.x版本 <a href="https://github.com/alibaba/arthas/releases/tag/arthas-all-3.7.2">3.7.2</a>。</p></li><li class="lvl-2"><p>为了方便我们学习，Arthas还为我们提供了一个练习场，<a href="https://killercoda.com/arthas/course/arthas-tutorials-cn">Arthas Playground</a>。</p></li></ul><h3 id="Arthas-核心特点">Arthas 核心特点</h3><ul class="lvl-0"><li class="lvl-2"><p>无需重启、侵入性低<br>Arthas 可以 attach 到正在运行的 JVM 上，不需要重启服务或修改源代码。</p></li><li class="lvl-2"><p>命令式交互体验<br>类似 Linux shell 的操作方式，支持 tab 补全、上下键历史命令等，非常直观。</p></li><li class="lvl-2"><p>实时查看和监控<br>可查看方法参数、返回值、调用栈、执行耗时、JVM 线程、内存等实时数据。</p></li><li class="lvl-2"><p>多种连接方式<br>支持命令行终端、本地 shell、Web 页面、telnet 等多种连接方式。</p></li><li class="lvl-2"><p>支持多种 JVM 版本<br>支持 Java 6+，包括 OpenJDK、Oracle JDK、Alibaba Dragonwell 等。</p></li></ul><h3 id="Arthas-常用命令">Arthas 常用命令</h3><h4 id="启动">启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">java -jar arthas-boot.jar</span><br><span class="line"><span class="comment">## 输出</span></span><br><span class="line">java -jar arthas-boot.jar --target-ip 0.0.0.0</span><br><span class="line">[INFO] JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk1.8.0_271.jdk/Contents/Home/jre</span><br><span class="line">[INFO] arthas-boot version: 4.0.5</span><br><span class="line">[INFO] Process 43959 already using port 3658</span><br><span class="line">[INFO] Process 43959 already using port 8563</span><br><span class="line">[INFO] Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.</span><br><span class="line">* [1]: 43959 demo-arthas-spring-boot.jar</span><br><span class="line">  [2]: 50851 org.jetbrains.idea.maven.server.RemoteMavenServer36</span><br><span class="line">  [3]: 50813 org.sonarsource.sonarlint.core.backend.cli.SonarLintServerCli</span><br><span class="line">  [4]: 50655 com.intellij.idea.Main</span><br><span class="line"><span class="comment"># 启动后，会自动进入交互模式，此时输入要监控的进程序号</span></span><br><span class="line">1 <span class="comment"># 比如这里输入 1 回车</span></span><br><span class="line"><span class="comment">## 输出</span></span><br><span class="line">[INFO] arthas home: /Users/hanqf/.arthas/lib/4.0.5/arthas</span><br><span class="line">[INFO] The target process already listen port 3658, skip attach.</span><br><span class="line">[INFO] arthas-client connect 0.0.0.0 3658</span><br><span class="line">  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.</span><br><span class="line"> /  O  \ |  .--. <span class="string">&#x27;&#x27;</span>--.  .--<span class="string">&#x27;|  &#x27;</span>--<span class="string">&#x27;  | /  O  \ &#x27;</span>   .-<span class="string">&#x27;</span></span><br><span class="line"><span class="string">|  .-.  ||  &#x27;</span>--<span class="string">&#x27;.&#x27;</span>   |  |   |  .--.  ||  .-.  |`.  `-.</span><br><span class="line">|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-<span class="string">&#x27;    |</span></span><br><span class="line"><span class="string">`--&#x27;</span> `--<span class="string">&#x27;`--&#x27;</span> <span class="string">&#x27;--&#x27;</span>   `--<span class="string">&#x27;   `--&#x27;</span>  `--<span class="string">&#x27;`--&#x27;</span> `--<span class="string">&#x27;`-----&#x27;</span></span><br><span class="line"></span><br><span class="line">wiki        https://arthas.aliyun.com/doc</span><br><span class="line">tutorials   https://arthas.aliyun.com/doc/arthas-tutorials.html</span><br><span class="line">version     4.0.5</span><br><span class="line">main_class  demo-arthas-spring-boot.jar</span><br><span class="line">pid         43959</span><br><span class="line">start_time  2025-05-14 14:57:18.031</span><br><span class="line">currnt_time 2025-05-14 14:59:22.004</span><br><span class="line"></span><br><span class="line">[arthas@43959]$ <span class="comment"># 此时进入 arthas 命令行交互状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出 arthas</span></span><br><span class="line">[arthas@43959]$ stop <span class="comment"># 退出 arthas</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>arthas 命令有很多，当常用的也就几个，另外如果记不住某个命令怎么用了可以通过如下命令查询</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">command</span>&gt; -h 或者 <span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="dashboard-实时查看-JVM-运行状态">dashboard :  实时查看 JVM 运行状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 JVM 运行状态， 默认每隔 5 秒刷新 CPU、内存、线程、GC 等信息</span></span><br><span class="line"><span class="comment"># 默认会一直刷新状态，按 `q` 或  `Ctrl+C` 退出</span></span><br><span class="line">dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔 2 秒刷新一次</span></span><br><span class="line">dashboard -i 2000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新 10 次后停止</span></span><br><span class="line">dashboard -n 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔 2 秒刷新一次，刷新 10 次后停止</span></span><br><span class="line">dashboard -i 2000 -n 10</span><br></pre></td></tr></table></figure><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/2L73Hi.png" alt="" width="1400" height="900"></p><h4 id="thread-查看当前-JVM-线程信息">thread : 查看当前 JVM 线程信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前 JVM 线程信息，按 CPU 使用率倒序</span></span><br><span class="line">thread</span><br><span class="line"><span class="comment"># 查看所有线程信息</span></span><br><span class="line">thread --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定线程的堆栈信息</span></span><br><span class="line">thread 18</span><br><span class="line"><span class="comment">## 输出</span></span><br><span class="line"><span class="string">&quot;http-nio-80-exec-1&quot;</span> Id=18 WAITING on java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>@51866c16</span><br><span class="line">    at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">    -  waiting on java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>@51866c16</span><br><span class="line">    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">    at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">    at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)</span><br><span class="line">    at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103)</span><br><span class="line">    at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:624)</span><br><span class="line">    at org.apache.tomcat.util.threads.TaskThread<span class="variable">$WrappingRunnable</span>.run(TaskThread.java:61)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看最忙的前5个线程的堆栈信息</span></span><br><span class="line">thread -n 5</span><br><span class="line"><span class="comment"># 查看全部线程的堆栈信息</span></span><br><span class="line">thread -n -1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 cpu 使用率统计的采样间隔，单位为毫秒，默认值为 200</span></span><br><span class="line">thread -i 500</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出当前阻塞其他线程的线程</span></span><br><span class="line">thread -b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定状态的线程</span></span><br><span class="line">thread --state WAITING</span><br></pre></td></tr></table></figure><h4 id="sc-查看-JVM-已加载的类信息">sc : 查看 JVM 已加载的类信息</h4><ul class="lvl-0"><li class="lvl-2"><p><code>Search-Class</code> 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通配符匹配，打印搜索到的类全名</span></span><br><span class="line">sc *.demo.*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印类的详细信息</span></span><br><span class="line">sc -d com.example.demo.arthas.AdminFilterConfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出类的 Field 信息</span></span><br><span class="line">sc -d -f com.example.demo.arthas.AdminFilterConfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通配符查询并获取classLoaderHash</span></span><br><span class="line">sc -d *AdminFilterConfig | grep classLoaderHash</span><br></pre></td></tr></table></figure><h4 id="sm-查看已加载类的方法信息">sm  : 查看已加载类的方法信息</h4><ul class="lvl-0"><li class="lvl-2"><p><code>Search-Method</code> 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Method 信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印指定类中的方法</span></span><br><span class="line">sm java.lang.String</span><br><span class="line"><span class="comment"># 展示方法的详细信息</span></span><br><span class="line">sm -d java.lang.String</span><br><span class="line"><span class="comment"># 展示指定方法的详细信息</span></span><br><span class="line">sm -d java.lang.String substring</span><br><span class="line"><span class="comment"># 模糊匹配</span></span><br><span class="line">sm -d java.lang.String eq*</span><br></pre></td></tr></table></figure><h4 id="jad-Java源码反编译工具">jad : Java源码反编译工具</h4><ul class="lvl-0"><li class="lvl-2"><p>验证生产环境下的代码是否与提交的代码一致</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印出类的源码，类名</span></span><br><span class="line">jad com.example.demo.arthas.user.UserController</span><br><span class="line"><span class="comment">## 输出</span></span><br><span class="line">jad com.example.demo.arthas.user.UserController</span><br><span class="line"></span><br><span class="line">ClassLoader:</span><br><span class="line">+-org.springframework.boot.loader.LaunchedURLClassLoader@5b2133b1</span><br><span class="line">  +-sun.misc.Launcher<span class="variable">$AppClassLoader</span>@5c647e05</span><br><span class="line">    +-sun.misc.Launcher<span class="variable">$ExtClassLoader</span>@452b3a41</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line">file:/Users/hanqf/Desktop/arhtas_dir/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/</span><br><span class="line"></span><br><span class="line">       /*</span><br><span class="line">        * Decompiled with CFR.</span><br><span class="line">        *</span><br><span class="line">        * Could not load the following classes:</span><br><span class="line">        *  com.example.demo.arthas.user.User</span><br><span class="line">        *  org.slf4j.Logger</span><br><span class="line">        *  org.slf4j.LoggerFactory</span><br><span class="line">        *  org.springframework.web.bind.annotation.GetMapping</span><br><span class="line">        *  org.springframework.web.bind.annotation.PathVariable</span><br><span class="line">        *  org.springframework.web.bind.annotation.RestController</span><br><span class="line">        */</span><br><span class="line">       package com.example.demo.arthas.user;</span><br><span class="line"></span><br><span class="line">       import com.example.demo.arthas.user.User;</span><br><span class="line">       import org.slf4j.Logger;</span><br><span class="line">       import org.slf4j.LoggerFactory;</span><br><span class="line">       import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">       import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">       import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">       @RestController</span><br><span class="line">       public class UserController &#123;</span><br><span class="line">           private static final Logger logger = LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line">           @GetMapping(value=&#123;<span class="string">&quot;/user/&#123;id&#125;&quot;</span>&#125;)</span><br><span class="line">           public User findUserById(@PathVariable Integer <span class="built_in">id</span>) &#123;</span><br><span class="line">/*15*/         logger.info(<span class="string">&quot;id: &#123;&#125;&quot;</span>, (Object)<span class="built_in">id</span>);</span><br><span class="line">/*17*/         <span class="keyword">if</span> (<span class="built_in">id</span> != null &amp;&amp; <span class="built_in">id</span> &lt; 1) &#123;</span><br><span class="line">                   throw new IllegalArgumentException(<span class="string">&quot;id &lt; 1&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="built_in">return</span> new User(id.intValue(), <span class="string">&quot;name&quot;</span> + <span class="built_in">id</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 411 ms.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反编译后的源码会有类加载器的信息，如果只希望打印源码，可以加上 --source-only</span></span><br><span class="line">jad --source-only com.example.demo.arthas.user.UserController</span><br><span class="line"><span class="comment"># 不显示行号</span></span><br><span class="line">jad --source-only com.example.demo.arthas.user.UserController --lineNumber <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出到文件</span></span><br><span class="line">jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出类中某个方法的源码，类名 + 方法名</span></span><br><span class="line">jad com.example.demo.arthas.user.UserController findUserById</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反编译时指定dump class文件目录</span></span><br><span class="line">jad --source-only com.example.demo.arthas.user.UserController --lineNumber <span class="literal">false</span> -d /tmp/jad</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>当有多个 ClassLoader 都加载了这个类时，jad 命令会输出对应 ClassLoader 实例的 hashcode，然后你只需要重新执行 jad 命令，并使用参数 -c <hashcode> 就可以反编译指定 ClassLoader 加载的那个类了；</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ jad org.apache.log4j.Logger</span><br><span class="line"></span><br><span class="line">Found more than one class <span class="keyword">for</span>: org.apache.log4j.Logger, Please use jad -c hashcode org.apache.log4j.Logger</span><br><span class="line">HASHCODE  CLASSLOADER</span><br><span class="line">69dcaba4  +-monitor<span class="string">&#x27;s ModuleClassLoader</span></span><br><span class="line"><span class="string">6e51ad67  +-java.net.URLClassLoader@6e51ad67</span></span><br><span class="line"><span class="string">            +-sun.misc.Launcher$AppClassLoader@6951a712</span></span><br><span class="line"><span class="string">            +-sun.misc.Launcher$ExtClassLoader@6fafc4c2</span></span><br><span class="line"><span class="string">2bdd9114  +-pandora-qos-service&#x27;</span>s ModuleClassLoader</span><br><span class="line">4c0df5f8  +-pandora-framework<span class="string">&#x27;s ModuleClassLoader</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Affect(row-cnt:0) cost in 38 ms.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 指定类加载器</span></span><br><span class="line"><span class="string">$ jad org.apache.log4j.Logger -c 69dcaba4</span></span><br></pre></td></tr></table></figure><h4 id="mc-Memory-Compiler-内存编译器，编译-java文件生成-class">mc : Memory Compiler/内存编译器，编译<code>.java</code>文件生成<code>.class</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译，这里一定要指定类加载器，否则会报错，因为你编译的类中可能import其它类，不指定就会提示找不到对应的类。</span></span><br><span class="line"><span class="comment"># 类加载器可以通过 jad 命令获取</span></span><br><span class="line">mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java</span><br><span class="line"><span class="comment"># 指定类加载器的编号</span></span><br><span class="line">mc -c 5b2133b1 /tmp/UserController.java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 UserController.class 文件输出到指定目录， -d 指定输出目录</span></span><br><span class="line">mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>mc 命令有可能失败。如果编译失败可以在本地编译好.class文件，再上传到服务器。</p></li></ul><h4 id="retransform-重新加载类-热修改代码">retransform : 重新加载类(热修改代码)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">retransform /tmp/com/example/demo/arthas/user/UserController.class</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 通过 retransform 重新加载的 class</span></span><br><span class="line">retransform -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除通过 retransform 重新加载的 class，通过 id 删除</span></span><br><span class="line">retransform -d 1</span><br><span class="line"><span class="comment"># 删除所有</span></span><br><span class="line">retransform --deleteAll</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除后要重新触发 retransform，否则内存中依旧使用的是删除前的 class</span></span><br><span class="line">retransform --classPattern com.example.demo.arthas.user.UserController</span><br></pre></td></tr></table></figure><h4 id="sysprop-查看当前-JVM-的系统属性">sysprop : 查看当前 JVM 的系统属性</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印系统属性</span></span><br><span class="line">sysprop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定单个 key，key支持自动补全</span></span><br><span class="line">sysprop java.version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过grep过滤</span></span><br><span class="line">sysprop | grep user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 或 修改 系统属性</span></span><br><span class="line">sysprop testKey testValue</span><br></pre></td></tr></table></figure><h4 id="sysenv-查看当前-JVM-的环境变量">sysenv : 查看当前 JVM 的环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有环境变量</span></span><br><span class="line">sysenv</span><br><span class="line"><span class="comment"># 指定单个 key，key支持自动补全</span></span><br><span class="line">sysenv PATH</span><br><span class="line"><span class="comment"># 通过grep过滤</span></span><br><span class="line">sysenv | grep PATH</span><br></pre></td></tr></table></figure><h4 id="jvm-查看当前-JVM-的信息，包含很多重要的信息">jvm : 查看当前 JVM 的信息，包含很多重要的信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jvm</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>GARBAGE-COLLECTORS </code> GC 相关</p></li><li class="lvl-2"><p><code>THREAD</code> 相关</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COUNT: JVM 当前活跃的线程数</span><br><span class="line">DAEMON-COUNT: JVM 当前活跃的守护线程数</span><br><span class="line">PEAK-COUNT: 从 JVM 启动开始曾经活着的最大线程数</span><br><span class="line">STARTED-COUNT: 从 JVM 启动开始总共启动过的线程次数</span><br><span class="line">DEADLOCK-COUNT: JVM 当前死锁的线程数</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>FILE-DESCRIPTOR</code> 文件描述符相关</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MAX-FILE-DESCRIPTOR-COUNT：JVM 进程最大可以打开的文件描述符数</span><br><span class="line">OPEN-FILE-DESCRIPTOR-COUNT：JVM 当前打开的文件描述符数</span><br></pre></td></tr></table></figure><h4 id="watch-函数执行数据观测">watch : 函数执行数据观测</h4><ul class="lvl-0"><li class="lvl-2"><p>让你能方便的观察到指定函数的调用情况。能观察到的范围为：返回值、抛出异常、入参，通过编写 OGNL 表达式进行对应变量的查看。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 观察指定类中某个方法的调用情况，className +  methodName + 返回值表达式</span></span><br><span class="line"><span class="comment"># 开启后，当方法被调用时，会按照指定的 `返回值表达式` 输出结果，返回值表达式 可以不指定，默认为 &#123;params, target, returnObj&#125;</span></span><br><span class="line">watch com.example.demo.arthas.user.UserController findUserById <span class="string">&#x27;&#123;params, throwExp&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 观察全部方法，通配符匹配</span></span><br><span class="line">watch com.example.demo.arthas.user.UserController <span class="string">&#x27;*&#x27;</span> <span class="string">&#x27;&#123;params, throwExp&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认输出结果没有展开，可以加上 -x 指定输出结果的属性遍历深度，默认为 1，最大值是 4</span></span><br><span class="line">watch com.example.demo.arthas.user.UserController <span class="string">&#x27;*&#x27;</span> <span class="string">&#x27;&#123;params, throwExp&#125;&#x27;</span> -x 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅当抛出异常时才打印，-e 在函数异常之后观察</span></span><br><span class="line">watch com.example.demo.arthas.user.UserController <span class="string">&#x27;*&#x27;</span> <span class="string">&#x27;&#123;params, throwExp&#125;&#x27;</span> -x 2 -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数条件过滤，params[0] &gt; 100 表示方法入参中第一个参数的值大于 100 时才触发打印</span></span><br><span class="line">watch com.example.demo.arthas.user.UserController * returnObj <span class="string">&#x27;params[0] &gt; 100&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按请求耗时进行过滤，#cost&gt;200 表示耗时大于200ms</span></span><br><span class="line">watch com.example.demo.arthas.user.UserController * <span class="string">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class="string">&#x27;#cost&gt;200&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出watch</span></span><br><span class="line">q</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>watch 命令表达式支持变量说明表</p></li></ul><table><thead><tr><th>名称</th><th>类型/说明</th><th>作用/含义</th></tr></thead><tbody><tr><td><code>loader</code></td><td><code>ClassLoader</code></td><td>方法所在类的类加载器对象</td></tr><tr><td><code>clazz</code></td><td><code>Class&lt;?&gt;</code></td><td>方法所属的类（<code>Class</code> 对象）</td></tr><tr><td><code>method</code></td><td><code>java.lang.reflect.Method</code></td><td>被调用的方法的反射对象</td></tr><tr><td><code>target</code></td><td><code>Object</code></td><td>方法的调用目标对象（即 <code>this</code> 对象），静态方法中为 <code>null</code></td></tr><tr><td><code>params</code></td><td><code>Object[]</code></td><td>方法的入参数组</td></tr><tr><td><code>returnObj</code></td><td><code>Object</code></td><td>方法的返回值</td></tr><tr><td><code>throwExp</code></td><td><code>Throwable</code></td><td>方法抛出的异常</td></tr><tr><td><code>isBefore</code></td><td><code>boolean</code></td><td>当前执行位置是否是方法调用<strong>之前</strong>（<code>BEFORE</code> 阶段）</td></tr><tr><td><code>isThrow</code></td><td><code>boolean</code></td><td>当前方法是否以异常结束（<code>THROWS</code> 阶段）</td></tr><tr><td><code>isReturn</code></td><td><code>boolean</code></td><td>当前方法是否正常返回（<code>RETURN</code> 阶段）</td></tr></tbody></table><h4 id="jobs-查看运行中的任务">jobs : 查看运行中的任务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如下命令会转到后台运行 ，与linux命令类似，命令最后加上 `&amp;` 即可</span></span><br><span class="line">watch com.example.demo.arthas.user.UserController * <span class="string">&#x27;&#123;params, throwExp&#125;&#x27;</span> <span class="string">&#x27;throwExp != null&#x27;</span> &gt;&gt; a.log &amp;</span><br><span class="line"><span class="comment"># 查看后台任务</span></span><br><span class="line"><span class="built_in">jobs</span></span><br><span class="line"><span class="comment">## 输出</span></span><br><span class="line">[1]*</span><br><span class="line">       Running           watch com.example.demo.arthas.user.UserController * <span class="string">&#x27;&#123;params, throwExp&#125;&#x27;</span> <span class="string">&#x27;throwExp != null&#x27;</span> &gt;&gt; a.log &amp;</span><br><span class="line">       execution count : 0</span><br><span class="line">       start time      : Thu May 15 15:10:04 CST 2025</span><br><span class="line">       <span class="built_in">timeout</span> <span class="built_in">date</span>    : Fri May 16 15:10:04 CST 2025</span><br><span class="line">       session         : ded56dfd-5683-4427-ac08-792f8fb75e5e (current)</span><br><span class="line"><span class="comment"># 结束任务</span></span><br><span class="line"><span class="built_in">kill</span> 1 <span class="comment"># 1为后台任务id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将后台任务转到前台</span></span><br><span class="line"><span class="built_in">fg</span> 1 <span class="comment"># 1为后台任务id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停任务，但此时会将arthas进程都挂起，所以并不好用</span></span><br><span class="line">ctrl+z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将前台任务转到后台继续执行</span></span><br><span class="line"><span class="built_in">bg</span> 1 <span class="comment"># 1为前台任务id</span></span><br></pre></td></tr></table></figure><h4 id="logger-查看-logger-信息，更新-logger-level">logger : 查看 logger 信息，更新 logger level</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 logger 信息</span></span><br><span class="line">logger</span><br><span class="line"><span class="comment"># 查看指定名字的logger信息</span></span><br><span class="line">logger -n ROOT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看没有 appender 的 logger 的信息，不加这个参数只会打印有 appender 的 logger 的信息</span></span><br><span class="line">logger --include-no-appender</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 logger level，-c classLoader 的 hashcode</span></span><br><span class="line">logger --name ROOT --level debug -c 5b2133b1</span><br><span class="line">logger --name ROOT --level error --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br></pre></td></tr></table></figure><h4 id="classloader-查看-classloader-的继承树，urls，类加载信息">classloader : 查看 classloader 的继承树，urls，类加载信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 classloader 的信息，加载class的数量，hashcode，classloader 的 parent</span></span><br><span class="line">classloader -l</span><br><span class="line"><span class="comment"># 树形展示</span></span><br><span class="line">classloader -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找资源，比如查找指定名称的文件</span></span><br><span class="line">classloader -c 5b2133b1 -r application.properties</span><br><span class="line">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br></pre></td></tr></table></figure><h4 id="ognl-执行-ognl-表达式">ognl : 执行 ognl 表达式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用静态函数</span></span><br><span class="line">ognl <span class="string">&#x27;@java.lang.System@out.println(&quot;hello&quot;)&#x27;</span></span><br><span class="line">ognl <span class="string">&#x27;@java.lang.Math@sqrt(9.0)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取静态类的静态字段</span></span><br><span class="line">ognl <span class="string">&#x27;@java.io.File@separator&#x27;</span></span><br><span class="line"><span class="comment"># 需要指定classLoaderClass</span></span><br><span class="line">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader @com.example.demo.arthas.user.UserController@logger</span><br><span class="line"><span class="comment"># 获取classLoaderHash</span></span><br><span class="line">sc -d *UserController | grep classLoaderHash</span><br><span class="line">ognl -c 5b2133b1 @com.example.demo.arthas.user.UserController@logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值展开基层 -x</span></span><br><span class="line">ognl -c 5b2133b1 @com.example.demo.arthas.user.UserController@logger -x 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行多行表达式，赋值给临时变量，返回一个 List</span></span><br><span class="line">ognl <span class="string">&#x27;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引</span></span><br><span class="line"><span class="comment"># 获取数组中的第一个元素</span></span><br><span class="line">ognl <span class="string">&quot;&#123;1,2,3,4&#125;[0]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量引用，使用 # 在 OGNL 中定义临时变量，他们全局可见，此外表达式计算的每一步结果都保存在变量 this 中</span></span><br><span class="line"><span class="comment"># 下面命令通过获取列表的第一个元素进行判断如果大于 5 则乘以 2 反之则加 10</span></span><br><span class="line">ognl <span class="string">&quot;&#123;10,20,30&#125;[0].(#this &gt; 5 ? #this*2 : #this+10)&quot;</span></span><br><span class="line"><span class="comment"># 每个元素乘以 2 后返回</span></span><br><span class="line">ognl <span class="string">&quot;&#123;1, 2, 3&#125;.&#123;#this*2&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法调用</span></span><br><span class="line"><span class="comment"># 通过下面命令可以调用 ArrayList 的 size() 方法获取到 ArrayList 的大小</span></span><br><span class="line">ognl <span class="string">&quot;&#123;1,2,3,4&#125;.size()&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂链式表达式</span></span><br><span class="line">ognl <span class="string">&quot;@java.lang.System@out.(print(&#x27;Hello &#x27;), print(&#x27;world\n&#x27;))&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建原生数组</span></span><br><span class="line">ognl <span class="string">&quot;new int[] &#123;1, 2, 3&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建普通 Map</span></span><br><span class="line">ognl <span class="string">&quot;#&#123; &#x27;foo&#x27;: &#x27;foo value&#x27;, &#x27;bar&#x27;: &#x27;bar value&#x27; &#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建特定类型 Map</span></span><br><span class="line">ognl <span class="string">&quot;#@java.util.HashMap@&#123; &#x27;foo&#x27;: &#x27;foo value&#x27;, &#x27;bar&#x27;: &#x27;bar value&#x27; &#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有匹配的元素</span></span><br><span class="line">ognl <span class="string">&quot;&#123;1024, &#x27;Hello world!&#x27;, true, 2048&#125;.&#123;? #this instanceof Number&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找第一个匹配的元素</span></span><br><span class="line">ognl <span class="string">&quot;&#123;1024, &#x27;Hello world!&#x27;, true, 2048&#125;.&#123;^ #this instanceof Number&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找最后一个匹配的元素</span></span><br><span class="line">ognl <span class="string">&quot;&#123;1024, &#x27;Hello world!&#x27;, true, 2048&#125;.&#123;$ #this instanceof Number&#125;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="vmoption-查看，更新-VM-诊断相关的参数">vmoption : 查看，更新 VM 诊断相关的参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有的 option</span></span><br><span class="line">vmoption</span><br><span class="line"><span class="comment"># 查看指定的 option</span></span><br><span class="line">vmoption PrintGC</span><br><span class="line"><span class="comment"># 更新指定的 option</span></span><br><span class="line">vmoption PrintGC <span class="literal">true</span></span><br><span class="line">vmoption PrintGCDetails <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="vmtool-实现查询内存对象，强制-GC-等功能">vmtool : 实现查询内存对象，强制 GC 等功能</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取对象，--action getInstances: 获取对象实例，--className: 指定类名，--limit: 指定获取数量</span></span><br><span class="line">vmtool --action getInstances --className java.lang.String --<span class="built_in">limit</span> 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 classloader name，这里获取 spring的 ApplicationContext 对象，-x: 展开多少层</span></span><br><span class="line">vmtool --action getInstances --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --className org.springframework.context.ApplicationContext -x 3</span><br><span class="line"><span class="comment"># 指定 classloader hash</span></span><br><span class="line">sc -d org.springframework.context.ApplicationContext | grep classLoaderHash</span><br><span class="line">vmtool --action getInstances -c 19469ea2 --className org.springframework.context.ApplicationContext</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行表达式，--express: 执行的表达式，这里是调用对象的方法</span></span><br><span class="line">vmtool --action getInstances --className com.example.demo.arthas.aop.HelloWorldService --express <span class="string">&#x27;instances[0].getHelloMessage()&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制 GC，可以结合 vmoption 命令动态打开PrintGC开关</span></span><br><span class="line">vmtool --action forceGc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中断线程， -t 线程ID,可以使用 thread命令获取</span></span><br><span class="line">vmtool --action interruptThread -t 1</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍JVM的命令行工具&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se8/html/index.html&quot;&gt;JDK8 The Java® Virtual Machine Specification&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html&quot;&gt;JDK8的java指令的官⽅⽂档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/index.html&quot;&gt;JDK⼯具官⽹⽂档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html&quot;&gt;JDK17的java指令的官⽅⽂档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="jvm" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/jvm/"/>
    
    
    <category term="jvm" scheme="https://blog.hanqunfeng.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM 之 内存模型与垃圾回收机制(GC)</title>
    <link href="https://blog.hanqunfeng.com/2025/05/12/jvm-gc-01/"/>
    <id>https://blog.hanqunfeng.com/2025/05/12/jvm-gc-01/</id>
    <published>2025-05-12T14:30:05.000Z</published>
    <updated>2025-05-18T06:11:43.854Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍JVM的内存模型与垃圾回收机制</p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html">JDK8 The Java® Virtual Machine Specification</a></p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">JDK8的java指令的官⽅⽂档</a></p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/en/java/javase/17/docs/specs/man/index.html">JDK⼯具官⽹⽂档</a></p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html">JDK17的java指令的官⽅⽂档</a></p></li></ul><span id="more"></span><h2 id="JVM虚拟机结构-HotSpot">JVM虚拟机结构(HotSpot)</h2><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/cGMyEe.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>设置内存分配示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jdk1.8+</span></span><br><span class="line">java ‐Xms2048M ‐Xmx2048M ‐Xmn1024M ‐Xss512K ‐XX:MetaspaceSize=128M ‐XX:MaxMetaspaceSize=256M ‐jar server.jar</span><br><span class="line"><span class="comment"># jdk1.6/1.7</span></span><br><span class="line">java ‐Xms2048M ‐Xmx2048M ‐Xmn1024M ‐Xss512K ‐XX:PermSize=128M ‐XX:MaxPermSize=256M ‐jar server.jar</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>各参数含义与默认值（针对 JDK 1.8）</p></li></ul><table><thead><tr><th>参数</th><th>含义说明</th><th>默认值（JDK 1.8）</th></tr></thead><tbody><tr><td><code>-Xms2048M</code></td><td><strong>初始堆大小</strong>，即 JVM 启动时分配的堆内存大小（这里是 2GB）</td><td>物理内存的 1/64（最小 1MB），推荐配置为与 -Xmx 一致</td></tr><tr><td><code>-Xmx2048M</code></td><td><strong>最大堆内存大小</strong>，JVM 允许分配的最大堆内存</td><td>物理内存的 1/4（受限于 32位/64位）</td></tr><tr><td><code>-Xmn1024M</code></td><td><strong>新生代大小</strong>（Eden + Survivor）为 1GB</td><td>未显式指定时，通常占堆的 1/3 左右</td></tr><tr><td><code>-Xss512K</code></td><td><strong>每个线程的栈大小</strong>（Thread Stack Size），这里设置为 512KB</td><td>1MB（64位系统）或 512KB（32位系统）</td></tr><tr><td><code>-XX:MetaspaceSize=256M</code></td><td><strong>元空间初始大小</strong>（用于加载类的元数据，不再使用 PermGen），达到该值后，JVM 会触发一次 GC，空间不够时会进行扩容，最大到  <code>MaxMetaspaceSize</code></td><td>默认 21MB（客户端）或 16MB（服务器端），为避免频繁扩容导致的GC，可以设置的稍微大一些，比如<code>MaxMetaspaceSize</code>的一半，或干脆与<code>MaxMetaspaceSize</code>一样大</td></tr><tr><td><code>-XX:MaxMetaspaceSize=256M</code></td><td><strong>元空间最大大小</strong>，接近设置值时会触发 Full GC</td><td>无限制（默认只受物理内存约束） ，推荐配置一个合适的数值，比如8G的内存可以配置为256M</td></tr></tbody></table><h3 id="类装载子系统（Class-Loading-Subsystem）">类装载子系统（Class Loading Subsystem）</h3><ul class="lvl-0"><li class="lvl-2"><p>类装载子系统负责将 <code>.class</code> 文件加载到 JVM 中，并进行解析、验证、初始化等过程。</p></li><li class="lvl-2"><p>加载过程的几个阶段：</p></li></ul><table><thead><tr><th>阶段</th><th>说明</th></tr></thead><tbody><tr><td><strong>加载（Loading）</strong></td><td>将 <code>.class</code> 文件读取为二进制数据，构造 <code>Class</code> 对象</td></tr><tr><td><strong>验证（Verification）</strong></td><td>确保字节码文件格式正确、安全合法（防止恶意代码）</td></tr><tr><td><strong>准备（Preparation）</strong></td><td>为类的静态变量分配内存，并设置默认初始值</td></tr><tr><td><strong>解析（Resolution）</strong></td><td>将常量池中的符号引用替换为直接引用（方法、字段等）</td></tr><tr><td><strong>初始化（Initialization）</strong></td><td>执行 <code>&lt;clinit&gt;</code> 静态初始化方法，对静态变量赋初始值</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>类加载器（ClassLoader）体系结构：详细参考 <a href="/2025/05/08/jvm-classloader-01/" title="JVM 之 类加载器">JVM 之 类加载器</a></p></li></ul><table><thead><tr><th>类加载器名称</th><th>加载内容</th><th>说明</th></tr></thead><tbody><tr><td><strong>引导类加载器（Bootstrap ClassLoader）</strong></td><td>Java 核心类库（如 <code>java.lang.*</code>）</td><td>由 JVM 自身实现，用本地代码实现，无法直接访问</td></tr><tr><td><strong>扩展类加载器（Extension ClassLoader）</strong></td><td><code>JAVA_HOME/jre/lib/ext</code> 目录下的类</td><td>加载标准扩展类库</td></tr><tr><td><strong>应用类加载器（Application ClassLoader）</strong></td><td>用户应用类路径（CLASSPATH 指定的目录）</td><td>最常用，加载大多数应用代码</td></tr><tr><td><strong>自定义类加载器（Custom ClassLoader）</strong></td><td>用户手动实现的类加载器</td><td>可以打破双亲委派机制，实现热加载、加密类加载等</td></tr></tbody></table><blockquote><p>类加载采用 双亲委派模型：请求会先向父加载器委托，只有在父加载器加载失败时才尝试自身加载。</p></blockquote><h3 id="字节码执行引擎（Execution-Engine）">字节码执行引擎（Execution Engine）</h3><ul class="lvl-0"><li class="lvl-2"><p>字节码执行引擎负责将 Java 字节码解释或编译为机器代码，并在底层平台上执行。</p></li><li class="lvl-2"><p>执行引擎的核心模块</p></li></ul><table><thead><tr><th>组件名称</th><th>作用说明</th><th>关键特性</th></tr></thead><tbody><tr><td><strong>解释器（Interpreter）</strong></td><td>将字节码逐条解释执行</td><td>启动快，适合冷代码（非热点代码），执行效率相对较低</td></tr><tr><td><strong>即时编译器（JIT Compiler）</strong></td><td>将热点代码编译为本地机器码，提高执行效率</td><td>包含 C1（Client）和 C2（Server）两种，支持优化如：方法内联、逃逸分析、循环展开等</td></tr><tr><td><strong>垃圾收集器（Garbage Collector, GC）</strong></td><td>自动内存管理，负责对象生命周期的回收</td><td>常见算法包括：Serial、Parallel、CMS、G1、ZGC（低延迟）等，根据不同场景选择</td></tr><tr><td><strong>本地接口（Native Interface）</strong></td><td>支持 Java 与本地语言（如 C/C++）的互操作</td><td>通过 JNI（Java Native Interface）实现，调用底层操作系统或第三方库功能</td></tr></tbody></table><div class="tips"><p><em><strong>即时编译器（JIT Compiler）</strong></em></p><ul class="lvl-1"><li class="lvl-2">JVM 的 HotSpot 编译器有两个主要组件：<br>C1 编译器（Client 编译器）：轻量、快速编译，优化少。<br>C2 编译器（Server 编译器）：优化高级，耗时长，适合长时间运行的热点代码。</li><li class="lvl-2">在 64 位 JDK 中，默认就是 -server 模式 <code>(C2 编译器)</code> ，不再支持 -client <code>(C1 编译器)</code>。</li><li class="lvl-2">在 32 位 JDK 中，根据平台和启动方式，可能会自动选择 -client 或 -server，也可以手动指定。</li><li class="lvl-2">分层编译（Tiered Compilation） 允许 JVM 在一开始用 C1 编译器快速编译字节码，后续热点代码再交给 C2 编译器进行更高级优化。这样结合了 -client（快启动）和 -server（高性能）的优点。<code>TieredCompilation</code>参数控制是否开启分层编译，默认开启。</li><li class="lvl-2"><code>-XX:TieredStopAtLeve=&lt;level&gt;</code> 参数控制 编译器最多使用哪一层优化级别。它的取值如下，值越低启动越快，但优化越少。</li></ul><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>仅解释执行（不开启编译器）</td></tr><tr><td>1</td><td>只使用 C1 编译器的第一级（最少优化）</td></tr><tr><td>2</td><td>C1 第二级，略多优化</td></tr><tr><td>3</td><td>C1 第三级，更优化</td></tr><tr><td>4</td><td>启用 C2 编译器（完全优化，默认值）</td></tr></tbody></table></div><h3 id="JVM-内存模型（Java-Memory-Model，JMM）">JVM 内存模型（Java Memory Model，JMM）</h3><ul class="lvl-0"><li class="lvl-2"><p>JMM 是 Java 虚拟机规范中定义的一种 抽象内存模型，它决定了多线程程序中变量的读写可见性、有序性和原子性。同时，JVM 在物理层也有一个实际的内存结构，称为运行时数据区域（Runtime Data Areas），这两个可以结合理解。</p></li><li class="lvl-2"><p>JMM 的主要目标</p><ul class="lvl-2"><li class="lvl-6">保证多线程环境下的数据一致性</li><li class="lvl-6">指导 JVM 和 CPU 的内存交互行为（如重排序、缓存）</li></ul></li><li class="lvl-2"><p>实际运行时内存结构如下：</p></li></ul><table><thead><tr><th>内存区域</th><th>说明</th></tr></thead><tbody><tr><td>📌 <strong>程序计数器（PC）</strong></td><td>每个线程私有，记录当前执行的字节码指令地址</td></tr><tr><td>📌 <strong>Java 线程栈</strong></td><td>每个线程私有，方法调用时用于存储局部变量、操作数栈等</td></tr><tr><td>📌 <strong>本地方法栈</strong></td><td>与虚拟机栈类似，用于 native 方法</td></tr><tr><td>📌 <strong>堆（Heap）</strong></td><td>所有线程共享，存储对象实例、数组等，GC 的主要区域</td></tr><tr><td>📌 <strong>方法区（或元空间）</strong></td><td>所有线程共享，存储类信息、静态变量、常量池等（JDK8 后称为 Metaspace）</td></tr></tbody></table><h2 id="垃圾回收器">垃圾回收器</h2><ul class="lvl-0"><li class="lvl-2"><p>垃圾回收器负责自动管理内存，回收不再使用的对象，避免内存泄漏和溢出。</p></li></ul><h3 id="什么是垃圾">什么是垃圾</h3><ul class="lvl-0"><li class="lvl-2"><p>内存中没有被（线程栈变量，静态变量，常量池，JNI指针）引用的地址就是垃圾</p></li><li class="lvl-2"><p>可达性分析算法：是现代 JVM 判断一个对象是否“还活着”的主要算法。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基本思想：</span><br><span class="line">从一组称为 “GC Roots” 的对象出发，沿着对象之间的引用链向下搜索。</span><br><span class="line">如果某个对象 可以从 GC Roots 追踪到，就认为它是 “可达” 的（Alive）。</span><br><span class="line">否则就认为是 “不可达” 的（Garbage），可以被回收。</span><br></pre></td></tr></table></figure><div class="tips"><ul class="lvl-1"><li class="lvl-2"><p>在 JVM 中，<code>GC Roots</code> 是一些 始终可用的、不会被垃圾回收的引用起点，主要包括：</p></li></ul><table><thead><tr><th>GC Roots 来源</th><th>说明</th></tr></thead><tbody><tr><td>当前线程栈中的引用（局部变量表）</td><td>各个线程正在调用的方法中的局部变量、参数等</td></tr><tr><td>静态字段引用</td><td>类的静态字段引用的对象</td></tr><tr><td>JNI 引用（Native 方法引用）</td><td>Java 本地方法中引用的对象</td></tr><tr><td>常量引用池中的对象</td><td>字符串常量等可能持有对象引用</td></tr><tr><td>活动线程对象</td><td>线程自身在 GC 时不会被回收</td></tr><tr><td>JVM 内部结构（如系统类加载器等）</td><td>JVM 关键系统对象</td></tr></tbody></table></div><h3 id="垃圾回收器种类：">垃圾回收器种类：</h3><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/TEILZ9.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>左边6种叫分代模型，右边的4种叫分区模型</p></li></ul><div class="tips"><p><em><strong>分代模型（Generational Model）</strong></em><br>堆内存划分为：<br>年轻代（Young Generation）：存放新创建的对象，分为 Eden 和 Survivor 区。<br>老年代（Old Generation）：存放经过多次 GC 后仍然存活的对象。</p><p><em><strong>分区模型（Region-based Model）</strong></em><br>分区模型（如 G1、ZGC、Shenandoah）不再严格按照代划分内存，而是把堆划分为多个 大小相同的 Region。每个 Region 可以在运行时被动态标记为 Eden、Survivor 或 Old。</p></div><ul class="lvl-0"><li class="lvl-2"><p>分代模型中，上面3个是新生代垃圾回收器，下面3个是老年代垃圾回收器，可以交叉配对（见上图虚线），但最常用是上下两两配对。</p></li><li class="lvl-2"><p>CMS即可以作为新生代垃圾回收器，也可以作为老年代垃圾回收器。</p></li><li class="lvl-2"><p>EpsilonGC，是一个特殊的垃圾回收器，它不回收任何对象，只负责最终记录，做测试用的。</p></li><li class="lvl-2"><p>目前最先进的模型是 <code>ZGC</code>，jkd11开始支持，但直到JDK16才比较完善，目前非默认配置，需要手动配置。其与Redhat出品的 <code>Shenandoah</code> 是竞争关系。</p></li><li class="lvl-2"><p>常见垃圾回收器及其分类、JDK版本</p></li></ul><table><thead><tr><th>垃圾回收器</th><th>所属模型</th><th>说明</th><th>首次出现 JDK 版本</th><th>启用命令（JVM 参数）</th><th>适合的堆内存大小</th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td>分代模型</td><td>单线程，新生代和老年代都使用 Serial，适用于小堆内存, <code>已弃用</code></td><td>JDK 1.2</td><td><code>-XX:+UseSerialGC</code></td><td>💾 小于 1GB</td></tr><tr><td><strong>ParNew</strong></td><td>分代模型</td><td>Serial 的多线程版本，<strong>仅用于 CMS 新生代</strong>, <code>JDK11已弃用</code></td><td>JDK 1.4</td><td><code>-XX:+UseParNewGC -XX:+UseConcMarkSweepGC</code></td><td>💾 1GB ~ 4GB</td></tr><tr><td><strong>Parallel（吞吐量 GC）</strong></td><td>分代模型</td><td>多线程 GC，适合吞吐量优先的应用场景</td><td>JDK 1.4</td><td><code>-XX:+UseParallelGC</code>（新生代）<br><code>-XX:+UseParallelOldGC</code>（老年代）</td><td>💾 2GB ~ 8GB</td></tr><tr><td><strong>CMS（Concurrent Mark Sweep）</strong></td><td>分代模型</td><td>老年代并发标记-清除，低延迟，但存在碎片，<code>JDK14已弃用</code></td><td>JDK 1.4</td><td><code>-XX:+UseConcMarkSweepGC</code></td><td>💾 2GB ~ 8GB</td></tr><tr><td><strong>G1（Garbage First）</strong></td><td>分区模型</td><td>将堆划分为 Region，逻辑分代，支持并发压缩，平衡延迟与吞吐</td><td>JDK 7u4（正式）</td><td><code>-XX:+UseG1GC</code></td><td>💾 4GB ~ 数十 GB</td></tr><tr><td><strong>ZGC（Z Garbage Collector）</strong></td><td>分区模型</td><td>Region 弹性大小，支持超大堆，低延迟（&lt;10ms 停顿）</td><td>JDK 11（实验），JDK 15（正式）</td><td><code>-XX:+UseZGC</code></td><td>💾 8GB ~ 数 TB（超大堆）</td></tr><tr><td><strong>Shenandoah</strong></td><td>分区模型</td><td>红帽主导，低延迟，并发回收与并发压缩</td><td>JDK 12（实验），JDK 15（正式）</td><td><code>-XX:+UseShenandoahGC</code></td><td>💾 2GB ~ 数十 GB</td></tr></tbody></table><blockquote><p>对于 CMS，启用后会自动使用 ParNew 作为新生代回收器（除非显式禁止）。<br>对于 Parallel GC 启用 <code>-XX:+UseParallelGC</code>（新生代）会自动启用 <code>-XX:+UseParallelOldGC</code>（老年代）。<br>对于ZGC，jdk15以前最大支持4T内存，之后最大支持16T内存。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>各版本默认垃圾回收器及推荐配置（JDK 1.6 起）</p></li></ul><table><thead><tr><th>JDK 版本</th><th>默认 GC</th><th>建议使用 GC（按场景分类）</th></tr></thead><tbody><tr><td><strong>JDK 1.6</strong></td><td>Serial / Parallel</td><td>- 小型应用（如桌面程序）：<code>-XX:+UseSerialGC</code>  <br> - 中大型应用（吞吐量优先）：<code>-XX:+UseParallelGC</code></td></tr><tr><td><strong>JDK 1.7</strong></td><td>同上</td><td>同 JDK 1.6</td></tr><tr><td><strong>JDK 1.8</strong></td><td>Parallel</td><td>- 吞吐优先：默认 <code>-XX:+UseParallelGC</code> <br> - 响应优先：<code>-XX:+UseConcMarkSweepGC</code>（CMS）<br> - 大堆 + 未来升级考虑：<code>-XX:+UseG1GC</code>（推荐）</td></tr><tr><td><strong>JDK 9-14</strong></td><td>G1 GC</td><td>- 一般默认即可：<code>-XX:+UseG1GC</code>（延迟与吞吐平衡）<br> - 极端低延迟要求：升级到 JDK 11+ 使用 ZGC/Shenandoah</td></tr><tr><td><strong>JDK 15+</strong></td><td>G1 GC（默认），ZGC / Shenandoah 可选</td><td>- 延迟敏感（在线服务、RT系统）：<code>-XX:+UseZGC</code> 或 <code>-XX:+UseShenandoahGC</code><br> - 吞吐为主：<code>-XX:+UseParallelGC</code><br> - 综合平衡：<code>-XX:+UseG1GC</code>（默认）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>判断默认 GC 的方式</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintCommandLineFlags -version</span><br></pre></td></tr></table></figure><h3 id="垃圾回收算法">垃圾回收算法</h3><ul class="lvl-0"><li class="lvl-2"><p>JVM 中常见垃圾回收算法汇总</p></li></ul><table><thead><tr><th>算法名称</th><th>核心思想</th><th>适用阶段/区域</th><th>优缺点简述</th></tr></thead><tbody><tr><td><strong>标记-清除（Mark-Sweep）</strong></td><td>标记出存活对象，清除未标记对象</td><td>老年代</td><td>简单高效，但会产生大量碎片，不适合连续内存分配</td></tr><tr><td><strong>标记-整理（Mark-Compact）</strong></td><td>标记后移动存活对象，整理碎片</td><td>老年代</td><td>消除碎片，代价是移动对象，适用于老年代压缩</td></tr><tr><td><strong>复制算法（Copying）</strong></td><td>将对象复制到另一块内存（如 Eden → Survivor）</td><td>新生代</td><td>高效率，适合回收大多数对象短命的新生代，但需要额外空间</td></tr><tr><td><strong>分代回收（Generational）</strong></td><td>将对象按生命周期划分（新生代/老年代）</td><td>整个堆结构</td><td>实用性强，结合不同算法应用于不同代，现代 GC 基础</td></tr><tr><td><strong>分区回收（Region-based）</strong></td><td>将堆划分为若干等大小的 Region 动态分配</td><td>整个堆（如 G1、ZGC）</td><td>更灵活，支持并发并行，减少 STW 停顿，适用于大堆、低延迟场景</td></tr><tr><td><strong>增量回收（Incremental）</strong></td><td>分阶段小步执行 GC 以减少单次停顿</td><td>某些并发/低延迟 GC</td><td>减少暂停时间，但整体效率可能降低</td></tr><tr><td><strong>并发回收（Concurrent）</strong></td><td>标记、清理等步骤与应用线程并发执行</td><td>CMS、G1、ZGC 等</td><td>停顿时间短，对响应时间要求高的系统友好</td></tr><tr><td><strong>三色标记（Tri-color Marking）</strong></td><td>并发标记算法的一种实现思想</td><td>CMS、G1、ZGC 等</td><td>白（待回收）、灰（已标记未扫描）、黑（已标记已扫描），避免“漏标”问题</td></tr><tr><td><strong>SATB（Snapshot-At-The-Beginning）</strong></td><td>并发标记的快照策略</td><td>G1、ZGC</td><td>保证在并发标记过程中不遗漏新引用，适合高并发场景</td></tr><tr><td><strong>Lazy Compaction（延迟压缩）</strong></td><td>不每次 GC 都压缩，视情况而定</td><td>G1 等</td><td>降低不必要的移动成本</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>对应关系：GC 回收器和底层算法</p></li></ul><table><thead><tr><th>回收器</th><th>使用的算法组合</th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td>新生代：复制算法<br>老年代：标记-整理</td></tr><tr><td><strong>ParNew</strong></td><td>新生代：复制算法（多线程）</td></tr><tr><td><strong>Parallel</strong></td><td>新生代：复制算法<br>老年代：标记-整理</td></tr><tr><td><strong>CMS</strong></td><td>新生代：ParNew（复制）<br>老年代：标记-清除 + 三色标记 + 并发</td></tr><tr><td><strong>G1</strong></td><td>分区回收 + 三色标记 + SATB + Lazy Compaction</td></tr><tr><td><strong>ZGC</strong></td><td>分区回收 + 并发标记 + SATB + Region Remapping</td></tr><tr><td><strong>Shenandoah</strong></td><td>分区回收 + 并发标记 + 并发压缩 + 三色标记</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">       ┌────────────────────────┐</span><br><span class="line">       │   常见 GC 算法分类       │</span><br><span class="line">       └────────────────────────┘</span><br><span class="line">                 │</span><br><span class="line">   ┌─────────────┴──────────────┐</span><br><span class="line">   │                            │</span><br><span class="line">分代模型                      分区模型</span><br><span class="line">   │                            │</span><br><span class="line"> ┌─┴─────┐                  ┌───┴─────┐</span><br><span class="line">复制   标记-清除         Region-based 并发</span><br><span class="line">      标记-整理             SATB / 三色标记</span><br></pre></td></tr></table></figure><h4 id="什么是-STW（Stop-The-World）">什么是 STW（Stop-The-World）</h4><ul class="lvl-0"><li class="lvl-2"><p>STW（Stop-The-World） 指的是：在某些垃圾回收阶段，JVM 会暂停所有应用线程（也叫用户线程），让垃圾回收线程独占 CPU 执行 GC 逻辑。</p></li><li class="lvl-2"><p>你可以这样理解 STW</p><ul class="lvl-2"><li class="lvl-6">JVM 会“按下暂停键”暂停所有正在运行的 Java 程序代码；</li><li class="lvl-6">然后 专心进行 GC 的某些阶段（如标记、整理、复制等）；</li><li class="lvl-6">GC 完成后，才会“恢复运行”应用线程。</li></ul></li><li class="lvl-2"><p>各 GC 中 STW 的存在情况</p></li></ul><table><thead><tr><th>回收器</th><th>是否存在 STW？</th><th>说明</th></tr></thead><tbody><tr><td>Serial</td><td>✅ 是，全停顿，全阶段单线程</td><td>堆越大 STW 越长</td></tr><tr><td>Parallel</td><td>✅ 是，全停顿，多线程执行 GC</td><td>提高效率但仍会暂停</td></tr><tr><td>CMS</td><td>✅ 有，初始标记和最终重新标记是 STW</td><td>大部分阶段并发执行</td></tr><tr><td>G1</td><td>✅ 有，但设计为尽可能缩短 STW</td><td>分阶段并发 + 并行处理</td></tr><tr><td>ZGC</td><td>✅ 极短（&lt;10ms）</td><td>仅个别阶段是 STW，几乎感知不到</td></tr><tr><td>Shenandoah</td><td>✅ 极短</td><td>高度并发，STW 时间也极短</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>为什么要关注 STW？</p><ul class="lvl-2"><li class="lvl-6">在响应时间敏感型系统（如在线交易系统、游戏服务器、API 网关）中，长时间的 STW 会造成用户请求卡顿、超时。</li><li class="lvl-6">因此，选择 低 STW 的 GC（如 G1、ZGC、Shenandoah） 对这类系统至关重要。</li></ul></li></ul><h2 id="堆内存结构">堆内存结构</h2><ul class="lvl-0"><li class="lvl-2"><p>不同的垃圾回收器决定了堆内存的结构不同，但总体上分为两种类型：分代模型和分区模型。</p></li></ul><h3 id="分代模型">分代模型</h3><h4 id="Parallel-垃圾回收器">Parallel 垃圾回收器</h4><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/Apr5aY.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>堆结构被划分为 <code>Old Generation（老年代）</code> 和 <code>Young Generation（新生代）</code> 两部分。</p></li><li class="lvl-2"><p><code>Young Generation</code> 由 <code>Eden</code> 和 两个 <code>Survivor</code> 组成，其中 <code>Eden</code> 是一个连续的内存区域，<code>Survivor</code> 是一个非连续的内存区域。</p></li><li class="lvl-2"><p>默认情况下，<code>Young Generation</code>占堆内存的 <code>1/3</code>,  <code>Old Generation</code> 占堆内存的 <code>2/3</code>。</p></li><li class="lvl-2"><p>默认情况下，<code>Eden:S0:S1 = 8:1:1</code> ,如果希望为 4:1:1，使用 <code>-XX:SurvivorRatio=4</code>，但实际上这个比例并不是固定的，而是由jvm基于情况自动变化的，因为JVM默认开启了这个参数<code>-XX:+UseAdaptiveSizePolicy</code>，如果希望固定这个比例，可以设置为 <code>-XX:-UseAdaptiveSizePolicy</code>来关闭这个配置。</p></li><li class="lvl-2"><p>默认情况下，对象最多经历<code>15次</code>Minor GC后进入老年代，可以通过 <code>-XX:MaxTenuringThreshold=n</code> 设置。</p></li></ul><table><thead><tr><th>区域</th><th>说明</th></tr></thead><tbody><tr><td><strong>Eden</strong></td><td>对象首次创建的区域，大部分对象在这里创建并很快被回收</td></tr><tr><td><strong>S0/S1</strong></td><td>Survivor 区域：两个交替使用的缓冲区（From 和 To），用于拷贝存活对象</td></tr><tr><td><strong>Old</strong></td><td>老年代：存活次数多、生命周期长的对象会从新生代晋升到老年代，回收频率低</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>对象内存分配图解(简化)</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">创建对象</span><br><span class="line">   ↓</span><br><span class="line">进入 Eden 区（新生代）</span><br><span class="line">   ↓ Eden 区满</span><br><span class="line">第一次 Minor GC（存活对象[Eden]复制到 S0）</span><br><span class="line">   ↓ Eden 区满 或 S0 区满</span><br><span class="line">第二次 Minor GC（存活对象[Eden和S0]复制到 S1，年龄 +1）</span><br><span class="line">   ↓ Eden 区满 或 S1 区满</span><br><span class="line">第三次 Minor GC（存活对象[Eden和S1]复制到 S0，年龄 +1）</span><br><span class="line">   ↓</span><br><span class="line">……  S0/S1 交替，年龄达到阈值（如 15）</span><br><span class="line">   ↓ 还没有被回收</span><br><span class="line">晋升到 Old 区（老年代），等待Old区满 触发 Full GC</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>大对象直接进入老年代</p><ul class="lvl-2"><li class="lvl-6">大对象就是需要大量连续内存空间的对象（比如：字符串、数组），如果对象很大（如超过 Eden 区大小，或是超过 Survivor 区大小），可能直接分配到老年代</li><li class="lvl-6">也可以通过 <code>-XX:PretenureSizeThreshold=&lt;大小，单位字节&gt;</code> 控制超过一定大小的对象是否直接分配到老年代（Old Generation），跳过新生代（Eden），以避免大对象频繁在年轻代造成 GC 压力。这个参数只在 Serial 和ParNew两个收集器下有效。</li></ul></li><li class="lvl-2"><p>对象动态年龄判断</p><ul class="lvl-2"><li class="lvl-6">对象在Survivor区来回移动时，如果这批对象的总大小大于这块Survivor区域内存大小的50%(-XX:TargetSurvivorRatio可以指定)，那么此时大于等于这批对象年龄最大值的对象，就可以直接进入老年代了，</li><li class="lvl-6">例如Survivor区域里现在有一批对象，年龄1+年龄2+年龄n的多个年龄对象总和超过了Survivor区域的50%，此时就会把年龄n(含)以上的对象都放入老年代。这个规则其实是希望那些可能是长期存活的对象，尽早进入老年代。</li><li class="lvl-6">对象动态年龄判断机制一般是在minor gc之后触发的。</li></ul></li></ul><div class="tips"><ul class="lvl-1"><li class="lvl-2"><p>对象逃逸分析</p><ul class="lvl-3"><li class="lvl-6">如果对象很小，且只在方法内部使用，并没有被外部引用，则其有可能直接分配到栈内存，而不进入堆内存</li><li class="lvl-6">JVM对于这种情况可以通过开启逃逸分析参数(-XX:+DoEscapeAnalysis)来优化对象内存分配位置，使其通过<code>标量替换</code>优先分配在栈上(栈上分配)，JDK7之后默认开启逃逸分析，如果要关闭使用参数(-XX:-DoEscapeAnalysis)</li></ul></li><li class="lvl-2"><p>标量替换</p><ul class="lvl-3"><li class="lvl-6">通过逃逸分析确定该对象不会被外部访问，并且对象可以被进一步分解时，JVM不会创建该对象，而是将该对象成员变量分解若干个被这个方法使用的成员变量所代替，这些代替的成员变量在栈帧或寄存器上分配空间，这样就不会因为没有一大块连续空间导致对象内存不够分配。</li><li class="lvl-6">开启标量替换参数(-XX:+EliminateAllocations)，JDK7之后默认开启。</li></ul></li><li class="lvl-2"><p>标量与聚合量</p><ul class="lvl-3"><li class="lvl-6">标量即不可被进一步分解的量，而JAVA的基本数据类型就是标量（如：int，long等基本数据类型以及reference类型等），</li><li class="lvl-6">标量的对立就是可以被进一步分解的量，而这种量称之为聚合量。而在JAVA中对象就是可以被进一步分解的聚合量。</li></ul></li></ul></div><h4 id="Parallel-垃圾回收器（Parallel-GC）-的工作方式">Parallel 垃圾回收器（Parallel GC） 的工作方式</h4><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/fo2Egs.png" alt="" width="1200" height="600"></p><ul class="lvl-0"><li class="lvl-2"><p>Parallel GC 是多线程垃圾回收器，可以通过 <code>-XX:ParallelGCThreads</code> 来设置GC线程数量。</p></li><li class="lvl-2"><p>当 Parallel GC 被触发（例如 Minor GC 或 Full GC）时，所有用户线程 被完全暂停（Stop-The-World, STW）</p></li></ul><h4 id="Parallel-GC-参数配置表（吞吐量优先-GC）">Parallel GC 参数配置表（吞吐量优先 GC）</h4><table><thead><tr><th>参数名</th><th>说明</th><th>默认值（如未特别说明）</th></tr></thead><tbody><tr><td><code>-XX:+UseParallelGC</code></td><td>开启 Parallel GC，用于新生代收集</td><td>-</td></tr><tr><td><code>-XX:+UseParallelOldGC</code></td><td>开启老年代并行收集（Parallel Old）</td><td>-</td></tr><tr><td><code>-XX:ParallelGCThreads</code></td><td>垃圾回收时的并行线程数（与 CPU 数量相关）</td><td>根据硬件自动配置</td></tr><tr><td><code>-XX:MaxGCPauseMillis</code></td><td>设置 GC 最大暂停时间目标（影响内存分配策略）</td><td>一个非常大的值，可以认为无限制（建议按需设置）</td></tr><tr><td><code>-XX:GCTimeRatio</code></td><td>设置 GC 时间与应用运行时间的比值（0~100）<br>值越小，GC 越频繁，值越大 GC 越少</td><td>99（表示 1% 用于 GC，99% 用于应用）</td></tr><tr><td><code>-XX:+UseAdaptiveSizePolicy</code></td><td>启用自适应 GC 策略（根据运行状况自动调整各区域大小）</td><td>默认开启</td></tr><tr><td><code>-XX:SurvivorRatio</code></td><td>Eden 与 Survivor 的内存比例（如 8 表示 Eden:S0:S1 = 8:1:1）</td><td>8</td></tr><tr><td><code>-XX:InitialTenuringThreshold</code></td><td>对象晋升到老年代的初始年龄（会随运行动态调整）</td><td>7</td></tr><tr><td><code>-XX:MaxTenuringThreshold</code></td><td>晋升到老年代的最大年龄（对象在 Survivor 区经历几次 GC）</td><td>15</td></tr><tr><td><code>-XX:PretenureSizeThreshold</code></td><td>设置大对象阈值，超过该大小的对象直接分配到老年代</td><td>0（即禁用）</td></tr><tr><td><code>-XX:+ScavengeBeforeFullGC</code></td><td>在 Full GC 之前是否先执行一次 Minor GC</td><td>true启</td></tr><tr><td><code>-XX:+UseFastAccessorMethods</code></td><td>优化原始类型的 get/set 方法性能</td><td>false启</td></tr><tr><td><code>-XX:+AlwaysPreTouch</code></td><td>JVM 启动时立即分配并初始化所有内存页，避免运行时首次分配带来的停顿</td><td>false</td></tr></tbody></table><h3 id="分区模型">分区模型</h3><h4 id="G1-垃圾回收器">G1 垃圾回收器</h4><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/AaqBxm.png" alt="" width="900" height="300"></p><ul class="lvl-0"><li class="lvl-2"><p>G1(Garbage-First) 属于 物理上分区，逻辑上分代，真正的分区模型是 <code>ZGC</code>（jdk21后也支持分代）</p></li><li class="lvl-2"><p>G1将Java堆划分为多个大小相等的Region，Region大小是2的幂，范围在1MB到32MB之间。JDK9之前默认最多支持2048个Region，这就导致G1最大支持64G 的堆 (<code>2048 Regions × 32MB = 64GB</code>)，JDK10之后的版本可支持更多Region数量，JDK17进一步优化了Region映射机制，提升了大堆场景下的性能，使其可以支持更大的内存，但对于超大堆（&gt;1T），考虑到GC暂停时间，建议使用ZGC或Shenandoah GC。</p></li><li class="lvl-2"><p>Region一旦被回收，重新分配时可以是任意类型，比如原先是<code>Eden</code>，那么重新分配时可以是<code>Old</code>，反之亦然。</p></li><li class="lvl-2"><p>一般Region大小由JVM自动计算，当然也可以用参数<code>-XX:G1HeapRegionSize</code>手动指定Region大小，但是推荐默认的计算方式。</p></li><li class="lvl-2"><p>G1保留了年轻代和老年代的概念，但不再是物理隔阂了，它们都是（可以不连续）Region的集合。</p></li><li class="lvl-2"><p>在 G1 GC 中，不要使用 <code>-Xmn</code>，G1 中推荐使用以下更细粒度的控制方式：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是实验性参数，需要开启 `-XX:+UnlockExperimentalVMOptions`，但依旧推荐在生产环境中使用</span></span><br><span class="line">-XX:G1NewSizePercent=5</span><br><span class="line">-XX:G1MaxNewSizePercent=60</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>默认年轻代对堆内存的占比是<code>5%</code>，如果堆大小为4096M，那么年轻代占据200MB左右的内存，对应大概是100个Region，可以通过   <code>-XX:G1NewSizePercent</code>设置新生代初始占比，这是实验性参数，需要开启 <code>-XX:+UnlockExperimentalVMOptions</code>，但依旧推荐在生产环境中使用。</p></li><li class="lvl-2"><p>在系统运行中，JVM会不停的给年轻代增加更多的Region，但是最多新生代的占比不会超过<code>60%</code>，可以通过<code>-XX:G1MaxNewSizePercent</code>调整，这是实验性参数，需要开启 <code>-XX:+UnlockExperimentalVMOptions</code>，但依旧推荐在生产环境中使用。</p></li><li class="lvl-2"><p>年轻代中的Eden和Survivor对应的region也跟之前一样，默认<code>8:1:1</code>，假设年轻代现在有1000个region，eden区对应800个，s0对应100个，s1对应100个。</p></li><li class="lvl-2"><p>一个Region可能之前是年轻代，如果Region进行了垃圾回收，之后可能又会变成老年代，也就是说Region的区域功能可能会动态变化。</p></li><li class="lvl-2"><p>G1垃圾收集器对于对象什么时候会转移到老年代跟之前讲过的原则一样，唯一不同的是对大对象的处理，G1有专门分配大对象的Region叫<code>Humongous</code>区，而不是让大对象直接进入老年代的Region中。</p></li><li class="lvl-2"><p>在G1中，大对象的判定规则就是一个大对象超过了一个Region大小的<code>50%</code>，比如按照上面算的，每个Region是2M，只要一个大对象超过了1M，就会被放入Humongous中，而且一个大对象如果太大，可能会横跨多个Region来存放。</p></li><li class="lvl-2"><p>Humongous区专门存放短期巨型对象，不用直接进老年代，可以节约老年代的空间，避免因为老年代空间不够的GC开销。</p></li><li class="lvl-2"><p>Full GC的时候除了收集年轻代和老年代之外，也会将Humongous区一并回收。</p></li></ul><h5 id="G1垃圾收集分类">G1垃圾收集分类</h5><ul class="lvl-0"><li class="lvl-2"><p>YoungGC<br>YoungGC并不是说现有的Eden区放满了就会马上触发，G1会计算下现在Eden区回收大概要多久时间，如果回收时间远远小于参数 <code>-XX:MaxGCPauseMills</code> 设定的值，那么增加年轻代的region，继续给新对象存放，不会马上做YoungGC，直到下一次Eden区放满，G1计算回收时间接近参数 <code>-XX:MaxGCPauseMills</code> 设定的值，那么就会触发Young GC</p></li><li class="lvl-2"><p>MixedGC<br>不是FullGC，老年代的堆占有率达到参数 <code>-XX:InitiatingHeapOccupancyPercent</code> 设定的值则触发，回收所有的Young和部分Old(根据期望的GC停顿时间确定old区垃圾收集的优先顺序)以及大对象区，正常情况G1的垃圾收集是先做MixedGC，主要使用复制算法，需要把各个region中存活的对象拷贝到别的region里去，拷贝过程中如果发现没有足够的空region能够承载拷贝对象就会触发一次Full GC</p></li><li class="lvl-2"><p>Full GC<br>停止系统程序，然后采用单线程进行标记、清理和压缩整理，好空闲出来一批Region来供下一次MixedGC使用，这个过程是非常耗时的。(Shenandoah优化成多线程收集了)</p></li></ul><h4 id="G1-收集器的工作方式-MixedGC">G1 收集器的工作方式(MixedGC)</h4><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/XbkEoh.png" alt="" width="1200" height="400"></p><ul class="lvl-0"><li class="lvl-2"><p>图中主要展示了一个典型的 G1 GC 的 并发标记周期（Concurrent Mark Cycle） 的过程。</p></li><li class="lvl-2"><p>图中的水平箭头表示各线程（用户线程和GC线程）的执行路径。</p></li><li class="lvl-2"><p>竖直的<code>Safepoint</code>线表示一次GC过程中会暂停所有用户线程的时刻（Stop-The-World）。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1️⃣ 初始标记（Initial Mark）</span><br><span class="line">    进入 Safepoint： 所有用户线程在此刻暂停（STW）。</span><br><span class="line">    标记 GC Roots 直接可达对象。</span><br><span class="line">    非常短暂，但属于 Stop-The-World 阶段。</span><br><span class="line">    图中是“初始标记”箭头在 Safepoint 之后立刻执行。</span><br><span class="line"></span><br><span class="line">2️⃣ 并发标记（Concurrent Mark）</span><br><span class="line">    用户线程 恢复运行（图中用户线程继续向右延伸）。</span><br><span class="line">    GC 线程 并发进行标记工作（即在用户线程运行期间进行标记）。</span><br><span class="line">    图中蓝色的“并发标记”箭头与用户线程箭头并行显示，表示并发执行。</span><br><span class="line"></span><br><span class="line">3️⃣ 最终标记（Remark / Final Mark）</span><br><span class="line">    再次进入 Safepoint。</span><br><span class="line">    重新暂停所有用户线程。</span><br><span class="line">    处理并发标记阶段中遗漏的引用更新等信息，保证标记的准确性。</span><br><span class="line"></span><br><span class="line">4️⃣ 筛选回收（Cleanup / Filtered Collection）</span><br><span class="line">    对已标记的对象做清理（回收不可达对象）。</span><br><span class="line">    判断是否需要回收某些 Region。</span><br><span class="line">    图中蓝色箭头标注为“筛选回收”。</span><br><span class="line"></span><br><span class="line">5️⃣ 恢复用户线程</span><br><span class="line">    在最后一个 Safepoint 之后，所有用户线程重新开始执行（图中黄色箭头重新向右延伸）。</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>G1的GC 过程会经历多次<code>Safepoint</code>，但只有 <code>并发标记阶段</code> 是整个周期中最耗时但不会暂停用户线程(STW)的部分。</p></li></ul><div class="tips"><p><em><strong>Safepoint（安全点）</strong></em></p><ul class="lvl-1"><li class="lvl-2">在 JVM（Java 虚拟机）中，Safepoint（安全点） 是一个非常重要的概念，它代表 所有线程必须“安全地”暂停的某个时间点，以便 JVM 能够执行某些全局操作，比如：<br>垃圾回收（GC）<br>栈遍历（例如生成堆快照、做逃逸分析等）<br>类卸载<br>JIT 编译的一些重写操作等</li><li class="lvl-2">如果线程正在运行、改变堆中对象的数据，那么 GC 就无法准确标记和回收对象。因此 JVM 需要 让所有线程在一个“可控、安全的位置”上暂停，这个位置就叫 Safepoint。</li><li class="lvl-2">Safepoint 是怎么工作的？<br>1.JVM 发出“进入 Safepoint”的信号（比如要开始 GC）<br>2.所有线程收到信号后，必须等到“最近的 Safepoint”再停下来：<br>Safepoint 不是任意位置都可以停，它只出现在字节码中一些特定的指令点（比如方法调用、循环跳转等）<br>3.等所有线程都进入 Safepoint 后，JVM 才能开始执行 GC 等全局操作。</li></ul></div><h5 id="G1-收集器参数配置表">G1 收集器参数配置表</h5><table><thead><tr><th>参数名</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td><code>-XX:+UseG1GC</code></td><td>使用 G1 垃圾收集器</td><td>-</td></tr><tr><td><code>-XX:ParallelGCThreads</code></td><td>指定 GC 工作的线程数量</td><td>与 CPU 数量相关</td></tr><tr><td><code>-XX:G1HeapRegionSize</code></td><td>设置堆分区大小（1MB~32MB，2 的幂），堆默认划分为 2048 个 Region</td><td>自动计算</td></tr><tr><td><code>-XX:MaxGCPauseMillis</code></td><td>设置 GC 目标最大暂停时间</td><td>200ms</td></tr><tr><td><code>-XX:G1NewSizePercent</code></td><td>新生代初始占比（占整个堆），实验性参数，-XX:+UnlockExperimentalVMOptions</td><td>5%</td></tr><tr><td><code>-XX:G1MaxNewSizePercent</code></td><td>新生代最大占比（占整个堆），实验性参数，-XX:+UnlockExperimentalVMOptions</td><td>60%</td></tr><tr><td><code>-XX:TargetSurvivorRatio</code></td><td>Survivor 区填充目标（超过该比例，晋升老年代）</td><td>50%</td></tr><tr><td><code>-XX:MaxTenuringThreshold</code></td><td>最大对象年龄阈值（年龄超过将进入老年代）</td><td>15</td></tr><tr><td><code>-XX:InitiatingHeapOccupancyPercent</code></td><td>老年代的使用率超过该值触发 Mixed GC</td><td>45%</td></tr><tr><td><code>-XX:G1MixedGCLiveThresholdPercent</code></td><td>Mixed GC 中：Region 存活对象占比低于该值才会被回收，实验性参数，-XX:+UnlockExperimentalVMOptions</td><td>85%</td></tr><tr><td><code>-XX:G1HeapWastePercent</code></td><td>Mixed GC 回收目标：空闲 Region 达堆总量该百分比就结束混合回收</td><td>5%</td></tr><tr><td><code>-XX:G1ReservePercent</code></td><td>为满足停顿时间目标保留的堆空间比例，是一种空间换时间的策略，在内存不足时可能造成内存更加紧张</td><td>10%</td></tr><tr><td><code>-XX:G1UseAdaptiveIHOP</code></td><td>是否启用自适应IHOP，启用后G1会在初始采样后自动调整IHOP值</td><td>true</td></tr><tr><td><code>-XX:G1AdaptiveIHOPNumInitialSamples</code></td><td>指定前几次GC活动按IHOP参数计算</td><td>3</td></tr><tr><td><code>-XX:SoftRefLRUPolicyMSPerMB</code></td><td>每MB堆内存中软引用的过期时间(ms)</td><td>1000</td></tr><tr><td><code>-XX:G1OldCSetRegionThresholdPercent</code></td><td>设置一次混合GC中需要清理的Old区的内存比例，调大可降低G1频率但会增加每次GC时间</td><td>10%</td></tr><tr><td><code>-XX:G1MixedGCCountTarget</code></td><td>设置G1垃圾回收器的线程上限，HotSpot会根据清理目标自动计算所需线程数，但不会超过此上限</td><td>8</td></tr></tbody></table><h4 id="ZGC-垃圾回收器">ZGC 垃圾回收器</h4><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/bBUAYt.png" alt="" width="700" height="500"></p><ul class="lvl-0"><li class="lvl-2"><p>ZGC(Z Garbage Collector)是一款JDK 11中新加入的具有实验性质的低延迟垃圾收集器，ZGC可以说源自于是Azul System公司开发的C4（Concurrent Continuously Compacting Collector） 收集器</p></li></ul><table><thead><tr><th>Platform</th><th>Supported</th><th>Since</th><th>Comment</th></tr></thead><tbody><tr><td>Linux/x64</td><td>✅</td><td>JDK 11</td><td></td></tr><tr><td>Linux/AArch64</td><td>✅</td><td>JDK 13</td><td></td></tr><tr><td>macOS</td><td>✅</td><td>JDK 14</td><td></td></tr><tr><td>Windows</td><td>✅</td><td>JDK 14</td><td>Requires Windows version 1803 (Windows 10 or Windows Server 2019) or later.</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>ZGC收集器是一款基于Region内存布局的，暂时不设分代的(jdk21后支持分代)，使用了<code>读屏障</code>、<code>颜色指针</code>等技术来实现可并发的标记-整理算法的，以低延迟为首要目标的一款垃圾收集器。</p></li></ul><div class="tips"><p><em><strong>颜色指针</strong></em></p><ul class="lvl-1"><li class="lvl-2">在 ZGC（Z Garbage Collector）中，颜色指针（Colored Pointer）是一种核心机制，把对象的 GC 状态信息直接嵌入到对象的引用（地址）中，用于在不增加对象额外元数据的前提下，跟踪对象在垃圾回收过程中的状态。</li><li class="lvl-2">在传统 GC 中，对象的“颜色”（如白色、灰色、黑色）表示其在 GC 不同阶段的状态，这些信息一般存储在额外的数据结构中（如记忆集合、位图等）。</li><li class="lvl-2">而在 ZGC 中，ZGC 将对象的这些状态信息编码进指针的高位中。所以一个对象引用（pointer）不仅仅是内存地址，还携带了对象在 GC 过程中的“颜色”信息。</li><li class="lvl-2">ZGC 主要运行在 64 位系统上，但当前的操作系统和 CPU 实际上只使用 48～57 位虚拟地址。ZGC 利用未使用的高位进行编码。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/LD51Zb.png" alt="" width="900" height="300"></li><li class="lvl-2">每个对象有一个64位指针，这64位被分为：</li></ul><table><thead><tr><th>位数</th><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>18 位</td><td>预留</td><td>保留位，未来可能用于扩展功能</td></tr><tr><td>1 位</td><td>Finalizable</td><td>表示对象可终结（即实现了 <code>finalize()</code> 方法）</td></tr><tr><td>1 位</td><td>Remapped</td><td>标识对象是否已被转移(用于标识某个引用是否已经被重定向（更新为新地址）)；为 1 表示该对象未在重定位集（Relocation Set）中，即新地址，为0表示旧地址</td></tr><tr><td>1 位</td><td>Marked1</td><td>标记位之一，用于 GC 过程中的对象标记阶段 ,由于 ZGC 是并发 GC，需要两位来支持颜色切换机制（Color Flip），确保在不同 GC 周期中可以区分新旧标记，需要触发一次读取屏障（load barrier），找到对象的新位置，并更新这个引用。</td></tr><tr><td>1 位</td><td>Marked0</td><td>另一个标记位，与 Marked1 配合用于 GC 标记阶段</td></tr><tr><td>42 位</td><td>对象地址部分</td><td>实际的内存地址部分，最多可表示 2^42 字节（即 4 TB）,jdk15后占用 44位，支持 16TB</td></tr></tbody></table><p><em><strong>读屏障</strong></em></p><ul class="lvl-1"><li class="lvl-2"><p>ZGC（Z Garbage Collector）中的**读屏障（Read Barrier）是其核心机制之一，它保证了并发压缩（对象移动）**时程序的正确性，是实现低延迟、高并发垃圾回收的关键。</p></li><li class="lvl-2"><p>在传统 GC 中，如果对象在 GC 过程中被移动，程序访问到的对象地址可能就无效了。因此，需要**“停世界”**将所有引用更新。</p></li><li class="lvl-2"><p>而 ZGC 的设计目标是 &lt;10ms 的 GC 停顿时间，所以它采用 <code>并发标记 + 并发移动 + 并发引用更新</code> 的模式。在这种模式下，对象可以在程序运行时被移动，但程序访问时必须“知道”这个对象是否已经被移动，并获取其最新地址，这就是读屏障的职责。</p></li><li class="lvl-2"><p>读屏障是一种在读取对象引用时自动插入的逻辑，用于检查引用是否有效，并在必要时进行修正（即地址重定向）。</p></li><li class="lvl-2"><p>ZGC 是目前唯一在所有对象访问中都使用读屏障的 GC，它在每次对象指针解引用时都进行如下操作：</p></li></ul><table><thead><tr><th>职责</th><th>说明</th></tr></thead><tbody><tr><td><strong>检测引用是否是老地址</strong></td><td>利用指针中的元信息（颜色指针，如 Remapped 位）判断引用是否已经被更新</td></tr><tr><td><strong>如果未更新则重定向引用</strong></td><td>如果引用的是旧地址，屏障会通过 forwarding table 找到新地址并更新</td></tr><tr><td><strong>保证最终访问对象的地址正确</strong></td><td>即使在对象移动过程中，程序也总能访问到有效地址，无需停顿所有线程</td></tr></tbody></table><pre><code class="mermaid">graph TDA[程序访问对象引用&lt;br&#x2F;&gt;例如：Person p &#x3D; personField] --&gt; B[JVM 插入读屏障逻辑]B --&gt; C[读屏障检查颜色指针中的 Remapped 位]C --&gt; D{Remapped 位为 0 吗？}D -- 是 --&gt; E[检查对象是否已被移动]E --&gt; F[更新引用地址为新地址]F --&gt; G[设置 Remapped 位为 1]G --&gt; H[使用更新后的引用访问对象]D -- 否 --&gt; I[直接使用当前引用访问对象]</code></pre></div><ul class="lvl-0"><li class="lvl-2"><p>ZGC的Region可以具有大、中、小三类容量：</p><ul class="lvl-2"><li class="lvl-6">小型Region（Small Region） ： 容量固定为2MB，用于放置小于256KB的小对象。</li><li class="lvl-6">中型Region（Medium Region） ： 容量固定为32MB，用于放置大于等于256KB但小于4MB的对象。</li><li class="lvl-6">大型Region（Large Region） ： 容量不固定，可以动态变化，但必须为2MB的整数倍，用于放置4MB或以上的大对象。</li></ul><blockquote><p>每个大型Region中只会存放一个大对象，这也预示着虽然名字叫作“大型Region”，但它的实际容量完全有可能小于中型Region，最小容量可低至4MB。</p></blockquote></li><li class="lvl-2"><p>ZGC 特点：</p><ul class="lvl-2"><li class="lvl-6">支持极大堆（JDK 15 起支持最高 16TB）</li><li class="lvl-6">GC 停顿时间通常低于 1ms（与堆大小基本无关）</li><li class="lvl-6">适合低延迟、高吞吐、高可用的应用场景，如交易系统、广告推荐等</li></ul></li></ul><h5 id="ZGC-收集器的工作方式">ZGC 收集器的工作方式</h5><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/94yKcU.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1️⃣ 并发标记（Concurrent Mark）：</span><br><span class="line">   与G1一样，并发标记是遍历对象图做可达性分析的阶段，</span><br><span class="line">   它的初始标记(Mark Start)和最终标记(Mark End)也会出现短暂的停顿，</span><br><span class="line">   与G1不同的是，ZGC的标记是在指针上而不是在对象上进行的，</span><br><span class="line">   标记阶段会更新染色指针中的 Marked 0、 Marked 1 标志位。</span><br><span class="line"></span><br><span class="line">2️⃣ 并发预备重分配（Concurrent Prepare <span class="keyword">for</span> Relocate）：</span><br><span class="line">   这个阶段需要根据特定的查询条件统计得出本次收集过程要清理哪些Region，将这些Region组成重分配集（Relocation Set）。</span><br><span class="line">   ZGC每次回收都会扫描所有的Region，用范围更大的扫描成本换取省去G1中记忆集的维护成本。</span><br><span class="line"></span><br><span class="line">3️⃣ 并发重分配（Concurrent Relocate）：</span><br><span class="line">   重分配是ZGC执行过程中的核心阶段，这个过程要把重分配集中的存活对象复制到新的Region上，</span><br><span class="line">   并为重分配集中的每个Region维护一个转发表（Forward Table），记录从旧对象到新对象的转向关系。</span><br><span class="line">   ZGC收集器能仅从引用上就明确得知一个对象是否处于重分配集之中，如果用户线程此时并发访问了位于重分配集中的对象，</span><br><span class="line">   这次访问将会被预置的内存屏障(读屏障)所截获，然后立即根据Region上的转发表记录将访问转发到新复制的对象上，</span><br><span class="line">   并同时修正更新该引用的值，使其直接指向新对象，ZGC将这种行为称为指针的“自愈”（Self-Healing）能力。</span><br><span class="line"></span><br><span class="line">4️⃣ 并发重映射（Concurrent Remap）：</span><br><span class="line">   重映射所做的就是修正整个堆中指向重分配集中旧对象的所有引用，但是ZGC中对象引用存在“自愈”功能，所以这个重映射操作并不是很迫切。</span><br><span class="line">   ZGC很巧妙地把并发重映射阶段（Concurrent Remap）要做的工作，合并到了下一次垃圾收集循环中的并发标记阶段（Concurrent Mark）里去完成，</span><br><span class="line">   反正它们都是要遍历所有对象的，这样合并就节省了一次遍历对象图的开销。</span><br><span class="line">   一旦所有指针都被修正之后， 原来记录新旧对象关系的转发表就可以释放掉了。</span><br></pre></td></tr></table></figure><h5 id="ZGC存在的问题">ZGC存在的问题</h5><ul class="lvl-0"><li class="lvl-2"><p>ZGC最大的问题是<code>浮动垃圾</code>。ZGC的停顿时间是在10ms以下，但是ZGC的执行时间还是远远大于这个时间的。假如ZGC全过程需要执行10分钟，在这个期间由于对象分配速率很高，将创建大量的新对象，这些对象很难进入当次GC，所以只能在下次GC的时候进行回收，这些只能等到下次GC才能回收的对象就是浮动垃圾。</p></li><li class="lvl-2"><p>ZGC没有分代概念，每次都需要进行全堆扫描，导致一些“朝生夕死”的对象没能及时的被回收。</p></li><li class="lvl-2"><p>目前唯一的办法是增大堆的容量，使得程序得到更多的喘息时间，但是这个也是一个治标不治本的方案。如果需要从根本上解决这个问题，还是需要引入分代收集，让新生对象都在一个专门的区域中创建，然后专门针对这个区域进行更频繁、更快的收集。</p></li><li class="lvl-2"><p>JDK21正式引入了分代（jdk17是预览版），可以在生产环境中使用，需要手动开启：<code>-XX:+ZGenerational</code></p></li></ul><h5 id="ZGC-收集器参数配置表">ZGC 收集器参数配置表</h5><table><thead><tr><th>参数名</th><th>说明</th><th>默认值（如未特殊标注）</th></tr></thead><tbody><tr><td><code>-XX:+UseZGC</code></td><td>启用 ZGC 垃圾收集器</td><td>-</td></tr><tr><td><code>-XX:+UnlockExperimentalVMOptions</code></td><td>解锁实验性参数（JDK 11~14 使用 ZGC 必须）</td><td>-</td></tr><tr><td><code>-XX:+UseLargePages</code></td><td>启用大页内存（性能优化）</td><td>false</td></tr><tr><td><code>-XX:+UseTransparentHugePages</code></td><td>启用透明大页（部分 Linux 上可结合使用）</td><td>false</td></tr><tr><td><code>-Xmx</code> / <code>-Xms</code></td><td>设置最大/初始堆大小</td><td>用户配置</td></tr><tr><td><code>-XX:ZUncommitDelay=&lt;秒&gt;</code></td><td>未使用内存释放回操作系统的延迟时间（ZGC 会自动释放内存）</td><td>300（5分钟）</td></tr><tr><td><code>-XX:SoftMaxHeapSize=&lt;大小&gt;</code></td><td>软最大堆（Soft Heap Limit）：ZGC 尝试将使用的堆控制在该值以内</td><td>默认等于 -Xmx</td></tr><tr><td><code>-XX:MaxHeapFreeRatio</code></td><td>最大堆空闲比例（超过此比例可能触发内存释放）</td><td>70</td></tr><tr><td><code>-XX:MinHeapFreeRatio</code></td><td>最小堆空闲比例（低于此比例可能触发扩容）</td><td>40</td></tr><tr><td><code>-XX:+ZGenerational</code></td><td>启用 ZGC 分代收集（从 JDK 21 起支持，默认关闭）</td><td>false（JDK 21+）</td></tr><tr><td><code>-XX:+PrintGC</code> / <code>-Xlog:gc*</code></td><td>开启 GC 日志输出</td><td>-</td></tr><tr><td><code>-XX:+ZProactive</code></td><td>主动回收策略（在系统空闲时尝试回收）</td><td>true</td></tr><tr><td><code>-XX:ZCollectionInterval=&lt;秒&gt;</code></td><td>主动回收之间的最小时间间隔（配合 ZProactive）</td><td>默认值因版本而异</td></tr></tbody></table><h3 id="ZGC-vs-G1-GC-vs-Parallel-GC-对比表">ZGC vs G1 GC vs Parallel GC 对比表</h3><table><thead><tr><th>特性</th><th><strong>ZGC</strong></th><th><strong>G1 GC</strong></th><th><strong>Parallel GC</strong></th></tr></thead><tbody><tr><td><strong>设计目标</strong></td><td><strong>极低延迟</strong>，&lt;1ms 停顿</td><td>平衡 <strong>低延迟</strong> 与 <strong>高吞吐</strong></td><td><strong>高吞吐</strong>，最大化 CPU 使用</td></tr><tr><td><strong>GC 停顿时间</strong></td><td>&lt;1ms，堆大小增加不影响停顿时间</td><td>几十到几百毫秒，堆越大停顿越明显</td><td>停顿时间可能达到秒级，<strong>堆越大越明显</strong></td></tr><tr><td><strong>堆大小支持</strong></td><td>支持高达 <strong>16TB</strong>（JDK 15+）</td><td>支持 <strong>最多 4TB</strong></td><td>支持大堆，但停顿明显</td></tr><tr><td><strong>是否分代</strong></td><td>默认不分代（JDK 21+ 可开启 <code>-XX:+ZGenerational</code>）</td><td>分代（新生代 + 老年代）</td><td>分代（新生代 + 老年代）</td></tr><tr><td><strong>并发回收</strong></td><td>是，<strong>包括标记、压缩、引用处理都并发</strong></td><td>部分并发，仍包含明显 Stop-The-World 阶段</td><td>否，<strong>全部 Stop-The-World</strong></td></tr><tr><td><strong>移动对象时是否停顿</strong></td><td>否，使用读屏障并发转移对象</td><td>是（通过复制区域）</td><td>是</td></tr><tr><td><strong>实现机制</strong></td><td>标记-重定位，基于读屏障</td><td>Region 分区 + 标记-复制 + Mixed GC</td><td>标记-复制（新生代）、标记-整理（老年代）</td></tr><tr><td><strong>吞吐能力</strong></td><td>中高</td><td>高</td><td><strong>最高</strong></td></tr><tr><td><strong>适用场景</strong></td><td>低延迟系统，如金融、交易、推荐等实时应用</td><td>通用后台系统、Web 服务等</td><td>批处理、数据计算、日志分析等不敏感于停顿的系统</td></tr><tr><td><strong>默认启用</strong></td><td>否，需指定 <code>-XX:+UseZGC</code></td><td>JDK 9+ 默认 GC</td><td>JDK 8 及以前默认 GC</td></tr><tr><td><strong>调优复杂度</strong></td><td>低，大多数参数可省略</td><td>中，需要设置目标停顿时间等</td><td>高，需要精细配置 Eden/Survivor 等比例</td></tr><tr><td><strong>GC 日志配置方式</strong></td><td>统一日志格式：<code>-Xlog:gc*</code>（JDK 9+）</td><td>支持传统的 <code>-XX:+PrintGCDetails</code> 和 <code>-Xlog:gc*</code> 日志输出</td><td>主要使用旧参数：<code>-XX:+PrintGCDetails</code> 等</td></tr></tbody></table><div class="tips"><p><em><strong>ZGC 吞吐能力较弱的原因</strong></em></p><table><thead><tr><th>原因</th><th>解释</th></tr></thead><tbody><tr><td><strong>1. 并发阶段代价较高</strong></td><td>ZGC 几乎所有的 GC 工作（包括标记、整理、引用处理、转移对象）都在与应用线程并发执行。虽然减少了停顿，但这些 GC 线程与业务线程共享 CPU 资源，<strong>增加了 CPU 上下文切换和缓存竞争</strong>，从而影响业务线程的执行效率。</td></tr><tr><td><strong>2. 读屏障开销</strong></td><td>ZGC 依赖<strong>着色指针和读屏障（load barrier）机制</strong>来跟踪对象引用状态，支持并发转移。虽然非常高效，但仍比传统 GC 的普通读写路径慢一些，在高频访问对象场景下会带来一定 CPU 开销。</td></tr><tr><td><strong>3. 对硬件依赖高，调度保守</strong></td><td>为了实现“&lt;1ms 停顿”的目标，ZGC 会选择更保守的调度策略（如避免并发线程使用过多 CPU），而不会像 Parallel GC 那样“榨干”所有核心资源。</td></tr><tr><td><strong>4. 内存开销更高</strong></td><td>为了支持并发压缩和转移，ZGC 通常需要为每个对象保留元数据和更多的转移空间（即“浮动垃圾”区域），这可能导致<strong>频繁的 GC 周期</strong>，影响吞吐。</td></tr><tr><td><strong>5. 设计目标非吞吐优先</strong></td><td>ZGC 的首要目标是<strong>低延迟而非最大吞吐</strong>。与 Parallel GC（以吞吐为核心）设计目标不同，ZGC 更适合场景为“对延迟敏感但吞吐可接受”的系统。</td></tr></tbody></table><p>最糟糕的情况下吞吐量会降低15%。这都不是事，停顿时间足够优秀。至于吞吐量，通过扩容分分钟解决。<br>另外，Oracle官方提到了它最大的优点是：它的停顿时间不会随着堆的增大而增长！<br>也就是说，几十G堆的停顿时间是10ms以下，几百G甚至上T堆的停顿时间也是10ms以下。</p><p>ZGC 吞吐弱，不是因为技术落后，而是因为它主动选择在低延迟和高吞吐之间偏向了低延迟。<br>在对响应时间要求极高的系统中，它是非常合适的选择。<br>但如果你的目标是压榨机器性能跑批处理、日志分析这类吞吐导向型任务，Parallel GC 或 G1 会更合适。</p></div><h2 id="内存溢出-OutOfMemoryError，简称-OOM">内存溢出(OutOfMemoryError，简称 OOM)</h2><ul class="lvl-0"><li class="lvl-2"><p>JVM 常见内存溢出类型汇总表</p></li></ul><table><thead><tr><th>溢出类型</th><th>异常信息</th><th>触发原因/描述</th><th>相关参数和建议配置</th></tr></thead><tbody><tr><td><strong>堆内存溢出</strong></td><td><code>java.lang.OutOfMemoryError: Java heap space</code></td><td>- 创建大量对象，堆空间不足<br>- 内存泄漏：对象不再使用却有强引用<br>- 老年代对象太多无法晋升</td><td><code>-Xms</code> / <code>-Xmx</code> 设置堆大小</td></tr><tr><td><strong>栈溢出（递归）</strong></td><td><code>java.lang.StackOverflowError</code></td><td>- 方法无限递归或递归层级太深</td><td><code>-Xss</code> 设置线程栈大小</td></tr><tr><td><strong>无法创建新线程</strong></td><td><code>java.lang.OutOfMemoryError: unable to create new native thread</code></td><td>- 创建线程过多（如线程池配置过大）<br>- 系统或 JVM native 线程资源耗尽</td><td>控制线程池大小，避免无限新建线程</td></tr><tr><td><strong>元空间溢出</strong></td><td><code>java.lang.OutOfMemoryError: Metaspace</code></td><td>- 动态加载类过多（如使用 CGLIB、JSP 动态生成类）<br>- 类无法卸载（如 ClassLoader 泄漏）</td><td><code>-XX:MetaspaceSize</code> / <code>-XX:MaxMetaspaceSize</code></td></tr><tr><td><strong>直接内存溢出</strong></td><td><code>java.lang.OutOfMemoryError: Direct buffer memory</code></td><td>- 使用 <code>ByteBuffer.allocateDirect()</code> 分配大量直接内存<br>- Netty 等框架默认使用直接内存</td><td><code>-XX:MaxDirectMemorySize</code></td></tr><tr><td><strong>GC 开销过高</strong></td><td><code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code></td><td>- JVM 花费 &gt;98% 的时间 GC 但回收 &lt;2% 的内存，认为进入“GC 死循环”</td><td>分析 GC 日志、优化堆设置</td></tr><tr><td><strong>类卸载失败（内存泄漏）</strong></td><td>（不一定报错，但可能导致 Metaspace OOM）</td><td>- Web 容器频繁部署热更新 WAR 包时，ClassLoader 无法卸载，导致类永久驻留</td><td>优化 ClassLoader 管理，使用内存分析工具</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>堆快照(堆转储)文件分析</p></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-XX:+HeapDumpOnOutOfMemoryError</code></td><td>OOM 时生成堆转储文件 ,建议生产环境开启</td></tr><tr><td><code>-XX:HeapDumpPath=xxx.hprof</code></td><td>指定堆转储文件保存路径 <br> 默认保存在当前目录</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>常用分析工具与命令</p></li></ul><table><thead><tr><th>工具/命令</th><th>简介与功能</th><th>使用说明</th></tr></thead><tbody><tr><td><strong>MAT（Memory Analyzer Tool）</strong></td><td>Eclipse 出品的强大图形工具，支持泄漏分析、对象引用链分析、内存占用统计等</td><td>下载地址：<br><a href="https://www.eclipse.org/mat/">https://www.eclipse.org/mat/</a><br>打开后直接导入 <code>.hprof</code> 文件即可分析</td></tr><tr><td><strong>VisualVM</strong></td><td>官方可视化 JVM 监控工具，支持实时分析、GC 查看、线程状态与堆转储查看</td><td>附带于 JDK（或单独安装），打开 <code>.hprof</code> 文件进行可视化分析</td></tr><tr><td><strong>JProfiler</strong></td><td>商业级 Java 性能分析工具，提供堆分析、CPU 分析、线程分析等全套功能</td><td>支持打开 <code>.hprof</code> 文件，也可在运行时配合使用（需付费或试用）</td></tr><tr><td><strong>YourKit</strong></td><td>商业性能分析工具，界面友好，支持丰富的分析功能</td><td>支持堆分析，适合内存泄漏排查</td></tr><tr><td><strong>jhat</strong>（过时）</td><td>JDK 附带的旧工具，用于分析 <code>.hprof</code> 文件，开启 Web 界面查看（已废弃）</td><td>命令：<code>jhat heapdump.hprof</code>，浏览器访问 <code>http://localhost:7000</code>（JDK 8 及以下）</td></tr><tr><td><strong>jmap</strong></td><td>用于生成堆转储文件或查看堆对象统计信息（<strong>不是分析工具本身</strong>）</td><td>命令：<code>jmap -dump:format=b,file=heap.hprof &lt;pid&gt;</code> 生成转储；配合 MAT 使用</td></tr><tr><td><strong>jcmd</strong></td><td>更现代的诊断命令工具，可生成 heap dump、执行 GC、打印 VM 状态等</td><td>命令：<code>jcmd &lt;pid&gt; GC.heap_dump heap.hprof</code></td></tr><tr><td><strong><a href="http://GCEasy.io">GCEasy.io</a></strong></td><td>在线分析工具，支持 <code>.hprof</code> 文件和 GC 日志上传分析</td><td>网站：<a href="https://gceasy.io">https://gceasy.io</a></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>GC日志相关参数(JDK1.8及以下)</p></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-XX:+PrintGC</code></td><td>打印基本 GC 信息（建议配合 <code>-XX:+PrintGCDetails</code> 使用）,与<code>-verbose:gc</code>等价</td></tr><tr><td><code>-XX:+PrintGCDetails</code></td><td>打印详细的 GC 日志信息（如各区域使用情况、对象分配、晋升等）</td></tr><tr><td><code>-XX:+PrintGCDateStamps</code></td><td>在 GC 日志中添加日期时间戳</td></tr><tr><td><code>-XX:+PrintGCTimeStamps</code></td><td>在 GC 日志中添加 JVM 启动以来的时间戳</td></tr><tr><td><code>-Xloggc:/var/log/myapp/gc.log</code></td><td>将 GC 日志输出到指定文件</td></tr><tr><td><code>-XX:+UseGCLogFileRotation</code></td><td>启用 GC 日志文件轮转（适用于大规模系统的 GC 日志管理）</td></tr><tr><td><code>-XX:NumberOfGCLogFiles=5</code></td><td>最多保留 5 个 GC 日志历史文件</td></tr><tr><td><code>-XX:GCLogFileSize=10M</code></td><td>每个 GC 日志文件最大为 10MB</td></tr><tr><td><code>-XX:+PrintGCCause</code></td><td>打印 GC 的触发原因（如 Minor GC、System.gc() 等）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>GC日志相关参数(JDK9+)</p><ul class="lvl-2"><li class="lvl-6"><code>-Xlog</code> 是用于配置 JVM 日志记录的参数，它是从 JDK 9 开始引入的统一日志框架（Unified Logging）的一部分。</li><li class="lvl-6">通过 -Xlog 选项，你可以控制日志的 标签（tags）、输出级别（level）、输出位置（output） 等内容。</li><li class="lvl-6">基本格式</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xlog[:[tag1[,tag2...]][[:level][:[output][:[decorators][:rotation]]]]]</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">常见 Tags（标签）</li></ul><table><thead><tr><th>类别</th><th>标签</th><th>含义</th><th>用途示例</th></tr></thead><tbody><tr><td><strong>类加载</strong></td><td><code>classload</code></td><td>JVM 类加载活动的总体信息</td><td>观察类加载失败或重复加载</td></tr><tr><td></td><td><code>class+load</code></td><td>显示每个类加载过程细节</td><td>定位类加载异常、热加载分析</td></tr><tr><td></td><td><code>class+unload</code></td><td>记录类卸载事件</td><td>分析类卸载时机或内存释放情况</td></tr><tr><td><strong>垃圾回收</strong></td><td><code>gc</code></td><td>总体 GC 活动信息</td><td>GC 调优入门使用</td></tr><tr><td></td><td><code>gc+start</code></td><td>GC 事件开始时间与类型</td><td>查看 GC 频率与触发点</td></tr><tr><td></td><td><code>gc+heap</code></td><td>GC 前后的堆使用情况</td><td>分析堆使用与分区占比</td></tr><tr><td></td><td><code>gc+phases</code></td><td>GC 内部阶段细节</td><td>G1/ZGC 等调试用</td></tr><tr><td></td><td><code>gc+age</code></td><td>年龄分布情况</td><td>判断对象晋升路径、老年代压力</td></tr><tr><td></td><td><code>gc+ergo</code></td><td>GC 的自适应调整决策</td><td>查看线程、堆大小自动调整逻辑</td></tr><tr><td><strong>JIT 编译</strong></td><td><code>jit</code></td><td>JIT 编译日志入口</td><td>性能热点方法分析</td></tr><tr><td></td><td><code>compiler</code></td><td>显示方法编译、时间等</td><td>判断是否有方法未被优化</td></tr><tr><td></td><td><code>codecache</code></td><td>已编译代码存储区使用情况</td><td>判断是否达到缓存上限</td></tr><tr><td></td><td><code>nmethod</code></td><td>JIT 生成的 native 方法生命周期</td><td>观察 native 代码生成与卸载</td></tr><tr><td><strong>内存</strong></td><td><code>memory</code></td><td>总体内存使用情况</td><td>诊断内存泄漏或溢出</td></tr><tr><td></td><td><code>gc+heap</code></td><td>堆结构与占用情况</td><td>与 GC 联合分析使用</td></tr><tr><td></td><td><code>os+memory</code></td><td>JVM 与操作系统间的内存交互</td><td>判断是否系统层内存申请失败</td></tr><tr><td><strong>线程</strong></td><td><code>thread</code></td><td>线程的创建、终止、状态变化</td><td>线程泄漏或频繁创建排查</td></tr><tr><td></td><td><code>safepoint</code></td><td>JVM 进入/退出 safepoint 的信息</td><td>分析 STW 停顿时间与频率</td></tr><tr><td><strong>锁与同步</strong></td><td><code>synchronization</code></td><td>锁竞争、获取和释放信息</td><td>分析性能瓶颈中的锁争用</td></tr><tr><td></td><td><code>monitorinflation</code></td><td>轻量级锁升级为重量级锁过程</td><td>排查锁膨胀导致的延迟问题</td></tr><tr><td><strong>操作系统交互</strong></td><td><code>os</code></td><td>JVM 与操作系统交互日志</td><td>常规系统资源请求信息</td></tr><tr><td></td><td><code>os+thread</code></td><td>OS 层级线程管理信息</td><td>高并发时线程绑定与调度分析</td></tr><tr><td></td><td><code>os+cpu</code></td><td>CPU 使用与分布情况</td><td>排查高 CPU 使用的问题</td></tr><tr><td><strong>类元数据</strong></td><td><code>metaspace</code></td><td>元空间内存使用与变化</td><td>排查 Metaspace OOM</td></tr><tr><td></td><td><code>cds</code></td><td>类共享数据（CDS）日志</td><td>分析类加载加速是否生效</td></tr><tr><td><strong>安全</strong></td><td><code>security</code></td><td>安全相关操作日志</td><td>权限检查失败、密钥加载等调试</td></tr><tr><td></td><td><code>module</code></td><td>模块系统（JPMS）相关日志</td><td>模块访问控制失败分析</td></tr><tr><td><strong>其他</strong></td><td><code>start</code></td><td>JVM 启动流程日志</td><td>启动阶段慢、出错时使用</td></tr><tr><td></td><td><code>init</code></td><td>各子系统初始化过程</td><td>定位子系统启动顺序与异常</td></tr><tr><td></td><td><code>jni</code></td><td>Java 调用 native 方法日志</td><td>JNI 崩溃、性能问题分析</td></tr><tr><td></td><td><code>classpath</code></td><td>类路径加载详情</td><td>类找不到、路径冲突等问题排查</td></tr><tr><td></td><td><code>exceptions</code></td><td>异常信息及堆栈打印</td><td>捕获未处理异常、频繁抛错分析</td></tr></tbody></table><ul class="lvl-2"><li class="lvl-6"><p>Level（级别）</p></li></ul><table><thead><tr><th>等级</th><th>含义说明</th><th>用途示例</th></tr></thead><tbody><tr><td><code>off</code></td><td>关闭日志记录</td><td>完全禁用指定标签的日志输出</td></tr><tr><td><code>error</code></td><td>严重错误，仅记录影响系统运行的错误信息</td><td>捕获崩溃、严重故障</td></tr><tr><td><code>warning</code></td><td>潜在问题，可能影响稳定性</td><td>记录可能的内存、配置问题</td></tr><tr><td><code>info</code></td><td>常规信息（默认级别）</td><td>日常运行日志，如 GC 次数</td></tr><tr><td><code>debug</code></td><td>更详细的调试信息，适用于问题诊断</td><td>跟踪行为变化或代码路径</td></tr><tr><td><code>trace</code></td><td>最详细的信息，记录几乎所有细节</td><td>深度调试，如方法级别跟踪</td></tr><tr><td><code>all</code></td><td>打印所有级别的日志（包括 trace 及以上）</td><td>全量日志输出，用于完全监控</td></tr></tbody></table><ul class="lvl-2"><li class="lvl-6"><p>Output（输出位置）</p></li></ul><table><thead><tr><th>输出位置</th><th>含义说明</th><th>示例用法</th></tr></thead><tbody><tr><td><code>stdout</code></td><td>标准输出（默认）</td><td><code>-Xlog:gc=info:stdout</code></td></tr><tr><td><code>stderr</code></td><td>标准错误输出</td><td><code>-Xlog:gc=info:stderr</code></td></tr><tr><td><code>file=路径</code></td><td>输出到指定文件路径（自动创建文件）</td><td><code>-Xlog:gc:file=gc.log</code></td></tr><tr><td>多个输出用逗号分隔</td><td>可同时输出到多个位置</td><td><code>-Xlog:gc:file=gc.log,stdout</code></td></tr></tbody></table><ul class="lvl-2"><li class="lvl-6"><p>Decorators（装饰器）</p></li></ul><table><thead><tr><th>装饰器</th><th>含义说明</th><th>示例输出片段（含该装饰器时）</th></tr></thead><tbody><tr><td><code>time</code></td><td>显示当前系统时间（wall-clock time）</td><td><code>2025-05-16T10:45:12.123+0800</code></td></tr><tr><td><code>uptime</code></td><td>显示 JVM 启动以来的运行时间（毫秒）</td><td><code>5.123s</code>（表示已运行 5.123 秒）</td></tr><tr><td><code>level</code></td><td>显示日志级别（如 info, warning 等）</td><td><code>[info]</code>, <code>[debug]</code></td></tr><tr><td><code>tags</code></td><td>显示日志标签</td><td><code>[gc]</code>, <code>[class,load]</code></td></tr><tr><td><code>tid</code></td><td>显示线程 ID</td><td><code>tid=0x00007fddc4012800</code></td></tr><tr><td><code>hostname</code></td><td>显示主机名</td><td><code>host=example.local</code></td></tr><tr><td><code>pid</code></td><td>显示当前 JVM 进程 ID</td><td><code>pid=12345</code></td></tr></tbody></table><ul class="lvl-2"><li class="lvl-6"><p>Rotation (日志轮转设置)</p></li></ul><table><thead><tr><th>设置参数</th><th>含义说明</th><th>示例值</th></tr></thead><tbody><tr><td><code>filecount=n</code></td><td>保留的日志文件数量（最大文件轮转数）</td><td><code>filecount=5</code></td></tr><tr><td><code>filesize=n</code></td><td>单个日志文件的最大大小（支持单位：k/m/g）</td><td><code>filesize=10m</code></td></tr></tbody></table><ul class="lvl-2"><li class="lvl-6"><p>示例：</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xlog:gc*:file=/var/log/app/gc.log:time,<span class="built_in">uptime</span>,level,tags:filecount=5,filesize=20M</span><br></pre></td></tr></table></figure><table><thead><tr><th>项</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>tag</code></td><td><code>gc*</code></td><td>匹配所有以 <code>gc</code> 开头的标签（如 <code>gc+heap</code> 等）</td></tr><tr><td><code>level</code></td><td><em>省略</em></td><td>默认是 <code>info</code></td></tr><tr><td><code>output</code></td><td><code>file=/var/log/app/gc.log</code></td><td>日志写入该文件</td></tr><tr><td><code>decorators</code></td><td><code>time,uptime,level,tags</code></td><td>日志前缀包含时间、启动时间、日志级别、标签</td></tr><tr><td><code>rotation</code></td><td><code>filecount=5,filesize=20M</code></td><td>最多保留 5 个日志文件，单个文件最大 20MB</td></tr></tbody></table><ul class="lvl-2"><li class="lvl-6"><p>日志文件中可以使用变量</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xlog:gc*:file=gc_%p_%t.log</span><br></pre></td></tr></table></figure><p><strong>常用变量表</strong></p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>%p</td><td>进程ID（Process ID）</td></tr><tr><td>%t</td><td>时间戳（代表日志文件创建时的时间戳）</td></tr><tr><td>%h</td><td>主机名（Hostname）</td></tr><tr><td>%n</td><td>序列号，从0开始，每创建新文件加1</td></tr><tr><td>%u</td><td>唯一标识符，用于解决文件名冲突</td></tr><tr><td>%i</td><td>当多个JVM进程使用相同的文件名模式时的区分计数器</td></tr></tbody></table><p><strong>时间相关变量表</strong></p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>%Y</td><td>年（Year）</td></tr><tr><td>%m</td><td>月（Month）</td></tr><tr><td>%d</td><td>日（Day）</td></tr><tr><td>%H</td><td>小时（Hour）</td></tr><tr><td>%M</td><td>分钟（Minute）</td></tr><tr><td>%S</td><td>秒（Second）</td></tr></tbody></table>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础配置</span></span><br><span class="line">-Xlog:gc*:file=gc_%p_%Y%m%d_%H%M%S.<span class="built_in">log</span>:time,<span class="built_in">uptime</span>,level,tags:filecount=5,filesize=20M</span><br><span class="line"></span><br><span class="line"><span class="comment"># 详细GC日志配置</span></span><br><span class="line">-Xlog:gc*=debug:file=gc_%p_%t.log:time,<span class="built_in">uptime</span>,level,tags:filecount=10,filesize=50M</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多目标输出</span></span><br><span class="line">-Xlog:gc*=info:file=gc.log::filecount=5,filesize=20M -Xlog:gc*=debug:file=gc_detailed.log</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>对于GC日志的分析<br>人工分析还是太复杂了，可以使用<a href="https://gceasy.io">GCEasy.io</a>，每个月免费5次。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍JVM的内存模型与垃圾回收机制&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se8/html/index.html&quot;&gt;JDK8 The Java® Virtual Machine Specification&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html&quot;&gt;JDK8的java指令的官⽅⽂档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/index.html&quot;&gt;JDK⼯具官⽹⽂档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html&quot;&gt;JDK17的java指令的官⽅⽂档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="jvm" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/jvm/"/>
    
    
    <category term="jvm" scheme="https://blog.hanqunfeng.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM 之 类加载器</title>
    <link href="https://blog.hanqunfeng.com/2025/05/08/jvm-classloader-01/"/>
    <id>https://blog.hanqunfeng.com/2025/05/08/jvm-classloader-01/</id>
    <published>2025-05-08T13:30:05.000Z</published>
    <updated>2025-05-16T14:31:24.513Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍JVM的类加载器</p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html">JDK8 The Java® Virtual Machine Specification</a></p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">JDK8的java指令的官⽅⽂档</a></p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/en/java/javase/17/docs/specs/man/index.html">JDK⼯具官⽹⽂档</a></p></li><li class="lvl-2"><p><a href="https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html">JDK17的java指令的官⽅⽂档</a></p></li></ul><span id="more"></span><h2 id="类加载器">类加载器</h2><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/weBeGe.png" alt="" width="1200" height="400"></p><ul class="lvl-0"><li class="lvl-2"><p>左侧是JDK中实现的类加载器，通过<code>parent</code>属性形成⽗⼦关系。应⽤中⾃定义的类加载器的<code>parent</code>都是<br><code>AppClassLoader</code></p></li><li class="lvl-2"><p>右侧是JDK中的类加载器实现类。通过类继承的机制形成体系。未来我们就可以通过继承相关的类实现⾃定义类<br>加载器。</p></li><li class="lvl-2"><p>在代码中查看类加载器关系</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoaderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// ⽗⼦关系 AppClassLoader &lt;- ExtClassLoader &lt;- BootStrap Classloader</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl1</span> <span class="operator">=</span> LoaderDemo.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;cl1 &gt; &quot;</span> + cl1); <span class="comment">// sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;parent of cl1 &gt; &quot;</span> + cl1.getParent()); <span class="comment">// sun.misc.Launcher$ExtClassLoader@1b6d3586</span></span><br><span class="line">        <span class="comment">// BootStrap Classloader由C++开发，是JVM虚拟机的⼀部分，本身不是JAVA类。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;grant parent of cl1 &gt; &quot;</span> + cl1.getParent().getParent()); <span class="comment">// null</span></span><br><span class="line">        <span class="comment">// String,Int等基础类由BootStrap Classloader加载。</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl2</span> <span class="operator">=</span> String.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;cl2 &gt; &quot;</span> + cl2); <span class="comment">// null</span></span><br><span class="line">        System.out.println(cl1.loadClass(<span class="string">&quot;java.util.List&quot;</span>).getClass().getClassLoader()); <span class="comment">// null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双亲委派机制">双亲委派机制</h2><ul class="lvl-0"><li class="lvl-2"><p>当⼀个类加载器要加载⼀个类时，整体的过程就是通过双亲委派机制向上委托查找，如果没有查找到，就向下委托加载。</p></li><li class="lvl-2"><p>Java 类加载机制中的<code>双亲委派模型（Parent Delegation Model）</code>是一种保证了类加载器按照层次结构从上到下来加载类的策略。这种层级化的加载流程确保了应用程序能够安全地加载并使用来自不同来源的类，同时也避免了内存中出现相同类的多个拷贝。</p></li><li class="lvl-2"><p>以下是双亲委派机制的工作原理：</p><ul class="lvl-2"><li class="lvl-4">1.当一个类加载器接收到类加载请求时，它首先不会自行尝试去寻找类文件，而是将这个请求委派给它的父类加载器。</li><li class="lvl-4">2.父类加载器同样遵循此规则，它会继续把请求向上委派给它的父类加载器，直到达到根（bootstrapp）类加载器为止。</li><li class="lvl-4">3.根类加载器一般会直接访问本地文件系统来查找类文件，比如 JDK 自带的核心类库，或者在-Xbootclasspath指定的路径下查找。</li><li class="lvl-4">4.如果根类加载器找到了该类，则进行类的加载；如果找不到，则把这个任务交回给发出请求的子类加载器。</li><li class="lvl-4">5.子类加载器也重复步骤 4，若找到则加载，否则传递给下一个子类加载器，直至原始提出请求的类加载器。</li><li class="lvl-4">6.若所有的类加载器都未能找到所需的类，则最终抛出ClassNotFoundException异常。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/ftDnCj.png" alt="" width="600" height="800"></li></ul></li><li class="lvl-2"><p>双亲委派有以下几个优点：</p><ul class="lvl-2"><li class="lvl-4">安全性：由于类加载是从顶层开始，这能防止恶意代码通过加载相同的包名和类名替代系统的关键类。</li><li class="lvl-4">唯一性：每个类都会被特定的类加载器加载一次，即便是在分布式的环境中也能保证类的统一性，避免因为多次加载导致的错误。</li><li class="lvl-4">可靠性：用户自定义的类加载器不用担心基础类已经被加载，它们可以专心于自己需要处理的部分。</li></ul></li><li class="lvl-2"><p>例如，当应用程序运行时，应用类加载器（Application ClassLoader）接收到对java.lang.String类的加载请求时，它会首先将请求传递给扩展类加载器（Extension ClassLoader），后者再传递给引导类加载器（Bootstrap ClassLoader）。引导类加载器会在其搜索路径中找到String类，并完成加载过程。如果应用程序试图提供自己的String类，由于双亲委派的存在，应用程序所指定的类并不会被加载，从而保证了平台核心 API 的一致性。</p></li><li class="lvl-2"><p>总之，双亲委派机制是 Java 类加载过程中一个非常重要的特性，它不仅维护了类加载的安全性和一致性，也为开发者提供了灵活定制类加载规则的能力。</p></li></ul><h3 id="每个类加载器查找类的默认路径">每个类加载器查找类的默认路径</h3><ul class="lvl-0"><li class="lvl-2"><p>在 Java 中，每个类加载器都有自己的类路径（Classpath）去查找类文件。下面是几个主要的类加载器以及它们的默认查找路径：</p></li></ul><table><thead><tr><th>类加载器名称</th><th>类名 / 别名</th><th>父类加载器</th><th>加载内容描述</th><th>默认查找路径 / 系统属性</th></tr></thead><tbody><tr><td><strong>启动类加载器</strong></td><td>BootstrapClassLoader</td><td>无</td><td>加载 <strong>核心 Java 类库</strong></td><td><code>&lt;JAVA_HOME&gt;/jre/lib/rt.jar</code>（JDK8 及之前）或 <code>sun.boot.class.path</code> 指定路径</td></tr><tr><td><strong>扩展类加载器</strong></td><td>ExtClassLoader</td><td>BootstrapClassLoader</td><td>加载 Java 平台扩展类库</td><td><code>&lt;JAVA_HOME&gt;/jre/lib/ext</code> 或由 <code>java.ext.dirs</code> 系统属性指定</td></tr><tr><td><strong>应用类加载器</strong></td><td>AppClassLoader</td><td>ExtClassLoader</td><td>加载 <strong>应用程序类</strong>（用户编写的代码）</td><td><code>-classpath</code>、<code>-cp</code> 参数、<code>CLASSPATH</code> 环境变量、<code>java.class.path</code> 属性、当前目录 (.)</td></tr><tr><td><strong>自定义类加载器</strong></td><td>用户自定义</td><td>可指定</td><td>可通过继承 <code>ClassLoader</code> 并重写 <code>findClass()</code> 方法实现自定义类加载逻辑，如从网络、数据库等加载类文件</td><td>默认继承父加载器查找路径，也可自定义</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>需要注意的是，除了 Bootstrap ClassLoader 外，其他的所有类加载器最终都是java.lang.ClassLoader的子类，并且每个类加载器实例都有一个直接的父类加载器。如果你创建了一个新的类加载器，它将继承 Application ClassLoader 作为它的父类，除非你在创建时指定了不同的父类加载器。</p></li><li class="lvl-2"><p>此外，Java 9 引入了模块化系统后，类加载机制也有了一些变化，对于模块路径上的类加载，会使用新的层次结构来处理，这使得类加载过程更加灵活同时保持了向后的兼容性。不过，对于传统的类路径上的类加载，双亲委派模型仍然适用。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/50fvA9.png" alt="" width="1200" height="400"></p></li></ul><table><thead><tr><th>类加载器名称</th><th>类名 / 别名</th><th>父类加载器</th><th>加载模块范围</th><th>默认查找路径 / 模块来源</th></tr></thead><tbody><tr><td><strong>引导类加载器</strong></td><td><code>BootstrapClassLoader</code></td><td>无</td><td>加载 <code>java.*</code> 模块，例如 <code>java.base</code>（包含 <code>java.lang</code>, <code>java.util</code> 等）</td><td><code>$JAVA_HOME/jmods</code> 中的模块文件，核心模块由 JVM 启动时直接加载</td></tr><tr><td><strong>平台类加载器</strong></td><td><code>PlatformClassLoader</code></td><td>BootstrapClassLoader</td><td>加载 <code>jdk.*</code>、<code>javafx.*</code> 等平台扩展模块</td><td><code>$JAVA_HOME/jmods</code>，模块名为 <code>jdk.*</code>、<code>javafx.*</code> 等；</td></tr><tr><td><strong>应用类加载器</strong></td><td><code>AppClassLoader</code></td><td>PlatformClassLoader</td><td>加载应用模块（用户代码），包括模块路径 <code>--module-path</code> 和类路径 <code>-classpath</code> 下的类</td><td>应用程序编写的模块或类，来自命令行 <code>--module-path</code>、<code>-classpath</code> 参数、<code>CLASSPATH</code> 环境变量等</td></tr><tr><td><strong>自定义类加载器</strong></td><td>用户自定义</td><td>可指定父加载器</td><td>加载非标准位置的类，可用于插件、网络加载、加密类加载等</td><td>默认遵循双亲委派，可重写 <code>findClass()</code> 实现自定义路径查找或其他数据源，如网络、数据库、加密文件等</td></tr></tbody></table><blockquote><p>jdk9+中，在委派给父加载器加载前，先判断该类是否能够归属到某一个系统模块中，如果可以找到这样的归属关系，就要优先委派给负责那个模块的加载器完成加载。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>在代码中查看类加载路径</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BootStrap Classloader，加载java基础类。</span></span><br><span class="line">System.out.println(<span class="string">&quot;BootStrap ClassLoader加载⽬录：&quot;</span> + System.getProperty(<span class="string">&quot;sun.boot.class.path&quot;</span>));</span><br><span class="line"><span class="comment">// Extention Classloader 加载⼀些扩展类。 可通过-D java.ext.dirs另⾏指定⽬录</span></span><br><span class="line">System.out.println(<span class="string">&quot;Extention ClassLoader加载⽬录：&quot;</span> + System.getProperty(<span class="string">&quot;java.ext.dirs&quot;</span>));</span><br><span class="line"><span class="comment">// AppClassLoader 加载CLASSPATH，应⽤下的Jar包。可通过-D java.class.path另⾏指定⽬录</span></span><br><span class="line">System.out.println(<span class="string">&quot;AppClassLoader加载⽬录：&quot;</span> + System.getProperty(<span class="string">&quot;java.class.path&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="双亲委派机制的实现原理">双亲委派机制的实现原理</h3><ul class="lvl-0"><li class="lvl-2"><p>java.lang.ClassLoader 类的 loadClass 方法是双亲委派的核心实现</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载指定名称的类，并根据 resolve 参数决定是否解析该类。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该方法实现了类加载的基本逻辑，包括检查类是否已加载、委托父类加载器加载、</span></span><br><span class="line"><span class="comment"> * 自行加载类以及解析类等步骤。该方法是 Java 类加载机制的核心部分之一，</span></span><br><span class="line"><span class="comment"> * 遵循双亲委派模型。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name    要加载的类的全限定名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resolve 如果为 true，则在加载后解析该类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 加载的 Class 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassNotFoundException 如果找不到指定的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 这个⽅法是protected声明的，意味着，是可以被⼦类覆盖的，所以，双亲委派机制也是可以被打破的，如Tomcat⼦类重写这个⽅法，并使⽤自己的类加载逻辑。</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 使用 synchronized 确保多线程环境下类加载的同步</span></span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        <span class="comment">// 每个类加载器对他加载过的类都有⼀个缓存，先去缓存中查看有没有加载过</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123; <span class="comment">//没有加载过，就⾛双亲委派</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 父类存在则让⽗类加载器进⾏加载</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果父类不存在，则从引导类加载器进⾏加载</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                <span class="comment">// findClass 方法是子类实现的，用于加载指定名称的类</span></span><br><span class="line">                <span class="comment">// ⽗类加载器没有加载过，就⾃⾏解析class⽂件加载</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                <span class="comment">// 性能统计：记录类加载过程中的时间消耗和调用次数，便于监控和优化。</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认情况下，双亲委派模型只进⾏了验证和准备阶段，⽽不进⾏解析(如链接、初始化)</span></span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>该方法实现了类加载的基本逻辑，包括检查类是否已加载、委托父类加载器加载、自行加载类以及解析类等步骤。该方法是 Java 类加载机制的核心部分之一，遵循双亲委派模型。</p></li><li class="lvl-2"><p>这个⽅法是<code>protected</code>声明的，意味着，是可以被⼦类覆盖的，所以，双亲委派机制也是可以被打破的，如Tomcat⼦类重写这个⽅法，并使⽤自己的类加载逻辑。</p></li></ul><h2 id="沙箱保护机制">沙箱保护机制</h2><ul class="lvl-0"><li class="lvl-2"><p>沙箱保护机制是 Java 虚拟机提供的一种安全机制，用于保护应用程序免受恶意代码的攻击。</p></li><li class="lvl-2"><p>java.lang.ClassLoader 类的 preDefineClass 方法是沙箱保护机制的核心实现</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个方法在双亲委派模型之前被调用，用于在加载类之前进行一些预处理操作。</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">// name: 要加载的类的全限定名。</span></span><br><span class="line"><span class="comment">// pd: 提供的保护域信息，可能为 null。</span></span><br><span class="line"><span class="keyword">private</span> ProtectionDomain <span class="title function_">preDefineClass</span><span class="params">(String name,</span></span><br><span class="line"><span class="params">                                            ProtectionDomain pd)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!checkName(name))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(<span class="string">&quot;IllegalName: &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Note:  Checking logic in java.lang.invoke.MemberName.checkForTypeAlias</span></span><br><span class="line">        <span class="comment">// relies on the fact that spoofing is impossible if a class has a name</span></span><br><span class="line">        <span class="comment">// of the form &quot;java.*&quot;</span></span><br><span class="line">        <span class="keyword">if</span> ((name != <span class="literal">null</span>) &amp;&amp; name.startsWith(<span class="string">&quot;java.&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span></span><br><span class="line">                (<span class="string">&quot;Prohibited package name: &quot;</span> +</span><br><span class="line">                 name.substring(<span class="number">0</span>, name.lastIndexOf(<span class="string">&#x27;.&#x27;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pd == <span class="literal">null</span>) &#123;</span><br><span class="line">            pd = defaultDomain;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (name != <span class="literal">null</span>) checkCerts(name, pd.getCodeSource());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pd;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这个方法 <code>preDefineClass</code> 的作用是在类被定义之前进行一些安全检查和准备工作，确保类的合法性与安全性。它通常用于自定义类加载器中，以增强类加载过程中的安全控制。</p></li><li class="lvl-2"><p>方法作用详解：</p><ul class="lvl-2"><li class="lvl-4">1.防止定义非法类名的类（如 java.* 包下的类）：<ul class="lvl-4"><li class="lvl-6">如果尝试加载的类属于 java. 开头的标准包（如 java.lang, java.util 等），会抛出 SecurityException。</li><li class="lvl-6">这是为了防止用户自定义类伪装成 Java 核心类库中的类，从而造成安全风险。</li></ul></li><li class="lvl-4">2.校验类名合法性：<ul class="lvl-4"><li class="lvl-6">调用 checkName(name) 检查类名是否合法（例如不能包含 /、非法字符等），若不合法则抛出 NoClassDefFoundError。</li></ul></li><li class="lvl-4">3.证书一致性校验（签名一致性校验）：<ul class="lvl-4"><li class="lvl-6">如果类有名称且提供了 ProtectionDomain，会调用 checkCerts(name, codeSource) 来确保当前类的签名与其所在包中其他类的签名一致。</li><li class="lvl-6">防止同一包中混入不同签名的类，避免潜在的恶意篡改。</li></ul></li><li class="lvl-4">4.设置默认保护域（ProtectionDomain）：<ul class="lvl-4"><li class="lvl-6">如果传入的 ProtectionDomain 为 null，则使用类加载器的默认域 defaultDomain。</li></ul></li></ul></li></ul><h2 id="Linking链接过程">Linking链接过程</h2><ul class="lvl-0"><li class="lvl-2"><p>在ClassLoader的<code>loadClass</code>⽅法中，还有⼀个不起眼的步骤，<code>resolveClass</code>。这是⼀个<code>native</code>⽅法。⽽其实现的过程称为<code>linking-链接</code>。</p></li><li class="lvl-2"><p>链接过程的实现功能如下图：<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/9vkhLN.png" alt="" width="900" height="500"></p></li><li class="lvl-2"><p>其中关于半初始化状态就是JDK在处理⼀个类的static静态属性时，会先给这个属性分配⼀个默认值，作⽤是占住内存。然后等连接过程完成后，在后⾯的初始化阶段，再将静态属性从默认值修改为指定的初始值。</p></li><li class="lvl-2"><p>符号引⽤和直接引⽤</p></li></ul><blockquote><p>如果A类中有⼀个静态属性，引⽤了另⼀个B类。那么在对类进⾏初始化的过程中，因为A和B这两个类都没有初始化，JVM并不知道A和B这两个类的具体地址。所以这时，在A类中，只能创建⼀个不知道具体地址的引⽤，指向B类。这个引⽤就称为符号引⽤。⽽当A类和B类都完成初始化后，JVM⾃然就需要将这个符号引⽤转⽽指向B类具体的内存地址，这个引⽤就称为直接引⽤。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>来看一个有意思的示例</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line">    <span class="comment">// 静态变量按声明顺序初始化</span></span><br><span class="line">    <span class="comment">// 构造方法初始化apple对象时，price还没有被初始化，处于链接过程中的准备阶段，即半初始化状态，所以price为默认值0.0</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Apple</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 解决方法是将price声明在apple的上面即可</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">20.00</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> totalpay;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Apple</span><span class="params">(<span class="type">double</span> discount)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====&quot;</span> + price);</span><br><span class="line">        totalpay = price - discount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriceTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Apple.apple.totalpay); <span class="comment">// -10.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这里有一个有意思的问题，就是只有当<code>loadClass</code>方法中的<code>resolve</code>参数为<code>true</code>时<code>resolveClass</code>方法才会被调用，但是大部分情况下，<code>resolve</code>参数都是<code>false</code>，这不是强制限制而是出于以下原因：</p><ul class="lvl-2"><li class="lvl-4"><ol><li class="lvl-7">避免递归解析中出现错误或死循环<br>在类的解析过程中，如果该类引用了另一个还没加载的类，立即解析可能会导致无限递归或加载顺序问题。通过延迟解析，可以更好地控制加载流程。</li></ol></li><li class="lvl-4"><ol start="2"><li class="lvl-7">提高加载效率<br>加载类可能不一定马上就用到所有方法、字段等符号引用，推迟解析可以提高性能，尤其在批量加载很多类时。</li></ol></li><li class="lvl-4"><ol start="3"><li class="lvl-7">更灵活地处理类的依赖<br>开发者可以先加载类，稍后根据需要再解析。例如，在自定义类加载器中，可能先判断类是否已经存在、是否需要被增强（比如字节码增强），再决定是否解析。</li></ol></li></ul></li></ul><h2 id="通过类加载器引⼊外部Jar包">通过类加载器引⼊外部Jar包</h2><ul class="lvl-0"><li class="lvl-2"><p>虽然通常我们会将依赖的 jar 包直接放入项目的 classpath 中（比如通过构建工具如 Maven 或 Gradle 管理），但在某些特定场景下，我们确实需要动态地通过 URLClassLoader 加载外部 jar 包，这是 Java 提供的一种更灵活的类加载机制。</p></li><li class="lvl-2"><p>以下是一些必须或推荐使用 URLClassLoader 的典型应用场景：</p></li></ul><h3 id="1-插件机制（Plugin-System）">1. 插件机制（Plugin System）</h3><ul class="lvl-0"><li class="lvl-2"><p>场景说明：<br>系统支持用户自定义插件（如 IDE 插件、浏览器扩展、游戏 mod），这些插件在运行时才加载，项目本身在编译期并不知道有哪些插件。</p></li><li class="lvl-2"><p>举例：<br>Eclipse 或 IntelliJ 的插件系统<br>Minecraft 的 mod 加载器<br>Spring Boot Devtools 重新加载机制</p></li><li class="lvl-2"><p>为什么不能直接放入 classpath？<br>因为插件是动态发现和加载的，不是编译时确定的。</p></li></ul><h3 id="2-热部署-动态加载类">2. 热部署 / 动态加载类</h3><ul class="lvl-0"><li class="lvl-2"><p>场景说明：<br>你想在应用运行过程中加载新的 jar 或类，比如热更新一个模块而无需重启服务。</p></li><li class="lvl-2"><p>举例：<br>Web 容器（如 Tomcat）的应用重新部署<br>使用 URLClassLoader 加载某个模块的新版本以实现热替换</p></li><li class="lvl-2"><p>为什么不能放入 classpath？<br>classpath 在启动时就固定了，不能动态添加；而 URLClassLoader 可以运行时加载新 jar。</p></li></ul><h3 id="3-多版本隔离">3. 多版本隔离</h3><ul class="lvl-0"><li class="lvl-2"><p>场景说明：<br>你希望不同的模块使用同一个库的不同版本，但 classpath 无法支持两个版本的同一个类。</p></li><li class="lvl-2"><p>举例：<br>一个服务器运行多个服务实例，它们分别依赖 log4j 的不同版本<br>一个系统的插件 A 使用 fastjson 1.x，插件 B 使用 fastjson 2.x</p></li><li class="lvl-2"><p>为什么不能放入 classpath？<br>classpath 是共享的，会发生类冲突。使用多个 URLClassLoader，可实现类隔离。</p></li></ul><h3 id="4-脚本或用户上传代码执行">4. 脚本或用户上传代码执行</h3><ul class="lvl-0"><li class="lvl-2"><p>场景说明：<br>系统允许用户上传 jar 或 class 文件，然后在服务端执行其中的类逻辑。</p></li><li class="lvl-2"><p>举例：<br>在线编程平台（如 LeetCode 后端）<br>用户上传算法 jar，平台运行并返回结果</p></li><li class="lvl-2"><p>为什么不能放入 classpath？<br>用户上传内容是动态的，系统在运行前无法预知。</p></li></ul><h3 id="5-实现类的延迟加载（节省资源）">5. 实现类的延迟加载（节省资源）</h3><ul class="lvl-0"><li class="lvl-2"><p>场景说明：<br>某些类/模块体积较大或依赖较多，不希望在程序启动时就加载，只有真正使用时再加载。</p></li><li class="lvl-2"><p>举例：<br>大型桌面应用（如 IntelliJ）在打开某个功能模块时才加载相应 jar</p></li></ul><h3 id="总结">总结</h3><table><thead><tr><th>场景</th><th>使用 <code>URLClassLoader</code> 的原因</th></tr></thead><tbody><tr><td>插件系统</td><td>插件动态加载，不在项目编译时可知</td></tr><tr><td>热部署</td><td>动态替换模块，无需重启</td></tr><tr><td>多版本共存</td><td>避免类冲突，实现类加载隔离</td></tr><tr><td>用户上传 jar</td><td>内容动态生成，classpath 无法预先配置</td></tr><tr><td>延迟加载模块</td><td>启动更快，节省内存</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>如果你是在做框架设计或需要动态扩展能力的场景，理解并使用 URLClassLoader 会非常有帮助。</p></li></ul><h3 id="场景假设">场景假设</h3><h4 id="调用外部jar">调用外部jar</h4><ul class="lvl-0"><li class="lvl-2"><p>我们有一个外部 jar 文件：hello-plugin.jar，它包含一个类：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个类编译后打包进 hello-plugin.jar</span></span><br><span class="line"><span class="keyword">package</span> com.example.plugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloPlugin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello from plugin! :&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>主程序使用 URLClassLoader 动态加载这个 jar</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PluginLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 外部 jar 的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">jarFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;plugins/hello-plugin.jar&quot;</span>);</span><br><span class="line">        <span class="type">URL</span> <span class="variable">jarUrl</span> <span class="operator">=</span> jarFile.toURI().toURL();</span><br><span class="line">        <span class="comment">// HTTPS jar 的 URL</span></span><br><span class="line">        <span class="comment">// URL jarUrl = new URL(&quot;https://your-domain.com/libs/hello-plugin.jar&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建 URLClassLoader（也可以设置父加载器）</span></span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;jarUrl&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载插件类</span></span><br><span class="line">        Class&lt;?&gt; clazz = classLoader.loadClass(<span class="string">&quot;com.example.plugin.HelloPlugin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建实例并调用方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">plugin</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">sayHello</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;sayHello&quot;</span>, String.class);</span><br><span class="line">        sayHello.invoke(plugin, <span class="string">&quot;World&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭 ClassLoader（Java 7+ 推荐）</span></span><br><span class="line">        classLoader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行时动态编译-Java-源代码">运行时动态编译 Java 源代码</h4><ul class="lvl-0"><li class="lvl-2"><p>我们有一个 java 代码片段：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.tools.JavaCompiler;</span><br><span class="line"><span class="keyword">import</span> javax.tools.ToolProvider;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicJavaRunner</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.example.dynamic.Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Java 源代码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sourceCode</span> <span class="operator">=</span></span><br><span class="line">                <span class="string">&quot;package com.example.dynamic;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;public class Hello &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    public void say() &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        System.out.println(\&quot;Hello from dynamic source!\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建临时目录</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">tempDir</span> <span class="operator">=</span> Files.createTempDirectory(<span class="string">&quot;dynamic-classes&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">outputDir</span> <span class="operator">=</span> tempDir.toFile();</span><br><span class="line">        <span class="comment">// System.out.println(&quot;临时目录：&quot; + outputDir.getAbsolutePath());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 .java 文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">javaFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(outputDir, <span class="string">&quot;com/example/dynamic/Hello.java&quot;</span>);</span><br><span class="line">        javaFile.getParentFile().mkdirs();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(javaFile)) &#123;</span><br><span class="line">            writer.write(sourceCode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译 Java 文件</span></span><br><span class="line">        <span class="type">JavaCompiler</span> <span class="variable">compiler</span> <span class="operator">=</span> ToolProvider.getSystemJavaCompiler();</span><br><span class="line">        <span class="keyword">if</span> (compiler == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;请用 JDK 而非 JRE 运行！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> compiler.run(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, javaFile.getPath());</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;编译失败！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载类并调用</span></span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;outputDir.toURI().toURL()&#125;);</span><br><span class="line">        Class&lt;?&gt; clazz = classLoader.loadClass(className);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">        method.invoke(instance);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清理（可选）</span></span><br><span class="line">        classLoader.close();</span><br><span class="line">        <span class="comment">// 删除临时目录</span></span><br><span class="line">        Files.walk(outputDir.toPath())</span><br><span class="line">                .sorted(Comparator.reverseOrder()) <span class="comment">// 先删文件，再删目录</span></span><br><span class="line">                .map(Path::toFile)</span><br><span class="line">                .forEach(File::delete);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>关键点说明</p></li></ul><table><thead><tr><th>机制</th><th>说明</th></tr></thead><tbody><tr><td><code>JavaCompiler</code></td><td>JDK 自带的编译器（<code>tools.jar</code>）</td></tr><tr><td><code>ToolProvider.getSystemJavaCompiler()</code></td><td>只能在 JDK 环境中工作，JRE 无法使用</td></tr><tr><td><code>URLClassLoader</code></td><td>用于加载编译后的 .class 文件</td></tr><tr><td><code>FileWriter</code></td><td>保存代码为临时 Java 文件</td></tr></tbody></table><h2 id="自定义类加载器">自定义类加载器</h2><ul class="lvl-0"><li class="lvl-2"><p>要自定义 ClassLoader，只需要继承于 <code>ClassLoader</code> 或者 <code>SecureClassLoader</code>，并重写 <code>findClass()</code> 方法即可</p></li><li class="lvl-2"><p>示例：我们对上面的代码进行升级，不创建临时文件，而是在内存中编译代码，并从内存中加载字节码，而不依赖磁盘文件，更高效也更适合生产环境中动态类加载（如在线代码执行、脚本引擎等）。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.tools.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InMemoryJavaRunner</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.example.dynamic.Hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sourceCode</span> <span class="operator">=</span></span><br><span class="line">                <span class="string">&quot;package com.example.dynamic;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;public class Hello &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    public void say() &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        System.out.println(\&quot;Hello from memory compiled class!\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取系统 Java 编译器</span></span><br><span class="line">        <span class="type">JavaCompiler</span> <span class="variable">compiler</span> <span class="operator">=</span> ToolProvider.getSystemJavaCompiler();</span><br><span class="line">        <span class="keyword">if</span> (compiler == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;请使用 JDK 运行此程序（非 JRE）&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备编译源代码：一个 JavaFileObject 表示源代码</span></span><br><span class="line">        <span class="type">JavaFileObject</span> <span class="variable">sourceFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaSourceFromString</span>(className, sourceCode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建自定义的内存文件管理器（替代标准的磁盘管理器）</span></span><br><span class="line">        <span class="type">StandardJavaFileManager</span> <span class="variable">standardFileManager</span> <span class="operator">=</span> compiler.getStandardFileManager(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">MemoryJavaFileManager</span> <span class="variable">fileManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemoryJavaFileManager</span>(standardFileManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行编译任务</span></span><br><span class="line">        JavaCompiler.<span class="type">CompilationTask</span> <span class="variable">task</span> <span class="operator">=</span> compiler.getTask(<span class="literal">null</span>, fileManager, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, Collections.singletonList(sourceFile));</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> task.call();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;编译失败！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载编译后的类</span></span><br><span class="line">        Map&lt;String, <span class="type">byte</span>[]&gt; classBytes = fileManager.getClassBytes();</span><br><span class="line">        <span class="type">InMemoryClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryClassLoader</span>(classBytes);</span><br><span class="line">        Class&lt;?&gt; clazz = classLoader.loadClass(className);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">        method.invoke(instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于表示内存中的 Java 源代码</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JavaSourceFromString</span> <span class="keyword">extends</span> <span class="title class_">SimpleJavaFileObject</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">        JavaSourceFromString(String className, String code) &#123;</span><br><span class="line">            <span class="built_in">super</span>(URI.create(<span class="string">&quot;string:///&quot;</span> + className.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + Kind.SOURCE.extension), Kind.SOURCE);</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> CharSequence <span class="title function_">getCharContent</span><span class="params">(<span class="type">boolean</span> ignoreEncodingErrors)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将编译的 class 文件保存在内存中（不是文件系统）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MemoryJavaFileManager</span> <span class="keyword">extends</span> <span class="title class_">ForwardingJavaFileManager</span>&lt;StandardJavaFileManager&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ByteArrayOutputStream&gt; classOutputBuffers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        MemoryJavaFileManager(StandardJavaFileManager standardManager) &#123;</span><br><span class="line">            <span class="built_in">super</span>(standardManager);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> JavaFileObject <span class="title function_">getJavaFileForOutput</span><span class="params">(Location location, String className,</span></span><br><span class="line"><span class="params">                                                   JavaFileObject.Kind kind, FileObject sibling)</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            classOutputBuffers.put(className, outputStream);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleJavaFileObject</span>(</span><br><span class="line">                    URI.create(<span class="string">&quot;mem:///&quot;</span> + className.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + kind.extension), kind) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> OutputStream <span class="title function_">openOutputStream</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> outputStream;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Map&lt;String, <span class="type">byte</span>[]&gt; getClassBytes() &#123;</span><br><span class="line">            Map&lt;String, <span class="type">byte</span>[]&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, ByteArrayOutputStream&gt; entry : classOutputBuffers.entrySet()) &#123;</span><br><span class="line">                result.put(entry.getKey(), entry.getValue().toByteArray());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义 ClassLoader，用于从内存中加载字节码</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InMemoryClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, <span class="type">byte</span>[]&gt; classBytes;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InMemoryClassLoader</span><span class="params">(Map&lt;String, <span class="type">byte</span>[]&gt; classBytes)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(ClassLoader.getSystemClassLoader());</span><br><span class="line">            <span class="built_in">this</span>.classBytes = classBytes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="comment">// 从内存中获取字节码</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = classBytes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (bytes == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 定义类并返回，一定要使用 defineClass 方法</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>进一步升级：我们现在将这个系统扩展为支持多个类同时动态编译、内存加载并执行。这对于需要处理多个类（例如接口 + 实现、内部依赖等）非常实用。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.tools.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiClassInMemoryCompiler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 准备多个类的源代码</span></span><br><span class="line">        Map&lt;String, String&gt; sources = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        sources.put(<span class="string">&quot;com.example.api.Greeter&quot;</span>,</span><br><span class="line">                <span class="string">&quot;package com.example.api;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;public interface Greeter &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    void greet();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        sources.put(<span class="string">&quot;com.example.impl.EnglishGreeter&quot;</span>,</span><br><span class="line">                <span class="string">&quot;package com.example.impl;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;import com.example.api.Greeter;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;public class EnglishGreeter implements Greeter &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    public void greet() &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        System.out.println(\&quot;Hello from EnglishGreeter!\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">entryClassName</span> <span class="operator">=</span> <span class="string">&quot;com.example.impl.EnglishGreeter&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译</span></span><br><span class="line">        Map&lt;String, <span class="type">byte</span>[]&gt; compiledClasses = compile(sources);</span><br><span class="line">        <span class="keyword">if</span> (compiledClasses == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;编译失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载并执行</span></span><br><span class="line">        <span class="type">InMemoryClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryClassLoader</span>(compiledClasses);</span><br><span class="line">        Class&lt;?&gt; clazz = classLoader.loadClass(entryClassName);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;greet&quot;</span>);</span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译器入口，支持多个类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, <span class="type">byte</span>[]&gt; compile(Map&lt;String, String&gt; sources) &#123;</span><br><span class="line">        <span class="type">JavaCompiler</span> <span class="variable">compiler</span> <span class="operator">=</span> ToolProvider.getSystemJavaCompiler();</span><br><span class="line">        <span class="keyword">if</span> (compiler == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;请使用 JDK 运行&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;JavaFileObject&gt; compilationUnits = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : sources.entrySet()) &#123;</span><br><span class="line">            compilationUnits.add(<span class="keyword">new</span> <span class="title class_">JavaSourceFromString</span>(entry.getKey(), entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StandardJavaFileManager</span> <span class="variable">stdManager</span> <span class="operator">=</span> compiler.getStandardFileManager(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">MemoryJavaFileManager</span> <span class="variable">memManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemoryJavaFileManager</span>(stdManager);</span><br><span class="line"></span><br><span class="line">        JavaCompiler.<span class="type">CompilationTask</span> <span class="variable">task</span> <span class="operator">=</span> compiler.getTask(<span class="literal">null</span>, memManager, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, compilationUnits);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> task.call();</span><br><span class="line">        <span class="keyword">return</span> success ? memManager.getClassBytes() : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 源文件表示（Java 代码以字符串提供）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JavaSourceFromString</span> <span class="keyword">extends</span> <span class="title class_">SimpleJavaFileObject</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">        JavaSourceFromString(String className, String code) &#123;</span><br><span class="line">            <span class="built_in">super</span>(URI.create(<span class="string">&quot;string:///&quot;</span> + className.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + Kind.SOURCE.extension), Kind.SOURCE);</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> CharSequence <span class="title function_">getCharContent</span><span class="params">(<span class="type">boolean</span> ignoreEncodingErrors)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存中的编译输出管理器</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MemoryJavaFileManager</span> <span class="keyword">extends</span> <span class="title class_">ForwardingJavaFileManager</span>&lt;StandardJavaFileManager&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ByteArrayOutputStream&gt; classOutputBuffers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        MemoryJavaFileManager(StandardJavaFileManager standardManager) &#123;</span><br><span class="line">            <span class="built_in">super</span>(standardManager);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> JavaFileObject <span class="title function_">getJavaFileForOutput</span><span class="params">(Location location, String className,</span></span><br><span class="line"><span class="params">                                                   JavaFileObject.Kind kind, FileObject sibling)</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            classOutputBuffers.put(className, outputStream);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleJavaFileObject</span>(</span><br><span class="line">                    URI.create(<span class="string">&quot;mem:///&quot;</span> + className.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + kind.extension), kind) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> OutputStream <span class="title function_">openOutputStream</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> outputStream;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Map&lt;String, <span class="type">byte</span>[]&gt; getClassBytes() &#123;</span><br><span class="line">            Map&lt;String, <span class="type">byte</span>[]&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, ByteArrayOutputStream&gt; entry : classOutputBuffers.entrySet()) &#123;</span><br><span class="line">                result.put(entry.getKey(), entry.getValue().toByteArray());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于加载内存中的 class</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InMemoryClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, <span class="type">byte</span>[]&gt; classBytes;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InMemoryClassLoader</span><span class="params">(Map&lt;String, <span class="type">byte</span>[]&gt; classBytes)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(ClassLoader.getSystemClassLoader());</span><br><span class="line">            <span class="built_in">this</span>.classBytes = classBytes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = classBytes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (bytes == <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打破双亲委派，实现同类多版本共存">打破双亲委派，实现同类多版本共存</h2><ul class="lvl-0"><li class="lvl-2"><p>假设我们有同一个jar包的不同版本，比如：<code>a-1.0.jar</code>和<code>a-2.0.jar</code>，他们具有同名的 <code>DemoClass</code>类 ,系统<code>classpath</code>中引入的是 <code>a-1.0.jar</code>，而此时我们通过⾃定的ClassLoader加载 <code>a-2.0.jar</code>，并调用 <code>DemoClass</code>类 ，我们会发现，⾃定的ClassLoader加载的类依旧是 <code>a-1.0.jar</code> 中的类，而不是 <code>a-2.0.jar</code> 中的类。</p></li><li class="lvl-2"><p>为什么会出现这种情况呢？这就是因为JDK的双亲委派机制。⾃定的ClassLoader的<code>parent</code>属性指向的是JDK内的<code>AppClassLoader</code>，⽽ <code>AppClassLoader</code> 会加载系统当中的所有代码，就包括 <code>a-1.0.jar</code>中的 <code>DemoClass</code>类。这时，⾃定的ClassLoader去加载 <code>DemoClass</code>类时，通过双亲委派向上查找，⾃然加载出来的就是APPClassloader中的<code>DemoClass</code>了。</p></li><li class="lvl-2"><p>如何打破双亲委派呢？我们可以通过重写 <code>loadClass()</code>方法，来打破双亲委派，实现类⽂件的加载。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomClassLoader</span> <span class="keyword">extends</span> <span class="title class_">SecureClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> URL jarUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomClassLoader</span><span class="params">(URL jarUrl)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个独立的子类加载器，只加载指定 JAR</span></span><br><span class="line">        <span class="built_in">this</span>.jarUrl = jarUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 把双亲委派机制反过来，先到⼦类加载器中加载，加载不到再去⽗类加载器中加载。</span></span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// 如果类已加载，则直接返回</span></span><br><span class="line">            Class&lt;?&gt; loadedClass = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (loadedClass == <span class="literal">null</span>) &#123;</span><br><span class="line">                loadedClass = findClass(name);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 委派给父类加载器</span></span><br><span class="line">                loadedClass = <span class="built_in">super</span>.loadClass(name, resolve);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> loadedClass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) &#123;</span><br><span class="line">        <span class="type">int</span> code;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 访问jar包的url</span></span><br><span class="line">            <span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> jarUrl.openConnection();</span><br><span class="line">            urlConnection.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="keyword">while</span> ((code = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(code);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] data = bos.toByteArray();</span><br><span class="line">            is.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, data, <span class="number">0</span>, data.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>测试代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">jarFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path/to/a-2.0.jar&quot;</span>);</span><br><span class="line">        <span class="type">URL</span> <span class="variable">jarUrl</span> <span class="operator">=</span> jarFile.toURI().toURL();</span><br><span class="line"></span><br><span class="line">        <span class="type">CustomClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomClassLoader</span>(jarUrl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载 DemoClass</span></span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(<span class="string">&quot;com.example.DemoClass&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;print&quot;</span>).invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打破双亲委派机制的典型场景">打破双亲委派机制的典型场景</h3><h4 id="Tomcat类加载器">Tomcat类加载器</h4><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/eGKhDn.png" alt="" width="550" height="700"></p><ul class="lvl-0"><li class="lvl-2"><p>CommonClassLoader：Tomcat最基本的类加载器，加载路径中的class可以被Tomcat容器本身以及各个Webapp访问；</p></li><li class="lvl-2"><p>CatalinaClassLoader：Tomcat容器私有的类加载器，加载路径中的class对于Webapp不可⻅；</p></li><li class="lvl-2"><p>SharedClassLoader：各个Webapp共享的类加载器，加载路径中的class对于所有Webapp可⻅，但是对于Tomcat容器不可⻅；</p></li><li class="lvl-2"><p>WebappClassLoader：各个Webapp私有的类加载器，加载路径中的class只对当前Webapp可⻅，⽐如加载war包⾥相关的类，每个war包应⽤都有⾃⼰的WebappClassLoader，实现相互隔离，⽐如不同war包应⽤引⼊了不同的spring版本，这样实现就能加载各⾃的spring版本；</p></li><li class="lvl-2"><p>Jsp类加载器：针对每个JSP⻚⾯创建⼀个加载器。这个加载器⽐较轻量级，所以Tomcat还实现了热加载，也就是JSP只要修改了，就创建⼀个新的加载器，从⽽实现了JSP⻚⾯的热更新。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍JVM的类加载器&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se8/html/index.html&quot;&gt;JDK8 The Java® Virtual Machine Specification&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html&quot;&gt;JDK8的java指令的官⽅⽂档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/index.html&quot;&gt;JDK⼯具官⽹⽂档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html&quot;&gt;JDK17的java指令的官⽅⽂档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="jvm" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/jvm/"/>
    
    
    <category term="jvm" scheme="https://blog.hanqunfeng.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 的 REST APIs:聚合查询</title>
    <link href="https://blog.hanqunfeng.com/2025/04/22/elasticsearch-06-api-aggs/"/>
    <id>https://blog.hanqunfeng.com/2025/04/22/elasticsearch-06-api-aggs/</id>
    <published>2025-04-22T13:30:05.000Z</published>
    <updated>2025-04-24T02:53:13.488Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 Elasticsearch 的 REST APIs：聚合查询</p></li><li class="lvl-2"><p>Elasticsearch版本8.17.3</p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/rest-apis.html">官方文档:REST APIs</a></p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/search-aggregations.html">官方文档:Aggregations</a></p></li><li class="lvl-2"><a href="/2025/04/17/elasticsearch-05-api/" title="Elasticsearch 的 REST APIs">Elasticsearch 的 REST APIs</a></li></ul><span id="more"></span><h2 id="聚合查询">聚合查询</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">聚合查询</a>，可以让我们极其方便的实现对索引数据的统计、分析、运算等操作。</p></li><li class="lvl-2"><p>基本语法包括以下部分：</p><ul class="lvl-2"><li class="lvl-4">查询条件：指定需要聚合的文档，可以使用标准的 Elasticsearch 查询语法，如 term、match、range 等等。</li><li class="lvl-4">聚合函数：指定要执行的聚合操作，如 sum、avg、min、max、terms、date_histogram 等等。每个聚合命令都会生成一个聚合结果。</li><li class="lvl-4">聚合嵌套：聚合命令可以嵌套，以便更细粒度地分析数据。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET &lt;index_name&gt;/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;&lt;aggs_name&gt;&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;&lt;agg_type&gt;&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;&lt;field_name&gt;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 说明</span></span><br><span class="line">  <span class="comment"># aggs：聚合的根节点，固定写法</span></span><br><span class="line">  <span class="comment"># aggs_name：聚合函数的名称，自己随意定义</span></span><br><span class="line">  <span class="comment"># agg_type：聚合种类，比如是桶聚合（terms）或者是指标聚合（avg、sum、min、max等）</span></span><br><span class="line">  <span class="comment"># field_name：字段名称或者叫域名。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>聚合的分类</p><ul class="lvl-2"><li class="lvl-4">Metric Aggregation：—些数学运算，可以对文档字段进行统计分析，类比Mysql中的 min(), max(), sum() 操作。</li><li class="lvl-4">Bucket Aggregation：一些满足特定条件的文档的集合放置到一个桶里，每一个桶关联一个key，类比Mysql中的group by操作。</li><li class="lvl-4">Pipeline Aggregation：对其他的聚合结果进行二次聚合</li></ul></li></ul><h2 id="示例数据准备">示例数据准备</h2><ul class="lvl-0"><li class="lvl-2"><p>我们需要先准备一些数据，才能进行聚合分析。</p></li><li class="lvl-2"><p>创建索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果存在先删除</span></span><br><span class="line">curl -X DELETE -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;settings&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;number_of_shards&quot;:&quot;1&quot;,</span></span><br><span class="line"><span class="string">      &quot;number_of_replicas&quot;:&quot;2&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;mappings&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;properties&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;category&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;keyword&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;price&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;double&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;count&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;integer&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;title&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;text&quot;,</span></span><br><span class="line"><span class="string">          &quot;analyzer&quot;:&quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">          &quot;search_analyzer&quot;:&quot;ik_smart&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;remark&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;:&quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;:&quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;search_analyzer&quot;:&quot;ik_smart&quot;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;address&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;fields&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;keyword&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;tags&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;created_at&quot;: &#123;&quot;type&quot;: &quot;date&quot;, &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;&#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;1&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;electronics&quot;, &quot;price&quot;: 999.99, &quot;count&quot;: 10, &quot;title&quot;: &quot;Smartphone X - 128GB&quot;, &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;, &quot;address&quot;: &quot;广州天河公园&quot;, &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;], &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;2&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;fashion&quot;, &quot;price&quot;: 49.99, &quot;count&quot;: 25, &quot;title&quot;: &quot;Designer T-shirt&quot;, &quot;remark&quot;: &quot;Trendy designer T-shirt made with high quality fabric.&quot;, &quot;address&quot;: &quot;广州荔湾大厦&quot;, &quot;tags&quot;: [&quot;clothing&quot;, &quot;designer&quot;, &quot;style&quot;], &quot;created_at&quot;: &quot;2025-04-21 12:15:00&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;3&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;home_appliances&quot;, &quot;price&quot;: 299.99, &quot;count&quot;: 5, &quot;title&quot;: &quot;Robot Vacuum Cleaner&quot;, &quot;remark&quot;: &quot;Efficient robot vacuum cleaner with smart navigation.&quot;, &quot;address&quot;: &quot;广州白云山公园&quot;, &quot;tags&quot;: [&quot;appliances&quot;, &quot;vacuum&quot;, &quot;robot&quot;], &quot;created_at&quot;: &quot;2025-04-20 08:45:30&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;4&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;books&quot;, &quot;price&quot;: 19.99, &quot;count&quot;: 100, &quot;title&quot;: &quot;Inspirational Novel&quot;, &quot;remark&quot;: &quot;A gripping novel that inspires and motivates.&quot;, &quot;address&quot;: &quot;321 Book Rd, Shenzhen, China&quot;, &quot;tags&quot;: [&quot;book&quot;, &quot;novel&quot;, &quot;inspiration&quot;], &quot;created_at&quot;: &quot;2025-04-19 10:05:00&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;5&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;groceries&quot;, &quot;price&quot;: 3.99, &quot;count&quot;: 200, &quot;title&quot;: &quot;Organic Apples&quot;, &quot;remark&quot;: &quot;Fresh and crispy organic apples.&quot;, &quot;address&quot;: &quot;654 Grocery Ln, Chengdu, China&quot;, &quot;tags&quot;: [&quot;fruit&quot;, &quot;organic&quot;, &quot;healthy&quot;], &quot;created_at&quot;: &quot;2025-04-18 14:30:45&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;6&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;electronics&quot;, &quot;price&quot;: 1999.99, &quot;count&quot;: 15, &quot;title&quot;: &quot;Smartphone X - 256GB&quot;, &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;, &quot;address&quot;: &quot;广州天河公园&quot;, &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;], &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot; &#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Metric-Aggregation-指标聚合">Metric Aggregation(指标聚合)</h2><h3 id="单值分析︰只输出一个分析结果">单值分析︰只输出一个分析结果</h3><ul class="lvl-0"><li class="lvl-2"><p>min, max, avg, sum</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最大值、最小值、平均值、总和</span></span><br><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,  <span class="comment"># 不返回文档，只返回聚合结果</span></span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max_price&quot;</span>: &#123; <span class="comment"># 自定义名称，这里返回最大值</span></span><br><span class="line">      <span class="string">&quot;max&quot;</span>: &#123;     <span class="comment"># 指标聚合函数名称</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span> <span class="comment"># 指标聚合字段</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;min_price&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;min&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;sum_price&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;sum&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Cardinality（类似distinct Count)</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0, <span class="comment"># 不返回文档，只返回聚合结果</span></span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;cardinality_count&quot;</span>: &#123; <span class="comment"># 自定义名称，返回去重后的数量</span></span><br><span class="line">      <span class="string">&quot;cardinality&quot;</span>: &#123;  <span class="comment"># 指标聚合函数名称，cardinality表示去重</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span> <span class="comment"># 指标聚合字段，去重的字段</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多值分析-输出多个分析结果">多值分析:输出多个分析结果</h3><ul class="lvl-0"><li class="lvl-2"><p>stats（统计）, extended stats</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;stats_price&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;stats&quot;</span>: &#123; <span class="comment"># 指标聚合函数名称，stats表示统计，会返回多个指标</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span>: 15,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: 12,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: []     <span class="comment"># 因为设置size 为 0，所以返回的结果为空</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;aggregations&quot;</span>: &#123; <span class="comment"># 聚合结果</span></span><br><span class="line">    <span class="string">&quot;stats_price&quot;</span>: &#123; <span class="comment"># 自定义名称，返回多组聚合结果</span></span><br><span class="line">      <span class="string">&quot;count&quot;</span>: 12,</span><br><span class="line">      <span class="string">&quot;min&quot;</span>: 3.99,</span><br><span class="line">      <span class="string">&quot;max&quot;</span>: 1999.99,</span><br><span class="line">      <span class="string">&quot;avg&quot;</span>: 562.1666666666666,</span><br><span class="line">      <span class="string">&quot;sum&quot;</span>: 6746</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>percentile （百分位）, percentile rank</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;percentile_price&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;percentiles&quot;</span>: &#123; <span class="comment"># 指标聚合函数名称，percentiles表示百分位数聚合计算</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span>, <span class="comment"># 指标聚合字段</span></span><br><span class="line">        <span class="string">&quot;percents&quot;</span>: [1, 5, 25, 50, 75, 95, 99] <span class="comment"># 需要计算百分位数的数组</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 百分位数是一个统计学概念，用于描述一个给定集合的排序值。例如：</span></span><br><span class="line"><span class="comment"># 第 1 百分位数表示数据中小于这个值的所有数据占总数的 1%。</span></span><br><span class="line"><span class="comment"># 第 50 百分位数（中位数）表示数据中的一半小于这个值，另一半大于这个值。</span></span><br><span class="line"><span class="comment"># 第 99 百分位数表示数据中小于这个值的所有数据占总数的 99%。</span></span><br><span class="line"><span class="comment"># 通过计算这些百分位数，你可以了解 price 字段在整个shopping索引中的分布情况，从而可以用于数据分析、趋势判断等。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>top hits(排在前面的示例)</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;top_hits&quot;</span>: &#123; <span class="comment"># 自定义名称，返回排在前面的示例</span></span><br><span class="line">      <span class="string">&quot;top_hits&quot;</span>: &#123; <span class="comment"># 指标聚合函数名称，top_hits表示返回排在前面的示例</span></span><br><span class="line">        <span class="string">&quot;sort&quot;</span>: [&#123;<span class="string">&quot;price&quot;</span>: &#123;<span class="string">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span>&#125;&#125;], <span class="comment"># 排序，按照price字段降序排序</span></span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 3 <span class="comment"># 只返回前3个</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bucket-Aggregation-桶聚合">Bucket Aggregation(桶聚合)</h2><ul class="lvl-0"><li class="lvl-2"><p>按照一定的规则，将文档分配到不同的桶中，从而达到分类的目的。</p></li><li class="lvl-2"><p>ES提供的一些常见的 Bucket Aggregation。</p><ul class="lvl-2"><li class="lvl-4">terms（词条）, range（范围）, date_range（日期范围）, ip_range（IP范围）, missing（缺失）, histogram（直方图）, date_histogram（日期直方图）, geo_distance（地理距离）, significant_terms（重要词条）, composite（组合）</li></ul></li><li class="lvl-2"><p>桶聚合可以用于各种场景，例如：</p><ul class="lvl-2"><li class="lvl-4">对数据进行分组统计，比如按照地区、年龄段、性别等字段进行分组统计。</li><li class="lvl-4">对时间序列数据进行时间段分析，比如按照每小时、每天、每月、每季度、每年等时间段进行分析。</li><li class="lvl-4">对各种标签信息分类，并统计其数量。</li></ul></li></ul><h3 id="terms（词条）">terms（词条）</h3><ul class="lvl-0"><li class="lvl-2"><p>按照字段的值进行分组，并统计每个组的数量。</p></li><li class="lvl-2"><p>示例：按照category字段进行分组，并统计每个组的数量。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_count&quot;</span>: &#123; <span class="comment"># 自定义名称，返回每个组的数量</span></span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123; <span class="comment"># 桶聚合函数名称，terms表示按照字段的值进行分组</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span>, <span class="comment"># 按照category字段进行分组，注意不能是text类型，否则会报错</span></span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 10, <span class="comment"># 只返回前10个，默认是10</span></span><br><span class="line">        <span class="string">&quot;order&quot;</span>: &#123;<span class="string">&quot;_count&quot;</span>: <span class="string">&quot;desc&quot;</span>&#125; <span class="comment"># 按照数量降序排序，默认是desc，Bucket聚合会统计Bucket内的文档数量，记为_count，并且按照_count降序排序</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span>: 15,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: 12,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_count&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;doc_count_error_upper_bound&quot;</span>: 0,  <span class="comment"># 错误上界，表示在聚合过程中可能存在一些错误，但错误数量不会超过这个值</span></span><br><span class="line">      <span class="string">&quot;sum_other_doc_count&quot;</span>: 0,         <span class="comment"># 表示在聚合过程中，除了返回的10个bucket，还有其他数量，这个数量就是sum_other_doc_count</span></span><br><span class="line">      <span class="string">&quot;buckets&quot;</span>: [                     <span class="comment"># 返回的bucket</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;electronics&quot;</span>,          <span class="comment"># 分组的key</span></span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 4                 <span class="comment"># 分组的数量</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;books&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;fashion&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;groceries&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;home_appliances&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 2</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>限定聚合范围</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;gte&quot;</span>: 100 <span class="comment"># 限定价格范围</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_count&quot;</span>: &#123; <span class="comment"># 自定义名称，返回每个组的数量</span></span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123; <span class="comment"># 桶聚合函数名称，terms表示按照字段的值进行分组</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span>, <span class="comment"># 按照category字段进行分组</span></span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 10, <span class="comment"># 只返回前10个，默认是10</span></span><br><span class="line">        <span class="string">&quot;order&quot;</span>: &#123;<span class="string">&quot;_count&quot;</span>: <span class="string">&quot;desc&quot;</span>&#125; <span class="comment"># 按照数量降序排序，默认是desc，Bucket聚合会统计Bucket内的文档数量，记为_count，并且按照_count降序排序</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="range（范围）">range（范围）</h3><ul class="lvl-0"><li class="lvl-2"><p>按照字段的值进行分组，并统计每个组的数量。</p></li><li class="lvl-2"><p>示例：按照价格范围进行分组，并统计每个组的数量。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_range&quot;</span>: &#123; <span class="comment"># 自定义名称，返回每个组的数量</span></span><br><span class="line">      <span class="string">&quot;range&quot;</span>: &#123; <span class="comment"># 桶聚合函数名称，range表示按照字段的值进行分组</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span>, <span class="comment"># 按照price字段进行分组</span></span><br><span class="line">        <span class="string">&quot;ranges&quot;</span>: [</span><br><span class="line">          &#123;<span class="string">&quot;to&quot;</span>: 100&#125;, <span class="comment"># 小于100</span></span><br><span class="line">          &#123;<span class="string">&quot;from&quot;</span>: 100, <span class="string">&quot;to&quot;</span>: 200&#125;, <span class="comment"># 100-200，包括100，不包括200</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;key&quot;</span>:<span class="string">&quot;&gt;=200&quot;</span>, <span class="comment"># 设定键值，用于区分不同范围</span></span><br><span class="line">            <span class="string">&quot;from&quot;</span>:200 <span class="comment"># 大于等于200</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span>: 5,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: 12,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;buckets&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;*-100.0&quot;</span>,</span><br><span class="line">          <span class="string">&quot;to&quot;</span>: 100,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 6</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;100.0-200.0&quot;</span>,</span><br><span class="line">          <span class="string">&quot;from&quot;</span>: 100,</span><br><span class="line">          <span class="string">&quot;to&quot;</span>: 200,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;&gt;=200&quot;</span>,</span><br><span class="line">          <span class="string">&quot;from&quot;</span>: 200,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 6</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="date-range（日期范围）">date_range（日期范围）</h3><ul class="lvl-0"><li class="lvl-2"><p>按照字段的值进行分组，并统计每个组的数量。</p></li><li class="lvl-2"><p>示例：按照日期范围进行分组，并统计每个组的数量。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;date_range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;date_range&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;created_at&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ranges&quot;</span>: [</span><br><span class="line">          &#123;<span class="string">&quot;to&quot;</span>: <span class="string">&quot;now-3d&quot;</span>&#125;, <span class="comment"># 小于当前时间减去3天</span></span><br><span class="line">          &#123;<span class="string">&quot;from&quot;</span>: <span class="string">&quot;now-3d&quot;</span>,<span class="string">&quot;to&quot;</span>: <span class="string">&quot;now-1d&quot;</span>&#125;, <span class="comment"># 大于当前时间减去3天（包含），小于当前时间减去1天</span></span><br><span class="line">          &#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;now-1d&quot;</span>,<span class="string">&quot;from&quot;</span>: <span class="string">&quot;now-1d&quot;</span>&#125; <span class="comment"># 大于当前时间减去1天（包含），并设置键值</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span>: 3,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: 12,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;date_range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;buckets&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;*-2025-04-20 03:14:17&quot;</span>,</span><br><span class="line">          <span class="string">&quot;to&quot;</span>: 1745118857610,</span><br><span class="line">          <span class="string">&quot;to_as_string&quot;</span>: <span class="string">&quot;2025-04-20 03:14:17&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 4</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;2025-04-20 03:14:17-2025-04-22 03:14:17&quot;</span>,</span><br><span class="line">          <span class="string">&quot;from&quot;</span>: 1745118857610,</span><br><span class="line">          <span class="string">&quot;from_as_string&quot;</span>: <span class="string">&quot;2025-04-20 03:14:17&quot;</span>,</span><br><span class="line">          <span class="string">&quot;to&quot;</span>: 1745291657610,</span><br><span class="line">          <span class="string">&quot;to_as_string&quot;</span>: <span class="string">&quot;2025-04-22 03:14:17&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 4</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="string">&quot;now-1d&quot;</span>,</span><br><span class="line">          <span class="string">&quot;from&quot;</span>: 1745291657610,</span><br><span class="line">          <span class="string">&quot;from_as_string&quot;</span>: <span class="string">&quot;2025-04-22 03:14:17&quot;</span>,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 4</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期格式</span></span><br><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;date_range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;date_range&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;created_at&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ranges&quot;</span>: [</span><br><span class="line">          &#123;<span class="string">&quot;to&quot;</span>: <span class="string">&quot;2025-04-20 00:00:00&quot;</span>&#125;, <span class="comment"># 注意这里的格式必须与字段格式一致</span></span><br><span class="line">          &#123;<span class="string">&quot;from&quot;</span>: <span class="string">&quot;2025-04-20 00:00:00&quot;</span>,<span class="string">&quot;to&quot;</span>: <span class="string">&quot;2025-04-22 00:00:00&quot;</span>&#125;,</span><br><span class="line">          &#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;2025-04-22 00:00:00&quot;</span>,<span class="string">&quot;from&quot;</span>: <span class="string">&quot;2025-04-22 00:00:00&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="histogram（直方图）">histogram（直方图）</h3><ul class="lvl-0"><li class="lvl-2"><p>按照间隔进行分组，并统计每个组的数量。</p></li><li class="lvl-2"><p>示例：按照价格的间隔进行分组，并统计每个组的数量。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_histogram&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;histogram&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span>,</span><br><span class="line">        <span class="string">&quot;interval&quot;</span>: 500, <span class="comment"># 间隔500</span></span><br><span class="line">        <span class="string">&quot;extended_bounds&quot;</span>:&#123; <span class="comment"># 设置边界</span></span><br><span class="line">          <span class="string">&quot;min&quot;</span>:0, <span class="comment"># 最小值0</span></span><br><span class="line">          <span class="string">&quot;max&quot;</span>:2000 <span class="comment"># 最大值2000</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span>: 2,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: 12,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span>: null,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_histogram&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;buckets&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: 0,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 8</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: 500,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: 1000,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: 1500,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: 2000,</span><br><span class="line">          <span class="string">&quot;doc_count&quot;</span>: 0</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="top-hits（分桶取前N条）">top_hits（分桶取前N条）</h3><ul class="lvl-0"><li class="lvl-2"><p>按照字段的值进行分组，并返回每个组的前N条数据。</p></li><li class="lvl-2"><p>示例：按照category进行分组，并返回每个组的前3条数据。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_top_hits&quot;</span>: &#123; <span class="comment"># 自定义名称</span></span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span>  <span class="comment"># 按照category字段进行分组</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;top_hits&quot;</span>: &#123; <span class="comment"># 自定义名称</span></span><br><span class="line">          <span class="string">&quot;top_hits&quot;</span>: &#123; <span class="comment"># 返回每个组的前3条数据</span></span><br><span class="line">            <span class="string">&quot;size&quot;</span>: 3, <span class="comment"># 返回前3条数据</span></span><br><span class="line">            <span class="string">&quot;sort&quot;</span>: &#123; <span class="comment"># 按照created_at字段进行排序</span></span><br><span class="line">              <span class="string">&quot;created_at&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span> <span class="comment"># 降序</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子聚合">子聚合</h3><ul class="lvl-0"><li class="lvl-2"><p>子聚合：在聚合函数中，还可以再定义一个聚合函数。</p></li><li class="lvl-2"><p>示例：按照category进行分组，并统计价格信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_buckets&quot;</span>: &#123; <span class="comment"># 自定义名称</span></span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span>  <span class="comment"># 按照category字段进行分组</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123; <span class="comment"># 定义子聚合</span></span><br><span class="line">        <span class="string">&quot;price_stats&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;stats&quot;</span>: &#123; <span class="comment"># 统计价格信息</span></span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多层嵌套</span></span><br><span class="line"><span class="comment"># 先按照category进行分组，再按照address进行分组，并统计价格信息</span></span><br><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>:0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;category_buckets&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>:<span class="string">&quot;category&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;address_buckets&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;terms&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>:<span class="string">&quot;address.keyword&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;price_stats&quot;</span>:&#123;</span><br><span class="line">              <span class="string">&quot;stats&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;field&quot;</span>:<span class="string">&quot;price&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pipeline-Aggregation-管道聚合">Pipeline Aggregation(管道聚合)</h2><ul class="lvl-0"><li class="lvl-2"><p>支持对聚合分析的结果，再次进行聚合分析。</p></li><li class="lvl-2"><p>Pipeline 的分析结果会输出到原结果中，根据位置的不同，分为两类：</p><ul class="lvl-2"><li class="lvl-4">Sibling - 结果和现有分析结果同级<ul class="lvl-4"><li class="lvl-6">Max，min，Avg &amp; Sum Bucket</li><li class="lvl-6">Stats，Extended Status Bucket</li><li class="lvl-6">Percentiles Bucket</li></ul></li><li class="lvl-4">Parent -结果内嵌到现有的聚合分析结果之中<ul class="lvl-4"><li class="lvl-6">Derivative(求导)</li><li class="lvl-6">Cumultive Sum(累计求和)</li><li class="lvl-6">Moving Function(移动平均值)</li></ul></li></ul></li></ul><h3 id="Max，min，Avg-Sum-Bucket">Max，min，Avg &amp; Sum Bucket</h3><ul class="lvl-0"><li class="lvl-2"><p>Max，min，Avg &amp; Sum Bucket：对聚合分析的结果进行最大值、最小值、平均值、求和等操作。</p></li><li class="lvl-2"><p>示例：按照category进行分组求出商品的平均价格，并找出平均价格最低的分组</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>:0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;category_buckets&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>:<span class="string">&quot;category&quot;</span> <span class="comment"># 按照category字段进行分组</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;price_avg&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;avg&quot;</span>:&#123; <span class="comment"># 求价格平均值</span></span><br><span class="line">            <span class="string">&quot;field&quot;</span>:<span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;min_price_in_category&quot;</span>:&#123; <span class="comment"># 找出平均价格最低的分组</span></span><br><span class="line">      <span class="string">&quot;min_bucket&quot;</span>:&#123; <span class="comment"># 对聚合结果进行最小值操作</span></span><br><span class="line">        <span class="string">&quot;buckets_path&quot;</span>:<span class="string">&quot;category_buckets&gt;price_avg&quot;</span> <span class="comment"># 指定路径，对category_buckets聚合结果中的price_avg字段进行最小值操作</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stats，Extended-Status-Bucket">Stats，Extended Status Bucket</h3><ul class="lvl-0"><li class="lvl-2"><p>Stats，Extended Status Bucket：对聚合分析的结果进行统计操作，包括最大值、最小值、平均值、求和、数量等。</p></li><li class="lvl-2"><p>示例：按照category进行分组求出商品的平均价格，并对分组结果进行统计操作</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_buckets&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 10 <span class="comment"># 指定分组数量</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;stats_price_by_job&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;stats_bucket&quot;</span>: &#123; <span class="comment"># 对聚合结果进行统计操作</span></span><br><span class="line">        <span class="string">&quot;buckets_path&quot;</span>: <span class="string">&quot;category_buckets&gt;avg_price&quot;</span> <span class="comment"># 指定路径，对category_buckets聚合结果中的avg_price字段进行统计操作</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Percentiles-Bucket">Percentiles Bucket</h3><ul class="lvl-0"><li class="lvl-2"><p>Percentiles Bucket：对聚合分析的结果进行百分比操作，包括百分比、中位数等。</p></li><li class="lvl-2"><p>示例：按照category进行分组求出商品的平均价格，并对分组结果进行百分比操作</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;category_buckets&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 10</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;percentiles_price_by_category&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;percentiles_bucket&quot;</span>: &#123; <span class="comment"># 对聚合结果进行统计操作</span></span><br><span class="line">        <span class="string">&quot;buckets_path&quot;</span>: <span class="string">&quot;category_buckets&gt;avg_price&quot;</span> <span class="comment"># 指定路径，对category_buckets聚合结果中的avg_price字段进行统计操作</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cumulative-Sum">Cumulative Sum</h3><ul class="lvl-0"><li class="lvl-2"><p>Cumulative Sum：对聚合分析的结果进行累计求和操作。</p></li><li class="lvl-2"><p>示例: 按照价格进行分组，并统计平均价格信息，对分组结果进行累计求和操作。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_histogram&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;histogram&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span>,</span><br><span class="line">        <span class="string">&quot;interval&quot;</span>: 500, <span class="comment"># 间隔500</span></span><br><span class="line">        <span class="string">&quot;extended_bounds&quot;</span>:&#123; <span class="comment"># 设置边界</span></span><br><span class="line">          <span class="string">&quot;min&quot;</span>:0, <span class="comment"># 最小值0</span></span><br><span class="line">          <span class="string">&quot;max&quot;</span>:2000 <span class="comment"># 最大值2000</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;avg_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;cumulative_sum_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;cumulative_sum&quot;</span>: &#123; <span class="comment"># 对聚合结果进行累计求和操作</span></span><br><span class="line">            <span class="string">&quot;buckets_path&quot;</span>: <span class="string">&quot;avg_price&quot;</span> <span class="comment"># 指定路径，对avg_price字段进行累计求和操作</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Derivative">Derivative</h3><ul class="lvl-0"><li class="lvl-2"><p>Derivative：对聚合分析的结果进行求导操作。</p></li><li class="lvl-2"><p>Derivative 聚合查询是 Elasticsearch 中的一种高级聚合类型，用于计算某个度量值随时间（或其他顺序字段）变化的速率。它通常用于时间序列分析，以揭示度量值的增减趋势。</p></li><li class="lvl-2"><p>示例：显示每天的平均价格以及平均价格的变化趋势</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_over_time&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;date_histogram&quot;</span>: &#123; <span class="comment"># 按照日期进行分组</span></span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;created_at&quot;</span>, <span class="comment"># 指定字段</span></span><br><span class="line">        <span class="string">&quot;calendar_interval&quot;</span>: <span class="string">&quot;day&quot;</span> <span class="comment"># 指定时间间隔，可用的值：year、quarter、month、week、day、hour、minute、second</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;average_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;price_derivative&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;derivative&quot;</span>: &#123; <span class="comment"># 对聚合结果进行求导操作</span></span><br><span class="line">            <span class="string">&quot;buckets_path&quot;</span>: <span class="string">&quot;average_price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Moving-Function">Moving Function</h3><ul class="lvl-0"><li class="lvl-2"><p>Moving Function：对聚合分析的结果进行移动平均值操作。</p></li><li class="lvl-2"><p>Moving Function 聚合查询是 Elasticsearch 中的一种高级聚合类型，用于计算某个度量值在时间窗口内的移动平均值。它通常用于时间序列分析，以了解度量值的变化趋势。</p></li><li class="lvl-2"><p>示例：计算 price 字段的 7 天移动平均值</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET /shopping/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;price_over_time&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;date_histogram&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;created_at&quot;</span>,</span><br><span class="line">        <span class="string">&quot;calendar_interval&quot;</span>: <span class="string">&quot;day&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;daily_avg_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;field&quot;</span>: <span class="string">&quot;price&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;moving_avg_price&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;moving_fn&quot;</span>: &#123; <span class="comment"># 对聚合结果进行移动平均值操作</span></span><br><span class="line">            <span class="string">&quot;buckets_path&quot;</span>: <span class="string">&quot;daily_avg_price&quot;</span>, <span class="comment"># 指定路径，对daily_avg_price字段进行移动平均值操作</span></span><br><span class="line">            <span class="string">&quot;script&quot;</span>: <span class="string">&quot;MovingFunctions.unweightedAvg(values)&quot;</span>, <span class="comment"># 指定脚本，计算移动平均值</span></span><br><span class="line">            <span class="string">&quot;window&quot;</span>: 7, <span class="comment"># 窗口大小，默认为 10</span></span><br><span class="line">            <span class="string">&quot;shift&quot;</span>: 0 <span class="comment"># 窗口偏移量，默认为 0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES-聚合性能优化">ES 聚合性能优化</h2><h3 id="索引预排序">索引预排序</h3><ul class="lvl-0"><li class="lvl-2"><p>如果是 Elasticsearch 6.X 之后版本，可以在插入数据时对索引进行预排序，而不是在查询时再对索引进行排序，这将提高范围查询（range query）和排序操作的性能。</p></li><li class="lvl-2"><p>但预排序将增加 Elasticsearch 写入的成本，导致大约 40%-50% 的写性能下降，如果应用场景是更关注写性能的业务，开启索引预排序不是一个很好的选择。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;index&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;sort.field&quot;</span>: <span class="string">&quot;create_time&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sort.order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;create_time&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用分片请求缓存">使用分片请求缓存</h3><ul class="lvl-0"><li class="lvl-2"><p>聚合语句中，设置：size：0，就会使用分片请求缓存缓存结果。size = 0 的含义是：只返回聚合结果，不返回查询结果。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;remark_agg&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;remark.keyword&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拆分聚合，使聚合并行化">拆分聚合，使聚合并行化</h3><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 查询条件中同时有多个条件聚合，默认情况下聚合不是并行运行的。</p></li><li class="lvl-2"><p>当为每个聚合提供自己的查询并执行 msearch 时，性能会有显著提升。</p></li><li class="lvl-2"><p>因此，在 CPU 资源不是瓶颈的前提下，如果想缩短响应时间，可以将多个聚合拆分为多个查询，借助：msearch 实现并行聚合。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常规的多条件聚合实现</span></span><br><span class="line">GET /employees/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;job_agg&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;job.keyword&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_salary&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;max&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;salary&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># msearch 拆分多个语句的聚合实现</span></span><br><span class="line">GET _msearch</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:<span class="string">&quot;employees&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;size&quot;</span>:0,<span class="string">&quot;aggs&quot;</span>:&#123;<span class="string">&quot;job_agg&quot;</span>:&#123;<span class="string">&quot;terms&quot;</span>:&#123;<span class="string">&quot;field&quot;</span>: <span class="string">&quot;job.keyword&quot;</span>&#125;&#125;&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:<span class="string">&quot;employees&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;size&quot;</span>:0,<span class="string">&quot;aggs&quot;</span>:&#123;<span class="string">&quot;max_salary&quot;</span>:&#123;<span class="string">&quot;max&quot;</span>:&#123;<span class="string">&quot;field&quot;</span>: <span class="string">&quot;salary&quot;</span>&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 Elasticsearch 的 REST APIs：聚合查询&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/8.17/rest-apis.html&quot;&gt;官方文档:REST APIs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/8.17/search-aggregations.html&quot;&gt;官方文档:Aggregations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;a href=&quot;/2025/04/17/elasticsearch-05-api/&quot; title=&quot;Elasticsearch 的 REST APIs&quot;&gt;Elasticsearch 的 REST APIs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 的 REST APIs</title>
    <link href="https://blog.hanqunfeng.com/2025/04/17/elasticsearch-05-api/"/>
    <id>https://blog.hanqunfeng.com/2025/04/17/elasticsearch-05-api/</id>
    <published>2025-04-17T13:30:05.000Z</published>
    <updated>2025-04-23T02:42:29.434Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 Elasticsearch 的 REST APIs</p></li><li class="lvl-2"><p>Elasticsearch版本8.17.3</p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/rest-apis.html">官方文档:REST APIs</a></p></li><li class="lvl-2"><a href="/2025/04/22/elasticsearch-06-api-aggs/" title="Elasticsearch 的 REST APIs:聚合查询">Elasticsearch 的 REST APIs:聚合查询</a></li></ul><span id="more"></span><h2 id="返回内容格式化">返回内容格式化</h2><ul class="lvl-0"><li class="lvl-2"><p>返回json信息格式: <code>?pretty</code> 输出格式化后的json，比如：<code>curl http://localhost:9200/_cluster/health?pretty</code></p></li><li class="lvl-2"><p>返回行信息格式: <code>?v</code> 输出内容上方会加上标题行，比如：<code>curl http://localhost:9200/_cat/health?v</code></p></li></ul><h2 id="CAT-APIs">CAT APIs</h2><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 提供了 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/cat.html">CAT APIs</a>，它们提供了一种简单的方式来查看集群状态和集群中的各种资源，比如索引、分片、节点等。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET     /_cat/health             <span class="comment">#查看集群当前状态：红、黄、绿</span></span><br><span class="line">GET     /_cat/master             <span class="comment">#查看master节点信息</span></span><br><span class="line">GET     /_cat/nodes              <span class="comment">#查看所有节点信息</span></span><br><span class="line">GET     /_cat/plugins            <span class="comment">#查看集群各个节点上的plugin信息</span></span><br><span class="line">GET     /_cat/indices            <span class="comment">#查看集群中所有index的详细信息</span></span><br><span class="line">GET     /_cat/indices/&#123;index&#125;    <span class="comment">#查看集群中指定index的详细信息，index：索引名称</span></span><br><span class="line">GET     /_cat/allocation         <span class="comment">#查看单节点的shard分配整体情况</span></span><br><span class="line">GET     /_cat/shards             <span class="comment">#查看各shard的详细情况</span></span><br><span class="line">GET     /_cat/shards/&#123;index&#125;     <span class="comment">#查看指定分片的详细情况</span></span><br><span class="line">GET     /_cat/segments           <span class="comment">#查看各index的segment详细信息,包括segment名, 所属shard, 内存(磁盘)占用大小, 是否刷盘</span></span><br><span class="line">GET     /_cat/segments/&#123;index&#125;   <span class="comment">#查看指定index的segment详细信息</span></span><br><span class="line">GET     /_cat/count              <span class="comment">#查看当前集群的doc数量</span></span><br><span class="line">GET     /_cat/count/&#123;index&#125;      <span class="comment">#查看指定索引的doc数量</span></span><br><span class="line">GET     /_cat/recovery           <span class="comment">#查看集群内每个shard的recovery过程.调整replica。</span></span><br><span class="line">GET     /_cat/recovery/&#123;index&#125;   <span class="comment">#查看指定索引shard的recovery过程</span></span><br><span class="line">GET     /_cat/pending_tasks      <span class="comment">#查看当前集群的pending task</span></span><br><span class="line">GET     /_cat/aliases            <span class="comment">#查看集群中所有alias信息,路由配置等</span></span><br><span class="line">GET     /_cat/aliases/&#123;<span class="built_in">alias</span>&#125;    <span class="comment">#查看指定索引的alias信息</span></span><br><span class="line">GET     /_cat/thread_pool        <span class="comment">#查看集群各节点内部不同类型的threadpool的统计信息,</span></span><br><span class="line">GET     /_cat/fielddata          <span class="comment">#查看当前集群各个节点的fielddata内存使用情况</span></span><br><span class="line">GET     /_cat/fielddata/&#123;fields&#125; <span class="comment">#查看指定field的内存使用情况,里面传field属性对应的值</span></span><br><span class="line">GET     /_cat/nodeattrs          <span class="comment">#查看单节点的自定义属性</span></span><br><span class="line">GET     /_cat/repositories       <span class="comment">#输出集群中注册快照存储库</span></span><br><span class="line">GET     /_cat/templates          <span class="comment">#输出当前正在存在的模板信息</span></span><br></pre></td></tr></table></figure><h2 id="Cluster-APIs">Cluster APIs</h2><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 提供了一系列的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/cluster.html">Cluster APIs</a>，它们提供了管理和监控集群状态的功能</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET     /_cluster/health            <span class="comment"># 获取集群的健康状态信息，包括了集群总体的状况如status、number_of_nodes等。</span></span><br><span class="line">GET     /_cluster/stats             <span class="comment"># 提供整个集群层面的统计信息，包含索引、节点和其他高级指标。</span></span><br><span class="line">GET     /_cluster/state             <span class="comment"># 显示集群元数据的状态，包括设置、块、路由表及元数据等，允许用户查看集群的当前视图。</span></span><br><span class="line">POST    /_cluster/reroute           <span class="comment"># POST请求，用于手动改变分片分配情况，可以实现如迁移分片、取消分配等操作。</span></span><br><span class="line">GET     /_cluster/nodes/hot_threads <span class="comment"># 返回集群中各个节点“最热”的线程堆栈跟踪，默认显示前三个CPU时间最长的线程。</span></span><br><span class="line">GET     /_cluster/allocation/explain <span class="comment"># 解释为何某个分片被如此分配，并提供如何调整的建议。</span></span><br><span class="line">GET     /_cluster/pending_tasks     <span class="comment"># 列出所有等待执行的任务列表。</span></span><br><span class="line">GET     /_cluster/settings          <span class="comment"># 查看整个集群级别的设置。</span></span><br><span class="line">PUT     /_cluster/settings          <span class="comment"># 更新整个集群级别的设置。</span></span><br></pre></td></tr></table></figure><h2 id="Index-APIs">Index APIs</h2><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 提供了 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/indices.html">Index APIs</a>，它们提供了对索引的创建、更新、查询和删除等操作。</p></li><li class="lvl-2"><p>创建索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PUT /&lt;target&gt;</span></span><br><span class="line"><span class="comment"># 这里 shopping 为索引名称，但此时没有为索引设置分片策略，也没有设置字段信息</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;shards_acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;index&quot;</span>:<span class="string">&quot;shopping&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建索引并设置索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PUT /&lt;target&gt;</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;settings&quot;:&#123;&quot;number_of_shards&quot;:&quot;1&quot;,&quot;number_of_replicas&quot;:&quot;2&quot;&#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;shards_acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;index&quot;</span>:<span class="string">&quot;shopping&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建并映射索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PUT /&lt;target&gt;</span></span><br><span class="line"><span class="comment"># 这里设置索引分片数量为1，副本数量为2，并设置字段信息</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;settings&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;number_of_shards&quot;:&quot;1&quot;,</span></span><br><span class="line"><span class="string">      &quot;number_of_replicas&quot;:&quot;2&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;mappings&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;properties&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;title&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;text&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;category&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;keyword&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;price&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;double&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;count&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;integer&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment">## settings: 这个参数用于配置索引的设置，包括分片数量和副本数量。</span></span><br><span class="line"><span class="comment">### number_of_shards: 这个参数指定了索引中分片的数量。在这个例子中，number_of_shards 设置为 1，意味着索引将只有一个主分片。</span></span><br><span class="line"><span class="comment">### number_of_replicas: 这个参数指定了每个主分片的副本数量。在这个例子中，number_of_replicas 设置为 2，意味着每个主分片将有两个副本。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## mappings: 这个参数用于定义索引中的字段和字段类型。</span></span><br><span class="line"><span class="comment">### properties: 这个参数定义了索引中的字段和字段类型。在这个例子中，有四个字段：title、category、images 和 price。</span></span><br><span class="line"><span class="comment">### title: 这个字段的类型是 text，表示它是一个全文检索字段。text 适合存储长文本数据，并支持全文搜索。</span></span><br><span class="line"><span class="comment">### category: 这个字段的类型是 keyword，表示它是一个关键字字段，不支持全文检索。keyword 适合存储不需要分词的短文本数据（如标签、类别等），并且可以用于聚合和过滤。</span></span><br><span class="line"><span class="comment">### price: 这个字段的类型是 double，表示它是一个数字字段。double 表示这是一个双精度浮点数字段，适合存储数值数据，如价格</span></span><br><span class="line"><span class="comment">### count: 这个字段的类型是 integer，表示它是一个整数字段。integer 表示这是一个整数字段，适合存储整数数据，如商品数量等。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;shards_acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;index&quot;</span>:<span class="string">&quot;shopping&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>更新索引映射</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PUT /&lt;target&gt;/_mapping</span></span><br><span class="line"><span class="comment"># 注意该api只能增加新的字段，不能修改已有字段，如果要修改源字段类型或者分词器类型，下文会介绍</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_mapping&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;properties&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;remark&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;:&quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;:&quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;search_analyzer&quot;:&quot;ik_smart&quot;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;address&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;fields&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;keyword&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;tags&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;created_at&quot;: &#123;&quot;type&quot;: &quot;date&quot;, &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;&#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># 这里为索引添加了4个字段</span></span><br><span class="line"><span class="comment"># remark：新增字段，类型为text，分词器为ik_max_word，搜索分词器为ik_smart</span></span><br><span class="line">  <span class="comment"># analyzer: 索引分词器</span></span><br><span class="line">  <span class="comment"># search_analyzer：搜索分词器</span></span><br><span class="line">  <span class="comment"># ik_max_word：中文分词器，将句子拆分为最多词元，适合长句子</span></span><br><span class="line">  <span class="comment"># ik_smart：中文分词器，将句子拆分为最少词元，适合短句子</span></span><br><span class="line"><span class="comment"># address：新增字段，类型为text，分词器为ik_max_word，搜索分词器未指定，默认与分词器同一个，这里还为address添加了keyword字段，用于存储原始数据，以支持精确搜索</span></span><br><span class="line"><span class="comment"># tags：新增字段，类型为keyword，不支持分词，适合存储短文本数据（如标签、类别等），并且可以用于聚合和过滤，可以存储数组</span></span><br><span class="line"><span class="comment"># created_at：新增字段，类型为date，格式为yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>更新索引设置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PUT /&lt;target&gt;/_settings</span></span><br><span class="line"><span class="comment"># 注意这里不能更新number_of_shards</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_settings&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;number_of_replicas&quot;:&quot;1&quot;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看指定索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /&lt;target&gt;</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping?pretty&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;shopping&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;aliases&quot;</span> : &#123; &#125;,</span><br><span class="line">    <span class="string">&quot;mappings&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;properties&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;fields&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;keyword&quot;</span> : &#123;</span><br><span class="line">              <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;category&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;count&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;created_at&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;date&quot;</span>,</span><br><span class="line">          <span class="string">&quot;format&quot;</span> : <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;price&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;double&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;remark&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">          <span class="string">&quot;search_analyzer&quot;</span> : <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;title&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;settings&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;index&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;routing&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;allocation&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;include&quot;</span> : &#123;</span><br><span class="line">              <span class="string">&quot;_tier_preference&quot;</span> : <span class="string">&quot;data_content&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;number_of_shards&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;provided_name&quot;</span> : <span class="string">&quot;shopping&quot;</span>,</span><br><span class="line">        <span class="string">&quot;creation_date&quot;</span> : <span class="string">&quot;1745291743120&quot;</span>,</span><br><span class="line">        <span class="string">&quot;number_of_replicas&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uuid&quot;</span> : <span class="string">&quot;Y1IWrdlQTUm-CbbIWweSxQ&quot;</span>,</span><br><span class="line">        <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;created&quot;</span> : <span class="string">&quot;8525000&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看索引设置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /&lt;target&gt;/_settings</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_settings?pretty&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;shopping&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;mappings&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;properties&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;fields&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;keyword&quot;</span> : &#123;</span><br><span class="line">              <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;category&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;count&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;created_at&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;date&quot;</span>,</span><br><span class="line">          <span class="string">&quot;format&quot;</span> : <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;price&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;double&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;remark&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">          <span class="string">&quot;search_analyzer&quot;</span> : <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;tags&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;title&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看字段映射</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /&lt;target&gt;/_mapping/field/&lt;field&gt;</span></span><br><span class="line"><span class="comment"># shopping 为索引名称，title 为字段名称</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_mapping/field/title?pretty&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;shopping&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;mappings&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;title&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;full_name&quot;</span> : <span class="string">&quot;title&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mapping&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;title&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>判断索引是否存在</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 -I 参数来发送 HEAD 请求，可以获取响应头而不必下载响应体。</span></span><br><span class="line"><span class="comment"># HEAD /&lt;target&gt;</span></span><br><span class="line">curl -I -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">X-elastic-product: Elasticsearch</span><br><span class="line">content-type: application/json</span><br><span class="line">content-length: 603</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个命令不会返回响应体，但它的 HTTP 响应代码可以告诉你索引的存在情况：</span></span><br><span class="line">  <span class="comment"># 200 OK 表示索引存在。</span></span><br><span class="line">  <span class="comment"># 404 Not Found 表示索引不存在。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DELETE /&lt;target&gt;</span></span><br><span class="line">curl -X DELETE -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>为索引创建别名</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：不同索引可以有相同名称的别名，所以在数据结构一致的情况下，我们可以为不同的索引创建相同的别名，然后根据别名进行数据查询</span></span><br><span class="line"><span class="comment"># POST /&lt;target&gt;/_alias/&lt;alias&gt;</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_alias/shopping_alias&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用如下方法</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_aliases&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;actions&quot;: [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        &quot;add&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;index&quot;: &quot;shopping&quot;,</span></span><br><span class="line"><span class="string">          &quot;alias&quot;: &quot;shopping_alias2&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看索引别名</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /&lt;target&gt;/_alias/&lt;alias&gt;</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_alias/shopping_alias?pretty&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;shopping&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;aliases&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;shopping_alias&quot;</span> : &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前索引的所有别名</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_alias?pretty&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有索引的别名</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_alias?pretty&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>为索引删除别名</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DELETE /&lt;target&gt;/_alias/&lt;alias&gt;</span></span><br><span class="line">curl -X DELETE -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_alias/shopping_alias&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="如何修改索引字段类型或分词器类型？">如何修改索引字段类型或分词器类型？</h3><ul class="lvl-0"><li class="lvl-2"><p>创建新的索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里为title字段增加分词器</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping_new&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;settings&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;number_of_shards&quot;:&quot;1&quot;,</span></span><br><span class="line"><span class="string">      &quot;number_of_replicas&quot;:&quot;2&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;mappings&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;properties&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;category&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;keyword&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;price&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;double&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;count&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;integer&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;title&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;:&quot;text&quot;,</span></span><br><span class="line"><span class="string">          &quot;analyzer&quot;:&quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">          &quot;search_analyzer&quot;:&quot;ik_smart&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;remark&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;:&quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;:&quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;search_analyzer&quot;:&quot;ik_smart&quot;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;address&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;fields&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;keyword&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;tags&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;created_at&quot;: &#123;&quot;type&quot;: &quot;date&quot;, &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;&#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>将原索引的数据迁移到新索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_reindex&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;source&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;index&quot;: &quot;shopping&quot;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;dest&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;index&quot;: &quot;shopping_new&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;took&quot;</span>:101,<span class="string">&quot;timed_out&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;total&quot;</span>:2,<span class="string">&quot;updated&quot;</span>:0,<span class="string">&quot;created&quot;</span>:2,<span class="string">&quot;deleted&quot;</span>:0,<span class="string">&quot;batches&quot;</span>:1,<span class="string">&quot;version_conflicts&quot;</span>:0,<span class="string">&quot;noops&quot;</span>:0,<span class="string">&quot;retries&quot;</span>:&#123;<span class="string">&quot;bulk&quot;</span>:0,<span class="string">&quot;search&quot;</span>:0&#125;,<span class="string">&quot;throttled_millis&quot;</span>:0,<span class="string">&quot;requests_per_second&quot;</span>:-1.0,<span class="string">&quot;throttled_until_millis&quot;</span>:0,<span class="string">&quot;failures&quot;</span>:[]&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除原索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>为新索引创建别名</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping_new/_alias/shopping&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;<span class="string">&quot;acknowledged&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;errors&quot;</span>:<span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="数据增删改基本操作">数据增删改基本操作</h2><ul class="lvl-0"><li class="lvl-2"><p>新增数据</p><ul class="lvl-2"><li class="lvl-4">1.为指定索引插入一条数据(_doc方式：不指定id默认随机字符串)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _doc 的方式创建索引数据时，可以不指定id，默认会创建新的id，id类型为随机字符串</span></span><br><span class="line"><span class="comment"># POST /&lt;target&gt;/_doc</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_doc?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;category&quot;: &quot;electronics&quot;,</span></span><br><span class="line"><span class="string">    &quot;price&quot;: 999.99,</span></span><br><span class="line"><span class="string">    &quot;count&quot;: 10,</span></span><br><span class="line"><span class="string">    &quot;title&quot;: &quot;Smartphone X - 128GB&quot;,</span></span><br><span class="line"><span class="string">    &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;,</span></span><br><span class="line"><span class="string">    &quot;address&quot;: &quot;123 Electronic Ave, Beijing, China&quot;,</span></span><br><span class="line"><span class="string">    &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;],</span></span><br><span class="line"><span class="string">    &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;shopping_new&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;sImNW5YBmgASmV9McVvI&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 3,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4">2.为指定索引插入一条数据(_doc方式：指定id)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _doc 的方式创建索引数据时，如果指定id，再次执行时会先删除原数据再创建新数据，所以必须全量更新才行。</span></span><br><span class="line"><span class="comment"># PUT /&lt;target&gt;/_doc</span></span><br><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_doc/100?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;category&quot;: &quot;electronics&quot;,</span></span><br><span class="line"><span class="string">    &quot;price&quot;: 999.99,</span></span><br><span class="line"><span class="string">    &quot;count&quot;: 10,</span></span><br><span class="line"><span class="string">    &quot;title&quot;: &quot;Smartphone X - 128GB&quot;,</span></span><br><span class="line"><span class="string">    &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;,</span></span><br><span class="line"><span class="string">    &quot;address&quot;: &quot;123 Electronic Ave, Beijing, China&quot;,</span></span><br><span class="line"><span class="string">    &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;],</span></span><br><span class="line"><span class="string">    &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;shopping_new&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;100&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 3,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 2,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4"><p>3.为指定索引插入一条数据(_create方式：指定id)</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _create 的方式创建索引数据时，必须指定id,而且只能执行一次，因为执行过一次后指定id的数据就存在了，不能再次创建</span></span><br><span class="line"><span class="comment"># POST /&lt;target&gt;/_create/&lt;id&gt;</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_create/1?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;category&quot;: &quot;electronics&quot;,</span></span><br><span class="line"><span class="string">    &quot;price&quot;: 999.99,</span></span><br><span class="line"><span class="string">    &quot;count&quot;: 10,</span></span><br><span class="line"><span class="string">    &quot;title&quot;: &quot;Smartphone X - 128GB&quot;,</span></span><br><span class="line"><span class="string">    &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;,</span></span><br><span class="line"><span class="string">    &quot;address&quot;: &quot;123 Electronic Ave, Beijing, China&quot;,</span></span><br><span class="line"><span class="string">    &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;],</span></span><br><span class="line"><span class="string">    &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>修改数据</p><ul class="lvl-2"><li class="lvl-4">1.修改全部数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST /&lt;target&gt;/_doc/&lt;id&gt;</span></span><br><span class="line"><span class="comment"># 执行时会先删除原数据再创建新数据，所以必须全量更新才行。</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_doc/sImNW5YBmgASmV9McVvI&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;category&quot;: &quot;electronics&quot;,</span></span><br><span class="line"><span class="string">    &quot;price&quot;: 999.99,</span></span><br><span class="line"><span class="string">    &quot;count&quot;: 20,</span></span><br><span class="line"><span class="string">    &quot;title&quot;: &quot;Smartphone X - 128GB&quot;,</span></span><br><span class="line"><span class="string">    &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;,</span></span><br><span class="line"><span class="string">    &quot;address&quot;: &quot;123 Electronic Ave, Beijing, China&quot;,</span></span><br><span class="line"><span class="string">    &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;],</span></span><br><span class="line"><span class="string">    &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4">2.修改部分数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST /&lt;target&gt;/_update/&lt;id&gt;</span></span><br><span class="line"><span class="comment"># 执行时只会修改指定字段，不会删除原数据，所以可以部分更新。</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_update/1&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;doc&quot;:&#123;&quot;count&quot;:100&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>查询指定索引的指定id的数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /&lt;target&gt;/_doc/&lt;id&gt;</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_doc/100?pretty&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;shopping_new&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;100&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 2,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;category&quot;</span> : <span class="string">&quot;electronics&quot;</span>,</span><br><span class="line">    <span class="string">&quot;price&quot;</span> : 999.99,</span><br><span class="line">    <span class="string">&quot;count&quot;</span> : 10,</span><br><span class="line">    <span class="string">&quot;title&quot;</span> : <span class="string">&quot;Smartphone X - 128GB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;remark&quot;</span> : <span class="string">&quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;address&quot;</span> : <span class="string">&quot;123 Electronic Ave, Beijing, China&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tags&quot;</span> : [</span><br><span class="line">      <span class="string">&quot;latest&quot;</span>,</span><br><span class="line">      <span class="string">&quot;smartphone&quot;</span>,</span><br><span class="line">      <span class="string">&quot;technology&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;created_at&quot;</span> : <span class="string">&quot;2025-04-22 03:30:02&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除指定索引的指定id的数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DELETE /&lt;target&gt;/_doc/&lt;id&gt;</span></span><br><span class="line">curl -X DELETE -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_doc/100&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除索引全部数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_delete_by_query?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;match_all&quot;:&#123;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="批量操作">批量操作</h2><ul class="lvl-0"><li class="lvl-2"><p>批量新增数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意数据行要顶行写，前面不要有空格</span></span><br><span class="line"><span class="comment"># POST /_bulk</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;1&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;electronics&quot;, &quot;price&quot;: 999.99, &quot;count&quot;: 10, &quot;title&quot;: &quot;Smartphone X - 128GB&quot;, &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;, &quot;address&quot;: &quot;广州天河公园&quot;, &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;], &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;2&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;fashion&quot;, &quot;price&quot;: 49.99, &quot;count&quot;: 25, &quot;title&quot;: &quot;Designer T-shirt&quot;, &quot;remark&quot;: &quot;Trendy designer T-shirt made with high quality fabric.&quot;, &quot;address&quot;: &quot;广州荔湾大厦&quot;, &quot;tags&quot;: [&quot;clothing&quot;, &quot;designer&quot;, &quot;style&quot;], &quot;created_at&quot;: &quot;2025-04-21 12:15:00&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;3&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;home_appliances&quot;, &quot;price&quot;: 299.99, &quot;count&quot;: 5, &quot;title&quot;: &quot;Robot Vacuum Cleaner&quot;, &quot;remark&quot;: &quot;Efficient robot vacuum cleaner with smart navigation.&quot;, &quot;address&quot;: &quot;广州白云山公园&quot;, &quot;tags&quot;: [&quot;appliances&quot;, &quot;vacuum&quot;, &quot;robot&quot;], &quot;created_at&quot;: &quot;2025-04-20 08:45:30&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;4&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;books&quot;, &quot;price&quot;: 19.99, &quot;count&quot;: 100, &quot;title&quot;: &quot;Inspirational Novel&quot;, &quot;remark&quot;: &quot;A gripping novel that inspires and motivates.&quot;, &quot;address&quot;: &quot;321 Book Rd, Shenzhen, China&quot;, &quot;tags&quot;: [&quot;book&quot;, &quot;novel&quot;, &quot;inspiration&quot;], &quot;created_at&quot;: &quot;2025-04-19 10:05:00&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;5&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;groceries&quot;, &quot;price&quot;: 3.99, &quot;count&quot;: 200, &quot;title&quot;: &quot;Organic Apples&quot;, &quot;remark&quot;: &quot;Fresh and crispy organic apples.&quot;, &quot;address&quot;: &quot;654 Grocery Ln, Chengdu, China&quot;, &quot;tags&quot;: [&quot;fruit&quot;, &quot;organic&quot;, &quot;healthy&quot;], &quot;created_at&quot;: &quot;2025-04-18 14:30:45&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;shopping&quot;, &quot;_id&quot;: &quot;6&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;electronics&quot;, &quot;price&quot;: 1999.99, &quot;count&quot;: 15, &quot;title&quot;: &quot;Smartphone X - 256GB&quot;, &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;, &quot;address&quot;: &quot;广州天河公园&quot;, &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;], &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot; &#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># index: 用于创建新文档或替换已有文档。</span></span><br><span class="line"><span class="comment"># create: 用于创建新文档，如果文档已存在，则返回错误。</span></span><br><span class="line"><span class="comment"># _index: 指定索引名称。</span></span><br><span class="line"><span class="comment"># _id: 指定文档ID。如果不指定则会自动生成一个随机的ID。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量新增数据时也可以在url中指定索引名称</span></span><br><span class="line"><span class="comment"># 此时可以指定id，如果不指定则自动生成一个随机字符串的ID</span></span><br><span class="line"><span class="comment"># POST /&lt;target&gt;/_bulk</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;electronics&quot;, &quot;price&quot;: 999.99, &quot;count&quot;: 10, &quot;title&quot;: &quot;Smartphone X - 128GB&quot;, &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;, &quot;address&quot;: &quot;广州天河公园&quot;, &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;], &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;fashion&quot;, &quot;price&quot;: 49.99, &quot;count&quot;: 25, &quot;title&quot;: &quot;Designer T-shirt&quot;, &quot;remark&quot;: &quot;Trendy designer T-shirt made with high quality fabric.&quot;, &quot;address&quot;: &quot;广州荔湾大厦&quot;, &quot;tags&quot;: [&quot;clothing&quot;, &quot;designer&quot;, &quot;style&quot;], &quot;created_at&quot;: &quot;2025-04-21 12:15:00&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;home_appliances&quot;, &quot;price&quot;: 299.99, &quot;count&quot;: 5, &quot;title&quot;: &quot;Robot Vacuum Cleaner&quot;, &quot;remark&quot;: &quot;Efficient robot vacuum cleaner with smart navigation.&quot;, &quot;address&quot;: &quot;广州白云山公园&quot;, &quot;tags&quot;: [&quot;appliances&quot;, &quot;vacuum&quot;, &quot;robot&quot;], &quot;created_at&quot;: &quot;2025-04-20 08:45:30&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;books&quot;, &quot;price&quot;: 19.99, &quot;count&quot;: 100, &quot;title&quot;: &quot;Inspirational Novel&quot;, &quot;remark&quot;: &quot;A gripping novel that inspires and motivates.&quot;, &quot;address&quot;: &quot;321 Book Rd, Shenzhen, China&quot;, &quot;tags&quot;: [&quot;book&quot;, &quot;novel&quot;, &quot;inspiration&quot;], &quot;created_at&quot;: &quot;2025-04-19 10:05:00&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;groceries&quot;, &quot;price&quot;: 3.99, &quot;count&quot;: 200, &quot;title&quot;: &quot;Organic Apples&quot;, &quot;remark&quot;: &quot;Fresh and crispy organic apples.&quot;, &quot;address&quot;: &quot;654 Grocery Ln, Chengdu, China&quot;, &quot;tags&quot;: [&quot;fruit&quot;, &quot;organic&quot;, &quot;healthy&quot;], &quot;created_at&quot;: &quot;2025-04-18 14:30:45&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;category&quot;: &quot;electronics&quot;, &quot;price&quot;: 1999.99, &quot;count&quot;: 15, &quot;title&quot;: &quot;Smartphone X - 256GB&quot;, &quot;remark&quot;: &quot;This latest Smartphone X comes with a powerful processor and high-resolution camera.&quot;, &quot;address&quot;: &quot;广州天河公园&quot;, &quot;tags&quot;: [&quot;latest&quot;, &quot;smartphone&quot;, &quot;technology&quot;], &quot;created_at&quot;: &quot;2025-04-22 03:30:02&quot; &#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>批量修改数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意数据行要顶行写，前面不要有空格</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;shopping&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;doc&quot;:&#123;&quot;title&quot;:&quot;Smartphone X2 - 128GB&quot;,&quot;price&quot;:1000.11&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;shopping&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;doc&quot;:&#123;&quot;title&quot;:&quot;T-shirt&quot;,&quot;price&quot;:45.99&#125;&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># update: 用于更新文档。</span></span><br><span class="line"><span class="comment"># doc: 指定要更新的字段。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>批量删除数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意数据行要顶行写，前面不要有空格</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;shopping&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;shopping&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;shopping&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;shopping&quot;,&quot;_id&quot;:&quot;4&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># delete: 用于删除文档。</span></span><br></pre></td></tr></table></figure><h2 id="条件更新">条件更新</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST /&lt;target&gt;/_update_by_query</span></span><br><span class="line"><span class="comment"># 这里将category为华为的数据价格改为1999</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_update_by_query?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;match&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;category&quot;: &quot;books&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;script&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;source&quot;: &quot;ctx._source.price = 20.99&quot;,</span></span><br><span class="line"><span class="string">      &quot;lang&quot;: &quot;painless&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment">## &quot;query&quot;: &#123;&#125;  查询条件</span></span><br><span class="line"><span class="comment">## &quot;script&quot;: &#123;&#125;  脚本</span></span><br><span class="line"><span class="comment">### source: 脚本内容</span></span><br><span class="line"><span class="comment">### lang: 脚本语言</span></span><br><span class="line"><span class="comment">#### painless 是 Elasticsearch 官方提供的脚本语言，它提供了许多内置函数和变量，可以方便地实现各种复杂的逻辑操作。https://www.elastic.co/guide/en/elasticsearch/painless/current/painless-lang-spec.html</span></span><br></pre></td></tr></table></figure><h2 id="条件删除">条件删除</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST /&lt;target&gt;/_delete_by_query</span></span><br><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_delete_by_query?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;category&quot;:&quot;books&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="条件查询">条件查询</h2><h3 id="match-all-全部匹配查询">match_all: 全部匹配查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /&lt;target&gt;/_search</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span></span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;match_all&quot;:&#123;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者简写为</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="term-精确匹配查询（关键字查询，即不分词）">term: 精确匹配查询（关键字查询，即不分词）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;category&quot;:&quot;electronics&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果字段被额外设置 keyword 类型，则需要加上 .keyword 后缀</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;address.keyword&quot;:&quot;广州白云山公园&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># term处理多值字段(数组)时，term查询是包含，不是等于</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;tags&quot;:&quot;technology&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="terms-多关键字精确匹配查询">terms: 多关键字精确匹配查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;terms&quot;:&#123;&quot;category&quot;:[&quot;electronics&quot;,&quot;books&quot;]&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="range-范围查询">range: 范围查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;range&quot;:&#123;&quot;price&quot;:&#123;&quot;gte&quot;:20,&quot;lte&quot;:30&#125;&#125;&#125;&#125;&#x27;</span></span><br><span class="line">  <span class="comment"># gte: 大于等于</span></span><br><span class="line">  <span class="comment"># lte: 小于等于</span></span><br><span class="line">  <span class="comment"># gt: 大于</span></span><br><span class="line">  <span class="comment"># lt: 小于</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间范围查询</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;range&quot;:&#123;&quot;created_at&quot;:&#123;&quot;gte&quot;:&quot;2025-04-20 00:00:00&quot;,&quot;lte&quot;:&quot;2025-05-20 23:59:59&quot;&#125;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于日期数学表达式查询</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;range&quot;:&#123;&quot;created_at&quot;:&#123;&quot;gte&quot;:&quot;now-1y&quot;&#125;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持的日期表达式</span></span><br><span class="line"><span class="comment"># - now：当前时间点。</span></span><br><span class="line"><span class="comment"># - now-1d：从当前时间点向前推1天的时间点。</span></span><br><span class="line"><span class="comment"># - now-1w：从当前时间点向前推1周的时间点。</span></span><br><span class="line"><span class="comment"># - now-1M：从当前时间点向前推1个月的时间点。</span></span><br><span class="line"><span class="comment"># - now-1y：从当前时间点向前推1年的时间点。</span></span><br><span class="line"><span class="comment"># - now+1h：从当前时间点向后推1小时的时间点。</span></span><br></pre></td></tr></table></figure><h3 id="exists-查询字段存在的数据">exists: 查询字段存在的数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;exists&quot;:&#123;&quot;field&quot;:&quot;title&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line">  <span class="comment"># field: 指定要查询的字段</span></span><br><span class="line">  <span class="comment"># 示例：查询 title 字段存在的文档</span></span><br></pre></td></tr></table></figure><h3 id="ids-根据一组ID查询">ids: 根据一组ID查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;ids&quot;:&#123;&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;]&#125;&#125;&#125;&#x27;</span></span><br><span class="line">  <span class="comment"># values: 指定要查询的ID列表</span></span><br><span class="line">  <span class="comment"># 示例：查询ID为1和2的文档</span></span><br></pre></td></tr></table></figure><h3 id="prefix-前缀查询">prefix: 前缀查询</h3><ul class="lvl-0"><li class="lvl-2"><p>仅适用于关键字类型(keyword)的字段</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;prefix&quot;:&#123;&quot;category&quot;:&quot;elec&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅适用于keyword类型字段，所以下面这个请求查询不到数据</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;prefix&quot;:&#123;&quot;address&quot;:&quot;广州白云山&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 因为address被附加了keyword类型，所以需要加上.keyword后缀后可以查询到数据</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;prefix&quot;:&#123;&quot;address.keyword&quot;:&quot;广州白云山&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="wildcard-通配符查询">wildcard: 通配符查询</h3><ul class="lvl-0"><li class="lvl-2"><p>仅适用于关键字类型(keyword)的字段</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;wildcard&quot;:&#123;&quot;category&quot;:&quot;e?e*&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># ?: 任意单个字符</span></span><br><span class="line"><span class="comment"># *: 任意多个字符</span></span><br></pre></td></tr></table></figure><h3 id="regexp-正则表达式查询">regexp: 正则表达式查询</h3><ul class="lvl-0"><li class="lvl-2"><p>仅适用于关键字类型(keyword)的字段</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;regexp&quot;:&#123;&quot;category&quot;:&quot;e.e.*&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="fuzzy-支持编辑距离的模糊查询">fuzzy: 支持编辑距离的模糊查询</h3><ul class="lvl-0"><li class="lvl-2"><p>仅适用于关键字类型(keyword)的字段</p></li><li class="lvl-2"><p>fuzzy检索是一种强大的搜索功能，它能够在用户输入内容存在拼写错误或上下文不一致时，仍然返回与搜索词相似的文档。通过使用编辑距离算法来度量输入词与文档中词条的相似程度，模糊查询在保证搜索结果相关性的同时，有效地提高了搜索容错能力。</p></li><li class="lvl-2"><p>编辑距离是指从一个单词转换到另一个单词需要编辑单字符的次数。如中文集团到中威集团编辑距离就是1，只需要修改一个字符；如果fuzziness值在这里设置成2，会把编辑距离为2的东东集团也查出来。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">      &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;fuzzy&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;category&quot;:&#123;</span></span><br><span class="line"><span class="string">            &quot;value&quot;:&quot;beeks&quot;,</span></span><br><span class="line"><span class="string">            &quot;fuzziness&quot;:&quot;2&quot;,</span></span><br><span class="line"><span class="string">            &quot;prefix_length&quot;:1</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span></span><br><span class="line"><span class="comment"># fuzziness：用于编辑距离的设置，其默认值为AUTO，支持的数值为[0，1，2]。如果值设置越界会报错。</span></span><br><span class="line"><span class="comment"># prefix_length: 搜索词的前缀长度，在此长度内不会应用模糊匹配。默认是0，即整个词都会被模糊匹配。</span></span><br></pre></td></tr></table></figure><h3 id="match-全文检索-即分词">match: 全文检索(即分词)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;address&quot;:&quot;广州白云山公园&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为 desc 的索引分词器是 ik_max_word，查看“广州白云山公园”被分词后的结果</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/_analyze?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">        &quot;text&quot;: &quot;广州白云山公园&quot;</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span> : <span class="string">&quot;广州&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start_offset&quot;</span> : 0,</span><br><span class="line">      <span class="string">&quot;end_offset&quot;</span> : 2,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span> : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span> : <span class="string">&quot;白云山&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start_offset&quot;</span> : 2,</span><br><span class="line">      <span class="string">&quot;end_offset&quot;</span> : 5,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span> : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span> : <span class="string">&quot;白云&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start_offset&quot;</span> : 2,</span><br><span class="line">      <span class="string">&quot;end_offset&quot;</span> : 4,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span> : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span> : <span class="string">&quot;云山&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start_offset&quot;</span> : 3,</span><br><span class="line">      <span class="string">&quot;end_offset&quot;</span> : 5,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span> : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;token&quot;</span> : <span class="string">&quot;公园&quot;</span>,</span><br><span class="line">      <span class="string">&quot;start_offset&quot;</span> : 5,</span><br><span class="line">      <span class="string">&quot;end_offset&quot;</span> : 7,</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span> : 4</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 所以只要desc中包含如上这些内容的数据都会被匹配上</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是这样匹配的结果就不够精确，如何尽量匹配更多的分词呢，可以增加 minimum_should_match</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;match&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;address&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;query&quot;: &quot;广州白云山公园&quot;,</span></span><br><span class="line"><span class="string">          &quot;minimum_should_match&quot;: 2</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># minimum_should_match: 2 表示至少匹配两个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果希望全部都匹配呢</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;match&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;address&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;query&quot;: &quot;广州白云山公园&quot;,</span></span><br><span class="line"><span class="string">          &quot;operator&quot;: &quot;and&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># operator: and 表示全部匹配，此时相当于精确匹配，其默认值是 or</span></span><br></pre></td></tr></table></figure><h3 id="multi-match-多字段查询">multi_match: 多字段查询</h3><ul class="lvl-0"><li class="lvl-2"><p>multi_match查询在Elasticsearch中用于在多个字段上执行相同的搜索操作。它可以接受一个查询字符串，并在指定的字段集合中搜索这个字符串。multi_match查询提供了灵活的匹配类型和操作符选项，以便根据不同的搜索需求调整搜索行为。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;multi_match&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;query&quot;: &quot;广州shirt&quot;,</span></span><br><span class="line"><span class="string">        &quot;fields&quot;:[&quot;title&quot;,&quot;address&quot;]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># query: 查询条件</span></span><br><span class="line"><span class="comment"># fields: 指定多个字段进行匹配</span></span><br></pre></td></tr></table></figure><h3 id="match-phrase-短语查询">match_phrase: 短语查询</h3><ul class="lvl-0"><li class="lvl-2"><p>match_phrase查询在Elasticsearch中用于执行短语搜索，它不仅匹配整个短语，而且还考虑了短语中各个词的顺序和位置。这种查询类型对于搜索精确短语非常有用，尤其是在用户输入的查询与文档中的文本表达方式需要严格匹配时。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;match_phrase&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;address&quot;:&#123;</span></span><br><span class="line"><span class="string">          &quot;query&quot;:&quot;广州白云山&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 要求查询结果中的数据必须包含&quot;广州白云山&quot;，而且“广州”和“白云山”这两个词是不能分开的，因为 match_phrase 匹配的是相邻词条</span></span><br></pre></td></tr></table></figure><h3 id="query-string-支持与或非表达式的查询">query_string: 支持<code>与或非</code>表达式的查询</h3><ul class="lvl-0"><li class="lvl-2"><p>query_string查询是一种灵活的查询类型，它允许使用Lucene查询语法来构建复杂的搜索查询。这种查询类型支持多种逻辑运算符，包括与（AND）、或（OR）和非（NOT），以及通配符、模糊搜索和正则表达式等功能。query_string查询可以在单个或多个字段上进行搜索，并且可以处理复杂的查询逻辑。</p></li><li class="lvl-2"><p>注意: 查询字段分词就将查询条件分词查询，查询字段不分词将查询条件不分词查询</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有字段中包含 &quot;公园&quot;和 &quot;华为&quot; 的文档</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;query_string&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;query&quot;:&quot;公园 AND electronics&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定查询的单个字段</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;query_string&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;default_field&quot;:&quot;category&quot;,</span></span><br><span class="line"><span class="string">        &quot;query&quot;:&quot;白云山 OR books&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定查询的多个字段</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;query_string&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;fields&quot;:[&quot;category&quot;,&quot;address&quot;],</span></span><br><span class="line"><span class="string">        &quot;query&quot;:&quot;白云山 OR (electronics AND shirt)&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="simple-query-string-类似-query-string，但是会忽略错误的语法，同时只支持部分查询语法">simple_query_string: 类似 <code>query_string</code>，但是会忽略错误的语法，同时只支持部分查询语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;simple_query_string&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;query&quot;:&quot;广州公园&quot;,</span></span><br><span class="line"><span class="string">        &quot;default_operator&quot;:&quot;AND&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># default_operator: 默认为 OR，设置为 AND 则必须同时匹配</span></span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>ES查询结果属性含义</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span>:16,          <span class="comment"># 表示查询从请求到完成耗时 16 毫秒。</span></span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>:<span class="literal">false</span>,  <span class="comment"># 表示查询在规定的时间内完成，没有发生超时。如果为 true，则表示查询超时。</span></span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>:&#123;         <span class="comment"># 涉及到查询过程中使用的分片信息</span></span><br><span class="line">    <span class="string">&quot;total&quot;</span>:1,        <span class="comment"># 表示查询涉及到的总分片数为 1</span></span><br><span class="line">    <span class="string">&quot;successful&quot;</span>:1,   <span class="comment"># 表示查询成功完成的分片数为 1</span></span><br><span class="line">    <span class="string">&quot;skipped&quot;</span>:0,      <span class="comment"># 表示查询过程中被跳过的分片数为 0</span></span><br><span class="line">    <span class="string">&quot;failed&quot;</span>:0        <span class="comment"># 表示查询过程中失败的分片数为 0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>:&#123;            <span class="comment"># 包含查询结果的详细信息</span></span><br><span class="line">    <span class="string">&quot;total&quot;</span>:&#123;         <span class="comment"># 包含查询结果的总数</span></span><br><span class="line">      <span class="string">&quot;value&quot;</span>:4,      <span class="comment"># 表示查询结果的总数为 4</span></span><br><span class="line">      <span class="string">&quot;relation&quot;</span>:<span class="string">&quot;eq&quot;</span> <span class="comment"># 表示返回的总数 value 是确切的（equal）。如果为 gte，则表示返回的总数是一个下限值。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span>:0.0,  <span class="comment"># 表示匹配到的文档中最高的得分。如果是排序查询，这个值会有意义。当前结果因为 size: 0，没有实际返回文档，所以得分为 0.0</span></span><br><span class="line">    <span class="string">&quot;hits&quot;</span>:[ ]        <span class="comment"># 包含查询结果的列表，每个结果都是一个对象，包含文档的元数据，如 id、分数等。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="bool-查询">bool 查询</h2><ul class="lvl-0"><li class="lvl-2"><p>布尔查询可以按照布尔逻辑条件组织多条查询语句，只有符合整个布尔条件的文档才会被搜索出来。</p></li><li class="lvl-2"><p>在布尔条件中，可以包含两种不同的上下文。</p><ul class="lvl-2"><li class="lvl-4">1.搜索上下文(query context)：使用搜索上下文时，Elasticsearch需要计算每个文档与搜索条件的相关度得分，这个得分的计算需使用一套复杂的计算公式，有一定的性能开销，带文本分析的全文检索的查询语句很适合放在搜索上下文中。</li><li class="lvl-4">2.过滤上下文(filter context)：使用过滤上下文时，Elasticsearch只需要判断搜索条件跟文档数据是否匹配，例如使用<code>Term query</code>判断一个值是否跟搜索内容一致，使用<code>Range query</code>判断某数据是否位于某个区间等。过滤上下文的查询不需要进行相关度得分计算，还可以使用缓存加快响应速度，很多术语级查询语句都适合放在过滤上下文中。</li></ul></li><li class="lvl-2"><p>bool 查询包含 must、must_not、should、filter 四种子句。</p></li></ul><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>must</td><td>可包含多个查询条件，每个条件均满足的文档才能被搜索到，每次查询需要计算相关度得分，属于搜索上下文</td></tr><tr><td>should</td><td>可包含多个查询条件，不存在must和fiter条件时，至少要满足多个查询条件中的一个，文档才能被搜索到，否则需满足的条件数量不受限制,匹配到的查询越多相关度越高，也属于搜索上下文</td></tr><tr><td>filter</td><td>可包含多个过滤条件，每个条件均满足的文档才能被搜索到，每个过滤条件不计算相关度得分，结果在一定条件下会被缓存， 属于过滤上下文</td></tr><tr><td>must_not</td><td>可包含多个过滤条件，每个条件均不满足的文档才能被搜索到，每个过滤条件不计算相关度得分，结果在一定条件下会被缓存， 属于过滤上下文</td></tr></tbody></table><h3 id="must">must</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两个条件都需要满足</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;bool&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;must&quot;:[</span></span><br><span class="line"><span class="string">          &#123;&quot;match&quot;:&#123;&quot;category&quot;:&quot;electronics&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;&quot;match&quot;:&#123;&quot;desc&quot;:&quot;公园&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="must-not">must_not</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两个条件都不满足</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;bool&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;must_not&quot;:[</span></span><br><span class="line"><span class="string">          &#123;&quot;match&quot;:&#123;&quot;category&quot;:&quot;electronics&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;&quot;match&quot;:&#123;&quot;desc&quot;:&quot;公园&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="should">should</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两个条件满足一个即可</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;bool&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;should&quot;:[</span></span><br><span class="line"><span class="string">          &#123;&quot;match&quot;:&#123;&quot;category&quot;:&quot;electronics&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;&quot;match&quot;:&#123;&quot;desc&quot;:&quot;公园&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="filter">filter</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter中的条件为非 match，即不能是全文检索</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;bool&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;filter&quot;:[</span></span><br><span class="line"><span class="string">          &#123;&quot;term&quot;:&#123;&quot;category&quot;:&quot;electronics&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;&quot;range&quot;:&#123;&quot;price&quot;:&#123;&quot;gte&quot;:20&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="分页与排序">分页与排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from: 从第几条开始，默认0</span></span><br><span class="line"><span class="comment"># size: 取多少条</span></span><br><span class="line"><span class="comment"># sort: 排序，默认为按文档id升序</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;&quot;range&quot;:&#123;&quot;price&quot;:&#123;&quot;gte&quot;:20,&quot;lte&quot;:30&#125;&#125;&#125;,</span></span><br><span class="line"><span class="string">  &quot;sort&quot;:[&#123;&quot;price&quot;:&quot;address&quot;&#125;],</span></span><br><span class="line"><span class="string">  &quot;from&quot;:0,</span></span><br><span class="line"><span class="string">  &quot;size&quot;:5</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="只返回部分字段">只返回部分字段</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _source: 指定要返回的字段列表</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &#123;&quot;query&quot;:&#123;&quot;range&quot;:&#123;&quot;price&quot;:&#123;&quot;gte&quot;:20,&quot;lte&quot;:30&#125;&#125;&#125;,</span></span><br><span class="line"><span class="string">  &quot;_source&quot;:[&quot;category&quot;,&quot;title&quot;,&quot;price&quot;]</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="高亮显示">高亮显示</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 高亮显示仅支持全文检索字段</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/shopping/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;multi_match&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;fields&quot;: [&quot;title&quot;,&quot;address&quot;],</span></span><br><span class="line"><span class="string">        &quot;query&quot;: &quot;公园shirt&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;highlight&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;post_tags&quot;: [&quot;&lt;/span&gt;&quot;],</span></span><br><span class="line"><span class="string">      &quot;pre_tags&quot;: [&quot;&lt;span style=&#x27;</span>color:red<span class="string">&#x27;&gt;&quot;],</span></span><br><span class="line"><span class="string">      &quot;fields&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;*&quot;:&#123;&#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="地理空间位置查询">地理空间位置查询</h2><ul class="lvl-0"><li class="lvl-2"><p>地理空间位置查询是数据库和搜索系统中的一个重要特性，特别是在地理信息系统（GIS）和位置服务中。它允许用户基于地理位置信息来搜索和过滤数据。在Elasticsearch这样的全文搜索引擎中，地理空间位置查询被广泛应用，例如在旅行、房地产、物流和零售等行业，用于提供基于位置的搜索功能。</p></li><li class="lvl-2"><p>在Elasticsearch中，地理空间数据通常存储在<code>geo_point</code>字段类型中。这种字段类型可以存储纬度和经度坐标，用于表示地球上的一个点。</p></li></ul><h3 id="示例">示例</h3><ul class="lvl-0"><li class="lvl-2"><p>创建一个索引，并添加一个<code>geo_point</code>字段：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/tourist_spots&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;mappings&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;properties&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;name&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;location&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;geo_point&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>插入数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/tourist_spots/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;index&quot;:&#123;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;name&quot;:&quot;雷峰塔&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:30.2615,&quot;lon&quot;:120.1480&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;index&quot;:&#123;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;name&quot;:&quot;西湖&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:30.2614,&quot;lon&quot;:120.1479&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;index&quot;:&#123;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;name&quot;:&quot;苏堤春晓&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:30.2624,&quot;lon&quot;:120.1708&#125;&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment"># lat: 纬度</span></span><br><span class="line"><span class="comment"># lon: 经度</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查询数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询杭州西湖5km附近的景点</span></span><br><span class="line"><span class="comment"># 雷峰塔 - 位于西湖附近，距离约2.8公里。</span></span><br><span class="line"><span class="comment"># 苏堤春晓 - 位于西湖边，距离西湖中心约1公里。</span></span><br><span class="line">curl -X GET -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/tourist_spots/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;bool&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;must&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;match_all&quot;: &#123;&#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;filter&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;geo_distance&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;distance&quot;: &quot;5km&quot;,</span></span><br><span class="line"><span class="string">            &quot;distance_type&quot;: &quot;arc&quot;,</span></span><br><span class="line"><span class="string">            &quot;location&quot;: &#123;</span></span><br><span class="line"><span class="string">              &quot;lat&quot;: 30.2614,</span></span><br><span class="line"><span class="string">              &quot;lon&quot;: 120.1479</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># distance: 5km 表示距离为5公里</span></span><br><span class="line"><span class="comment"># distance_type: arc, plane, sloppy_arc,</span></span><br><span class="line">  <span class="comment"># arc: 默认值，使用haversine公式计算距离，结果是精确的，但计算速度较慢。</span></span><br><span class="line">  <span class="comment"># plane: 使用平面直角坐标系计算距离，结果是粗略的，但计算速度更快。</span></span><br><span class="line">  <span class="comment"># sloppy_arc: 使用haversine公式计算距离，但允许误差。</span></span><br><span class="line"><span class="comment"># location: 搜索条件</span></span><br></pre></td></tr></table></figure><h2 id="向量搜索">向量搜索</h2><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 8.x 引入了一个重要的新特性：向量检索（Vector Search），特别是通过KNN（K-Nearest Neighbors）算法支持向量近邻检索。这一特性使得Elasticsearch在机器学习、数据分析和推荐系统等领域的应用变得更加广泛和强大。</p></li><li class="lvl-2"><p>向量检索的基本思路是，将文档（或数据项）表示为高维向量，并使用这些向量来执行相似性搜索。在Elasticsearch中，这些向量被存储在<code>dense_vector</code>类型的字段中，然后使用KNN算法来找到与给定向量最相似的其他向量。</p></li></ul><h3 id="示例-2">示例</h3><ul class="lvl-0"><li class="lvl-2"><p>创建索引</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/image-index&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;mappings&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;properties&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;image-vector&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;dense_vector&quot;,</span></span><br><span class="line"><span class="string">          &quot;dims&quot;: 3</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;title&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;text&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;file-type&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;keyword&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;my_label&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;text&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># dims: 3  表示3维向量，最高支持2048</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>添加数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/image-index/_bulk&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;image-vector&quot;: [-5, 9, -12], &quot;title&quot;: &quot;Image A&quot;, &quot;file-type&quot;: &quot;jpeg&quot;, &quot;my_label&quot;: &quot;red&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;image-vector&quot;: [10, -2, 3], &quot;title&quot;: &quot;Image B&quot;, &quot;file-type&quot;: &quot;png&quot;, &quot;my_label&quot;: &quot;blue&quot; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;index&quot;: &#123;&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; &quot;image-vector&quot;: [4, 0, -1], &quot;title&quot;: &quot;Image C&quot;, &quot;file-type&quot;: &quot;gif&quot;, &quot;my_label&quot;: &quot;red&quot; &#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>向量检索</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -u elastic:123456 -k <span class="string">&#x27;https://127.0.0.1:9200/image-index/_search?pretty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;query&quot;:&#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span></span><br><span class="line"><span class="string">    &quot;knn&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;field&quot;: &quot;image-vector&quot;,</span></span><br><span class="line"><span class="string">      &quot;query_vector&quot;: [-5, 10, -12],</span></span><br><span class="line"><span class="string">      &quot;k&quot;: 10,</span></span><br><span class="line"><span class="string">      &quot;num_candidates&quot;: 100</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;fields&quot;: [ &quot;title&quot;, &quot;file-type&quot; ]</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># query: 搜索条件，这里可以不加这个</span></span><br><span class="line"><span class="comment"># knn: 8.8.1 版本开始默认支持</span></span><br><span class="line"><span class="comment"># field: 搜索向量字段</span></span><br><span class="line"><span class="comment"># query_vector: 搜索向量</span></span><br><span class="line"><span class="comment"># k: 搜索结果数量</span></span><br><span class="line"><span class="comment"># num_candidates: 搜索候选数量，用于优化性能</span></span><br><span class="line"><span class="comment"># fields: 搜索结果返回字段</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 Elasticsearch 的 REST APIs&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/8.17/rest-apis.html&quot;&gt;官方文档:REST APIs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;a href=&quot;/2025/04/22/elasticsearch-06-api-aggs/&quot; title=&quot;Elasticsearch 的 REST APIs:聚合查询&quot;&gt;Elasticsearch 的 REST APIs:聚合查询&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch的证书过期处理方法</title>
    <link href="https://blog.hanqunfeng.com/2025/04/16/elasticsearch-04-cert/"/>
    <id>https://blog.hanqunfeng.com/2025/04/16/elasticsearch-04-cert/</id>
    <published>2025-04-16T13:30:05.000Z</published>
    <updated>2025-04-16T09:41:30.609Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍Elasticsearch证书过期时的处理方法</p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/index.html">Elasticsearch</a>版本8.17.3</p></li><li class="lvl-2"><p>本文基于 <a href="/2025/03/20/elasticsearch-01-install/" title="linux下安装Elasticsearch">linux下安装Elasticsearch</a></p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/update-node-certs.html">官方文档:Updating node security certificates</a></p></li></ul><span id="more"></span><h2 id="ES证书简介">ES证书简介</h2><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 8 默认情况下创建的证书只有3年有效期，过期时需要创建新的证书，为了不必要的麻烦，也可以一开始就创建一个有效期比较长的证书。</p></li><li class="lvl-2"><p>在 Elasticsearch 8 的配置下，<code>config/certs</code> 目录通常存放的是用于安全通信的证书和密钥文件。这些文件确保了 Elasticsearch 实例之间的通讯以及与外部客户端的通讯能够被加密且经过认证。</p></li><li class="lvl-2"><p><code>config/certs</code> 目录包含三个文件分别是：</p><ul class="lvl-2"><li class="lvl-4"><code>http.p12</code>: 这是一个 PKCS#12 格式的文件（通常带有.p12或.pfx扩展名），包含了 Elasticsearch HTTP 层用来进行 TLS/SSL 通信所需的一切，包括一个私钥、相应的公钥证书（服务器证书）及 CA 证书链。客户端使用这个文件来验证它们正在与正确的服务器进行通信，并且此服务器也信任该客户端。</li><li class="lvl-4"><code>http_ca.crt</code>: CA (Certificate Authority) 根证书或中间证书，用于验证通过 HTTP 协议连接至 Elasticsearch 服务端点的身份。当客户端尝试建立 HTTPS 连接时，它会检查来自 Elasticsearch 的证书是否由这个 CA 签名；这是确保双方通信安全的重要步骤之一。</li><li class="lvl-4"><code>transport.p12</code>: 同样为 PKCS#12 格式，但这个特定的文件是给 Elasticsearch 节点之间内部传输层使用的。在集群内，节点间需<br>要相互认证，transport.p12就包含着让不同 Elasticsearch 实例能互相识别所需的私钥和证书。</li></ul></li><li class="lvl-2"><p>总之，<code>http.p12</code>服务于面向 Web 的接口，而<code>transport.p12</code>则处理 Elasticsearch 群集内的交互；两者都依赖于<code>http_ca.crt</code>来进行身份验证过程的一部分。</p></li></ul><h2 id="ES证书过期的影响">ES证书过期的影响</h2><ul class="lvl-0"><li class="lvl-2"><p>‌集群无法增加新节点‌：特别是在重启集群时，节点无法加入集群，导致无法正常重启。‌</p></li><li class="lvl-2"><p>‌访问异常‌：如果使用证书连接ES集群，会导致无法正常访问集群。</p></li><li class="lvl-2"><p>‌安全风险‌：证书过期会破坏证书链的信任，可能引发安全漏洞。</p></li><li class="lvl-2"><p>‌日志干扰‌：会持续出现证书过期的错误日志，干扰问题排查和诊断。</p></li></ul><h2 id="查看证书的过期时间">查看证书的过期时间</h2><ul class="lvl-0"><li class="lvl-2"><p>通过openssl查看证书的过期时间</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看crt证书到期时间</span></span><br><span class="line"><span class="comment"># -dates: 显示证书的开始时间和结束时间</span></span><br><span class="line"><span class="comment"># -noout: 不输出证书的详细信息</span></span><br><span class="line">openssl x509 -<span class="keyword">in</span> config/certs/http_ca.crt -dates -noout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看p12证书到期时间</span></span><br><span class="line"><span class="comment"># -clcerts: 只显示证书，不显示私钥</span></span><br><span class="line"><span class="comment"># -nokeys: 不输出私钥</span></span><br><span class="line"><span class="comment"># -password pass: 指定私钥的密码，这里为空(因为在创建证书时没有设置密码)，注意密码必须写在pass:的后面，不加这个参数会提示你输入密码，直接回车即可</span></span><br><span class="line">openssl pkcs12 -<span class="keyword">in</span> ca.p12 -password pass: -clcerts -nokeys | openssl x509 -dates -noout</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>通过ES的API查看证书过期时间</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET -k -u <span class="string">&#x27;elastic:123456&#x27;</span> <span class="string">&#x27;https://127.0.0.1:9200/_ssl/certificates?pretty&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="证书过期处理">证书过期处理</h2><ul class="lvl-0"><li class="lvl-2"><p>Elasticsearch 8 的证书创建需要使用命令行工具 <code>elasticsearch-certutil</code>，这部分的详细信息可以参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/certutil.html">官方文档:elasticsearch-certutil</a></p></li><li class="lvl-2"><p>当证书过期时，需要重新生成证书，并更新<code>config/certs</code>目录下的文件，更新前要备份原证书。</p></li></ul><h3 id="备份原证书">备份原证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> -r config/certs config/certs.bak</span><br><span class="line">$ <span class="built_in">rm</span> -rf config/certs/*</span><br></pre></td></tr></table></figure><h3 id="生成新证书">生成新证书</h3><h4 id="生成CA证书">生成CA证书</h4><ul class="lvl-0"><li class="lvl-2"><p>生成crt证书</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --days 36500: 指定证书的有效期，单位为天，这里设置为 36500 天，大约 10 年</span></span><br><span class="line">$ bin/elasticsearch-certutil ca --pem --out new-ca.zip --days 36500</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">$ unzip new-ca.zip</span><br><span class="line"><span class="comment"># 将创建的证书移动到指定目录</span></span><br><span class="line">$ <span class="built_in">mv</span> ca/ca.crt config/certs/http_ca.crt</span><br><span class="line">$ <span class="built_in">mv</span> ca/ca.key config/certs/http_ca.key</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>也可以生成PKCS#12格式的证书</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/elasticsearch-certutil ca --out config/certs/ca.p12 --days 36500</span><br></pre></td></tr></table></figure><h4 id="生成transport证书">生成transport证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于crt证书</span></span><br><span class="line">$ bin/elasticsearch-certutil cert --ca-cert config/certs/http_ca.crt --ca-key config/certs/http_ca.key --out config/certs/transport.p12 --days 36500</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于PKCS#12格式的证书</span></span><br><span class="line">$ bin/elasticsearch-certutil cert --ca config/certs/ca.p12 --out config/certs/transport.p12 --days 36500</span><br></pre></td></tr></table></figure><h4 id="生成http证书">生成http证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里是交互式命令行</span></span><br><span class="line">$ bin/elasticsearch-certutil http</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>输出说明</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">Generate a CSR? [y/N]n # 不生成CSR</span><br><span class="line">Use an existing CA? [y/N]y # 使用已有的CA</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下区分crt证书和PKCS#12格式的证书</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">crt 证书</span></span><br><span class="line">CA Path: certs/http_ca.crt # CA证书，这里相对路径是相对应 config 目录，也可以是绝对路径</span><br><span class="line">CA Key: certs/http_ca.key # CA密钥，这里相对路径是相对应 config 目录，也可以是绝对路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PKCS#12格式的证书</span></span><br><span class="line">CA Path: certs/ca.p12 # CA证书，这里相对路径是相对应 config 目录，也可以是绝对路径</span><br><span class="line">Password for ca.p12: # CA密码，因为没有设置密码，所以这里直接回车</span><br><span class="line"></span><br><span class="line">For how long should your certificate be valid? [5y] 100y # 证书有效期，单位为年，默认是 5 年，这里设置为 100 年</span><br><span class="line">Generate a certificate per node? [y/N]n # 不为每个节点创建独立的证书，即所有节点都使用同一个证书</span><br><span class="line">Enter all the hostnames that you need, one per line.</span><br><span class="line">When you are done, press &lt;ENTER&gt; once more to move on to the next step.</span><br><span class="line"></span><br><span class="line">localhost # 主机名，这里可以添加多个，回车一行一个，这里应该填写集群内所有节点服务器的hostname，可以通过 hostname 命令查看</span><br><span class="line">ip-10-250-0-17.cn-northwest-1.compute.internal</span><br><span class="line">ip-10-250-0-173.cn-northwest-1.compute.internal</span><br><span class="line">ip-10-250-0-239.cn-northwest-1.compute.internal</span><br><span class="line"></span><br><span class="line">You entered the following hostnames.</span><br><span class="line"></span><br><span class="line"> - localhost</span><br><span class="line"> - ip-10-250-0-17.cn-northwest-1.compute.internal</span><br><span class="line"> - ip-10-250-0-173.cn-northwest-1.compute.internal</span><br><span class="line"> - ip-10-250-0-239.cn-northwest-1.compute.internal</span><br><span class="line"></span><br><span class="line">Is this correct [Y/n]y # 确认主机名是否正确</span><br><span class="line"></span><br><span class="line">Enter all the IP addresses that you need, one per line.</span><br><span class="line">When you are done, press &lt;ENTER&gt; once more to move on to the next step.</span><br><span class="line"></span><br><span class="line">127.0.0.1 # 主机IP，这里可以添加多个，回车一行一个，这里应该填写集群内所有节点服务器的IP地址</span><br><span class="line">10.250.0.17</span><br><span class="line">10.250.0.173</span><br><span class="line">10.250.0.239</span><br><span class="line"></span><br><span class="line">You entered the following IP addresses.</span><br><span class="line"></span><br><span class="line"> - 127.0.0.1</span><br><span class="line"> - 10.250.0.17</span><br><span class="line"> - 10.250.0.173</span><br><span class="line"> - 10.250.0.239</span><br><span class="line"></span><br><span class="line">Is this correct [Y/n]y # 确认IP是否正确</span><br><span class="line"></span><br><span class="line">Do you wish to change any of these options? [y/N]n # 不修改任何选项</span><br><span class="line"></span><br><span class="line">If you wish to use a blank password, simply press &lt;enter&gt; at the prompt below.</span><br><span class="line">Provide a password for the &quot;http.p12&quot; file:  [&lt;ENTER&gt; for none] # 直接回车不设置密码</span><br><span class="line"></span><br><span class="line">What filename should be used for the output zip file? [/usr/local/elasticsearch/elasticsearch-8.17.3/elasticsearch-ssl-http.zip] # 输出文件名，这里可以自定义，默认是 elasticsearch-ssl-http.zip</span><br><span class="line"></span><br><span class="line">Zip file written to /usr/local/elasticsearch/elasticsearch-8.17.3/elasticsearch-ssl-http.zip</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>解压并将http证书拷贝到config/certs目录下</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ unzip elasticsearch-ssl-http.zip</span><br><span class="line">Archive:  elasticsearch-ssl-http.zip</span><br><span class="line">   creating: elasticsearch/</span><br><span class="line">  inflating: elasticsearch/README.txt <span class="comment"># 说明文件</span></span><br><span class="line">  inflating: elasticsearch/http.p12  <span class="comment"># http证书</span></span><br><span class="line">  inflating: elasticsearch/sample-elasticsearch.yml <span class="comment"># 示例elasticsearch配置文件</span></span><br><span class="line">   creating: kibana/</span><br><span class="line">  inflating: kibana/README.txt <span class="comment"># 说明文件</span></span><br><span class="line">  inflating: kibana/elasticsearch-ca.pem  <span class="comment"># kibana用于验证ES的证书，即 elasticsearch.ssl.certificateAuthorities 中的配置</span></span><br><span class="line">  inflating: kibana/sample-kibana.yml <span class="comment"># 示例kibana配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将http证书拷贝到config/certs目录下</span></span><br><span class="line">$ <span class="built_in">cp</span> elasticsearch/http.p12 config/certs/http.p12</span><br></pre></td></tr></table></figure><h3 id="分发到ES集群中的每个节点">分发到ES集群中的每个节点</h3><ul class="lvl-0"><li class="lvl-2"><p>上面创建新的证书时我们只在一个节点上进行即可，之后将生成好的证书分发到ES集群中的其它节点，这里就是 <code>http.p12</code> 和 <code>transport.p12</code>，将其拷贝到每个节点的 <code>config/certs</code> 目录下，拷贝前做好原证书的备份。</p></li><li class="lvl-2"><p>如有必要也可以拷贝 <code>ca.p12</code> 或者 <code>http_ca.crt</code> 和 <code>http_ca.key</code> 到每个节点的 <code>config/certs</code> 目录下</p></li></ul><h3 id="重启ES服务">重启ES服务</h3><ul class="lvl-0"><li class="lvl-2"><p>集群中的节点依次重启</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/elasticsearch -d</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>重启时可能会报错</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.elasticsearch.ElasticsearchSecurityException: failed to load SSL configuration [xpack.security.transport.ssl] - cannot <span class="built_in">read</span> configured [PKCS12] keystore (as a truststore) [/usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/transport.p12] - this is usually caused by an incorrect password; (a keystore password was provided)</span><br><span class="line"><span class="comment"># 虽然我们没有给transport.p12设置密码，但这里依旧提示提供的密码不正确，实际上这里使用的是 secure_password</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>解决方法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用bin/elasticsearch-keystore list查看现有的密钥列表</span></span><br><span class="line">$ bin/elasticsearch-keystore list</span><br><span class="line">keystore.seed</span><br><span class="line">xpack.security.http.ssl.keystore.secure_password</span><br><span class="line">xpack.security.transport.ssl.keystore.secure_password</span><br><span class="line">xpack.security.transport.ssl.truststore.secure_password</span><br><span class="line"><span class="comment"># 删除secure_password后再次重启ES服务就会正常了</span></span><br><span class="line">$ bin/elasticsearch-keystore remove xpack.security.http.ssl.keystore.secure_password</span><br><span class="line">$ bin/elasticsearch-keystore remove xpack.security.transport.ssl.keystore.secure_password</span><br><span class="line">$ bin/elasticsearch-keystore remove xpack.security.transport.ssl.truststore.secure_password</span><br></pre></td></tr></table></figure><h3 id="替换Kibana的证书">替换Kibana的证书</h3><ul class="lvl-0"><li class="lvl-2"><p>将上面创建好的 <code>kibana/elasticsearch-ca.pem</code> 拷贝到Kibana服务器，比如 <code>/usr/local/kibana/kibana-8.17.3/config/certs/elasticsearch-ca.pem</code></p></li><li class="lvl-2"><p>修改Kibana配置文件 <code>config/kibana.yml</code> 中的 <code>elasticsearch.ssl.certificateAuthorities</code> 配置，使其指向 <code>/usr/local/kibana/kibana-8.17.3/config/certs/elasticsearch-ca.pem</code></p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elasticsearch.ssl.certificateAuthorities:</span> [<span class="string">&quot;/usr/local/kibana/kibana-8.17.3/config/certs/elasticsearch-ca.pem&quot;</span>]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>重启Kibana服务</p></li></ul><h2 id="证书格式转换">证书格式转换</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p12转换为crt格式</span></span><br><span class="line">$ openssl pkcs12 -<span class="keyword">in</span> config/certs/ca.p12 -out config/certs/http_ca.crt -nokeys</span><br><span class="line"><span class="comment"># p12转换为key格式</span></span><br><span class="line">$ openssl pkcs12 -<span class="keyword">in</span> config/certs/ca.p12 -out config/certs/http_ca.key -nocerts -nodes</span><br><span class="line"><span class="comment"># p12转换为pem格式</span></span><br><span class="line">$ openssl pkcs12 -<span class="keyword">in</span> config/certs/ca.p12 -out config/certs/http_ca.pem -nodes</span><br><span class="line"><span class="comment"># crt转换回PKCS12格式</span></span><br><span class="line">$ openssl pkcs12 -<span class="built_in">export</span> -out config/certs/http_ca.p12 -inkey config/certs/http_ca.key -<span class="keyword">in</span> config/certs/http_ca.crt -name <span class="string">&quot;My CA&quot;</span></span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>生成http证书时为每个节点单独配置证书</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Generate a certificate per node? [y/N]y <span class="comment"># 是否为每个节点单独配置证书，这里选择是</span></span><br><span class="line">node <span class="comment">#1 name: node-1 # 节点名称，必须与ES配置文件中的node.name一致</span></span><br><span class="line"></span><br><span class="line">Enter all the hostnames that you need, one per line. <span class="comment"># 输入 node-1 节点的hostname</span></span><br><span class="line">When you are <span class="keyword">done</span>, press &lt;ENTER&gt; once more to move on to the next step.</span><br><span class="line"></span><br><span class="line">localhost                                         <span class="comment"># 习惯加上 localhost</span></span><br><span class="line">ip-10-250-0-239.cn-northwest-1.compute.internal   <span class="comment"># node-1 的 hostname</span></span><br><span class="line"></span><br><span class="line">You entered the following hostnames.</span><br><span class="line"></span><br><span class="line"> - localhost</span><br><span class="line"> - ip-10-250-0-239.cn-northwest-1.compute.internal</span><br><span class="line"></span><br><span class="line">Is this correct [Y/n]y <span class="comment"># 确认是否正确</span></span><br><span class="line"></span><br><span class="line">Enter all the IP addresses that you need, one per line. <span class="comment"># 输入 node-1 节点的IP地址</span></span><br><span class="line">When you are <span class="keyword">done</span>, press &lt;ENTER&gt; once more to move on to the next step.</span><br><span class="line"></span><br><span class="line">127.0.0.1                                         <span class="comment"># 习惯加上 127.0.0.1</span></span><br><span class="line">10.250.0.239                                      <span class="comment"># node-1 的 IP</span></span><br><span class="line"></span><br><span class="line">You entered the following IP addresses.</span><br><span class="line"></span><br><span class="line"> - 127.0.0.1</span><br><span class="line"> - 10.250.0.239</span><br><span class="line"></span><br><span class="line">Is this correct [Y/n]y <span class="comment"># 确认是否正确</span></span><br><span class="line"></span><br><span class="line">Do you wish to change any of these options? [y/N]n <span class="comment"># 不修改任何选项</span></span><br><span class="line">Generate additional certificates? [Y/n]y  <span class="comment"># 是否生成其他证书，这里选择是，接着为其它节点创建证书</span></span><br><span class="line">node <span class="comment">#2 name: node-2 # 节点名称，必须与ES配置文件中的node.name一致</span></span><br><span class="line"><span class="comment"># 依次为每个节点创建证书</span></span><br><span class="line">………………</span><br><span class="line"></span><br><span class="line">Generate additional certificates? [Y/n]n <span class="comment"># 创建好所有节点的证书后，选择n，不再创建新的证书</span></span><br><span class="line"></span><br><span class="line">If you wish to use a blank password, simply press &lt;enter&gt; at the prompt below.</span><br><span class="line">Provide a password <span class="keyword">for</span> the <span class="string">&quot;http.p12&quot;</span> file:  [&lt;ENTER&gt; <span class="keyword">for</span> none] <span class="comment"># 直接回车不设置密码</span></span><br><span class="line"></span><br><span class="line">What filename should be used <span class="keyword">for</span> the output zip file? [/usr/local/elasticsearch/elasticsearch-8.17.3/elasticsearch-ssl-http.zip] <span class="comment"># 输出文件名，这里可以自定义，默认是 elasticsearch-ssl-http.zip</span></span><br><span class="line"></span><br><span class="line">Zip file written to /usr/local/elasticsearch/elasticsearch-8.17.3/elasticsearch-ssl-http.zip</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">此时解压查看文件结构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unzip elasticsearch-ssl-http.zip</span><br><span class="line">Archive:  elasticsearch-ssl-http.zip</span><br><span class="line">   creating: elasticsearch/</span><br><span class="line">   creating: elasticsearch/node-1/</span><br><span class="line">  inflating: elasticsearch/node-1/README.txt</span><br><span class="line">  inflating: elasticsearch/node-1/http.p12  <span class="comment"># node-1 的证书</span></span><br><span class="line">  inflating: elasticsearch/node-1/sample-elasticsearch.yml</span><br><span class="line">   creating: elasticsearch/node-2/</span><br><span class="line">  inflating: elasticsearch/node-2/README.txt</span><br><span class="line">  inflating: elasticsearch/node-2/http.p12 <span class="comment"># node-2 的证书</span></span><br><span class="line">  inflating: elasticsearch/node-2/sample-elasticsearch.yml</span><br><span class="line">  creating: elasticsearch/node-3/</span><br><span class="line">  inflating: elasticsearch/node-3/README.txt</span><br><span class="line">  inflating: elasticsearch/node-3/http.p12 <span class="comment"># node-3 的证书</span></span><br><span class="line">  inflating: elasticsearch/node-3/sample-elasticsearch.yml</span><br><span class="line">   creating: kibana/</span><br><span class="line">  inflating: kibana/README.txt</span><br><span class="line">  inflating: kibana/elasticsearch-ca.pem <span class="comment"># kibana 的证书</span></span><br><span class="line">  inflating: kibana/sample-kibana.yml</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2"><p>将对应的证书拷贝到对应节点的 <code>config/certs</code> 目录下</p></li></ul></div>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍Elasticsearch证书过期时的处理方法&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/8.17/index.html&quot;&gt;Elasticsearch&lt;/a&gt;版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于 &lt;a href=&quot;/2025/03/20/elasticsearch-01-install/&quot; title=&quot;linux下安装Elasticsearch&quot;&gt;linux下安装Elasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/8.17/update-node-certs.html&quot;&gt;官方文档:Updating node security certificates&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Springboot整合Logstash实现日志采集</title>
    <link href="https://blog.hanqunfeng.com/2025/04/07/elk-02-springboot/"/>
    <id>https://blog.hanqunfeng.com/2025/04/07/elk-02-springboot/</id>
    <published>2025-04-07T13:30:05.000Z</published>
    <updated>2025-04-08T08:26:08.292Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何在Springboot项目中整合LogStash实现日志采集</p></li><li class="lvl-2"><p>本文基于Springboot2.7.x版本进行测试，Logstash版本为8.17.3</p></li></ul><span id="more"></span><h2 id="使用logstash日志插件">使用logstash日志插件</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://github.com/logfellow/logstash-logback-encoder">SpringBoot的Logstash日志插件</a>，本文只进行简单介绍，更多详细配置可以参考<a href="https://github.com/logfellow/logstash-logback-encoder">官方文档</a></p></li><li class="lvl-2"><p>引入依赖，这里需要注意8.x以上的版本需要jdk11，如果是jdk8的话可以使用6.x或7.x版本</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 版本号根据实际情况修改 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>springboot2.7.x以下版本，建议使用logstash-logback-encoder的7.3以下版本。<br>springboot3.x.x以上版本，建议使用logstash-logback-encoder的7.4及以上版本。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><code>logback-spring.xml</code>中添加logstash配置</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %logger&#123;50&#125;：类路径，最大显示50个字符 %M：方法名称 %L：行号 %msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%thread] %-5level [%X&#123;userName&#125;][%X&#123;userLocale&#125;] %logger&#123;50&#125; - %M - %L - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- logstash输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOGSTASH&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>161.189.78.202:4560<span class="tag">&lt;/<span class="name">destination</span>&gt;</span> <span class="comment">&lt;!-- logstash地址和端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LogstashEncoder&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timestampPattern</span>&gt;</span>yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS<span class="tag">&lt;/<span class="name">timestampPattern</span>&gt;</span> <span class="comment">&lt;!-- 时间格式，这个是默认值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeMdc</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeMdc</span>&gt;</span>   <span class="comment">&lt;!-- 默认true, true表示输出MDC信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeCallerData</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeCallerData</span>&gt;</span> <span class="comment">&lt;!-- 默认false, true表示输出打印日志的类名、方法名、行号等信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">customFields</span>&gt;</span>&#123;&quot;appname&quot;: &quot;springboot-logstash-demo&quot;&#125;<span class="tag">&lt;/<span class="name">customFields</span>&gt;</span> <span class="comment">&lt;!-- 自定义字段 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOGSTASH&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>添加<code>config/springboot-demo.conf</code>配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    host =&gt; <span class="string">&quot;0.0.0.0&quot;</span> <span class="comment"># 监听任意地址</span></span><br><span class="line">    port =&gt; <span class="string">&quot;4560&quot;</span> <span class="comment"># 监听端口</span></span><br><span class="line">    mode =&gt; <span class="string">&quot;server&quot;</span> <span class="comment"># server模式</span></span><br><span class="line">    codec =&gt; json_lines <span class="comment"># 使用json_lines格式</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">  elasticsearch &#123; <span class="comment"># 输出到ES</span></span><br><span class="line">        index =&gt; <span class="string">&quot;%&#123;[appname]&#125;-%&#123;+YYYY-MM-DD&#125;&quot;</span> <span class="comment"># 索引名,按天分隔，这里使用变量appname作为索引名</span></span><br><span class="line">        hosts =&gt; [<span class="string">&quot;https://10.250.0.239:9200&quot;</span>] <span class="comment"># ES地址</span></span><br><span class="line">        user =&gt; <span class="string">&quot;elastic&quot;</span>                   <span class="comment"># ES用户名</span></span><br><span class="line">        password =&gt; <span class="string">&quot;123456&quot;</span>                <span class="comment"># ES密码</span></span><br><span class="line">        ssl =&gt; <span class="literal">true</span>                         <span class="comment"># 是否启用SSL，因为这里是https访问ES</span></span><br><span class="line">        ssl_certificate_verification =&gt; <span class="literal">false</span> <span class="comment"># 禁用证书验证</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动logstash</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/springboot-demo.conf --config.reload.automatic</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>logstash启动成功后，会输出类似如下信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;Tomcat started on port(s): 8088 (http) with context path &#x27;/springboot-logstash&#x27;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;level_value&quot;</span> =&gt; 20000,</span><br><span class="line">            <span class="string">&quot;appname&quot;</span> =&gt; <span class="string">&quot;springboot-logstash-demo&quot;</span>,</span><br><span class="line">              <span class="string">&quot;level&quot;</span> =&gt; <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">        <span class="string">&quot;logger_name&quot;</span> =&gt; <span class="string">&quot;org.springframework.boot.web.embedded.tomcat.TomcatWebServer&quot;</span>,</span><br><span class="line">         <span class="string">&quot;@timestamp&quot;</span> =&gt; 2025-04-07T09:39:43.569Z,</span><br><span class="line">           <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;thread_name&quot;</span> =&gt; <span class="string">&quot;restartedMain&quot;</span>,</span><br><span class="line">        <span class="string">&quot;caller_class_name&quot;</span> =&gt; <span class="string">&quot;org.springframework.boot.web.embedded.tomcat.TomcatWebServer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;caller_file_name&quot;</span> =&gt; <span class="string">&quot;TomcatWebServer.java&quot;</span>,</span><br><span class="line">        <span class="string">&quot;caller_method_name&quot;</span> =&gt; <span class="string">&quot;start&quot;</span>,</span><br><span class="line">        <span class="string">&quot;caller_line_number&quot;</span> =&gt; 220,</span><br><span class="line">        <span class="string">&quot;userName&quot;</span> =&gt; <span class="string">&quot;admin&quot;</span>, <span class="comment"># MDC信息默认会打印</span></span><br><span class="line">        <span class="string">&quot;userLocale&quot;</span> =&gt; <span class="string">&quot;zh_CN&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>可以访问ES或者Kibana查看索引信息，这里不再赘述。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在Springboot项目中整合LogStash实现日志采集&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于Springboot2.7.x版本进行测试，Logstash版本为8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/"/>
    
    <category term="logstash" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/logstash/"/>
    
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/tags/springboot/"/>
    
    <category term="logstash" scheme="https://blog.hanqunfeng.com/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>一文搞懂ELK</title>
    <link href="https://blog.hanqunfeng.com/2025/03/27/elk-01/"/>
    <id>https://blog.hanqunfeng.com/2025/03/27/elk-01/</id>
    <published>2025-03-27T13:30:05.000Z</published>
    <updated>2025-04-08T08:42:47.683Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何在linux下安装LogStash和FileBeat</p></li><li class="lvl-2"><p>通过示例讲解ELK的经典架构和高并发架构的实现过程</p></li><li class="lvl-2"><p>LogStash版本8.17.3，FileBeat版本8.17.3</p></li><li class="lvl-2"><p>Elasticsearch版本8.17.3，<a href="/2025/03/20/elasticsearch-01-install/" title="linux下安装Elasticsearch">linux下安装Elasticsearch</a></p></li><li class="lvl-2"><p>Kibana版本8.17.3，<a href="/2025/03/21/kibana-01-install/" title="linux下安装Kibana">linux下安装Kibana</a></p></li><li class="lvl-2"><p>Elasticsearch集群搭建，<a href="/2025/03/24/elasticsearch-02-install-cluster/" title="linux下安装Elasticsearch集群">linux下安装Elasticsearch集群</a></p></li></ul><span id="more"></span><h2 id="Logstash概述">Logstash概述</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.elastic.co/cn/logstash">Logstash</a> 是免费且开放的服务器端数据处理管道，能够从多个来源采集数据，转换数据，然后将数据发送到您最喜欢的存储库中。</p></li><li class="lvl-2"><p>Logstash数据传输原理<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/image-2.png" alt=""></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.数据采集与输入：Logstash支持各种输入选择，能够以连续的流式传输方式，轻松地从日志、指标、Web应用以及数据存储中采集数据。</span><br><span class="line">2.实时解析和数据转换：通过Logstash过滤器解析各个事件，识别已命名的字段来构建结构，并将它们转换成通用格式，最终将数据从源端传输到存储库中。</span><br><span class="line">3.存储与数据导出：Logstash提供多种输出选择，可以将数据发送到指定的地方。</span><br></pre></td></tr></table></figure><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/%E6%88%AA%E5%9B%BE-3.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>Logstash通过管道完成数据的采集与处理，管道配置中包含input、output和filter（可选）插件，input和output用来配置输入和输出数据源、filter用来对数据进行过滤或预处理。</p></li></ul><h2 id="Logstash下载安装">Logstash下载安装</h2><ul class="lvl-0"><li class="lvl-2"><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#logstash">https://www.elastic.co/cn/downloads/past-releases#logstash</a></p></li><li class="lvl-2"><p>选择对应的版本：这里选择当前的最新版<code>LogStash 8.17.3</code>，之后选择对应的操作系统<code>LINUX X86_64</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-8.17.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>下载完成后解压到<code>/usr/local/logstash</code>目录下，解压命令如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/logstash</span><br><span class="line">tar -zxvf logstash-8.17.3-linux-x86_64.tar.gz -C /usr/local/logstash</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>elasticsearch和kibana都不能用root用户启动，为了统一管理，logstash也使用这个用户（非必要）</p></li><li class="lvl-2"><p>创建用户<code>elastic</code>，并设置密码，这一步我们在安装elasticsearch的时候已经配置过了，这里就不再赘述了</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd elastic</span><br><span class="line">passwd elastic</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改logstash安装目录的用户权限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R elastic:elastic /usr/local/logstash</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>切换到elastic用户下执行命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su - elastic</span><br><span class="line"><span class="comment"># 进入logstash安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/logstash/logstash-8.17.3/</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>运行一个简单的测试</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -e: 直接把配置放在命令中，这样可以有效快速进行测试</span></span><br><span class="line"><span class="comment"># input &#123; stdin &#123; &#125; &#125;: 输入插件，从标准输入中读取数据</span></span><br><span class="line"><span class="comment"># output &#123; stdout &#123;&#125; &#125;: 输出插件，将数据输出到标准输出</span></span><br><span class="line"><span class="comment"># 这里只包含了 input 和 output 两个部分，实际使用中还需要添加 filter 部分</span></span><br><span class="line">./bin/logstash -e <span class="string">&#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">。。。。。。。 <span class="comment"># 输出启动信息</span></span><br><span class="line">The stdin plugin is now waiting <span class="keyword">for</span> input: <span class="comment"># 输出提示信息，提示你输入内容</span></span><br><span class="line">hello world  <span class="comment"># 我输入内容</span></span><br><span class="line"><span class="comment"># logstash输出内容</span></span><br><span class="line">&#123;</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">         <span class="string">&quot;event&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;original&quot;</span> =&gt; <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;hostname&quot;</span> =&gt; <span class="string">&quot;ip-10-250-0-239.cn-northwest-1.compute.internal&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2025-03-27T06:48:12.810617855Z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>也可以通过配置文件启动logstash</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim test.conf</span></span><br><span class="line">input &#123;</span><br><span class="line">  stdin &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># codec =&gt; rubydebug : 是指定了一个编码器（Codec）为 rubydebug。</span></span><br><span class="line"><span class="comment"># 编码器负责如何格式化输出的数据。</span></span><br><span class="line"><span class="comment"># Rubydebug 编码器是一种特别适合开发和调试目的的编码器，因为它能以相当易读的形式展示复杂的结构化数据，比如嵌套的哈希表或者数组。</span></span><br><span class="line"><span class="comment"># 除了 Rubydebug 编码器，Logstash 还提供了其他几种编码器，比如 json、plain、multiline 等等。</span></span><br><span class="line"><span class="comment"># 具体可以参考官方文档：https://www.elastic.co/guide/en/logstash/current/codec-plugins.html</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/logstash -f ./test.conf</span><br></pre></td></tr></table></figure><h2 id="Logstash插件">Logstash插件</h2><h3 id="Input-Plugins">Input Plugins</h3><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/8.17/input-plugins.html">https://www.elastic.co/guide/en/logstash/8.17/input-plugins.html</a></p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>一个 Pipeline可以有多个input插件</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- Stdin / File</span><br><span class="line">- Beats / Log4J /Elasticsearch / JDBC / Kafka /Rabbitmq /Redis</span><br><span class="line">- JMX/ HTTP / Websocket / UDP / TCP</span><br><span class="line">- Google Cloud Storage / S3</span><br><span class="line">- Github / Twitter</span><br></pre></td></tr></table></figure><h3 id="Filter-Plugins">Filter Plugins</h3><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/8.17/filter-plugins.html">https://www.elastic.co/guide/en/logstash/8.17/filter-plugins.html</a></p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>Filter Plugin可以对Logstash Event进行各种处理，例如解析，删除字段，类型转换</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- Date: 日期解析</span><br><span class="line">- Dissect: 分割符解析</span><br><span class="line">- Grok: 正则匹配解析</span><br><span class="line">- Mutate: 对字段做各种操作</span><br><span class="line">- Convert : 类型转换</span><br><span class="line">- Gsub : 字符串替换</span><br><span class="line">- Split / Join /Merge:  字符串切割，数组合并字符串，数组合并数组</span><br><span class="line">- Rename: 字段重命名</span><br><span class="line">- Update / Replace: 字段内容更新替换</span><br><span class="line">- Remove_field: 字段删除</span><br><span class="line">- Ruby: 利用Ruby 代码来动态修改Event</span><br></pre></td></tr></table></figure><h3 id="Output-Plugins">Output Plugins</h3><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/8.17/output-plugins.html">https://www.elastic.co/guide/en/logstash/8.17/output-plugins.html</a></p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>将Event发送到特定的目的地，是 Pipeline 的最后一个阶段。常见 Output Plugins：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- Elasticsearch</span><br><span class="line">- Email / Pageduty</span><br><span class="line">- Influxdb / Kafka / Mongodb / Opentsdb / Zabbix</span><br><span class="line">- Http / TCP / Websocket</span><br></pre></td></tr></table></figure><h3 id="Codec-Plugins">Codec Plugins</h3><blockquote><p><a href="https://www.elastic.co/guide/en/logstash/8.17/codec-plugins.html">https://www.elastic.co/guide/en/logstash/8.17/codec-plugins.html</a></p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>将原始数据decode成Event;将Event encode成目标数据，内置的Codec Plugins:</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- Line / Multiline</span><br><span class="line">- JSON / Avro / Cef (ArcSight Common Event Format)</span><br><span class="line">- Dots / Rubydebug</span><br></pre></td></tr></table></figure><h2 id="FileBeat概述">FileBeat概述</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.elastic.co/cn/beats">Beats</a> 是一个免费且开放的平台，集合了多种单一用途的数据采集器。它们从成百上千或成千上万台机器和系统向 Logstash 或 Elasticsearch 发送数据。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/iEmI1C.png" alt=""></p></li><li class="lvl-2"><p><a href="https://www.elastic.co/cn/beats/filebeat">FileBeat</a> 专门用于转发和收集日志数据的轻量级采集工具。它可以作为代理安装在服务器上，FileBeat监视指定路径的日志文件，收集日志数据，并将收集到的日志转发到Elasticsearch或者Logstash。</p></li></ul><h2 id="logstash-vs-FileBeat">logstash vs FileBeat</h2><ul class="lvl-0"><li class="lvl-2"><p>Logstash是在jvm上运行的，资源消耗比较大。而FileBeat是基于golang编写的，功能较少但资源消耗也比较小，更轻量级。</p></li><li class="lvl-2"><p>Logstash 和Filebeat都具有日志收集功能，Filebeat更轻量，占用资源更少</p></li><li class="lvl-2"><p>Logstash 具有Filter功能，能过滤分析日志</p></li><li class="lvl-2"><p>一般结构都是Filebeat采集日志，然后发送到消息队列、Redis、MQ中，然后Logstash去获取，利用Filter功能过滤分析，然后存储到Elasticsearch中</p></li><li class="lvl-2"><p>FileBeat和Logstash配合，实现背压机制。当将数据发送到Logstash或 Elasticsearch时，Filebeat使用背压敏感协议，以应对更多的数据量。如果Logstash正在忙于处理数据，则会告诉Filebeat 减慢读取速度。一旦拥堵得到解决，Filebeat就会恢复到原来的步伐并继续传输数据。</p></li></ul><h2 id="FileBeat下载和安装">FileBeat下载和安装</h2><ul class="lvl-0"><li class="lvl-2"><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#filebeat">https://www.elastic.co/cn/downloads/past-releases#filebeat</a></p></li><li class="lvl-2"><p>选择对应的版本：这里选择当前的最新版<code>FileBeat 8.17.3</code>，之后选择对应的操作系统<code>LINUX X86_64</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-8.17.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>下载完成后解压到<code>/usr/local/filebeat</code>目录下，解压命令如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/filebeat</span><br><span class="line">tar -zxvf filebeat-8.17.3-linux-x86_64.tar.gz -C /usr/local/filebeat</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改logstash安装目录的用户权限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R elastic:elastic /usr/local/filebeat</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>切换到elastic用户下执行命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su - elastic</span><br><span class="line"><span class="comment"># 进入 filebeat 安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/filebeat/filebeat-8.17.3-linux-x86_64/</span><br></pre></td></tr></table></figure><h2 id="经典的ELK架构">经典的ELK架构</h2><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/%E6%88%AA%E5%9B%BE.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>Filebeat日志收集：Filebeat作为轻量级的日志收集代理，部署在客户端上，消耗资源少，能够高效地收集日志数据。</p></li><li class="lvl-2"><p>Logstash数据处理：Logstash作为数据处理管道，负责将Filebeat收集的日志数据进行过滤、转换等操作，然后发送到Elasticsearch进行存储。</p></li><li class="lvl-2"><p>Elasticsearch存储与搜索：Elasticsearch是一个基于Lucene的分布式搜索和分析引擎，提供强大的数据存储和搜索能力。</p></li><li class="lvl-2"><p>Kibana可视化：Kibana为Elasticsearch提供Web可视化界面，允许用户通过图表、仪表盘等方式直观地查看和分析日志数据。</p></li><li class="lvl-2"><p>适用场景：经典的ELK架构主要适用于数据量较小的开发环境。然而，由于缺少消息队列的缓冲机制，当Logstash或Elasticsearch出现故障时，可能存在数据丢失的风险。</p></li></ul><h2 id="一个经典ELK架构示例">一个经典ELK架构示例</h2><h3 id="FileBeat采集Nginx服务器日志并发送到Logstash">FileBeat采集Nginx服务器日志并发送到Logstash</h3><ul class="lvl-0"><li class="lvl-2"><p>创建配置文件<code>filebeat-nginx.yml</code>，将其保存到Filebeat安装目录下的conf目录下。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为Nginx的access.log日志都是以IP地址开头的，所以我们需要修改下匹配字段。</span></span><br><span class="line"><span class="comment"># 不以ip地址开头的行追加到上一行</span></span><br><span class="line"><span class="attr">filebeat.inputs:</span> <span class="comment"># 输入源配置</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span> <span class="comment"># 日志类型</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">paths:</span> <span class="comment"># 采集路径</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/log/nginx/access*.*</span></span><br><span class="line">  <span class="attr">exclude_files:</span> [<span class="string">&quot;.gz$&quot;</span>] <span class="comment"># 排除以.gz 结尾的文件</span></span><br><span class="line">  <span class="attr">multiline.pattern:</span> <span class="string">&#x27;^\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\s&#x27;</span> <span class="comment"># 匹配以IP地址开头，并紧跟一个空白字符</span></span><br><span class="line">  <span class="attr">multiline.negate:</span> <span class="literal">true</span> <span class="comment"># 不以ip地址开头的行追加到上一行</span></span><br><span class="line">  <span class="attr">multiline.match:</span> <span class="string">after</span> <span class="comment"># 追加到上一行的后面</span></span><br><span class="line">  <span class="comment"># multiline: 多行日志配置，这里实际上不需要配置多行设置，因为nginx的access日志都是单行日志，这里只做演示</span></span><br><span class="line">    <span class="comment"># pattern: 正则表达式</span></span><br><span class="line">    <span class="comment"># negate: false，匹配pattern的行合并到上一行；true，不匹配pattern的行合并到上一行</span></span><br><span class="line">    <span class="comment"># match: after，合并到上一行的末尾；before，合并到上一行的开头</span></span><br><span class="line">  <span class="attr">scan_frequency:</span> <span class="string">10s</span> <span class="comment"># 每 10 秒扫描一次日志文件</span></span><br><span class="line">  <span class="attr">clean_removed:</span> <span class="literal">true</span> <span class="comment"># 在日志文件被删除后是否从其内部状态中移除该文件的记录</span></span><br><span class="line">  <span class="attr">clean_inactive:</span> <span class="string">2h</span> <span class="comment"># 在日志文件处于非活动状态多长时间后将其从状态数据库中移,设置为比 ignore_older + scan_frequency 更大的值</span></span><br><span class="line">  <span class="attr">ignore_older:</span> <span class="string">1h</span> <span class="comment"># 忽略那些比当前时间早于 1 小时的日志文件</span></span><br><span class="line"><span class="attr">output.logstash:</span> <span class="comment"># 输出配置，这里是发送到Logstash</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;10.250.0.239:5044&quot;</span>] <span class="comment"># Logstash服务地址</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>为FileBeat的用户分配日志目录的读取权限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 setfacl命令为elastic用户分配日志目录的读取权限</span></span><br><span class="line"><span class="built_in">sudo</span> setfacl -d -m u:elastic:r-x -R /var/log/nginx/</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动FileBeat</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e -c conf/filebeat-nginx.yml</span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line"><span class="built_in">nohup</span> ./filebeat -e -c conf/filebeat-nginx.yml &amp;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在启动filebeat时可能会遇到如下错误</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exiting: error loading config file: config file (<span class="string">&quot;conf/filebeat-nginx.yml&quot;</span>) can only be writable by the owner but the permissions are <span class="string">&quot;-rw-rw-r--&quot;</span> (to fix the permissions use: <span class="string">&#x27;chmod go-w /usr/local/filebeat/filebeat-8.17.3-linux-x86_64/conf/filebeat-nginx.yml&#x27;</span>)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-4"><p>因为安全原因不要其他用户写的权限，去掉写的权限就可以了</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> go-w conf/filebeat-nginx.yml</span><br></pre></td></tr></table></figure><h3 id="配置Logstash接收FileBeat收集的数据并打印">配置Logstash接收FileBeat收集的数据并打印</h3><ul class="lvl-0"><li class="lvl-2"><p>创建配置文件<code>logstash-nginx.conf</code>，将其保存到Logstash安装目录下的config目录下。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入logstash安装目录</span></span><br><span class="line"><span class="comment"># vim config/logstash-nginx.conf</span></span><br><span class="line"><span class="comment"># 配置从FileBeat接收数据</span></span><br><span class="line">input &#123; <span class="comment"># 输入源配置</span></span><br><span class="line">    beats &#123; <span class="comment"># 从FileBeat接收数据</span></span><br><span class="line">      port =&gt; 5044 <span class="comment"># 监听5044端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123; <span class="comment"># 输出配置</span></span><br><span class="line">    stdout &#123; <span class="comment"># 打印到控制台</span></span><br><span class="line">      codec =&gt; rubydebug <span class="comment"># 指定编码器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>测试logstash配置是否正确</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/logstash-nginx.conf --config.test_and_exit</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动logstash</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reload.automatic：修改配置文件时自动重新加载</span></span><br><span class="line">bin/logstash -f config/logstash-nginx.conf --config.reload.automatic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时在控制台会看到如下输出：</span></span><br><span class="line">&#123;</span><br><span class="line">         <span class="string">&quot;input&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;log&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;1.119.161.30 - elastic [27/Mar/2025:08:52:41 +0000] \&quot;GET /_cluster/stats HTTP/1.1\&quot; 200 7445 \&quot;-\&quot; \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36\&quot; \&quot;-\&quot;&quot;</span>,</span><br><span class="line">           <span class="string">&quot;log&quot;</span> =&gt; &#123;</span><br><span class="line">          <span class="string">&quot;file&quot;</span> =&gt; &#123;</span><br><span class="line">            <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;/var/log/nginx/access.log&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;offset&quot;</span> =&gt; 42985</span><br><span class="line">    &#125;,</span><br><span class="line">          <span class="string">&quot;tags&quot;</span> =&gt; [</span><br><span class="line">        [0] <span class="string">&quot;beats_input_codec_plain_applied&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2025-03-27T08:52:42.947Z,</span><br><span class="line">           <span class="string">&quot;ecs&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;version&quot;</span> =&gt; <span class="string">&quot;8.0.0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">         <span class="string">&quot;agent&quot;</span> =&gt; &#123;</span><br><span class="line">                  <span class="string">&quot;id&quot;</span> =&gt; <span class="string">&quot;4dbe185b-900d-4990-b841-c13bf9618fc6&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;ip-10-250-0-239.cn-northwest-1.compute.internal&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ephemeral_id&quot;</span> =&gt; <span class="string">&quot;6bb04808-7da7-4acb-95fd-f3f915651457&quot;</span>,</span><br><span class="line">                <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;filebeat&quot;</span>,</span><br><span class="line">             <span class="string">&quot;version&quot;</span> =&gt; <span class="string">&quot;8.17.3&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">         <span class="string">&quot;event&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;original&quot;</span> =&gt; <span class="string">&quot;1.119.161.30 - elastic [27/Mar/2025:08:52:41 +0000] \&quot;GET /_cluster/stats HTTP/1.1\&quot; 200 7445 \&quot;-\&quot; \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36\&quot; \&quot;-\&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;ip-10-250-0-239.cn-northwest-1.compute.internal&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用Logstash过滤器解析日志">利用Logstash过滤器解析日志</h4><ul class="lvl-0"><li class="lvl-2"><p>从打印结果看到包含了大量的无关数据，此时可以利用Logstash过滤器解析日志，这里使用<code>Grok</code>插件</p></li><li class="lvl-2"><p><a href="https://www.elastic.co/guide/en/logstash/8.17/plugins-filters-grok.html">Grok</a>是一种将非结构化日志解析为结构化的插件。这个工具非常适合用来解析系统日志、Web服务器日志、MySQL或者是任意其他的日志格式。</p></li><li class="lvl-2"><p>Grok是通过模式匹配的方式来识别日志中的数据,可以把Grok插件简单理解为升级版本的正则表达式。它拥有更多的模式，默认Logstash拥有120个模式。如果这些模式不满足我们解析日志的需求，我们可以直接使用正则表达式来进行匹配。</p></li><li class="lvl-2"><p><a href="https://help.aliyun.com/zh/sls/user-guide/grok-patterns">GROK模式参考</a></p></li><li class="lvl-2"><p>grok模式的语法是:</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%&#123;SYNTAX:SEMANTIC&#125;</span><br><span class="line"><span class="comment"># SYNTAX（语法）指的是Grok模式名称，SEMANTIC（语义）是给模式匹配到的文本字段名。例如：</span></span><br><span class="line">%&#123;NUMBER:duration&#125; %&#123;IP:client&#125;</span><br><span class="line"><span class="comment"># duration表示：匹配一个数字，client表示匹配一个IP地址。</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>匹配nginx日志</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx access日志格式</span></span><br><span class="line">1.119.161.30 - elastic [27/Mar/2025:03:05:36 +0000] <span class="string">&quot;GET /_cluster/stats HTTP/1.1&quot;</span> 200 7446 <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36&quot;</span> <span class="string">&quot;-&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grok</span></span><br><span class="line">%&#123;IP:client_ip&#125; - %&#123;USER:remote_user&#125; \[%&#123;HTTPDATE:timestamp&#125;\] \&quot;%&#123;WORD:verb&#125; %&#123;URIPATHPARAM:request&#125; HTTP/%&#123;NUMBER:httpversion&#125;\&quot; %&#123;INT:http_status&#125; %&#123;INT:body_bytes_sent&#125; \&quot;%&#123;NOTSPACE:referrer&#125;\&quot; \&quot;%&#123;GREEDYDATA:agent&#125;\&quot; %&#123;QUOTEDSTRING:x_forwarded_for&#125;</span><br><span class="line"><span class="comment"># 解释每个部分的作用：</span></span><br><span class="line"><span class="comment"># %&#123;IP:client_ip&#125;：匹配客户端 IP 地址。</span></span><br><span class="line"><span class="comment"># -：匹配一个破折号（-），表示匿名用户或未认证用户。</span></span><br><span class="line"><span class="comment"># %&#123;USER:remote_user&#125;：匹配远程用户名， - 表示匿名用户。</span></span><br><span class="line"><span class="comment"># \[%&#123;HTTPDATE:timestamp&#125;\]：匹配请求的时间戳，格式为 [27/Mar/2025:03:05:36 +0000]。</span></span><br><span class="line"><span class="comment"># \&quot;%&#123;WORD:verb&#125; : 匹配请求方法 (GET)</span></span><br><span class="line"><span class="comment"># %&#123;URIPATHPARAM:request&#125; : 匹配请求路径 (/_cluster/stats)</span></span><br><span class="line"><span class="comment"># HTTP/%&#123;NUMBER:httpversion&#125;\\\&quot;：匹配 HTTP 版本 (HTTP/1.1)。</span></span><br><span class="line"><span class="comment"># %&#123;INT:http_status&#125;：匹配 HTTP 响应状态码 (200)。</span></span><br><span class="line"><span class="comment"># %&#123;INT:body_bytes_sent&#125;：匹配响应体的字节数 (7446)。</span></span><br><span class="line"><span class="comment"># \&quot;%&#123;NOTSPACE:referrer&#125;\&quot;：匹配引用页 (Referer) 字段，这里为空 (&quot;-&quot;)。</span></span><br><span class="line"><span class="comment"># \&quot;%&#123;GREEDYDATA:agent&#125;\&quot;：匹配用户代理 (User-Agent) 字段。GREEDYDATA 会匹配尽可能多的数据，直到遇到下一个分隔符。</span></span><br><span class="line"><span class="comment"># %&#123;QUOTEDSTRING:x_forwarded_for&#125;：匹配 X-Forwarded-For 头字段，这里为空 (&quot;-&quot;)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;request&quot;</span>: <span class="string">&quot;/_cluster/stats&quot;</span>,</span><br><span class="line">  <span class="string">&quot;agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">  <span class="string">&quot;body_bytes_sent&quot;</span>: <span class="string">&quot;7446&quot;</span>,</span><br><span class="line">  <span class="string">&quot;verb&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="string">&quot;x_forwarded_for&quot;</span>: <span class="string">&quot;\&quot;-\&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;remote_user&quot;</span>: <span class="string">&quot;elastic&quot;</span>,</span><br><span class="line">  <span class="string">&quot;referrer&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">  <span class="string">&quot;client_ip&quot;</span>: <span class="string">&quot;1.119.161.30&quot;</span>,</span><br><span class="line">  <span class="string">&quot;httpversion&quot;</span>: <span class="string">&quot;1.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;http_status&quot;</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timestamp&quot;</span>: <span class="string">&quot;27/Mar/2025:03:05:36 +0000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>匹配Grok模式是个非常繁琐的过程，我们可以使用Kibana来进行可视化的Grok调试<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/nhgnKY.png" alt=""></p></li><li class="lvl-2"><p>grok配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;%&#123;IP:client_ip&#125; - %&#123;USER:remote_user&#125; \[%&#123;HTTPDATE:timestamp&#125;\] \&quot;%&#123;WORD:verb&#125; %&#123;URIPATHPARAM:request&#125; HTTP/%&#123;NUMBER:httpversion&#125;\&quot; %&#123;INT:http_status&#125; %&#123;INT:body_bytes_sent&#125; \&quot;%&#123;NOTSPACE:referrer&#125;\&quot; \&quot;%&#123;GREEDYDATA:agent&#125;\&quot; %&#123;QUOTEDSTRING:x_forwarded_for&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用mutate插件过滤掉不需要的字段">使用mutate插件过滤掉不需要的字段</h4><ul class="lvl-0"><li class="lvl-2"><p>除了nginx日志本身的格式外，logstash还会打印许多我们不需要的字段，此时可以使用<code>mutate</code>插件来过滤掉不需要的字段。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mutate &#123;</span><br><span class="line">    enable_metric =&gt; <span class="string">&quot;false&quot;</span> <span class="comment"># 禁用指标上报</span></span><br><span class="line">    remove_field =&gt; [<span class="string">&quot;message&quot;</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;agent&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;ecs&quot;</span>, <span class="string">&quot;@version&quot;</span>] <span class="comment"># 移除不需要的字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Date插件对时间进行格式转换">使用Date插件对时间进行格式转换</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> &#123;</span><br><span class="line">    match =&gt; [<span class="string">&quot;timestamp&quot;</span>,<span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>] <span class="comment"># 时间格式转换</span></span><br><span class="line">    target =&gt; <span class="string">&quot;timestamp&quot;</span> <span class="comment"># 目标字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整的Logstash配置">完整的Logstash配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入logstash安装目录</span></span><br><span class="line"><span class="comment"># vim config/logstsh-nginx.conf</span></span><br><span class="line"><span class="comment"># 配置从FileBeat接收数据</span></span><br><span class="line">input &#123; <span class="comment"># 输入源配置</span></span><br><span class="line">    beats &#123; <span class="comment"># 从FileBeat接收数据</span></span><br><span class="line">      port =&gt; 5044 <span class="comment"># 监听5044端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123; <span class="comment"># 过滤器配置</span></span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;%&#123;IP:client_ip&#125; - %&#123;USER:remote_user&#125; \[%&#123;HTTPDATE:timestamp&#125;\] \&quot;%&#123;WORD:verb&#125; %&#123;URIPATHPARAM:request&#125; HTTP/%&#123;NUMBER:httpversion&#125;\&quot; %&#123;INT:http_status&#125; %&#123;INT:body_bytes_sent&#125; \&quot;%&#123;NOTSPACE:referrer&#125;\&quot; \&quot;%&#123;GREEDYDATA:agent&#125;\&quot; %&#123;QUOTEDSTRING:x_forwarded_for&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mutate &#123;</span><br><span class="line">        enable_metric =&gt; <span class="string">&quot;false&quot;</span> <span class="comment"># 禁用指标上报</span></span><br><span class="line">        remove_field =&gt; [<span class="string">&quot;message&quot;</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;agent&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;ecs&quot;</span>, <span class="string">&quot;@version&quot;</span>] <span class="comment"># 移除不需要的字段</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">date</span> &#123;</span><br><span class="line">        match =&gt; [<span class="string">&quot;timestamp&quot;</span>,<span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>] <span class="comment"># 时间格式转换</span></span><br><span class="line">        target =&gt; <span class="string">&quot;timestamp&quot;</span> <span class="comment"># 目标字段</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123; <span class="comment"># 输出配置</span></span><br><span class="line">    stdout &#123; <span class="comment"># 打印到控制台</span></span><br><span class="line">      codec =&gt; rubydebug <span class="comment"># 指定编码器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>重新启动logstash后得到如下结果：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">              <span class="string">&quot;event&quot;</span> =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;original&quot;</span> =&gt; <span class="string">&quot;1.119.161.30 - elastic [27/Mar/2025:09:49:41 +0000] \&quot;GET /_cluster/stats HTTP/1.1\&quot; 200 7445 \&quot;-\&quot; \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36\&quot; \&quot;-\&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">          <span class="string">&quot;client_ip&quot;</span> =&gt; <span class="string">&quot;1.119.161.30&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span> =&gt; <span class="string">&quot;/_cluster/stats&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http_status&quot;</span> =&gt; <span class="string">&quot;200&quot;</span>,</span><br><span class="line">         <span class="string">&quot;@timestamp&quot;</span> =&gt; 2025-03-27T09:49:45.751Z,</span><br><span class="line">    <span class="string">&quot;body_bytes_sent&quot;</span> =&gt; <span class="string">&quot;7445&quot;</span>,</span><br><span class="line">    <span class="string">&quot;x_forwarded_for&quot;</span> =&gt; <span class="string">&quot;\&quot;-\&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;timestamp&quot;</span> =&gt; 2025-03-27T09:49:41.000Z,</span><br><span class="line">           <span class="string">&quot;referrer&quot;</span> =&gt; <span class="string">&quot;-&quot;</span>,</span><br><span class="line">        <span class="string">&quot;remote_user&quot;</span> =&gt; <span class="string">&quot;elastic&quot;</span>,</span><br><span class="line">        <span class="string">&quot;httpversion&quot;</span> =&gt; <span class="string">&quot;1.1&quot;</span>,</span><br><span class="line">               <span class="string">&quot;verb&quot;</span> =&gt; <span class="string">&quot;GET&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将结果输出到ES">将结果输出到ES</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在输出配置中添加ES输出配置</span></span><br><span class="line">output &#123; <span class="comment"># 输出配置</span></span><br><span class="line">    stdout &#123; <span class="comment"># 打印到控制台</span></span><br><span class="line">      codec =&gt; rubydebug <span class="comment"># 指定编码器</span></span><br><span class="line">    &#125;</span><br><span class="line">    elasticsearch &#123; <span class="comment"># 输出到ES</span></span><br><span class="line">        index =&gt; <span class="string">&quot;nginx_access_log_%&#123;+YYYY-MM&#125;&quot;</span> <span class="comment"># 索引名,按月分隔</span></span><br><span class="line">        hosts =&gt; [<span class="string">&quot;https://10.250.0.239:9200&quot;</span>] <span class="comment"># ES地址</span></span><br><span class="line">        user =&gt; <span class="string">&quot;elastic&quot;</span>                   <span class="comment"># ES用户名</span></span><br><span class="line">        password =&gt; <span class="string">&quot;123456&quot;</span>                <span class="comment"># ES密码</span></span><br><span class="line">        ssl =&gt; <span class="literal">true</span>                         <span class="comment"># 是否启用SSL，因为这里是https访问ES</span></span><br><span class="line">        ssl_certificate_verification =&gt; <span class="literal">false</span> <span class="comment"># 禁用证书验证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果需要开启证书校验，可以通过如下方法进行配置</p><ul class="lvl-2"><li class="lvl-6">获取 Elasticsearch 的 SSL 证书：</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 Elasticsearch 的配置文件或证书文件路径中获取证书（通常是 .pem 或 .crt 文件）。</span></span><br><span class="line">/usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/http_ca.crt</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6">导入证书到 Java 信任库：注意这里要导入到启动Logstash的JAVA进程的信任库</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># logstash的jdk路径，默认在logstash的安装目录下</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/logstash/logstash-8.17.3/jdk</span><br><span class="line"></span><br><span class="line">bin/keytool -importcert -<span class="built_in">alias</span> es-cert -keystore /usr/local/logstash/logstash-8.17.3/logstash.keystore -file /usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/http_ca.crt</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">Enter keystore password:  <span class="comment"># 输入密码 这里是123456</span></span><br><span class="line">Re-enter new password:</span><br><span class="line">Owner: CN=Elasticsearch security auto-configuration HTTP CA</span><br><span class="line">Issuer: CN=Elasticsearch security auto-configuration HTTP CA</span><br><span class="line">Serial number: 89d5c501a2efd5d45a6ee5e08daa16bd605d8c28</span><br><span class="line">Valid from: Thu Mar 20 08:53:26 UTC 2025 <span class="keyword">until</span>: Sun Mar 19 08:53:26 UTC 2028</span><br><span class="line">Certificate fingerprints:</span><br><span class="line">    SHA1: DE:73:0C:EC:46:59:69:83:52:7C:C4:CC:6B:65:EC:B6:31:BE:10:22</span><br><span class="line">    SHA256: 3F:14:1C:16:DF:C6:E1:65:89:4B:C1:67:20:84:B2:20:DC:DD:22:FF:E0:21:16:D5:1A:C1:80:03:CF:AA:5A:1D</span><br><span class="line">Signature algorithm name: SHA256withRSA</span><br><span class="line">Subject Public Key Algorithm: 4096-bit RSA key</span><br><span class="line">Version: 3</span><br><span class="line"></span><br><span class="line">Extensions:</span><br><span class="line"></span><br><span class="line"><span class="comment">#1: ObjectId: 2.5.29.35 Criticality=false</span></span><br><span class="line">AuthorityKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 25 EF BA 81 AE 5E 14 1C   7E FF A1 87 12 F8 D0 2E  %....^..........</span><br><span class="line">0010: 3A D7 54 5F                                        :.T_</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#2: ObjectId: 2.5.29.19 Criticality=true</span></span><br><span class="line">BasicConstraints:[</span><br><span class="line">CA:<span class="literal">true</span></span><br><span class="line">PathLen: no <span class="built_in">limit</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#3: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class="line">SubjectKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 25 EF BA 81 AE 5E 14 1C   7E FF A1 87 12 F8 D0 2E  %....^..........</span><br><span class="line">0010: 3A D7 54 5F                                        :.T_</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Trust this certificate? [no]:  <span class="built_in">yes</span> <span class="comment"># yes确认</span></span><br><span class="line">Certificate was added to keystore</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-6"><p>配置 Logstash 使用信任库</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        index =&gt; <span class="string">&quot;nginx_access_log_%&#123;+YYYY-MM&#125;&quot;</span> <span class="comment"># 索引名,按月分隔</span></span><br><span class="line">        hosts =&gt; [<span class="string">&quot;https://10.250.0.239:9200&quot;</span>] <span class="comment"># ES地址</span></span><br><span class="line">        user =&gt; <span class="string">&quot;elastic&quot;</span>                     <span class="comment"># ES用户名</span></span><br><span class="line">        password =&gt; <span class="string">&quot;123456&quot;</span>                  <span class="comment"># ES密码</span></span><br><span class="line">        ssl =&gt; <span class="literal">true</span>                           <span class="comment"># 是否启用SSL，因为这里是https访问ES</span></span><br><span class="line">        ssl_certificate_verification =&gt; <span class="literal">true</span>  <span class="comment"># 启用证书校验</span></span><br><span class="line">        ssl_truststore_path =&gt; <span class="string">&quot;/usr/local/logstash/logstash-8.17.3/logstash.keystore&quot;</span> <span class="comment"># 指定信任库路径</span></span><br><span class="line">        ssl_truststore_password =&gt; <span class="string">&quot;123456&quot;</span>   <span class="comment"># 信任库密码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="整合消息队列-Nginx的ELK架构">整合消息队列+Nginx的ELK架构</h2><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/%E6%88%AA%E5%9B%BE-2.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>消息队列：引入消息队列作为缓冲机制，确保即使在Logstash或Elasticsearch出现故障时，日志数据也不会丢失。消息队列能够均衡网络传输，降低数据丢失的可能性。</p></li><li class="lvl-2"><p>Nginx：Nginx作为高性能的Web和反向代理服务器，可以进一步优化整个系统的性能和可用性。它可以在负载均衡、缓存等方面发挥作用，提升用户访问体验。</p></li><li class="lvl-2"><p>扩展性：由于引入了消息队列和Nginx等组件，整个架构的扩展性得到增强。可以根据实际需求动态调整各组件的资源分配和部署规模。</p></li><li class="lvl-2"><p>适用场景：整合消息队列+Nginx的架构主要适用于生产环境，特别是需要处理大数据量的场景。它能够确保数据的安全性和完整性，同时提供高性能的日志处理和可视化分析服务。</p></li><li class="lvl-2"><p>总结来说就是</p><ul class="lvl-2"><li class="lvl-4">filebeat将采集的日志发送到Redis\RabbitMQ\Kafka等</li><li class="lvl-4">Logstash再从Redis\RabbitMQ\Kafka中读取日志数据，并进行解析后发送到ES中。</li><li class="lvl-4">ES集群使用nginx进行负载均衡，以实现高可用和高性能。具体实现方法查看：<a href="/2025/03/24/elasticsearch-02-install-cluster/" title="linux下安装Elasticsearch集群">linux下安装Elasticsearch集群</a></li></ul></li></ul><h2 id="基于Redis的ELK架构示例">基于Redis的ELK架构示例</h2><h3 id="filebeat将采集的日志发送到Redis">filebeat将采集的日志发送到Redis</h3><ul class="lvl-0"><li class="lvl-2"><p>创建配置文件<code>filebeat-nginx-to-redis.yml</code>，将其保存到Filebeat安装目录下的conf目录下。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为Nginx的access.log日志都是以IP地址开头的，所以我们需要修改下匹配字段。</span></span><br><span class="line"><span class="comment"># 不以ip地址开头的行追加到上一行</span></span><br><span class="line"><span class="attr">filebeat.inputs:</span> <span class="comment"># 输入源配置</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span> <span class="comment"># 日志类型</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">paths:</span> <span class="comment"># 采集路径</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/log/nginx/access*.*</span></span><br><span class="line">  <span class="attr">exclude_files:</span> [<span class="string">&quot;.gz$&quot;</span>] <span class="comment"># 排除以.gz 结尾的文件</span></span><br><span class="line">  <span class="attr">multiline.pattern:</span> <span class="string">&#x27;^\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\s&#x27;</span> <span class="comment"># 匹配以IP地址开头，并紧跟一个空白字符</span></span><br><span class="line">  <span class="attr">multiline.negate:</span> <span class="literal">true</span> <span class="comment"># 不以ip地址开头的行追加到上一行</span></span><br><span class="line">  <span class="attr">multiline.match:</span> <span class="string">after</span> <span class="comment"># 追加到上一行的后面</span></span><br><span class="line">  <span class="comment"># multiline: 多行日志配置，这里实际上不需要配置多行设置，因为nginx的access日志都是单行日志，这里只做演示</span></span><br><span class="line">    <span class="comment"># pattern: 正则表达式</span></span><br><span class="line">    <span class="comment"># negate: false，匹配pattern的行合并到上一行；true，不匹配pattern的行合并到上一行</span></span><br><span class="line">    <span class="comment"># match: after，合并到上一行的末尾；before，合并到上一行的开头</span></span><br><span class="line">  <span class="attr">scan_frequency:</span> <span class="string">10s</span> <span class="comment"># 每 10 秒扫描一次日志文件</span></span><br><span class="line">  <span class="attr">clean_removed:</span> <span class="literal">true</span> <span class="comment"># 在日志文件被删除后是否从其内部状态中移除该文件的记录</span></span><br><span class="line">  <span class="attr">clean_inactive:</span> <span class="string">2h</span> <span class="comment"># 在日志文件处于非活动状态多长时间后将其从状态数据库中移,设置为比 ignore_older + scan_frequency 更大的值</span></span><br><span class="line">  <span class="attr">ignore_older:</span> <span class="string">1h</span> <span class="comment"># 忽略那些比当前时间早于 1 小时的日志文件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.redis:</span> <span class="comment"># Redis输出配置</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;10.250.0.214:6379&quot;</span>] <span class="comment"># Redis服务器地址</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;123456&quot;</span> <span class="comment"># Redis密码</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;filebeat_nginx&quot;</span> <span class="comment"># Redis的key，类型为 list</span></span><br><span class="line">  <span class="attr">db:</span> <span class="number">3</span> <span class="comment"># Redis数据库</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3</span> <span class="comment"># Redis连接超时时间，单位秒</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动Filebeat，并查看日志输出。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e -c conf/filebeat-nginx-to-redis.yml</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看Redis中的数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h 10.250.0.214 -p 6379 -a 123456</span><br><span class="line">10.250.0.214:6379&gt; <span class="keyword">select</span> 3</span><br><span class="line">OK</span><br><span class="line">10.250.0.214:6379[3]&gt; keys filebeat*</span><br><span class="line">1) <span class="string">&quot;filebeat_nginx&quot;</span></span><br><span class="line">10.250.0.214:6379[3]&gt; <span class="built_in">type</span> filebeat_nginx</span><br><span class="line">list</span><br><span class="line">10.250.0.214:6379[3]&gt; LLEN filebeat_nginx</span><br><span class="line">(<span class="built_in">integer</span>) 14</span><br><span class="line">10.250.0.214:6379[3]&gt; LINDEX filebeat_nginx 1</span><br><span class="line"><span class="string">&quot;&#123;\&quot;@timestamp\&quot;:\&quot;2025-03-28T09:15:23.402Z\&quot;,\&quot;@metadata\&quot;:&#123;\&quot;beat\&quot;:\&quot;filebeat\&quot;,\&quot;type\&quot;:\&quot;_doc\&quot;,\&quot;version\&quot;:\&quot;8.17.3\&quot;&#125;,\&quot;host\&quot;:&#123;\&quot;name\&quot;:\&quot;ip-10-250-0-239.cn-northwest-1.compute.internal\&quot;&#125;,\&quot;agent\&quot;:&#123;\&quot;version\&quot;:\&quot;8.17.3\&quot;,\&quot;ephemeral_id\&quot;:\&quot;c0a521fe-690b-46b1-aadc-bbe16ef1db9a\&quot;,\&quot;id\&quot;:\&quot;4dbe185b-900d-4990-b841-c13bf9618fc6\&quot;,\&quot;name\&quot;:\&quot;ip-10-250-0-239.cn-northwest-1.compute.internal\&quot;,\&quot;type\&quot;:\&quot;filebeat\&quot;&#125;,\&quot;log\&quot;:&#123;\&quot;offset\&quot;:46745,\&quot;file\&quot;:&#123;\&quot;path\&quot;:\&quot;/var/log/nginx/access.log\&quot;&#125;&#125;,\&quot;message\&quot;:\&quot;1.119.161.30 - elastic [28/Mar/2025:09:15:13 +0000] \\\&quot;GET /_cluster/stats HTTP/1.1\\\&quot; 200 7457 \\\&quot;-\\\&quot; \\\&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36\\\&quot; \\\&quot;-\\\&quot;\&quot;,\&quot;input\&quot;:&#123;\&quot;type\&quot;:\&quot;log\&quot;&#125;,\&quot;ecs\&quot;:&#123;\&quot;version\&quot;:\&quot;8.0.0\&quot;&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Logstash从Redis中读取日志并写入Elasticsearch">Logstash从Redis中读取日志并写入Elasticsearch</h3><ul class="lvl-0"><li class="lvl-2"><p>创建配置文件<code>logstash-nginx-redis-to-es.conf</code>，将其保存到Logstash安装目录下的conf目录下。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入logstash安装目录</span></span><br><span class="line"><span class="comment"># vim logstash-nginx-redis-to-es.conf</span></span><br><span class="line"><span class="comment"># 配置从 redis 接收数据</span></span><br><span class="line">input &#123; <span class="comment"># 输入源配置</span></span><br><span class="line">    redis &#123; <span class="comment"># Redis输入配置</span></span><br><span class="line">        host =&gt; <span class="string">&#x27;10.250.0.214&#x27;</span> <span class="comment"># Redis服务器地址</span></span><br><span class="line">        port =&gt; <span class="string">&quot;6379&quot;</span> <span class="comment"># Redis服务器端口</span></span><br><span class="line">        password =&gt; <span class="string">&quot;123456&quot;</span> <span class="comment"># Redis密码</span></span><br><span class="line">        db =&gt; <span class="string">&quot;3&quot;</span>           <span class="comment"># Redis数据库</span></span><br><span class="line">        data_type =&gt; <span class="string">&#x27;list&#x27;</span> <span class="comment"># 数据类型为list</span></span><br><span class="line">        key =&gt; <span class="string">&quot;filebeat_nginx&quot;</span>   <span class="comment"># Redis的key</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123; <span class="comment"># 过滤器配置</span></span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;%&#123;IP:client_ip&#125; - %&#123;USER:remote_user&#125; \[%&#123;HTTPDATE:timestamp&#125;\] \&quot;%&#123;WORD:verb&#125; %&#123;URIPATHPARAM:request&#125; HTTP/%&#123;NUMBER:httpversion&#125;\&quot; %&#123;INT:http_status&#125; %&#123;INT:body_bytes_sent&#125; \&quot;%&#123;NOTSPACE:referrer&#125;\&quot; \&quot;%&#123;GREEDYDATA:agent&#125;\&quot; %&#123;QUOTEDSTRING:x_forwarded_for&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mutate &#123;</span><br><span class="line">        enable_metric =&gt; <span class="string">&quot;false&quot;</span> <span class="comment"># 禁用指标上报</span></span><br><span class="line">        remove_field =&gt; [<span class="string">&quot;message&quot;</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;agent&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;ecs&quot;</span>, <span class="string">&quot;@version&quot;</span>] <span class="comment"># 移除不需要的字段</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">date</span> &#123;</span><br><span class="line">        match =&gt; [<span class="string">&quot;timestamp&quot;</span>,<span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>] <span class="comment"># 时间格式转换</span></span><br><span class="line">        target =&gt; <span class="string">&quot;timestamp&quot;</span> <span class="comment"># 目标字段</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在输出配置中添加ES输出配置</span></span><br><span class="line">output &#123; <span class="comment"># 输出配置</span></span><br><span class="line">    stdout &#123; <span class="comment"># 打印到控制台</span></span><br><span class="line">      codec =&gt; rubydebug <span class="comment"># 指定编码器</span></span><br><span class="line">    &#125;</span><br><span class="line">    elasticsearch &#123; <span class="comment"># 输出到ES</span></span><br><span class="line">        index =&gt; <span class="string">&quot;redis_nginx_access_log_%&#123;+YYYY-MM&#125;&quot;</span> <span class="comment"># 索引名,按月分隔</span></span><br><span class="line">        hosts =&gt; [<span class="string">&quot;https://10.250.0.239:9200&quot;</span>] <span class="comment"># ES地址</span></span><br><span class="line">        user =&gt; <span class="string">&quot;elastic&quot;</span>                   <span class="comment"># ES用户名</span></span><br><span class="line">        password =&gt; <span class="string">&quot;123456&quot;</span>                <span class="comment"># ES密码</span></span><br><span class="line">        ssl =&gt; <span class="literal">true</span>                         <span class="comment"># 是否启用SSL，因为这里是https访问ES</span></span><br><span class="line">        ssl_certificate_verification =&gt; <span class="literal">false</span> <span class="comment"># 禁用证书验证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>测试logstash配置是否正确</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/logstash-nginx-redis-to-es.conf --config.test_and_exit</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动logstash</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reload.automatic：修改配置文件时自动重新加载</span></span><br><span class="line">bin/logstash -f config/logstash-nginx-redis-to-es.conf --config.reload.automatic</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在linux下安装LogStash和FileBeat&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;通过示例讲解ELK的经典架构和高并发架构的实现过程&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;LogStash版本8.17.3，FileBeat版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch版本8.17.3，&lt;a href=&quot;/2025/03/20/elasticsearch-01-install/&quot; title=&quot;linux下安装Elasticsearch&quot;&gt;linux下安装Elasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Kibana版本8.17.3，&lt;a href=&quot;/2025/03/21/kibana-01-install/&quot; title=&quot;linux下安装Kibana&quot;&gt;linux下安装Kibana&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch集群搭建，&lt;a href=&quot;/2025/03/24/elasticsearch-02-install-cluster/&quot; title=&quot;linux下安装Elasticsearch集群&quot;&gt;linux下安装Elasticsearch集群&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="kibana" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/kibana/"/>
    
    <category term="logstash" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/kibana/logstash/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
    <category term="kibana" scheme="https://blog.hanqunfeng.com/tags/kibana/"/>
    
    <category term="logstash" scheme="https://blog.hanqunfeng.com/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>linux下Elasticsearch插件安装</title>
    <link href="https://blog.hanqunfeng.com/2025/03/25/elasticsearch-03-plugins/"/>
    <id>https://blog.hanqunfeng.com/2025/03/25/elasticsearch-03-plugins/</id>
    <published>2025-03-25T13:30:05.000Z</published>
    <updated>2025-03-25T08:23:28.882Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何在linux为Elasticsearch安装插件</p></li><li class="lvl-2"><p>Elasticsearch版本8.17.3</p></li></ul><span id="more"></span><h2 id="安装Elasticsearch核心库插件">安装Elasticsearch核心库插件</h2><ul class="lvl-0"><li class="lvl-2"><p>以安装 <code>analysis-icu</code> 这个分词插件为例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入Elasticsearch安装目录，插件的安装路径在 plugins 目录下</span></span><br><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">bin/elasticsearch-plugin install analysis-icu</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装或卸载插件后，需要重启Elasticsearch服务</p></li></ul><h2 id="安装其它来源的插件">安装其它来源的插件</h2><ul class="lvl-0"><li class="lvl-2"><p>以安装 <code>analysis-ik</code> 这个中文分词插件为例</p></li><li class="lvl-2"><p>从<a href="https://release.infinilabs.com/analysis-ik/stable/">https://release.infinilabs.com/analysis-ik/stable/</a>找到对应版本的插件连接，这里以<code>8.17.3</code>为例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.基于url安装插件</span></span><br><span class="line">bin/elasticsearch-plugin install https://release.infinilabs.com/analysis-ik/stable/elasticsearch-analysis-ik-8.17.3.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.基于本地文件安装插件，我们可以先将插件下载的本地目录</span></span><br><span class="line">wget https://release.infinilabs.com/analysis-ik/stable/elasticsearch-analysis-ik-8.17.3.zip -P /tmp/</span><br><span class="line">bin/elasticsearch-plugin install file:///tmp/elasticsearch-analysis-ik-8.17.3.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.可以将下载好的包解压到plugins目录下，然后重启Elasticsearch服务</span></span><br><span class="line"><span class="built_in">mkdir</span> /usr/local/elasticsearch/elasticsearch-8.17.3/plugins/analysis-ik</span><br><span class="line">unzip elasticsearch-analysis-ik-8.17.3.zip -d /usr/local/elasticsearch/elasticsearch-8.17.3/plugins/analysis-ik</span><br></pre></td></tr></table></figure><h2 id="查看和卸载插件">查看和卸载插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有插件</span></span><br><span class="line">bin/elasticsearch-plugin list</span><br><span class="line"><span class="comment"># 卸载插件</span></span><br><span class="line">bin/elasticsearch-plugin remove analysis-ik</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过curl命令查看插件信息</span></span><br><span class="line">curl -u elastic:123456 -k https://localhost:9200/_cat/plugins?v</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装或卸载插件后，需要重启Elasticsearch服务</p></li></ul><h2 id="analysis-ik-中文分词插件的使用"><code>analysis-ik</code> 中文分词插件的使用</h2><ul class="lvl-0"><li class="lvl-2"><p>测试分词效果</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ES的默认分词器是standard，会单字拆分</span></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;中华人民共和国&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#analysis-ik的ik_smart分词器:会做最粗粒度的拆</span></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;中华人民共和国&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#analysis-ik的ik_max_word分词器:会将文本做最细粒度的拆分</span></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;中华人民共和国&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置索引的分词器</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建索引，并指定默认分词器为ik_max_word</span></span><br><span class="line">PUT /test_index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;settings&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;index&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;analysis.analyzer.default.type&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 查看索引setting信息</span></span><br><span class="line">GET /test_index/_settings</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置索引字段的分词器</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建索引</span></span><br><span class="line">PUT /index</span><br><span class="line"><span class="comment"># 指定content字段使用ik分词器</span></span><br><span class="line">POST /index/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">      <span class="string">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#索引文档，也就是插入文档</span></span><br><span class="line">POST /index/_create/1</span><br><span class="line">&#123;<span class="string">&quot;content&quot;</span>:<span class="string">&quot;美国留给伊拉克的是个烂摊子吗&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">POST /index/_create/2</span><br><span class="line">&#123;<span class="string">&quot;content&quot;</span>:<span class="string">&quot;公安部：各地校车将享最高路权&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">POST /index/_create/3</span><br><span class="line">&#123;<span class="string">&quot;content&quot;</span>:<span class="string">&quot;中韩渔警冲突调查：韩警平均每天扣1艘中国渔船&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">POST /index/_create/4</span><br><span class="line">&#123;<span class="string">&quot;content&quot;</span>:<span class="string">&quot;中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#带高亮的查询</span></span><br><span class="line">POST /index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;pre_tags&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;&lt;tag1&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;tag2&gt;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;post_tags&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;&lt;/tag1&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/tag2&gt;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;content&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在linux为Elasticsearch安装插件&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装Elasticsearch集群</title>
    <link href="https://blog.hanqunfeng.com/2025/03/24/elasticsearch-02-install-cluster/"/>
    <id>https://blog.hanqunfeng.com/2025/03/24/elasticsearch-02-install-cluster/</id>
    <published>2025-03-24T13:30:05.000Z</published>
    <updated>2025-03-25T10:10:54.922Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何在linux下安装Elasticsearch集群(三节点)</p></li><li class="lvl-2"><p>Elasticsearch版本8.17.3</p></li><li class="lvl-2"><p>单节点安装参考<a href="/2025/03/20/elasticsearch-01-install/" title="linux下安装Elasticsearch">linux下安装Elasticsearch</a>，本文在此基础上完成集群安装</p></li></ul><span id="more"></span><h2 id="集群安装">集群安装</h2><ul class="lvl-0"><li class="lvl-2"><p>三个节点分别安照单节点的安装方式完成下载，用户配置，环境变量配置，系统参数配置，等等。</p></li><li class="lvl-2"><p>任选一个节点作为集群的master节点，我们命名为<code>node-1</code>，其它节点命名为<code>node-2</code>和<code>node-3</code></p></li><li class="lvl-2"><p>先配置<code>node-1</code>节点的配置文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line">cluster.name: test-elk</span><br><span class="line"><span class="comment"># 节点名称</span></span><br><span class="line">node.name: node-1</span><br><span class="line"><span class="comment"># 数据存储路径，默认值 $ES_HOME/data</span></span><br><span class="line">path.data: /usr/local/elasticsearch/data</span><br><span class="line"><span class="comment"># 日志存储路径，默认值 $ES_HOME/logs</span></span><br><span class="line">path.logs: /usr/local/elasticsearch/logs</span><br><span class="line"><span class="comment"># 配置ES启动时是否进行内存锁定检查，默认值true，本机内存比较小时设置为false</span></span><br><span class="line">bootstrap.memory_lock: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 允许通过任何地址访问，开启远程访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的http端口，默认 9200</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的tcp端口，默认 9300</span></span><br><span class="line">transport.port: 9300</span><br><span class="line"><span class="comment"># 集群内的主机列表，开启安全认证时无需配置，注意这里不要进行配置</span></span><br><span class="line"><span class="comment"># discovery.seed_hosts: [&quot;127.0.0.1&quot;]</span></span><br><span class="line"><span class="comment"># 第一次启动时需要参与选主的节点名称，这里只配置node-1</span></span><br><span class="line">cluster.initial_master_nodes: [<span class="string">&quot;node-1&quot;</span>]</span><br><span class="line"><span class="comment">#解决跨域问题</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置<code>node-2</code>节点的配置文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line">cluster.name: test-elk</span><br><span class="line"><span class="comment"># 节点名称</span></span><br><span class="line">node.name: node-2</span><br><span class="line"><span class="comment"># 数据存储路径，默认值 $ES_HOME/data</span></span><br><span class="line">path.data: /usr/local/elasticsearch/data</span><br><span class="line"><span class="comment"># 日志存储路径，默认值 $ES_HOME/logs</span></span><br><span class="line">path.logs: /usr/local/elasticsearch/logs</span><br><span class="line"><span class="comment"># 配置ES启动时是否进行内存锁定检查，默认值true，本机内存比较小时设置为false</span></span><br><span class="line">bootstrap.memory_lock: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 允许通过任何地址访问，开启远程访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的http端口，默认 9200</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的tcp端口，默认 9300</span></span><br><span class="line">transport.port: 9300</span><br><span class="line"><span class="comment">#解决跨域问题</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置<code>node-3</code>节点的配置文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line">cluster.name: test-elk</span><br><span class="line"><span class="comment"># 节点名称</span></span><br><span class="line">node.name: node-3</span><br><span class="line"><span class="comment"># 数据存储路径，默认值 $ES_HOME/data</span></span><br><span class="line">path.data: /usr/local/elasticsearch/data</span><br><span class="line"><span class="comment"># 日志存储路径，默认值 $ES_HOME/logs</span></span><br><span class="line">path.logs: /usr/local/elasticsearch/logs</span><br><span class="line"><span class="comment"># 配置ES启动时是否进行内存锁定检查，默认值true，本机内存比较小时设置为false</span></span><br><span class="line">bootstrap.memory_lock: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 允许通过任何地址访问，开启远程访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的http端口，默认 9200</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="comment"># 配置当前ES节点对外提供服务的tcp端口，默认 9300</span></span><br><span class="line">transport.port: 9300</span><br><span class="line"><span class="comment">#解决跨域问题</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动<code>node-1</code>，启动成功后我们会在日志中看到如下安全认证信息信息，记录其中的加入集群的节点的token信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line"><span class="comment"># 这些日志信息提供了 Elasticsearch 8 在首次启动时自动配置的安全特性、生成的默认密码、证书指纹以及如何配置 Kibana 和其他节点加入集群的详细说明。</span></span><br><span class="line">✅ Elasticsearch security features have been automatically configured!</span><br><span class="line">✅ Authentication is enabled and cluster connections are encrypted.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是 elastic 用户的默认密码。系统建议你使用 bin/elasticsearch-reset-password -u elastic 命令来重置此密码。</span></span><br><span class="line">ℹ️  Password <span class="keyword">for</span> the elastic user (reset with `bin/elasticsearch-reset-password -u elastic`):</span><br><span class="line">  BNb=*qz6_M*mXL9uZiSP <span class="comment"># 这里会打印出ES自动生成的密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是 HTTP CA 证书的 SHA-256 指纹。CA 证书用于验证 HTTPS 连接的身份。</span></span><br><span class="line">ℹ️  HTTP CA certificate SHA-256 fingerprint:</span><br><span class="line">  3f141c16dfc6e165894bc1672084b220dcdd22ffe02116d51ac18003cfaa5a1d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供了将 Kibana 配置为使用此 Elasticsearch 集群的步骤。</span></span><br><span class="line">ℹ️  Configure Kibana to use this cluster:</span><br><span class="line"><span class="comment"># 启动 Kibana 并按照终端中显示的配置链接进行操作。</span></span><br><span class="line">• Run Kibana and click the configuration <span class="built_in">link</span> <span class="keyword">in</span> the terminal when Kibana starts.</span><br><span class="line"><span class="comment"># 复制提供的注册令牌，并在浏览器中打开 Kibana 时粘贴此令牌。令牌在接下来的 30 分钟内有效。</span></span><br><span class="line"><span class="comment"># 补充说明：生成新的kibana注册令牌：bin/elasticsearch-create-enrollment-token -s kibana</span></span><br><span class="line">• Copy the following enrollment token and <span class="built_in">paste</span> it into Kibana <span class="keyword">in</span> your browser (valid <span class="keyword">for</span> the next 30 minutes):</span><br><span class="line">  eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6ImFSWFBzcFVCTVVmc1d5aUJnbjBtOmRzbVBLQV95UXhDZkJpXzQyWDNEMVEifQ==</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供了将新的 Elasticsearch 节点加入现有集群的步骤。</span></span><br><span class="line">ℹ️ Configure other nodes to <span class="built_in">join</span> this cluster:</span><br><span class="line"><span class="comment"># 使用 bin/elasticsearch --enrollment-token &lt;token&gt; 命令启动新的 Elasticsearch 节点。令牌在接下来的 30 分钟内有效。</span></span><br><span class="line"><span class="comment"># 补充说明：生成新的节点注册令牌：bin/elasticsearch-create-enrollment-token -s node</span></span><br><span class="line">• Copy the following enrollment token and start new Elasticsearch nodes with `bin/elasticsearch --enrollment-token &lt;token&gt;` (valid <span class="keyword">for</span> the next 30 minutes):</span><br><span class="line">  eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6ImF4WFBzcFVCTVVmc1d5aUJnbjFtOkFEallPdnpzUzh1MGJqOFpfVFE4a3cifQ==</span><br><span class="line"><span class="comment"># 如果你在 Docker 中运行 Elasticsearch，可以使用 docker run -e &quot;ENROLLMENT_TOKEN=&lt;token&gt;&quot; docker.elastic.co/elasticsearch/elasticsearch:8.17.3 命令启动新节点。</span></span><br><span class="line">  If you<span class="string">&#x27;re running in Docker, copy the enrollment token and run:</span></span><br><span class="line"><span class="string">  `docker run -e &quot;ENROLLMENT_TOKEN=&lt;token&gt;&quot; docker.elastic.co/elasticsearch/elasticsearch:8.17.3`</span></span><br><span class="line"><span class="string">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>token信息有效时间只有30分钟，超时后可以使用如下命令重新生成新的token</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入node-1节点的ES安装目录，此命令会生成新的节点注册令牌</span></span><br><span class="line">bin/elasticsearch-create-enrollment-token -s node</span><br><span class="line">eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6IlpoRVZ4NVVCeXRPajdLeTBqb3BvOmdHRW44ZW5mU0RDZHA2Yy1uSDF4eGcifQ==</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动<code>node-2</code>节点，启动时要带上token信息，<code>node-3</code>与此一样。这里要注意，只有第一次加入集群时启动才需要带上注册令牌，后续启动不需要token信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入node-2节点的ES安装目录，此命令会启动ES节点，并加入到集群中</span></span><br><span class="line"><span class="comment"># bin/elasticsearch --enrollment-token &lt;token&gt;</span></span><br><span class="line">bin/elasticsearch --enrollment-token eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6IlpoRVZ4NVVCeXRPajdLeTBqb3BvOmdHRW44ZW5mU0RDZHA2Yy1uSDF4eGcifQ==</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>加入集群失败</strong></em></p><ul class="lvl-1"><li class="lvl-2">在执行<code>bin/elasticsearch --enrollment-token &lt;token&gt;</code>时有可能会遇到如下异常：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Aborting auto configuration because the node keystore contains password settings already, with <span class="built_in">exit</span> code 78</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">这通常意味着节点的 <code>keystore</code> 已经包含了密码设置，因此自动配置过程被中止。</li><li class="lvl-2">产生这种错误的原因大概率是当前ES是从已经安装好的服务器上拷贝过来的，而不是全新安装的，此时我们除了需要清空<code>data</code>目录外，还需要删除 <code>keystore</code> 中的密码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看keystore中的密码</span></span><br><span class="line">$ bin/elasticsearch-keystore list</span><br><span class="line">keystore.seed</span><br><span class="line">xpack.security.http.ssl.keystore.secure_password</span><br><span class="line">xpack.security.transport.ssl.keystore.secure_password</span><br><span class="line">xpack.security.transport.ssl.truststore.secure_password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除keystore中的密码</span></span><br><span class="line">$ bin/elasticsearch-keystore remove xpack.security.http.ssl.keystore.secure_password</span><br><span class="line">$ bin/elasticsearch-keystore remove xpack.security.transport.ssl.keystore.secure_password</span><br><span class="line">$ bin/elasticsearch-keystore remove xpack.security.transport.ssl.truststore.secure_password</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2"><p>再次执行<code>bin/elasticsearch --enrollment-token &lt;token&gt;</code>即可。</p></li><li class="lvl-2"><p>另外还可能遇到如下报错：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Aborting enrolling to cluster. Could not communicate with the node on any of the addresses from the enrollment token. All of [10.250.0.239:9200] were attempted., with <span class="built_in">exit</span> code 69</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">这是由于token过期了，重新生成新的token即可</li></ul></div><ul class="lvl-0"><li class="lvl-2"><p>启动成功后会在<code>node-2</code>的配置文件中看到如下配置信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#----------------------- BEGIN SECURITY AUTO CONFIGURATION -----------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following settings, TLS certificates, and keys have been automatically</span></span><br><span class="line"><span class="comment"># generated to configure Elasticsearch security features on 24-03-2025 07:45:11</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable security features</span></span><br><span class="line">xpack.security.enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">xpack.security.enrollment.enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agents</span></span><br><span class="line">xpack.security.http.ssl:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  keystore.path: certs/http.p12</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable encryption and mutual authentication between cluster nodes</span></span><br><span class="line">xpack.security.transport.ssl:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  verification_mode: certificate</span><br><span class="line">  keystore.path: certs/transport.p12</span><br><span class="line">  truststore.path: certs/transport.p12</span><br><span class="line"><span class="comment"># Discover existing nodes in the cluster</span></span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;10.250.0.239:9300&quot;</span>] <span class="comment"># 这里是node-1节点的IP地址和端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 而node-3这里会显示如下信息，也就是越是后来加入进来的，这里就会加上之前所有节点的IP地址和端口号</span></span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;10.250.0.239:9300&quot;</span>, <span class="string">&quot;10.250.0.17:9300&quot;</span>] <span class="comment"># 这里是node-1和node-2节点的IP地址和端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------- END SECURITY AUTO CONFIGURATION -------------------------</span></span><br></pre></td></tr></table></figure><h2 id="验证集群状态">验证集群状态</h2><ul class="lvl-0"><li class="lvl-2"><p>启动完成后，可以通过如下命令查看集群状态：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">$ curl -u elastic:123456 --cacert /usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/http_ca.crt  https://127.0.0.1:9200/_cluster/health?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;test-elk&quot;</span>,</span><br><span class="line">  <span class="string">&quot;status&quot;</span> : <span class="string">&quot;green&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;number_of_nodes&quot;</span> : 3,</span><br><span class="line">  <span class="string">&quot;number_of_data_nodes&quot;</span> : 3,</span><br><span class="line">  <span class="string">&quot;active_primary_shards&quot;</span> : 31,</span><br><span class="line">  <span class="string">&quot;active_shards&quot;</span> : 62,</span><br><span class="line">  <span class="string">&quot;relocating_shards&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;initializing_shards&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;unassigned_shards&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;unassigned_primary_shards&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;delayed_unassigned_shards&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;number_of_pending_tasks&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;number_of_in_flight_fetch&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;task_max_waiting_in_queue_millis&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;active_shards_percent_as_number&quot;</span> : 100.0</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 查看节点信息，其中 * 表示当前节点为master节点</span></span><br><span class="line">$ curl -u elastic:123456 --cacert /usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/http_ca.crt  https://127.0.0.1:9200/_cat/nodes?v</span><br><span class="line">ip           heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name</span><br><span class="line">10.250.0.17             8          63  28    1.03    0.38     0.14 cdfhilmrstw -      node-2</span><br><span class="line">10.250.0.173            9          63  22    0.86    0.37     0.19 cdfhilmrstw -      node-3</span><br><span class="line">10.250.0.239            9          78   6    0.38    0.22     0.16 cdfhilmrstw *      node-1</span><br></pre></td></tr></table></figure><h2 id="重要说明">重要说明</h2><ul class="lvl-0"><li class="lvl-2"><p>集群一旦创建完成，则至少需要两个节点运行才能保证集群可用性，否则集群将无法运行。</p></li><li class="lvl-2"><p>如果<code>node-1</code>节点挂了，集群中剩下的两个节点会重新选择一个新的<code>master</code>节点，不会影响集群的可用性。</p></li><li class="lvl-2"><p>一旦关闭<code>node-1</code>，则重新启动<code>node-1</code>节点前要修改其配置文件，否则无法启动成功。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释掉该配置</span></span><br><span class="line"><span class="comment"># cluster.initial_master_nodes: [&quot;node-1&quot;]</span></span><br><span class="line"><span class="comment"># 加入该配置，实际上最好在重启每个节点前，将每个节点都配置为这样</span></span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;10.250.0.239:9300&quot;</span>, <span class="string">&quot;10.250.0.17:9300&quot;</span>, <span class="string">&quot;10.250.0.173:9300&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="Kibana关联ES集群">Kibana关联ES集群</h2><ul class="lvl-0"><li class="lvl-2"><p>Kibana 关联单节点ES参考 <a href="/2025/03/21/kibana-01-install/" title="linux下安装Kibana">linux下安装Kibana</a>，在此基础上对配置文件进行如下修改：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关联集群的节点地址，将集群内所有节点的地址都配置到该字段中</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">&#x27;https://10.250.0.239:9200&#x27;</span>, <span class="string">&#x27;https://10.250.0.173:9200&#x27;</span>, <span class="string">&#x27;https://10.250.0.17:9200&#x27;</span>]</span><br><span class="line"><span class="comment"># 关联集群的输出地址，将集群内所有节点的地址都配置到该字段中</span></span><br><span class="line">xpack.fleet.outputs: [&#123;<span class="built_in">id</span>: fleet-default-output, name: default, is_default: <span class="literal">true</span>, is_default_monitoring: <span class="literal">true</span>, <span class="built_in">type</span>: elasticsearch, hosts: [<span class="string">&#x27;https://10.250.0.239:9200&#x27;</span>, <span class="string">&#x27;https://10.250.0.173:9200&#x27;</span>, <span class="string">&#x27;https://10.250.0.17:9200&#x27;</span>], ca_trusted_fingerprint: 3f141c16dfc6e165894bc1672084b220dcdd22ffe02116d51ac18003cfaa5a1d&#125;]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>重启Kibana</p></li><li class="lvl-2"><p>只要保证集群内至少有两个ES节点工作正常，即可正常访问Kibana</p></li></ul><h2 id="nginx反向代理ES集群">nginx反向代理ES集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/es.conf <span class="comment"># 添加如下内容</span></span><br><span class="line">upstream es &#123;</span><br><span class="line">    server 10.250.0.239:9200;</span><br><span class="line">    server 10.250.0.173:9200;</span><br><span class="line">    server 10.250.0.17:9200;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       8888;</span><br><span class="line">        server_name  localhost es.domain;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass https://es; <span class="comment">#这个名称和要上面 upstream es 对应，注意这里是 https 协议</span></span><br><span class="line">            proxy_redirect     default;</span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">            proxy_set_header   Host              <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header   X-Real-IP         <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header   X-Forwarded-For   <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header   X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            proxy_max_temp_file_size 0;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#this is the maximum upload size</span></span><br><span class="line">            client_max_body_size       10m;</span><br><span class="line">            client_body_buffer_size    128k;</span><br><span class="line"></span><br><span class="line">            proxy_connect_timeout      90;</span><br><span class="line">            proxy_send_timeout         90;</span><br><span class="line">            proxy_read_timeout         90;</span><br><span class="line">            proxy_buffering            off;</span><br><span class="line">            proxy_request_buffering    off; <span class="comment"># Required for HTTP CLI commands</span></span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;&quot;</span>; <span class="comment"># Clear for keepalive</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="comment"># 访问ES集群</span></span><br><span class="line">curl -u elastic:123456 http://127.0.0.1:8888/_cluster/health?pretty</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在linux下安装Elasticsearch集群(三节点)&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;单节点安装参考&lt;a href=&quot;/2025/03/20/elasticsearch-01-install/&quot; title=&quot;linux下安装Elasticsearch&quot;&gt;linux下安装Elasticsearch&lt;/a&gt;，本文在此基础上完成集群安装&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装Kibana</title>
    <link href="https://blog.hanqunfeng.com/2025/03/21/kibana-01-install/"/>
    <id>https://blog.hanqunfeng.com/2025/03/21/kibana-01-install/</id>
    <published>2025-03-21T13:30:05.000Z</published>
    <updated>2025-04-22T02:38:15.404Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍如何在linux下安装Kibana</p></li><li class="lvl-2"><p>Kibana版本8.17.3</p></li><li class="lvl-2"><p>Elasticsearch版本8.17.3，<a href="/2025/03/20/elasticsearch-01-install/" title="linux下安装Elasticsearch">linux下安装Elasticsearch</a></p></li></ul><span id="more"></span><h2 id="下载">下载</h2><ul class="lvl-0"><li class="lvl-2"><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#kibana">https://www.elastic.co/cn/downloads/past-releases#kibana</a></p></li><li class="lvl-2"><p>选择对应的版本：这里选择当前的最新版<code>Kibana 8.17.3</code>，之后选择对应的操作系统<code>LINUX X86_64</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-8.17.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>下载完成后解压到<code>/usr/local/kibana</code>目录下，解压命令如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/kibana</span><br><span class="line">tar -zxvf kibana-8.17.3-linux-x86_64.tar.gz -C /usr/local/kibana</span><br></pre></td></tr></table></figure><h2 id="创建启动用户">创建启动用户</h2><ul class="lvl-0"><li class="lvl-2"><p>elasticsearch和kibana都不能用root用户启动</p></li><li class="lvl-2"><p>创建用户<code>elastic</code>，并设置密码，这一步我们在安装elasticsearch的时候已经配置过了，这里就不再赘述了</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd elastic</span><br><span class="line">passwd elastic</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改kibana安装目录的用户权限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R elastic:elastic /usr/local/kibana</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>切换到elastic用户下执行命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - elastic</span><br></pre></td></tr></table></figure><h2 id="关联Kibana和Elasticsearch">关联Kibana和Elasticsearch</h2><h3 id="方法1：注册令牌Token关联-官方推荐">方法1：注册令牌Token关联[官方推荐]</h3><ul class="lvl-0"><li class="lvl-2"><p>注意此方法要求<code>elasticsearch</code>必须开启安全认证，而且<code>xpack.security.http.ssl.enabled</code> 必须设置为 true</p></li><li class="lvl-2"><p>配置启动文件，进入<code>/usr/local/kibana/kibana-8.17.3/config</code>目录，根据需要修改<code>kibana.yml</code>文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口，默认5601</span></span><br><span class="line">server.port: 5601</span><br><span class="line"><span class="comment"># kibana服务器的ip，4个0表示任何一个网卡都可以访问，默认为localhost</span></span><br><span class="line">server.host: <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="comment"># 中文，默认为 en</span></span><br><span class="line">i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span><br><span class="line"><span class="comment"># 配置https，默认值为 certificate</span></span><br><span class="line">elasticsearch.ssl.verificationMode: <span class="string">&#x27;certificate&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>还记得我们第一次启动ES时日志信息中的有关kibana注册令牌的信息吗？那个令牌只有30分钟有效期，过期后可以进入elasticsearch安装目录，重新创建kibana注册令牌</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch-create-enrollment-token -s kibana</span><br><span class="line"><span class="comment"># 输出结果如下</span></span><br><span class="line">eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6ImxlTWh1SlVCcVJWQUw4WGFjMk1HOkVHYTYxcWlfVEotQWQ1Y3dQdXcyckEifQ==</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>进入kibana安装目录，通过下面的命令注册 Kibana</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bin/kibana-setup --enrollment-token &lt;enrollment-token&gt;</span></span><br><span class="line">bin/kibana-setup --enrollment-token eyJ2ZXIiOiI4LjE0LjAiLCJhZHIiOlsiMTAuMjUwLjAuMjM5OjkyMDAiXSwiZmdyIjoiM2YxNDFjMTZkZmM2ZTE2NTg5NGJjMTY3MjA4NGIyMjBkY2RkMjJmZmUwMjExNmQ1MWFjMTgwMDNjZmFhNWExZCIsImtleSI6ImxlTWh1SlVCcVJWQUw4WGFjMk1HOkVHYTYxcWlfVEotQWQ1Y3dQdXcyckEifQ==</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册成功会输出</span></span><br><span class="line">✔ Kibana configured successfully.</span><br></pre></td></tr></table></figure><div class="tips"><ul class="lvl-1"><li class="lvl-2"><p>如果ES的<code>xpack.security.http.ssl.enabled</code> 设置为 false，注册Kibana时会报错，报错信息如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">✖ Unable to connect to Elasticsearch with the provided enrollment token: Unable to connect to any of the provided hosts.</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2">注册成功后会在<code>/usr/local/kibana/kibana-8.17.3/config/kibana.yml</code>文件中添加如下内容：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This section was automatically generated during setup.</span></span><br><span class="line"><span class="comment"># ES服务URL</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">&#x27;https://10.250.0.239:9200&#x27;</span>] <span class="comment"># 10.250.0.239是本机的内网IP</span></span><br><span class="line"><span class="comment"># 指定用于认证的服务账户令牌</span></span><br><span class="line">elasticsearch.serviceAccountToken: AAEAAWVsYXN0aWMva2liYW5hL2Vucm9sbC1wcm9jZXNzLXRva2VuLTE3NDI1NTA5ODU0MTg6Z2lJUERGaG1TR3VNcC1sb0RyMnMydw</span><br><span class="line"><span class="comment"># 指定用来验证 Elasticsearch 服务器 SSL 证书的 CA 证书路径</span></span><br><span class="line">elasticsearch.ssl.certificateAuthorities: [/usr/local/kibana/kibana-8.17.3/data/ca_1742550986498.crt]</span><br><span class="line"><span class="comment"># 配置 Fleet 的输出目标。Fleet 是 Elastic 的一个管理工具，用于管理和监控弹性栈（Elastic Stack）。这个配置定义了 Fleet 默认输出的目标，即 Elasticsearch。</span></span><br><span class="line">xpack.fleet.outputs: [&#123;<span class="built_in">id</span>: fleet-default-output, name: default, is_default: <span class="literal">true</span>, is_default_monitoring: <span class="literal">true</span>, <span class="built_in">type</span>: elasticsearch, hosts: [<span class="string">&#x27;https://10.250.0.239:9200&#x27;</span>], ca_trusted_fingerprint: 3f141c16dfc6e165894bc1672084b220dcdd22ffe02116d51ac18003cfaa5a1d&#125;]</span><br><span class="line">  <span class="comment"># id: fleet-default-output：输出的唯一标识符。</span></span><br><span class="line">  <span class="comment"># name: default：输出的名称。</span></span><br><span class="line">  <span class="comment"># is_default: true：表示这是默认输出。</span></span><br><span class="line">  <span class="comment"># is_default_monitoring: true：表示这是默认的监控输出。</span></span><br><span class="line">  <span class="comment"># type: elasticsearch：输出类型是 Elasticsearch。</span></span><br><span class="line">  <span class="comment"># hosts: [&#x27;https://10.250.0.239:9200&#x27;]：连接到的 Elasticsearch 主机地址。</span></span><br><span class="line">  <span class="comment"># ca_trusted_fingerprint: 3f141c16dfc6e165894bc1672084b220dcdd22ffe02116d51ac18003cfaa5a1d：CA 证书的信任指纹，用于验证 CA 证书的身份。</span></span><br></pre></td></tr></table></figure><h3 id="方法2：用户名密码关联">方法2：用户名密码关联</h3><ul class="lvl-1"><li class="lvl-2"><p>创建kibana连接elasticsearch的用户密码，不能用 <code>elastic</code> 这个用户，因为这个是超级用户，要使用 kibana_system 用户</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入elasticsearch安装目录，执行下面的命令重置 kibana_system 用户的密码</span></span><br><span class="line">bin/elasticsearch-reset-password -u kibana_system -i</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2"><p>配置启动文件，进入<code>/usr/local/kibana/kibana-8.17.3/config</code>目录，修改<code>kibana.yml</code>文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口，默认5601</span></span><br><span class="line">server.port: 5601</span><br><span class="line"><span class="comment"># kibana服务器的ip，4个0表示任何一个网卡都可以访问</span></span><br><span class="line">server.host: <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elasctisearch关联</span></span><br><span class="line"><span class="comment"># ES服务地址，注意这里是https</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">&quot;https://10.250.0.239:9200&quot;</span>]</span><br><span class="line"><span class="comment"># 指定https证书路径，可以从ES的证书目录中获取</span></span><br><span class="line">elasticsearch.ssl.certificateAuthorities: [<span class="string">&quot;/usr/local/elasticsearch/elasticsearch-8.17.3/config/certs/http_ca.crt&quot;</span>]</span><br><span class="line"><span class="comment"># 用户名密码</span></span><br><span class="line">elasticsearch.username: <span class="string">&quot;kibana_system&quot;</span></span><br><span class="line">elasticsearch.password: <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="comment"># 中文</span></span><br><span class="line">i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2"><p>如果ES没有开启安全认证，则只需要进行如下配置即可：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口，默认5601</span></span><br><span class="line">server.port: 5601</span><br><span class="line"><span class="comment"># kibana服务器的ip，4个0表示任何一个网卡都可以访问</span></span><br><span class="line">server.host: <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="comment"># ES服务地址，注意这里是http</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">&quot;http://10.250.0.239:9200&quot;</span>]</span><br><span class="line"><span class="comment"># 中文</span></span><br><span class="line">i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure></div><h2 id="启动Kibana服务">启动Kibana服务</h2><ul class="lvl-0"><li class="lvl-2"><p>进入<code>/usr/local/kibana/kibana-8.17.3</code>目录，执行以下命令启动服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/kibana</span><br><span class="line"><span class="comment"># 后台启动，并将日志写入到logs/kibana.log</span></span><br><span class="line"><span class="built_in">nohup</span> bin/kibana &gt; logs/kibana.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>访问地址：<a href="http://localhost:5601">http://localhost:5601</a>，这里注意登录用户需要使用：<code>elastic</code>，而不是<code>kibana_system</code>。</p></li></ul><h2 id="启动Kibana服务后的日志告警">启动Kibana服务后的日志告警</h2><ul class="lvl-0"><li class="lvl-2"><p>Kibana服务启动后，会在<code>/usr/local/kibana/kibana-8.17.3/logs/kibana.log</code>文件中记录一些错误日志，如果出现错误，可以查看日志，解决错误。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[WARN ][plugins.fleet] xpack.encryptedSavedObjects.encryptionKey is not configured, private key passphrase is being stored <span class="keyword">in</span> plain text</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这个警告信息表明 Kibana 的某些插件（如 Fleet）在缺少 <code>xpack.encryptedSavedObjects.encryptionKey</code> 配置的情况下运行，导致私钥密码和代理卸载令牌以明文形式存储。为了提高安全性，建议配置一个加密密钥。</p></li><li class="lvl-2"><p>生成加密密钥</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kibana-encryption-keys generate</span><br><span class="line">Kibana is currently running with legacy OpenSSL providers enabled! For details and instructions on how to <span class="built_in">disable</span> see https://www.elastic.co/guide/en/kibana/8.17/production.html#openssl-legacy-provider</span><br><span class="line"><span class="comment">## Kibana Encryption Key Generation Utility</span></span><br><span class="line"></span><br><span class="line">The <span class="string">&#x27;generate&#x27;</span> <span class="built_in">command</span> guides you through the process of setting encryption keys <span class="keyword">for</span>:</span><br><span class="line"></span><br><span class="line">xpack.encryptedSavedObjects.encryptionKey</span><br><span class="line">    Used to encrypt stored objects such as dashboards and visualizations</span><br><span class="line">    https://www.elastic.co/guide/en/kibana/current/xpack-security-secure-saved-objects.html#xpack-security-secure-saved-objects</span><br><span class="line"></span><br><span class="line">xpack.reporting.encryptionKey</span><br><span class="line">    Used to encrypt saved reports</span><br><span class="line">    https://www.elastic.co/guide/en/kibana/current/reporting-settings-kb.html#general-reporting-settings</span><br><span class="line"></span><br><span class="line">xpack.security.encryptionKey</span><br><span class="line">    Used to encrypt session information</span><br><span class="line">    https://www.elastic.co/guide/en/kibana/current/security-settings-kb.html#security-session-and-cookie-settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Already defined settings are ignored and can be regenerated using the --force flag.  Check the documentation links <span class="keyword">for</span> instructions on how to rotate encryption keys.</span><br><span class="line">Definitions should be <span class="built_in">set</span> <span class="keyword">in</span> the kibana.yml used configure Kibana.</span><br><span class="line"></span><br><span class="line">Settings:</span><br><span class="line">xpack.encryptedSavedObjects.encryptionKey: 47967e4b78bd26decb622b78f0ddd324</span><br><span class="line">xpack.reporting.encryptionKey: 78b5f603f3b0e6ad76c13a0f5d00cde0</span><br><span class="line">xpack.security.encryptionKey: 8aa7f4dfbc4e734a2a9f92a2730b36af</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置 Kibana 以使用加密密钥，添加到 kibana.yml 文件中：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xpack.encryptedSavedObjects.encryptionKey: 47967e4b78bd26decb622b78f0ddd324</span><br><span class="line">xpack.reporting.encryptionKey: 78b5f603f3b0e6ad76c13a0f5d00cde0</span><br><span class="line">xpack.security.encryptionKey: 8aa7f4dfbc4e734a2a9f92a2730b36af</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>重启 Kibana 服务 以应用更改。</p></li></ul><h2 id="Kibana-自启动脚本">Kibana 自启动脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建服务文件</span></span><br><span class="line">$ vim /usr/lib/systemd/system/kibana.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=kibana</span><br><span class="line">Documentation=https://www.elastic.co</span><br><span class="line">After=es.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 指定ES用户</span></span><br><span class="line">User=elastic</span><br><span class="line">Group=elastic</span><br><span class="line">LimitNOFILE=100000</span><br><span class="line">LimitNPROC=100000</span><br><span class="line">Restart=<span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line">ExecStart=/usr/local/kibana/kibana-8.17.3/bin/kibana</span><br><span class="line">ExecRestart=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载</span></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ systemctl start kibana</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">$ systemctl stop kibana</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">$ systemctl status kibana</span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> kibana</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍如何在linux下安装Kibana&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Kibana版本8.17.3&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;Elasticsearch版本8.17.3，&lt;a href=&quot;/2025/03/20/elasticsearch-01-install/&quot; title=&quot;linux下安装Elasticsearch&quot;&gt;linux下安装Elasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="elastic" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/"/>
    
    <category term="kibana" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/elastic/kibana/"/>
    
    
    <category term="elasticsearch" scheme="https://blog.hanqunfeng.com/tags/elasticsearch/"/>
    
    <category term="kibana" scheme="https://blog.hanqunfeng.com/tags/kibana/"/>
    
  </entry>
  
</feed>
