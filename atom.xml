<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飘逸峰的博客</title>
  
  <subtitle>Spring--Java程序员的春天</subtitle>
  <link href="https://blog.hanqunfeng.com/atom.xml" rel="self"/>
  
  <link href="https://blog.hanqunfeng.com/"/>
  <updated>2025-09-04T09:07:43.280Z</updated>
  <id>https://blog.hanqunfeng.com/</id>
  
  <author>
    <name>飘逸峰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot3 + ShardingSphere-Proxy5.5.2 分库分表</title>
    <link href="https://blog.hanqunfeng.com/2025/09/04/springboot3-shardingsphere-proxy/"/>
    <id>https://blog.hanqunfeng.com/2025/09/04/springboot3-shardingsphere-proxy/</id>
    <published>2025-09-04T13:30:05.000Z</published>
    <updated>2025-09-04T09:07:43.280Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 SpringBoot3.5.5 + ShardingSphere-Proxy5.5.2 分库分表的使用。</p></li><li class="lvl-2"><p><a href="https://shardingsphere.apache.org/index_zh.html">ShardingSphere官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo/shardingsphere-proxy">本文项目代码Github地址</a></p></li><li class="lvl-2"><p>本文将 <a href="/2025/09/01/springboot3-shardingsphere/" title="SpringBoot3 + ShardingSphere-JDBC5.5.2 分库分表">SpringBoot3 + ShardingSphere-JDBC5.5.2 分库分表</a> 修改为 <code>ShardingSphere-Proxy</code> 的模式</p></li></ul><span id="more"></span><h2 id="部署-ShardingSphere-Proxy">部署 ShardingSphere-Proxy</h2><ul class="lvl-0"><li class="lvl-2"><p>下载 <a href="https://shardingsphere.apache.org/document/current/cn/downloads/">ShardingSphere-Proxy5.5.2</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.apache.org/dyn/closer.lua/shardingsphere/5.5.2/apache-shardingsphere-5.5.2-shardingsphere-proxy-bin.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf apache-shardingsphere-5.5.2-shardingsphere-proxy-bin.tar.gz</span><br><span class="line"><span class="built_in">cd</span> apache-shardingsphere-5.5.2-shardingsphere-proxy-bin/</span><br></pre></td></tr></table></figure><h2 id="配置-ShardingSphere-Proxy">配置 ShardingSphere-Proxy</h2><ul class="lvl-0"><li class="lvl-2"><p><code>conf/global.yaml</code>: 全局配置</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/yaml-config/authority/</span></span><br><span class="line"><span class="attr">authority:</span></span><br><span class="line"> <span class="attr">users:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">user:</span> <span class="string">root@127.0.0.1</span> <span class="comment"># 格式：用户名@IP</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">     <span class="attr">admin:</span> <span class="literal">true</span>          <span class="comment"># 是否是管理员</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">user:</span> <span class="string">sharding@%</span>     <span class="comment"># 所有IP都可以访问</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">sharding</span></span><br><span class="line"> <span class="attr">privilege:</span></span><br><span class="line">   <span class="attr">type:</span> <span class="string">DATABASE_PERMITTED</span> <span class="comment"># 权限类型</span></span><br><span class="line">   <span class="attr">props:</span></span><br><span class="line">      <span class="attr">user-database-mappings:</span> <span class="string">root@127.0.0.1=*,sharding@%=sharding_db</span> <span class="comment"># 用户权限映射，*表示所有数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性配置：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/props/</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span> <span class="comment"># 控制台打印改写后的 SQL，便于排错，默认为 false</span></span><br><span class="line">  <span class="attr">check-table-metadata-enabled:</span> <span class="literal">false</span> <span class="comment"># 在程序启动和更新时，是否检查分片元数据的结构一致性，默认为 false</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>conf/database-my.yaml</code>: 自定义分配规则配置</p></li></ul><blockquote><p>注意:<br>1.名称必须以 <code>database-</code>开头，实际上<code>conf</code>目录下有很多示例，我们可以根据需要进行配置<br>2.<code>global.yaml</code>中的配置项不能配置到 <code>database-my.yaml</code>中</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库名称</span></span><br><span class="line"><span class="attr">databaseName:</span> <span class="string">sharding_db</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据源配置: https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/data-source/</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span> <span class="comment"># 逻辑数据源名称</span></span><br><span class="line">    <span class="comment"># dataSourceClassName: com.zaxxer.hikari.HikariDataSource # 不要指定</span></span><br><span class="line">    <span class="comment"># driverClassName: com.mysql.cj.jdbc.Driver               # 不要指定</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb0?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span>  <span class="comment"># 注意这里属性为 url</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ds_1:</span></span><br><span class="line">    <span class="comment"># dataSourceClassName: com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment"># driverClassName: com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb1?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下规则与前文中的 shardingsphere-jdbc 中的 rules 相同</span></span><br><span class="line"><span class="comment"># 分片规则配置: https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="comment"># 绑定表：同分片键 join 时走同路由，减少广播,多个逗号分隔，要求分片规则一致</span></span><br><span class="line">    <span class="attr">bindingTables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t_order,t_order_item</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">course:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.course_$&#123;1..2&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">cid</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_inline</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">cid</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order-complex-algorithm</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_item_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span>  <span class="comment"># 分片列名称,多个逗号分隔</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_item-class-based-algorithm_spi</span> <span class="comment"># 基于 SPI 的分片算法，效果同上，建议生产环境使用 SPI</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">t_user:</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_user_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span>  <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">id</span> <span class="comment"># 自增列名称，字符串类型</span></span><br><span class="line">          <span class="comment">#           keyGeneratorName: uuid # 分布式序列算法名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">custom_snowflake_string</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#       t_address:      # 普通表（不分库分表，绑定到 ds_0）,没有默认的数据源配置，所以每个都要显示声明</span></span><br><span class="line">    <span class="comment">#         actualDataNodes: ds_0.t_address # 实际数据节点</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">autoTables:</span> <span class="comment"># 自动分片规则配置</span></span><br><span class="line">      <span class="attr">t_order:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法 https://shardingsphere.apache.org/document/current/cn/dev-manual/sharding/</span></span><br><span class="line">      <span class="attr">course_inline:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span> <span class="comment"># 基于行表达式的分片算法，这里使用 MOD 会报错</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 属性</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">course_$&#123;cid</span> <span class="string">%</span> <span class="number">2</span> <span class="string">+</span> <span class="number">1</span><span class="string">&#125;</span> <span class="comment"># 表达式，这是因为表名称为 course_1, course_2</span></span><br><span class="line">          <span class="attr">allow-range-query-with-inline-sharding:</span> <span class="literal">true</span> <span class="comment"># 允许范围查询</span></span><br><span class="line">      <span class="attr">course_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 表示 ds_0, ds_1</span></span><br><span class="line">      <span class="attr">mod_2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MOD</span> <span class="comment"># 基于 MOD 的分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">sharding-count:</span> <span class="number">2</span> <span class="comment"># 分片数量，即 对 2 进行取余</span></span><br><span class="line">      <span class="attr">t_order_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order-complex-algorithm:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">COMPLEX_INLINE</span> <span class="comment"># 基于行表达式的复合分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_order_complex_$&#123;(user_id</span> <span class="string">+</span> <span class="string">order_id</span> <span class="string">+</span> <span class="number">1</span><span class="string">)</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order_item-class-based-algorithm_spi:</span> <span class="comment"># SPI</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">T_ORDER_ITEM_COMPLEX</span> <span class="comment"># 基于自定义类的分片算法</span></span><br><span class="line">      <span class="attr">t_user_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;Math.abs(id.hashCode()%2)&#125;</span></span><br><span class="line">      <span class="attr">t_user_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_user_$&#123;Math.abs(id.hashCode()%4).intdiv(2)&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器: https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/keygen/</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br><span class="line">      <span class="attr">uuid:</span> <span class="comment"># 定义名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">UUID</span> <span class="comment"># 字符串主键，String</span></span><br><span class="line">      <span class="attr">custom_snowflake_string:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">CUSTOM_SNOWFLAKE_STRING</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">workerId:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">datacenterId:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!BROADCAST</span>  <span class="comment"># 广播表配置，即所有的库中都包含指定的表，写入数据时同时写入多个库，查询时随机读一个</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dict</span>    <span class="comment"># 广播表名称，⼴播表不能配置分表逻辑，只往多个库的同⼀个表中插⼊数据。</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!ENCRYPT</span>    <span class="comment"># 数据加密配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span> <span class="comment"># 加密表名称</span></span><br><span class="line">        <span class="attr">columns:</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 加密列名称</span></span><br><span class="line">            <span class="attr">cipher:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">password</span> <span class="comment"># 密文列名称</span></span><br><span class="line">              <span class="attr">encryptorName:</span> <span class="string">aes_encryptor</span> <span class="comment"># 密文列加密算法名称</span></span><br><span class="line">    <span class="comment"># 加密算法配置: https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/encrypt/</span></span><br><span class="line">    <span class="attr">encryptors:</span></span><br><span class="line">      <span class="attr">aes_encryptor:</span> <span class="comment"># 加解密算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">AES</span> <span class="comment"># 加解密算法类型</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 加解密算法属性配置</span></span><br><span class="line">          <span class="attr">aes-key-value:</span> <span class="string">123456abc</span>     <span class="comment"># AES 使用的 KEY</span></span><br><span class="line">          <span class="attr">digest-algorithm-name:</span> <span class="string">SHA-1</span> <span class="comment"># AES KEY 的摘要算法</span></span><br><span class="line">      <span class="attr">md5_encryptor:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">salt:</span> <span class="number">123456</span>  <span class="comment"># 盐值（可选）</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!MASK</span>  <span class="comment"># 数据脱敏配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span> <span class="comment"># 脱敏表名称</span></span><br><span class="line">        <span class="attr">columns:</span> <span class="comment"># 脱敏列配置</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 脱敏列名称</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">md5_mask</span> <span class="comment"># 脱敏算法名称</span></span><br><span class="line">          <span class="attr">email:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">mask_before_special_chars_mask</span></span><br><span class="line">          <span class="attr">telephone:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">keep_first_n_last_m_mask</span></span><br><span class="line">          <span class="attr">name:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">my_mask</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">maskAlgorithms:</span> <span class="comment"># 脱敏算法配置</span></span><br><span class="line">      <span class="attr">md5_mask:</span> <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span>  <span class="comment"># 脱敏算法类型，md5加密后展示</span></span><br><span class="line">      <span class="attr">mask_before_special_chars_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MASK_BEFORE_SPECIAL_CHARS</span> <span class="comment"># 在特殊字符（比如邮箱里的 @）前面做脱敏，示例：myemail@example.com → *******@example.com</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">special-chars:</span> <span class="string">&#x27;@&#x27;</span>  <span class="comment"># 遇到 @ 之前的部分做脱敏</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span>   <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">keep_first_n_last_m_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">KEEP_FIRST_N_LAST_M</span> <span class="comment"># 保留前 n 位和后 m 位，其余用替换字符填充，示例：13812345678 → 138****5678</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">first-n:</span> <span class="number">3</span>     <span class="comment"># 保留前 3 位</span></span><br><span class="line">          <span class="attr">last-m:</span> <span class="number">4</span>      <span class="comment"># 保留后 4 位</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">my_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MY_CUSTOM_MASK</span>  <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&quot;#&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SINGLE</span> <span class="comment"># 单表规则配置，单表规则优先级高于分库分表规则</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="comment"># MySQL 风格</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ds_0.t_address</span> <span class="comment"># 加载指定单表</span></span><br><span class="line"><span class="comment">#       - ds_1.* # 加载指定数据源中的全部单表</span></span><br><span class="line"><span class="comment">#       - &quot;*.*&quot; # 加载全部单表</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>上面的<code>rules</code>中使用的是<code>mysql</code>数据库，所以我们需要引入<code>mysql</code>数据库的依赖</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> apache-shardingsphere-5.5.2-shardingsphere-proxy-bin/</span><br><span class="line"><span class="built_in">mkdir</span> ext-lib</span><br><span class="line"><span class="built_in">cd</span> ext-lib</span><br><span class="line">wget https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.11/mysql-connector-java-8.0.11.jar</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>同时<code>rules</code>中包含一些自定义的算法，我们也需要将这些算法作为依赖进行引入，将这些算法类打成<code>jar</code>，然后也拷贝到<code>ext-lib</code>目录下，我已经将其发布到了github上，实际上和前文中的 <code>shardingsphere-jdbc</code> 项目中将算法配置为 <code>spi</code> 的方式是一致的。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 只克隆仓库的基本信息，不下载所有文件</span></span><br><span class="line">git <span class="built_in">clone</span> --filter=blob:none --sparse https://github.com/hanqunfeng/springbootchapter.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 进入仓库目录</span></span><br><span class="line"><span class="built_in">cd</span> springbootchapter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 设置只检出你需要的目录</span></span><br><span class="line">git sparse-checkout <span class="built_in">set</span> springboot3-demo/shardingsphere-demo/algorithm-swapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 编译打包</span></span><br><span class="line"><span class="built_in">cd</span> springboot3-demo/shardingsphere-demo/algorithm-swapper</span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 将打好的包复制到 shardingsphere-proxy 的 ext-lib 目录下</span></span><br><span class="line"><span class="built_in">cp</span> target/algorithm-swapper-1.0.0.jar <span class="variable">$shardingsphere</span>-proxy$/ext-lib</span><br></pre></td></tr></table></figure><h2 id="启动与关闭-ShardingSphere-Proxy">启动与关闭 ShardingSphere Proxy</h2><ul class="lvl-0"><li class="lvl-2"><p>ShardingSphere Proxy 要求 JDK 1.8 或以上版本</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$shardingsphere</span>-proxy$/bin</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./start.sh</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">./stop.sh</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>ShardingSphere-Proxy 启动命令速查表</p></li></ul><table><thead><tr><th>场景</th><th>命令示例</th><th>说明</th></tr></thead><tbody><tr><td><strong>默认启动</strong></td><td><code>./start.sh</code></td><td>默认端口 <code>3307</code>，配置目录 <code>conf</code></td></tr><tr><td><strong>指定端口和配置目录</strong></td><td><code>./start.sh 3308 /opt/shardingsphere-proxy/conf</code></td><td>简写模式，指定端口和配置目录</td></tr><tr><td><strong>参数形式启动</strong></td><td><code>./start.sh -p 3308 -c /opt/shardingsphere-proxy/conf</code></td><td>与上面等效，但更明确</td></tr><tr><td><strong>指定监听地址</strong></td><td><code>./start.sh -a 192.168.1.100 -p 3307 -c conf</code></td><td>指定单个 IP 地址</td></tr><tr><td><strong>指定多个监听地址</strong></td><td><code>./start.sh -a 192.168.1.100,127.0.0.1 -p 3307 -c conf</code></td><td>多个地址用逗号分隔</td></tr><tr><td><strong>强制启动</strong></td><td><code>./start.sh -p 3307 -c conf -f</code></td><td>遇到残留 PID 文件时使用</td></tr><tr><td><strong>启用 agent</strong></td><td><code>./start.sh -p 3307 -c conf -g</code></td><td>启动 ShardingSphere-Agent</td></tr><tr><td><strong>使用 Unix Socket</strong></td><td><code>./start.sh -p 3307 -c conf -s /tmp/sharding-proxy.sock</code></td><td>通过 Socket 文件进行连接</td></tr><tr><td><strong>多选项组合</strong></td><td><code>./start.sh -a 127.0.0.1 -p 3310 -c /opt/proxy/conf -f -g -s /tmp/proxy.sock</code></td><td>一次性指定多个选项</td></tr></tbody></table><h2 id="项目连接-ShardingSphere-Proxy-时，就像连接普通的-mysql-服务一样">项目连接 ShardingSphere-Proxy 时，就像连接普通的 mysql 服务一样</h2><ul class="lvl-0"><li class="lvl-2"><p>示例项目：<a href="https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo/shardingsphere-proxy">https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo/shardingsphere-proxy</a></p></li></ul><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p>在 <code>ShardingSphere-JDBC</code> 和 <code>ShardingSphere-Proxy</code> 中，存在部分 MySQL(其它数据库也类似) 的 SQL 语法或功能目前还不完全支持的情况。<code>ShardingSphere</code> 在做 SQL 路由、改写、执行时，必须能解析 SQL 并理解其语义，但并不是 MySQL 的 100% 完全代理。因此，有些复杂或特定场景下的 SQL 可能无法被正确解析或执行。</p></li><li class="lvl-2"><p>支持良好的 SQL 语法</p><ul class="lvl-2"><li class="lvl-4">基础 DML<br>SELECT、INSERT、UPDATE、DELETE<br>基本的条件查询、排序、分页、分组、聚合函数（如 COUNT、SUM、AVG）</li><li class="lvl-4">DCL<br>基本的事务语句：BEGIN、COMMIT、ROLLBACK</li><li class="lvl-4">DDL<br>部分表结构管理语句：CREATE TABLE、ALTER TABLE、DROP TABLE</li><li class="lvl-4">函数支持<br>大部分常用的 MySQL 内置函数，如字符串、数学、日期函数</li></ul></li></ul><h3 id="在-ShardingSphere-MySQL-下建议避免或谨慎使用的-SQL-清单">在 ShardingSphere + MySQL 下建议避免或谨慎使用的 SQL 清单</h3><ul class="lvl-0"><li class="lvl-2"><ol><li class="lvl-5">跨分片复杂查询</li></ol></li></ul><table><thead><tr><th>SQL 场景</th><th>原因</th><th>建议处理方式</th></tr></thead><tbody><tr><td>多表复杂 JOIN（特别是跨分片）</td><td>需要跨库数据聚合，性能差，可能报错</td><td>使用广播表/绑定表，或在应用层完成</td></tr><tr><td>跨分片子查询</td><td>SQL 路由困难，可能不支持</td><td>尽量改成单表查询或分步查询</td></tr><tr><td>跨分片的 GROUP BY / ORDER BY</td><td>在 Proxy 层聚合，性能很差</td><td>尽量避免，或控制数据量</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><ol start="2"><li class="lvl-5">DDL 相关</li></ol></li></ul><table><thead><tr><th>SQL 场景</th><th>原因</th><th>建议处理方式</th></tr></thead><tbody><tr><td><code>ALTER TABLE</code> 复杂变更</td><td>需在所有分片执行，可能执行失败</td><td>手动在每个分片库执行</td></tr><tr><td><code>CREATE TRIGGER</code>、<code>PROCEDURE</code></td><td>Proxy 不解析这些语法，直接透传不安全</td><td>尽量在单库手动创建</td></tr><tr><td><code>CREATE FUNCTION</code></td><td>同上</td><td>单库执行或应用层替代</td></tr><tr><td><code>FULLTEXT INDEX</code>、<code>SPATIAL INDEX</code></td><td>分片环境下无法自动维护索引</td><td>单库手动维护或避免使用</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><ol start="3"><li class="lvl-5">文件导入导出</li></ol></li></ul><table><thead><tr><th>SQL 场景</th><th>原因</th><th>建议处理方式</th></tr></thead><tbody><tr><td><code>LOAD DATA INFILE</code></td><td>Proxy 不支持文件系统直接访问</td><td>在分片库手动执行或通过应用导入</td></tr><tr><td><code>SELECT ... INTO OUTFILE</code></td><td>同上</td><td>应用层处理导出</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><ol start="4"><li class="lvl-5">MySQL 特有功能</li></ol></li></ul><table><thead><tr><th>功能</th><th>支持情况</th><th>建议</th></tr></thead><tbody><tr><td>MySQL 8.0 公共表表达式（CTE）</td><td>部分支持</td><td>避免跨分片使用</td></tr><tr><td>窗口函数（<code>OVER() PARTITION BY</code>）</td><td>部分支持</td><td>避免跨分片大数据量使用</td></tr><tr><td>JSON 函数</td><td>基本支持</td><td>单表场景可用，跨分片需谨慎</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>分布式事务</p></li></ul><table><thead><tr><th>场景</th><th>问题原因</th><th>建议处理方式</th></tr></thead><tbody><tr><td>跨分片原生事务</td><td>MySQL 原生事务不支持跨库</td><td>使用 ShardingSphere XA / BASE</td></tr><tr><td>大事务 + 分布式事务</td><td>性能开销大</td><td>尽量控制事务范围</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 SpringBoot3.5.5 + ShardingSphere-Proxy5.5.2 分库分表的使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://shardingsphere.apache.org/index_zh.html&quot;&gt;ShardingSphere官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo/shardingsphere-proxy&quot;&gt;本文项目代码Github地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文将 &lt;a href=&quot;/2025/09/01/springboot3-shardingsphere/&quot; title=&quot;SpringBoot3 + ShardingSphere-JDBC5.5.2 分库分表&quot;&gt;SpringBoot3 + ShardingSphere-JDBC5.5.2 分库分表&lt;/a&gt; 修改为 &lt;code&gt;ShardingSphere-Proxy&lt;/code&gt; 的模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/"/>
    
    <category term="sharding-sphere" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/sharding-sphere/"/>
    
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/tags/springboot/"/>
    
    <category term="sharding-sphere" scheme="https://blog.hanqunfeng.com/tags/sharding-sphere/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot3 + ShardingSphere-JDBC5.5.2 分库分表</title>
    <link href="https://blog.hanqunfeng.com/2025/09/01/springboot3-shardingsphere/"/>
    <id>https://blog.hanqunfeng.com/2025/09/01/springboot3-shardingsphere/</id>
    <published>2025-09-01T13:30:05.000Z</published>
    <updated>2025-09-04T07:48:42.508Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 SpringBoot3.5.5 + ShardingSphere-JDBC5.5.2 分库分表的使用。</p></li><li class="lvl-2"><p><a href="https://shardingsphere.apache.org/index_zh.html">ShardingSphere官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo">本文项目代码Github地址</a></p></li></ul><span id="more"></span><h2 id="maven依赖">maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本项目 基于 mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis plus，本项目用到，非必须 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ShardingSphere JDBC 主依赖（5.5.2 建议） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="application-yml">application.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.apache.shardingsphere.driver.ShardingSphereDriver</span></span><br><span class="line">    <span class="comment"># 指向类路径下的 sharding.yaml（也可 absolute path / file: / http: 等，见官方说明）</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:shardingsphere:classpath:sharding.yaml</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>也可以不在 <code>application.yml</code> 中配置，而是通过 <code>@Configuration</code> 创建 <code>@Bean</code>，这样就可以配置多数据源了。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;shardingDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">shardingDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, IOException &#123;</span><br><span class="line">        <span class="comment">// ShardingSphere 提供的工厂方法，根据配置构建 DataSource</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;sharding.yaml&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Cannot find sharding.yaml in classpath&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] yamlBytes = inputStream.readAllBytes();</span><br><span class="line">            <span class="keyword">return</span> YamlShardingSphereDataSourceFactory.createDataSource(yamlBytes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sharding-yaml">sharding.yaml</h2><ul class="lvl-0"><li class="lvl-2"><p>完整配置，下文会介绍部分配置</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据源配置: https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/data-source/</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span> <span class="comment"># 逻辑数据源名称</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb0?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ds_1:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb1?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分片规则配置: https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="comment"># 绑定表：同分片键 join 时走同路由，减少广播,多个逗号分隔，要求分片规则一致</span></span><br><span class="line">    <span class="attr">bindingTables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t_order,t_order_item</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">course:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.course_$&#123;1..2&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">cid</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_inline</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">cid</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order-complex-algorithm</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_item_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span>  <span class="comment"># 分片列名称,多个逗号分隔</span></span><br><span class="line"><span class="comment">#             shardingAlgorithmName: t_order_item-class-based-algorithm   # 基于自定义类的分片算法</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_item-class-based-algorithm_spi</span> <span class="comment"># 基于 SPI 的分片算法，效果同上，建议生产环境使用 SPI</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">t_user:</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_user_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span>  <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">id</span> <span class="comment"># 自增列名称，字符串类型</span></span><br><span class="line"><span class="comment">#           keyGeneratorName: uuid # 分布式序列算法名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">custom_snowflake_string</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#       t_address:      # 普通表（不分库分表，绑定到 ds_0）,没有默认的数据源配置，所以每个都要显示声明</span></span><br><span class="line"><span class="comment">#         actualDataNodes: ds_0.t_address # 实际数据节点</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">autoTables:</span> <span class="comment"># 自动分片规则配置</span></span><br><span class="line">      <span class="attr">t_order:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法 https://shardingsphere.apache.org/document/current/cn/dev-manual/sharding/</span></span><br><span class="line">      <span class="attr">course_inline:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span> <span class="comment"># 基于行表达式的分片算法，这里使用 MOD 会报错</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 属性</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">course_$&#123;cid</span> <span class="string">%</span> <span class="number">2</span> <span class="string">+</span> <span class="number">1</span><span class="string">&#125;</span> <span class="comment"># 表达式，这是因为表名称为 course_1, course_2</span></span><br><span class="line">          <span class="attr">allow-range-query-with-inline-sharding:</span> <span class="literal">true</span> <span class="comment"># 允许范围查询</span></span><br><span class="line">      <span class="attr">course_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 表示 ds_0, ds_1</span></span><br><span class="line">      <span class="attr">mod_2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MOD</span> <span class="comment"># 基于 MOD 的分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">sharding-count:</span> <span class="number">2</span> <span class="comment"># 分片数量，即 对 2 进行取余</span></span><br><span class="line">      <span class="attr">t_order_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order-complex-algorithm:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">COMPLEX_INLINE</span> <span class="comment"># 基于行表达式的复合分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_order_complex_$&#123;(user_id</span> <span class="string">+</span> <span class="string">order_id</span> <span class="string">+</span> <span class="number">1</span><span class="string">)</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order_item-class-based-algorithm:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">CLASS_BASED</span> <span class="comment"># 基于自定义类的分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">strategy:</span> <span class="string">COMPLEX</span> <span class="comment"># 指定策略 STANDARD|COMPLEX|HINT ，告诉 ShardingSphere 分片算法类实现了什么策略</span></span><br><span class="line">          <span class="attr">algorithmClassName:</span> <span class="string">com.hanqf.demo.support.algorithm.OrderItemComplexAlgorithm</span> <span class="comment"># 指定算法类</span></span><br><span class="line">      <span class="attr">t_order_item-class-based-algorithm_spi:</span> <span class="comment"># SPI</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">T_ORDER_ITEM_COMPLEX</span> <span class="comment"># 基于自定义类的分片算法</span></span><br><span class="line">      <span class="attr">t_user_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;Math.abs(id.hashCode()%2)&#125;</span></span><br><span class="line">      <span class="attr">t_user_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_user_$&#123;Math.abs(id.hashCode()%4).intdiv(2)&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器: https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/keygen/</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br><span class="line">      <span class="attr">uuid:</span>    <span class="comment"># 定义名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">UUID</span> <span class="comment"># 字符串主键，String</span></span><br><span class="line">      <span class="attr">custom_snowflake_string:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">CUSTOM_SNOWFLAKE_STRING</span>  <span class="comment"># 自定义雪花算法，String</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">workerId:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">datacenterId:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!BROADCAST</span>  <span class="comment"># 广播表配置，即所有的库中都包含指定的表，写入数据时同时写入多个库，查询时随机读一个</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dict</span>    <span class="comment"># 广播表名称，⼴播表不能配置分表逻辑，只往多个库的同⼀个表中插⼊数据。</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!ENCRYPT</span>    <span class="comment"># 数据加密配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span>  <span class="comment"># 加密表名称</span></span><br><span class="line">        <span class="attr">columns:</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 加密列名称</span></span><br><span class="line">            <span class="attr">cipher:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">password</span> <span class="comment"># 密文列名称</span></span><br><span class="line">              <span class="attr">encryptorName:</span> <span class="string">aes_encryptor</span> <span class="comment"># 密文列加密算法名称</span></span><br><span class="line">    <span class="comment"># 加密算法配置: https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/encrypt/</span></span><br><span class="line">    <span class="attr">encryptors:</span></span><br><span class="line">      <span class="attr">aes_encryptor:</span> <span class="comment"># 加解密算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">AES</span> <span class="comment"># 加解密算法类型</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 加解密算法属性配置</span></span><br><span class="line">          <span class="attr">aes-key-value:</span> <span class="string">123456abc</span>     <span class="comment"># AES 使用的 KEY</span></span><br><span class="line">          <span class="attr">digest-algorithm-name:</span> <span class="string">SHA-1</span> <span class="comment"># AES KEY 的摘要算法</span></span><br><span class="line">      <span class="attr">md5_encryptor:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">salt:</span> <span class="number">123456</span>  <span class="comment"># 盐值（可选）</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!MASK</span>  <span class="comment"># 数据脱敏配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span>  <span class="comment"># 脱敏表名称</span></span><br><span class="line">        <span class="attr">columns:</span>  <span class="comment"># 脱敏列配置</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 脱敏列名称</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">md5_mask</span> <span class="comment"># 脱敏算法名称</span></span><br><span class="line">          <span class="attr">email:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">mask_before_special_chars_mask</span></span><br><span class="line">          <span class="attr">telephone:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">keep_first_n_last_m_mask</span></span><br><span class="line">          <span class="attr">name:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">my_mask</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">maskAlgorithms:</span> <span class="comment"># 脱敏算法配置</span></span><br><span class="line">      <span class="attr">md5_mask:</span> <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span>  <span class="comment"># 脱敏算法类型，md5加密后展示</span></span><br><span class="line">      <span class="attr">mask_before_special_chars_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MASK_BEFORE_SPECIAL_CHARS</span> <span class="comment"># 在特殊字符（比如邮箱里的 @）前面做脱敏，示例：myemail@example.com → *******@example.com</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">special-chars:</span> <span class="string">&#x27;@&#x27;</span>  <span class="comment"># 遇到 @ 之前的部分做脱敏</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span>   <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">keep_first_n_last_m_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">KEEP_FIRST_N_LAST_M</span> <span class="comment"># 保留前 n 位和后 m 位，其余用替换字符填充，示例：13812345678 → 138****5678</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">first-n:</span> <span class="number">3</span>     <span class="comment"># 保留前 3 位</span></span><br><span class="line">          <span class="attr">last-m:</span> <span class="number">4</span>      <span class="comment"># 保留后 4 位</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">my_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MY_CUSTOM_MASK</span>  <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&quot;#&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SINGLE</span> <span class="comment"># 单表规则配置，单表规则优先级高于分库分表规则</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="comment"># MySQL 风格</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ds_0.t_address</span> <span class="comment"># 加载指定单表</span></span><br><span class="line"><span class="comment">#       - ds_1.* # 加载指定数据源中的全部单表</span></span><br><span class="line"><span class="comment">#       - &quot;*.*&quot; # 加载全部单表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性配置：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/props/</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span> <span class="comment"># 控制台打印改写后的 SQL，便于排错，默认为 false</span></span><br><span class="line">  <span class="attr">check-table-metadata-enabled:</span> <span class="literal">false</span> <span class="comment"># 在程序启动和更新时，是否检查分片元数据的结构一致性，默认为 false</span></span><br></pre></td></tr></table></figure><h3 id="数据源配置">数据源配置</h3><ul class="lvl-0"><li class="lvl-2"><p>hikari + mysql</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span> <span class="comment"># 逻辑数据源名称</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb0?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ds_1:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb1?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>druid + mysql</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_1:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb1?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line">    <span class="comment"># Druid 特有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>druid + mysql + p6spy</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span> <span class="comment"># 逻辑数据源名称</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.p6spy.engine.spy.P6SpyDriver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:p6spy:mysql://127.0.0.1:3306/shardingdb0?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line">    <span class="comment"># Druid 特有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br></pre></td></tr></table></figure><h3 id="分库分表配置">分库分表配置</h3><h4 id="单分片键，Long-类型">单分片键，Long 类型</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">course:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.course_$&#123;1..2&#125;</span> <span class="comment"># 实际数据节点，建表时写成了 1和2，懒得改了，所以下面分表规则中对2取余后要+1</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">cid</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_inline</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">cid</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法</span></span><br><span class="line">      <span class="attr">course_inline:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span> <span class="comment"># 基于行表达式的分片算法，这里使用 MOD 会报错</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 属性</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">course_$&#123;cid</span> <span class="string">%</span> <span class="number">2</span> <span class="string">+</span> <span class="number">1</span><span class="string">&#125;</span> <span class="comment"># 表达式，这是因为表名称为 course_1, course_2</span></span><br><span class="line">          <span class="attr">allow-range-query-with-inline-sharding:</span> <span class="literal">true</span> <span class="comment"># 允许范围查询</span></span><br><span class="line">      <span class="attr">course_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 表示 ds_0, ds_1</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这里分库与分表采用了不同的字段，分库使用 user_id，分表使用 cid</p></li><li class="lvl-2"><p>allow-range-query-with-inline-sharding: true ，这里设置为允许范围查询，默认值是 false，不允许 between 查询</p></li></ul><h4 id="单分片键，String-类型">单分片键，String 类型</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">t_user:</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_user_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span>  <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">id</span> <span class="comment"># 自增列名称，字符串类型</span></span><br><span class="line"><span class="comment">#           keyGeneratorName: uuid # 分布式序列算法名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">custom_snowflake_string</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法</span></span><br><span class="line">      <span class="attr">t_user_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;Math.abs(id.hashCode()%2)&#125;</span> <span class="comment"># 分库，ds_0, ds_1，id 为字符串，所以要转换为数字再进行运算</span></span><br><span class="line">      <span class="attr">t_user_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_user_$&#123;Math.abs(id.hashCode()%4).intdiv(2)&#125;</span> <span class="comment"># 分表，t_user_0, t_user_1</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式序列算法</span></span><br><span class="line">      <span class="attr">uuid:</span>    <span class="comment"># 定义名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">UUID</span> <span class="comment"># 字符串主键，String</span></span><br><span class="line">      <span class="attr">custom_snowflake_string:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">CUSTOM_SNOWFLAKE_STRING</span> <span class="comment"># 自定义雪花算法，String，spi</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">workerId:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">datacenterId:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这里分库与分表采用了相同的字段，即主键id，因其为字符串类型，所以需要使用 hashCode() 获取数字，再进行运算</p></li><li class="lvl-2"><p>主键获取规则使用的自定义的雪花算法，spi，详见<code>src/main/resources/META-INF/services/org.apache.shardingsphere.infra.algorithm.keygen.core.KeyGenerateAlgorithm</code>，这里注意，从 <code>5.5.3</code> 开始会更换为 <code>org.apache.shardingsphere.infra.algorithm.keygen.spi.KeyGenerateAlgorithm</code></p></li></ul><h4 id="多分片键，Long-类型">多分片键，Long 类型</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">t_order_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order-complex-algorithm</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_item_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span>  <span class="comment"># 分片列名称,多个逗号分隔</span></span><br><span class="line"><span class="comment">#             shardingAlgorithmName: t_order_item-class-based-algorithm   # 基于自定义类的分片算法</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_item-class-based-algorithm_spi</span> <span class="comment"># 基于 SPI 的分片算法，效果同上，建议生产环境使用 SPI</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法</span></span><br><span class="line">      <span class="attr">t_order_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order-complex-algorithm:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">COMPLEX_INLINE</span> <span class="comment"># 基于行表达式的复合分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_order_complex_$&#123;(user_id</span> <span class="string">+</span> <span class="string">order_id</span> <span class="string">+</span> <span class="number">1</span><span class="string">)</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order_item-class-based-algorithm:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">CLASS_BASED</span> <span class="comment"># 基于自定义类的分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">strategy:</span> <span class="string">COMPLEX</span> <span class="comment"># 指定策略 STANDARD|COMPLEX|HINT ，告诉 ShardingSphere 分片算法类实现了什么策略</span></span><br><span class="line">          <span class="attr">algorithmClassName:</span> <span class="string">com.hanqf.demo.support.algorithm.OrderItemComplexAlgorithm</span> <span class="comment"># 指定算法类</span></span><br><span class="line">      <span class="attr">t_order_item-class-based-algorithm_spi:</span> <span class="comment"># SPI</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">T_ORDER_ITEM_COMPLEX</span> <span class="comment"># 基于自定义类的分片算法</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>多个分片键，<code>t_order_complex</code>表使用了内置的<code>COMPLEX_INLINE</code>算法，而<code>t_order_item_complex</code>表使用了自定义的的分片算法，spi，详见<code>src/main/resources/META-INF/services/org.apache.shardingsphere.sharding.spi.ShardingAlgorithm</code></p></li></ul><h4 id="自动分片规则">自动分片规则</h4><ul class="lvl-0"><li class="lvl-2"><p>上面介绍的都是手工配置分片规则，用于配置较为复杂的分片规则，如果分片规则比价简单，可以使用自动分片规则</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">   <span class="comment"># 绑定表：同分片键 join 时走同路由，多个逗号分隔，要求分片规则一致</span></span><br><span class="line">    <span class="attr">bindingTables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t_order,t_order_item</span></span><br><span class="line">    <span class="attr">autoTables:</span> <span class="comment"># 自动分片规则配置</span></span><br><span class="line">      <span class="attr">t_order:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法</span></span><br><span class="line">      <span class="attr">mod_2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MOD</span> <span class="comment"># 基于 MOD 的分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">sharding-count:</span> <span class="number">2</span> <span class="comment"># 分片数量，即 对 2 进行取余</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>自动分片规则需要声明数据库，但不需要声明表分配规则，其根据分片算法自动确定具体的数据表。</p></li><li class="lvl-2"><p>同时这里还配置了<code>bindingTables</code>，用来指定其分片路由一致。</p></li></ul><h3 id="广播表配置">广播表配置</h3><ul class="lvl-0"><li class="lvl-2"><p>广播表，即所有数据源都包含的表，比如字典表</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!BROADCAST</span>  <span class="comment"># 广播表配置，即所有的库中都包含指定的表，写入数据时同时写入多个库，查询时随机读一个</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dict</span>    <span class="comment"># 广播表名称，⼴播表不能配置分表逻辑，只往多个库的同⼀个表中插⼊数据。</span></span><br></pre></td></tr></table></figure><h3 id="数据加密规则">数据加密规则</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!ENCRYPT</span>    <span class="comment"># 数据加密配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span>  <span class="comment"># 加密表名称</span></span><br><span class="line">        <span class="attr">columns:</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 加密列名称</span></span><br><span class="line">            <span class="attr">cipher:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">password</span> <span class="comment"># 密文列名称</span></span><br><span class="line">              <span class="attr">encryptorName:</span> <span class="string">aes_encryptor</span> <span class="comment"># 密文列加密算法名称</span></span><br><span class="line">    <span class="comment"># 加密算法配置: https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/encrypt/</span></span><br><span class="line">    <span class="attr">encryptors:</span></span><br><span class="line">      <span class="attr">aes_encryptor:</span> <span class="comment"># 加解密算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">AES</span> <span class="comment"># 加解密算法类型</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 加解密算法属性配置</span></span><br><span class="line">          <span class="attr">aes-key-value:</span> <span class="string">123456abc</span>     <span class="comment"># AES 使用的 KEY</span></span><br><span class="line">          <span class="attr">digest-algorithm-name:</span> <span class="string">SHA-1</span> <span class="comment"># AES KEY 的摘要算法</span></span><br><span class="line">      <span class="attr">md5_encryptor:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">salt:</span> <span class="number">123456</span>  <span class="comment"># 盐值（可选）</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置加密字段规则后，新增数据时，会自动对加密字段加密后存储，查询时也会加密后进行比较查询。</p></li></ul><h3 id="数据脱敏规则">数据脱敏规则</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!MASK</span>  <span class="comment"># 数据脱敏配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span>  <span class="comment"># 脱敏表名称</span></span><br><span class="line">        <span class="attr">columns:</span>  <span class="comment"># 脱敏列配置</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 脱敏列名称</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">md5_mask</span> <span class="comment"># 脱敏算法名称</span></span><br><span class="line">          <span class="attr">email:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">mask_before_special_chars_mask</span></span><br><span class="line">          <span class="attr">telephone:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">keep_first_n_last_m_mask</span></span><br><span class="line">          <span class="attr">name:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">my_mask</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">maskAlgorithms:</span> <span class="comment"># 脱敏算法配置</span></span><br><span class="line">      <span class="attr">md5_mask:</span> <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span>  <span class="comment"># 脱敏算法类型，md5加密后展示</span></span><br><span class="line">      <span class="attr">mask_before_special_chars_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MASK_BEFORE_SPECIAL_CHARS</span> <span class="comment"># 在特殊字符（比如邮箱里的 @）前面做脱敏，示例：myemail@example.com → *******@example.com</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">special-chars:</span> <span class="string">&#x27;@&#x27;</span>  <span class="comment"># 遇到 @ 之前的部分做脱敏</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span>   <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">keep_first_n_last_m_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">KEEP_FIRST_N_LAST_M</span> <span class="comment"># 保留前 n 位和后 m 位，其余用替换字符填充，示例：13812345678 → 138****5678</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">first-n:</span> <span class="number">3</span>     <span class="comment"># 保留前 3 位</span></span><br><span class="line">          <span class="attr">last-m:</span> <span class="number">4</span>      <span class="comment"># 保留后 4 位</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">my_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MY_CUSTOM_MASK</span>  <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&quot;#&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>被脱敏的字段在查询时会进行脱敏展示。</p></li><li class="lvl-2"><p>这里还自定义了脱敏算法，spi，详见<code>src/main/resources/META-INF/services/org.apache.shardingsphere.mask.spi.MaskAlgorithm</code></p></li></ul><h3 id="单表规则">单表规则</h3><ul class="lvl-0"><li class="lvl-2"><p>即不需要进行分库分表的表</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SINGLE</span> <span class="comment"># 单表规则配置，单表规则优先级高于分库分表规则</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="comment"># MySQL 风格</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ds_0.t_address</span> <span class="comment"># 加载指定单表</span></span><br></pre></td></tr></table></figure><h3 id="其它属性配置">其它属性配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 属性配置：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/props/</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span> <span class="comment"># 控制台打印改写后的 SQL，便于排错，默认为 false</span></span><br><span class="line">  <span class="attr">check-table-metadata-enabled:</span> <span class="literal">false</span> <span class="comment"># 在程序启动和更新时，是否检查分片元数据的结构一致性，默认为 false</span></span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p>springboot3 集成 shardingsphere5.5.2 与 springboot2 不同，不再提供 <code>springboot-starter-shardingsphere</code>，相关配置也采用了独立的配置文件。</p></li><li class="lvl-2"><p>代码中包含两个库中使用到的数据库脚本，<code>shardingsphere-demo/shardingsphere-demo-01/sql</code></p></li><li class="lvl-2"><p>具体使用效果可以通过项目中提供的单元测试类进行验证。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 SpringBoot3.5.5 + ShardingSphere-JDBC5.5.2 分库分表的使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://shardingsphere.apache.org/index_zh.html&quot;&gt;ShardingSphere官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo&quot;&gt;本文项目代码Github地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/"/>
    
    <category term="sharding-sphere" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/sharding-sphere/"/>
    
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/tags/springboot/"/>
    
    <category term="sharding-sphere" scheme="https://blog.hanqunfeng.com/tags/sharding-sphere/"/>
    
  </entry>
  
  <entry>
    <title>K8S UI 之 Rancher</title>
    <link href="https://blog.hanqunfeng.com/2025/07/25/k8s-ui-rancher/"/>
    <id>https://blog.hanqunfeng.com/2025/07/25/k8s-ui-rancher/</id>
    <published>2025-07-25T14:33:05.000Z</published>
    <updated>2025-07-25T14:23:18.456Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 UI 管理工具 Rancher ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://ranchermanager.docs.rancher.com/zh/">Rancher 官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/rancher/rancher">Rancher Github</a></p></li></ul><span id="more"></span><h2 id="Rancher-简介">Rancher 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>Rancher 是一个 开源的 Kubernetes 管理平台，用于帮助用户部署、管理和运维多个 Kubernetes 集群，具有易用的 Web UI、权限控制、集群监控、应用管理等功能，广泛应用于企业的云原生平台建设中。</p></li></ul><h2 id="部署-Rancher">部署 Rancher</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://ranchermanager.docs.rancher.com/zh/getting-started/quick-start-guides/deploy-rancher-manager/helm-cli#%E4%BD%BF%E7%94%A8-helm-%E6%9D%A5%E5%AE%89%E8%A3%85-rancher">使用 Helm 安装 Rancher</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 rancher 的 Helm 仓库</span></span><br><span class="line">helm repo add rancher-latest https://releases.rancher.com/server-charts/latest</span><br><span class="line"><span class="comment"># 更新 rancher 的 Helm 仓库</span></span><br><span class="line">helm repo update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 rancher 的版本</span></span><br><span class="line">$ helm search repo rancher -l | <span class="built_in">head</span></span><br><span class="line">NAME                  CHART VERSIONAPP VERSIONDESCRIPTION</span><br><span class="line">rancher-latest/rancher2.11.3       v2.11.3    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.11.2       v2.11.2    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.11.1       v2.11.1    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.11.0       v2.11.0    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.10.3       v2.10.3    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.10.2       v2.10.2    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.10.1       v2.10.1    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.10.0       v2.10.0    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.9.3        v2.9.3     Install Rancher Server to manage Kubernetes clu...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建命名空间</span></span><br><span class="line">kubectl create namespace cattle-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建证书，证书是机构颁发的</span></span><br><span class="line">kubectl create secret tls tls-rancher-ingress \</span><br><span class="line">  --key=nginx_ssl/nginx.hanqunfeng.com.key \</span><br><span class="line">  --cert=nginx_ssl/nginx.hanqunfeng.com.pem \</span><br><span class="line">  -n cattle-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Rancher  --version v2.11.3 可以指定版本，默认最新版</span></span><br><span class="line">helm install rancher rancher-latest/rancher \</span><br><span class="line">  --namespace cattle-system \</span><br><span class="line">  --create-namespace \</span><br><span class="line">  --<span class="built_in">set</span> hostname=rancher.hanqunfeng.com \</span><br><span class="line">  --<span class="built_in">set</span> ingress.tls.source=secret \</span><br><span class="line">  --<span class="built_in">set</span> replicas=3 \</span><br><span class="line">  --<span class="built_in">set</span> bootstrapPassword=rancher#2025</span><br><span class="line"></span><br><span class="line"><span class="comment">## 参数说明</span></span><br><span class="line"><span class="comment"># --set hostname=rancher.hanqunfeng.com 设置 rancher 的域名</span></span><br><span class="line"><span class="comment"># --set ingress.tls.source=secret 配置 rancher 的证书，名称为 tls-rancher-ingress</span></span><br><span class="line"><span class="comment"># --set replicas=3 设置 rancher 的副本数</span></span><br><span class="line"><span class="comment"># --set bootstrapPassword=rancher#2025 设置 rancher 的初始密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 不过执行上面的安装命令会报错，应该是当前的 rancher 版本不支持 Kubernetes v1.33.2</span></span><br><span class="line">Error: INSTALLATION FAILED: chart requires kubeVersion: &lt; 1.33.0-0 <span class="built_in">which</span> is incompatible with Kubernetes v1.33.2</span><br><span class="line"></span><br><span class="line"><span class="comment">## 解决办法</span></span><br><span class="line"><span class="comment"># 下载并解压 rancher 安装包</span></span><br><span class="line">helm pull rancher-latest/rancher --untar --untardir ./</span><br><span class="line"><span class="comment"># 修改其中的 Chart.yaml 文件</span></span><br><span class="line">kubeVersion: &lt; 1.33.0-0 ==&gt; kubeVersion: &lt; 1.34.0-0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 rancher</span></span><br><span class="line">helm install rancher rancher \</span><br><span class="line">  --namespace cattle-system \</span><br><span class="line">  --create-namespace \</span><br><span class="line">  --<span class="built_in">set</span> hostname=rancher.hanqunfeng.com \</span><br><span class="line">  --<span class="built_in">set</span> ingress.tls.source=secret \</span><br><span class="line">  --<span class="built_in">set</span> replicas=3 \</span><br><span class="line">  --<span class="built_in">set</span> bootstrapPassword=rancher#2025</span><br><span class="line"><span class="comment">## 输出</span></span><br><span class="line">NAME: rancher</span><br><span class="line">LAST DEPLOYED: Thu Jul 24 23:55:24 2025</span><br><span class="line">NAMESPACE: cattle-system</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">Rancher Server has been installed.</span><br><span class="line"></span><br><span class="line">NOTE: Rancher may take several minutes to fully initialize. Please standby <span class="keyword">while</span> Certificates are being issued, Containers are started and the Ingress rule comes up.</span><br><span class="line"></span><br><span class="line">Check out our docs at https://rancher.com/docs/</span><br><span class="line"></span><br><span class="line">If you provided your own bootstrap password during installation, browse to https://rancher.hanqunfeng.com to get started.</span><br><span class="line"></span><br><span class="line">If this is the first time you installed Rancher, get started by running this <span class="built_in">command</span> and clicking the URL it generates:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> https://rancher.hanqunfeng.com/dashboard/?setup=$(kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=<span class="string">&#x27;&#123;&#123;.data.bootstrapPassword|base64decode&#125;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To get just the bootstrap password on its own, run:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=<span class="string">&#x27;&#123;&#123;.data.bootstrapPassword|base64decode&#125;&#125;&#123;&#123; &quot;\n&quot; &#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Happy Containering!</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看创建的资源</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ k get all,ing -n cattle-system</span><br><span class="line">NAME                                   READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod/helm-operation-8257k               0/2     Completed   0          11m</span><br><span class="line">pod/helm-operation-g8blp               0/2     Completed   0          12m</span><br><span class="line">pod/helm-operation-hwpbp               0/2     Completed   0          10m</span><br><span class="line">pod/helm-operation-qbs5n               0/2     Completed   0          10m</span><br><span class="line">pod/helm-operation-wlptb               0/2     Completed   0          13m</span><br><span class="line">pod/rancher-56689b7d8c-v7hpd           1/1     Running     0          21m</span><br><span class="line">pod/rancher-56689b7d8c-xnrbf           1/1     Running     0          21m</span><br><span class="line">pod/rancher-56689b7d8c-xvqgs           1/1     Running     0          21m</span><br><span class="line">pod/rancher-webhook-5fd5fc44f9-8xwjk   1/1     Running     0          11m</span><br><span class="line"></span><br><span class="line">NAME                               TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">service/imperative-api-extension   ClusterIP   10.96.188.28   &lt;none&gt;        6666/TCP         15m</span><br><span class="line">service/rancher                    ClusterIP   10.96.21.41    &lt;none&gt;        80/TCP,443/TCP   21m</span><br><span class="line">service/rancher-webhook            ClusterIP   10.96.85.153   &lt;none&gt;        443/TCP          11m</span><br><span class="line"></span><br><span class="line">NAME                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/rancher           3/3     3            3           21m</span><br><span class="line">deployment.apps/rancher-webhook   1/1     1            1           11m</span><br><span class="line"></span><br><span class="line">NAME                                         DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/rancher-56689b7d8c           3         3         3       21m</span><br><span class="line">replicaset.apps/rancher-webhook-5fd5fc44f9   1         1         1       11m</span><br><span class="line"></span><br><span class="line">NAME                                CLASS   HOSTS                    ADDRESS         PORTS     AGE</span><br><span class="line">ingress.networking.k8s.io/rancher   nginx   rancher.hanqunfeng.com   10.211.55.201   80, 443   21m</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>浏览器访问：<a href="https://rancher.hanqunfeng.com">https://rancher.hanqunfeng.com</a>，输入上面设置的密码即可。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果忘记初始密码可以通过如下命令查看密码</span></span><br><span class="line">kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=<span class="string">&#x27;&#123;&#123;.data.bootstrapPassword|base64decode&#125;&#125;&#123;&#123;&quot;\n&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/rHDDMN.png" alt=""></p><h2 id="卸载-Rancher">卸载 Rancher</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载 Rancher</span></span><br><span class="line">helm uninstall rancher -n cattle-system</span><br><span class="line"><span class="comment"># 删除 cattle-system 命名空间</span></span><br><span class="line">kubectl delete namespace cattle-system</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 UI 管理工具 Rancher ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://ranchermanager.docs.rancher.com/zh/&quot;&gt;Rancher 官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rancher/rancher&quot;&gt;Rancher Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S UI 之 Kubesphere</title>
    <link href="https://blog.hanqunfeng.com/2025/07/24/k8s-ui-kubesphere/"/>
    <id>https://blog.hanqunfeng.com/2025/07/24/k8s-ui-kubesphere/</id>
    <published>2025-07-24T14:33:05.000Z</published>
    <updated>2025-07-24T13:38:25.076Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 UI 管理工具 Kubesphere，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubesphere.io/zh/">Kubesphere 官网</a></p></li></ul><span id="more"></span><h2 id="Kubesphere-简介">Kubesphere 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>KubeSphere 是一个基于 Kubernetes 构建的 企业级多租户容器管理平台，提供了一套完整的容器平台解决方案，让用户以图形化方式轻松使用 Kubernetes 和 DevOps 能力，不需要深入理解复杂的底层架构。</p></li><li class="lvl-2"><p>与 K8S 的 Dashboard 相比具有如下优势：</p></li></ul><table><thead><tr><th>功能 / 特性</th><th>Kubernetes Dashboard</th><th><strong>KubeSphere</strong></th></tr></thead><tbody><tr><td>✅ 基础资源管理</td><td>✅ 支持</td><td>✅ 更丰富，支持更多细粒度控制</td></tr><tr><td>👥 多租户支持</td><td>❌ 无</td><td>✅ 内建企业级多租户、空间（Workspace）隔离</td></tr><tr><td>🔐 身份认证与权限控制</td><td>⚠️ 需手动整合 RBAC</td><td>✅ 内建用户管理、角色、团队、企业组织架构</td></tr><tr><td>🌐 多集群支持</td><td>❌ 不支持</td><td>✅ 支持跨区域多集群统一管理</td></tr><tr><td>🚀 DevOps（CI/CD 流水线）</td><td>❌ 无</td><td>✅ 内置图形化流水线（Jenkins 驱动）</td></tr><tr><td>📊 监控与指标（Prometheus）</td><td>❌ 手动安装</td><td>✅ 内置，图形化展示 Pod/Node/服务等监控数据</td></tr><tr><td>📁 日志查询与分析（EFK）</td><td>❌ 无</td><td>✅ 内建 Fluent Bit + Elasticsearch + Kibana</td></tr><tr><td>💡 微服务治理（Istio）</td><td>❌ 无</td><td>✅ 可选启用，支持服务拓扑、灰度发布、流量治理等</td></tr><tr><td>🧰 应用商店（Helm 可视化部署）</td><td>❌ 无</td><td>✅ 支持 Helm 应用市场，点击即可安装常见中间件</td></tr><tr><td>🔌 插件架构</td><td>❌ 无</td><td>✅ 支持模块按需启用/关闭</td></tr><tr><td>🧪 容器镜像仓库（Harbor）</td><td>❌ 无</td><td>✅ 可集成或内建 Harbor 容器仓库</td></tr><tr><td>📦 安装复杂度</td><td>✅ 简单</td><td>⚠️ 略复杂，但可按需启用模块</td></tr></tbody></table><h2 id="部署-Kubesphere">部署 Kubesphere</h2><ul class="lvl-0"><li class="lvl-2"><p>Kubesphere 对系统资源有最低要求，具体参考<a href="https://kubesphere.io/zh/docs/v4.1/03-installation-and-upgrade/01-preparations/01-supported-k8s/">官网:环境要求</a></p></li><li class="lvl-2"><p>部署</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果无法访问 charts.kubesphere.io, 可将 charts.kubesphere.io 替换为 charts.kubesphere.com.cn</span></span><br><span class="line">helm upgrade --install -n kubesphere-system --create-namespace ks-core https://charts.kubesphere.io/main/ks-core-1.1.4.tgz --debug --<span class="built_in">wait</span></span><br><span class="line"><span class="comment">## 安装成功后会输出如下信息：</span></span><br><span class="line">NOTES:</span><br><span class="line">Thank you <span class="keyword">for</span> choosing KubeSphere Helm Chart.</span><br><span class="line"></span><br><span class="line">Please be patient and <span class="built_in">wait</span> <span class="keyword">for</span> several seconds <span class="keyword">for</span> the KubeSphere deployment to complete.</span><br><span class="line"></span><br><span class="line">1. Wait <span class="keyword">for</span> Deployment Completion</span><br><span class="line"></span><br><span class="line">    Confirm that all KubeSphere components are running by executing the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    kubectl get pods -n kubesphere-system</span><br><span class="line">2. Access the KubeSphere Console</span><br><span class="line"></span><br><span class="line">    Once the deployment is complete, you can access the KubeSphere console using the following URL:</span><br><span class="line"></span><br><span class="line">    http://10.211.55.11:30880</span><br><span class="line"></span><br><span class="line">3. Login to KubeSphere Console</span><br><span class="line"></span><br><span class="line">    Use the following credentials to <span class="built_in">log</span> <span class="keyword">in</span>:</span><br><span class="line"></span><br><span class="line">    Account: admin</span><br><span class="line">    Password: P@88w0rd</span><br><span class="line"></span><br><span class="line">NOTE: It is highly recommended to change the default password immediately after the first login.</span><br><span class="line">For additional information and details, please visit https://kubesphere.io.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有组件</span></span><br><span class="line">$ kubectl get pod,deploy,svc -n kubesphere-system</span><br><span class="line">NAME                                         READY   STATUS    RESTARTS       AGE</span><br><span class="line">pod/extensions-museum-ffd8bd9d8-fvcw4        1/1     Running   1 (28m ago)    5h5m</span><br><span class="line">pod/ks-apiserver-7b4479d5f5-2k4c9            1/1     Running   2 (27m ago)    5h5m</span><br><span class="line">pod/ks-console-6bd9b9f5d9-xqlzs              1/1     Running   0              26m</span><br><span class="line">pod/ks-controller-manager-547f9fc8c9-5b88z   1/1     Running   10 (27m ago)   5h5m</span><br><span class="line"></span><br><span class="line">NAME                                    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/extensions-museum       1/1     1            1           5h14m</span><br><span class="line">deployment.apps/ks-apiserver            1/1     1            1           5h14m</span><br><span class="line">deployment.apps/ks-console              1/1     1            1           5h14m</span><br><span class="line">deployment.apps/ks-controller-manager   1/1     1            1           5h14m</span><br><span class="line"></span><br><span class="line">NAME                            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">service/extensions-museum       ClusterIP   10.96.95.71    &lt;none&gt;        443/TCP        5h14m</span><br><span class="line">service/ks-apiserver            ClusterIP   10.96.12.106   &lt;none&gt;        80/TCP         5h14m</span><br><span class="line">service/ks-console              NodePort    10.96.55.165   &lt;none&gt;        80:30880/TCP   5h14m</span><br><span class="line">service/ks-controller-manager   ClusterIP   10.96.13.243   &lt;none&gt;        443/TCP        5h14m</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>浏览器访问：<a href="http://10.211.55.11:30880">http://10.211.55.11:30880</a>，输入账号密码：admin/P@88w0rd，首次登录需要修改密码。</p></li></ul><h2 id="配置-ingress">配置 ingress</h2><ul class="lvl-0"><li class="lvl-2"><p>创建证书</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret tls nginx-tls \</span><br><span class="line">    --key=nginx_ssl/nginx.hanqunfeng.com.key \</span><br><span class="line">    --cert=nginx_ssl/nginx.hanqunfeng.com.pem \</span><br><span class="line">    -n kubesphere-system</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建 ingress</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubesphere-ingress.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubesphere-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubesphere-system</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/force-ssl-redirect:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubesphere.hanqunfeng.com</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">nginx-tls</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">kubesphere.hanqunfeng.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">ks-console</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h2 id="卸载-Kubesphere">卸载 Kubesphere</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm uninstall ks-core -n kubesphere-system</span><br><span class="line">kubectl delete namespace kubesphere-system</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 UI 管理工具 Kubesphere，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubesphere.io/zh/&quot;&gt;Kubesphere 官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S UI 之 Dashboard</title>
    <link href="https://blog.hanqunfeng.com/2025/07/24/k8s-ui-dashboard/"/>
    <id>https://blog.hanqunfeng.com/2025/07/24/k8s-ui-dashboard/</id>
    <published>2025-07-24T13:33:05.000Z</published>
    <updated>2025-07-24T13:37:46.313Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 UI 管理工具 Dashboard，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/web-ui-dashboard/">Dashboard k8s介绍</a></p></li></ul><span id="more"></span><h2 id="Dashboard-简介">Dashboard 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>Dashboard 是基于网页的 Kubernetes 用户界面。</p></li><li class="lvl-2"><p>你可以使用 Dashboard 将容器应用部署到 Kubernetes 集群中，也可以对容器应用排错，还能管理集群资源。</p></li><li class="lvl-2"><p>你可以使用 Dashboard 获取运行在集群中的应用的概览信息，也可以创建或者修改 Kubernetes 资源 （如 Deployment、Job、DaemonSet 等等）。 例如，你可以对 Deployment 实现弹性伸缩、发起滚动升级、重启 Pod 或者使用向导创建新的应用。</p></li><li class="lvl-2"><p>Dashboard 同时展示了 Kubernetes 集群中的资源状态信息和所有报错信息。</p></li></ul><h2 id="部署-Dashboard">部署 Dashboard</h2><ul class="lvl-0"><li class="lvl-2"><p>Kubernetes Dashboard 目前仅支持基于 Helm 的安装，因为它速度更快， 并且可以让我们更好地控制 Dashboard 运行所需的所有依赖项。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 kubernetes-dashboard 仓库</span></span><br><span class="line">helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/</span><br><span class="line"><span class="comment"># 使用 kubernetes-dashboard Chart 部署名为 `kubernetes-dashboard` 的 Helm Release</span></span><br><span class="line">$ helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard \</span><br><span class="line">    --create-namespace \</span><br><span class="line">    --namespace kubernetes-dashboard</span><br><span class="line"><span class="comment">## 输出</span></span><br><span class="line">Release <span class="string">&quot;kubernetes-dashboard&quot;</span> does not exist. Installing it now.</span><br><span class="line">NAME: kubernetes-dashboard</span><br><span class="line">LAST DEPLOYED: Sun Jul  6 00:40:02 2025</span><br><span class="line">NAMESPACE: kubernetes-dashboard</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">*************************************************************************************************</span><br><span class="line">*** PLEASE BE PATIENT: Kubernetes Dashboard may need a few minutes to get up and become ready ***</span><br><span class="line">*************************************************************************************************</span><br><span class="line"></span><br><span class="line">Congratulations! You have just installed Kubernetes Dashboard <span class="keyword">in</span> your cluster.</span><br><span class="line"></span><br><span class="line">To access Dashboard run:</span><br><span class="line">  kubectl -n kubernetes-dashboard port-forward svc/kubernetes-dashboard-kong-proxy 8443:443</span><br><span class="line"></span><br><span class="line">NOTE: In <span class="keyword">case</span> port-forward <span class="built_in">command</span> does not work, make sure that kong service name is correct.</span><br><span class="line">      Check the services <span class="keyword">in</span> Kubernetes Dashboard namespace using:</span><br><span class="line">        kubectl -n kubernetes-dashboard get svc</span><br><span class="line"></span><br><span class="line">Dashboard will be available at:</span><br><span class="line">  https://localhost:8443</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 helm 安装的包，注意指定 命名空间</span></span><br><span class="line">$ helm list -n kubernetes-dashboard</span><br><span class="line">NAME                NAMESPACE           REVISIONUPDATED                                STATUS  CHART                      APP VERSION</span><br><span class="line">kubernetes-dashboardkubernetes-dashboard1       2025-07-24 14:01:06.678570212 +0800 CSTdeployedkubernetes-dashboard-7.13.0</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看启动的资源</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n kubernetes-dashboard get all</span><br><span class="line">NAME                                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/kubernetes-dashboard-api-568f47ddd7-tx6f8              1/1     Running   0          20m</span><br><span class="line">pod/kubernetes-dashboard-auth-645b944589-t6v2m             1/1     Running   0          20m</span><br><span class="line">pod/kubernetes-dashboard-kong-648658d45f-7qsm9             1/1     Running   0          20m</span><br><span class="line">pod/kubernetes-dashboard-metrics-scraper-547874fcf-87mrv   1/1     Running   0          20m</span><br><span class="line">pod/kubernetes-dashboard-web-7796b9fbbb-xsdlw              1/1     Running   0          20m</span><br><span class="line"></span><br><span class="line">NAME                                           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">service/kubernetes-dashboard-api               ClusterIP   10.96.149.59    &lt;none&gt;        8000/TCP   20m</span><br><span class="line">service/kubernetes-dashboard-auth              ClusterIP   10.96.145.120   &lt;none&gt;        8000/TCP   20m</span><br><span class="line">service/kubernetes-dashboard-kong-proxy        ClusterIP   10.96.171.40    &lt;none&gt;        443/TCP    20m</span><br><span class="line">service/kubernetes-dashboard-metrics-scraper   ClusterIP   10.96.79.48     &lt;none&gt;        8000/TCP   20m</span><br><span class="line">service/kubernetes-dashboard-web               ClusterIP   10.96.247.143   &lt;none&gt;        8000/TCP   20m</span><br><span class="line"></span><br><span class="line">NAME                                                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/kubernetes-dashboard-api               1/1     1            1           20m</span><br><span class="line">deployment.apps/kubernetes-dashboard-auth              1/1     1            1           20m</span><br><span class="line">deployment.apps/kubernetes-dashboard-kong              1/1     1            1           20m</span><br><span class="line">deployment.apps/kubernetes-dashboard-metrics-scraper   1/1     1            1           20m</span><br><span class="line">deployment.apps/kubernetes-dashboard-web               1/1     1            1           20m</span><br><span class="line"></span><br><span class="line">NAME                                                             DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/kubernetes-dashboard-api-568f47ddd7              1         1         1       20m</span><br><span class="line">replicaset.apps/kubernetes-dashboard-auth-645b944589             1         1         1       20m</span><br><span class="line">replicaset.apps/kubernetes-dashboard-kong-648658d45f             1         1         1       20m</span><br><span class="line">replicaset.apps/kubernetes-dashboard-metrics-scraper-547874fcf   1         1         1       20m</span><br><span class="line">replicaset.apps/kubernetes-dashboard-web-7796b9fbbb              1         1         1       20m</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em></p><ul class="lvl-1"><li class="lvl-2">第一次创建kubernetes-dashboard时，有几个 pod 一直处于 ContainerCreating 状态，通过 describe 命令，查看 pod 的状态发现报如下错误：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning  FailedCreatePodSandBox  4m52s                kubelet            Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network <span class="keyword">for</span> sandbox <span class="string">&quot;cfa0b6062fabd77353e6d832ab0e62f96787b4d59346d9e57c28dbc0e19a3127&quot;</span>: plugin <span class="built_in">type</span>=<span class="string">&quot;calico&quot;</span> failed (add): error getting ClusterInformation: connection is unauthorized: Unauthorized</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2"><p>这条错误说明：</p><ul class="lvl-3"><li class="lvl-6">容器网络插件（CNI）使用的是 Calico</li><li class="lvl-6">Calico 在尝试获取 Kubernetes 集群的 ClusterInformation 时 认证失败</li><li class="lvl-6">错误关键词：connection is unauthorized: Unauthorized</li></ul></li><li class="lvl-2"><p>不确定导致这一问题的原因，我的解决方法是重新安装 Calico</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f calico.yaml</span><br><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure></div><ul class="lvl-0"><li class="lvl-2"><p>开放代理端口</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在哪个机器上运行的命令，开放的就是哪个机器的端口</span></span><br><span class="line">kubectl -n kubernetes-dashboard port-forward svc/kubernetes-dashboard-kong-proxy 8443:443</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>访问：在开放代理端口的机器上使用浏览器访问：<a href="https://localhost:8443">https://localhost:8443</a></p></li></ul><h2 id="登录帐号">登录帐号</h2><ul class="lvl-0"><li class="lvl-2"><p>创建管理员用户</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dashboard-adminuser.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span>                    <span class="comment"># 创建 ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span>                      <span class="comment"># SA 名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span>       <span class="comment"># SA 所在命名空间</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span>                <span class="comment"># 集群角色绑定</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span>   <span class="comment"># 集群角色组，这个是 k8s 内置的</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span>                     <span class="comment"># 集群角色</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span>                   <span class="comment"># 集群管理员角色</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span>                  <span class="comment"># 服务账号</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span>                      <span class="comment"># 服务账号名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span>       <span class="comment"># 服务账号命名空间</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建并获取token</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f dashboard-adminuser.yaml</span><br><span class="line"><span class="comment"># 获取token，该 token 有效期为 1 小时，token格式为 jwt，可以通过 jwt.io 解析</span></span><br><span class="line">kubectl -n kubernetes-dashboard create token admin-user</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>获取长效token</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dashboard-secret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/service-account.name:</span> <span class="string">&quot;admin-user&quot;</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">kubernetes.io/service-account-token</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f dashboard-secret.yaml</span><br><span class="line"><span class="comment"># 该命令获取token，永不过期，将其保存下来</span></span><br><span class="line">kubectl get secret admin-user -n kubernetes-dashboard -o jsonpath=<span class="string">&quot;&#123;.data.token&#125;&quot;</span> | <span class="built_in">base64</span> -d</span><br></pre></td></tr></table></figure><h2 id="卸载-kubernetes-dashboard">卸载 kubernetes-dashboard</h2><ul class="lvl-0"><li class="lvl-2"><p>卸载 kubernetes-dashboard</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm uninstall kubernetes-dashboard --namespace kubernetes-dashboard</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>清理用户信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard delete serviceaccount admin-user</span><br><span class="line">kubectl -n kubernetes-dashboard delete clusterrolebinding admin-user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以直接删除 命名空间，删除命名空间会同时删除所有资源</span></span><br><span class="line">kubectl delete namespace kubernetes-dashboard</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 UI 管理工具 Dashboard，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/web-ui-dashboard/&quot;&gt;Dashboard k8s介绍&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 Tools</title>
    <link href="https://blog.hanqunfeng.com/2025/07/24/k8s-tools/"/>
    <id>https://blog.hanqunfeng.com/2025/07/24/k8s-tools/</id>
    <published>2025-07-24T13:30:05.000Z</published>
    <updated>2025-08-26T02:21:30.959Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-3"><p>K8S 的 Tools: crictl、nerdctl、helm ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li></ul><span id="more"></span><h2 id="crictl-命令">crictl 命令</h2><ul class="lvl-0"><li class="lvl-2"><p><code>crictl</code> 是k8s官方出品的一个命令行工具，用于与 containerd 进行通信。</p></li><li class="lvl-2"><p><code>crictl</code> 命令默认需要 sudo 权限，如果不想每次都加 sudo，可以将用户加入 containerd 的 socket 权限组</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># containerd 的默认 socket 是 /var/run/containerd/containerd.sock</span></span><br><span class="line">$ <span class="built_in">ls</span> -l /var/run/containerd/containerd.sock</span><br><span class="line">srw-rw---- 1 root root 0 7月   1 10:57 /var/run/containerd/containerd.sock</span><br><span class="line"><span class="comment"># 如果 group 是 root：你可以改为其它组，比如 docker</span></span><br><span class="line"><span class="comment"># 如果 docker 组不存在则创建</span></span><br><span class="line"><span class="built_in">sudo</span> groupadd docker</span><br><span class="line"><span class="comment"># 修改文件所属组为 docker</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chgrp</span> docker /var/run/containerd/containerd.sock</span><br><span class="line"><span class="comment"># 为组添加读写权限</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> g+rw /var/run/containerd/containerd.sock</span><br><span class="line"><span class="comment"># 添加用户到 docker 组</span></span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">newgrp docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时虽然已经可以不用 sudo 了，但是一旦重启 containerd 就会重新回到 root 权限，因此需要添加如下配置</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/systemd/system/containerd.service.d/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/systemd/system/containerd.service.d/override.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">ExecStartPost=/bin/bash -c &#x27;chmod 660 /run/containerd/containerd.sock &amp;&amp; chgrp docker /run/containerd/containerd.sock&#x27;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart containerd</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>crictl</code> 命令的使用方式比较类似<code>docker</code>命令</p></li></ul><table><thead><tr><th>操作</th><th><code>docker</code> 命令</th><th><code>crictl</code> 命令</th><th>说明</th></tr></thead><tbody><tr><td>查看正在运行的容器</td><td><code>docker ps</code></td><td><code>crictl ps</code></td><td></td></tr><tr><td>查看所有容器（包括已停止）</td><td><code>docker ps -a</code></td><td><code>crictl ps -a</code></td><td></td></tr><tr><td>查看镜像</td><td><code>docker images</code></td><td><code>crictl images</code></td><td></td></tr><tr><td>查看容器日志</td><td><code>docker logs &lt;container_id&gt;</code></td><td><code>crictl logs &lt;container_id&gt;</code></td><td></td></tr><tr><td>进入容器交互</td><td><code>docker exec -it &lt;id&gt; sh</code></td><td><code>crictl exec -it &lt;id&gt; sh</code></td><td></td></tr><tr><td>查看容器详细信息</td><td><code>docker inspect &lt;container_id&gt;</code></td><td><code>crictl inspect &lt;container_id&gt;</code></td><td></td></tr><tr><td>查看 Pod 详细信息</td><td>❌（不支持）</td><td><code>crictl inspectp &lt;pod_id&gt;</code></td><td>K8s 专属</td></tr><tr><td>删除容器</td><td><code>docker rm &lt;container_id&gt;</code></td><td><code>crictl rm &lt;container_id&gt;</code></td><td></td></tr><tr><td>删除镜像</td><td><code>docker rmi &lt;image_id&gt;</code></td><td><code>crictl rmi &lt;image_id&gt;</code></td><td></td></tr><tr><td>拉取镜像</td><td><code>docker pull nginx</code></td><td><code>crictl pull nginx</code></td><td></td></tr><tr><td>运行容器（非 K8s 场景）</td><td><code>docker run -it nginx</code></td><td>❌（不支持）</td><td><code>crictl</code> 不运行容器，仅调试现有容器</td></tr><tr><td>列出容器运行时信息</td><td><code>docker info</code></td><td><code>crictl info</code></td><td></td></tr><tr><td>查看容器运行状态</td><td><code>docker stats</code></td><td><code>crictl stats</code></td><td>简要版</td></tr><tr><td>设置配置文件</td><td><code>~/.docker/config.json</code></td><td><code>/etc/crictl.yaml</code></td><td>如设置 endpoint</td></tr></tbody></table><h2 id="nerdctl">nerdctl</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://github.com/containerd/nerdctl">nerdctl</a> 是一个 兼容 Docker CLI 的容器命令行工具，用于管理 containerd 容器运行时。</p></li><li class="lvl-2"><p>它是 containerd 官方子项目，由 CNCF 维护，其命令语法与 Docker CLI 兼容，目标是让习惯 Docker 的用户也能轻松使用 containerd。</p></li><li class="lvl-2"><p>安装 nerdctl</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 下载最新版本</span></span><br><span class="line">VERSION=2.1.3</span><br><span class="line">wget https://github.com/containerd/nerdctl/releases/download/v<span class="variable">$&#123;VERSION&#125;</span>/nerdctl-<span class="variable">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 解压</span></span><br><span class="line">tar -xvf nerdctl-<span class="variable">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 移动到系统 PATH</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> nerdctl /usr/local/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># nerdctl 需要 sudo 权限</span></span><br><span class="line"><span class="comment">## 为 sudo 添加 PATH</span></span><br><span class="line"><span class="built_in">sudo</span> visudo</span><br><span class="line"><span class="comment">## 找到这一行</span></span><br><span class="line">Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line"><span class="comment">## 修改为，即将 nerdctl 所在的目录加入 PATH</span></span><br><span class="line">Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.测试</span></span><br><span class="line"><span class="comment">## 查看版本</span></span><br><span class="line"><span class="built_in">sudo</span> nerdctl version</span><br><span class="line"><span class="comment">## 列出容器，--namespace k8s.io 表示查看 k8s 中的容器</span></span><br><span class="line"><span class="built_in">sudo</span> nerdctl ps --namespace k8s.io</span><br><span class="line"></span><br><span class="line"><span class="comment">## 如果不想每次都加上 --namespace k8s.io，可以设置别名</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;alias kps=&#x27;sudo nerdctl --namespace=k8s.io ps&#x27;&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment">## 测试</span></span><br><span class="line">kps</span><br></pre></td></tr></table></figure><h2 id="Helm">Helm</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://helm.sh/zh/docs/">官网文档</a></p></li><li class="lvl-2"><p>Helm 是 Kubernetes 的包管理器，类似于 Linux 下的包管理工具如 yum、apt 等。可以方便的将之前打包好的 yaml 文件部署到 Kunernetes 上。</p></li></ul><h3 id="Helm的安装">Helm的安装</h3><ul class="lvl-0"><li class="lvl-2"><p>官网<a href="https://helm.sh/zh/docs/intro/install/">安装方法</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://get.helm.sh/helm-v3.17.4-linux-amd64.tar.gz</span><br><span class="line">tar -zxvf helm-v3.17.4-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> linux-amd64/helm /usr/local/bin/helm</span><br><span class="line">$ helm version</span><br><span class="line">version.BuildInfo&#123;Version:<span class="string">&quot;v3.17.4&quot;</span>, GitCommit:<span class="string">&quot;595a05da6166037d0abebaa27ac8a498fa4d7ed2&quot;</span>, GitTreeState:<span class="string">&quot;clean&quot;</span>, GoVersion:<span class="string">&quot;go1.23.10&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Helm<a href="https://helm.sh/zh/docs/helm/helm_completion_bash/">自动补全</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 helm 的自动补全功能</span></span><br><span class="line"><span class="comment"># 1 当前用户</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;source &lt;(helm completion bash)&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 所有用户</span></span><br><span class="line">helm completion bash | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/bash_completion.d/helm &gt; /dev/null</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+r /etc/bash_completion.d/helm</span><br></pre></td></tr></table></figure><h3 id="Helm的使用">Helm的使用</h3><ul class="lvl-0"><li class="lvl-2"><p>可以参考 <a href="/2023/07/10/aws-eks14-helm/" title="AWS-EKS-14--Helm">AWS-EKS-14--Helm</a></p></li></ul><h4 id="仓库管理">仓库管理</h4><ul class="lvl-0"><li class="lvl-2"><p>add：添加图表存储库</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>list：列出图表存储库</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm repo list</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>remove：删除图表存储库</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm repo remove bitnami</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>update：从图表存储库更新本地可用图表的信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新所有仓库</span></span><br><span class="line">helm repo update</span><br><span class="line"><span class="comment"># 更新指定的仓库</span></span><br><span class="line">helm repo update bitnami</span><br></pre></td></tr></table></figure><h4 id="在仓库中搜索">在仓库中搜索</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在所有仓库中搜索，默认只展示最新的版本</span></span><br><span class="line">helm search repo nginx</span><br><span class="line"><span class="comment"># 在指定的仓库中搜索</span></span><br><span class="line">helm search repo bitnami/wordpress</span><br><span class="line"><span class="comment"># 显示所有版本</span></span><br><span class="line">helm search repo nginx -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在全部版本中搜索大于等于指定版本</span></span><br><span class="line">$ helm search repo nginx --version ^21.0.0 -l</span><br><span class="line">NAME         CHART VERSIONAPP VERSIONDESCRIPTION</span><br><span class="line">bitnami/nginx21.0.8       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.7       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.6       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.4       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.3       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.2       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.1       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.0       1.29.0     NGINX Open Source is a web server that can be a...</span><br></pre></td></tr></table></figure><h4 id="安装包">安装包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装最新版</span></span><br><span class="line">helm install nginx bitnami/nginx</span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">helm install nginx bitnami/nginx --version 21.0.3</span><br><span class="line"><span class="comment"># 安装包到指定命名空间</span></span><br><span class="line">helm install nginx bitnami/nginx -n &lt;namespace&gt;</span><br><span class="line"><span class="comment"># 安装包并创建命名空间</span></span><br><span class="line">helm install nginx bitnami/nginx -n &lt;namespace&gt; --create-namespace</span><br><span class="line"><span class="comment"># oci： 从 docker 仓库中安装</span></span><br><span class="line">helm pull oci://registry-1.docker.io/bitnamicharts/nginx --version 21.0.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装本地 chart 目录</span></span><br><span class="line">helm install my-release ./nginx</span><br><span class="line"><span class="comment"># 安装 .tgz 格式的打包 chart</span></span><br><span class="line">helm install my-release ./nginx-1.2.3.tgz</span><br><span class="line"><span class="comment"># 从远程tgz安装</span></span><br><span class="line">helm install my-release https://example.com/charts/nginx-1.2.3.tgz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Git 仓库中的 chart（结合 plugin）</span></span><br><span class="line">helm plugin install https://github.com/aslafy-z/helm-git</span><br><span class="line">helm repo add mychart <span class="string">&#x27;git+https://github.com/myorg/mychart.git&#x27;</span></span><br><span class="line">helm install my-release mychart/nginx</span><br><span class="line"><span class="comment"># 卸载helm-git插件</span></span><br><span class="line">helm plugin remove helm-git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 --set 传递单个或多个值</span></span><br><span class="line">helm install my-release bitnami/nginx --<span class="built_in">set</span> service.type=NodePort</span><br><span class="line"><span class="comment"># 使用 --values 或 -f 加载 YAML 配置文件</span></span><br><span class="line">helm install my-release bitnami/nginx -f custom-values.yaml</span><br><span class="line"><span class="comment"># 同时使用多种 values 文件 + --set</span></span><br><span class="line">helm install my-release bitnami/nginx -f base.yaml -f prod.yaml --<span class="built_in">set</span> replicaCount=3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查看已经安装的包">查看已经安装的包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看指定命名空间已安装的包</span></span><br><span class="line">helm list -n &lt;namespace&gt;</span><br><span class="line"><span class="comment"># 查看所有已安装的包</span></span><br><span class="line">helm list -A</span><br><span class="line"><span class="comment"># 查看已安装的包状态</span></span><br><span class="line">helm status ngxin -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure><h4 id="卸载包">卸载包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm uninstall nginx -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-3&quot;&gt;
&lt;p&gt;K8S 的 Tools: crictl、nerdctl、helm ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 远程连接</title>
    <link href="https://blog.hanqunfeng.com/2025/07/24/k8s-connection/"/>
    <id>https://blog.hanqunfeng.com/2025/07/24/k8s-connection/</id>
    <published>2025-07-24T12:30:05.000Z</published>
    <updated>2025-07-24T02:27:51.050Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍  K8S 的 远程连接 方法，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li></ul><span id="more"></span><h2 id="远程连接-k8s-集群">远程连接 k8s 集群</h2><h3 id="本地不存在-kubeconfig-文件">本地不存在 kubeconfig 文件</h3><ul class="lvl-0"><li class="lvl-2"><p>获取 kubeconfig 文件，位于 Master 节点：/etc/kubernetes/admin.conf，将其拷贝到本地</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp k8s-master:/etc/kubernetes/admin.conf ~/.kube/config</span><br></pre></td></tr></table></figure><h3 id="本地已存在-kubeconfig-文件">本地已存在 kubeconfig 文件</h3><ul class="lvl-0"><li class="lvl-2"><p>已经配置了一个集群的连接，还想再添加一个集群，可以通过通过合并的方式添加</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将新集群的 kubeconfig 文件拷贝到本地</span></span><br><span class="line">scp k8s-master:/etc/kubernetes/admin.conf ~/.kube/new-cluster.conf</span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line">KUBECONFIG=~/.kube/config:new-cluster.conf kubectl config view --flatten &gt; merged-config.yaml</span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line"><span class="built_in">mv</span> merged-config.yaml ~/.kube/config</span><br></pre></td></tr></table></figure><h3 id="集群配置相关命令">集群配置相关命令</h3><ul class="lvl-0"><li class="lvl-2"><p>获取集群配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取所有集群配置</span></span><br><span class="line">kubectl config get-contexts</span><br><span class="line"><span class="comment"># 查看当前默认的 context</span></span><br><span class="line">kubectl config current-context</span><br><span class="line"><span class="comment"># 切换 context</span></span><br><span class="line">kubectl config use-context &lt;context_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取集群名称</span></span><br><span class="line">kubectl config get-clusters</span><br><span class="line"><span class="comment"># 获取用户名称</span></span><br><span class="line">kubectl config get-users</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>测试</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除集群配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 context</span></span><br><span class="line">kubectl config delete-context &lt;context_name&gt;</span><br><span class="line"><span class="comment"># 删除 cluster</span></span><br><span class="line">kubectl config delete-cluster &lt;cluster_name&gt;</span><br><span class="line"><span class="comment"># 删除 user</span></span><br><span class="line">kubectl config delete-user &lt;user_name&gt;</span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p>也可以直接编辑 kubeconfig（~/.kube/config） 文件，添加或删除不需要的集群、用户、上下文等信息</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍  K8S 的 远程连接 方法，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 Secret</title>
    <link href="https://blog.hanqunfeng.com/2025/07/23/k8s-secret/"/>
    <id>https://blog.hanqunfeng.com/2025/07/23/k8s-secret/</id>
    <published>2025-07-23T13:35:15.000Z</published>
    <updated>2025-07-23T09:36:36.272Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 Secret ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/">k8s Secret 官方文档</a></p></li></ul><span id="more"></span><h2 id="Secret-介绍">Secret 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>Secret 是一种包含少量敏感信息例如密码、令牌或密钥的对象。 这样的信息可能会被放在 Pod 规约中或者镜像中。 使用 Secret 意味着你不需要在应用程序代码中包含机密数据。</p></li><li class="lvl-2"><p>由于创建 Secret 可以独立于使用它们的 Pod， 因此在创建、查看和编辑 Pod 的工作流程中暴露 Secret（及其数据）的风险较小。 Kubernetes 和在集群中运行的应用程序也可以对 Secret 采取额外的预防措施， 例如避免将敏感数据写入非易失性存储。</p></li><li class="lvl-2"><p>Secret 类似于 ConfigMap 但专门用于保存机密数据。</p></li><li class="lvl-2"><p>每个 Secret 的尺寸最多为 1MiB</p></li><li class="lvl-2"><p>在 K8S 中，Secret 有多种类型：本文只讲解 <code>Opaque</code> 类型，其余类型参考[官网]((<a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/">https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/</a>)。</p></li></ul><table><thead><tr><th>内置类型</th><th>用法描述</th></tr></thead><tbody><tr><td><code>Opaque</code></td><td>用户自定义的任意数据（默认类型）</td></tr><tr><td><code>kubernetes.io/service-account-token</code></td><td>自动挂载的服务账号令牌，供 Pod 访问 API 使用</td></tr><tr><td><code>kubernetes.io/dockercfg</code></td><td>序列化的 <code>~/.dockercfg</code> 文件，用于私有仓库认证（旧格式）</td></tr><tr><td><code>kubernetes.io/dockerconfigjson</code></td><td>序列化的 <code>~/.docker/config.json</code> 文件（推荐）</td></tr><tr><td><code>kubernetes.io/basic-auth</code></td><td>存储用户名和密码，用于 HTTP 基本认证</td></tr><tr><td><code>kubernetes.io/ssh-auth</code></td><td>存储 SSH 私钥，用于 SSH 身份认证</td></tr><tr><td><code>kubernetes.io/tls</code></td><td>存储 TLS 密钥和证书，用于 HTTPS 或服务加密通信</td></tr><tr><td><code>bootstrap.kubernetes.io/token</code></td><td>用于 kubelet 加入集群的引导令牌</td></tr></tbody></table><h2 id="Secret-创建及使用">Secret 创建及使用</h2><ul class="lvl-0"><li class="lvl-2"><p>Secret 与 ConfigMap 创建及使用类似，都是存储键值对，但存储内容不同，Secret 存储的是 Base64 编码后的内容。</p></li></ul><h3 id="环境变量引用">环境变量引用</h3><ul class="lvl-0"><li class="lvl-2"><p>yaml创建</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysevret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span>                  <span class="comment"># 默认类型 ，可以省略</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">YWRtaW4=</span>          <span class="comment"># &quot;admin&quot; 的 base64 编码</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MWYyZDFlMmU2N2Rm</span>  <span class="comment"># &quot;1f2d1e2e67df&quot; 的 base64 编码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>命令行创建</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># key：value 方式创建，这里 value 值是 明文，k8s 会进行 base64 编码</span></span><br><span class="line">kubectl create secret generic my-secret \</span><br><span class="line">  --from-literal=username=admin \</span><br><span class="line">  --from-literal=password=1f2d1e2e67df</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件方式创建</span></span><br><span class="line"><span class="comment"># --from-env-file=app.env 作用：将 app.env 中的每一行解析为 key=value，每一行变成 Secret 中的一个键值对。</span></span><br><span class="line">kubectl create secret generic my-secret \</span><br><span class="line">  --from-env-file=username.env \</span><br><span class="line">  --from-env-file=password.env</span><br><span class="line"></span><br><span class="line"><span class="comment"># username.env 文件内容如下：</span></span><br><span class="line"><span class="comment"># username=admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># password.env 文件内容如下：</span></span><br><span class="line"><span class="comment"># password=1f2d1e2e67df</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建完成后，查看 Secret 的内容</span></span><br><span class="line">$ k get secrets my-secret -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  password: MWYyZDFlMmU2N2Rm</span><br><span class="line">  username: YWRtaW4=</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2025-07-05T13:21:22Z&quot;</span></span><br><span class="line">  name: my-secret</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;747355&quot;</span></span><br><span class="line">  uid: 4f77269d-d4c3-4ae8-aafc-7cfa56b84a5d</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>将 Secret 中的全部数据作为环境变量使用</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-secret</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;printenv&quot;</span>] <span class="comment"># 打印环境变量</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">      <span class="attr">envFrom:</span>                  <span class="comment"># 环境变量引用文件、 Secret ，等等</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">secretRef:</span>            <span class="comment"># 这里引用 Secret ，此处将 Secret 中的全部数据作为环境变量使用</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">my-secret</span>     <span class="comment"># Secret 名称</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>将 Secret 中的部分数据作为环境变量使用</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pod2.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-secret2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">    <span class="attr">args:</span>                       <span class="comment"># 容器启动命令</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        echo &quot;username: $&#123;SECRET_USERNAME&#125;&quot;</span></span><br><span class="line"><span class="string">        echo &quot;password: $&#123;SECRET_PASSWORD&#125;&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">env:</span>                        <span class="comment"># 环境变量配置，key: value 形式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SECRET_USERNAME</span>     <span class="comment"># 要在pod中配置的环境变量的 key</span></span><br><span class="line">      <span class="attr">valueFrom:</span>                <span class="comment"># value 来源</span></span><br><span class="line">        <span class="attr">secretKeyRef:</span>           <span class="comment"># 引用 Secret 中的 key</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">my-secret</span>       <span class="comment"># Secret 名称</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">username</span>         <span class="comment"># Secret 中 key 的名称</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SECRET_PASSWORD</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">secretKeyRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">my-secret</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看pod日志</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ k logs pods/env-secret</span><br><span class="line">KUBERNETES_PORT=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_SERVICE_PORT=443</span><br><span class="line">HOSTNAME=env-secret</span><br><span class="line">SHLVL=1</span><br><span class="line">username=admin</span><br><span class="line">HOME=/root</span><br><span class="line">KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">KUBERNETES_PORT_443_TCP_PORT=443</span><br><span class="line">password=1f2d1e2e67df</span><br><span class="line">KUBERNETES_PORT_443_TCP_PROTO=tcp</span><br><span class="line">KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_SERVICE_PORT_HTTPS=443</span><br><span class="line">KUBERNETES_SERVICE_HOST=10.96.0.1</span><br><span class="line">PWD=/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ k logs pods/env-secret2</span><br><span class="line">username: admin</span><br><span class="line">password: 1f2d1e2e67df</span><br></pre></td></tr></table></figure><h3 id="存储卷引用">存储卷引用</h3><ul class="lvl-0"><li class="lvl-2"><p>yaml创建</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># secret-configfile.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">stringData:</span>                          <span class="comment"># 使用 stringData，K8s 会自动将其转换为 base64 编码</span></span><br><span class="line">  <span class="attr">app.properties:</span> <span class="string">|</span>                  <span class="comment"># 文件名</span></span><br><span class="line">    <span class="string">server.port=8080</span></span><br><span class="line">    <span class="string">log.level=INFO</span></span><br><span class="line">  <span class="attr">db.properties:</span> <span class="string">|</span>                   <span class="comment"># 文件名</span></span><br><span class="line">    <span class="string">db.host=localhost</span></span><br><span class="line">    <span class="string">db.port=5432</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>命令行创建</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这里是 --from-file，作为文件配置，而非环境变量</span></span><br><span class="line"><span class="comment"># 文件内容是明文，k8s 会自动将其转换为 base64 编码</span></span><br><span class="line">kubectl create secret generic my-secret \</span><br><span class="line">  --from-file=app.properties \</span><br><span class="line">  --from-file=db.properties</span><br><span class="line"><span class="comment"># app.properties 文件内容如下：</span></span><br><span class="line"><span class="comment"># server.port=8080</span></span><br><span class="line"><span class="comment"># log.level=INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># db.properties 文件内容如下：</span></span><br><span class="line"><span class="comment"># db.host=localhost</span></span><br><span class="line"><span class="comment"># db.port=5432</span></span><br><span class="line"></span><br><span class="line">$ k get secrets my-secret -oyaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  app.properties: c2VydmVyLnBvcnQ9ODA4MApsb2cubGV2ZWw9SU5GTwo=</span><br><span class="line">  db.properties: ZGIuaG9zdD1sb2NhbGhvc3QKZGIucG9ydD0xMjU0MzIK</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2025-07-05T13:45:14Z&quot;</span></span><br><span class="line">  name: my-secret</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;750742&quot;</span></span><br><span class="line">  uid: 35ffcdd6-d70a-4f3a-9246-5c56da630bc1</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Pod 挂载 Secret 为文件</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># secret-pod.yaml 文件内容如下：</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">secret-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/etc/config</span>              <span class="comment"># 挂载路径</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span>                   <span class="comment"># 存储卷 名称</span></span><br><span class="line">    <span class="attr">secret:</span>                               <span class="comment"># 存储卷类型为 Secret</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">my-secret</span>               <span class="comment"># 挂载的 Secret 名称，本利中将 Secret 中的全部文件都挂载到pod目录下</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>容器内的 <code>/etc/config/</code> 目录下会有两个文件：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/config/app.properties</span><br><span class="line">/etc/config/db.properties</span><br><span class="line"></span><br><span class="line">$ k <span class="built_in">exec</span> -it secret-demo -- <span class="built_in">ls</span> /etc/config/</span><br><span class="line">app.properties  db.properties</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果只想挂载 Secret 中的某些文件，可以通过 <code>items</code> 字段指定：</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># secret-pod2.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">secret-demo2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">my-secret</span></span><br><span class="line">      <span class="attr">items:</span>                   <span class="comment"># 明确指定挂载的key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app.properties</span>    <span class="comment"># secret 中的key</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">app.properties</span>   <span class="comment"># 映射到容器内的路径，最终挂载路径为 /etc/config/app.properties</span></span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p>Secret 的特点与使用方法与 ConfigMap 非常类似。</p></li><li class="lvl-2"><p>🔍 ConfigMap vs Secret 对比表：</p></li></ul><table><thead><tr><th>特性</th><th>ConfigMap</th><th>Secret</th></tr></thead><tbody><tr><td><strong>用途</strong></td><td>存储非敏感配置信息（如环境变量、配置文件）</td><td>存储敏感信息（如密码、证书、token）</td></tr><tr><td><strong>数据是否加密</strong></td><td>否，明文存储（Base64 编码可读）</td><td>否（默认 Base64 编码），可配置加密存储（如使用 KMS）</td></tr><tr><td><strong>字段名</strong></td><td><code>data</code> / <code>binaryData</code></td><td><code>data</code>（需 base64） / <code>stringData</code>（明文）</td></tr><tr><td><strong>可存储的最大大小</strong></td><td>每个对象最多约 1MB</td><td>每个对象最多约 1MB</td></tr><tr><td><strong>支持的挂载方式</strong></td><td>- 环境变量<br>- 卷（文件）</td><td>- 环境变量<br>- 卷（文件）</td></tr><tr><td><strong>默认类型（type）</strong></td><td>无类型字段</td><td>默认为 <code>Opaque</code></td></tr><tr><td><strong>可定义为多个文件挂载</strong></td><td>✅</td><td>✅</td></tr><tr><td><strong>默认 RBAC 访问控制强度</strong></td><td>弱（多数用户/Pod 可读取）</td><td>强（默认受限访问）</td></tr><tr><td><strong>支持的内置类型</strong></td><td>无</td><td>✅ 如：<code>kubernetes.io/tls</code>、<code>kubernetes.io/basic-auth</code> 等</td></tr><tr><td><strong>是否适合存储密钥/密码</strong></td><td>❌ 不推荐</td><td>✅ 推荐</td></tr><tr><td><strong>可视化明文读取</strong></td><td>✅ 直接读取</td><td>✅ 但 Base64 编码后需要解码</td></tr><tr><td><strong>常见用途示例</strong></td><td>App 配置、日志级别、连接参数等</td><td>数据库密码、TLS 证书、API Token 等</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 Secret ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/&quot;&gt;k8s Secret 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 ConfigMap</title>
    <link href="https://blog.hanqunfeng.com/2025/07/23/k8s-configmap/"/>
    <id>https://blog.hanqunfeng.com/2025/07/23/k8s-configmap/</id>
    <published>2025-07-23T12:35:15.000Z</published>
    <updated>2025-07-23T09:14:54.663Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 ConfigMap ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/configmap/">k8s ConfigMap 官方文档</a></p></li></ul><span id="more"></span><h2 id="ConfigMap-别名cm-介绍">ConfigMap(别名cm) 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>ConfigMap 是一种 API 对象，用来将非机密性的数据保存到键值对中。</p></li><li class="lvl-2"><p>使用时， Pod 可以将其用作环境变量、命令行参数或者存储卷中的配置文件。</p></li><li class="lvl-2"><p>ConfigMap 将你的环境配置信息和容器镜像解耦，便于应用配置的修改。</p></li><li class="lvl-2"><p>多个 Pod 可以关联同一个 ConfigMap</p></li></ul><h2 id="ConfigMap-创建及使用">ConfigMap 创建及使用</h2><h3 id="环境变量引用">环境变量引用</h3><ul class="lvl-0"><li class="lvl-2"><p>yaml创建</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># configmap.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span>       <span class="comment"># ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myconfigmap</span>   <span class="comment"># configmap 名称</span></span><br><span class="line"><span class="attr">data:</span>                 <span class="comment"># data 字段设计用来保存 UTF-8 字符串，最大值为 1M</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">k8s-admin</span> <span class="comment"># key: value</span></span><br><span class="line">  <span class="attr">access_level:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>命令行创建</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># key：value 方式创建</span></span><br><span class="line">kubectl create configmap myconfigmap --from-literal=username=k8s-admin --from-literal=access_level=1 --from-literal=password=123456</span><br><span class="line"><span class="comment"># 文件方式创建</span></span><br><span class="line"><span class="comment"># --from-env-file=app.env 作用：将 app.env 中的每一行解析为 key=value，每一行变成 ConfigMap 中的一个键值对。</span></span><br><span class="line">kubectl create configmap myconfigmap --from-env-file=app.env --from-env-file=other.env</span><br><span class="line"><span class="comment"># app.env 文件内容如下：</span></span><br><span class="line"><span class="comment"># username=k8s-admin</span></span><br><span class="line"><span class="comment"># access_level=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># other.env 文件内容如下：</span></span><br><span class="line"><span class="comment"># password=123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建完成后，查看 ConfigMap 的内容</span></span><br><span class="line">$ k get cm myconfigmap -oyaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  access_level: <span class="string">&quot;1&quot;</span></span><br><span class="line">  password: <span class="string">&quot;123456&quot;</span></span><br><span class="line">  username: k8s-admin</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2025-07-05T10:29:15Z&quot;</span></span><br><span class="line">  name: myconfigmap</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;723770&quot;</span></span><br><span class="line">  uid: ee850cf9-9014-4be2-97d8-5d1840e78d54</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>将 ConfigMap 中的全部数据作为环境变量使用</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-configmap</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;printenv&quot;</span>] <span class="comment"># 打印环境变量</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">      <span class="attr">envFrom:</span>                  <span class="comment"># 环境变量引用文件、configMap，等等</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMapRef:</span>         <span class="comment"># 这里引用 ConfigMap，此处将 ConfigMap 中的全部数据作为环境变量使用</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">myconfigmap</span>   <span class="comment"># configMap 名称</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>将 ConfigMap 中的部分数据作为环境变量使用</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pod2.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-configmap2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">    <span class="attr">args:</span>                       <span class="comment"># 容器启动命令</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        echo &quot;username: $&#123;CONFIGMAP_USERNAME&#125;&quot;</span></span><br><span class="line"><span class="string">        echo &quot;password: $&#123;CONFIGMAP_PASSWORD&#125;&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">env:</span>                        <span class="comment"># 环境变量配置，key: value 形式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CONFIGMAP_USERNAME</span>  <span class="comment"># 要在pod中配置的环境变量的 key</span></span><br><span class="line">      <span class="attr">valueFrom:</span>                <span class="comment"># value 来源</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span>        <span class="comment"># 引用 ConfigMap 中的 key</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">myconfigmap</span>     <span class="comment"># configMap 名称</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">username</span>         <span class="comment"># configMap 中 key 的名称</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CONFIGMAP_PASSWORD</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">myconfigmap</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看pod日志</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs pods/env-configmap</span><br><span class="line">access_level=1</span><br><span class="line">KUBERNETES_SERVICE_PORT=443</span><br><span class="line">KUBERNETES_PORT=tcp://10.96.0.1:443</span><br><span class="line">HOSTNAME=env-configmap</span><br><span class="line">SHLVL=1</span><br><span class="line">username=k8s-admin</span><br><span class="line">HOME=/root</span><br><span class="line">KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">KUBERNETES_PORT_443_TCP_PORT=443</span><br><span class="line">password=123456</span><br><span class="line">KUBERNETES_PORT_443_TCP_PROTO=tcp</span><br><span class="line">KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_SERVICE_PORT_HTTPS=443</span><br><span class="line">KUBERNETES_SERVICE_HOST=10.96.0.1</span><br><span class="line">PWD=/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl logs pods/env-configmap2</span><br><span class="line">username: k8s-admin</span><br><span class="line">password: 123456</span><br></pre></td></tr></table></figure><h3 id="存储卷引用">存储卷引用</h3><ul class="lvl-0"><li class="lvl-2"><p>yaml创建</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># configmap-configfile.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">app.properties:</span> <span class="string">|</span>  <span class="comment"># 文件名称 ，使用 | 创建多行</span></span><br><span class="line">    <span class="string">server.port=8080</span></span><br><span class="line">    <span class="string">log.level=INFO</span></span><br><span class="line">  <span class="attr">db.properties:</span> <span class="string">|</span>   <span class="comment"># 文件名称</span></span><br><span class="line">    <span class="string">db.host=localhost</span></span><br><span class="line">    <span class="string">db.port=5432</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>命令行创建</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 注意这里是 --from-file，作为文件配置，而非环境变量</span></span><br><span class="line">kubectl create configmap app-config \</span><br><span class="line">  --from-file=app.properties \</span><br><span class="line">  --from-file=db.properties</span><br><span class="line"><span class="comment"># app.properties 文件内容如下：</span></span><br><span class="line"><span class="comment"># server.port=8080</span></span><br><span class="line"><span class="comment"># log.level=INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># db.properties 文件内容如下：</span></span><br><span class="line"><span class="comment"># db.host=localhost</span></span><br><span class="line"><span class="comment"># db.port=5432</span></span><br><span class="line"></span><br><span class="line">$ k get cm app-config -oyaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  app.properties: |</span><br><span class="line">    server.port=8080</span><br><span class="line">    log.level=INFO</span><br><span class="line">  db.properties: |</span><br><span class="line">    db.host=localhost</span><br><span class="line">    db.port=5432</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2025-07-05T10:49:00Z&quot;</span></span><br><span class="line">  name: app-config</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;726507&quot;</span></span><br><span class="line">  uid: 05c9a228-ec69-4e88-b8d8-63f97eff2651</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Pod 挂载 ConfigMap 为文件</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># configmap-pod.yaml 文件内容如下：</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">configmap-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/etc/config</span>              <span class="comment"># 挂载路径</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span>                   <span class="comment"># 存储卷 名称</span></span><br><span class="line">    <span class="attr">configMap:</span>                            <span class="comment"># 存储卷类型为 ConfigMap</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">app-config</span>                    <span class="comment"># 挂载的 ConfigMap 名称，本利中将 configMap 中的全部文件都挂载到pod目录下</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>容器内的 <code>/etc/config/</code> 目录下会有两个文件：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/config/app.properties</span><br><span class="line">/etc/config/db.properties</span><br><span class="line"></span><br><span class="line">$ k <span class="built_in">exec</span> -it configmap-demo -- <span class="built_in">ls</span> /etc/config/</span><br><span class="line">app.properties  db.properties</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果只想挂载 ConfigMap 中的某些文件，可以通过 <code>items</code> 字段指定：</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">configmap-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">    <span class="attr">configMap:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">app-config</span></span><br><span class="line">      <span class="attr">items:</span>                   <span class="comment"># 明确指定挂载的key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app.properties</span>    <span class="comment"># configMap中的key</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">app.properties</span>   <span class="comment"># 映射到容器内的路径，最终挂载路径为 /etc/config/app.properties</span></span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p><code>--from-env-file=app.env</code> 与 <code>--from-file=app.env</code> 的区别</p></li></ul><table><thead><tr><th>项目</th><th><code>--from-env-file=app.env</code></th><th><code>--from-file=app.env</code></th></tr></thead><tbody><tr><td>用途</td><td>解析为环境变量形式键值对</td><td>按文件整体读入为内容</td></tr><tr><td>适合场景</td><td>想把每个变量都单独用掉</td><td>挂载为配置文件使用</td></tr><tr><td>data 结构</td><td>每一行变一个键值对</td><td>文件名为 key，内容为值</td></tr><tr><td>读取方式</td><td>用 <code>envFrom</code> 注入环境变量</td><td>用 <code>volumeMount</code> 挂载整个文件</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>ConfigMap 也支持 <code>二进制</code> 数据，但需要用 <code>base64</code> 编码</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">config.txt:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    Hello, world!</span></span><br><span class="line"><span class="string"></span><span class="attr">binaryData:</span></span><br><span class="line">  <span class="attr">config.bin:</span> <span class="string">aGVsbG8gd29ybGQK</span>   <span class="comment"># 这是 &quot;hello world&quot; 的 base64 编码</span></span><br></pre></td></tr></table></figure><blockquote><p>binaryData 和 data 的区别</p></blockquote><table><thead><tr><th>字段</th><th>内容类型</th><th>编码方式</th><th>适合存储</th></tr></thead><tbody><tr><td><code>data</code></td><td>文本（UTF-8）</td><td>明文</td><td>配置文件、参数、脚本等</td></tr><tr><td><code>binaryData</code></td><td>任意二进制数据</td><td>base64 编码</td><td>图片、证书、非UTF-8文件等</td></tr></tbody></table><blockquote><p>❗注意事项</p></blockquote><table><thead><tr><th>项目</th><th>说明</th></tr></thead><tbody><tr><td>base64 编码格式</td><td><code>binaryData</code> 中的值必须是标准 base64，不支持换行</td></tr><tr><td>解码后大小限制</td><td>ConfigMap 单个对象最大 1MB（无论 data 还是 binaryData）</td></tr><tr><td>二者可共存</td><td><code>data</code> 与 <code>binaryData</code> 可以同时出现在同一个 ConfigMap 中（字段名不能重复）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>修改 ConfigMap 后 ：<code>k edit configmap &lt;configmap-name&gt;</code></p><ul class="lvl-2"><li class="lvl-4">如果 Pod 是作为 环境变量 关联的，Pod 不会更新，只能重新创建</li><li class="lvl-4">如果 Pod 是作为 volume 挂载的，Pod 会自动更新(大约几秒后)</li></ul></li><li class="lvl-2"><p>删除 ConfigMap 后：<code>k delete configmap &lt;configmap-name&gt;</code></p></li></ul><table><thead><tr><th>Pod 状态</th><th>ConfigMap 删除后影响</th></tr></thead><tbody><tr><td>正在运行</td><td>不受影响</td></tr><tr><td>重启 / 扩容</td><td><strong>失败</strong>：找不到 ConfigMap，无法创建容器</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 ConfigMap ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/configuration/configmap/&quot;&gt;k8s ConfigMap 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 StorageClass</title>
    <link href="https://blog.hanqunfeng.com/2025/07/22/k8s-storageclass/"/>
    <id>https://blog.hanqunfeng.com/2025/07/22/k8s-storageclass/</id>
    <published>2025-07-22T12:35:15.000Z</published>
    <updated>2025-07-22T08:46:03.462Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 StorageClass，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/storage-classes/">k8s StorageClass 官方文档</a></p></li><li class="lvl-2"><p>本文底层存储卷是 NFS</p></li></ul><span id="more"></span><h2 id="StorageClass-别名sc-介绍">StorageClass(别名sc) 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>K8s 的存储资源分为两种供应模式：静态供应模式 和 动态供应模式。</p><ul class="lvl-2"><li class="lvl-4">静态模式下，管理员需要预先创建许多PV，等待 PVC  来绑定。</li><li class="lvl-4">动态模式下，Kubernetes 会通过 StorageClass 自动创建 PV，并完成与 PVC 的绑定。</li></ul></li><li class="lvl-2"><p>StorageClass 是 Kubernetes 中用来定义 <code>存储后端类型和配置参数</code> 的资源</p></li><li class="lvl-2"><p>作用： 自动创建 PV（PersistentVolume）的“模板”或“规则”</p></li><li class="lvl-2"><p>使用场景： 配合 PVC 使用时，Kubernetes 可以根据 StorageClass 自动 动态创建 对应的持久卷。</p></li><li class="lvl-2"><p>✅ 核心优势：</p><ul class="lvl-2"><li class="lvl-4">无需手动创建 PV</li><li class="lvl-4">支持多种存储后端（NFS、云盘、Ceph、GlusterFS、iSCSI…）</li></ul></li></ul><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/OGGWYb.png" alt=""></p><h2 id="创建-StorageClass">创建 StorageClass</h2><ul class="lvl-0"><li class="lvl-2"><p>一个 NFS 的 StorageClass 的 yaml 示例</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nfs-storage.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-csi</span>                                           <span class="comment"># 存储类名称</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">nfs.csi.k8s.io</span>                               <span class="comment"># 指定存储插件的 CSI 驱动名称，需要安装 nfs-csi-driver</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Delete</span>                                     <span class="comment"># Retain：PVC 删除后，PV 不会被自动删除（数据保留），默认是 Delete,生产环境慎用。</span></span><br><span class="line"><span class="attr">allowVolumeExpansion:</span> <span class="literal">true</span>                                <span class="comment"># 是否允许 PVC 自动扩容，nfs 支持扩容</span></span><br><span class="line"><span class="attr">mountOptions:</span>                                             <span class="comment"># 挂载选项，csi插件不同，选项不同。这里是 nfs的</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hard</span>                                                  <span class="comment"># 服务器异常时客户端会一直发请求直到挂载成功</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nfsvers=4.1</span>                                           <span class="comment"># nfs版本    nfs4.1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nolock</span>                                                <span class="comment"># 允许多个客户端同时访问</span></span><br><span class="line"><span class="attr">volumeBindingMode:</span> <span class="string">Immediate</span>                              <span class="comment"># 默认值：Immediate: 创建PVC时立即绑定 ,WaitForFirstConsumer：等到 Pod 调度到节点后再分配卷，适合多可用区场景</span></span><br><span class="line"><span class="attr">parameters:</span>                                               <span class="comment"># 参数配置</span></span><br><span class="line">  <span class="attr">server:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.88</span>                                    <span class="comment"># nfs服务器地址</span></span><br><span class="line">  <span class="attr">share:</span> <span class="string">/nfs-server/data</span>                                 <span class="comment"># nfs-server上的存储目录</span></span><br></pre></td></tr></table></figure><blockquote><p>csi-driver-nfs 从 v4.x 起，已经支持 Delete reclaimPolicy 和 allowVolumeExpansion 自动扩容。<br>生产环境慎用 Delete reclaimPolicy，因为此时删除 PVC 后，nfs-server 上的存储目录也会被删除。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>每个 StorageClass 配置中有三个必填的参数：<code>provisioner</code>、<code>parameters</code> 和 <code>reclaimPolicy</code> 字段， 这些字段会在 StorageClass 需要动态制备 PersistentVolume (PV) 以满足 PersistentVolumeClaim (PVC) 时使用到。</p></li></ul><h3 id="provisioner-存储制备器">provisioner: 存储制备器</h3><ul class="lvl-0"><li class="lvl-2"><p>每个 StorageClass 都有一个制备器（Provisioner），用来决定使用哪个卷插件制备 PV。 该字段必须指定。</p></li><li class="lvl-2"><p>比如 NFS 存储制备器：<code>provisioner: nfs.csi.k8s.io</code>，是 K8S 官方维护的 NFS CSI 插件。<a href="https://github.com/kubernetes-csi/csi-driver-nfs">Github</a>。</p></li><li class="lvl-2"><p>安装 NFS CSI 插件：<a href="https://github.com/kubernetes-csi/csi-driver-nfs/blob/master/docs/install-csi-driver-master.md">Install NFS CSI Driver</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在线安装</span></span><br><span class="line">curl -skSL https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/master/deploy/install-driver.sh | bash -s master --</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">kubectl -n kube-system get pod -o wide -l app=csi-nfs-controller</span><br><span class="line">kubectl -n kube-system get pod -o wide -l app=csi-nfs-node</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>卸载</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -skSL https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/master/deploy/uninstall-driver.sh | bash -s master --</span><br></pre></td></tr></table></figure><h2 id="示例">示例</h2><ul class="lvl-0"><li class="lvl-2"><p>创建 StorageClass</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nfs-storage.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看 storageclass</span></span><br><span class="line">$ k get sc</span><br><span class="line">NAME      PROVISIONER      RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">nfs-csi   nfs.csi.k8s.io   Delete          Immediate           <span class="literal">true</span>                   5s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建 PVC 时指定 storageclass，StorageClass 会自动创建 PV</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nfs-pvc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-pvc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs-csi</span>  <span class="comment"># 指定 StorageClass 的名称，如果设置了默认的sc，此处可以删除该配置</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span>          <span class="comment"># 指定访问模式</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">800Mi</span>         <span class="comment"># 申请的容量</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建 PVC</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 PVC</span></span><br><span class="line">$ k apply -f nfs-pvc.yaml</span><br><span class="line">persistentvolumeclaim/nfs-pvc created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 PV和PVC，可以看到 PV 自动创建了</span></span><br><span class="line">$ k get pv,pvc</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM             STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">persistentvolume/pvc-c1d33fec-5e16-4156-8405-1af4fc171907   800Mi      RWX            Delete           Bound    default/nfs-pvc   nfs-csi        &lt;<span class="built_in">unset</span>&gt;                          2m4s</span><br><span class="line"></span><br><span class="line">NAME                            STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE</span><br><span class="line">persistentvolumeclaim/nfs-pvc   Bound    pvc-c1d33fec-5e16-4156-8405-1af4fc171907   800Mi      RWX            nfs-csi        &lt;<span class="built_in">unset</span>&gt;                 2m4s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>自动扩容，修改 PVC 容量到 1Gi</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit pvc nfs-pvc</span><br><span class="line"><span class="comment"># 修改如下</span></span><br><span class="line"><span class="comment"># &quot;storage&quot;:&quot;1Gi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看 PV 和 PVC，可以看到 自动扩容成功</span></span><br><span class="line">$ k get pv,pvc</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM             STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">persistentvolume/pvc-c1d33fec-5e16-4156-8405-1af4fc171907   1Gi        RWX            Delete           Bound    default/nfs-pvc   nfs-csi        &lt;<span class="built_in">unset</span>&gt;                          4m50s</span><br><span class="line"></span><br><span class="line">NAME                            STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE</span><br><span class="line">persistentvolumeclaim/nfs-pvc   Bound    pvc-c1d33fec-5e16-4156-8405-1af4fc171907   1Gi        RWX            nfs-csi        &lt;<span class="built_in">unset</span>&gt;                 4m50s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除PVC，自动删除PV</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pvc nfs-pvc</span><br><span class="line"><span class="comment"># 再次查看 PV 和 PVC，可以看到 PV 已经被自动删除， reclaimPolicy: Delete</span></span><br><span class="line">$ k get pv,pvc</span><br><span class="line">No resources found</span><br><span class="line"><span class="comment"># 此时 nfs-server 的目录下的文件也会被删除，生产环境慎用</span></span><br></pre></td></tr></table></figure><h2 id="设置默认的-StorageClass">设置默认的 StorageClass</h2><ul class="lvl-0"><li class="lvl-2"><p>上面我们创建 PVC 的时候需要指定 StorageClass，如果我们设置一个默认的 StorageClass，那么在PVC里就可以省略掉 StorageClass 的设置。</p></li><li class="lvl-2"><p>K8S 中只能设置一个默认的 StorageClass，如果有多个，那么就会报错。</p></li><li class="lvl-2"><p>设置默认的 StorageClass</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为 sc 添加 `默认` 注解，去掉该注解 或者 设置为 false 就取消默认了。</span></span><br><span class="line">$ kubectl patch storageclass nfs-csi -p <span class="string">&#x27;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io/is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line">storageclass.storage.k8s.io/nfs-csi patched</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看sc，此时看到名称后面多了一个 (default) ，表示这是默认的 StorageClass</span></span><br><span class="line">$ k get sc</span><br><span class="line">NAME                PROVISIONER      RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">nfs-csi (default)   nfs.csi.k8s.io   Delete          Immediate           <span class="literal">true</span>                   14m</span><br></pre></td></tr></table></figure><h2 id="StatefulSet-自动创建-PVC">StatefulSet: 自动创建 PVC</h2><ul class="lvl-0"><li class="lvl-2"><p>上面的方式还是要求我们必须创建 PVC，有什么方法可以不用创建 PVC ，而是在创建控制器的时候就一起把 PVC 创建好呢？</p></li><li class="lvl-2"><p>目前只有 <code>StatefulSet</code>控制器 才支持自动创建 PVC</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis-statefulset.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span>                  <span class="comment"># 指定使用的 API 版本，这里是 apps/v1，适用于 StatefulSet 资源</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span>                    <span class="comment"># Kubernetes 资源类型，这里是部署（StatefulSet）</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-sts</span>                    <span class="comment"># 资源名称，必须唯一（在同一命名空间下）</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">sts-ns</span></span><br><span class="line"><span class="attr">spec:</span>                                <span class="comment"># 配置项</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span>           <span class="comment"># 保留的历史版本数，默认值为 10，Deployment 和 StatefulSet 都有这个配置项。回滚时有用。</span></span><br><span class="line">  <span class="attr">selector:</span>                          <span class="comment"># 选择器，指定要管理的 Pod</span></span><br><span class="line">    <span class="attr">matchLabels:</span>                     <span class="comment"># 标签选择器</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span>                     <span class="comment"># 选择器，指定 StatefulSet 管理哪些 Pod（标签必须与 template 中匹配）</span></span><br><span class="line">  <span class="attr">updateStrategy:</span>                    <span class="comment"># 更新策略，这里要注意这个更新策略与Deployment的属性名字不一样</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span>              <span class="comment"># 1.RollingUpdate：这是默认的更新策略。使用 RollingUpdate 更新策略时，在更新 StatefulSet 模板后， 老的 StatefulSet Pod 将被终止，并且将以受控方式自动创建新的 StatefulSet Pod。 更新期间，最多只能有 StatefulSet 的一个 Pod 运行于每个节点上。</span></span><br><span class="line">                                     <span class="comment"># 2.OnDelete：使用 OnDelete 更新策略时，在更新 StatefulSet 模板后，只有当你手动删除老的 StatefulSet Pod 之后，新的 StatefulSet Pod 才会被自动创建。</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span>                   <span class="comment"># 滚动升级的配置</span></span><br><span class="line">      <span class="attr">partition:</span> <span class="number">0</span>                   <span class="comment"># 用于控制从第几个 Pod 开始滚动升级</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">redis-svc</span>             <span class="comment"># 服务名称,sts对象使用无头服务，这个是必填项，需要事先创建好</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span>                        <span class="comment"># 副本数，默认是 1</span></span><br><span class="line">  <span class="attr">template:</span>                          <span class="comment"># 模板，定义 Pod 的内容，具体可以参考 Pod 的配置</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span>                   <span class="comment"># Pod 的标签，必须与 selector 中的 matchLabels 一致</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">redis:6.2</span>             <span class="comment"># 容器使用的镜像，这里是官方的 redis 镜像</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">redis</span>                  <span class="comment"># 容器的名称</span></span><br><span class="line">        <span class="attr">volumeMounts:</span>                <span class="comment"># 挂载数据卷</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/data</span>           <span class="comment"># Redis 持久化数据存储路径，根据实际情况修改</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span>              <span class="comment"># 配置 PVC 模板</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-data</span>               <span class="comment"># PVC 名称</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ReadWriteMany</span>              <span class="comment"># 访问模式：多节点读写</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">500Mi</span>             <span class="comment"># 请求的存储容量，根据实际需求调整</span></span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">nfs-csi</span>      <span class="comment"># 存储类名称，如果使用默认存储类，则不需要指定</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建 StatefulSet，并查看 PV,PVC</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 StatefulSet</span></span><br><span class="line">$ kubectl apply -f redis-statefulset.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 PV,PVC</span></span><br><span class="line">$ k get pv,pvc -n sts-ns</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                           STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">persistentvolume/pvc-748fc0d3-a142-4d08-b5c4-7320daea5618   500Mi      RWX            Delete           Bound    sts-ns/redis-data-redis-sts-1   nfs-csi        &lt;<span class="built_in">unset</span>&gt;                          19s</span><br><span class="line">persistentvolume/pvc-807018bb-ec66-4a5c-87f1-9c11df6f4784   500Mi      RWX            Delete           Bound    sts-ns/redis-data-redis-sts-0   nfs-csi        &lt;<span class="built_in">unset</span>&gt;                          22s</span><br><span class="line"></span><br><span class="line">NAME                                           STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE</span><br><span class="line">persistentvolumeclaim/redis-data-redis-sts-0   Bound    pvc-807018bb-ec66-4a5c-87f1-9c11df6f4784   500Mi      RWX            nfs-csi        &lt;<span class="built_in">unset</span>&gt;                 22s</span><br><span class="line">persistentvolumeclaim/redis-data-redis-sts-1   Bound    pvc-748fc0d3-a142-4d08-b5c4-7320daea5618   500Mi      RWX            nfs-csi        &lt;<span class="built_in">unset</span>&gt;                 20s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>StatefulSet 的 volumeClaimTemplates 每个 Pod 单独创建 PVC，Pod 和 PVC 一一对应，即有几个副本就创建几个 PVC。PVC 名称是：<code>&lt;volumeClaimTemplates.metadata.name&gt;-&lt;statefulset-name&gt;-&lt;pod-ordinal&gt;</code></p></li><li class="lvl-2"><p>删除 StatefulSet</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f redis-statefulset.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 PV,PVC，发现删除 StatefulSet 后，PV 和 PVC 是不会被自动删除的，需要手动删除 PVC</span></span><br><span class="line">$ k get pv,pvc -n sts-ns</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                           STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">persistentvolume/pvc-748fc0d3-a142-4d08-b5c4-7320daea5618   500Mi      RWX            Delete           Bound    sts-ns/redis-data-redis-sts-1   nfs-csi        &lt;<span class="built_in">unset</span>&gt;                          6m30s</span><br><span class="line">persistentvolume/pvc-807018bb-ec66-4a5c-87f1-9c11df6f4784   500Mi      RWX            Delete           Bound    sts-ns/redis-data-redis-sts-0   nfs-csi        &lt;<span class="built_in">unset</span>&gt;                          6m33s</span><br><span class="line"></span><br><span class="line">NAME                                           STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE</span><br><span class="line">persistentvolumeclaim/redis-data-redis-sts-0   Bound    pvc-807018bb-ec66-4a5c-87f1-9c11df6f4784   500Mi      RWX            nfs-csi        &lt;<span class="built_in">unset</span>&gt;                 6m33s</span><br><span class="line">persistentvolumeclaim/redis-data-redis-sts-1   Bound    pvc-748fc0d3-a142-4d08-b5c4-7320daea5618   500Mi      RWX            nfs-csi        &lt;<span class="built_in">unset</span>&gt;                 6m31s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动删除 PVC，因为sc配置的回收策略为 Delete，所以 PV 也会被删除</span></span><br><span class="line">k delete pvc -n sts-ns redis-data-redis-sts-0</span><br><span class="line">k delete pvc -n sts-ns redis-data-redis-sts-1</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>实际上，无论是删除 statefulset 还是缩容 statefulset，PVC 都不会被自动删除。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 StorageClass，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/storage/storage-classes/&quot;&gt;k8s StorageClass 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文底层存储卷是 NFS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 持久卷 PV 和 PVC</title>
    <link href="https://blog.hanqunfeng.com/2025/07/21/k8s-storage-pv-pvc/"/>
    <id>https://blog.hanqunfeng.com/2025/07/21/k8s-storage-pv-pvc/</id>
    <published>2025-07-21T15:35:15.000Z</published>
    <updated>2025-07-22T08:52:10.994Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 持久卷 PV 和 PVC ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/">k8s PV/PVC 官方文档</a></p></li><li class="lvl-2"><p>本文底层存储卷是 NFS</p></li></ul><span id="more"></span><h2 id="PV-和-PVC-介绍">PV 和 PVC 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>PV(PersistentVolume) 是 Kubernetes 中的一种存储资源，用于将底层的物理存储（如 NFS、iSCSI、Ceph、云存储等）抽象成 Kubernetes 资源，供 Pod 使用。它是对存储的一种“声明式”管理，类似于 Pod 声明计算资源。PV 是集群级别的存储资源，不支持 Namespace。</p></li><li class="lvl-2"><p>PVC(PersistentVolumeClaim)，持久卷声明， 是 Kubernetes 中用于申请存储资源的对象。PVC 是 Namespace 级别的资源。</p></li><li class="lvl-2"><p>简而言之：</p><ul class="lvl-2"><li class="lvl-4">PV 是集群中的一块存储，由管理员提前配置或动态创建。</li><li class="lvl-4">PVC（PersistentVolumeClaim） 是用户对存储的申请。</li><li class="lvl-4">Pod 通过 PVC 绑定到 PV，使用持久化存储。</li><li class="lvl-4">开发者用 PVC 来申请存储空间，不关心存储的具体实现方式。</li><li class="lvl-4">PVC 通过 Kubernetes 自动匹配一个合适的 PersistentVolume（PV）进行绑定。</li></ul></li><li class="lvl-2"><p>PV 与 PVC 的基本流程</p><ul class="lvl-2"><li class="lvl-4">管理员创建 PV（或者集群通过 StorageClass 自动创建）。</li><li class="lvl-4">用户提交 PVC，声明自己需要多少容量、什么访问模式。</li><li class="lvl-4">Kubernetes 查找可用的 PV，条件符合（容量、访问模式、StorageClass）就自动绑定。</li><li class="lvl-4">Pod 挂载 PVC，实现持久化存储。</li></ul></li></ul><h2 id="PV-示例">PV 示例</h2><ul class="lvl-0"><li class="lvl-2"><p>一个使用 NFS 存储卷的 PV 示例</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pv-nfs.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv-nfs-1g</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span>                 <span class="comment"># 存储卷模式，默认为 Filesystem</span></span><br><span class="line">  <span class="attr">capacity:</span>                              <span class="comment"># 存储能力</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span>                         <span class="comment"># 容量大小，Gi 或 Mi</span></span><br><span class="line">  <span class="attr">accessModes:</span>                           <span class="comment"># 访问模式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span>                      <span class="comment"># 访问模式</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span>  <span class="comment"># 回收策略</span></span><br><span class="line">  <span class="attr">nfs:</span>                                   <span class="comment"># 持久卷类型（如 hostPath、nfs、ceph 等）</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs-server/data/pv-nfs-1g</span>     <span class="comment"># 存储路径要确保已经存在</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.88</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv-nfs-2g</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span>                              <span class="comment"># 存储能力</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">2Gi</span>                         <span class="comment"># 容量大小，Gi 或 Mi</span></span><br><span class="line">  <span class="attr">accessModes:</span>                           <span class="comment"># 访问模式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span>                      <span class="comment"># 访问模式</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span>  <span class="comment"># 回收策略</span></span><br><span class="line">  <span class="attr">nfs:</span>                                   <span class="comment"># 存储类型（如 hostPath、nfs、ceph 等）</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs-server/data/pv-nfs-2g</span>     <span class="comment"># 存储路径要确保已经存在</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.88</span></span><br></pre></td></tr></table></figure><h3 id="存储卷模式">存储卷模式</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#volume-mode">官网文档:存储卷模式</a></p></li><li class="lvl-2"><p>Kubernetes 支持两种卷模式（volumeModes）：Filesystem（文件系统） 和 Block（块）。</p></li><li class="lvl-2"><p>如果该参数被省略，默认的卷模式是 Filesystem。</p></li><li class="lvl-2"><p>volumeMode 属性设置为 Filesystem 的卷会被 Pod 挂载（Mount） 到某个目录。</p></li></ul><h3 id="持久卷类型">持久卷类型</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes">官网文档:持久卷类型</a></p></li><li class="lvl-2"><p>✅ 当前支持的插件</p></li></ul><table><thead><tr><th>插件类型</th><th>描述</th></tr></thead><tbody><tr><td><strong>csi</strong></td><td><strong>容器存储接口（CSI）</strong>，推荐的现代存储接口</td></tr><tr><td><strong>fc</strong></td><td>Fibre Channel 存储</td></tr><tr><td><strong>hostPath</strong></td><td>HostPath 卷（仅供单节点测试使用；多节点不推荐，推荐使用 local 卷替代）</td></tr><tr><td><strong>iscsi</strong></td><td>iSCSI（基于 IP 的 SCSI 存储）</td></tr><tr><td><strong>local</strong></td><td>节点本地存储设备</td></tr><tr><td><strong>nfs</strong></td><td>网络文件系统（NFS）存储</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>⚠️ 已弃用但仍可用（需 CSI 迁移）</p></li></ul><table><thead><tr><th>插件类型</th><th>描述</th><th>CSI 迁移状态</th></tr></thead><tbody><tr><td><strong>awsElasticBlockStore</strong></td><td>AWS EBS 块存储</td><td>从 v1.23 开始默认迁移</td></tr><tr><td><strong>azureDisk</strong></td><td>Azure 磁盘存储</td><td>从 v1.23 开始默认迁移</td></tr><tr><td><strong>azureFile</strong></td><td>Azure 文件存储</td><td>从 v1.24 开始默认迁移</td></tr><tr><td><strong>cinder</strong></td><td>OpenStack 块存储</td><td>从 v1.21 开始默认迁移</td></tr><tr><td><strong>flexVolume</strong></td><td>FlexVolume（无迁移计划，但未计划移除）</td><td>从 v1.23 开始弃用</td></tr><tr><td><strong>gcePersistentDisk</strong></td><td>GCP 持久磁盘</td><td>从 v1.23 开始默认迁移</td></tr><tr><td><strong>portworxVolume</strong></td><td>Portworx 存储卷</td><td>从 v1.31 开始默认迁移</td></tr><tr><td><strong>vsphereVolume</strong></td><td>vSphere VMDK 卷</td><td>从 v1.25 开始默认迁移</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>❌ 已废弃/即将移除的 In-Tree 插件</p></li></ul><table><thead><tr><th>插件类型</th><th>描述</th><th>弃用/移除版本</th></tr></thead><tbody><tr><td><strong>cephfs</strong></td><td>Ceph 文件系统卷</td><td>v1.31 之后不可用</td></tr><tr><td><strong>flocker</strong></td><td>Flocker 存储</td><td>v1.25 之后不可用</td></tr><tr><td><strong>glusterfs</strong></td><td>GlusterFS 存储</td><td>v1.26 之后不可用</td></tr><tr><td><strong>photonPersistentDisk</strong></td><td>Photon 持久磁盘</td><td>v1.15 之后不可用</td></tr><tr><td><strong>quobyte</strong></td><td>Quobyte 卷</td><td>v1.25 之后不可用</td></tr><tr><td><strong>rbd</strong></td><td>Rados 块设备（Ceph RBD）</td><td>v1.31 之后不可用</td></tr><tr><td><strong>scaleIO</strong></td><td>ScaleIO 卷</td><td>v1.21 之后不可用</td></tr><tr><td><strong>storageos</strong></td><td>StorageOS 卷</td><td>v1.25 之后不可用</td></tr></tbody></table><h3 id="accessModes-访问模式">accessModes 访问模式</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#access-modes">官网文档:访问模式</a></p></li></ul><table><thead><tr><th>访问模式</th><th>说明</th><th>是否跨节点挂载</th><th>是否支持多 Pod 挂载</th><th>是否支持读写</th></tr></thead><tbody><tr><td><strong>ReadWriteOnce (RWO)</strong></td><td>卷可以被一个节点以读写方式挂载，同一节点内多个 Pod 可共享使用。</td><td>❌ 否</td><td>✅ 是（同一节点）</td><td>✅ 是</td></tr><tr><td><strong>ReadOnlyMany (ROX)</strong></td><td>卷可以被多个节点以只读方式挂载。</td><td>✅ 是</td><td>✅ 是</td><td>❌ 否（只读）</td></tr><tr><td><strong>ReadWriteMany (RWX)</strong></td><td>卷可以被多个节点以读写方式挂载。</td><td>✅ 是</td><td>✅ 是</td><td>✅ 是</td></tr><tr><td><strong>ReadWriteOncePod (RWOP)</strong></td><td>卷只能被单个 Pod 以读写方式挂载，确保集群中只有一个 Pod 使用该卷（v1.29+稳定）。</td><td>❌ 否</td><td>❌ 否（只能一个 Pod）</td><td>✅ 是</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>NFS 支持前三种访问模式，hostPath 只支持 ReadWriteOnce。</p></li></ul><h3 id="persistentVolumeReclaimPolicy-回收策略">persistentVolumeReclaimPolicy 回收策略</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#reclaim-policy">官方文档:回收策略</a></p></li></ul><table><thead><tr><th>回收策略</th><th>含义</th><th>回收行为</th><th>典型使用场景</th></tr></thead><tbody><tr><td><strong>Retain</strong></td><td><strong>保留</strong>：删除 PVC 后，PV 和后端存储仍然保留</td><td>手动回收，PVC 删除后 PV 状态为 <code>Released</code>，需要手动清理或重新绑定</td><td>重要数据，避免误删；如数据库数据盘</td></tr><tr><td><strong>Delete</strong></td><td><strong>删除</strong>：删除 PVC 后，PV 和后端存储都会被删除</td><td>自动回收，PVC 删除时自动删除 PV 和后端存储资源（如云盘）</td><td>临时数据、不重要的存储</td></tr><tr><td><strong>Recycle</strong></td><td><strong>回收</strong>：简单清空数据</td><td>自动执行 <code>rm -rf /thevolume/*</code>，然后 PV 变回 <code>Available</code> 状态</td><td>旧版本集群的小文件临时存储</td></tr></tbody></table><div class="warning"><ul class="lvl-1"><li class="lvl-2"><p><strong>注意</strong>: 创建 <strong>Recycle</strong> 的 PV 时，会提示如下内容</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: spec.persistentVolumeReclaimPolicy: The Recycle reclaim policy is deprecated. Instead, the recommended approach is to use dynamic provisioning.</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2"><p>意思就是 <strong>Recycle</strong> 策略已被弃用，建议使用<code>动态供应模式</code>。但<a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#reclaim-policy">官方文档</a>中却提示 <code>对于 Kubernetes 1.33 来说，只有 nfs 和 hostPath 卷类型支持回收（Recycle）。</code></p></li><li class="lvl-2"><p>本人在 Kubernetes 1.33.2 中测试，NFS 支持 Recycle，删除 PVC 后 PV 状态会变为 <strong>Available</strong></p></li></ul></div><h3 id="管理-PV">管理 PV</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl create -f pv-nfs.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">$ k get pv</span><br><span class="line">NAME        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">pv-nfs-1g   1Gi        RWO            Retain           Available                          &lt;<span class="built_in">unset</span>&gt;                          80s</span><br><span class="line">pv-nfs-2g   2Gi        RWX            Retain           Available                          &lt;<span class="built_in">unset</span>&gt;                          80s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">kubectl delete pv pv-nfs-1g</span><br><span class="line">k delete -f pv-nfs.yaml</span><br></pre></td></tr></table></figure><h2 id="PVC-示例">PVC 示例</h2><ul class="lvl-0"><li class="lvl-2"><p>Pod 通过 PVC 向 PV 申请存储空间，如果 PVC 一直无法匹配到 PV，则 PVC 处于 Pending 状态。</p></li><li class="lvl-2"><p>Pod 必须与 PVC 处于同一命名空间。</p></li><li class="lvl-2"><p>PVC 与 PV 是 1:1 的关系。一旦 PV 绑定到 PVC，则 PVC 状态变为 Bound。该 PV 将不再被其他 PVC 绑定。</p></li><li class="lvl-2"><p>PVC 与 PV 匹配的条件</p></li></ul><table><thead><tr><th>匹配条件</th><th>说明</th></tr></thead><tbody><tr><td><strong>容量</strong></td><td><strong>PVC 请求的容量 ≤ PV 提供的容量</strong>。PV 必须至少满足 PVC 的容量请求。</td></tr><tr><td><strong>访问模式</strong></td><td><strong>PV 支持 PVC 请求的访问模式</strong>。PVC 要求的所有访问模式，PV 都必须具备。例如：PVC 要求 <code>ReadWriteOnce</code>，PV 至少要支持 <code>ReadWriteOnce</code>。</td></tr><tr><td><strong>StorageClass</strong></td><td><strong>PVC 和 PV 的 <code>storageClassName</code> 必须一致</strong>。如果 PVC 指定了 <code>storageClassName</code>，只能绑定同名的 PV。</td></tr><tr><td><strong>Selector（可选）</strong></td><td>如果 PVC 有设置 <code>selector</code>（基于标签），PV 的标签也必须匹配。</td></tr></tbody></table><div class="tips"><p><em><strong>小贴士</strong></em></p><ul class="lvl-1"><li class="lvl-2">PV 中声明的 <code>accessModes</code> 仅作为与 PVC 的访问模式进行匹配，实际挂载到 Pod 后，不会限制 Pod 的读写访问</li></ul></div><ul class="lvl-0"><li class="lvl-2"><p>一个简单的 yaml</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pvc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mypvc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span>   <span class="comment"># 申请匹配的访问模式</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">500Mi</span>  <span class="comment"># 申请的容量，实际容量以匹配的 PV 为准</span></span><br><span class="line">  <span class="comment"># selector:         # 匹配的 PV 标签</span></span><br><span class="line">  <span class="comment">#   matchLabels:</span></span><br><span class="line">  <span class="comment">#     pv: nfs-pv1   # pv 的标签，创建 pv 时要指定</span></span><br></pre></td></tr></table></figure><h3 id="管理-PVC">管理 PVC</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 PVC</span></span><br><span class="line">kubectl apply -f pvc.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看PVC，此时看到 pv-nfs-1g 绑定了 PVC</span></span><br><span class="line">$ k get pv,pvc</span><br><span class="line">NAME                         CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM           STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">persistentvolume/pv-nfs-1g   1Gi        RWO            Retain           Available                                  &lt;<span class="built_in">unset</span>&gt;                          16s</span><br><span class="line">persistentvolume/pv-nfs-2g   2Gi        RWX            Retain           Bound       default/mypvc                  &lt;<span class="built_in">unset</span>&gt;                          16s</span><br><span class="line"></span><br><span class="line">NAME                          STATUS   VOLUME      CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE</span><br><span class="line">persistentvolumeclaim/mypvc   Bound    pv-nfs-2g   2Gi        RWX                           &lt;<span class="built_in">unset</span>&gt;                 9s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 PVC</span></span><br><span class="line">kubectl delete pvc mypvc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时再次查看 PV，pv-nfs-1g 状态变更为 Released，表示已经释放，但是不能再被其它 PVC 绑定了，只能删除重建了</span></span><br><span class="line">$ k get pv</span><br><span class="line">NAME        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM           STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">pv-nfs-1g   1Gi        RWO            Retain           Available                                              &lt;<span class="built_in">unset</span>&gt;                          18m</span><br><span class="line">pv-nfs-2g   2Gi        RWX            Retain           Released     default/mypvc                             &lt;<span class="built_in">unset</span>&gt;                          18m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 PV</span></span><br><span class="line">k delete pv pv-nfs-1g</span><br></pre></td></tr></table></figure><h2 id="Pod-绑定-PVC">Pod 绑定 PVC</h2><ul class="lvl-0"><li class="lvl-2"><p>这里以 nginx deployment 为例</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx-pvc-deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-pvc-deployment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span>                              <span class="comment"># 3个 pod会共享一个 PVC</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pvc</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pvc</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-storage</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span>  <span class="comment"># 挂载到 nginx 的默认网页目录</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-storage</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span>              <span class="comment"># 指定存储卷类型是 PVC</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">mypvc</span>                  <span class="comment"># 对应你创建的 PVC 名称</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>一个 PVC 对应一个 PV，但是一个 PVC 可以对应多个 Deployment 等控制器。下面我们就再创建一个 Deployment，将 相同的 PVC 挂载到容器中，并且每隔5秒修改一次 PVC 挂载的网页，并通过 nginx 容器查看结果</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># busybox-deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;while true; do echo $(date) &gt; /data/index.html; sleep 5; done&quot;</span>]</span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-volume</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">mypvc</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建后查看 pod ip</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ k get pod -o wide</span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE     IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">busybox-deployment-d7589665d-dx2rs      1/1     Running   0          2m59s   10.244.126.6     k8s-worker2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-pvc-deployment-775b8c4f8b-89cw7   1/1     Running   0          44s     10.244.126.8     k8s-worker2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-pvc-deployment-775b8c4f8b-fszlf   1/1     Running   0          44s     10.244.194.123   k8s-worker1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-pvc-deployment-775b8c4f8b-w9qkt   1/1     Running   0          44s     10.244.126.7     k8s-worker2   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>访问任意一个 nginx pod</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时会看到页面内容在变化</span></span><br><span class="line">watch -n 5 curl 10.244.194.123</span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p>为 pod 绑定 pvc时，每次都要先创建 pv 和 pvc，非常麻烦。有什么好的解决方案吗？</p><blockquote><p>使用 StorageClass 实现自动创建 PV，我们下文将介绍如何实现。</p></blockquote></li><li class="lvl-2"><p>如果 PVC 被 Pod 使用，则此时可以删除 PVC 吗？</p><blockquote><p>不可以，PVC 被 Pod 使用，此时只能等待 Pod 删除后才能删除 PVC。<br>若此时执行了删除 PVC 命令，终端会一直等待，ctrl + c 退出后再次查看 PVC 状态，会看到 PVC 状态为 Terminating。但此时不会影响存Pod对储卷的使用。<br>此时一旦Pod 删除，PVC 就会被删除。</p></blockquote></li><li class="lvl-2"><p>如果PV 被 PVC 使用，则此时可以删除 PV 吗？</p><blockquote><p>不可以，PV 被 PVC 使用，此时只能等待 PVC 删除后才能删除 PV。<br>若此时执行了删除 PV 命令，终端会一直等待，ctrl + c 退出后再次查看 PV 状态，会看到 PV 状态为 Terminating。但此时不会影响Pod对存储卷的使用。<br>此时一旦 PVC 删除，PV 就会被删除。</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 持久卷 PV 和 PVC ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/&quot;&gt;k8s PV/PVC 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文底层存储卷是 NFS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 存储卷 NFS</title>
    <link href="https://blog.hanqunfeng.com/2025/07/21/k8s-storage-nfs/"/>
    <id>https://blog.hanqunfeng.com/2025/07/21/k8s-storage-nfs/</id>
    <published>2025-07-21T15:34:15.000Z</published>
    <updated>2025-07-21T08:34:49.791Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 存储卷 NFS ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li></ul><span id="more"></span><h2 id="存储卷-NFS-介绍">存储卷 NFS 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>在 Kubernetes 中，NFS (Network File System) 是一种通过网络将远程存储挂载到 Pod 的方式。它允许多个 Pod 跨节点共享相同的存储目录，常用于 ReadWriteMany（RWX） 场景。</p></li><li class="lvl-2"><p>我们需要准备一个NFS 服务器，并配置 NFS 存储卷。具体可以参考 <a href="/2025/07/21/linux-nfs/" title="Linux 安装 NFS">Linux 安装 NFS</a></p></li><li class="lvl-2"><p>k8s中每个worker节点都需要安装 NFS 客户端，但是不需要挂载 NFS 存储卷，这个会在pod中进行。</p></li></ul><h2 id="示例">示例</h2><ul class="lvl-0"><li class="lvl-2"><p>一个使用 NFS 存储卷的 pod 示例</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nfs-direct-pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-direct-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;sleep 3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data</span>          <span class="comment"># 容器内挂载点</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-volume</span></span><br><span class="line">    <span class="attr">nfs:</span></span><br><span class="line">      <span class="attr">server:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.88</span>      <span class="comment"># NFS 服务端地址</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/nfs-server/data</span>    <span class="comment"># NFS 服务端共享目录</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">false</span>           <span class="comment"># 是否只读挂载，false 表示可读写</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建 Pod</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nfs-direct-pod.yaml</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看 Pod 挂载点</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看pod部署到哪个节点</span></span><br><span class="line">$ kubectl get pod nfs-direct-pod -o wide</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE   IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">nfs-direct-pod   1/1     Running   0          12m   10.244.194.115   k8s-worker1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 k8s-worker1 节点，查看 nfs 挂载点，也就是说 创建 pod时会自动在宿主机上挂载 nfs</span></span><br><span class="line">$ <span class="built_in">df</span> -t nfs4</span><br><span class="line">Filesystem                    1K-blocks    Used Available Use% Mounted on</span><br><span class="line">10.211.55.88:/nfs-server/data  42872832 3630080  39242752   9% /var/lib/kubelet/pods/e44786a9-fbd9-4ee8-bb28-84eb074fb7d9/volumes/kubernetes.io~nfs/nfs-volume</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod挂载的目录</span></span><br><span class="line">$ k <span class="built_in">exec</span> -it nfs-direct-pod -- <span class="built_in">df</span> -t nfs4</span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">10.211.55.88:/nfs-server/data</span><br><span class="line">                      42872832   3630080  39242752   8% /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向nfs挂载目录中写入数据</span></span><br><span class="line">k <span class="built_in">exec</span> -it nfs-direct-pod -- sh -c <span class="string">&#x27;echo &quot;hello world&quot; &gt; /data/test.txt&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除pod</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">k delete pod nfs-direct-pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次登录 宿主机节点，发现 nfs 挂载点也被卸载了，但是 nfs-server 中的文件仍然存在</span></span><br><span class="line">$ <span class="built_in">df</span> -t nfs4</span><br><span class="line"><span class="built_in">df</span>: no file systems processed</span><br></pre></td></tr></table></figure><h2 id="存储卷类型-emptyDir、hostPath、NFS-的对比表">存储卷类型 emptyDir、hostPath、NFS 的对比表</h2><table><thead><tr><th>特性</th><th><code>emptyDir</code></th><th><code>hostPath</code></th><th><code>nfs</code></th></tr></thead><tbody><tr><td><strong>数据生命周期</strong></td><td>Pod 生命周期内有效，Pod 删除数据丢失</td><td>绑定节点上的目录，Pod 删了数据仍保留</td><td>存储在远程 NFS Server，Pod 删除数据不丢失</td></tr><tr><td><strong>共享范围</strong></td><td><strong>同一个 Pod 的多个容器可共享</strong></td><td>同一节点上多个 Pod 可共享</td><td>集群内多个 Pod 跨节点可共享</td></tr><tr><td><strong>持久化能力</strong></td><td>❌ 不持久化，随 Pod 生命周期结束消失</td><td>✅ 持久化，只要宿主机目录存在数据就在</td><td>✅ 持久化，NFS 存储独立于 Pod 存在</td></tr><tr><td><strong>跨节点共享</strong></td><td>❌ 不能</td><td>❌ 不能</td><td>✅ 支持跨节点共享</td></tr><tr><td><strong>适用场景</strong></td><td>临时缓存、进程间共享数据</td><td>宿主机特定目录挂载，日志存储、宿主机插件对接</td><td>多副本服务共享存储、持久化数据、共享配置文件</td></tr><tr><td><strong>数据安全性</strong></td><td>随 Pod 删除，<strong>数据易丢失</strong></td><td>容器有权限可修改宿主机文件，存在风险</td><td>依赖 NFS Server 稳定性，配置不当可能被所有节点读写</td></tr><tr><td><strong>典型用例</strong></td><td>Redis 缓存目录、Sidecar 容器共享日志</td><td>挂载宿主机 docker.sock、宿主机日志目录</td><td>跨 Pod 文件共享、Web 静态资源、Tensorflow 多副本训练共享数据</td></tr></tbody></table><h2 id="为什么已经有-NFS，还推荐用-PV-PVC？">为什么已经有 NFS，还推荐用 PV/PVC？</h2><ul class="lvl-0"><li class="lvl-2"><p>✅ 简短回答：PV/PVC 是对底层存储（如 NFS）的抽象和标准化管理。</p></li></ul><table><thead><tr><th>原因</th><th>说明</th></tr></thead><tbody><tr><td>✅ <strong>Kubernetes 标准资源</strong></td><td>用 PVC 声明存储需求，由 K8s 统一调度和管理。</td></tr><tr><td>✅ <strong>存储与 Pod 解耦</strong></td><td>Pod 专注于应用逻辑，PVC 专注于声明“我要一个 10Gi 的 RWX 存储”，背后是 NFS、Ceph 还是别的，开发者无需关心。</td></tr><tr><td>✅ <strong>动态供应</strong></td><td>搭配 StorageClass 可以实现 <strong>自动创建 PV</strong>，不需要手动维护 PV。</td></tr><tr><td>✅ <strong>生命周期管理</strong></td><td>PVC 被删除时可触发 PV 回收、保留或删除策略（<code>Retain</code>、<code>Recycle</code>、<code>Delete</code>）。直接挂载 NFS 没有这些机制。</td></tr><tr><td>✅ <strong>权限隔离</strong></td><td>PV/PVC 可以通过 <code>accessModes</code> 控制访问级别，比如只允许特定 Pod 访问。直接挂载 NFS 容易权限混乱。</td></tr><tr><td>✅ <strong>更好兼容性</strong></td><td>某些工作负载（如 StatefulSet）<strong>只能用 PVC</strong>，不支持直接 <code>nfs</code> 卷。</td></tr><tr><td>✅ <strong>更灵活的切换存储方案</strong></td><td>后期如果换成 Ceph、EBS、GlusterFS，只需改 PV/PVC，不需要改 Pod 配置。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 存储卷 NFS ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>Linux 安装 NFS</title>
    <link href="https://blog.hanqunfeng.com/2025/07/21/linux-nfs/"/>
    <id>https://blog.hanqunfeng.com/2025/07/21/linux-nfs/</id>
    <published>2025-07-21T15:34:05.000Z</published>
    <updated>2025-07-21T07:58:09.351Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote % --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 linux 下 nfs 文件系统的安装与使用</p></li><li class="lvl-2"><p>本文基于<code>CentOS8(x86_64)</code></p></li></ul><span id="more"></span><h2 id="NFS-简介">NFS 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>NFS（网络文件系统，Network File System）是一个通过网络共享文件的协议，允许不同服务器或客户端像挂载本地磁盘一样访问远端的共享文件目录。</p></li></ul><h2 id="准备一台服务器">准备一台服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 hostname</span></span><br><span class="line">hostnamectl set-hostname nfs-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网卡</span></span><br><span class="line">ip a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置IP 分配方式，manual: 手动指定IP，auto: DHCP自动获取，disabled: 关闭IP</span></span><br><span class="line">nmcli con mod enp0s5 ipv4.method manual</span><br><span class="line"><span class="comment"># 设置 IP</span></span><br><span class="line">nmcli con mod enp0s5 ipv4.addresses 10.211.55.88/24</span><br><span class="line"><span class="comment"># 设置 gateway</span></span><br><span class="line">nmcli con mod enp0s5 ipv4.gateway 10.211.55.1</span><br><span class="line"><span class="comment"># 设置 dns</span></span><br><span class="line">nmcli con mod enp0s5 ipv4.dns <span class="string">&quot;10.211.55.1,8.8.8.8&quot;</span></span><br><span class="line"><span class="comment"># 重新启动网卡</span></span><br><span class="line">nmcli con up enp0s5</span><br></pre></td></tr></table></figure><h2 id="NFS-安装：服务端">NFS 安装：服务端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 nfs-utils 和 rpcbind</span></span><br><span class="line">dnf install rpcbind nfs-utils -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 nfs-server 存储目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /nfs-server/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 nfs-server，可以添加多个目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/nfs-server/data *(insecure,rw,sync,no_root_squash,no_all_squash)&quot;</span> &gt;&gt; /etc/exports</span><br><span class="line"><span class="comment">## 配置项说明</span></span><br><span class="line"><span class="comment"># * ：允许所有客户端访问，也可以指定具体的客户端 IP 地址，比如：192.168.0.0/24(rw,sync,no_root_squash,no_all_squash)</span></span><br><span class="line"><span class="comment"># insecure ：允许任意端口（兼容性好,支持k8s），默认值是 secure：只允许 1024 以下端口，适合传统服务器</span></span><br><span class="line"><span class="comment"># rw ：读写权限，ro：只读权限</span></span><br><span class="line"><span class="comment"># sync ：同步模式，强一致性，async：异步模式，性能高，但存在丢数据风险</span></span><br><span class="line"><span class="comment"># no_root_squash ：允许 root 用户访问，默认情况下，root 用户访问时会被转换成 nobody 用户</span></span><br><span class="line"><span class="comment"># no_all_squash ：允许所有用户访问，默认情况下，所有用户访问时会被转换成 nobody 用户，默认就是这个，可以省略。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 rpcbind、nfs 服务</span></span><br><span class="line">systemctl start rpcbind &amp;&amp; systemctl start nfs-server</span><br><span class="line"><span class="comment"># 开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> rpcbind &amp;&amp; systemctl <span class="built_in">enable</span> nfs-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件 /etc/exports，需要重载 nfs 配置</span></span><br><span class="line">systemctl reload nfs-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 nfs 服务状态</span></span><br><span class="line">systemctl status nfs-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 nfs 服务监听的端口，默认为 2049</span></span><br><span class="line">$ rpcinfo -p | grep nfs</span><br><span class="line">    100003    3   tcp   2049  nfs</span><br><span class="line">    100003    4   tcp   2049  nfs</span><br><span class="line">    100227    3   tcp   2049  nfs_acl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查导出的共享目录</span></span><br><span class="line">$ exportfs -v</span><br><span class="line">/nfs-server/data</span><br><span class="line">                &lt;world&gt;(<span class="built_in">sync</span>,wdelay,hide,no_subtree_check,sec=sys,rw,insecure,no_root_squash,no_all_squash)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="开放端口">开放端口</h3><ul class="lvl-0"><li class="lvl-2"><p>查看当前使用的端口</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ rpcinfo -p 10.211.55.88</span><br><span class="line">   program vers proto   port  service</span><br><span class="line">    100000    4   tcp    111  portmapper</span><br><span class="line">    100000    3   tcp    111  portmapper</span><br><span class="line">    100000    2   tcp    111  portmapper</span><br><span class="line">    100000    4   udp    111  portmapper</span><br><span class="line">    100000    3   udp    111  portmapper</span><br><span class="line">    100000    2   udp    111  portmapper</span><br><span class="line">    100024    1   udp  36578  status</span><br><span class="line">    100024    1   tcp  46973  status</span><br><span class="line">    100005    1   udp  20048  mountd</span><br><span class="line">    100005    1   tcp  20048  mountd</span><br><span class="line">    100005    2   udp  20048  mountd</span><br><span class="line">    100005    2   tcp  20048  mountd</span><br><span class="line">    100005    3   udp  20048  mountd</span><br><span class="line">    100005    3   tcp  20048  mountd</span><br><span class="line">    100003    3   tcp   2049  nfs</span><br><span class="line">    100003    4   tcp   2049  nfs</span><br><span class="line">    100227    3   tcp   2049  nfs_acl</span><br><span class="line">    100021    1   udp  36529  nlockmgr</span><br><span class="line">    100021    3   udp  36529  nlockmgr</span><br><span class="line">    100021    4   udp  36529  nlockmgr</span><br><span class="line">    100021    1   tcp  45917  nlockmgr</span><br><span class="line">    100021    3   tcp  45917  nlockmgr</span><br><span class="line">    100021    4   tcp  45917  nlockmgr</span><br></pre></td></tr></table></figure><table><thead><tr><th>Program (编号)</th><th>服务名称</th><th>用途</th><th>端口</th><th>说明</th></tr></thead><tbody><tr><td><code>100000</code></td><td>portmapper</td><td>RPC 服务注册表</td><td>111/tcp, 111/udp</td><td><strong>必须开放</strong>，客户端通过它查找其它服务端口</td></tr><tr><td><code>100024</code></td><td>status (rpc.statd)</td><td>文件锁定状态管理</td><td>36578/udp, 46973/tcp</td><td>常配合 nlockmgr 使用，非必需</td></tr><tr><td><code>100005</code></td><td>mountd</td><td>挂载服务</td><td>20048/tcp, 20048/udp</td><td><strong>挂载时必需</strong></td></tr><tr><td><code>100003</code></td><td>nfs</td><td>NFS 主服务</td><td>2049/tcp</td><td><strong>核心服务，必需</strong></td></tr><tr><td><code>100227</code></td><td>nfs_acl</td><td>NFS 的 ACL 权限控制</td><td>2049/tcp</td><td>通常与 nfs 一起</td></tr><tr><td><code>100021</code></td><td>nlockmgr</td><td>文件锁管理</td><td>36529/udp, 45917/tcp</td><td>Stateful 应用涉及文件锁时需要</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>最小端口要求（基本挂载用）</p></li></ul><table><thead><tr><th>场景</th><th>需要开放的端口</th></tr></thead><tbody><tr><td>✅ <strong>基本 NFS 挂载读写</strong></td><td><code>2049/tcp</code> + <code>111/tcp/udp</code></td></tr><tr><td>✅ <strong>容器或 K8s 挂载</strong></td><td>同上，一般还推荐 <code>20048/tcp/udp</code></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>开放必须端口</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=2049/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=111/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=111/udp</span><br><span class="line">firewall-cmd --permanent --add-port=20048/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=20048/udp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="NFS-安装：客户端">NFS 安装：客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 nfs-utils 和 rpcbind，安装后不需要启动 nfs-server 服务，只需要启动 rpcbind 服务，所有客户端都要运行</span></span><br><span class="line"><span class="built_in">sudo</span> dnf install rpcbind nfs-utils -y</span><br><span class="line"><span class="built_in">sudo</span> systemctl start rpcbind &amp;&amp; systemctl <span class="built_in">enable</span> rpcbind</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务器的共享资源列表</span></span><br><span class="line"><span class="comment"># showmount -e &lt;nfs-server-ip&gt;</span></span><br><span class="line">$ showmount -e 10.211.55.88</span><br><span class="line">Export list <span class="keyword">for</span> 10.211.55.88:</span><br><span class="line">/nfs-server/data *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 客户端挂载目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /nfs/data</span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">mount -t nfs 10.211.55.88:/nfs-server/data /nfs/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看挂载点</span></span><br><span class="line">$ mount | grep nfs/data</span><br><span class="line">10.211.55.88:/nfs-server/data on /nfs/data <span class="built_in">type</span> nfs4 (rw,relatime,vers=4.2,rsize=524288,wsize=524288,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,clientaddr=10.211.55.11,local_lock=none,addr=10.211.55.88)</span><br><span class="line"><span class="comment"># 查看挂载点信息，这种方式更友好</span></span><br><span class="line">$ <span class="built_in">df</span> -t nfs4</span><br><span class="line">Filesystem                    1K-blocks    Used Available Use% Mounted on</span><br><span class="line">10.211.55.88:/nfs-server/data  42872832 3630080  39242752   9% /nfs/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置自动挂载</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;10.211.55.88:/nfs-server/data /nfs/data nfs defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class="line"><span class="comment"># 根据 /etc/fstab 文件的配置，尝试挂载所有未挂载的文件系统。修改 /etc/fstab 后执行 mount -a 立即生效</span></span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>客户端挂载的目录不能删除，需要先卸载</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -f 强制卸载</span></span><br><span class="line">umount -f /nfs/data</span><br><span class="line"></span><br><span class="line">vim /etc/fstab</span><br><span class="line"><span class="comment"># 删除或注释掉对应的 NFS 挂载行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /nfs/data</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 linux 下 nfs 文件系统的安装与使用&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文基于&lt;code&gt;CentOS8(x86_64)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="nfs" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/linux/nfs/"/>
    
    
    <category term="linux" scheme="https://blog.hanqunfeng.com/tags/linux/"/>
    
    <category term="nfs" scheme="https://blog.hanqunfeng.com/tags/nfs/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 存储卷 hostPath</title>
    <link href="https://blog.hanqunfeng.com/2025/07/21/k8s-storage-hostpath/"/>
    <id>https://blog.hanqunfeng.com/2025/07/21/k8s-storage-hostpath/</id>
    <published>2025-07-21T15:33:05.000Z</published>
    <updated>2025-07-21T08:25:15.741Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 存储卷 hostPath ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li></ul><span id="more"></span><h2 id="存储卷-hostPath-介绍">存储卷 hostPath 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>hostPath 是一种直接把 Node 节点本地文件或目录 挂载到 Pod 容器里的存储卷。</p></li><li class="lvl-2"><p>容易破坏节点环境，不建议生产使用</p></li><li class="lvl-2"><p>同一个 Deployment 的多个 Pod 被调度到同一个节点，并且它们的 hostPath 配置指向相同的宿主机路径，这些 Pod 之间是可以共享该目录中文件的。</p></li><li class="lvl-2"><p>典型使用场景</p></li></ul><table><thead><tr><th>场景</th><th>示例</th></tr></thead><tbody><tr><td>日志收集</td><td>挂载 <code>/var/log</code> 到 Pod 内部</td></tr><tr><td>挂载宿主机配置文件</td><td>如挂载 <code>/etc/hosts</code>、<code>/etc/localtime</code></td></tr><tr><td>使用宿主机 docker.sock</td><td>挂载 <code>/var/run/docker.sock</code> 运行 Docker-in-Docker</td></tr><tr><td>存储调试临时文件</td><td>Pod 调试时访问宿主机特定目录</td></tr></tbody></table><h2 id="示例">示例</h2><ul class="lvl-0"><li class="lvl-2"><p>Pod 内部 /mnt/hostdata 映射到宿主机 /data 目录</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hostpath-example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;sleep 3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span>                   <span class="comment"># 存储卷挂载点</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/mnt/hostdata</span>      <span class="comment"># 挂载点路径，挂载到容器的 /mnt/hostdata 目录</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">myvolume</span>                <span class="comment"># 存储卷名称 ，与 volumes 中定义的 volume 配置名称一致</span></span><br><span class="line">  <span class="attr">volumes:</span>                          <span class="comment"># 存储卷声明</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myvolume</span>                  <span class="comment"># 存储卷名称</span></span><br><span class="line">    <span class="attr">hostPath:</span>                       <span class="comment"># 存储卷类型，这里是 hostPath</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/data</span>                   <span class="comment"># 主机目录</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Directory</span>               <span class="comment"># 可选字段，主要用于挂载前验证</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>hostPath.type</code> 可以配置的值如下，默认为 空。</p></li></ul><table><thead><tr><th>type</th><th>含义</th></tr></thead><tbody><tr><td><code>DirectoryOrCreate</code></td><td>如果 <code>/data</code> 不存在则自动创建 ，权限为 0755</td></tr><tr><td><code>Directory</code></td><td>必须存在且为目录</td></tr><tr><td><code>File</code></td><td>必须存在且为文件</td></tr><tr><td><code>Socket</code></td><td>必须是 socket</td></tr><tr><td><code>CharDevice</code></td><td>字符设备</td></tr><tr><td><code>BlockDevice</code></td><td>块设备</td></tr><tr><td><code>FileOrCreate</code></td><td>不存在则自动创建空文件，权限设置为 0644</td></tr><tr><td><code>不设置</code></td><td>默认值是空，主机上的路径无论是文件、目录、甚至不存在，都会直接挂载 ,容易引起预期之外的挂载问题</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>Kubernetes 在删除 Pod 时，不会删除 hostPath 所挂载的宿主机目录或文件</p></li></ul><table><thead><tr><th>存储卷类型</th><th>删除 Pod 后目录会被删除吗？</th><th>说明</th></tr></thead><tbody><tr><td><code>emptyDir</code></td><td>✅ <strong>会被删除</strong></td><td>临时目录，Pod 生命周期结束自动清理</td></tr><tr><td><code>hostPath</code></td><td>❌ <strong>不会删除</strong></td><td>宿主机路径独立于 Pod 生命周期，<strong>不会清理</strong></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 存储卷 hostPath ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 存储卷 emptyDir</title>
    <link href="https://blog.hanqunfeng.com/2025/07/21/k8s-storage-emptydir/"/>
    <id>https://blog.hanqunfeng.com/2025/07/21/k8s-storage-emptydir/</id>
    <published>2025-07-21T15:30:05.000Z</published>
    <updated>2025-07-21T03:30:08.434Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 存储卷 emptyDir ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li></ul><span id="more"></span><h2 id="存储卷-emptyDir-介绍">存储卷 emptyDir 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>emptyDir 是 Kubernetes 中最简单的一种 Pod 级别的临时存储卷。它的核心特点是：Pod 生命周期内共享临时存储，Pod 删除后数据自动丢弃。</p></li><li class="lvl-2"><p>同一个 Pod 内的多个容器可以通过 emptyDir 共享数据。跨 Pod 不共享，适用于临时数据。</p></li><li class="lvl-2"><p>emptyDir 只能挂载目录。</p></li></ul><h2 id="示例">示例</h2><ul class="lvl-0"><li class="lvl-2"><p>两个容器 app 和 sidecar 通过 /data 共享一个 emptyDir 卷。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shared-emptydir-pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">shared-emptydir-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.sto:</span> <span class="string">emptydir</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello &gt; /data1/hello; sleep 3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span>               <span class="comment"># 存储卷挂载点</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span>         <span class="comment"># 挂载点名称，与下面 volumes 中定义的 volume 名称一致</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data1</span>          <span class="comment"># 挂载点路径，挂载到容器的 /data1 目录</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;sleep 3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span>               <span class="comment"># 存储卷挂载点</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span>         <span class="comment"># 挂载点名称，与上面容器中的 volume 配置名称一致</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data2</span>         <span class="comment"># 挂载点路径，挂载到容器的 /data2 目录</span></span><br><span class="line">  <span class="attr">volumes:</span>                      <span class="comment"># 存储卷声明</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span>           <span class="comment"># 存储卷名称</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;                <span class="comment"># 声明为 emptyDir 存储卷</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">k apply -f shared-emptydir-pod.yaml</span><br><span class="line"><span class="comment"># 查看pod所在节点</span></span><br><span class="line">$ k get pod -l app.sto=emptydir</span><br><span class="line">NAME                  READY   STATUS    RESTARTS   AGE   IP              NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">shared-emptydir-pod   2/2     Running   0          22m   10.244.126.59   k8s-worker2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="comment"># 查看 pod-uid</span></span><br><span class="line">$ kubectl get pod shared-emptydir-pod -o jsonpath=<span class="string">&#x27;&#123;.metadata.uid&#125;&#x27;</span></span><br><span class="line">d597b4d7-e6b6-4522-887e-73d3f4c01006</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>emptyDir 存储卷 默认使用节点本地磁盘，路径为 <code>/var/lib/kubelet/pods/&lt;pod-uid&gt;/volumes/kubernetes.io~empty-dir/&lt;volume-name&gt;</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录 k8s-worker2 节点</span></span><br><span class="line"><span class="built_in">export</span> POD_UID=d597b4d7-e6b6-4522-887e-73d3f4c01006</span><br><span class="line"><span class="built_in">export</span> POD_UID=6ea6636c-4a24-4dc5-af2a-2448825913b6</span><br><span class="line"><span class="built_in">export</span> VOLUME_NAME=shared-data</span><br><span class="line"><span class="built_in">cd</span> /var/lib/kubelet/pods/<span class="variable">$POD_UID</span>/volumes/kubernetes.io~empty-dir/<span class="variable">$VOLUME_NAME</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">hello</span><br><span class="line">$ <span class="built_in">cat</span> hello</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>进入容器查看存储卷内容</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it shared-emptydir-pod -c app -- <span class="built_in">cat</span> /data1/hello</span><br><span class="line">Hello</span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it shared-emptydir-pod -c sidecar -- <span class="built_in">cat</span> /data2/hello</span><br><span class="line">Hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改内容，实际上在容器内部和外部都可以修改存储卷内容，修改后立刻生效</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it shared-emptydir-pod -c sidecar -- sh -c <span class="string">&quot;echo &#x27;Hello World&#x27; &gt; /data2/hello&quot;</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it shared-emptydir-pod -c app -- <span class="built_in">cat</span> /data1/hello</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除POD后emptydir存储卷会立刻删除</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod shared-emptydir-pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 k8s-worker2 节点查看 emptydir 存储卷</span></span><br><span class="line">$ <span class="built_in">ls</span> /var/lib/kubelet/pods/<span class="variable">$POD_UID</span></span><br><span class="line"><span class="built_in">ls</span>: cannot access <span class="string">&#x27;/var/lib/kubelet/pods/d597b4d7-e6b6-4522-887e-73d3f4c01006&#x27;</span>: No such file or directory</span><br></pre></td></tr></table></figure><h2 id="将-emptydir-存储卷改用-内存-存储">将 emptydir 存储卷改用 内存 存储</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">emptyDir:</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">Memory</span>        <span class="comment"># 使用 内存 存储（tmpfs），适合高 IO 临时缓存</span></span><br><span class="line">  <span class="attr">sizeLimit:</span> <span class="string">512Mi</span>      <span class="comment"># 限制存储大小</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这里要注意，即使这里使用内存存储，但是 <code>/var/lib/kubelet/pods/&lt;pod-uid&gt;/volumes/kubernetes.io~empty-dir/&lt;volume-name&gt;</code> 依然存在，但它挂载的是 tmpfs 文件系统</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录pod所在节点查看挂载点</span></span><br><span class="line">$ mount | grep <span class="variable">$POD_UID</span></span><br><span class="line">tmpfs on /var/lib/kubelet/pods/6ea6636c-4a24-4dc5-af2a-2448825913b6/volumes/kubernetes.io~empty-dir/shared-data <span class="built_in">type</span> tmpfs (rw,relatime,size=524288k)</span><br><span class="line">tmpfs on /var/lib/kubelet/pods/6ea6636c-4a24-4dc5-af2a-2448825913b6/volumes/kubernetes.io~projected/kube-api-access-5nk7d <span class="built_in">type</span> tmpfs (rw,relatime,size=3903212k)</span><br></pre></td></tr></table></figure><table><thead><tr><th>卷类型</th><th>来源</th><th>挂载路径</th><th>作用</th></tr></thead><tbody><tr><td>emptyDir</td><td>你配置的</td><td><code>/data1</code>, <code>/data2</code></td><td>Pod 内部容器共享临时内存存储</td></tr><tr><td>projected</td><td>系统自动</td><td><code>/var/run/secrets/kubernetes.io/serviceaccount/</code></td><td>挂载 serviceaccount token，CA 证书</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>查看容器内挂载点</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> shared-emptydir-pod -c app -- mount | grep /data1</span><br><span class="line">tmpfs on /data1 <span class="built_in">type</span> tmpfs (rw,relatime,size=524288k)</span><br><span class="line">$ kubectl <span class="built_in">exec</span> shared-emptydir-pod -c app -- mount | grep serviceaccount</span><br><span class="line">tmpfs on /var/run/secrets/kubernetes.io/serviceaccount <span class="built_in">type</span> tmpfs (ro,relatime,size=3903212k)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 存储卷 emptyDir ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 Statefulset</title>
    <link href="https://blog.hanqunfeng.com/2025/07/20/k8s-statefulset/"/>
    <id>https://blog.hanqunfeng.com/2025/07/20/k8s-statefulset/</id>
    <published>2025-07-20T15:30:05.000Z</published>
    <updated>2025-07-22T08:48:12.925Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 Statefulset ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/statefulset/">k8s Statefulset 介绍</a></p></li></ul><span id="more"></span><h2 id="Statefulset-介绍">Statefulset 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>Statefulset(缩写为 sts) 是 K8S 官方提供的一种控制器，用于管理有状态应用。例如，数据库应用，消息队列，等等。</p></li><li class="lvl-2"><p>Statefulset(有状态) 与 Deployment(无状态) 的区别是：</p><ul class="lvl-2"><li class="lvl-4">Statefulset 创建的 Pod 会有相同的名称，并且会分配相同的持久卷。</li><li class="lvl-4">Statefulset 创建的 Pod 使用 Headless Service(无头服务，没有ClusterIP)进行通信。</li></ul></li></ul><h2 id="Statefulset-管理">Statefulset 管理</h2><h3 id="Statefulset-创建">Statefulset 创建</h3><ul class="lvl-0"><li class="lvl-2"><p>Statefulset 只能 通过 <code>yaml</code> 创建，不支持 <code>create</code> 创建</p></li><li class="lvl-2"><p>一个简单的 <code>redis-statefulset.yaml</code> 文件说明</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>                      <span class="comment"># api版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span>                       <span class="comment"># 资源类型</span></span><br><span class="line"><span class="attr">metadata:</span>                           <span class="comment"># 元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-svc</span>                   <span class="comment"># service名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">sts-ns</span></span><br><span class="line"><span class="attr">spec:</span>                               <span class="comment"># 配置</span></span><br><span class="line">  <span class="attr">ports:</span>                            <span class="comment"># 端口</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span>                      <span class="comment"># 集群内访问端口，service的端口，一般配置为与 targetPort 一致，但是非必须</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span>                   <span class="comment"># 协议</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">6379</span>                <span class="comment"># 容器端口, pod的端口，这个必须与实际容器端口一致</span></span><br><span class="line">  <span class="attr">selector:</span>                         <span class="comment"># 选择器</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span>                      <span class="comment"># pod的标签，即匹配pod的标签 app=redis</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span>                   <span class="comment"># 集群IP设置为None，即为“Headless Service”</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span>                   <span class="comment"># 服务类型，默认为ClusterIP</span></span><br><span class="line"><span class="string">---</span>                                 <span class="comment"># 分割线</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span>                  <span class="comment"># 指定使用的 API 版本，这里是 apps/v1，适用于 StatefulSet 资源</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span>                    <span class="comment"># Kubernetes 资源类型，这里是部署（StatefulSet）</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-sts</span>                    <span class="comment"># 资源名称，必须唯一（在同一命名空间下）</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">sts-ns</span></span><br><span class="line"><span class="attr">spec:</span>                                <span class="comment"># 配置项</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span>           <span class="comment"># 保留的历史版本数，默认值为 10，Deployment 和 StatefulSet 都有这个配置项。回滚时有用。</span></span><br><span class="line">  <span class="attr">selector:</span>                          <span class="comment"># 选择器，指定要管理的 Pod</span></span><br><span class="line">    <span class="attr">matchLabels:</span>                     <span class="comment"># 标签选择器</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span>                     <span class="comment"># 选择器，指定 StatefulSet 管理哪些 Pod（标签必须与 template 中匹配）</span></span><br><span class="line">  <span class="attr">updateStrategy:</span>                    <span class="comment"># 更新策略，这里要注意这个更新策略与Deployment的属性名字不一样</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span>              <span class="comment"># 1.RollingUpdate：这是默认的更新策略。使用 RollingUpdate 更新策略时，在更新 StatefulSet 模板后， 老的 StatefulSet Pod 将被终止，并且将以受控方式自动创建新的 StatefulSet Pod。 更新期间，最多只能有 StatefulSet 的一个 Pod 运行于每个节点上。</span></span><br><span class="line">                                     <span class="comment"># 2.OnDelete：使用 OnDelete 更新策略时，在更新 StatefulSet 模板后，只有当你手动删除老的 StatefulSet Pod 之后，新的 StatefulSet Pod 才会被自动创建。</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span>                   <span class="comment"># 滚动升级的配置</span></span><br><span class="line">      <span class="attr">partition:</span> <span class="number">0</span>                    <span class="comment"># 用于控制从第几个 Pod 开始滚动升级</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">redis-svc</span>             <span class="comment"># 服务名称,sts对象使用无头服务，这个是必填项</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span>                        <span class="comment"># 副本数，默认是 1</span></span><br><span class="line">  <span class="attr">template:</span>                          <span class="comment"># 模板，定义 Pod 的内容，具体可以参考 Pod 的配置</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span>                   <span class="comment"># Pod 的标签，必须与 selector 中的 matchLabels 一致</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">redis:6.2</span>             <span class="comment"># 容器使用的镜像，这里是官方的 redis 镜像</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">redis</span>                  <span class="comment"># 容器的名称，实际的名称为 sts-redis-&lt;number&gt;，从 0 开始递增</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>执行创建</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建命名空间</span></span><br><span class="line">kubectl create namespace sts-ns</span><br><span class="line"><span class="comment"># 创建 StatefulSet</span></span><br><span class="line">kubectl apply -f redis-statefulset.yaml</span><br></pre></td></tr></table></figure><h3 id="查看-Statefulset">查看 Statefulset</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ k get all -n sts-ns</span><br><span class="line">NAME              READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/redis-sts-0   1/1     Running   0          40s</span><br><span class="line">pod/redis-sts-1   1/1     Running   0          24s</span><br><span class="line"></span><br><span class="line">NAME                TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">service/redis-svc   ClusterIP   None         &lt;none&gt;        6379/TCP   40s</span><br><span class="line"></span><br><span class="line">NAME                         READY   AGE</span><br><span class="line">statefulset.apps/redis-sts   2/2     40s</span><br></pre></td></tr></table></figure><h3 id="访问pod中的redis服务">访问pod中的redis服务</h3><ul class="lvl-0"><li class="lvl-2"><p>既然是Headless Service，就只能在集群内部访问</p></li><li class="lvl-2"><p>在相同的 namespace 中，可以通过 <code>serviceName</code> 直接访问，访问指定的 pod，可以通过 <code>&lt;pod-name&gt;.&lt;service-name&gt;</code></p></li><li class="lvl-2"><p>在不同的 namespace 中，可以通过 <code>&lt;serviceName&gt;.&lt;namespace&gt;</code> 或者 <code>&lt;serviceName&gt;.&lt;namespace&gt;.svc.cluster.local</code> 访问，访问指定的 pod，可以通过 <code>&lt;pod-name&gt;.&lt;service-name&gt;.&lt;namespace&gt;.svc.cluster.local</code> 访问，因为 pod-name 是固定且唯一的</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ k <span class="built_in">exec</span> -it pod/redis-sts-0 -n sts-ns -- getent hosts redis-svc</span><br><span class="line">10.244.126.55   redis-svc.sts-ns.svc.cluster.local</span><br><span class="line">10.244.194.110  redis-svc.sts-ns.svc.cluster.local</span><br><span class="line"></span><br><span class="line">$ k <span class="built_in">exec</span> -it pod/redis-sts-0 -n sts-ns -- getent hosts redis-sts-1.redis-svc</span><br><span class="line">10.244.126.55   redis-sts-1.redis-svc.sts-ns.svc.cluster.local</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在集群外部访问，需要创建一个新的 Service，类型为 NodePort 或者 LoadBalancer，将redis服务暴露出去</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>                      <span class="comment"># api版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span>                       <span class="comment"># 资源类型</span></span><br><span class="line"><span class="attr">metadata:</span>                           <span class="comment"># 元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-svc-out</span>               <span class="comment"># service名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">sts-ns</span></span><br><span class="line"><span class="attr">spec:</span>                               <span class="comment"># 配置</span></span><br><span class="line">  <span class="attr">ports:</span>                            <span class="comment"># 端口</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span>                      <span class="comment"># 集群内访问端口，service的端口，一般配置为与 targetPort 一致，但是非必须</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span>                   <span class="comment"># 协议</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">6379</span>                <span class="comment"># 容器端口, pod的端口，这个必须与实际容器端口一致</span></span><br><span class="line">  <span class="attr">selector:</span>                         <span class="comment"># 选择器</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span>                      <span class="comment"># pod的标签，即匹配pod的标签 app=redis</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span>                <span class="comment"># 负载均衡</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>执行</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">$ k create -f redis-svc-out.yaml</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">$ k get svc -n sts-ns</span><br><span class="line">NAME            TYPE           CLUSTER-IP    EXTERNAL-IP     PORT(S)          AGE</span><br><span class="line">redis-svc       ClusterIP      None          &lt;none&gt;          6379/TCP         70m</span><br><span class="line">redis-svc-out   LoadBalancer   10.96.21.96   10.211.55.202   6379:31806/TCP   54m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在集群外的机器上访问 redis，每次连接会轮询访问各个pod</span></span><br><span class="line">$ redis-cli -h 10.211.55.202 info server | grep redis_version</span><br><span class="line">redis_version:8.0.3</span><br></pre></td></tr></table></figure><h3 id="查看-Statefulset-详情">查看 Statefulset 详情</h3><ul class="lvl-0"><li class="lvl-2"><p>当 Statefulset 运行错误时，可以通过该命令查看 Statefulset 的详情，找到错误原因</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe sts &lt;sts-name&gt;</span><br><span class="line">kubectl describe sts &lt;sts-name&gt; -n &lt;namespace-name&gt;</span><br></pre></td></tr></table></figure><h3 id="删除-Statefulset">删除 Statefulset</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete sts &lt;sts-name&gt;</span><br><span class="line">kubectl delete sts &lt;sts-name&gt; -n &lt;namespace-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 yaml 文件删除</span></span><br><span class="line">kubectl delete -f &lt;yaml-file&gt;</span><br></pre></td></tr></table></figure><h3 id="查看-Statefulset-日志">查看 Statefulset 日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs sts/&lt;sts-name&gt;</span><br><span class="line">kubectl logs sts/&lt;sts-name&gt; -n &lt;namespace-name&gt;</span><br></pre></td></tr></table></figure><h3 id="滚动升级与回滚-Statefulset">滚动升级与回滚 Statefulset</h3><ul class="lvl-0"><li class="lvl-2"><p>对 <code>RollingUpdate</code> 类型的 <code>Statefulset</code> 的 <code>.spec.template</code> 的任何更新都将触发滚动更新。</p></li><li class="lvl-2"><p>我们修改过 <code>Statefulset</code> 的 <code>.spec.template</code>，并保存后，重新运行 <code>kubectl apply -f &lt;yaml-file&gt;</code>即可触发滚动升级。</p></li><li class="lvl-2"><p>如果只是更新容器的镜像，也可以通过如下命令触发滚动升级</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ k <span class="built_in">exec</span> -it pod/redis-sts-0 -n sts-ns -- redis-server -v</span><br><span class="line">Redis server v=6.2.19 sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=c51c65e7ae83f735</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl set image sts/&lt;sts-name&gt; &lt;container-name&gt;=&lt;image&gt;:&lt;tag&gt; --record=true</span></span><br><span class="line">kubectl <span class="built_in">set</span> image sts redis-sts redis=redis:8.0 --record=<span class="literal">true</span> -n sts-ns</span><br><span class="line"></span><br><span class="line">$ k <span class="built_in">exec</span> -it pod/redis-sts-0 -n sts-ns -- redis-server -v</span><br><span class="line">Redis server v=8.0.3 sha=00000000:1 malloc=jemalloc-5.3.0 bits=64 build=d4cb0aa008da4ca9</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看滚动升级状态</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl rollout status sts/&lt;sts-name&gt;</span></span><br><span class="line">$ kubectl rollout status sts redis-sts -n sts-ns</span><br><span class="line">partitioned roll out complete: 2 new pods have been updated...</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看历史版本</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前面的序号表示版本号</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> sts redis-sts -n sts-ns</span><br><span class="line"><span class="comment"># 查看指定版本的详情</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> sts redis-sts -n sts-ns --revision=1</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>回滚</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回退到前一个版本</span></span><br><span class="line">kubectl rollout undo sts redis-sts -n sts-ns</span><br><span class="line"><span class="comment"># 回到指定版本，这里 --to-revision=1 表示回到版本1</span></span><br><span class="line">kubectl rollout undo sts redis-sts -n sts-nsx --to-revision=1</span><br></pre></td></tr></table></figure><h2 id="Deployment-和-StatefulSet-的对比总结">Deployment 和 StatefulSet 的对比总结</h2><table><thead><tr><th>特性</th><th><strong>Deployment</strong></th><th><strong>StatefulSet</strong></th></tr></thead><tbody><tr><td><strong>用途</strong></td><td>无状态应用（如 Web 服务、API 服务）</td><td>有状态应用（如数据库、缓存：Redis、MySQL、Kafka）</td></tr><tr><td><strong>Pod 名称</strong></td><td>Pod 名字随机生成，如 <code>nginx-abc123</code></td><td>Pod 名字有序，格式为 <code>name-0</code>、<code>name-1</code>、<code>name-2</code></td></tr><tr><td><strong>稳定的标识</strong></td><td><strong>不提供</strong>，每次重建 Pod 名字可能不同</td><td><strong>提供</strong>，每个 Pod 的名字、网络 ID、存储持久化不变</td></tr><tr><td><strong>存储卷</strong></td><td>通常配合 PVC，但 Pod 重建时挂载卷可能变化</td><td>配置 <code>volumeClaimTemplates</code>，每个 Pod 独立持久卷</td></tr><tr><td><strong>滚动更新策略</strong></td><td>支持 <code>maxSurge</code>、<code>maxUnavailable</code>，可并行更新 Pod</td><td>默认 <strong>逐个顺序更新</strong> Pod（可用 <code>partition</code> 控制分批更新）</td></tr><tr><td><strong>可用性</strong></td><td>通常设计为 <strong>无状态多副本高可用</strong>，不保证 Pod 启动顺序或固定 IP</td><td><strong>有状态且有序部署、删除、更新</strong>，通常单副本逐个维护可用性</td></tr><tr><td><strong>服务访问</strong></td><td>通过 ClusterIP、NodePort、LoadBalancer 访问</td><td>推荐用 <strong>Headless Service (clusterIP: None)</strong>，Pod 有固定 DNS</td></tr><tr><td><strong>典型应用场景</strong></td><td>Web 应用、REST API、无状态微服务</td><td>数据库（MySQL、PostgreSQL）、缓存（Redis）、队列（Kafka、RabbitMQ）</td></tr><tr><td><strong>Pod 伸缩特性</strong></td><td><strong>灵活伸缩</strong>，增加/减少副本无特定顺序</td><td><strong>有序伸缩</strong>，<code>name-0</code> -&gt; <code>name-1</code> -&gt; <code>name-2</code>…</td></tr><tr><td><strong>重建策略</strong></td><td>Pod 崩溃后重建的是新 Pod，无持久存储数据可能丢失</td><td>Pod 崩溃后重建的是相同 Pod 名字，挂载相同 PVC，不丢数据</td></tr></tbody></table><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p>StatefulSet 类似于 Deployment，同样支持扩缩容（scale 或者 hpa），但因为其是有状态的，所以需谨慎</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scale</span></span><br><span class="line">kubectl scale sts redis-sts --replicas=5 -n sts-ns</span><br><span class="line"></span><br><span class="line"><span class="comment"># hpa，要求pod配置中有资源限制</span></span><br><span class="line">kubectl autoscale sts redis-sts --name=<span class="string">&quot;hpa-redis&quot;</span> --cpu-percent=50 --min=3 --max=10 -n sts-ns</span><br></pre></td></tr></table></figure><table><thead><tr><th>操作</th><th><strong>可行性</strong></th><th><strong>推荐情况</strong></th></tr></thead><tbody><tr><td><strong>扩容（增加副本数）</strong></td><td>✅ <strong>推荐</strong></td><td>安全，新增 Pod 按序从 N-1 开始创建（<code>sts-name-0</code> -&gt; <code>sts-name-1</code> -&gt; <code>sts-name-2</code>）</td></tr><tr><td><strong>缩容（减少副本数）</strong></td><td>⚠️ <strong>小心使用</strong></td><td>可能导致 Pod 及其关联 PVC 被废弃，<strong>数据可能丢失</strong></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 Statefulset ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/statefulset/&quot;&gt;k8s Statefulset 介绍&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 Horizontal Pod Autoscaler（HPA）</title>
    <link href="https://blog.hanqunfeng.com/2025/07/20/k8s-hpa/"/>
    <id>https://blog.hanqunfeng.com/2025/07/20/k8s-hpa/</id>
    <published>2025-07-20T13:30:05.000Z</published>
    <updated>2025-07-20T15:18:40.692Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 中的 Horizontal Pod Autoscaler（HPA），本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/autoscaling/">Autoscaling k8s简介</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/tasks/run-application/horizontal-pod-autoscale/">Horizontal Pod Autoscaler（HPA）</a></p></li></ul><span id="more"></span><h2 id="Horizontal-Pod-Autoscaler（HPA）-简介">Horizontal Pod Autoscaler（HPA） 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>Horizontal Pod Autoscaler（缩写为 hpa）基于资源 CPU 利用率自动调整 deployment、replication controller 或者 replica 中 pod 的数量，这有助于您的应用程序进行扩展以满足增长的需求，或在不需要资源时进行缩减，从而释放出节点用于其他应用程序。当您设置目标 CPU 利用率百分比时，HPA 扩展或缩减应用程序来尝试满足该目标。</p></li><li class="lvl-2"><p>Kubernetes 本身已经包含了 HPA 的 controller，所以不需要额外的安装或部署。</p></li><li class="lvl-2"><p>HPA 需要获取 metrics 信息，metrics 信息需要从 Metrics Server 中获取，所以需要先安装 Metrics Server。</p></li><li class="lvl-2"><p>HPA 会周期性(默认15秒)查询目标资源的使用情况，然后和 HPA 中定义的值做比较，并根据比较结果相应的调整 pod 数量。</p></li><li class="lvl-2"><p>创建pod时，必须为其设定cpu资源，用于与目标值进行比较，目前最新的v2版本的HPA除了支持CPU的对比，还可以设定其它指标，具体参考<a href="https://kubernetes.io/zh-cn/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/">HorizontalPodAutoscaler 演练</a>中的“基于多项度量指标和自定义度量指标自动扩缩”。</p></li><li class="lvl-2"><p>博主之前写过一篇在aws的eks中使用hpa的文章 <a href="/2023/07/17/aws-eks17-hpa/" title="AWS-EKS-17--Horizontal Pod Autoscaler（HPA）">AWS-EKS-17--Horizontal Pod Autoscaler（HPA）</a>，和在自己搭建 k8s集群 中使用 hpa 基本一致，所以本文不再对重复内容进行赘述，建议读者先阅读 <a href="/2023/07/17/aws-eks17-hpa/" title="AWS-EKS-17--Horizontal Pod Autoscaler（HPA）">AWS-EKS-17--Horizontal Pod Autoscaler（HPA）</a>。</p></li></ul><h2 id="安装-Metrics-Server">安装 Metrics Server</h2><ul class="lvl-0"><li class="lvl-2"><p>Kubernetes 的 HPA 是依赖 Metrics API 的，默认并不内置。需要通过 metrics-server 来收集和提供节点/Pod 的资源用量数据（CPU、内存等）。</p></li><li class="lvl-2"><p>安装 <a href="https://github.com/kubernetes-sigs/metrics-server">metrics-server</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L -o metrics-server.yaml https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br><span class="line">$ kubectl apply -f metrics-server.yaml</span><br><span class="line">serviceaccount/metrics-server created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:metrics-server created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created</span><br><span class="line">service/metrics-server created</span><br><span class="line">deployment.apps/metrics-server created</span><br><span class="line">apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>部署后发现pod没有运行成功</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$  k get all -n kube-system -l k8s-app=metrics-server</span><br><span class="line">NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/metrics-server-867d48dc9c-fgdjq   0/1     Running   0          16s</span><br><span class="line"></span><br><span class="line">NAME                     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/metrics-server   ClusterIP   10.96.91.221   &lt;none&gt;        443/TCP   16s</span><br><span class="line"></span><br><span class="line">NAME                             READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/metrics-server   0/1     1            0           16s</span><br><span class="line"></span><br><span class="line">NAME                                        DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/metrics-server-867d48dc9c   1         1         0       16s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>检查日志</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ k logs deployment.apps/metrics-server -n kube-system</span><br><span class="line"><span class="comment">## 输出类似于</span></span><br><span class="line">E0703 23:02:38.120831       1 scraper.go:149] <span class="string">&quot;Failed to scrape node&quot;</span> err=<span class="string">&quot;Get \&quot;https://10.211.55.15:10250/metrics/resource\&quot;: tls: failed to verify certificate: x509: cannot validate certificate for 10.211.55.15 because it doesn&#x27;t contain any IP SANs&quot;</span> node=<span class="string">&quot;k8s-worker1&quot;</span></span><br><span class="line">E0703 23:02:38.127774       1 scraper.go:149] <span class="string">&quot;Failed to scrape node&quot;</span> err=<span class="string">&quot;Get \&quot;https://10.211.55.16:10250/metrics/resource\&quot;: tls: failed to verify certificate: x509: cannot validate certificate for 10.211.55.16 because it doesn&#x27;t contain any IP SANs&quot;</span> node=<span class="string">&quot;k8s-worker2&quot;</span></span><br><span class="line">E0703 23:02:38.140583       1 scraper.go:149] <span class="string">&quot;Failed to scrape node&quot;</span> err=<span class="string">&quot;Get \&quot;https://10.211.55.11:10250/metrics/resource\&quot;: tls: failed to verify certificate: x509: cannot validate certificate for 10.211.55.11 because it doesn&#x27;t contain any IP SANs&quot;</span> node=<span class="string">&quot;k8s-master&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>意思是 metrics-server 在通过 https://<node-ip>:10250 请求 kubelet 的时候，发现 kubelet 的证书不包含该 IP 的 Subject Alternative Name (SAN)，因此 TLS 校验失败。</p></li><li class="lvl-2"><p>解决方案: 添加 --kubelet-insecure-tls 参数，跳过 kubelet 的 TLS 证书校验(metrics-server 本身权限有限，风险可控，kubelet 自签证书维护成本高)</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit deployment metrics-server -n kube-system</span><br><span class="line"><span class="comment">## 在 args 中添加 --kubelet-insecure-tls</span></span><br><span class="line">  spec:</span><br><span class="line">    containers:</span><br><span class="line">    - args:</span><br><span class="line">      - --cert-dir=/tmp</span><br><span class="line">      - --secure-port=10250</span><br><span class="line">      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br><span class="line">      - --kubelet-use-node-status-port</span><br><span class="line">      - --metric-resolution=15s</span><br><span class="line">      - --kubelet-insecure-tls   <span class="comment"># 添加此行</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>wq</code>保存后，等一会再次查看所有资源均已正常</p></li><li class="lvl-2"><p>查看所有 node 的资源</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ k top nodes</span><br><span class="line">NAME          CPU(cores)   CPU(%)   MEMORY(bytes)   MEMORY(%)</span><br><span class="line">k8s-master    216m         10%      1712Mi          44%</span><br><span class="line">k8s-worker1   79m          3%       1025Mi          26%</span><br><span class="line">k8s-worker2   82m          4%       982Mi           25%</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td><strong>NAME</strong></td><td>节点名称，Kubernetes 集群的节点名字。</td></tr><tr><td><strong>CPU(cores)</strong></td><td>当前节点 CPU 的瞬时使用量，单位是核心数（Core），比如 <code>216m</code> = 0.216 核心。<code>m</code> = <strong>millicores</strong>，1000m = 1核。</td></tr><tr><td><strong>CPU(%)</strong></td><td>当前 CPU 使用率，相对于该节点 CPU 总核数的百分比。比如 <code>10%</code> 表示节点 CPU 的 10% 被使用。</td></tr><tr><td><strong>MEMORY(bytes)</strong></td><td>节点当前使用的内存，单位是字节（例如 <code>1712Mi</code> = 1712 Mebibytes ≈ 1.7 GB）。</td></tr><tr><td><strong>MEMORY(%)</strong></td><td>节点内存使用率，占总内存的百分比。比如 <code>44%</code> 表示该节点内存使用了 44%。</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>查看所有 pod 的资源</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ k top pods -A</span><br><span class="line">NAMESPACE     NAME                                       CPU(cores)   MEMORY(bytes)</span><br><span class="line">default       nginx-5869d7778c-5682r                     0m           9Mi</span><br><span class="line">default       nginx-5869d7778c-thw8f                     0m           4Mi</span><br><span class="line">kube-system   calico-kube-controllers-7bfdc5b57c-q5xwp   6m           35Mi</span><br><span class="line">kube-system   calico-node-7pbbq                          42m          281Mi</span><br><span class="line">kube-system   calico-node-v4hzr                          47m          260Mi</span><br><span class="line">kube-system   calico-node-w47qq                          40m          263Mi</span><br><span class="line">kube-system   coredns-674b8bbfcf-2tvld                   2m           23Mi</span><br><span class="line">kube-system   coredns-674b8bbfcf-h6kx7                   2m           22Mi</span><br><span class="line">kube-system   etcd-k8s-master                            27m          85Mi</span><br><span class="line">kube-system   kube-apiserver-k8s-master                  49m          404Mi</span><br><span class="line">kube-system   kube-controller-manager-k8s-master         28m          100Mi</span><br><span class="line">kube-system   kube-proxy-nkbns                           1m           41Mi</span><br><span class="line">kube-system   kube-proxy-plqw8                           1m           25Mi</span><br><span class="line">kube-system   kube-proxy-sbgh6                           1m           34Mi</span><br><span class="line">kube-system   kube-scheduler-k8s-master                  8m           38Mi</span><br><span class="line">kube-system   metrics-server-56fb9549f4-rtt7n            4m           21Mi</span><br></pre></td></tr></table></figure><h2 id="创建-HPA">创建 HPA</h2><ul class="lvl-0"><li class="lvl-2"><p>前面的文章中多次使用 nginx 镜像创建了 deployment，但是都没有配置过资源，为了测试 hpa，需要为其指定资源</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接修改 deployment，改变 spec.template，Pod 会被重建。保存后立刻生效</span></span><br><span class="line">kubectl edit deployment nginx</span><br><span class="line"><span class="comment"># 增加资源限制</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: 1   <span class="comment"># 修改副本数位 1，仅改变 replicas，Pod 不会被重建</span></span><br><span class="line">  template:     <span class="comment"># 修改 template，Pod 会被重建</span></span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 500Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 200m</span><br><span class="line">            memory: 200Mi</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>命令行创建 HPA</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建了一个叫“hpa-nginx”的 HPA，默认与 deployment 的名称相同，可以用 --name=&#x27;hpa-nginx&#x27; 指定hpa的名称</span></span><br><span class="line"><span class="comment"># replicas 变动范围是最小 3，最大 10</span></span><br><span class="line"><span class="comment"># 目标cpu利用率为 50%，上面我们设定 CPU request 值为 100m，所以当平均cpu值为 100m 时就会触发 autoscale</span></span><br><span class="line"><span class="comment"># 这里说平均cpu，是指所有pod的cpu利用率的平均值</span></span><br><span class="line">$ k autoscale deployment nginx --name=<span class="string">&quot;hpa-nginx&quot;</span> --cpu-percent=50 --min=3 --max=10</span><br><span class="line">horizontalpodautoscaler.autoscaling/hpa-nginx autoscaled</span><br><span class="line"><span class="comment"># 观察，大约 15秒后，hpa-nginx 发现 replicas 值为1，30秒的时候自动扩容到3个，因为我们设置的hpa的replicas最小值为3，并且采集到了cpu使用率</span></span><br><span class="line">$ k get hpa -w</span><br><span class="line">NAME        REFERENCE          TARGETS              MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">hpa-nginx   Deployment/nginx   cpu: &lt;unknown&gt;/50%   3         10        0          0s</span><br><span class="line">hpa-nginx   Deployment/nginx   cpu: &lt;unknown&gt;/50%   3         10        1          15s</span><br><span class="line">hpa-nginx   Deployment/nginx   cpu: 0%/50%          3         10        3          30s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>ymal文件创建 HPA</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v2</span>    <span class="comment"># api版本，这里设置为 v2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span> <span class="comment"># 资源类型</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hpa-nginx</span>             <span class="comment"># hpa资源名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span>          <span class="comment"># 命名空间</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">10</span>             <span class="comment"># 最大副本数</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">1</span>              <span class="comment"># 最小副本数</span></span><br><span class="line">  <span class="attr">metrics:</span>                    <span class="comment"># 指标设定</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Resource</span>            <span class="comment"># 资源类型，可以配置为 Resource/Object/Pods</span></span><br><span class="line">    <span class="attr">resource:</span>                 <span class="comment"># 资源对象</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cpu</span>               <span class="comment"># 资源名称 cpu/memory</span></span><br><span class="line">      <span class="attr">target:</span>                 <span class="comment"># 目标对象</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">Utilization</span>     <span class="comment"># 目标类型，可以配置为 Utilization/AverageValue/Value</span></span><br><span class="line">        <span class="attr">averageUtilization:</span> <span class="number">50</span> <span class="comment"># 目标值，这里是平均使用率的百分比</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span>             <span class="comment"># 指定要自动伸缩的资源对象</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span>          <span class="comment"># 资源类型为 Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span>               <span class="comment"># 资源名称为 nginx</span></span><br></pre></td></tr></table></figure><h2 id="HPA-支持的监控指标类型">HPA 支持的监控指标类型</h2><table><thead><tr><th>类型</th><th>字段名</th><th>说明</th><th>常见用途</th></tr></thead><tbody><tr><td><strong>Resource</strong></td><td><code>resource</code></td><td>基于 Pod 资源使用情况（CPU、内存），最常用</td><td>按 CPU 利用率自动扩缩容</td></tr><tr><td><strong>Pods</strong></td><td><code>pods</code></td><td>基于每个 Pod 的自定义度量指标的平均值，需要第三方监控系统提供，比如 Prometheus</td><td>按业务指标（如请求数、队列长度）扩缩容</td></tr><tr><td><strong>Object</strong></td><td><code>object</code></td><td>基于单个 Kubernetes 对象（如 Service、Ingress）的指标，，比如 Prometheus</td><td>按某个对象的指标扩缩容，例如队列长度</td></tr></tbody></table><h3 id="Resource-资源指标（CPU-内存）">Resource 资源指标（CPU/内存）</h3><ul class="lvl-0"><li class="lvl-2"><p>Utilization: 利用率百分比</p></li><li class="lvl-2"><p>Utilization 不关心 limits，只看 requests。</p></li><li class="lvl-2"><p>如果 resources.requests 没有设置，HPA Utilization 会报错（除非 AverageValue）。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metrics:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Resource</span></span><br><span class="line">  <span class="attr">resource:</span>                   <span class="comment"># 资源 指标</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cpu</span>                 <span class="comment"># cpu</span></span><br><span class="line">    <span class="attr">target:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Utilization</span>       <span class="comment"># 利用率百分比</span></span><br><span class="line">      <span class="attr">averageUtilization:</span> <span class="number">50</span>  <span class="comment"># 50%</span></span><br></pre></td></tr></table></figure><blockquote><p>当前有 3 个 Pod：</p></blockquote><table><thead><tr><th>Pod</th><th>CPU 实际使用</th><th>CPU requests</th></tr></thead><tbody><tr><td>pod-1</td><td>150m</td><td>200m</td></tr><tr><td>pod-2</td><td>100m</td><td>200m</td></tr><tr><td>pod-3</td><td>50m</td><td>200m</td></tr><tr><td>合计</td><td>400m</td><td>600m</td></tr><tr><td><strong>平均</strong></td><td><strong>400m ÷ 600m × 100% ≈ 66.7%</strong></td><td></td></tr></tbody></table><blockquote><p>由于 66.7% &gt; 50%，会扩容；如果小于 50%，HPA 会缩容。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>AverageValue: 指定资源使用平均值</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metrics:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Resource</span></span><br><span class="line">  <span class="attr">resource:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">memory</span>                <span class="comment"># 监控资源类型为 memory（内存）</span></span><br><span class="line">    <span class="attr">target:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">AverageValue</span>        <span class="comment"># 指标类型为 AverageValue，表示每个 Pod 平均使用多少</span></span><br><span class="line">      <span class="attr">averageValue:</span> <span class="string">400Mi</span>       <span class="comment"># 目标值：平均每个 Pod 使用 400Mi 内存</span></span><br></pre></td></tr></table></figure><blockquote><p>假设当前部署了 3 个副本，内存使用情况如下：</p></blockquote><table><thead><tr><th>Pod</th><th>当前内存使用</th></tr></thead><tbody><tr><td>pod-1</td><td>450Mi</td></tr><tr><td>pod-2</td><td>400Mi</td></tr><tr><td>pod-3</td><td>300Mi</td></tr><tr><td><strong>平均</strong></td><td><strong>(450+400+300)/3 = 383.3Mi</strong></td></tr></tbody></table><blockquote><p>因为 383.3Mi &lt; 400Mi，不触发扩容。如果将来平均使用超过 400Mi，HPA 就会扩容，反之缩容。</p></blockquote><h2 id="HPA-扩缩容速度配置">HPA 扩缩容速度配置</h2><ul class="lvl-0"><li class="lvl-2"><p>HPA 的扩缩容速度是可以控制的，通过 behavior 字段来自定义扩缩容的速度和策略。</p></li><li class="lvl-2"><p>以下是默认策略</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">behavior:</span></span><br><span class="line">  <span class="attr">scaleUp:</span>                                  <span class="comment"># ⬆️ 扩容策略</span></span><br><span class="line">    <span class="attr">tolerance:</span> <span class="number">0.1</span>                          <span class="comment"># 容忍阈值，默认0.1(10%)，表示每次扩容时，pod使用率超过1.1倍目标值时才会进行扩容</span></span><br><span class="line">    <span class="attr">stabilizationWindowSeconds:</span> <span class="number">0</span>           <span class="comment"># 默认0，即增加或减少pod数量后保持不变的时间，单位为秒</span></span><br><span class="line">    <span class="attr">policies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Percent</span>                         <span class="comment"># 扩容速度按百分比限制</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">100</span>                            <span class="comment"># 每 15 秒最多扩容 100% 的副本数</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">15</span>                     <span class="comment"># 每 15 秒计算一次是否可以扩容，默认 15 秒</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Pods</span>                            <span class="comment"># 按固定 Pod 数量限制扩容速度</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">4</span>                              <span class="comment"># 每 15 秒最多扩容 4 个 Pod</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">15</span>                     <span class="comment"># 同样 15 秒计算一次，默认 15 秒</span></span><br><span class="line">    <span class="attr">selectPolicy:</span> <span class="string">Max</span>                       <span class="comment"># 多个 policy 同时存在时，取 Percent 和 Pods 的最大值。Min 取最小值</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">scaleDown:</span>                                <span class="comment"># ⬇️ 缩容策略</span></span><br><span class="line">    <span class="comment"># selectPolicy: Disabled                  # 禁用缩容</span></span><br><span class="line">    <span class="attr">stabilizationWindowSeconds:</span> <span class="number">300</span>         <span class="comment"># 默认 300，即增加或减少pod数量后保持不变的时间，单位为秒，防止快速缩容（平滑策略）</span></span><br><span class="line">    <span class="attr">policies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Percent</span>                         <span class="comment"># 缩容速度按百分比限制</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">100</span>                            <span class="comment"># 每 15 秒最多缩容 100% 的副本数</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">15</span>                     <span class="comment"># 每 15 秒评估一次是否可以缩容</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>完整的 HPA 配置文件示例(一般情况下，我们无需修改扩缩容速度的配置，默认策略满足大部分场景)</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v2</span>                    <span class="comment"># api版本，使用 v2 版本支持 behavior 扩缩容策略</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span>                 <span class="comment"># 资源类型为 HPA</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hpa-nginx</span>                             <span class="comment"># HPA 资源的名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span>                          <span class="comment"># 命名空间，设置为 default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">10</span>                             <span class="comment"># HPA 自动扩容的最大副本数</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">1</span>                              <span class="comment"># HPA 自动缩容的最小副本数</span></span><br><span class="line">  <span class="attr">metrics:</span>                                    <span class="comment"># 自动伸缩的指标配置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Resource</span>                            <span class="comment"># 指标类型为 Resource（资源型）</span></span><br><span class="line">    <span class="attr">resource:</span>                                 <span class="comment"># 资源指标对象</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cpu</span>                               <span class="comment"># 资源名称为 cpu，也可以设置为 memory</span></span><br><span class="line">      <span class="attr">target:</span>                                 <span class="comment"># 目标指标对象</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">Utilization</span>                     <span class="comment"># 指标类型为 Utilization（利用率百分比）</span></span><br><span class="line">        <span class="attr">averageUtilization:</span> <span class="number">50</span>                <span class="comment"># CPU 平均使用率达到 50% 时进行扩缩容</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span>                             <span class="comment"># HPA 绑定的目标资源对象</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span>                          <span class="comment"># 目标类型为 Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span>                               <span class="comment"># 目标 Deployment 名称为 nginx</span></span><br><span class="line">  <span class="attr">behavior:</span>                                   <span class="comment"># ⬇️ 扩缩容行为控制</span></span><br><span class="line">    <span class="attr">scaleUp:</span>                                  <span class="comment"># 扩容策略</span></span><br><span class="line">      <span class="attr">stabilizationWindowSeconds:</span> <span class="number">30</span>          <span class="comment"># 扩容平滑窗口为 30 秒，防止短时间抖动频繁扩容</span></span><br><span class="line">      <span class="attr">policies:</span>                               <span class="comment"># 扩容速度限制策略</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Percent</span>                         <span class="comment"># 按百分比计算</span></span><br><span class="line">        <span class="attr">value:</span> <span class="number">100</span>                            <span class="comment"># 每 15 秒内最多扩容 100%</span></span><br><span class="line">        <span class="attr">periodSeconds:</span> <span class="number">15</span>                     <span class="comment"># 每 15 秒评估一次扩容速率</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Pods</span>                            <span class="comment"># 按固定 Pod 数量计算</span></span><br><span class="line">        <span class="attr">value:</span> <span class="number">4</span>                              <span class="comment"># 每 15 秒最多扩容 4 个 Pod</span></span><br><span class="line">        <span class="attr">periodSeconds:</span> <span class="number">15</span>                     <span class="comment"># 每 15 秒评估一次扩容速率</span></span><br><span class="line">      <span class="attr">selectPolicy:</span> <span class="string">Max</span>                       <span class="comment"># 如果多个 policy 同时满足，取最大值（更激进的扩容）</span></span><br><span class="line">    <span class="attr">scaleDown:</span>                                <span class="comment"># 缩容策略</span></span><br><span class="line">      <span class="attr">stabilizationWindowSeconds:</span> <span class="number">300</span>         <span class="comment"># 缩容平滑窗口为 300 秒（5 分钟），避免短时流量降低快速缩容</span></span><br><span class="line">      <span class="attr">policies:</span>                               <span class="comment"># 缩容速度限制策略</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Percent</span>                         <span class="comment"># 按百分比缩容</span></span><br><span class="line">        <span class="attr">value:</span> <span class="number">30</span>                             <span class="comment"># 每 60 秒最多缩容 30%</span></span><br><span class="line">        <span class="attr">periodSeconds:</span> <span class="number">60</span>                     <span class="comment"># 每 60 秒评估一次缩容速率</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 中的 Horizontal Pod Autoscaler（HPA），本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/workloads/autoscaling/&quot;&gt;Autoscaling k8s简介&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/tasks/run-application/horizontal-pod-autoscale/&quot;&gt;Horizontal Pod Autoscaler（HPA）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 Ingress Nginx</title>
    <link href="https://blog.hanqunfeng.com/2025/07/19/k8s-ingress-nginx/"/>
    <id>https://blog.hanqunfeng.com/2025/07/19/k8s-ingress-nginx/</id>
    <published>2025-07-19T13:30:05.000Z</published>
    <updated>2025-07-20T13:48:31.217Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 安装及使用 Ingress Nginx，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.github.io/ingress-nginx/">ingress-nginx 官网</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/">ingress-nginx k8s简介</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress-controllers/">k8s支持的 ingress controller</a></p></li></ul><span id="more"></span><h2 id="Ingress-简介">Ingress 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>Ingress(缩写为 ing) 提供从集群外部到集群内服务的 HTTP 和 HTTPS 路由(7层)。 流量路由由 Ingress 资源所定义的规则来控制。</p></li><li class="lvl-2"><p>实际上 Ingress-Nginx 内置了 nginx，由 nginx 其负责接收请求并转发给后端服务。</p></li><li class="lvl-2"><p>下面是 Ingress 的一个简单示例，可将所有流量都发送到同一 Service<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/jVrIUP.png" alt=""></p></li></ul><h2 id="安装-Ingress-Nginx">安装 Ingress-Nginx</h2><ul class="lvl-0"><li class="lvl-2"><p>安装时要注意 ingress-nginx 的版本和 Kubernetes 的版本兼容性，参考 Github:<a href="https://github.com/kubernetes/ingress-nginx">ingress-nginx</a>。</p></li><li class="lvl-2"><p>获取对应版本的yaml文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载最新的 v1.13.0 版本，其支持 Kubernetes 1.33 版本</span></span><br><span class="line"><span class="built_in">export</span> INGRESS_NGINX_VERSION=v1.13.0</span><br><span class="line">curl -L -o ingress-nginx-controller.yaml https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-<span class="variable">$&#123;INGRESS_NGINX_VERSION&#125;</span>/deploy/static/provider/cloud/deploy.yaml</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装 ingress-nginx</p></li></ul><blockquote><p>这里要注意，ingress-nginx 的 <code>service/ingress-nginx-controller</code> 默认使用 LoadBalancer 类型，所以需要先使 k8s 集群支持 LoadBalancer 类型，可以参考 <a href="/2025/07/18/k8s-service/" title="K8S 之 Service">K8S 之 Service</a> 中 LoadBalancer 部分。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f ingress-nginx-controller.yaml</span><br><span class="line">namespace/ingress-nginx created</span><br><span class="line">serviceaccount/ingress-nginx created</span><br><span class="line">serviceaccount/ingress-nginx-admission created</span><br><span class="line">role.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">role.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class="line">configmap/ingress-nginx-controller created</span><br><span class="line">service/ingress-nginx-controller created</span><br><span class="line">service/ingress-nginx-controller-admission created</span><br><span class="line">deployment.apps/ingress-nginx-controller created</span><br><span class="line">job.batch/ingress-nginx-admission-create created</span><br><span class="line">job.batch/ingress-nginx-admission-patch created</span><br><span class="line">ingressclass.networking.k8s.io/nginx created</span><br><span class="line">validatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ingress-nginx资源</span></span><br><span class="line">$ k get all -n ingress-nginx</span><br><span class="line">NAME                                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/ingress-nginx-controller-95f6586c6-nznwq   1/1     Running   0          2m46s</span><br><span class="line"></span><br><span class="line">NAME                                         TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                      AGE</span><br><span class="line">service/ingress-nginx-controller             LoadBalancer   10.96.112.234   10.211.55.201   80:30168/TCP,443:30600/TCP   2m46s</span><br><span class="line">service/ingress-nginx-controller-admission   ClusterIP      10.96.245.155   &lt;none&gt;          443/TCP                      2m46s</span><br><span class="line"></span><br><span class="line">NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/ingress-nginx-controller   1/1     1            1           2m46s</span><br><span class="line"></span><br><span class="line">NAME                                                 DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/ingress-nginx-controller-95f6586c6   1         1         1       2m46s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 IngressClass 资源</span></span><br><span class="line">$ k get ingressclasses.networking.k8s.io</span><br><span class="line">NAME    CONTROLLER             PARAMETERS   AGE</span><br><span class="line">nginx   k8s.io/ingress-nginx   &lt;none&gt;       14m</span><br></pre></td></tr></table></figure><h2 id="创建-Ingress-资源">创建 Ingress 资源</h2><ul class="lvl-0"><li class="lvl-2"><p>ingress-demo.yaml</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span>                   <span class="comment"># Ingress 资源</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web-ingress</span>             <span class="comment"># Ingress 名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span>            <span class="comment"># Ingress 所在的命名空间</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span>       <span class="comment"># Ingress 使用的 IngressClass</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">nginx.hanqunfeng.com</span>  <span class="comment"># 转发域名，支持通配符 *.hanqunfeng.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span>        <span class="comment"># 路径匹配规则, 前缀匹配</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span>                 <span class="comment"># 路径</span></span><br><span class="line">        <span class="attr">backend:</span>                <span class="comment"># 后端服务</span></span><br><span class="line">          <span class="attr">service:</span>              <span class="comment"># 声明后端是一个 service</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx</span>         <span class="comment"># service名称，提前创建好 service，类型可以是ClusterIP、NodePort、LoadBalancer任意，推荐ClusterIP，因为使用 ingress 的话，就没必要创建其它类型的 service 了</span></span><br><span class="line">            <span class="attr">port:</span>               <span class="comment"># 端口</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span>        <span class="comment"># service的端口</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看 ingress 资源</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ k get ing -n ns1</span><br><span class="line">NAME          CLASS   HOSTS                  ADDRESS         PORTS   AGE</span><br><span class="line">web-ingress   nginx   nginx.hanqunfeng.com   10.211.55.201   80      80s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>访问 web-ingress</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将域名 nginx.hanqunfeng.com 解析到 10.211.55.201，如果是内部域名可以通过 hosts 文件添加解析</span></span><br><span class="line"><span class="comment"># 只能通过 nginx.hanqunfeng.com 访问，不能通过 10.211.55.201 访问</span></span><br><span class="line">curl http://nginx.hanqunfeng.com</span><br></pre></td></tr></table></figure><h2 id="让-Ingress-支持-HTTPS-访问">让 Ingress 支持 HTTPS 访问</h2><ul class="lvl-0"><li class="lvl-2"><p>创建证书，可以在阿里云上申请一个免费的证书</p></li><li class="lvl-2"><p>创建 secret</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret tls nginx-tls \</span><br><span class="line">    --key=nginx.hanqunfeng.com.key \</span><br><span class="line">    --cert=nginx.hanqunfeng.com.pem \</span><br><span class="line">    -n default</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>也可以通过yaml创建</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-tls</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">tls.crt:</span> <span class="string">base64</span> <span class="string">编码的证书，而非文件路径</span></span><br><span class="line">  <span class="attr">tls.key:</span> <span class="string">base64</span> <span class="string">编码的私钥，而非文件路径</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">kubernetes.io/tls</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>你的 Ingress 资源需要增加 tls 字段，引用一个 Secret 存储的 TLS 证书。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span>                   <span class="comment"># Ingress 资源</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web-ingress</span>             <span class="comment"># Ingress 名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span>            <span class="comment"># Ingress 所在的命名空间</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span>       <span class="comment"># Ingress 使用的 IngressClass</span></span><br><span class="line">  <span class="attr">tls:</span>                          <span class="comment"># 配置 TLS</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span>                      <span class="comment"># 域名列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nginx.hanqunfeng.com</span>      <span class="comment"># 域名</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">nginx-tls</span>       <span class="comment"># 存放证书的 Secret</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">nginx.hanqunfeng.com</span>  <span class="comment">#转发域名</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span>        <span class="comment"># 路径匹配规则, 前缀匹配</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span>                 <span class="comment"># 路径</span></span><br><span class="line">        <span class="attr">backend:</span>                <span class="comment"># 后端服务</span></span><br><span class="line">          <span class="attr">service:</span>              <span class="comment"># service</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx</span>         <span class="comment"># service名称</span></span><br><span class="line">            <span class="attr">port:</span>               <span class="comment"># 端口</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span>        <span class="comment"># service的端口</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新运行ingress</span></span><br><span class="line">k apply -f nginx-ingress.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ingress，此时多了一个 443 端口</span></span><br><span class="line">$ k get ing</span><br><span class="line">NAME          CLASS   HOSTS                  ADDRESS         PORTS     AGE</span><br><span class="line">web-ingress   nginx   nginx.hanqunfeng.com   10.211.55.201   80, 443   51s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问https，但此时 80 端口访问不了，需要配置 80 端口重定向到 443</span></span><br><span class="line">curl https://nginx.hanqunfeng.com</span><br></pre></td></tr></table></figure><h2 id="80端口重定向到443">80端口重定向到443</h2><ul class="lvl-0"><li class="lvl-2"><p><code>nginx ingress controller</code>，它内置支持重定向，你可以在 Ingress 上添加 annotation</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/force-ssl-redirect:</span> <span class="string">&quot;true&quot;</span>  <span class="comment"># 80 重定向到 443</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>完整的yaml</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web-ingress</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/force-ssl-redirect:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nginx.hanqunfeng.com</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">nginx-tls</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">nginx.hanqunfeng.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>访问测试</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新运行ingress</span></span><br><span class="line">k apply -f nginx-ingress.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下 curl 不会自动跳转，使用浏览器访问会自动重定向，308 表示永久重定向</span></span><br><span class="line">$ curl http://nginx.hanqunfeng.com</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;&lt;title&gt;308 Permanent Redirect&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;308 Permanent Redirect&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 -L 参数，curl 会自动跳转</span></span><br><span class="line">$ curl -L http://nginx.hanqunfeng.com</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><h3 id="ssl-证书过期怎么办？">ssl 证书过期怎么办？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apply 会直接更新 Secret，而不是删除重建</span></span><br><span class="line">kubectl create secret tls nginx-tls \</span><br><span class="line">    --key=新的.key \</span><br><span class="line">    --cert=新的.pem \</span><br><span class="line">    -n default --dry-run=client -o yaml | kubectl apply -f -</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Ingress Controller（如 nginx-ingress）通常会自动监听 Secret 变化，大概 30 秒 ~ 1 分钟内自动热加载新证书，无需重启 Pod。</p></li></ul><h3 id="pathType-可以设置哪些值？">pathType 可以设置哪些值？</h3><ul class="lvl-0"><li class="lvl-2"><p>在 Kubernetes Ingress 的 pathType 字段中，一共可以设置以下三种值</p></li></ul><table><thead><tr><th><strong>pathType 值</strong></th><th><strong>含义</strong></th><th><strong>匹配规则说明</strong></th></tr></thead><tbody><tr><td><strong>Exact</strong></td><td>精确匹配</td><td>路径必须<strong>完全匹配</strong></td></tr><tr><td><strong>Prefix</strong></td><td>前缀匹配</td><td>以指定路径为<strong>前缀</strong>即可匹配</td></tr><tr><td><strong>ImplementationSpecific</strong></td><td>由 Ingress Controller 自己决定</td><td>nginx 常常表现为前缀匹配</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>Exact 精确匹配，且区分大小写</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只匹配 http://example.com/foo</span></span><br><span class="line"><span class="comment"># 不会匹配 /foo/abc 或 /foo/</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Exact</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/foo</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Prefix 前缀匹配，且区分大小写</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配所有以 /foo 开头的路径：</span></span><br><span class="line"><span class="comment">#   /foo</span></span><br><span class="line"><span class="comment">#   /foo/   # 会忽略尾部的 /</span></span><br><span class="line"><span class="comment">#   /foo/abc</span></span><br><span class="line"><span class="comment">#   /foo/bar/test</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/foo</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>ImplementationSpecific 控制器自定义（不推荐）</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配规则由 Ingress Controller 决定；</span></span><br><span class="line"><span class="comment"># 在 nginx-ingress 中通常行为类似于 Prefix，但不保证兼容性；</span></span><br><span class="line"><span class="comment"># Kubernetes 官方不推荐生产使用，建议显式使用 Prefix 或 Exact。</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">ImplementationSpecific</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/foo</span></span><br></pre></td></tr></table></figure><h3 id="设置缺省的-ingressclass">设置缺省的 ingressclass</h3><ul class="lvl-0"><li class="lvl-2"><p>我们可以设置一个缺省的 ingressclass 为默认值，这样，当创建ingress时，如果未指定ingressclass，则使用缺省值</p></li><li class="lvl-2"><p>可以通过 kubectl patch 为 ingressclass 直接打上默认标识(通过 k edit ingressclass ingressclass-name 为其添加注解也可以)</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 ingressclasses</span></span><br><span class="line">$ k get ingressclasses</span><br><span class="line">NAME    CONTROLLER             PARAMETERS   AGE</span><br><span class="line">nginx   k8s.io/ingress-nginx   &lt;none&gt;       3h3m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 nginx 为默认 ingressclass，就是为其加上如下注解</span></span><br><span class="line">$ kubectl patch ingressclass nginx -p <span class="string">&#x27;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;ingressclass.kubernetes.io/is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="ingerss-nginx-应用示例">ingerss-nginx 应用示例</h3><ul class="lvl-0"><li class="lvl-2"><p>同一域名不同路径<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/s1XbqM.png" alt=""></p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">simple-fanout-example</span></span><br><span class="line"><span class="attr">spec:</span>                       <span class="comment"># 未指定 ingressClassName ,则使用 上文中设置的默认 ingressClassName</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">foo.bar.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/foo</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">4200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/bar</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">service2</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>不同域名的服务<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/uPic/sBhmbR.png" alt=""></p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">name-virtual-host-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">foo.bar.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">bar.foo.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">service2</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>通过如下命令对 ingress 进行修改，修改保存(:wq)后会立刻生效</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit ingress web-ingress</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 安装及使用 Ingress Nginx，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.github.io/ingress-nginx/&quot;&gt;ingress-nginx 官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/&quot;&gt;ingress-nginx k8s简介&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress-controllers/&quot;&gt;k8s支持的 ingress controller&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 Service</title>
    <link href="https://blog.hanqunfeng.com/2025/07/18/k8s-service/"/>
    <id>https://blog.hanqunfeng.com/2025/07/18/k8s-service/</id>
    <published>2025-07-18T14:30:05.000Z</published>
    <updated>2025-07-20T13:49:29.985Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 Service ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/">k8s Service 介绍</a></p></li></ul><span id="more"></span><h2 id="Service-介绍">Service 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>Service(缩写为 svc)是一个抽象层，它定义了一组Pod的逻辑集，并为这些Pod支持外部流量暴露、负载均衡和服务发现。</p></li><li class="lvl-2"><p>尽管每个Pod 都有一个唯一的IP地址，但是如果没有Service，这些IP不会暴露在群集外部。</p></li><li class="lvl-2"><p>Service允许您的应用程序接收流量。</p></li><li class="lvl-2"><p>Service也可以用在ServiceSpec标记type的方式暴露，type类型如下：</p><ul class="lvl-2"><li class="lvl-4">ClusterIP（默认）：在集群的内部IP上公开Service。这种类型使得Service只能从集群内访问。</li><li class="lvl-4">NodePort：使用NAT在集群中每个选定Node的相同端口上公开Service。使用 <NodeIP>:<NodePort> 从集群外部访问Service。是ClusterIP的超集。</li><li class="lvl-4">LoadBalancer：在当前云中创建一个外部负载均衡器(如果支持的话)，并为Service分配一个固定的外部IP。是NodePort的超集。</li><li class="lvl-4">ExternalName：通过返回带有该名称的CNAME记录，使用任意名称（由spec中的externalName指定）公开Service。不使用代理。</li></ul></li></ul><h2 id="创建Service">创建Service</h2><h3 id="ClusterIP">ClusterIP</h3><ul class="lvl-0"><li class="lvl-2"><p>只能在集群内部访问</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先创建deployment，此时会为每个pod添加一个label app=nginx</span></span><br><span class="line">kubectl create deployment nginx --image=nginx --replicas=2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建service，，将deployment的pod暴露出来，暴露类型为ClusterIP</span></span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=ClusterIP --port=80</span><br><span class="line">$ kubectl get svc nginx</span><br><span class="line">NAME    TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">nginx   ClusterIP   10.96.14.90   &lt;none&gt;        80/TCP    60s</span><br></pre></td></tr></table></figure><h3 id="NodePort">NodePort</h3><ul class="lvl-0"><li class="lvl-2"><p>暴露宿主机的端口，供外部访问</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建service，将deployment的pod暴露出来，暴露类型为NodePort</span></span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --port=80</span><br><span class="line"><span class="comment"># 查看service，此时可以看到service的端口和节点的端口，与 ClusterIP 的区别就是是否暴露在节点上的端口</span></span><br><span class="line">$ kubectl get svc nginx</span><br><span class="line">NAME    TYPE       CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">nginx   NodePort   10.96.7.8    &lt;none&gt;        80:32691/TCP   31s</span><br></pre></td></tr></table></figure><h3 id="yaml文件创建service">yaml文件创建service</h3><ul class="lvl-0"><li class="lvl-2"><p>yaml文件格式</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>      <span class="comment"># api版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span>       <span class="comment"># 资源类型</span></span><br><span class="line"><span class="attr">metadata:</span>           <span class="comment"># 元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span>       <span class="comment"># service名称</span></span><br><span class="line"><span class="attr">spec:</span>               <span class="comment"># 配置</span></span><br><span class="line">  <span class="attr">ports:</span>            <span class="comment"># 端口</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span>        <span class="comment"># 集群内访问端口，service的端口，一般配置为与 targetPort 一致，但是非必须</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span>   <span class="comment"># 协议</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span>  <span class="comment"># 容器端口, pod的端口，这个必须与实际容器端口一致</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30080</span> <span class="comment"># node暴露的端口，service类型为 NodePort 时使用，默认范围在 30000-32767 之间</span></span><br><span class="line">  <span class="attr">selector:</span>         <span class="comment"># 选择器</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span>      <span class="comment"># pod的标签，即匹配pod的标签 app=nginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span>    <span class="comment"># service类型</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这里有个问题需要注意，service 默认是通过<code>标签</code>来匹配pod的，所以创建service的时候，一定要保证pod的标签是存在的，否则service无法匹配pod，另外虽然我们通过命令行创建service时是通过<code>kubectl expose deployment nginx --type=NodePort --port=80</code>创建的，但也并不表示service只会匹配这个deployment创建的pod，而是会匹配所有具有指定标签的pod（app=nginx）。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取service的 selector</span></span><br><span class="line">$ k get svc -owide</span><br><span class="line">NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE    SELECTOR</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP        4d5h   &lt;none&gt;</span><br><span class="line">nginx        NodePort    10.96.9.77   &lt;none&gt;        80:30080/TCP   8s     app=nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里有个名称为 kubernetes 的 service，其作用是为了方便集群内部的 Pod 调用 API Server 的统一入口</span></span><br><span class="line"><span class="comment"># 无论 API Server 实际运行在哪个节点哪个 IP，集群内部只要访问如下地址就能访问 API Server。</span></span><br><span class="line"><span class="comment"># https://kubernetes.default.svc</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="comment"># https://10.96.0.1</span></span><br><span class="line"><span class="comment"># 这个 Service 是 系统自带的，不建议删除或修改。</span></span><br></pre></td></tr></table></figure><h3 id="ExternalName">ExternalName</h3><ul class="lvl-0"><li class="lvl-2"><p>可以将其它 namespace 的 service 别名到 当前 namespace，这样访问 service 时就不需要加上命名空间名称了</p></li><li class="lvl-2"><p>ExternalName Service 是纯 DNS CNAME 映射，我们不经可以映射集群内容服务，也可以映射集群外部服务。</p></li><li class="lvl-2"><p>原先的 service 访问方式：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在不同命名空间下创建service</span></span><br><span class="line"><span class="comment"># 创建两个命名空间以及下面的资源</span></span><br><span class="line"><span class="comment">## ns1</span></span><br><span class="line">kubectl create namespace ns1</span><br><span class="line">kubectl create deployment alpine-demo -n ns1 --image=alpine/curl --replicas=1 -- /bin/sh -c <span class="string">&quot;sleep infinity&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ns2</span></span><br><span class="line">kubectl create namespace ns2</span><br><span class="line">kubectl create deployment nginx-demo -n ns2 --image=nginx --replicas=1</span><br><span class="line">kubectl expose deployment nginx-demo -n ns2 --<span class="built_in">type</span>=ClusterIP --port=80 --name=nginx-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 ns1 中的 pod 访问 ns2 中的 nginx-service</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it -n ns1 alpine-demo-66895487c8-sk4t4 -- /bin/sh</span><br><span class="line">curl nginx-service.ns2.svc.cluster.local</span><br><span class="line">curl nginx-service.ns2</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>ExternalName 访问</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 ns1 中创建 externalName 类型的 service，--external-name 指定 ns2 中的 nginx-service</span></span><br><span class="line">kubectl create service externalname nginx-service -n ns1 --external-name=nginx-service.ns2.svc.cluster.local</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>也可以通过 yaml 创建</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span>                               <span class="comment"># service 名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ns1</span>                                    <span class="comment"># 指定命名空间 为 ns1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">externalName:</span> <span class="string">nginx-service.ns2.svc.cluster.local</span> <span class="comment"># 指定外部服务名，比如 www.baidu.com</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ExternalName</span>                                <span class="comment"># 指定为 ExternalName 类型</span></span><br><span class="line">  <span class="attr">selector:</span>                                         <span class="comment"># 不需要配置 selector</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-service</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看 service</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ k get svc -n ns1</span><br><span class="line">NAME            TYPE           CLUSTER-IP   EXTERNAL-IP                           PORT(S)   AGE</span><br><span class="line">nginx-service   ExternalName   &lt;none&gt;       nginx-service.ns2.svc.cluster.local   &lt;none&gt;    16s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>此时再次进入 ns1 中的 pod 访问 ns2 中的 nginx-service 服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it -n ns1 alpine-demo-66895487c8-sk4t4 -- /bin/sh</span><br><span class="line"><span class="comment"># 此时就不需要加上 ns2 的 namespace 了</span></span><br><span class="line">curl nginx-service</span><br></pre></td></tr></table></figure><h3 id="LoadBalancer">LoadBalancer</h3><ul class="lvl-0"><li class="lvl-2"><p>LoadBalancer 是 Kubernetes Service 的一种类型，用于自动申请一个云厂商的负载均衡器（如 AWS ELB、GCP LB、阿里云 SLB），将外部流量转发到 Kubernetes 集群内部的 Pod 上。</p></li><li class="lvl-2"><p>在私有云上，需要借助第三方负载均衡器来实现，比如 <a href="https://metallb.io">MetalLB</a>，<a href="https://github.com/metallb/metallb">github</a></p></li></ul><h4 id="安装-MetallB">安装 MetallB</h4><ul class="lvl-0"><li class="lvl-2"><p>如果您在IPVS模式下使用kube代理，从Kubernetes v1.14.2开始，您必须启用严格的ARP模式。请注意，如果您使用kube-router作为服务代理，则不需要这个，因为它默认启用了严格的ARP。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看将要产生的变更，如果有变更则返回非零状态码</span></span><br><span class="line">kubectl get configmap kube-proxy -n kube-system -o yaml | \</span><br><span class="line">sed -e <span class="string">&quot;s/strictARP: false/strictARP: true/&quot;</span> | \</span><br><span class="line">kubectl diff -f - -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实际应用变更，只有发生错误时才返回非零状态码</span></span><br><span class="line">kubectl get configmap kube-proxy -n kube-system -o yaml | \</span><br><span class="line">sed -e <span class="string">&quot;s/strictARP: false/strictARP: true/&quot;</span> | \</span><br><span class="line">kubectl apply -f - -n kube-system</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装MetalLB</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> METLB_VERSION=v0.15.2</span><br><span class="line">curl -L -o metallb.yaml https://raw.githubusercontent.com/metallb/metallb/<span class="variable">$&#123;METLB_VERSION&#125;</span>/config/manifests/metallb-native.yaml</span><br><span class="line">kubectl apply -f metallb.yaml</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看MetalLB资源</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ k get all -n metallb-system -owide</span><br><span class="line">NAME                              READY   STATUS    RESTARTS      AGE     IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">pod/controller-58fdf44d87-bsp4z   1/1     Running   0             4m13s   10.244.194.104   k8s-worker1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/speaker-sjvq5                 1/1     Running   0             4m13s   10.211.55.15     k8s-worker1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/speaker-srpp4                 1/1     Running   0             4m13s   10.211.55.16     k8s-worker2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/speaker-tbnls                 1/1     Running   2 (98s ago)   4m13s   10.211.55.11     k8s-master    &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">NAME                              TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE     SELECTOR</span><br><span class="line">service/metallb-webhook-service   ClusterIP   10.96.233.8   &lt;none&gt;        443/TCP   4m14s   component=controller</span><br><span class="line"></span><br><span class="line">NAME                     DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE     CONTAINERS   IMAGES                            SELECTOR</span><br><span class="line">daemonset.apps/speaker   3         3         3       3            3           kubernetes.io/os=linux   4m13s   speaker      quay.io/metallb/speaker:v0.15.2   app=metallb,component=speaker</span><br><span class="line"></span><br><span class="line">NAME                         READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES                               SELECTOR</span><br><span class="line">deployment.apps/controller   1/1     1            1           4m14s   controller   quay.io/metallb/controller:v0.15.2   app=metallb,component=controller</span><br><span class="line"></span><br><span class="line">NAME                                    DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES                               SELECTOR</span><br><span class="line">replicaset.apps/controller-58fdf44d87   1         1         1       4m13s   controller   quay.io/metallb/controller:v0.15.2   app=metallb,component=controller,pod-template-hash=58fdf44d87</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置地址池:metallb-pool.yaml</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">metallb.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IPAddressPool</span>                 <span class="comment"># 地址池类型</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metallb-pool</span>                <span class="comment"># 地址池名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">metallb-system</span>         <span class="comment"># 命名空间</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">addresses:</span>                        <span class="comment"># 配置地址池</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.200</span><span class="number">-10.211</span><span class="number">.55</span><span class="number">.250</span>     <span class="comment"># 与 节点 相同的网段，负载均衡器可以分配的IP范围</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f metallb-pool.yaml</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置地址池的二级公告:metallb-advertisement.yaml</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">metallb.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">L2Advertisement</span>               <span class="comment"># 地址池二级公告类型</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metallb-advertisement</span>       <span class="comment"># 公告名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">metallb-system</span>         <span class="comment"># 命名空间</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ipAddressPools:</span>                   <span class="comment"># 地址池名称列表，只有被公告的地址池才会被使用</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">metallb-pool</span>                    <span class="comment"># 地址池名称</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f metallb-advertisement.yaml</span><br></pre></td></tr></table></figure><h4 id="创建-LoadBalancer-类型的-service">创建 LoadBalancer 类型的 service</h4><ul class="lvl-0"><li class="lvl-2"><p>metallb-service.yaml</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span>                  <span class="comment"># 指定使用的 API 版本，这里是 apps/v1，适用于 Deployment 资源</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>                     <span class="comment"># Kubernetes 资源类型，这里是部署（Deployment）</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span>                       <span class="comment"># 标签，用于标识资源，可与 selector 匹配</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span>                        <span class="comment"># 资源名称，必须唯一（在同一命名空间下）</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ns1</span>                     <span class="comment"># 命名空间，默认为 default</span></span><br><span class="line"><span class="attr">spec:</span>                                <span class="comment"># 配置项</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span>                        <span class="comment"># 副本数，表示希望运行多少个 Pod 实例</span></span><br><span class="line">  <span class="attr">selector:</span>                          <span class="comment"># 选择器，指定要管理的 Pod</span></span><br><span class="line">    <span class="attr">matchLabels:</span>                     <span class="comment"># 标签选择器</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span>                     <span class="comment"># 选择器，指定 Deployment 管理哪些 Pod（标签必须与 template 中匹配）</span></span><br><span class="line">  <span class="attr">template:</span>                          <span class="comment"># 模板，定义 Pod 的内容，具体可以参考 Pod 的配置</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span>                   <span class="comment"># Pod 的标签，必须与 selector 中的 matchLabels 一致</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span>                 <span class="comment"># 容器使用的镜像，这里是官方的 nginx 镜像</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span>                  <span class="comment"># 容器的名称</span></span><br><span class="line"><span class="string">---</span>                                  <span class="comment"># 分割线</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>                       <span class="comment"># api版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span>                        <span class="comment"># 资源类型</span></span><br><span class="line"><span class="attr">metadata:</span>                            <span class="comment"># 元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span>                        <span class="comment"># service名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ns1</span>                     <span class="comment"># 命名空间</span></span><br><span class="line"><span class="attr">spec:</span>                                <span class="comment"># 配置</span></span><br><span class="line">  <span class="attr">ports:</span>                             <span class="comment"># 端口</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span>                         <span class="comment"># 集群内访问端口，service的端口，一般配置为与 targetPort 一致，但是非必须</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span>                    <span class="comment"># 协议</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span>                   <span class="comment"># 容器端口, pod的端口，这个必须与实际容器端口一致</span></span><br><span class="line">  <span class="attr">selector:</span>                          <span class="comment"># 选择器</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span>                       <span class="comment"># pod的标签，即匹配pod的标签 app=nginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span>                 <span class="comment"># service类型</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ k apply -f metallb-service.yaml</span><br><span class="line">deployment.apps/nginx created</span><br><span class="line">service/nginx created</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看service</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以看到 service 的类型为 LoadBalancer，并分配了 EXTERNAL-IP，这里还开放了nodePort 30613</span></span><br><span class="line">$ kubectl get svc -n ns1</span><br><span class="line">NAME         TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE</span><br><span class="line">nginx        LoadBalancer   10.96.210.244   10.211.55.200   80:30613/TCP   52s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>访问service</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 service 的 port 访问，这里是 80</span></span><br><span class="line">curl 10.211.55.200</span><br><span class="line"><span class="comment"># 同样可以基于 nodeIP+nodePort 访问</span></span><br><span class="line">curl 10.211.55.11:30613</span><br></pre></td></tr></table></figure><h2 id="访问service，轮询pod">访问service，轮询pod</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在集群内</span></span><br><span class="line"><span class="comment"># 在相同的 namespace 中，可以通过 serviceName 直接访问</span></span><br><span class="line">curl nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过 CLUSTER-IP 访问</span></span><br><span class="line">curl 10.96.9.77</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在不同的 namespace 中，可以通过 &lt;serviceName&gt;.&lt;namespace&gt; 或者 &lt;serviceName&gt;.&lt;namespace&gt;.svc.cluster.local 访问，比如本示例为</span></span><br><span class="line">curl nginx.default</span><br><span class="line">curl nginx.default.svc.cluster.local</span><br><span class="line"><span class="comment"># 这是因为在创建 service前，我们是不知道 service 的 IP 地址的，所以在其它pod中就可以预先使用 &lt;serviceName&gt;.&lt;namespace&gt; 占位，k8s会自动将其解析为 service 的 CLUSTER-IP</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 在集群外</span></span><br><span class="line"><span class="comment"># 通过 NODE-IP:NODE-PORT 访问</span></span><br><span class="line">curl 10.211.55.16:30080</span><br></pre></td></tr></table></figure><h2 id="管理service">管理service</h2><ul class="lvl-0"><li class="lvl-2"><p>查看service</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看service</span></span><br><span class="line">kubectl get svc</span><br><span class="line"><span class="comment"># 查看指定namespace下的service</span></span><br><span class="line">kubectl get svc -n kube-system</span><br><span class="line"><span class="comment"># 查看全部service</span></span><br><span class="line">kubectl get svc -A</span><br><span class="line"><span class="comment"># 查看service详情</span></span><br><span class="line">kubectl get svc nginx -o yaml</span><br><span class="line">kubectl describe svc nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">k logs svc/nginx</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>编辑service，保存（:wq）后生效，不需要额外 apply 或 restart</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit svc nginx</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除service</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 Service ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/&quot;&gt;k8s Service 介绍&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>acme.sh 自动申请并续签 SSL 证书的工具</title>
    <link href="https://blog.hanqunfeng.com/2025/07/17/acme/"/>
    <id>https://blog.hanqunfeng.com/2025/07/17/acme/</id>
    <published>2025-07-17T14:30:05.000Z</published>
    <updated>2025-07-19T07:00:35.350Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍自动申请并续签 SSL 证书的工具: <a href="http://acme.sh">acme.sh</a></p></li><li class="lvl-2"><p><a href="https://github.com/acmesh-official/acme.sh">acme.sh Github</a></p></li></ul><span id="more"></span><h2 id="acme-sh-介绍"><a href="http://acme.sh">acme.sh</a> 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="http://acme.sh">acme.sh</a> 实现了 acme 协议，可以从 ZeroSSL，Let’s Encrypt 等 CA 生成免费的证书。</p></li><li class="lvl-2"><p>适用场景：shell脚本方式，几乎无依赖，极简，适合不想安装Python环境的人。</p></li><li class="lvl-2"><p>特点：</p><ul class="lvl-2"><li class="lvl-4">纯 Shell 脚本，单文件运行</li><li class="lvl-4">支持 100+ DNS API 自动续签（如 Cloudflare、阿里云、腾讯云等）</li><li class="lvl-4">支持通配符证书</li></ul></li></ul><h2 id="acme-sh-安装"><a href="http://acme.sh">acme.sh</a> 安装</h2><ul class="lvl-0"><li class="lvl-2"><p>需要先安装 crontab</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 crontab</span></span><br><span class="line"><span class="built_in">sudo</span> dnf install cronie -y</span><br><span class="line"><span class="comment"># 启动 crond</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now crond</span><br><span class="line"><span class="comment"># 查看 crond 状态</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl status crond</span><br><span class="line"><span class="comment"># 查看 crontab 是否正常</span></span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>安装 <a href="http://acme.sh">acme.sh</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装成功后会自动安装到 ~/.acme.sh/ 目录下，证书也会生成在该目录下</span></span><br><span class="line">curl https://get.acme.sh | sh -s email=qunfeng_han@aliyun.com</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;alias acme.sh=~/.acme.sh/acme.sh&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装成功后会自动在 crontab 中添加了定时任务，每天检查一次证书是否到达下次更新日期，如果到期则自动更新</span></span><br><span class="line"><span class="comment"># 证书有效期默认为 90 天，还剩 30 天时会触发自动更新</span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="comment"># 输出类似于 以下内容</span></span><br><span class="line">48 1 * * * <span class="string">&quot;/root/.acme.sh&quot;</span>/acme.sh --cron --home <span class="string">&quot;/root/.acme.sh&quot;</span> &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看帮助</span></span><br><span class="line">acme.sh -h</span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">acme.sh -v</span><br></pre></td></tr></table></figure><h2 id="升级-acme-sh">升级 <a href="http://acme.sh">acme.sh</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升级 acme.sh 到最新版</span></span><br><span class="line">acme.sh --upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启自动升级</span></span><br><span class="line">acme.sh --upgrade --auto-upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以随时关闭自动更新</span></span><br><span class="line">acme.sh --upgrade --auto-upgrade  0</span><br></pre></td></tr></table></figure><h2 id="卸载-acme-sh">卸载 <a href="http://acme.sh">acme.sh</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --uninstall</span><br><span class="line"><span class="built_in">rm</span> -rf ~/.acme.sh</span><br></pre></td></tr></table></figure><h2 id="生成证书">生成证书</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="http://acme.sh">acme.sh</a> 实现了 acme 协议支持的所有验证协议。</p></li><li class="lvl-2"><p>证书创建后会保存在 ~/.acme.sh/目录下，比如我的域名是 <code>acme.hanqunfeng.com</code>，则证书保存在 <code>~/.acme.sh/acme.hanqunfeng.com_ecc/</code>目录下</p></li><li class="lvl-2"><p>创建证书时一般有两种方式验证: HTTP 和 DNS 验证。</p></li></ul><h3 id="HTTP-验证">HTTP 验证</h3><ul class="lvl-0"><li class="lvl-2"><p>只支持单个子域名的证书生成，不支持通配符域名</p></li><li class="lvl-2"><p>需要提前将域名解析到本机的IP地址</p></li></ul><h4 id="直接签发">直接签发</h4><ul class="lvl-0"><li class="lvl-2"><p>只需要指定域名，并指定域名所在的网站根目录. <a href="http://acme.sh">acme.sh</a> 会全自动的生成验证文件，并放到网站的根目录，验证完成后会聪明的删除验证文件，整个过程没有任何副作用。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -d 指定域名，可以添加多个，--webroot 指定网站根目录</span></span><br><span class="line">acme.sh --issue -d acme.hanqunfeng.com -d www.hanqunfeng.com --webroot /home/wwwroot/mydomain.com/</span><br><span class="line"></span><br><span class="line"><span class="comment"># --server 指定 acme.sh 使用的 CA 服务商为 Let&#x27;s Encrypt，默认使用 ZeroSSL</span></span><br><span class="line">acme.sh --issue -d acme.hanqunfeng.com -d www.hanqunfeng.com --webroot /home/wwwroot/mydomain.com/ --server letsencrypt</span><br></pre></td></tr></table></figure><h4 id="使用-Nginx-Apache-模式">使用 Nginx/Apache 模式</h4><ul class="lvl-0"><li class="lvl-2"><p>如果你用的 Nginx/Apache 服务器，或者反代，<a href="http://acme.sh">acme.sh</a> 还可以智能的从 Nginx/Apache 的配置中自动完成验证，你不需要指定网站根目录</p></li><li class="lvl-2"><p>nginx 或 httpd 命令要在系统Path中</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -d 域名，可以添加多个, --nginx 告诉 acme.sh 使用 Nginx 模式</span></span><br><span class="line">acme.sh --issue --nginx -d acme.hanqunfeng.com -d www.hanqunfeng.com</span><br><span class="line"><span class="comment"># -d 域名，可以添加多个, --apache 告诉 acme.sh 使用 Apache 模式</span></span><br><span class="line">acme.sh --issue --apache -d acme.hanqunfeng.com -d www.hanqunfeng.com</span><br></pre></td></tr></table></figure><h4 id="使用独立服务模式">使用独立服务模式</h4><ul class="lvl-0"><li class="lvl-2"><p>如果服务器上没有运行任何 Web 服务，80 端口是空闲的，那么 <a href="http://acme.sh">acme.sh</a> 还能假装自己是一个 WebServer，临时监听 80 端口，完成验证</p></li><li class="lvl-2"><p>需要先安装 socat 命令，socat 常用于临时开启 TCP/UDP 监听端口</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dnf install socat -y</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>生成证书，要求80端口空闲，否则会失败</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --standalone 独立服务模式</span></span><br><span class="line">acme.sh --issue --standalone -d acme.hanqunfeng.com -d www.hanqunfeng.com</span><br></pre></td></tr></table></figure><h3 id="DNS-验证">DNS 验证</h3><ul class="lvl-0"><li class="lvl-2"><p>如果你没有服务器，没有公网 IP，只需要 DNS 的解析记录即可完成验证。</p></li><li class="lvl-2"><p>支持通配符域名</p></li></ul><h4 id="手动验证">手动验证</h4><ul class="lvl-0"><li class="lvl-2"><p>这需要你手动在域名上添加一条 TXT 解析记录，验证域名所有权。</p></li><li class="lvl-2"><p>注意，如果使用手动验证，<a href="http://acme.sh">acme.sh</a> 将无法自动更新证书，每次都需要手动添加解析来验证域名所有权。如果有自动更新证书的需求，请使用自动验证（DNS API）。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要加上 --yes-I-know-dns-manual-mode-enough-go-ahead-please 选项</span></span><br><span class="line">acme.sh --issue --dns -d acme.hanqunfeng.com -d www.hanqunfeng.com --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>然后，<a href="http://acme.sh">acme.sh</a> 会生成相应的解析记录显示出来，你只需要在你的域名管理面板中添加这条 TXT 记录即可。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Add the following txt record:</span><br><span class="line">Domain:_acme-challenge.acme.hanqunfeng.com</span><br><span class="line">Txt value:mUWNg9kuQ9hwOkqYFQ_DFMQ4Eu0CEaxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">Add the following txt record:</span><br><span class="line">Domain:_acme-challenge.www.hanqunfeng.com</span><br><span class="line">Txt value:vLwDR48eHcmcScOwHrDjaFZo-yw_f9xxxxxxxxxxx</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>等待解析完成之后，执行以下命令重新生成证书：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这里现在用的是 --renew 参数</span></span><br><span class="line">acme.sh --renew -d acme.hanqunfeng.com -d www.hanqunfeng.com</span><br></pre></td></tr></table></figure><h4 id="自动验证（DNS-API）">自动验证（DNS API）</h4><ul class="lvl-0"><li class="lvl-2"><p>DNS 方式的真正强大之处在于可以使用域名解析商提供的 API 自动添加 TXT 记录，且在完成验证后删除对应的记录。</p></li><li class="lvl-2"><p><a href="http://acme.sh">acme.sh</a> 目前支持<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">超过一百家的 DNS API</a>。</p></li><li class="lvl-2"><p>以阿里云为例，登录阿里云帐号，获取 AccessKey 和 SecretKey，并设置环境变量：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只需要命令行执行一次，运行生成证书命令时会保存在 ~/.acme.sh/account.conf 中，并在需要时自动获取，无需手动再设置</span></span><br><span class="line"><span class="built_in">export</span> Ali_Key=<span class="string">&quot;&lt;key&gt;&quot;</span></span><br><span class="line"><span class="built_in">export</span> Ali_Secret=<span class="string">&quot;&lt;secret&gt;&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>生成证书</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --dns dns_ali 指定阿里云的DNS API</span></span><br><span class="line">acme.sh --issue -d acme.hanqunfeng.com -d *.hanqunfeng.com --dns dns_ali</span><br></pre></td></tr></table></figure><h2 id="生成证书的其它说明">生成证书的其它说明</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="http://acme.sh">acme.sh</a> 脚本默认 CA 服务商是 ZeroSSL，<a href="https://github.com/acmesh-official/acme.sh/wiki/Server">acme.sh 支持的CA 服务商及其使用方法</a>，可以在命令行中通过 --server 指定</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里使用 Let&#x27;s Encrypt 的 CA 服务商</span></span><br><span class="line">acme.sh --issue -d acme.hanqunfeng.com -d *.hanqunfeng.com --dns dns_ali --server letsencrypt</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>也可以设置全局默认的 CA 服务商，这样就不需要每次都指定 --server</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --set-default-ca --server letsencrypt</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em></p><ul class="lvl-1"><li class="lvl-2"><a href="http://acme.sh">acme.sh</a> 官网说 默认的 CA 服务商 ZeroSSL 不是很稳定，有时可能会导致获取证书的时候一直出现：<code>Pending，The CA is processing your order，please just wait.</code>， 此时只需要把 CA 服务器改成 Let’s Encrypt 即可，虽然更改以后还是有概率出现 pending，但基本 2-3 次即可成功。</li><li class="lvl-2">但是 Let’s Encrypt 获取的证书，不支持比较旧的设备，比如 Android 5.0 以下的设备，如果有这方面的需要还是推荐使用 ZeroSSL。</li><li class="lvl-2">常见根证书表</li></ul><table><thead><tr><th>根证书（CN）</th><th>Android 5.0</th><th>常见签发方</th></tr></thead><tbody><tr><td><strong>ISRG Root X1</strong></td><td>❌ 不兼容</td><td>Let’s Encrypt</td></tr><tr><td><strong>DST Root CA X3</strong></td><td>✅ 兼容（2021年过期）</td><td>Let’s Encrypt 老版本</td></tr><tr><td><strong>GlobalSign Root R1</strong></td><td>✅ 兼容</td><td>GlobalSign</td></tr><tr><td><strong>USERTrust RSA Certification Authority</strong></td><td>✅ 兼容</td><td>ZeroSSL, Sectigo</td></tr><tr><td><strong>Starfield Root CA - G2</strong></td><td>❌ 不兼容</td><td>GoDaddy 新版</td></tr><tr><td><strong>Starfield Root CA - G1</strong></td><td>✅ 兼容</td><td>GoDaddy 老版</td></tr><tr><td><strong>GTS Root R1/R3</strong></td><td>❌ 不兼容</td><td>Google Trust Services</td></tr><tr><td><strong>Amazon Root CA 1</strong></td><td>❌ 不兼容</td><td>Amazon Trust</td></tr></tbody></table><ul class="lvl-1"><li class="lvl-2"><p>可以用在线工具直接查看证书链：<a href="https://www.ssllabs.com/ssltest/">https://www.ssllabs.com/ssltest/</a> ，它会显示完整证书链和各种设备的兼容性</p></li></ul></div><ul class="lvl-0"><li class="lvl-2"><p>查看已经生成的证书</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ acme.sh --list</span><br><span class="line">Main_Domain          KeyLength  SAN_Domains  CA           Created               Renew</span><br><span class="line">acme.hanqunfeng.com  <span class="string">&quot;ec-256&quot;</span>   no           ZeroSSL.com  2025-07-17T03:31:30Z  2025-09-14T03:31:30Z</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果生成证书时失败，可以通过添加 --debug 参数查看详细错误信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue -d acme.hanqunfeng.com -d *.hanqunfeng.com --dns dns_ali --server letsencrypt --debug</span><br><span class="line"><span class="comment"># --debug 2 输出更为详细的信息</span></span><br><span class="line">acme.sh --issue -d acme.hanqunfeng.com -d *.hanqunfeng.com --dns dns_ali --server letsencrypt --debug 2</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>目前证书每 60 天自动更新，你无需任何操作。但是你也可以强制续签证书：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这里要将 --issue 改为 --renew，--issue 只有第一次生成正式时才会使用。同时加上 --force，未到更新时间强制重新生成证书。</span></span><br><span class="line">acme.sh --renew -d acme.hanqunfeng.com -d *.hanqunfeng.com --dns dns_ali --server letsencrypt --force</span><br></pre></td></tr></table></figure><h2 id="生成证书后自动部署和更新">生成证书后自动部署和更新</h2><ul class="lvl-0"><li class="lvl-2"><p>上面无论是 http 还是 dns 模式，生成证书后，都会在 ~/.acme.sh/acme.hanqunfeng.com_ecc/ 目录下生成以下文件：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── acme.hanqunfeng.com.cer</span><br><span class="line">├── acme.hanqunfeng.com.conf</span><br><span class="line">├── acme.hanqunfeng.com.csr</span><br><span class="line">├── acme.hanqunfeng.com.csr.conf</span><br><span class="line">├── acme.hanqunfeng.com.key</span><br><span class="line">├── ca.cer</span><br><span class="line">└── fullchain.cer</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>我们可以手动将证书拷贝到真正使用证书的目录下，如果我们使用nginx或者apache，可以让 <a href="http://acme.sh">acme.sh</a> 帮我们自动将证书拷贝到正确的目录下，并重启服务使证书生效，我们只需要通过如下命令进行设置即可，只需要运行一次命令，后续会通过 crontab 进行自动更新证书并完成部署。</p></li><li class="lvl-2"><p>Nginx</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --install-cert \</span><br><span class="line">-d acme.hanqunfeng.com \                               <span class="comment"># 生成证书时指定的域名</span></span><br><span class="line">--key-file /path/to/keyfile/in/nginx/key.pem \    <span class="comment"># nginx 中配置的 key 文件路径</span></span><br><span class="line">--fullchain-file /path/to/fullchain/nginx/cert.pem \  <span class="comment"># nginx 中配置的证书文件路径</span></span><br><span class="line">--reloadcmd <span class="string">&quot;systemctl reload nginx&quot;</span>                   <span class="comment"># nginx 重载命令，也可以使用 nginx -s reload</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>文件对应关系</p></li></ul><table><thead><tr><th><a href="http://acme.sh">acme.sh</a> 文件</th><th>含义</th><th>你配置的目标文件</th></tr></thead><tbody><tr><td><code>acme.hanqunfeng.com.key</code></td><td><strong>私钥 (Private Key)</strong></td><td><code>/path/to/keyfile/in/nginx/key.pem</code></td></tr><tr><td><code>fullchain.cer</code></td><td><strong>证书 + 中间证书链 (Fullchain)</strong></td><td><code>/path/to/fullchain/nginx/cert.pem</code></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>Apache</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --install-cert \</span><br><span class="line">-d acme.hanqunfeng.com \</span><br><span class="line">--cert-file      /path/to/certfile/in/apache/cert.pem  \ <span class="comment"># apache 证书文件</span></span><br><span class="line">--key-file       /path/to/keyfile/in/apache/key.pem  \   <span class="comment"># apache 密钥文件</span></span><br><span class="line">--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \ <span class="comment"># apache 全链文件</span></span><br><span class="line">--reloadcmd     <span class="string">&quot;systemctl reload httpd&quot;</span>  <span class="comment"># apache 重载命令</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>文件对应关系</p></li></ul><table><thead><tr><th><a href="http://acme.sh">acme.sh</a> 文件</th><th>含义</th><th>你配置的目标文件</th></tr></thead><tbody><tr><td><code>acme.hanqunfeng.com.key</code></td><td><strong>私钥 (Private Key)</strong></td><td><code>/path/to/keyfile/in/apache/key.pem</code></td></tr><tr><td><code>acme.hanqunfeng.com.cer</code></td><td><strong>仅域名证书 (Certificate)</strong></td><td><code>/path/to/certfile/in/apache/cert.pem</code></td></tr><tr><td><code>fullchain.cer</code></td><td><strong>证书 + 中间证书链 (Fullchain)</strong></td><td><code>/path/to/fullchain/certfile/apache/fullchain.pem</code></td></tr></tbody></table><h2 id="停止自动更新并删除证书">停止自动更新并删除证书</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止自动更新</span></span><br><span class="line">acme.sh --remove -d acme.hanqunfeng.com --ecc</span><br><span class="line"><span class="comment"># 删除证书</span></span><br><span class="line"><span class="built_in">rm</span> -rf ~/.acme.sh/acme.hanqunfeng.com_ecc</span><br></pre></td></tr></table></figure><h2 id="其它ssl自动续签工具">其它ssl自动续签工具</h2><table><thead><tr><th>工具</th><th>推荐场景</th><th>官网地址</th><th>依赖</th></tr></thead><tbody><tr><td>Certbot</td><td>传统服务器、Nginx/Apache</td><td><a href="https://certbot.eff.org/">https://certbot.eff.org/</a></td><td>Python</td></tr><tr><td>Lego</td><td>静态二进制、K8s</td><td><a href="https://github.com/go-acme/lego">https://github.com/go-acme/lego</a></td><td>无依赖</td></tr><tr><td>cert-manager</td><td>K8s 集群</td><td><a href="https://cert-manager.io/">https://cert-manager.io/</a></td><td>K8s CRD</td></tr><tr><td>Caddy</td><td>简单站点自动HTTPS</td><td><a href="https://caddyserver.com/">https://caddyserver.com/</a></td><td>无需单独工具</td></tr><tr><td>Traefik</td><td>微服务网关</td><td><a href="https://traefik.io/">https://traefik.io/</a></td><td>Docker/K8s</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍自动申请并续签 SSL 证书的工具: &lt;a href=&quot;http://acme.sh&quot;&gt;acme.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/acmesh-official/acme.sh&quot;&gt;acme.sh Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="acme" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/acme/"/>
    
    <category term="ssl" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/acme/ssl/"/>
    
    <category term="certificate" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/acme/ssl/certificate/"/>
    
    
    <category term="ssl" scheme="https://blog.hanqunfeng.com/tags/ssl/"/>
    
    <category term="acme" scheme="https://blog.hanqunfeng.com/tags/acme/"/>
    
  </entry>
  
</feed>
