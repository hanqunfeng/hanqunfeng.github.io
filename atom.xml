<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飘逸峰的博客</title>
  
  <subtitle>Spring--Java程序员的春天</subtitle>
  <link href="https://blog.hanqunfeng.com/atom.xml" rel="self"/>
  
  <link href="https://blog.hanqunfeng.com/"/>
  <updated>2025-09-21T08:09:56.959Z</updated>
  <id>https://blog.hanqunfeng.com/</id>
  
  <author>
    <name>飘逸峰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RabbitMQ 之 Message</title>
    <link href="https://blog.hanqunfeng.com/2025/09/21/rabbitmq-message/"/>
    <id>https://blog.hanqunfeng.com/2025/09/21/rabbitmq-message/</id>
    <published>2025-09-21T14:30:05.000Z</published>
    <updated>2025-09-21T08:09:56.959Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 RabbitMQ 的 Message 的基本概念和用法。</p></li><li class="lvl-2"><p><a href="https://www.rabbitmq.com">Zookeeper官网</a></p></li><li class="lvl-2"><p>本文使用的 RabbitMQ 版本为 4.1.4。</p></li></ul><span id="more"></span><h2 id="Message-消息-是什么？">Message(消息) 是什么？</h2><ul class="lvl-0"><li class="lvl-2"><p>在 RabbitMQ 中，Message（消息）是消息队列中的数据单元。消息包含消息内容、消息属性等信息。</p></li><li class="lvl-2"><p>Message 组成：</p><ul class="lvl-2"><li class="lvl-4"><ol><li class="lvl-7">消息内容：消息的内容，可以是任意数据。</li></ol></li><li class="lvl-4"><ol start="2"><li class="lvl-7">消息属性：消息的属性，如消息的过期时间、消息的优先级、消息的标签等。</li></ol></li></ul></li></ul><h2 id="Publish-message">Publish message</h2><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/dHsDyt.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>Payload：消息的内容，可以是任意数据。</p></li><li class="lvl-2"><p>Payload encoding：消息内容的编码方式，<code>String</code> 或者 <code>Base64</code>，默认为 <code>String</code>。</p></li><li class="lvl-2"><p>Delivery mode：消息的持久化模式，1 表示非持久化，2 表示持久化。</p></li><li class="lvl-2"><p>Headers：消息的头信息，用于与 <code>Headers Exchange（头部交换机）</code>中的配置进行匹配。</p></li><li class="lvl-2"><p>Properties：消息的属性，如消息的过期时间、消息的优先级、消息的标签等。</p></li></ul><table><thead><tr><th>属性名</th><th>中文含义</th><th>数据类型</th><th>默认值</th><th>典型用途</th></tr></thead><tbody><tr><td>content_type</td><td>内容类型</td><td>String</td><td>null</td><td>指定消息的 MIME 类型，如 <code>&quot;text/plain&quot;</code>、<code>&quot;application/json&quot;</code></td></tr><tr><td>content_encoding</td><td>内容编码</td><td>String</td><td>null</td><td>指定消息内容的编码方式，如 <code>&quot;gzip&quot;</code></td></tr><tr><td>priority</td><td>消息优先级</td><td>Integer (0-255)</td><td>0</td><td>结合 <code>x-max-priority</code> 控制消息处理顺序，数值越大优先级越高</td></tr><tr><td>correlation_id</td><td>关联 ID</td><td>String</td><td>null</td><td>RPC 模式中关联请求与响应</td></tr><tr><td>reply_to</td><td>回复队列名</td><td>String</td><td>null</td><td>RPC 模式中指定响应消息的返回队列</td></tr><tr><td>expiration</td><td>消息过期时间</td><td>String (ms)</td><td>null</td><td>消息的 TTL，毫秒为单位，过期后将被丢弃或进入死信队列</td></tr><tr><td>message_id</td><td>消息 ID</td><td>String</td><td>null</td><td>唯一标识一条消息，通常由生产者指定</td></tr><tr><td>timestamp</td><td>时间戳</td><td>Date / Long</td><td>null</td><td>消息发送时间，通常是 Unix 时间戳</td></tr><tr><td>type</td><td>消息类型</td><td>String</td><td>null</td><td>描述消息类型，如 <code>&quot;order&quot;</code> 或 <code>&quot;event&quot;</code></td></tr><tr><td>user_id</td><td>用户 ID</td><td>String</td><td>null</td><td>标识发送消息的用户，通常用于安全或审计</td></tr><tr><td>app_id</td><td>应用 ID</td><td>String</td><td>null</td><td>标识发送消息的应用程序</td></tr><tr><td>cluster_id</td><td>集群 ID</td><td>String</td><td>null</td><td>RabbitMQ 集群 ID，实际中很少使用</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>与队列重叠的属性：</p></li></ul><table><thead><tr><th>参数名称</th><th>队列参数（Queue Arguments）</th><th>消息属性（Message Properties）</th><th>谁的优先级更高 / 生效方式</th></tr></thead><tbody><tr><td><strong>priority / x-max-priority</strong></td><td><code>x-max-priority</code>: 定义队列支持的<strong>最大优先级值</strong></td><td><code>priority</code>: 为单个消息设置优先级</td><td>队列先定义范围，消息只能在这个范围内取值 <br> 若 <code>priority &gt; x-max-priority</code>，则以<code>x-max-priority</code>为准</td></tr><tr><td><strong>expiration / x-message-ttl</strong></td><td><code>x-message-ttl</code>: 队列级别的消息<strong>统一 TTL</strong></td><td><code>expiration</code>: 为单个消息设置 TTL（毫秒）</td><td>如果同时设置，<strong>较短的 TTL</strong> 会生效</td></tr></tbody></table><h2 id="Get-message">Get message</h2><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/Ar9qob.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>Ack Mode：消息确认模式</p><ul class="lvl-2"><li class="lvl-4">Nack message requeue true: 确认失败，消息重新入队</li><li class="lvl-4">Automatic ack: 自动确认</li><li class="lvl-4">Reject requeue true: 拒绝，消息重新入队</li><li class="lvl-4">Reject requeue false: 拒绝，消息不重新入队</li></ul></li><li class="lvl-2"><p>Encoding：消息内容编码方式</p><ul class="lvl-2"><li class="lvl-4"><code>Auto String / Base64</code>，默认。如果消息载荷可以解释为UTF-8编码的字符串，就是 <code>String</code>，否则就是 <code>Base64</code>。</li><li class="lvl-4"><code>Base64</code>。</li></ul></li><li class="lvl-2"><p>Messages: 一次获取消息数量，默认为 1。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 RabbitMQ 的 Message 的基本概念和用法。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rabbitmq.com&quot;&gt;Zookeeper官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文使用的 RabbitMQ 版本为 4.1.4。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="rabbitmq" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/rabbitmq/"/>
    
    <category term="分布式" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/rabbitmq/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="rabbitmq" scheme="https://blog.hanqunfeng.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 之 Exchange</title>
    <link href="https://blog.hanqunfeng.com/2025/09/21/rabbitmq-exchange/"/>
    <id>https://blog.hanqunfeng.com/2025/09/21/rabbitmq-exchange/</id>
    <published>2025-09-21T13:30:05.000Z</published>
    <updated>2025-09-21T08:09:56.946Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 RabbitMQ 的 Exchange 的基本概念和用法。</p></li><li class="lvl-2"><p><a href="https://www.rabbitmq.com">Zookeeper官网</a></p></li><li class="lvl-2"><p>本文使用的 RabbitMQ 版本为 4.1.4。</p></li></ul><span id="more"></span><h2 id="Exchange-交换机-是什么？">Exchange(交换机) 是什么？</h2><ul class="lvl-0"><li class="lvl-2"><p>在 RabbitMQ 中，<a href="https://www.rabbitmq.com/docs/exchanges">Exchange（交换机）</a> 是消息路由的核心组件。它负责接收生产者发送的消息，并根据预定义的路由规则将消息转发到一个或多个队列。</p></li><li class="lvl-2"><p>Exchange 类型决定了消息的路由方式。RabbitMQ 支持的 Exchange 类型</p></li></ul><table><thead><tr><th>Exchange 类型</th><th>声明类型</th><th>路由规则描述</th><th>典型用途</th></tr></thead><tbody><tr><td><strong>Direct</strong></td><td><code>direct</code></td><td>消息根据 <strong>路由键（routing key）</strong> 精确匹配绑定键（binding key）进行路由。</td><td>精确消息传递，如日志分类、任务分发等。</td></tr><tr><td><strong>Fanout</strong></td><td><code>fanout</code></td><td>消息广播到所有绑定的队列，<strong>忽略路由键</strong>。</td><td>广播消息，如发布/订阅模式、实时通知等。</td></tr><tr><td><strong>Topic</strong></td><td><code>topic</code></td><td>消息根据路由键与绑定键模式的匹配进行路由，支持通配符 <code>*</code>（匹配一个词）和 <code>#</code>（匹配零个或多个词）。</td><td>模块化路由，如日志系统、事件驱动架构等。</td></tr><tr><td><strong>Headers</strong></td><td><code>headers</code></td><td>消息根据 <strong>消息头部（headers）</strong> 与绑定时指定的头部匹配进行路由，支持 <code>x-match</code> 参数（<code>any</code> 或 <code>all</code>）。</td><td>多条件路由，如复杂过滤、动态路由等。</td></tr><tr><td><strong>Local Random Exchange</strong></td><td><code>x-local-random</code></td><td>消息始终被路由到本地队列，如果有多个本地队列绑定，则随机选择一个进行投递。</td><td>请求-响应（RPC）模式，低延迟通信</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>RabbitMQ 默认为我们提供了如下的交换机<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/SKlqQK.png" alt=""></p></li><li class="lvl-2"><p>每新创建一个 Vhost，RabbitMQ 就会自动创建以下交换机，比如 <code>/vtest</code><br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/oGJ1oj.png" alt=""></p></li><li class="lvl-2"><p>当然我们也可以根据需要创建新的交换机<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/QjnZin.png" alt=""></p></li><li class="lvl-2"><p>配置说明</p><ul class="lvl-2"><li class="lvl-4">Durability: 指定 Exchange 是否持久化。<ul class="lvl-4"><li class="lvl-6">Durable: 持久化的 Exchange 会被保存在磁盘上，重启 RabbitMQ 时会自动恢复。</li><li class="lvl-6">Transient: 非持久化的 Exchange 会被保存在内存中，重启 RabbitMQ 时会丢失。</li></ul></li><li class="lvl-4">Auto-delete: 指定 Exchange 是否自动删除。<ul class="lvl-4"><li class="lvl-6">yes: 如果没有队列或交换机绑定该 Exchange，则该 Exchange 会自动删除。</li><li class="lvl-6">no: 该 Exchange 不会自动删除。</li></ul></li><li class="lvl-4">Internal: 用于控制交换机是否可以被生产者直接发布消息<ul class="lvl-4"><li class="lvl-6">yes: 不能被生产者直接发送消息，该交换机只能用于 将消息从其他交换机转发到该交换机。</li><li class="lvl-6">no: 可以被生产者直接发送消息。</li></ul></li><li class="lvl-4">Arguments: 用于设置 Exchange 的其他参数，目前仅支持一个参数<ul class="lvl-4"><li class="lvl-6">Alternate exchange(alternate-exchange): 指定该 Exchange 的备用交换机，如果无法以其他方式将发往此交换机的消息路由出去，则将它们发送至此处指定的备用交换机。</li></ul></li></ul></li></ul><h2 id="Direct-Exchange（直接交换机）">Direct Exchange（直接交换机）</h2><ul class="lvl-0"><li class="lvl-2"><p>路由规则：消息的路由键与队列的绑定键完全匹配时，消息被路由到该队列。</p></li><li class="lvl-2"><p>示例：如果队列绑定键为 error，则只有路由键为 error 的消息会被路由到该队列。</p></li><li class="lvl-2"><p>适用场景：需要精确匹配的场景，如日志分类、任务分发等。</p></li></ul><h2 id="Fanout-Exchange（扇出交换机）">Fanout Exchange（扇出交换机）</h2><ul class="lvl-0"><li class="lvl-2"><p>路由规则：消息广播到所有绑定的队列，忽略路由键。</p></li><li class="lvl-2"><p>示例：无论消息的路由键是什么，都会被路由到所有绑定的队列。</p></li><li class="lvl-2"><p>适用场景：广播消息，如发布/订阅模式、实时通知等。</p></li></ul><h2 id="Topic-Exchange（主题交换机）">Topic Exchange（主题交换机）</h2><ul class="lvl-0"><li class="lvl-2"><p>路由规则：消息的路由键与队列的绑定键模式匹配时，消息被路由到该队列。支持通配符 *（匹配一个词）和 #（匹配零个或多个词）。</p></li><li class="lvl-2"><p>示例：如果队列绑定键为 <em>.orange.</em>，则路由键为 quick.orange.rabbit 的消息会被路由到该队列。</p></li><li class="lvl-2"><p>适用场景：模块化路由，如日志系统、事件驱动架构等。</p></li></ul><h2 id="Headers-Exchange（头部交换机）">Headers Exchange（头部交换机）</h2><ul class="lvl-0"><li class="lvl-2"><p>路由规则：消息的头部与队列的绑定头部匹配时，消息被路由到该队列。支持 x-match 参数（any 或 all）。即使配置了路由键也会忽略。</p></li><li class="lvl-2"><p>示例：如果队列绑定头部为 { “x-match”: “all”, “format”: “pdf”, “priority”: “high” }，则只有同时满足这两个条件的消息会被路由到该队列。</p></li><li class="lvl-2"><p>适用场景：多条件路由，如复杂过滤、动态路由等。</p></li></ul><h2 id="Local-Random-Exchange（本地随机交换机）">Local Random Exchange（本地随机交换机）</h2><ul class="lvl-0"><li class="lvl-2"><p>Local Random Exchange 是 RabbitMQ 4.0 引入的交换机类型，旨在优化<code>请求-响应</code>模式下的消息路由，特别适用于低延迟和高吞吐量的场景。通过结合独占队列使用，可以确保消息快速传递到本地消费者，减少网络延迟，提高系统性能。</p></li><li class="lvl-2"><p>路由规则：消息始终被路由到本地队列（位于同一节点上），如果有多个本地队列绑定，则随机选择一个进行投递。</p></li><li class="lvl-2"><p>示例：假设节点 A 上有两个绑定了 x-local-random 交换机的队列 Q1 和 Q2，发布的消息会随机路由到 Q1 或 Q2，但不会路由到其他节点的队列。</p></li><li class="lvl-2"><p>适用场景：请求-响应（RPC）模式下的低延迟通信，适合微服务架构中每个节点上都有消费者的场景。</p></li><li class="lvl-2"><p>在使用 Local Random Exchange 时，必须满足以下条件：</p><ul class="lvl-2"><li class="lvl-4">独占队列：消费者应声明独占队列，以确保队列仅绑定到当前节点。</li><li class="lvl-4">每个节点至少一个消费者：每个 RabbitMQ 节点上应至少有一个消费者，否则在该节点上发布的消息将被丢弃。</li><li class="lvl-4">交换机类型声明：使用 <code>x-local-random</code> 类型声明交换机。</li></ul></li></ul><h2 id="Exchange-与-Queue-绑定-Binding">Exchange 与 Queue 绑定(Binding)</h2><ul class="lvl-0"><li class="lvl-2"><p>创建好 Exchange 之后，需要将 Exchange 与 Queue 绑定，才能将消息发送到指定的队列。</p></li><li class="lvl-2"><p>Exchange 与 Queue 的绑定关系，即 Exchange 发送的消息，会根据路由键与队列的绑定键进行匹配，如果匹配成功，则将消息发送到对应的队列。</p></li><li class="lvl-2"><p>在 Exchange 页面点击 Exchange 的名称，进入 Exchange 详情页面，此处可以进行 Exchange 与 Queue 绑定配置<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/taKUjm.png" alt=""></p><blockquote><p>这里的<code>Arguments</code>用于设置 绑定 的其他参数，比如 <code>Headers Exchange</code> 需要设置 <code>x-match</code> 参数等。</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 RabbitMQ 的 Exchange 的基本概念和用法。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rabbitmq.com&quot;&gt;Zookeeper官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文使用的 RabbitMQ 版本为 4.1.4。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="rabbitmq" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/rabbitmq/"/>
    
    <category term="分布式" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/rabbitmq/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="rabbitmq" scheme="https://blog.hanqunfeng.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 之 Queue</title>
    <link href="https://blog.hanqunfeng.com/2025/09/20/rabbitmq-queue/"/>
    <id>https://blog.hanqunfeng.com/2025/09/20/rabbitmq-queue/</id>
    <published>2025-09-20T13:30:05.000Z</published>
    <updated>2025-09-21T06:21:38.865Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 RabbitMQ 的 Queue 的基本概念和用法。</p></li><li class="lvl-2"><p><a href="https://www.rabbitmq.com">Zookeeper官网</a></p></li><li class="lvl-2"><p>本文使用的 RabbitMQ 版本为 4.1.4。</p></li></ul><span id="more"></span><h2 id="Queue-队列-是什么？">Queue(队列) 是什么？</h2><ul class="lvl-0"><li class="lvl-2"><p>在 RabbitMQ 中，<a href="https://www.rabbitmq.com/docs/queues">队列（Queue）</a> 是一种用于存储消息的 数据结构，消息会一直保存在队列中，直到被应用程序或服务消费为止。</p></li><li class="lvl-2"><p>生产者（Publisher） 把消息放进队列，消费者（Consumer） 从队列中取出消息。队列中的消息会按照 FIFO（先进先出）的顺序进行消费。</p></li><li class="lvl-2"><p>队列在生产者和消费者之间起到缓冲区的作用。生产者不需要知道消费者的存在，它们只需把消息发送到队列。消费者可以根据自身处理速度，按需消费消息。</p></li><li class="lvl-2"><p>RabbitMQ 目前 支持三种队列类型：</p></li></ul><table><thead><tr><th>队列类型</th><th>描述</th><th>特点</th><th>典型用途</th></tr></thead><tbody><tr><td><strong>Classic Queue（经典队列）</strong></td><td>最常用的队列类型，消息按 FIFO（先进先出）顺序存储和消费</td><td>支持持久化、优先级、TTL、死信等</td><td>大多数常规消息场景</td></tr><tr><td><strong>Quorum Queue（仲裁队列）</strong></td><td>基于 Raft 协议的队列，确保高可用和数据一致性</td><td>内置复制（副本数量可配置）、适合高可靠性场景，但吞吐量略低于经典队列</td><td>关键任务消息、高可靠性场景</td></tr><tr><td><strong>Stream Queue（流式队列）</strong></td><td>面向大量消息的高吞吐队列，支持消息按偏移量读取</td><td>类似 Kafka，可随机访问历史消息、顺序读取、可持久化大量消息</td><td>大数据流、日志处理、事件溯源</td></tr></tbody></table><h2 id="Classic-Queue-经典队列">Classic Queue(经典队列)</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.rabbitmq.com/docs/classic-queues">RabbitMQ 经典队列（原始队列类型）</a>是一种通用队列类型。实际上它是在 3.8.x 版本之前唯一的队列类型。</p></li><li class="lvl-2"><p>经典队列适用于数据安全不是优先事项的用例，因为存储在经典队列中的数据不会被复制。 经典队列使用非复制的 FIFO 队列实现。</p></li><li class="lvl-2"><p>经典队列不适合积累太多的消息，如果队列中积累的消息太多了，会严重影响客户端生产消息以及消费消息的性能。因此，经典队列主要用在数据量比较小，并且生产消息和消费消息的速度比较稳定的业务场景。比如内部系统之间的服务调用。</p></li><li class="lvl-2"><p>RabbitMQ 4.0 删除了对经典队列版本 1 的支持。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/MAdpRV.png" alt=""></p></li><li class="lvl-2"><p>参数说明(每个版本可能都有变化，具体以页面显示为准)</p></li></ul><table><thead><tr><th>参数名称</th><th>配置参数名</th><th>数据类型</th><th>作用说明</th><th>备注 / 使用场景</th></tr></thead><tbody><tr><td><strong>Auto expire</strong></td><td><code>x-expires</code></td><td>整数（毫秒）</td><td>队列在 <strong>指定时间内无人使用（无消费者、无发布、无访问）</strong> 时自动删除</td><td>类似“队列空闲过期时间”，节省资源</td></tr><tr><td><strong>Message TTL</strong></td><td><code>x-message-ttl</code></td><td>整数（毫秒）</td><td>消息的 <strong>存活时间</strong>，超过时间后消息会被丢弃或发送到死信队列</td><td>用于限制消息时效性，如延迟消息或短期缓存</td></tr><tr><td><strong>Overflow behaviour</strong></td><td><code>x-overflow</code></td><td>字符串（<code>drop-head</code> 或 <code>reject-publish</code>）</td><td>当队列达到 <strong>最大长度</strong> 或 <strong>最大字节数</strong> 时的行为</td><td>- <code>drop-head</code>：丢弃最早的消息 <br> - <code>reject-publish</code>：拒绝新的消息</td></tr><tr><td><strong>Single active consumer</strong></td><td><code>x-single-active-consumer</code></td><td>布尔值（true/false）</td><td>是否启用 <strong>单活消费者模式</strong>，一次只允许一个消费者消费队列</td><td>用于严格顺序消费，保证某个消息不会被多个消费者同时处理</td></tr><tr><td><strong>Dead letter exchange (DLX)</strong></td><td><code>x-dead-letter-exchange</code></td><td>字符串</td><td>指定队列的 <strong>死信交换机</strong>，用于接收无法消费或过期的消息</td><td>常用于失败重试、消息补偿场景</td></tr><tr><td><strong>Dead letter routing key</strong></td><td><code>x-dead-letter-routing-key</code></td><td>字符串</td><td>消息转发到 DLX 时的 <strong>路由键</strong></td><td>可以灵活转发到不同队列</td></tr><tr><td><strong>Max length</strong></td><td><code>x-max-length</code></td><td>整数</td><td>队列中 <strong>最大消息条数</strong></td><td>超过时按照 Overflow behaviour 处理</td></tr><tr><td><strong>Max length bytes</strong></td><td><code>x-max-length-bytes</code></td><td>整数（字节）</td><td>队列中 <strong>消息总字节数上限</strong></td><td>超过时按照 Overflow behaviour 处理，适合大消息场景</td></tr><tr><td><strong>Maximum priority</strong></td><td><code>x-max-priority</code></td><td>整数</td><td>启用优先级队列时，队列可设置的 <strong>最大优先级值</strong></td><td>消息优先级范围是 0 到这个值，优先级高的消息先被消费</td></tr><tr><td><strong>Leader locator</strong></td><td><code>x-queue-leader-locator</code></td><td>字符串（<code>client-local</code>、<code>balanced</code>）</td><td>设置在集群节点上声明队列时，队列主节点（Leader）的选取规则</td><td><code>client-local</code>（默认）：选择客户端所在节点作为Leader <br> <code>balanced</code>：在节点间均衡Leader分布，用于 HA 队列优化</td></tr></tbody></table><h2 id="Quorum-Queue-仲裁队列">Quorum Queue(仲裁队列)</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.rabbitmq.com/docs/quorum-queues">仲裁队列（Quorum Queue）</a> 是 RabbitMQ 从3.8.0版本之后引入的一种现代队列类型，也是目前官方比较推荐的一种对列类型。</p></li><li class="lvl-2"><p>其基于 Raft 共识算法 实现 持久化、复制和高可用。它保证 数据安全性、可靠的主节点选举，即使在升级或集群波动期间也能保持高可用性。</p></li><li class="lvl-2"><p>仲裁队列支持 毒消息处理、至少一次死信投递 以及 AMQP 修改（AMQP.modified）的处理结果。</p></li><li class="lvl-2"><p>它适合 以数据安全为首要目标 的场景。与经典队列相比，Quorum是以牺牲很多高级队列特性为代价，来进一步保证消息在分布式环境下的高可靠。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/oQ8YiT.png" alt=""></p></li><li class="lvl-2"><p>仲裁队列（Quorum Queue）的 <code>Durability</code> 只能设置为 Durable(true)。<code>Auto delete</code> 只能为 No(false)。</p></li><li class="lvl-2"><p>参数说明(每个版本可能都有变化，具体以页面显示为准)</p></li></ul><table><thead><tr><th>参数名称</th><th>配置参数名</th><th>数据类型</th><th>作用说明</th><th>备注 / 使用场景</th></tr></thead><tbody><tr><td><strong>Auto expire</strong></td><td><code>x-expires</code></td><td>整数（毫秒）</td><td>队列在指定时间内无人使用（无消费者、无发布、无访问）时自动删除</td><td>节省资源，队列空闲过期时间</td></tr><tr><td><strong>Message TTL</strong></td><td><code>x-message-ttl</code></td><td>整数（毫秒）</td><td>队列中消息的生存时间，超过时间后消息会被丢弃或转入死信队列</td><td>控制消息时效性</td></tr><tr><td><strong>Overflow behaviour</strong></td><td><code>x-overflow</code></td><td>字符串（<code>drop-head</code> 或 <code>reject-publish</code>）</td><td>当队列达到最大长度时的处理方式</td><td><code>drop-head</code>：丢弃最早消息，<code>reject-publish</code>：拒绝新消息</td></tr><tr><td><strong>Single active consumer</strong></td><td><code>x-single-active-consumer</code></td><td>布尔值（true/false）</td><td>是否启用单活消费者模式，一次只允许一个消费者消费队列</td><td>保证严格顺序消费</td></tr><tr><td><strong>Dead letter exchange (DLX)</strong></td><td><code>x-dead-letter-exchange</code></td><td>字符串</td><td>指定队列的死信交换机，用于接收无法消费或过期的消息</td><td>与 DLX 配合使用处理失败消息</td></tr><tr><td><strong>Dead letter routing key</strong></td><td><code>x-dead-letter-routing-key</code></td><td>字符串</td><td>消息转发到 DLX 时的路由键</td><td>灵活路由死信消息</td></tr><tr><td><strong>Max length</strong></td><td><code>x-max-length</code></td><td>整数</td><td>队列中最大消息条数</td><td>超过时按 Overflow behaviour 处理</td></tr><tr><td><strong>Max length bytes</strong></td><td><code>x-max-length-bytes</code></td><td>整数（字节）</td><td>队列消息总字节数上限</td><td>超过时按 Overflow behaviour 处理</td></tr><tr><td><strong>Delivery limit</strong></td><td><code>x-delivery-limit</code></td><td>整数</td><td>消息允许投递的最大次数，超过后变为死信</td><td>控制消息重试次数</td></tr><tr><td><strong>Initial cluster size</strong></td><td><code>x-quorum-initial-group-size</code></td><td>整数</td><td>队列在创建时需要的最小节点数</td><td>用于保证仲裁队列的高可用性</td></tr><tr><td><strong>Target cluster size</strong></td><td><code>x-quorum-target-group-size</code></td><td>整数</td><td>队列运行时的目标节点数</td><td>当集群节点变化时，仲裁队列会尝试调整副本数量</td></tr><tr><td><strong>Dead letter strategy</strong></td><td><code>x-dead-letter-strategy</code></td><td>字符串（<code>at-most-once</code>、<code>at-least-once</code>）</td><td>设置仲裁队列的死信处理策略</td><td>仅适用于 Quorum Queue。<br><code>at-most-once</code>（默认）：消息最多投递一次，可能丢失。<br><code>at-least-once</code>：确保消息至少投递一次，必须将 Overflow behaviour 设置为 <code>reject-publish</code>，否则回退到 <code>at-most-once</code>。</td></tr><tr><td><strong>Leader locator</strong></td><td><code>x-queue-leader-locator</code></td><td>字符串（<code>client-local</code>、<code>balanced</code>）</td><td>设置在集群节点上声明队列时，队列主节点（Leader）的选取规则</td><td><code>client-local</code>：选择客户端所在节点作为 Leader <br> <code>balanced</code>：在节点间均衡 Leader 分布</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>Quorum Queues 和 Classic Queues 的功能对比如下：</p></li></ul><table><thead><tr><th>Feature</th><th>中文含义</th><th>Classic queues</th><th>Quorum queues</th><th>说明</th></tr></thead><tbody><tr><td>Non-durable queues</td><td>非持久化队列</td><td>yes</td><td>no</td><td>Quorum queues 总是持久化，不支持非持久化</td></tr><tr><td>Message replication</td><td>消息复制</td><td>no</td><td>yes</td><td>Quorum queues 内置消息复制，Classic queues 需镜像策略</td></tr><tr><td>Exclusivity</td><td>独占队列</td><td>yes</td><td>no</td><td>Classic queues 支持独占队列，Quorum queues 不支持独占</td></tr><tr><td>Per message persistence</td><td>消息级持久化</td><td>per message</td><td>always</td><td>Quorum queues 消息总是持久化</td></tr><tr><td>Membership changes</td><td>节点成员变更</td><td>no</td><td>semi-automatic</td><td>Quorum queues 节点变化时半自动处理复制</td></tr><tr><td>Message TTL (Time-To-Live)</td><td>消息存活时间</td><td>yes</td><td>yes</td><td>两者都支持消息过期时间</td></tr><tr><td>Queue TTL</td><td>队列存活时间</td><td>yes</td><td>partially</td><td>Quorum queues 的 lease 不会因重新声明而续期</td></tr><tr><td>Queue length limits</td><td>队列长度限制</td><td>yes</td><td>yes</td><td>Quorum queues 支持长度限制，但 <code>x-overflow=reject-publish-dlx</code> 不支持</td></tr><tr><td>Keeps messages in memory</td><td>消息内存保存</td><td>see Classic Queues</td><td>never</td><td>Quorum queues 消息总是写入磁盘，不保留在内存</td></tr><tr><td>Message priority</td><td>消息优先级</td><td>yes</td><td>yes</td><td>支持消息优先级</td></tr><tr><td>Single Active Consumer</td><td>单活消费者</td><td>yes</td><td>yes</td><td>支持单活消费者</td></tr><tr><td>Consumer exclusivity</td><td>独占消费者</td><td>yes</td><td>no</td><td>Quorum queues 不支持独占消费者，需使用 Single Active Consumer</td></tr><tr><td>Consumer priority</td><td>消费者优先级</td><td>yes</td><td>yes</td><td>支持消费者优先级</td></tr><tr><td>Dead letter exchanges</td><td>死信交换机</td><td>yes</td><td>yes</td><td>支持死信交换机</td></tr><tr><td>Adheres to policies</td><td>遵循策略</td><td>yes</td><td>yes</td><td>支持策略，但 Quorum queues 的部分策略行为不同</td></tr><tr><td>Poison message handling</td><td>毒消息处理</td><td>no</td><td>yes</td><td>Quorum queues 支持毒消息处理</td></tr><tr><td>Server-named queues</td><td>服务器自动命名队列</td><td>yes</td><td>no</td><td>Quorum queues 不支持服务器自动命名队列</td></tr></tbody></table><h2 id="Stream-流">Stream(流)</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.rabbitmq.com/docs/streams">Stream</a> 是RabbitMQ自 3.9.0 版本开始引入的一种新的数据队列类型。这种队列类型的消息是持久化到磁盘并且具备分布式备份的，更适合于消费者多，读消息非常频繁的场景。</p></li><li class="lvl-2"><p>Stream 的核心是以append-only只添加的日志来记录消息，整体来说，就是消息将以append-only的方式持久化到日志文件中，然后通过调整每个消费者的消费进度offset，来实现消息的多次分发。</p></li><li class="lvl-2"><p>Stream 不支持死信交换机，不支持处理毒消息。</p></li><li class="lvl-2"><p>实际上 Stream 不属于队列，流（Streams） 是一种 持久化、可复制的数据结构，功能上类似队列：从生产者缓冲消息供消费者读取。但它与队列有两个重要区别：</p><ul class="lvl-2"><li class="lvl-4">存储模型 – 流是 追加日志（append-only log），消息可以 重复读取直到过期。</li><li class="lvl-4">消费模型 – 流提供 非破坏性消费语义（non-destructive consumer semantics），多个消费者可以多次读取同一条消息而不会删除它。</li></ul></li><li class="lvl-2"><p>Stream 始终是持久化和复制的，保证数据安全。消费者可以通过 RabbitMQ 客户端库 或 专用二进制协议插件 读取流，其中插件方式可以 访问所有流特性 并提供 最佳性能。合理的客户端连接策略有助于提升 吞吐量和效率。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/8KqZY9.png" alt=""></p></li><li class="lvl-2"><p>参数说明(每个版本可能都有变化，具体以页面显示为准)</p></li></ul><table><thead><tr><th>参数名称</th><th>配置参数名</th><th>数据类型</th><th>作用说明</th><th>备注 / 使用场景</th></tr></thead><tbody><tr><td><strong>Max length bytes</strong></td><td><code>x-max-length-bytes</code></td><td>整数（字节）</td><td>流中允许存储的 <strong>最大数据总字节数</strong></td><td>超过时流将停止接收新消息，适合控制存储容量</td></tr><tr><td><strong>Max time retention</strong></td><td><code>x-max-age</code></td><td>字符串（时间单位，例如 <code>1h</code>, <code>30m</code>, <code>1d</code>）</td><td>设置流队列中消息的 <strong>最大保留时间</strong>，超过时间的消息会被删除</td><td>支持时间单位：Y=年, M=月, D=天, h=小时, m=分钟, s=秒。例如 <code>&quot;1h&quot;</code> 表示只保留最近 1 小时的消息，用于控制数据量和自动清理过期消息</td></tr><tr><td><strong>Max segment size in bytes</strong></td><td><code>x-stream-max-segment-size</code></td><td>整数（字节）</td><td>流分段存储时的 <strong>每个段的最大字节数</strong></td><td>控制单个文件段大小，有利于 I/O 性能和管理</td></tr><tr><td><strong>Filter size (per chunk) in bytes</strong></td><td><code>x-stream-filter-size-bytes</code></td><td>整数（字节）</td><td>流内部 <strong>过滤索引每块的大小</strong></td><td>用于加速消息定位和读取，影响内存使用和检索效率</td></tr><tr><td><strong>Initial cluster size</strong></td><td><code>x-initial-cluster-size</code></td><td>整数</td><td>流在创建时的 <strong>最小节点数</strong></td><td>保证流的复制和高可用性</td></tr><tr><td><strong>Leader locator</strong></td><td><code>x-queue-leader-locator</code></td><td>字符串（<code>client-local</code>、<code>balanced</code>）</td><td>设置在集群节点上声明流时，主节点（Leader）的选取规则</td><td><code>client-local</code>：客户端所在节点作为 Leader（默认）<br><code>balanced</code>：在节点间均衡 Leader 分布，用于优化 HA</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>Classic Queue vs Stream Queue Feature Matrix</p></li></ul><table><thead><tr><th>Feature</th><th>中文含义</th><th>Classic queues</th><th>Stream queues</th><th>说明</th></tr></thead><tbody><tr><td>Non-durable queues</td><td>非持久化队列</td><td>yes</td><td>no</td><td>Stream 队列总是持久化，不支持非持久化</td></tr><tr><td>Exclusivity</td><td>独占队列</td><td>yes</td><td>no</td><td>Classic 队列支持独占，Stream 队列不支持独占</td></tr><tr><td>Per message persistence</td><td>消息级持久化</td><td>per message</td><td>always</td><td>Stream 队列的消息总是持久化</td></tr><tr><td>Membership changes</td><td>节点成员变更</td><td>no</td><td>manual</td><td>Stream 队列节点变更需要手动管理</td></tr><tr><td>TTL</td><td>消息存活时间</td><td>yes</td><td>no (but see Retention)</td><td>Stream 队列没有消息 TTL，但可通过 Retention 控制过期</td></tr><tr><td>Queue length limits</td><td>队列长度限制</td><td>yes</td><td>no (but see Retention)</td><td>Stream 队列没有固定长度限制，通过 Retention 控制数据量</td></tr><tr><td>Keeps messages in memory</td><td>消息内存保存</td><td>see Classic Queues</td><td>never</td><td>Stream 队列消息不保存在内存中，只写入磁盘</td></tr><tr><td>Message priority</td><td>消息优先级</td><td>yes</td><td>no</td><td>Stream 队列不支持消息优先级</td></tr><tr><td>Consumer priority</td><td>消费者优先级</td><td>yes</td><td>no</td><td>Stream 队列不支持消费者优先级</td></tr><tr><td>Dead letter exchanges</td><td>死信交换机</td><td>yes</td><td>no</td><td>Stream 队列不支持死信交换机</td></tr><tr><td>Adheres to policies</td><td>遵循策略</td><td>yes</td><td>yes (see Retention)</td><td>Stream 队列支持策略，但主要通过 Retention 控制行为</td></tr><tr><td>Reacts to memory alarms</td><td>内存告警响应</td><td>yes</td><td>no (uses minimal RAM)</td><td>Stream 队列使用最小内存，不触发内存告警</td></tr><tr><td>Poison message handling</td><td>毒消息处理</td><td>no</td><td>no</td><td>Stream 队列不支持毒消息处理</td></tr></tbody></table><h2 id="队列类型扩展">队列类型扩展</h2><h3 id="懒队列">懒队列</h3><ul class="lvl-0"><li class="lvl-2"><p>从3.6.x版本到3.12.x版本，RabbitMQ提供了一种针对Classic Queue的优化配置，<code>lazy-mode</code>，<a href="https://www.rabbitmq.com/docs/lazy-queues">懒对列</a>。懒队列会尽可能早的将消息内容保存到硬盘当中，并且只有在用户请求到时，才临时从硬盘加载到RAM内存当中。</p></li><li class="lvl-2"><p>默认情况下，RabbitMQ接收到消息时，会保存到内存以便使用，同时把消息写到硬盘。但是，消息写入硬盘的过程中，是会阻塞队列的。RabbitMQ虽然针对写入硬盘速度做了很多算法优化，但是在长队列中，依然表现不是很理想，所以就有了懒队列的出现。</p></li><li class="lvl-2"><p>懒队列会尝试尽可能早的把消息写到硬盘中。这意味着在正常操作的大多数情况下，RAM中要保存的消息要少得多。当然，这是以增加磁盘IO为代价的。</p></li><li class="lvl-2"><p>懒队列适合消息量大且长期有堆积的队列，可以减少内存使用，加快消费速度。但是这是以大量消耗集群的网络及磁盘IO为代价的。</p></li><li class="lvl-2"><p>从3.12往后的版本中，RabbitMQ 不再支持“惰性”模式，因为 经典队列 当前的特性就类似于以前的 懒队列。</p></li></ul><h3 id="死信队列">死信队列</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.rabbitmq.com/docs/dlx">死信队列（Dead Letter Queue）</a>，新版中叫做 死信交换机（Dead Letter Exchange, DLX），是RabbitMQ对于未能正常消费的消息进行的一种补救机制，用于保存无法被正常处理的消息。当消息被消费者处理失败时，RabbitMQ会将消息发送到死信队列中，等待消费者处理。</p></li><li class="lvl-2"><p>死信队列也是一个普通的队列，同样可以在队列上声明消费者，继续对消息进行消费处理。</p></li><li class="lvl-2"><p>有以下几种情况，RabbitMQ会将一个正常消息转成死信</p><ul class="lvl-2"><li class="lvl-4">消息被拒绝（Message rejection）<ul class="lvl-4"><li class="lvl-6">由 AMQP 1.0 接收端使用 rejected 结果拒绝</li><li class="lvl-6">由 AMQP 0.9.1 消费者使用 basic.reject 或 basic.nack，并且参数 requeue=false</li></ul></li><li class="lvl-4">消息过期（Message expiration）<ul class="lvl-4"><li class="lvl-6">消息超过其配置的 TTL（生存时间） 后过期。</li></ul></li><li class="lvl-4">队列长度超限（Queue length exceeded）<ul class="lvl-4"><li class="lvl-6">队列中的消息数量或总字节数达到配置的最大限制后，被丢弃的消息会死信化。</li></ul></li><li class="lvl-4">投递次数超限（仅适用于仲裁队列 Quorum Queue）<ul class="lvl-4"><li class="lvl-6">消息的投递次数超过了仲裁队列中配置的 delivery-limit。</li></ul></li></ul></li><li class="lvl-2"><p>使用场景</p><ul class="lvl-2"><li class="lvl-4">你可以在队列上配置 死信交换机（DLX） 和 死信路由键（Dead Letter Routing Key）。</li><li class="lvl-4">当消息成为死信时，会被 重新发布到 DLX，这样你可以：<ul class="lvl-4"><li class="lvl-6">做错误日志记录</li><li class="lvl-6">进行失败消息重试</li><li class="lvl-6">用于监控和告警</li></ul></li></ul></li><li class="lvl-2"><p>死信交换机的配置方法（How Dead Lettering is Configured）</p><ul class="lvl-2"><li class="lvl-4">在 RabbitMQ 中，任何队列都可以通过客户端或者 策略（policies） 来配置 死信交换机（DLX）。</li><li class="lvl-4">配置时主要涉及两个核心参数：</li></ul></li></ul><table><thead><tr><th>配置参数名</th><th>说明</th></tr></thead><tbody><tr><td><strong>dead-letter-exchange</strong></td><td>指定用于接收死信消息的 <strong>死信交换机名称</strong></td></tr><tr><td><strong>dead-letter-routing-key</strong></td><td>指定死信消息重新发布时使用的 <strong>路由键（Routing Key）</strong></td></tr></tbody></table><blockquote><p>死信在转移到死信队列时，他的 routingkey 也会保存下来。但是如果配置了 <code>x-dead-letter-routing-key</code> 这个参数的话，routingkey 就会被替换为配置的这个值。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>在创建队列时，我们可以通过为队列添加 <code>x-dead-letter-exchange</code> 和 <code>x-dead-letter-routing-key</code> 参数，来指定 死信交换机（DLX）和 死信路由键（Dead Letter Routing Key）。但是这样做很麻烦，每个队列都要单独配置，因此，我们可以使用 策略（policies） 来统一配置。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅指定死信交换机，这里交换机的名称是 my-dlx，交换机要提前创建好</span></span><br><span class="line">rabbitmqctl set_policy DLX <span class="string">&quot;.*&quot;</span> <span class="string">&#x27;&#123;&quot;dead-letter-exchange&quot;:&quot;my-dlx&quot;&#125;&#x27;</span> --apply-to queues --priority 7</span><br><span class="line"><span class="comment"># 同时指定 死信交换机 和 路由键</span></span><br><span class="line">rabbitmqctl set_policy DLX <span class="string">&quot;.*&quot;</span> <span class="string">&#x27;&#123;&quot;dead-letter-exchange&quot;:&quot;my-dlx&quot;, &quot;dead-letter-routing-key&quot;:&quot;my-routing-key&quot;&#125;&#x27;</span> --apply-to queues --priority 7</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>参数说明：</p></li></ul><table><thead><tr><th>部分</th><th>含义</th></tr></thead><tbody><tr><td><code>rabbitmqctl</code></td><td>RabbitMQ 的命令行管理工具</td></tr><tr><td><code>set_policy</code></td><td>设置一个策略（Policy），用于动态配置交换机、队列或绑定的参数</td></tr><tr><td><code>DLX</code></td><td>策略的名称，用户自定义，例如这里叫 <code>DLX</code></td></tr><tr><td><code>&quot;.*&quot;</code></td><td>正则表达式，匹配对象的名称。<code>.*</code> 表示匹配 <strong>所有队列</strong>，也可以指定具体队列名，比如 <code>^my-queue$</code></td></tr><tr><td><code>&#123;&quot;dead-letter-exchange&quot;:&quot;my-dlx&quot;, &quot;dead-letter-routing-key&quot;:&quot;my-routing-key&quot;&#125;</code></td><td>策略内容，这里设置了死信交换机名称和路由键：<br> - <code>dead-letter-exchange</code>: 设置死信交换机名称为 <code>my-dlx</code><br> - <code>dead-letter-routing-key</code>: 设置路由键为 <code>my-routing-key</code></td></tr><tr><td><code>--apply-to queues</code></td><td>指定策略作用对象为 <strong>队列（queues）</strong>，而不是交换机（exchanges）或绑定（bindings）</td></tr><tr><td><code>--priority 7</code></td><td>策略的优先级，值越大优先级越高。多个策略作用在同一对象时，优先级高的会覆盖低的</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>执行这条命令后：</p><ul class="lvl-2"><li class="lvl-4">所有队列都会自动带上 <code>x-dead-letter-exchange=my-dlx</code> 和 <code>x-dead-letter-routing-key=my-routing-key</code> 配置。</li><li class="lvl-4">队列中被拒绝、过期、超长或超过投递次数的消息会被重新发布到 <code>my-dlx</code> 交换机，并使用 <code>my-routing-key</code> 作为路由键。</li></ul></li></ul><h3 id="延迟队列">延迟队列</h3><ul class="lvl-0"><li class="lvl-2"><p>延迟队列（Delayed Message Queue）: 延迟队列是一种特殊类型的队列，用于延迟消息的投递。</p></li><li class="lvl-2"><p>RabbitMQ中，是不存在延迟队列的功能的，而通常如果要用到延迟队列，就会采用 <code>TTL</code> + <code>死信队列</code> 的方式来实现。</p></li><li class="lvl-2"><p>延迟队列的实现原理：</p><ul class="lvl-2"><li class="lvl-4">创建一个普通队列，并设置队列的 TTL（x-message-ttl）参数，以及指定一个死信队列(x-dead-letter-exchange)</li><li class="lvl-4">当消息的 TTL 到期时，消息会被自动从当前队列中删除，并进入死信队列。</li><li class="lvl-4">为死信队列创建一个消费者，并监听死信队列，处理延迟消息。</li></ul></li></ul><h3 id="优先级队列">优先级队列</h3><ul class="lvl-0"><li class="lvl-2"><p>优先级队列（Priority Queue）: RabbitMQ 支持为经典队列（classic queues）添加“优先级”功能。启用“优先级”功能的经典队列通常被称为“优先级队列”（priority queues）。</p></li><li class="lvl-2"><p>RabbitMQ 支持 1 到 255 之间的优先级值，但强烈建议使用 1 到 5 之间的值。需要注意的是，优先级值越高，会消耗更多的 CPU 和内存资源，因为 RabbitMQ 在内部需要为每个优先级（从 1 到最大配置值）维护一个子队列。</p></li><li class="lvl-2"><p>只有经典队列支持通过参数<code>x-max-priority</code>指定队列支持的最大优先级，且不支持 通过 策略（policies） 将经典队列声明为优先级队列。</p></li><li class="lvl-2"><p>发布消息时，可以通过参数 <code>priority</code> 指定消息的优先级。是的，消息也是可以设置参数的。</p></li><li class="lvl-2"><p>优先级队列如何与消费者协同工作</p><ul class="lvl-2"><li class="lvl-4">若消费者连接到一个 空队列，然后消息陆续被发布，那么这些消息可能 不会 在队列中等待（即刚发布就被消费者接收），此时优先级功能没有机会上场。优先级是在消息排队（ready 消息）状态时才能体现其作用。</li><li class="lvl-4">推荐在消费者端使用 basic.qos(prefetch) 设置（在 manual ack 模式下），以限制消费者同时处理的未确认消息数。这样能让优先级的分级效果更加明显，因为如果 prefetch 数量未满，高优先级消息可以先被取出。</li></ul></li><li class="lvl-2"><p>注意事项</p><ul class="lvl-2"><li class="lvl-4">未设置 <code>priority</code> 的消息 会被当作优先级 0 处理。若消息指定的优先级大于队列的最大值（x-max-priority），则该消息的优先级就是<code>x-max-priority</code>。</li><li class="lvl-4">TTL / 消息过期 (message expiration)：即使设置了 TTL，过期的消息只会在队列头被检查。这意味着如果一个低优先级的消息在前面但还没过期，而高优先级的消息在后面，低优先级的消息可能会阻塞队列头，导致高优先级的消息被延迟。</li><li class="lvl-4">队列最大长度限制 (max-length)：如果队列设置了最大长度，队列会从头部 (head) 丢弃消息以维持长度限制。这可能导致高优先级消息也被丢弃，从而违背直觉。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 RabbitMQ 的 Queue 的基本概念和用法。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rabbitmq.com&quot;&gt;Zookeeper官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文使用的 RabbitMQ 版本为 4.1.4。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="rabbitmq" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/rabbitmq/"/>
    
    <category term="分布式" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/rabbitmq/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="rabbitmq" scheme="https://blog.hanqunfeng.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 的安装及使用</title>
    <link href="https://blog.hanqunfeng.com/2025/09/18/rabbitmq-install-01/"/>
    <id>https://blog.hanqunfeng.com/2025/09/18/rabbitmq-install-01/</id>
    <published>2025-09-18T13:30:05.000Z</published>
    <updated>2025-09-20T13:14:32.874Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 CentOS9 中 RabbitMQ 的安装与使用。</p></li><li class="lvl-2"><p><a href="https://www.rabbitmq.com">Zookeeper官网</a></p></li><li class="lvl-2"><p>本文使用的 RabbitMQ 版本为 4.1.4。</p></li></ul><span id="more"></span><h2 id="RabbitMQ-简介">RabbitMQ 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>RabbitMQ 是一个开源的 消息队列中间件，基于 AMQP（Advanced Message Queuing Protocol，高级消息队列协议） 实现，用于在分布式系统中 解耦、缓冲和异步处理消息。</p></li><li class="lvl-2"><p>它的主要作用是让 <code>不同系统</code> 或 <code>应用</code> 之间可靠地传递消息，即使发送方或接收方暂时不可用，也能保证消息不丢失。</p></li><li class="lvl-2"><p>RabbitMQ 的核心特点</p></li></ul><table><thead><tr><th>核心特点</th><th>具体说明</th></tr></thead><tbody><tr><td><strong>可靠性</strong></td><td>- 支持消息确认（ACK）机制<br>- 消息持久化到磁盘<br>- 支持事务或确认模式，保证消息不会丢失</td></tr><tr><td><strong>灵活的路由</strong></td><td>- 通过 <strong>交换机（Exchange）</strong> 将消息路由到不同的 <strong>队列（Queue）</strong><br>- 支持多种路由策略：<br>  • direct：直连，按队列名路由<br>  • fanout：广播，所有队列都收到<br>  • topic：主题匹配，类似订阅模式<br>  • headers：按消息头匹配</td></tr><tr><td><strong>高性能</strong></td><td>- 内存队列快速处理消息<br>- 支持异步 IO 和 Erlang 的并发模型</td></tr><tr><td><strong>多语言支持</strong></td><td>- 客户端库丰富：Java、Python、Go、C#、Node.js 等<br>- 可在多种平台和框架中使用</td></tr><tr><td><strong>集群与高可用</strong></td><td>- 支持集群模式<br>- 队列可以镜像到多个节点，保证高可用</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>RabbitMQ 的核心概念</p></li></ul><table><thead><tr><th>概念</th><th>含义</th><th>作用范围</th><th>类比</th></tr></thead><tbody><tr><td><strong>Broker</strong></td><td>一个 <strong>RabbitMQ 服务实例</strong>，包含整个 AMQP 服务、管理插件、队列、交换机等资源</td><td>运行在一台服务器上，或集群中的一个节点</td><td>类似于数据库的 <strong>实例</strong></td></tr><tr><td><strong>Vhost</strong></td><td>Broker 内部的 <strong>逻辑分区</strong>，用于隔离不同的队列、交换机、绑定等资源</td><td>一个 Broker 可以有多个 vhost，每个 vhost 彼此隔离</td><td>类似于数据库实例里的 <strong>schema</strong>，实际使用中建议为每个业务配置一个独立的 vhost，并为每个vhost单独配置一个管理用户</td></tr></tbody></table><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>Producer</strong></td><td>消息生产者，发送消息到 RabbitMQ</td></tr><tr><td><strong>Queue</strong></td><td>队列，存储消息的地方</td></tr><tr><td><strong>Consumer</strong></td><td>消息消费者，从队列获取消息</td></tr><tr><td><strong>Exchange</strong></td><td>交换机，接收 Producer 的消息并根据规则路由到队列</td></tr><tr><td><strong>Binding</strong></td><td>绑定，定义 Exchange 与 Queue 的路由规则</td></tr><tr><td><strong>Message</strong></td><td>消息，RabbitMQ 传递的数据单元</td></tr><tr><td><strong>Connection</strong></td><td>连接，客户端与 RabbitMQ Broker 之间的 <strong>TCP 连接</strong>，是通信的物理通道</td></tr><tr><td><strong>Channel</strong></td><td>通道，Connection 内部的 <strong>逻辑连接</strong>，轻量级且多路复用，一个连接可开多个通道</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                        ┌─ Broker (RabbitMQ 实例)──────────┐</span><br><span class="line">                        │                                 │</span><br><span class="line">                        │    ┌───── Virtual Host ─────┐   │</span><br><span class="line">        Producer ─── TCP ──────&gt; Exchange ──&gt; Queue ────────&gt; TCP ── Consumer</span><br><span class="line">(Connection ──&gt; Channel)│    └────────────────────────┘   │</span><br><span class="line">                        │                                 │</span><br><span class="line">                        └─────────────────────────────────┘</span><br></pre></td></tr></table></figure><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/qgdFHL.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>RabbitMQ 的典型应用场景</p></li></ul><table><thead><tr><th>应用场景</th><th>说明</th></tr></thead><tbody><tr><td><strong>异步处理</strong></td><td>用户请求不直接处理，消息入队后由后台异步消费，例如邮件发送、图片处理</td></tr><tr><td><strong>削峰填谷</strong></td><td>缓冲高峰流量，平滑系统压力</td></tr><tr><td><strong>系统解耦</strong></td><td>不同服务之间不直接调用，降低耦合</td></tr><tr><td><strong>广播/通知</strong></td><td>发布/订阅模式，实现多服务同时收到消息</td></tr><tr><td><strong>日志收集</strong></td><td>统一接收、分发日志到不同处理系统</td></tr></tbody></table><h2 id="RabbitMQ-单机安装">RabbitMQ 单机安装</h2><h3 id="安装Erlang">安装Erlang</h3><ul class="lvl-0"><li class="lvl-2"><p>RabbitMQ是基于Erlang语言开发的，所以安装RabbitMQ之前需要安装Erlang语言环境。需要注意的是RabbitMQ与Erlang语言之间是有版本对应关系的。参考官方文档<a href="https://www.rabbitmq.com/docs/which-erlang">Erlang Version Requirements</a></p></li><li class="lvl-2"><p>目前RabbitMQ最新版本是<code>4.1.4</code>，Erlang版本可以选择 <code>27.x</code>，<a href="https://github.com/rabbitmq/erlang-rpm/releases">GitHub下载地址</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 el9 的版本，对应 CentOS 9</span></span><br><span class="line">wget https://github.com/rabbitmq/erlang-rpm/releases/download/v27.3.4.3/erlang-27.3.4.3-1.el9.x86_64.rpm</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">sudo</span> rpm -ivh erlang-27.3.4.3-1.el9.x86_64.rpm</span><br><span class="line"><span class="comment"># 查看安装的版本</span></span><br><span class="line">erl</span><br><span class="line"><span class="comment"># 输出类似于，这里 Erlang/OTP 27 就表示安装的是 27.x 版本</span></span><br><span class="line">Erlang/OTP 27 [erts-15.2.7.2] [<span class="built_in">source</span>] [64-bit] [smp:2:2] [ds:2:2:10] [async-threads:1] [jit:ns]</span><br><span class="line"></span><br><span class="line">Eshell V15.2.7.2 (press Ctrl+G to abort, <span class="built_in">type</span> <span class="built_in">help</span>(). <span class="keyword">for</span> <span class="built_in">help</span>)</span><br><span class="line">1&gt; q().  <span class="comment"># 退出命令，注意是括号后面还有一个点。输入 help(). 显示帮助信息</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure><h3 id="安装-RabbitMQ">安装 RabbitMQ</h3><ul class="lvl-0"><li class="lvl-2"><p>目前RabbitMQ最新版本是<code>4.1.4</code>，<a href="https://github.com/rabbitmq/rabbitmq-server/releases">GitHub下载地址</a>]</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载，noarch 表示架构无关，即 X86_64 和 ARM64 都可以</span></span><br><span class="line"><span class="comment"># 因为没有对应的 el9 的包，所以只能用 el8 的包了，实际使用中没有问题。</span></span><br><span class="line">wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v4.1.4/rabbitmq-server-4.1.4-1.el8.noarch.rpm</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">sudo</span> rpm -ivh rabbitmq-server-4.1.4-1.el8.noarch.rpm</span><br><span class="line"><span class="comment"># 查看版本信息</span></span><br><span class="line">rabbitmq-diagnostics version <span class="comment"># 无需启动服务</span></span><br><span class="line"><span class="comment"># RabbitMQ 服务启动后方可正确输出</span></span><br><span class="line">rabbitmqctl version</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ-启动与停止命令">RabbitMQ 启动与停止命令</h3><ul class="lvl-0"><li class="lvl-2"><p>Erlang VM 是 Erlang 语言运行环境，RabbitMQ 应用运行在 Erlang VM 下。</p></li><li class="lvl-2"><p>启动 RabbitMQ 服务(Erlang VM) + 应用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 RabbitMQ 服务(Erlang VM) + 应用</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start rabbitmq-server</span><br><span class="line"><span class="comment"># 或者，--detached 后台运行，不加就是前台运行</span></span><br><span class="line"><span class="built_in">sudo</span> rabbitmq-server -detached</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独启动 应用，此时需要保证 RabbitMQ 服务(Erlang VM) 正在运行，一般重启 应用 时使用该命令</span></span><br><span class="line"><span class="built_in">sudo</span> rabbitmqctl start_app</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>停止 RabbitMQ 服务(Erlang VM) + 应用</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止 RabbitMQ 服务(Erlang VM) + 应用</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop rabbitmq-server</span><br><span class="line"><span class="comment"># 或者，单机模式 stop，集群模式 shutdown</span></span><br><span class="line"><span class="built_in">sudo</span> rabbitmqctl stop / shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独停止 RabbitMQ 应用，此时需要保证 RabbitMQ 服务(Erlang VM) 正在运行，一般重启 应用 时使用该命令</span></span><br><span class="line"><span class="built_in">sudo</span> rabbitmqctl stop_app</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看RabbitMQ 服务状态</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status rabbitmq-server</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">sudo</span> rabbitmqctl status</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>RabbitMQ 在 CentOS 9 (RPM 安装) 的目录结构</p></li></ul><table><thead><tr><th>类型</th><th>目录路径</th><th>说明</th></tr></thead><tbody><tr><td>配置文件</td><td><code>/etc/rabbitmq</code></td><td><code>rabbitmq.conf</code>、<code>advanced.config</code> 等配置</td></tr><tr><td>日志文件</td><td><code>/var/log/rabbitmq</code></td><td>RabbitMQ 运行日志，默认存放在这里</td></tr><tr><td>数据目录</td><td><code>/var/lib/rabbitmq/mnesia</code></td><td>消息队列、元数据存储目录</td></tr><tr><td>Erlang Cookie</td><td><code>/var/lib/rabbitmq/.erlang.cookie</code></td><td>Erlang 节点间通信的 cookie 文件</td></tr><tr><td>可执行文件</td><td><code>/usr/lib/rabbitmq/bin</code></td><td><code>rabbitmq-server</code>、<code>rabbitmqctl</code> 等命令</td></tr><tr><td>启动脚本</td><td><code>/usr/lib/systemd/system/rabbitmq-server.service</code></td><td>systemd 管理 RabbitMQ 的启动脚本</td></tr><tr><td>插件目录</td><td><code>/usr/lib/rabbitmq/lib/rabbitmq_server-&lt;version&gt;/plugins</code></td><td>所有插件文件存放路径</td></tr></tbody></table><h3 id="激活Web管理控制台插件">激活Web管理控制台插件</h3><ul class="lvl-0"><li class="lvl-2"><p>对于 RabbitMQ 所有的操作基本都可以通过命令行完成，但是使用起来并不方便，这时我们可以激活 <code>rabbitmq_management</code> 插件，该插件提供了 Web 管理控制台，我们可以通过 Web 管理控制台来管理 RabbitMQ</p></li><li class="lvl-2"><p><code>rabbitmq_management</code> 插件为 官方插件，默认已经安装，不需要下载，直接激活即可</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活插件</span></span><br><span class="line"><span class="built_in">sudo</span> rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><h4 id="设置远程访问帐号">设置远程访问帐号</h4><ul class="lvl-0"><li class="lvl-2"><p>插件激活后可以通过浏览器访问 <code>http://&lt;ip&gt;:15672</code>，rabbitmq_management 插件默认用户名和密码都是 <code>guest</code>，但是默认情况下其只能通过 <code>127.0.0.1</code> 访问，此时我们有两种方法可以解决</p></li></ul><h5 id="1-允许-guest-账号远程访问">1. 允许 <code>guest</code> 账号远程访问</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 /etc/rabbitmq/rabbitmq.conf 文件</span></span><br><span class="line"><span class="comment"># 允许guest用户远程访问，`官方不推荐` 一直开启，建议开启后在 web 控制台中创建一个管理员账号，然后立刻关闭该配置</span></span><br><span class="line">loopback_users.guest = <span class="literal">false</span></span><br><span class="line"><span class="comment"># 默认的用户名和密码，注意这里 user 如果改成 admin，则上面的开启远程访问中的 guest 也要改成 admin</span></span><br><span class="line">default_user = guest</span><br><span class="line">default_pass = guest</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改完成后，重启 RabbitMQ 服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure><h5 id="2-新创建一个可以远程访问的管理员账号">2. 新创建一个可以远程访问的管理员账号</h5><ul class="lvl-0"><li class="lvl-2"><p>创建管理员账号，比如这里 用户名为 <code>admin</code>，密码为 <code>rabbitmq</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> rabbitmqctl add_user admin rabbitmq</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>给管理员账号添加资源管理权限</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> rabbitmqctl set_permissions -p / admin <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>部分</th><th>解释</th></tr></thead><tbody><tr><td><code>rabbitmqctl</code></td><td>RabbitMQ 的命令行管理工具，用于管理用户、权限、队列、交换机等。</td></tr><tr><td><code>set_permissions</code></td><td>设置指定用户在某个虚拟主机（vhost）下的权限。</td></tr><tr><td><code>-p /</code></td><td>指定虚拟主机（vhost）。这里的 <code>/</code> 是默认虚拟主机。</td></tr><tr><td><code>admin</code></td><td>用户名，这里是为 <code>admin</code> 用户设置权限。</td></tr><tr><td><code>&quot;.*&quot;</code>（配置权限）</td><td>第一个正则表达式，控制用户对资源配置的权限，比如创建交换机、队列、绑定等。<code>&quot;.*&quot;</code> 表示全部允许。</td></tr><tr><td><code>&quot;.*&quot;</code>（写权限）</td><td>第二个正则表达式，控制用户向哪些资源发送消息。<code>&quot;.*&quot;</code> 表示全部允许。</td></tr><tr><td><code>&quot;.*&quot;</code>（读权限）</td><td>第三个正则表达式，控制用户从哪些资源消费消息。<code>&quot;.*&quot;</code> 表示全部允许。</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>设置admin账号为控制台管理员</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><table><thead><tr><th>部分</th><th>解释</th></tr></thead><tbody><tr><td><code>rabbitmqctl</code></td><td>RabbitMQ 的命令行管理工具。</td></tr><tr><td><code>set_user_tags</code></td><td>用来为用户设置标签（tag），标签决定了用户在管理界面或 API 中的权限级别。</td></tr><tr><td><code>admin</code></td><td>用户名，这里是为 <code>admin</code> 用户设置标签。</td></tr><tr><td><code>administrator</code></td><td>标签名，表示给该用户赋予管理员权限。</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>常见的用户标签</p></li></ul><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td><code>administrator</code></td><td>管理员，拥有最高权限，可通过 Web 管理界面、CLI、API 管理 RabbitMQ 所有内容</td></tr><tr><td><code>monitoring</code></td><td>监控用户，可查看所有监控信息，但不能修改配置</td></tr><tr><td><code>management</code></td><td>普通管理用户，可以登录管理界面，但权限受限</td></tr><tr><td><code>policymaker</code></td><td>策略管理用户，可以管理策略和参数，但不能管理其他用户</td></tr><tr><td>无标签</td><td>普通用户，只能收发消息，不能登录管理界面</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p><code>set_permissions</code> 与 <code>set_user_tags</code> 总结对比</p></li></ul><table><thead><tr><th>命令</th><th>控制范围</th><th>主要作用</th></tr></thead><tbody><tr><td><code>set_permissions</code></td><td>vhost 内的资源</td><td>发消息、收消息、创建队列、交换机</td></tr><tr><td><code>set_user_tags</code></td><td>管理界面、管理 API</td><td>用户管理、策略管理、集群管理</td></tr></tbody></table><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/4lP2cD.png" alt=""></p><h3 id="启用所有稳定的-Feature-Flags">启用所有稳定的 Feature Flags</h3><ul class="lvl-0"><li class="lvl-2"><p>登录控制台后我们会看到一条告警信息，参考：<a href="https://www.rabbitmq.com/docs/feature-flags">Feature Flags</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⚠ All stable feature flags must be enabled after completing an upgrade.</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>它的意思是：RabbitMQ 在新版本中引入了一些 Feature Flags（特性标志），这些特性标志用于控制一些新的功能或行为是否启用。升级 RabbitMQ 后，有些功能会处于 <code>未启用状态</code>，需要你手动开启，确保集群完全运行在最新的功能模式下。</p></li><li class="lvl-2"><p>背景：为什么有 Feature Flags？</p><ul class="lvl-2"><li class="lvl-4">向后兼容：RabbitMQ 升级时，可能引入了新的数据格式或内部机制，如果立即启用，旧版本节点可能无法理解。</li><li class="lvl-4">滚动升级支持：升级集群时，可以先升级节点，再统一启用功能，避免中途出问题。</li><li class="lvl-4">可控性：你可以选择在确认集群稳定后再启用新功能。</li></ul></li><li class="lvl-2"><p>查看当前 Feature Flags 状态</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl -q --formatter pretty_table list_feature_flags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出会类似这样：</span></span><br><span class="line">┌──────────────────────────────────────┬──────────┐</span><br><span class="line">│ name                                 │ state    │</span><br><span class="line">├──────────────────────────────────────┼──────────┤</span><br><span class="line">│ classic_mirrored_queue_version       │ enabled  │</span><br><span class="line">├──────────────────────────────────────┼──────────┤</span><br><span class="line">│ classic_queue_type_delivery_support  │ enabled  │</span><br><span class="line">├──────────────────────────────────────┼──────────┤</span><br><span class="line">│ detailed_queues_endpoint             │ disabled │</span><br><span class="line">├──────────────────────────────────────┼──────────┤</span><br><span class="line">│ direct_exchange_routing_v2           │ enabled  │</span><br><span class="line">├──────────────────────────────────────┼──────────┤</span><br><span class="line"></span><br><span class="line">&gt; enabled：特性已启用</span><br><span class="line">&gt; disabled：特性未启用</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>可以输出 其它 格式，显示更详细的信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># json</span></span><br><span class="line">rabbitmqctl -q --formatter json list_feature_flags name state provided_by desc doc_url | jq</span><br><span class="line"><span class="comment"># table</span></span><br><span class="line">rabbitmqctl -q --formatter pretty_table list_feature_flags name state provided_by desc doc_url</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启用所有已标记为 stable 的特性，建议升级下一个 RabbitMQ 版本 前一定要确保当前版本的 Feature Flags 都是启用的，避免升级后无法顺利启动服务。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl enable_feature_flag all</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在控制台中也可以查看和开启这些 Feature Flags 的状态<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/VqNm1y.png" alt=""></p></li><li class="lvl-2"><p>这里要注意，<strong>Feature Flags 一旦开启就无法关闭。</strong></p></li></ul><h2 id="RabbitMQ-配置文件">RabbitMQ 配置文件</h2><ul class="lvl-0"><li class="lvl-2"><p>对于 RPM/YUM/DNF 安装的 RabbitMQ，配置文件默认路径是</p></li></ul><table><thead><tr><th>文件类型</th><th>默认位置</th><th>作用</th></tr></thead><tbody><tr><td>主配置文件（推荐）</td><td><code>/etc/rabbitmq/rabbitmq.conf</code></td><td>使用 <strong>INI 格式</strong>，主要配置都在这里</td></tr><tr><td>环境变量配置</td><td><code>/etc/rabbitmq/rabbitmq-env.conf</code></td><td>定义节点名、Cookie 位置、数据/日志目录等</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>安装后 <code>/etc/rabbitmq/</code> 目录可能是空的，你需要手动创建 <code>rabbitmq.conf</code>，详细的参数说明可以参看<a href="https://rabbitmq.com/configure.html">官网指南</a>，<a href="https://github.com/rabbitmq/rabbitmq-server/blob/main/deps/rabbit/docs/rabbitmq.conf.example">rabbitmq.conf 示例</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/rabbitmq/rabbitmq.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">listeners.tcp.default = 5672</span><br><span class="line"><span class="comment"># 管理界面端口</span></span><br><span class="line">management.tcp.port = 15672</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>rabbitmq-env.conf</code> 用来 定义节点名、Cookie 、数据/日志目录等的环境变量，RabbitMQ 启动时会自动读取该文件，以下是通过 RPM 安装的 RabbitMQ 的默认值</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/rabbitmq/rabbitmq-env.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点名称，默认使用主机短名(hostname -s)，例如 rabbit@myhost</span></span><br><span class="line">NODENAME=rabbit@&lt;hostname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定的 IP 地址，留空表示监听所有地址，等价于 0.0.0.0</span></span><br><span class="line">NODE_IP_ADDRESS=</span><br><span class="line"></span><br><span class="line"><span class="comment"># AMQP 协议端口，默认 5672</span></span><br><span class="line">NODE_PORT=5672</span><br><span class="line"></span><br><span class="line"><span class="comment"># RabbitMQ 数据库存储目录</span></span><br><span class="line">MNESIA_BASE=/var/lib/rabbitmq/mnesia</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志存放目录</span></span><br><span class="line">LOG_BASE=/var/log/rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件路径，不带 .conf 后缀</span></span><br><span class="line">CONFIG_FILE=/etc/rabbitmq/rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否使用长主机名，true/false (长主机名 hostname -f)</span></span><br><span class="line">USE_LONGNAME=<span class="literal">false</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>两个文件的作用</p></li></ul><table><thead><tr><th>文件</th><th>作用范围</th><th>典型参数</th><th>何时加载</th></tr></thead><tbody><tr><td><strong>rabbitmq-env.conf</strong></td><td>设置 RabbitMQ 启动时的 <strong>环境变量</strong></td><td>NODENAME, NODE_IP_ADDRESS, NODE_PORT, LOG_BASE, MNESIA_BASE</td><td>在启动 RabbitMQ 服务前由 <code>rabbitmq-env</code> 脚本读取</td></tr><tr><td><strong>rabbitmq.conf</strong></td><td>RabbitMQ <strong>运行时配置</strong>（内部参数、插件配置等）</td><td>listeners.tcp.default, log, cluster_formation 等</td><td>RabbitMQ 启动后由 Erlang VM 内部读取</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-4"><p><code>rabbitmq-env.conf</code> 决定 RabbitMQ 启动时的基本环境，比如节点名、数据目录、监听 IP 等，必须在启动前就确定。</p></li><li class="lvl-4"><p><code>rabbitmq.conf</code> 决定运行时的功能，比如端口监听、日志等级、集群配置等，可以动态修改，重启应用后生效。</p></li></ul><table><thead><tr><th><code>rabbitmq-env.conf</code> 变量</th><th><code>rabbitmq.conf</code> 对应配置</th><th>优先级</th><th>说明</th></tr></thead><tbody><tr><td>NODE_IP_ADDRESS</td><td><code>listeners.tcp.default = &lt;IP&gt;</code></td><td><code>rabbitmq.conf</code></td><td>只要在 <code>rabbitmq.conf</code> 里配置，就覆盖环境变量</td></tr><tr><td>NODE_PORT</td><td><code>listeners.tcp.default = &lt;Port&gt;</code></td><td><code>rabbitmq.conf</code></td><td>同上，IP 和端口可以一起配置</td></tr><tr><td>NODENAME</td><td><strong>无直接对应</strong></td><td><code>rabbitmq-env.conf</code></td><td>节点名只能通过 <code>rabbitmq-env.conf</code> 或环境变量设定</td></tr><tr><td>MNESIA_BASE</td><td><strong>无直接对应</strong></td><td><code>rabbitmq-env.conf</code></td><td>数据目录只能在启动前设定</td></tr><tr><td>LOG_BASE</td><td><code>log.dir = &lt;path&gt;</code></td><td><code>rabbitmq.conf</code></td><td>运行时配置覆盖环境变量</td></tr><tr><td>CONFIG_FILE</td><td><strong>无直接对应</strong></td><td><code>rabbitmq-env.conf</code></td><td>这个只决定加载哪个 <code>rabbitmq.conf</code> 文件</td></tr><tr><td>USE_LONGNAME</td><td><strong>无直接对应</strong></td><td><code>rabbitmq-env.conf</code></td><td>节点名是否使用长主机名只能启动前决定</td></tr></tbody></table><h2 id="RabbitMQ-相关命令">RabbitMQ 相关命令</h2><ul class="lvl-0"><li class="lvl-2"><p>日常使用中，基本都是通过 Web 管理界面操作，这里仅对命令进行简要介绍。</p></li></ul><table><thead><tr><th>命令</th><th>作用（简要）</th><th>常用示例（典型用法 + 中文说明）</th></tr></thead><tbody><tr><td><code>rabbitmq-defaults</code></td><td>定义/显示 RabbitMQ 安装默认目录和运行时前缀</td><td><code>编辑 sbin/rabbitmq-defaults 中 PREFIX/SYS_PREFIX</code>（修改默认目录到系统目录）</td></tr><tr><td><code>rabbitmq-diagnostics</code></td><td>健康检查 / 诊断工具，可用于监控</td><td><code>rabbitmq-diagnostics -q ping</code>（检查节点是否可达）<br><code>rabbitmq-diagnostics -q status</code>（查看节点状态）<br><code>rabbitmq-diagnostics -q check_running</code>（确认节点运行中）</td></tr><tr><td><code>rabbitmq-env</code></td><td><code>rabbitmq-env</code> 其实不是一个直接在命令行里单独使用的工具，而是 RabbitMQ 服务启动脚本 中用来加载 RabbitMQ 环境变量的脚本。</td><td>在 <code>/etc/rabbitmq/rabbitmq-env.conf</code> 中设置：<br><code>RABBITMQ_NODENAME=myrabbit</code>（设置节点名）<br>或用 <code>rabbitmq-env</code> 输出查看实际环境</td></tr><tr><td><code>rabbitmq-plugins</code></td><td>插件管理：列出/启用/禁用插件</td><td><code>rabbitmq-plugins list</code>（列出所有插件）<br><code>rabbitmq-plugins enable rabbitmq_management</code>（启用 Web 管理插件）<br><code>rabbitmq-plugins disable --offline plugin</code>（离线禁用插件）</td></tr><tr><td><code>rabbitmq-queues</code></td><td>队列副本管理：rebalance/grow/shrink</td><td><code>rabbitmq-queues rebalance all --vhost-pattern &quot;.*&quot; --queue-pattern &quot;.*&quot;</code>（重平衡所有队列副本）<br><code>rabbitmq-queues add_member --vhost / qname rabbit@node</code>（为队列增加节点副本）</td></tr><tr><td><code>rabbitmq-server</code></td><td>启动 RabbitMQ 节点（前台/后台）</td><td><code>rabbitmq-server</code>（前台启动）<br><code>rabbitmq-server -detached</code>（后台启动）</td></tr><tr><td><code>rabbitmq-upgrade</code></td><td>升级相关操作：drain/恢复等</td><td><code>rabbitmq-upgrade drain</code>（让节点进入维护模式，停止接收新连接）<br><code>rabbitmq-upgrade post_upgrade</code>（执行升级后收尾操作）<br><code>rabbitmq-upgrade revive</code>（恢复维护模式中的节点）</td></tr><tr><td><code>rabbitmqctl</code></td><td>最常用管理命令：用户、队列、集群管理</td><td><code>rabbitmqctl status</code>（查看节点状态）<br><code>rabbitmqctl list_queues</code>（列出所有队列）<br><code>rabbitmqctl add_user bob s3cr3t</code>（添加用户 bob，密码 s3cr3t）</td></tr><tr><td><code>rabbitmq-streams</code></td><td>管理 Streams（流式队列）</td><td><code>rabbitmq-streams stream_status --vhost / my-stream</code>（查看 my-stream 状态）<br><code>rabbitmq-streams add_replica --vhost / my-stream rabbit@node</code>（为 my-stream 增加副本节点）</td></tr></tbody></table><h3 id="最常用的命令-rabbitmqctl">最常用的命令 <code>rabbitmqctl</code></h3><h4 id="命令自动补全">命令自动补全</h4><ul class="lvl-0"><li class="lvl-2"><p><code>rabbitmqctl</code> 有一个 <code>autocomplete</code> 参数，可以自动完成命令参数，我们可以利用这个命令来实现命令自动补全</p></li><li class="lvl-2"><p><code>vim ~/.bashrc</code> 添加如下内容：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">_rabbitmqctl_completion</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> cur opts</span><br><span class="line">    cur=<span class="string">&quot;<span class="variable">$&#123;COMP_WORDS[COMP_CWORD]&#125;</span>&quot;</span>           <span class="comment"># 当前光标所在单词</span></span><br><span class="line">    opts=$(rabbitmqctl autocomplete <span class="string">&quot;<span class="variable">$cur</span>&quot;</span>)   <span class="comment"># 只传当前单词作为前缀</span></span><br><span class="line">    COMPREPLY=( $(compgen -W <span class="string">&quot;<span class="variable">$&#123;opts&#125;</span>&quot;</span> -- <span class="string">&quot;<span class="variable">$cur</span>&quot;</span>) )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">complete -F _rabbitmqctl_completion rabbitmqctl</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>实际上 RabbitMQ 的大部分命令都有 <code>autocomplete</code> 参数，都可以自动完成命令参数</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义通用补全函数</span></span><br><span class="line"><span class="function"><span class="title">_rabbitmq_completion</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> cur opts</span><br><span class="line">    cur=<span class="string">&quot;<span class="variable">$&#123;COMP_WORDS[COMP_CWORD]&#125;</span>&quot;</span></span><br><span class="line">    <span class="comment"># 当前命令名，自动判断</span></span><br><span class="line">    <span class="built_in">local</span> cmd=<span class="string">&quot;<span class="variable">$&#123;COMP_WORDS[0]&#125;</span>&quot;</span></span><br><span class="line">    <span class="comment"># 给对应命令传当前前缀</span></span><br><span class="line">    opts=$(<span class="variable">$cmd</span> autocomplete <span class="string">&quot;<span class="variable">$cur</span>&quot;</span> 2&gt;/dev/null)</span><br><span class="line">    COMPREPLY=( $(compgen -W <span class="string">&quot;<span class="variable">$&#123;opts&#125;</span>&quot;</span> -- <span class="string">&quot;<span class="variable">$cur</span>&quot;</span>) )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次性绑定多个命令</span></span><br><span class="line">complete -F _rabbitmq_completion rabbitmqctl rabbitmq-plugins rabbitmq-diagnostics rabbitmq-queues rabbitmq-upgrade</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>测试</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使补全生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># tab 补全</span></span><br><span class="line">rabbitmqctl st&lt;TAB&gt;</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">start_app  status     stop       stop_app</span><br></pre></td></tr></table></figure><h4 id="常用命令参数">常用命令参数</h4><ul class="lvl-0"><li class="lvl-2"><p><code>rabbitmqctl help</code> 获取所有命令参数的简介</p></li><li class="lvl-2"><p><code>rabbitmqctl help &lt;command&gt;</code> 获取指定命令的帮助</p></li><li class="lvl-2"><p>日常使用中基本都是通过 <code>web 控制台</code> 完成，这里只做了解。</p></li></ul><h5 id="1-节点管理">1.节点管理</h5><table><thead><tr><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>status</code></td><td>查看节点状态，包括运行状态、版本、内存、队列数量等</td><td><code>rabbitmqctl status</code></td></tr><tr><td><code>stop</code></td><td>停止 RabbitMQ 节点</td><td><code>rabbitmqctl stop</code></td></tr><tr><td><code>stop_app</code></td><td>停止 RabbitMQ 应用（保留节点运行）</td><td><code>rabbitmqctl stop_app</code></td></tr><tr><td><code>start_app</code></td><td>启动 RabbitMQ 应用</td><td><code>rabbitmqctl start_app</code></td></tr><tr><td><code>reset</code></td><td>重置 RabbitMQ 节点，删除所有队列和数据（慎用）</td><td><code>rabbitmqctl reset</code></td></tr><tr><td><code>force_reset</code></td><td>强制重置节点（即使在集群中也会重置）</td><td><code>rabbitmqctl force_reset</code></td></tr></tbody></table><h5 id="2-用户和权限管理">2. 用户和权限管理</h5><table><thead><tr><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>list_users</code></td><td>列出所有用户</td><td><code>rabbitmqctl list_users</code></td></tr><tr><td><code>add_user &lt;user&gt; &lt;password&gt;</code></td><td>添加新用户</td><td><code>rabbitmqctl add_user alice mypassword</code></td></tr><tr><td><code>delete_user &lt;user&gt;</code></td><td>删除用户</td><td><code>rabbitmqctl delete_user alice</code></td></tr><tr><td><code>change_password &lt;user&gt; &lt;password&gt;</code></td><td>修改用户密码</td><td><code>rabbitmqctl change_password alice newpass</code></td></tr><tr><td><code>list_permissions &lt;user&gt;</code></td><td>查看某用户的权限</td><td><code>rabbitmqctl list_permissions alice</code></td></tr><tr><td><code>set_permissions -p &lt;vhost&gt; &lt;user&gt; &quot;&lt;conf&gt;&quot; &quot;&lt;write&gt;&quot; &quot;&lt;read&gt;&quot;</code></td><td>设置用户在虚拟主机的权限</td><td><code>rabbitmqctl set_permissions -p / alice &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></td></tr></tbody></table><h5 id="3-虚拟主机（vhost）管理">3. 虚拟主机（vhost）管理</h5><table><thead><tr><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>list_vhosts</code></td><td>列出所有虚拟主机</td><td><code>rabbitmqctl list_vhosts</code></td></tr><tr><td><code>add_vhost &lt;vhost&gt;</code></td><td>添加虚拟主机</td><td><code>rabbitmqctl add_vhost my_vhost</code></td></tr><tr><td><code>delete_vhost &lt;vhost&gt;</code></td><td>删除虚拟主机</td><td><code>rabbitmqctl delete_vhost my_vhost</code></td></tr></tbody></table><h5 id="4-队列管理">4. 队列管理</h5><ul class="lvl-0"><li class="lvl-2"><p>队列可以通过 <code>web 控制台</code> 创建， 也可以通过 <code>客户端(比如Java)</code> 创建，<code>rabbitmqctl</code> 只能查看和删除队列</p></li></ul><table><thead><tr><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>list_queues</code></td><td>列出队列</td><td><code>rabbitmqctl list_queues</code></td></tr><tr><td><code>list_queues name messages consumers</code></td><td>列出队列及消息数、消费者数</td><td><code>rabbitmqctl list_queues name messages consumers</code></td></tr><tr><td><code>purge_queue &lt;queue&gt;</code></td><td>清空队列消息</td><td><code>rabbitmqctl purge_queue my_queue</code></td></tr><tr><td><code>delete_queue &lt;queue&gt;</code></td><td>删除队列</td><td><code>rabbitmqctl delete_queue my_queue</code></td></tr></tbody></table><h5 id="5-交换机和绑定">5. 交换机和绑定</h5><ul class="lvl-0"><li class="lvl-2"><p>交换机可以通过 <code>web 控制台</code> 创建， 也可以通过 <code>客户端(比如Java)</code> 创建，<code>rabbitmqctl</code> 只能查看</p></li></ul><table><thead><tr><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>list_exchanges</code></td><td>列出交换机</td><td><code>rabbitmqctl list_exchanges</code></td></tr><tr><td><code>list_bindings</code></td><td>列出绑定关系</td><td><code>rabbitmqctl list_bindings</code></td></tr></tbody></table><h5 id="6-集群管理">6. 集群管理</h5><table><thead><tr><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>cluster_status</code></td><td>查看集群状态</td><td><code>rabbitmqctl cluster_status</code></td></tr><tr><td><code>join_cluster &lt;node&gt;</code></td><td>节点加入集群</td><td><code>rabbitmqctl join_cluster rabbit@node1</code></td></tr><tr><td><code>forget_cluster_node &lt;node&gt;</code></td><td>将节点从集群中移除</td><td><code>rabbitmqctl forget_cluster_node rabbit@node2</code></td></tr></tbody></table><h5 id="7-日志和调试">7. 日志和调试</h5><table><thead><tr><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>report</code></td><td>输出节点诊断报告</td><td><code>rabbitmqctl report</code></td></tr><tr><td><code>eval &lt;expression&gt;</code></td><td>执行 Erlang 表达式</td><td><code>rabbitmqctl eval 'rabbit_mnesia:info().'</code></td></tr></tbody></table><h5 id="8-其他命令">8. 其他命令</h5><table><thead><tr><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>help</code></td><td>查看帮助命令</td><td><code>rabbitmqctl help</code></td></tr><tr><td><code>version</code></td><td>查看 RabbitMQ 版本</td><td><code>rabbitmqctl version</code></td></tr><tr><td><code>authenticate_user &lt;user&gt; &lt;password&gt;</code></td><td>验证用户密码</td><td><code>rabbitmqctl authenticate_user alice mypassword</code></td></tr></tbody></table><h2 id="RabbitMQ-HTTP-API">RabbitMQ HTTP API</h2><ul class="lvl-0"><li class="lvl-2"><p>RabbitMQ 的 HTTP API 是一个 基于 REST 的管理接口，主要用于对 RabbitMQ 的 资源管理和监控，它是 管理插件 <code>rabbitmq_management</code> 提供的功能。通过 HTTP API，你可以不用 <code>rabbitmqctl</code> 就能操作 RabbitMQ。</p></li><li class="lvl-2"><p>要使用 HTTP API，你需要在 RabbitMQ 节点上确保 <code>rabbitmq_management</code> 插件已经启动。前面我们介绍<code>web 管理控制台</code>时已经启动了该插件，所以你可以直接使用。</p></li><li class="lvl-2"><p>实际上 <code>Web管理控制台</code> 就是通过发送 AJAX 请求到 <code>/api/…</code> 接口来获取数据和执行操作。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/980Wwu.png" alt=""></p></li><li class="lvl-2"><p>这里有 HTTP API 的详细说明，本文不再赘述。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 CentOS9 中 RabbitMQ 的安装与使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rabbitmq.com&quot;&gt;Zookeeper官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文使用的 RabbitMQ 版本为 4.1.4。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="rabbitmq" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/rabbitmq/"/>
    
    <category term="分布式" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/rabbitmq/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="rabbitmq" scheme="https://blog.hanqunfeng.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper 的安装及使用</title>
    <link href="https://blog.hanqunfeng.com/2025/09/15/zookeeper-study/"/>
    <id>https://blog.hanqunfeng.com/2025/09/15/zookeeper-study/</id>
    <published>2025-09-15T13:30:05.000Z</published>
    <updated>2025-09-18T07:03:39.794Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 CentOS9 中 Zookeeper 的安装与使用。</p></li><li class="lvl-2"><p><a href="https://zookeeper.apache.org">Zookeeper官网</a></p></li><li class="lvl-2"><p>本文使用的 Zookeeper 版本为 3.8.4。</p></li></ul><span id="more"></span><h2 id="Zookeeper-简介">Zookeeper 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>ZooKeeper 是一个集中式服务，用于：</p></li></ul><table><thead><tr><th>场景</th><th>ZooKeeper 官方功能</th><th>主要节点类型</th><th>具体场景示例</th></tr></thead><tbody><tr><td>配置中心 (Config Center)</td><td>维护配置信息 (Configuration Management)</td><td>持久节点（Persistent）</td><td>把数据库连接信息、系统参数等放在 ZooKeeper 里，动态更新，像 Apollo、Spring Cloud Config 一样。</td></tr><tr><td>注册中心 (Service Registry)</td><td>提供命名服务 (Naming Service)</td><td>临时节点（Ephemeral）</td><td>服务实例启动时在 ZooKeeper 里注册自己的地址，客户端从 ZooKeeper 获取服务列表，类似于 Nacos、Eureka。</td></tr><tr><td>分布式锁 (Distributed Lock)</td><td>分布式同步 (Distributed Synchronization)</td><td>临时顺序节点（Ephemeral Sequential）</td><td>用临时顺序节点实现分布式锁，保证只有一个实例在执行关键任务，典型应用是分布式定时任务调度。</td></tr><tr><td>消息队列 (Message Queue)</td><td>集群管理服务 (Cluster Management)</td><td>持久/临时节点 + Watch 机制</td><td>通过 Watch 机制监听 ZNode 变化，节点间用数据变更当“信号”传递消息，早期 Kafka 用过这种方式。</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>ZooKeeper 数据模型的结构与 Unix 文件系统很类似，整体上可以看作是一棵树，每个节点称做一个 ZNode。</p></li><li class="lvl-2"><p>不同于文件系统，每个节点都可以保存数据，每一个 ZNode 默认能够存储 1MB 的数据，每个 ZNode 都可以通过其路径唯一标识，每个节点都有一个版本(version)，版本从0开始计数。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/QgdBSR.png" alt=""></p></li></ul><h2 id="Zookeeper-安装">Zookeeper 安装</h2><ul class="lvl-0"><li class="lvl-2"><p>运行 Zookeeper 需要安装 JDK1.8+。我这里使用 <a href="https://mirrors.tuna.tsinghua.edu.cn/Adoptium/">OpenJDK11</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /usr/local/jdk</span><br><span class="line"><span class="built_in">cd</span> /usr/local/jdk</span><br><span class="line"><span class="built_in">sudo</span> wget https://mirrors.tuna.tsinghua.edu.cn/Adoptium/11/jdk/x64/linux/OpenJDK11U-jdk_x64_linux_hotspot_11.0.28_6.tar.gz</span><br><span class="line"><span class="built_in">sudo</span> tar -zxvf OpenJDK11U-jdk_x64_linux_hotspot_11.0.28_6.tar.gz</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s jdk-11.0.28+6 jdk11</span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">vim /etc/profile <span class="comment"># 添加如下内容</span></span><br><span class="line">  <span class="built_in">export</span> JAVA_HOME=/usr/local/jdk/jdk11</span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 立即生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 查看java版本</span></span><br><span class="line">java -version</span><br><span class="line">openjdk version <span class="string">&quot;11.0.28&quot;</span> 2025-07-15</span><br><span class="line">OpenJDK Runtime Environment Temurin-11.0.28+6 (build 11.0.28+6)</span><br><span class="line">OpenJDK 64-Bit Server VM Temurin-11.0.28+6 (build 11.0.28+6, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="单机安装">单机安装</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://zookeeper.apache.org/releases.html">下载 Zookeeper</a>，目前最新的稳定版本为 <code>3.8.4</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://dlcdn.apache.org/zookeeper/zookeeper-3.8.4/apache-zookeeper-3.8.4-bin.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf apache-zookeeper-3.8.4-bin.tar.gz</span><br><span class="line"><span class="comment"># 配置个软连接，方便以后升级</span></span><br><span class="line"><span class="built_in">ln</span> -s apache-zookeeper-3.8.4-bin zookeeper</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改配置文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> zookeeper/conf</span><br><span class="line"><span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br><span class="line"><span class="comment"># 建议修改 zoo.cfg 配置文件，将 dataDir=/tmp/zookeeper 修改为指定的data目录</span></span><br><span class="line">vim zoo.cfg</span><br></pre></td></tr></table></figure><blockquote><p>zoo.cfg 参数说明</p></blockquote><table><thead><tr><th>配置项</th><th>说明</th><th>默认值</th><th>单位 / 备注</th></tr></thead><tbody><tr><td><strong>tickTime</strong></td><td>ZooKeeper 时间配置中的基本单位</td><td>2000</td><td>毫秒</td></tr><tr><td><strong>initLimit</strong></td><td>follower 初始化连接到 leader 的最大时长，单位为 tickTime 倍数</td><td>10</td><td>10 × tickTime = 20000 ms</td></tr><tr><td><strong>syncLimit</strong></td><td>follower 与 leader 数据同步的最大时长，单位为 tickTime 倍数</td><td>5</td><td>5 × tickTime = 10000 ms</td></tr><tr><td><strong>dataDir</strong></td><td>数据和日志存储目录（未指定 dataLogDir 时，日志也会保存在此目录）</td><td>/tmp/zookeeper</td><td>目录路径</td></tr><tr><td><strong>clientPort</strong></td><td>客户端连接 ZooKeeper 的端口号</td><td>2181</td><td>默认 2181</td></tr><tr><td><strong>maxClientCnxns</strong></td><td>单个客户端最大并发连接数</td><td>60</td><td>超过限制后新连接会被拒绝</td></tr><tr><td><strong>autopurge.snapRetainCount</strong></td><td>快照文件保留个数，超过数量的将会被清理</td><td>3</td><td>默认 3</td></tr><tr><td><strong>autopurge.purgeInterval</strong></td><td>清理任务执行间隔时间，单位小时，0 表示不自动清理</td><td>1</td><td>1 小时</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>启动 zookeeper</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> zookeeper</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">bin/zkServer.sh start</span><br><span class="line"><span class="comment"># 指定配置文件</span></span><br><span class="line">bin/zkServer.sh start conf/zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">bin/zkServer.sh stop</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">bin/zkServer.sh status</span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">./bin/zkServer.sh version</span><br></pre></td></tr></table></figure><h3 id="集群安装">集群安装</h3><h4 id="ZooKeeper-集群角色">ZooKeeper 集群角色</h4><h5 id="1-Leader（领导者）">1. Leader（领导者）</h5><ul class="lvl-0"><li class="lvl-2"><p><strong>职责：</strong></p><ul class="lvl-2"><li class="lvl-4">事务请求（写操作）的唯一调度者和处理者，保证集群事务处理的顺序性；</li><li class="lvl-4">集群内部各个服务器的调度者；</li><li class="lvl-4">对于 <code>create</code>、<code>setData</code>、<code>delete</code> 等写操作请求，统一转发给 Leader 处理；</li><li class="lvl-4">Leader 负责决定编号、执行操作，这个过程称为 <strong>事务</strong>。</li></ul></li></ul><ul class="lvl-0"><li class="lvl-2"><p>三台虚拟机 zoo.cfg 文件末尾添加配置，启动时会自动选举出 Leader 角色，则其余就是 Follower 角色。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.1=10.250.0.229:2888:3888</span><br><span class="line">server.2=10.250.0.152:2888:3888</span><br><span class="line">server.3=10.250.0.36:2888:3888</span><br></pre></td></tr></table></figure><h5 id="2-Follower（跟随者）">2. Follower（跟随者）</h5><ul class="lvl-0"><li class="lvl-2"><p><strong>职责：</strong></p><ul class="lvl-2"><li class="lvl-4">处理客户端非事务（读操作）请求（可以直接响应）；</li><li class="lvl-4">转发事务请求给 Leader；</li><li class="lvl-4">参与集群 Leader 选举投票。</li></ul></li></ul><blockquote><p>leader节点可以处理读写请求，follower只可以处理读请求。follower在接到写请求时会把写请求转发给leader来处理。</p></blockquote><h5 id="3-Observer（观察者）">3. Observer（观察者）</h5><ul class="lvl-0"><li class="lvl-2"><p><strong>职责：</strong></p><ul class="lvl-2"><li class="lvl-4">对于非事务请求（读操作）可以独立处理；</li><li class="lvl-4">对于事务请求会转发给 Leader 处理；</li><li class="lvl-4">接收来自 Leader 的 <code>inform</code> 信息，更新本地存储；</li><li class="lvl-4">不参与提交和选举投票；</li><li class="lvl-4">通常用于 <strong>提升集群非事务处理能力</strong>，不影响集群事务处理性能。</li></ul></li></ul><ul class="lvl-0"><li class="lvl-2"><p>配置一个 ID 为 4 的观察者节点：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.4=10.250.0.56:2888:3888:observer</span><br></pre></td></tr></table></figure><h4 id="集群搭建">集群搭建</h4><ul class="lvl-0"><li class="lvl-2"><p>环境准备：4台服务器，按照 <code>单机安装</code> 的方式准备好 Zookeeper 环境</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10.250.0.229</span><br><span class="line">10.250.0.152</span><br><span class="line">10.250.0.36</span><br><span class="line">10.250.0.56</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>zoo.cfg</code> 文件末尾添加配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.1=10.250.0.229:2888:3888</span><br><span class="line">server.2=10.250.0.152:2888:3888</span><br><span class="line">server.3=10.250.0.36:2888:3888</span><br><span class="line">server.4=10.250.0.56:2888:3888:observer</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>分别在 <code>dataDir</code> 目录下创建 <code>myid</code> 文件，在文件中添加与 server 对应的编号（注意：上下不要有空行，左右不要有空格）</p></li><li class="lvl-2"><p>分别启动 Zookeeper 服务器</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分别启动4个节点的zookeeper server</span></span><br><span class="line">bin/zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态，可以看到节点角色类型</span></span><br><span class="line">bin/zkServer.sh status</span><br></pre></td></tr></table></figure><h4 id="集群最少节点要求和扩容规则">集群最少节点要求和扩容规则</h4><ul class="lvl-0"><li class="lvl-2"><p>ZooKeeper 使用 多数派（quorum）机制 来保证数据一致性</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.集群总节点数 N</span><br><span class="line">2.容忍的宕机节点数 F = (N-1)/2（向下取整）</span><br><span class="line">3.要保证集群可用，需要 大于 N/2 的节点存活</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>集群扩容规则</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.节点总数必须是奇数</span><br><span class="line">  奇数节点可以保证多数派投票机制正常</span><br><span class="line">  偶数节点不推荐，容错能力不增加（比如 4 台，仍然只容忍 1 台宕机）</span><br><span class="line"></span><br><span class="line">2.每次扩容建议 +2 节点</span><br><span class="line">  这样既保持奇数，又增加 quorum 容错能力</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>最少节点与容错能力表格</p></li></ul><table><thead><tr><th>集群总节点数 N</th><th>容忍宕机数 F</th><th>可用 quorum 节点数</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td><td>不推荐，无法容忍故障</td></tr><tr><td>2</td><td>0</td><td>2</td><td>不推荐，1 台宕机就不可用</td></tr><tr><td>3</td><td>1</td><td>2</td><td>最小可用生产集群</td></tr><tr><td>5</td><td>2</td><td>3</td><td>推荐生产集群规模</td></tr><tr><td>7</td><td>3</td><td>4</td><td>高可用大集群</td></tr><tr><td>9</td><td>4</td><td>5</td><td>更大集群，高容错</td></tr><tr><td>11</td><td>5</td><td>6</td><td>极高可用场景</td></tr></tbody></table><h2 id="ZooKeeper-默认端口说明">ZooKeeper 默认端口说明</h2><table><thead><tr><th>端口</th><th>用途</th><th>说明</th></tr></thead><tbody><tr><td>2181</td><td>客户端连接端口</td><td>客户端通过这个端口访问 ZooKeeper</td></tr><tr><td>2888</td><td>集群内部通信</td><td>follower 与 leader 之间同步数据</td></tr><tr><td>3888</td><td>leader 选举端口</td><td>集群选举 leader 使用</td></tr><tr><td>8080 (可选)</td><td>admin/metrics web端口</td><td>如果开启了 adminServer</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 永久开启端口</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --permanent --add-port=2181/tcp</span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --permanent --add-port=2888/tcp</span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --permanent --add-port=3888/tcp</span><br><span class="line"><span class="comment"># 如果使用 adminServer</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --permanent --add-port=8080/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载防火墙配置</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否开放成功</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --list-all</span><br></pre></td></tr></table></figure><h2 id="客户端连接">客户端连接</h2><ul class="lvl-0"><li class="lvl-2"><p>命令行</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认连接 127.0.0.1:2181</span></span><br><span class="line">bin/zkCli.sh</span><br><span class="line"><span class="comment"># 指定 -server ip:port，如果是集群，则连接任意一个节点，ZooKeeper 会自动处理与 Leader/Follower 的交互</span></span><br><span class="line">bin/zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure><blockquote><p>客户端命令简介：<a href="https://zookeeper.apache.org/doc/r3.8.4/zookeeperCLI.html">参考官网</a></p></blockquote><table><thead><tr><th>命令</th><th>语法示例</th><th>功能描述</th><th>常用参数及说明</th><th>示例</th></tr></thead><tbody><tr><td><strong>help</strong></td><td><code>help</code></td><td>显示所有操作命令</td><td>无</td><td><code>help</code></td></tr><tr><td><strong>version</strong></td><td><code>version</code></td><td>查看客户端和服务器版本信息</td><td>无</td><td><code>version</code></td></tr><tr><td><strong>connect</strong></td><td><code>connect host:port</code></td><td>连接到指定 ZooKeeper 服务器</td><td><code>host:port</code>: 服务器地址</td><td><code>connect 127.0.0.1:2181</code></td></tr><tr><td><strong>close</strong></td><td><code>close</code></td><td>关闭当前会话 ,通过 <code>connect</code> 可重连</td><td>无</td><td><code>close</code></td></tr><tr><td><strong>quit</strong></td><td><code>quit</code></td><td>退出客户端</td><td>无</td><td><code>quit</code></td></tr><tr><td><strong>ls</strong></td><td><code>ls [-s] [-w] [-R] path</code></td><td>查看节点的子节点</td><td>- <code>-w</code>: 监听子节点变化<br>- <code>-s</code>: 显示节点状态信息<br>- <code>-R</code>: 递归查看</td><td><code>ls -s -w /zk_test</code></td></tr><tr><td><strong>getAllChildrenNumber</strong></td><td><code>getAllChildrenNumber path</code></td><td>获取某节点所有子节点的总数</td><td>无</td><td><code>getAllChildrenNumber /zk_test</code></td></tr><tr><td><strong>getEphemerals</strong></td><td><code>getEphemerals path</code></td><td>获取某路径下所有临时节点</td><td>无</td><td><code>getEphemerals /zk_test</code></td></tr><tr><td><strong>create</strong></td><td><code>create [-s] [-e] [-c] [-t ttl] path [data] [acl]</code></td><td>创建节点</td><td>- <code>-s</code>: 顺序节点<br>- <code>-e</code>: 临时节点<br>- <code>-c</code>: 容器节点<br>- <code>-t ttl</code>: TTL节点，单位毫秒</td><td><code>create -e /zk_test_ephemeral &quot;temp_data&quot;</code></td></tr><tr><td><strong>get</strong></td><td><code>get [-s] [-w] path</code></td><td>获取节点数据信息</td><td>- <code>-s</code>: 显示节点状态信息<br>- <code>-w</code>: 监听节点变化</td><td><code>get -s -w /zk_test</code></td></tr><tr><td><strong>set</strong></td><td><code>set [-s] [-v version] path data</code></td><td>设置节点数据</td><td>- <code>-s</code>: 显示节点状态信息<br>- <code>-v</code>: 指定版本号</td><td><code>set /zk_test &quot;new_data&quot;</code></td></tr><tr><td><strong>stat</strong></td><td><code>stat [-w] path</code></td><td>查看节点状态信息</td><td>- <code>-w</code>: 监听节点变化</td><td><code>stat -w /zk_test</code></td></tr><tr><td><strong>sync</strong></td><td><code>sync path</code></td><td>同步指定节点数据</td><td>无</td><td><code>sync /zk_test</code></td></tr><tr><td><strong>delete</strong></td><td><code>delete [-v version] path</code></td><td>删除某一节点（无子节点）</td><td>- <code>-v</code>: 节点版本号</td><td><code>delete /zk_test</code></td></tr><tr><td><strong>deleteall</strong></td><td><code>deleteall path</code></td><td>递归删除某一节点及其子节点</td><td>无</td><td><code>deleteall /zk_test</code></td></tr><tr><td><strong>getAcl</strong></td><td><code>getAcl [-s] path</code></td><td>获取节点访问控制信息</td><td>- <code>-s</code>: 显示节点状态信息</td><td><code>getAcl /zk_test</code></td></tr><tr><td><strong>setAcl</strong></td><td><code>setAcl [-s] [-v version] [-R] path acl</code></td><td>设置节点访问控制列表</td><td>- <code>-s</code>: 显示节点状态信息<br>- <code>-v</code>: 指定版本号<br>- <code>-R</code>: 递归设置</td><td><code>setAcl /zk_test world:anyone:r</code></td></tr><tr><td><strong>listquota</strong></td><td><code>listquota path</code></td><td>查看节点配额信息</td><td>无</td><td><code>listquota /zk_test</code></td></tr><tr><td><strong>setquota</strong></td><td><code>setquota [-n] [-b] val path</code></td><td>对节点增加限制</td><td>- <code>-n</code>: 子节点最大个数<br>- <code>-b</code>: 数据值最大长度，-1 表示无限制</td><td><code>setquota -n 5 /zk_test</code></td></tr><tr><td><strong>delquota</strong></td><td><code>delquota [-n                                    | -b] path</code></td><td>删除节点配额限制</td><td>- <code>-n</code>: 删除子节点数限制<br>- <code>-b</code>: 删除数据值大小限制</td><td><code>delquota -n /zk_test</code></td></tr><tr><td><strong>config</strong></td><td><code>config</code></td><td>查看服务器配置</td><td>无</td><td><code>config</code></td></tr><tr><td><strong>whoami</strong></td><td><code>whoami</code></td><td>查看当前会话身份</td><td>无</td><td><code>whoami</code></td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>GUI 工具</p></li></ul><table><thead><tr><th>名称</th><th>类型 / 运行方式</th><th>优点</th><th>注意事项</th></tr></thead><tbody><tr><td><strong>PrettyZoo</strong></td><td>桌面应用（JavaFX）(<a href="https://github.com/vran-dev/PrettyZoo" title="vran-dev/PrettyZoo: 😉 Pretty nice Zookeeper GUI, Support ...">GitHub</a>)</td><td>支持 Mac/Windows/Linux，界面友好；支持节点创建/删除/更新/查询，ACL 管理，多 ZK 实例管理，SSH 隧道等功能。(<a href="https://github.com/vran-dev/PrettyZoo" title="vran-dev/PrettyZoo: 😉 Pretty nice Zookeeper GUI, Support ...">GitHub</a>)</td><td>项目已经 archived，维护可能不活跃。最新版可能在兼容性或 Bug 修复方面不如活跃项目。也可能需要自己构建或调试。(<a href="https://github.com/vran-dev/PrettyZoo" title="vran-dev/PrettyZoo: 😉 Pretty nice Zookeeper GUI, Support ...">GitHub</a>)</td></tr><tr><td><strong>ZooNavigator</strong></td><td>Web 界面 + 可 Docker 部署或本地启动(<a href="https://github.com/elkozmon/zoonavigator" title="elkozmon/zoonavigator: Web-based ZooKeeper UI">GitHub</a>)</td><td>功能丰富；支持多个 Zookeeper 版本（如 3.5.x ～ 3.9.x）；浏览 / 编辑 /搜索节点；导入导出配置；支持浏览器访问，无需本地 heavy GUI。(<a href="https://github.com/elkozmon/zoonavigator" title="elkozmon/zoonavigator: Web-based ZooKeeper UI">GitHub</a>)</td><td>因为 Web 应用，可能对浏览器安全策略与网络延迟敏感；需要部署自己版本或 Docker；如果要求本地脱机操作时，有些功能可能稍不如桌面应用。</td></tr><tr><td><strong>ZooKeeper Assistant</strong></td><td>桌面／管理员面板类型（支持监控界面等）(<a href="https://dev.to/redisant/an-exciting-apache-zookeeper-desktop-gui-1fdo" title="An exciting Apache ZooKeeper Desktop GUI">DEV Community</a>)</td><td>除了浏览节点树以外，还提供健康状态监控（延迟、请求数等）、不同数据格式支持（JSON/XML 等）、导入/导出节点数据、命令行操作集成。(<a href="https://dev.to/redisant/an-exciting-apache-zookeeper-desktop-gui-1fdo" title="An exciting Apache ZooKeeper Desktop GUI">DEV Community</a>)</td><td>有些功能可能在 Mac 上兼容性或视觉体验需要调试；具体版本支持情况要看最近更新。某些监控界面可能依赖于 ZK 的指标或插件。</td></tr></tbody></table><h2 id="Zookeeper-节点类型">Zookeeper 节点类型</h2><table><thead><tr><th>节点类型</th><th>生命周期说明</th><th>创建命令示例</th><th>特点说明</th></tr></thead><tbody><tr><td><strong>持久节点</strong> (Persistent)</td><td>节点一直存在，除非手动删除，即使客户端会话关闭，节点也不会消失</td><td><code>create /locks</code></td><td>适合存储配置信息、元数据等持久数据</td></tr><tr><td><strong>临时节点</strong> (Ephemeral)</td><td>客户端会话关闭（异常或超时）时，节点自动被删除</td><td><code>create -e /locks/DBLock</code></td><td>常用于分布式锁、临时会话数据</td></tr><tr><td><strong>有序节点</strong> (Sequential)</td><td>在持久或临时节点基础上，增加有序编号，ZooKeeper 自动在节点名后加递增序号</td><td><code>create -e -s /jobs/job</code></td><td>常用于分布式锁、队列等需要顺序的场景</td></tr><tr><td><strong>容器节点</strong> (Container)</td><td>V3.5.3+，当容器节点下的最后一个子节点被删除后，容器节点也会自动删除</td><td><code>create -c /work</code></td><td>适合分布式任务临时目录、动态数据目录</td></tr><tr><td><strong>TTL 节点</strong> (TTL)</td><td>在指定 TTL 时间内未修改且无子节点，节点会被自动删除（需开启 <code>extendedTypesEnabled=true</code> 配置）</td><td><code>create -t 3000 /ttl_node</code></td><td>适合临时缓存、临时状态数据，过期自动清理</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>注意</p><ul class="lvl-2"><li class="lvl-4">同一级节点 key 名称是唯一的</li><li class="lvl-4">创建节点时，必须要带上全路径</li></ul></li><li class="lvl-2"><p>节点状态信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 16] <span class="built_in">stat</span> /test</span><br><span class="line">cZxid = 0x100000002                   <span class="comment"># Znode创建的事务id</span></span><br><span class="line">ctime = Mon Sep 15 09:44:51 UTC 2025  <span class="comment"># 创建时间</span></span><br><span class="line">mZxid = 0x100000004                   <span class="comment"># 最后一次修改事务id</span></span><br><span class="line">mtime = Mon Sep 15 09:47:12 UTC 2025  <span class="comment"># 最后一次修改时间</span></span><br><span class="line">pZxid = 0x400000004                   <span class="comment"># 表示该节点的子节点列表最后一次修改的事务ID，添加子节点或删除子节点就会影响子节点列表，但是修改子节点的数据内容则不影响该ID（注意: 只有子节点列表变更了才会变更pzxid，子节点内容变更不会影响pzxid）</span></span><br><span class="line">cversion = 1                          <span class="comment"># 子节点的版本号。当znode的子节点有变化时，cversion 的值就会增加1。</span></span><br><span class="line">dataVersion = 1                       <span class="comment"># znode的数据版本号。每次对节点进行set操作，dataVersion的值都会增加1（即使设置的是相同的数据），可有效避免了数据更新时出现的先后顺序问题</span></span><br><span class="line">aclVersion = 0                        <span class="comment"># znode的ACL版本号。每次对节点进行ACL设置，aclVersion的值都会增加1</span></span><br><span class="line">ephemeralOwner = 0x0                  <span class="comment"># 如果该节点为临时节点, ephemeralOwner值表示与该节点绑定的session id。如果不是, ephemeralOwner值为0(持久节点)。</span></span><br><span class="line">dataLength = 3                        <span class="comment"># znode的数据长度</span></span><br><span class="line">numChildren = 1                       <span class="comment"># znode的子节点数量（只统计直接子节点的数量）</span></span><br></pre></td></tr></table></figure><h2 id="Zookeeper-监听机制">Zookeeper 监听机制</h2><ul class="lvl-0"><li class="lvl-2"><p>watch机制，顾名思义是一个监听机制。Zookeeper中的watch机制，必须客户端先去服务端注册监听，这样事件发生时才会触发监听，通知给客户端。</p></li><li class="lvl-2"><p>监听的对象是事件，支持的事件类型如下：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- None: 连接建立事件</span><br><span class="line">- NodeCreated： 节点创建</span><br><span class="line">- NodeDeleted： 节点删除</span><br><span class="line">- NodeDataChanged：节点数据变化</span><br><span class="line">- NodeChildrenChanged：子节点列表变化</span><br><span class="line">- DataWatchRemoved：节点监听被移除</span><br><span class="line">- ChildWatchRemoved：子节点监听被移除</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>监听特性</p></li></ul><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><strong>一次性触发</strong></td><td>Watch 是一次性的，一旦被触发就会被移除。再次使用时需要重新注册。</td></tr><tr><td><strong>客户端顺序回调</strong></td><td>Watch 回调是顺序串行执行的，客户端只有在回调完成后才能看到最新的数据状态。</td></tr><tr><td><strong>轻量级</strong></td><td>Watcher 回调逻辑不应过多，以免阻塞或影响其他 Watch 的执行。</td></tr><tr><td><strong>最小通信单位</strong></td><td><code>WatchEvent</code> 是最小的通信单位，只包含通知状态、事件类型和节点路径，不包含节点数据变化前后的具体内容。</td></tr><tr><td><strong>时效性</strong></td><td>Watcher 仅在当前 Session 完全失效时才无效。如果 Session 快速重连成功，Watcher 依然有效，可继续接收通知。</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>可以开启监听的命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#监听节点数据的变化</span></span><br><span class="line">get -w path</span><br><span class="line"><span class="built_in">stat</span> -w path</span><br><span class="line"></span><br><span class="line"><span class="comment">#监听子节点增减的变化</span></span><br><span class="line"><span class="built_in">ls</span> -w path</span><br></pre></td></tr></table></figure><h3 id="永久性-Watch">永久性 Watch</h3><ul class="lvl-0"><li class="lvl-2"><p>在被触发之后，仍然保留，可以继续监听ZNode上的变更，是Zookeeper 3.6.0版本新增的功能</p></li><li class="lvl-2"><p>创建监听</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addWatch [-m mode] path</span><br><span class="line"></span><br><span class="line"><span class="comment"># mode:</span></span><br><span class="line"><span class="comment"># - PERSISTENT: 持久化订阅，针对当前节点的修改和删除事件，以及当前节点的子节点的删除和新增事件。</span></span><br><span class="line"><span class="comment"># - PERSISTENT_RECURSIVE: 持久化递归订阅(这个是默认值)，在PERSISTENT的基础上，增加了子节点修改的事件触发，以及子节点的子节点的数据变化都会触发相关事件（满足递归订阅特性）</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除监听</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通一次性 Watch 不需要手动删除，触发后会自动移除；removewatches 主要用于持久 Watch（persistent watch）。</span></span><br><span class="line">removewatches path [-c|-d|-a] [-l]</span><br><span class="line"><span class="comment"># -c: 仅删除当前客户端的 Watch</span></span><br><span class="line"><span class="comment"># -d: 删除指定节点的所有 Watch(包括其他客户端注册的)</span></span><br><span class="line"><span class="comment"># -a: 删除所有节点的所有 Watch（包括其他客户端的 Watch），慎用！！！</span></span><br><span class="line"><span class="comment"># -l: 显示被删除的 Watch 列表</span></span><br></pre></td></tr></table></figure><h3 id="监听器应用场景">监听器应用场景</h3><table><thead><tr><th>类型</th><th>特点</th><th>应用场景举例</th><th>适合的节点类型</th></tr></thead><tbody><tr><td><strong>临时监听</strong>（一次性 Watch）</td><td>- 触发一次后自动移除<br>- 客户端需手动重新注册<br>- 轻量级，适合单次通知</td><td>1. <strong>配置中心</strong>：配置变化时通知客户端，客户端收到通知后重新拉取最新配置 <br> 2. <strong>分布式锁</strong>：节点删除（锁释放）后通知等待的客户端重新竞争锁 <br> 3. <strong>主从选举</strong>：主节点宕机后，其他节点收到通知重新选主</td><td><strong>持久节点</strong>（Persistent） <br><strong>临时节点</strong>（Ephemeral，用于锁和选主）</td></tr><tr><td><strong>永久监听</strong>（Persistent Watch）</td><td>- 注册后持续有效，直到客户端主动移除<br>- 支持子节点变化、数据变化的长期监听</td><td>1. <strong>服务发现</strong>：客户端长期监听服务节点变化，节点上线/下线时自动更新本地服务列表 <br> 2. <strong>监控告警</strong>：监控重要节点状态，节点数据变化或被删除时自动触发告警 <br> 3. <strong>分布式缓存</strong>：缓存节点变化时，通知客户端刷新缓存</td><td><strong>持久节点</strong>（Persistent）</td></tr></tbody></table><h2 id="ACL权限控制">ACL权限控制</h2><ul class="lvl-0"><li class="lvl-2"><p>ZooKeeper 默认情况下，所有节点的权限都是 <code>OPEN_ACL_UNSAFE</code> ，任何客户端都可以读写任意节点数据。</p></li><li class="lvl-2"><p>生产环境中，通常需要限制对节点的访问权限，即 <code>ACL</code> 权限控制。</p></li><li class="lvl-2"><p>ZooKeeper 里的 ACL（Access Control List，访问控制列表） 主要用于控制 谁可以对某个节点做什么操作，它是 ZooKeeper 提供的安全机制之一。</p></li></ul><h3 id="ACL-的作用">ACL 的作用</h3><ul class="lvl-0"><li class="lvl-2"><p>限制访问：只允许授权用户或客户端对指定节点进行读、写、删除等操作。</p></li><li class="lvl-2"><p>防止误操作：保护重要节点不被未授权的客户端修改或删除。</p></li><li class="lvl-2"><p>安全隔离：不同的应用或团队可以在同一 ZooKeeper 集群里安全共存。</p></li></ul><h3 id="ACL-的组成">ACL 的组成</h3><ul class="lvl-0"><li class="lvl-2"><p>zookeeper 的 acl 通过 <code>scheme:id:permissions</code> 来构成权限列表。</p><ul class="lvl-2"><li class="lvl-4">scheme：授权的模式，代表采用的某种权限机制，包括 world、auth、digest、ip、super 几种。</li><li class="lvl-4">id：授权对象，代表允许访问的用户。如果我们选择采用 IP 方式，使用的授权对象可以是一个 IP 地址或 IP 地址段；而如果使用 Digest 或 Super 方式，则对应于一个用户名。如果是 World 模式，是授权系统中所有的用户。</li><li class="lvl-4">permissions：授权的权限，权限组合字符串，由 cdrwa 组成，其中每个字母代表支持不同权限， 创建权限 create©、删除权限 delete(d)、读权限 read®、写权限 write(w)、管理权限admin(a)。</li></ul></li></ul><h3 id="常见的-scheme-类型">常见的 scheme 类型</h3><table><thead><tr><th>Scheme</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>world</code></td><td>开放给所有用户，仅可设置为 <code>anyone</code> 代表所有客户端</td><td><code>world:anyone:r</code></td></tr><tr><td><code>auth</code></td><td>已通过 <code>addauth</code> 添加认证的客户端</td><td><code>auth:user1:rw</code></td></tr><tr><td><code>digest</code></td><td>用户名+密码认证（常用），<code>user:pwd</code> 需要加密存储</td><td><code>digest:user1:password:rw</code></td></tr><tr><td><code>ip</code></td><td>基于 IP 地址控制访问</td><td><code>ip:192.168.1.10:r</code></td></tr><tr><td><code>super</code></td><td>超级用户，拥有所有权限</td><td><code>super:admin:secret</code></td></tr></tbody></table><h3 id="权限类型">权限类型</h3><table><thead><tr><th>权限字符</th><th>权限名称</th><th>允许的操作/命令示例</th><th>说明</th></tr></thead><tbody><tr><td><strong><code>r</code></strong></td><td>读取(Read)</td><td><code>get /node</code> <br> <code>ls /node</code> <br> <code>getAcl /node</code></td><td>允许读取节点数据和子节点列表</td></tr><tr><td><strong><code>w</code></strong></td><td>写入(Write)</td><td><code>set /node data</code></td><td>允许修改节点数据</td></tr><tr><td><strong><code>c</code></strong></td><td>创建(Create)</td><td><code>create /node/sub &quot;data&quot;</code></td><td>允许在当前节点下创建子节点</td></tr><tr><td><strong><code>d</code></strong></td><td>删除(Delete)</td><td><code>delete /node/sub</code></td><td>允许删除当前节点的子节点</td></tr><tr><td><strong><code>a</code></strong></td><td>管理(Admin)</td><td><code>setAcl /node acl</code></td><td>允许修改 ACL 权限</td></tr></tbody></table><h3 id="典型应用场景">典型应用场景</h3><table><thead><tr><th>认证方式（scheme）</th><th>权限类型（permissions）</th><th>典型 ACL 配置示例</th><th>应用场景</th><th>特点说明</th></tr></thead><tbody><tr><td><strong>world</strong></td><td><code>r</code>（只读）</td><td><code>world:anyone:r</code></td><td>公共配置节点，所有客户端都可读取</td><td>简单、无认证，适合对安全性要求不高的只读场景</td></tr><tr><td><strong>auth</strong></td><td><code>r,w,c,d,a</code>（可组合）</td><td><code>auth:user:rwcd</code></td><td>内部应用共享节点，需客户端认证</td><td>需先 <code>addauth digest user1:password</code> 添加认证，适合多客户端共享</td></tr><tr><td><strong>digest</strong>（常用）</td><td><code>r,w,c,d,a</code>（可组合）</td><td><code>digest:user:secret:crwda</code></td><td>高安全节点，配置中心，分布式锁</td><td>用户名+密码认证，需加密存储密码，灵活安全</td></tr><tr><td><strong>ip</strong></td><td><code>r,w,c,d,a</code>（可组合）</td><td><code>ip:192.168.1.100:r</code></td><td>基于 IP 限制访问的场景</td><td>快速控制某些固定 IP 可访问，适合内部网络应用</td></tr></tbody></table><h3 id="ACL-相关命令">ACL 相关命令</h3><table><thead><tr><th>命令</th><th>语法</th><th>功能说明</th><th>示例</th></tr></thead><tbody><tr><td><strong>getAcl</strong></td><td><code>getAcl path</code></td><td>读取指定节点的 ACL</td><td><code>getAcl /my_node</code></td></tr><tr><td><strong>setAcl</strong></td><td><code>setAcl path acl</code></td><td>设置指定节点的 ACL</td><td><code>setAcl /my_node world:anyone:crdwa</code></td></tr><tr><td><strong>create</strong></td><td><code>create path data [acl]</code></td><td>创建节点时指定 ACL</td><td><code>create /secure_node &quot;secret_data&quot; digest:user1:pwd:crwa</code></td></tr><tr><td><strong>addAuth</strong></td><td><code>addauth scheme auth</code></td><td>添加认证用户（类似登录）</td><td><code>addauth digest user1:password</code></td></tr><tr><td><strong>deleteAcl(不存在)</strong></td><td><code>setAcl path world:anyone:</code></td><td>删除节点 ACL（设为空或全开放）</td><td><code>setAcl /my_node world:anyone:</code></td></tr></tbody></table><h3 id="auth-与-digest-的区别"><code>auth</code> 与 <code>digest</code> 的区别</h3><ul class="lvl-0"><li class="lvl-2"><p>使用 <code>auth</code> 时，需先 <code>addauth digest user1:password</code> 添加认证，<code>setAcl</code> 时，使用 <code>auth:user1:rw</code>，这里是为已经登录的用户设置节点权限，所以不需要设置密码</p></li><li class="lvl-2"><p>使用 <code>digest</code> 时，无需进行登录认证，所以需要指定密码，即<code>setAcl</code> 时，使用 <code>digest:user1:password:rw</code></p></li><li class="lvl-2"><p><code>digest</code> 的密码是经过加密的，所以不能直接使用明文密码</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加密密码</span></span><br><span class="line"><span class="built_in">echo</span> -n user:123456 | openssl dgst -binary -sha1 | openssl <span class="built_in">base64</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">6DY5WhzOfGsWQ1XFuIyzxkpwdPo=</span><br><span class="line"></span><br><span class="line"><span class="comment"># zookeeper客户端中设置权限</span></span><br><span class="line">setAcl /name digest:user:6DY5WhzOfGsWQ1XFuIyzxkpwdPo=:cdrwa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录时密码是明文</span></span><br><span class="line">addauth digest user:123456</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>无论使用 <code>digest</code> 还是 <code>auth</code>，在需要访问节点前，都需要先登录。</p></li></ul><h3 id="super-超级管理员"><code>super</code> 超级管理员</h3><ul class="lvl-0"><li class="lvl-2"><p>拥有全部节点的所有权限: <code>crwda</code></p></li><li class="lvl-2"><p>设置超级管理员</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加密密码，用户和密码可以随意设置</span></span><br><span class="line"><span class="built_in">echo</span> -n admin:123456 | openssl dgst -binary -sha1 | openssl <span class="built_in">base64</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">0uek/hZ/V9fgiM35b0Z2226acMQ=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 conf/zoo.cfg 文件并编辑，在文件中添加下面内容</span></span><br><span class="line">DigestAuthenticationProvider.superDigest=admin:0uek/hZ/V9fgiM35b0Z2226acMQ=</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>重新启动服务后登录客户端进行测试</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建节点并设置权限，这里将节点授权给用户user</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 10] create /testNode 666 digest:user:6DY5WhzOfGsWQ1XFuIyzxkpwdPo=:rw</span><br><span class="line">Created /testNode</span><br><span class="line"><span class="comment"># 查看节点内容被拒绝</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] get /testNode</span><br><span class="line">Insufficient permission : /testNode</span><br><span class="line"><span class="comment"># 登录super用户，验证超级用户是否有权限访问节点</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 12] addauth digest admin:123456</span><br><span class="line"><span class="comment"># 此时查看节点内容就可以了</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 13] get /testNode</span><br><span class="line">666</span><br></pre></td></tr></table></figure><h2 id="4字母命令">4字母命令</h2><h3 id="什么是-4-字母命令">什么是 <code>4 字母命令</code>?</h3><ul class="lvl-0"><li class="lvl-2"><p>ZooKeeper 提供了一组简短的 <code>4个字母的管理命令</code>(Four Letter Words Commands, 4lw)，可以通过 TCP 连接 ZooKeeper 端口（默认 2181）发送这些命令，快速查看或管理 ZooKeeper 状态。</p></li><li class="lvl-2"><p>常用的 <code>4字母命令</code></p></li></ul><table><thead><tr><th>命令</th><th>引入版本</th><th>功能描述</th><th>示例</th></tr></thead><tbody><tr><td><code>conf</code></td><td>3.3.0</td><td>打印服务相关配置的详细信息</td><td><code>echo conf | nc 127.0.0.1 2181</code></td></tr><tr><td><code>cons</code></td><td>3.3.0</td><td>列出所有连接到该服务器的客户端连接/会话详细信息，包括接收/发送的包数量、会话ID、操作延迟、最后操作执行时间等</td><td><code>echo cons | nc 127.0.0.1 2181</code></td></tr><tr><td><code>crst</code></td><td>3.3.0</td><td>重置所有连接的连接和会话统计信息</td><td><code>echo crst | nc 127.0.0.1 2181</code></td></tr><tr><td><code>dump</code></td><td>-</td><td>列出重要的会话和临时节点信息，仅在 Leader 节点上有效</td><td><code>echo dump | nc 127.0.0.1 2181</code></td></tr><tr><td><code>envi</code></td><td>-</td><td>打印服务环境的详细信息</td><td><code>echo envi | nc 127.0.0.1 2181</code></td></tr><tr><td><code>reqs</code></td><td>-</td><td>列出未经处理的请求</td><td><code>echo reqs | nc 127.0.0.1 2181</code></td></tr><tr><td><code>ruok</code></td><td>-</td><td>测试服务是否处于正常状态；正常返回 <code>imok</code></td><td><code>echo ruok | nc 127.0.0.1 2181</code></td></tr><tr><td><code>stat</code></td><td>-</td><td>输出关于性能和客户端连接的列表信息</td><td><code>echo stat | nc 127.0.0.1 2181</code></td></tr><tr><td><code>srst</code></td><td>-</td><td>重置服务器统计信息</td><td><code>echo srst | nc 127.0.0.1 2181</code></td></tr><tr><td><code>srvr</code></td><td>3.3.0</td><td>列出连接服务器的详细信息</td><td><code>echo srvr | nc 127.0.0.1 2181</code></td></tr><tr><td><code>wchs</code></td><td>3.3.0</td><td>列出服务器 Watch 的详细信息</td><td><code>echo wchs | nc 127.0.0.1 2181</code></td></tr><tr><td><code>wchc</code></td><td>3.3.0</td><td>通过会话列出服务器 Watch 的详细信息，输出与 Watch 相关的会话列表</td><td><code>echo wchc | nc 127.0.0.1 2181</code></td></tr><tr><td><code>wchp</code></td><td>3.3.0</td><td>通过路径列出服务器 Watch 的详细信息，输出与会话相关的路径</td><td><code>echo wchp | nc 127.0.0.1 2181</code></td></tr><tr><td><code>mntr</code></td><td>3.4.0</td><td>输出可用于检测集群健康状态的关键指标变量列表</td><td><code>echo mntr | nc 127.0.0.1 2181</code></td></tr></tbody></table><h3 id="开启-4字母命令">开启 <code>4字母命令</code></h3><ul class="lvl-0"><li class="lvl-2"><p>在 ZooKeeper 3.5.0 及之后的版本，4lw 命令默认是禁用的，必须在配置文件(zoo.cfg)中显式开启。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示允许所有 4lw 命令都能用（风险最大）</span></span><br><span class="line">4lw.commands.whitelist=*</span><br><span class="line"><span class="comment"># 这样只允许执行 stat、conf、ruok 这几个命令。</span></span><br><span class="line">4lw.commands.whitelist=<span class="built_in">stat</span>,conf,ruok</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用方法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果没有安装 nc，可以使用 yum 安装</span></span><br><span class="line">yum install nc -y</span><br><span class="line"><span class="comment"># 查看节点状态</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">stat</span> | nc 127.0.0.1 2181</span><br></pre></td></tr></table></figure><h2 id="Zookeeper-Java-Client">Zookeeper Java Client</h2><ul class="lvl-0"><li class="lvl-2"><p>项目示例：<a href="https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/zookeeper-demo/">Github地址</a>，单元测试。</p></li></ul><h3 id="Zookeeper-官方Java客户端">Zookeeper 官方Java客户端</h3><ul class="lvl-0"><li class="lvl-2"><p>ZooKeeper官方的客户端API提供了基本的操作。例如，创建会话、创建节点、读取节点、更新数据、删除节点和检查节点是否存在等。不过，对于实际开发来说，ZooKeeper官方API有一些不足之处，具体如下：</p><ul class="lvl-2"><li class="lvl-4">ZooKeeper的Watcher监测是一次性的，每次触发之后都需要重新进行注册。</li><li class="lvl-4">会话超时之后没有实现重连机制。</li><li class="lvl-4">异常处理烦琐，ZooKeeper提供了很多异常，对于开发人员来说可能根本不知道应该如何处理这些抛出的异常。</li><li class="lvl-4">仅提供了简单的byte[]数组类型的接口，没有提供Java POJO级别的序列化数据处理接口。</li><li class="lvl-4">创建节点时如果抛出异常，需要自行检查节点是否存在。</li><li class="lvl-4">无法实现级联删除。</li><li class="lvl-4">总之，ZooKeeper官方API功能比较简单，在实际开发过程中比较笨重，一般不推荐使用。</li></ul></li><li class="lvl-2"><p>项目引入依赖时，最好保持与服务端版本一致，否则可能会有一些兼容性的问题</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zookeeper client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Zookeeper-第三方Java客户端-Curator">Zookeeper 第三方Java客户端 Curator</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://curator.apache.org/docs/about">Curator</a>是Netflix公司开源的一套ZooKeeper客户端框架，和ZkClient一样它解决了非常底层的细节开发工作，包括连接、重连、反复注册Watcher的问题以及NodeExistsException异常等。</p></li><li class="lvl-2"><p>Curator是Apache基金会的顶级项目之一，Curator具有更加完善的文档，另外还提供了一套易用性和可读性更强的Fluent风格的客户端API框架。</p></li><li class="lvl-2"><p>Curator还为ZooKeeper客户端框架提供了一些比较普遍的、开箱即用的、分布式开发用的解决方案，例如Recipe、共享锁服务、Master选举机制和分布式计算器等，帮助开发者避免了“重复造轮子”的无效开发工作。</p></li><li class="lvl-2"><p>在实际的开发场景中，使用Curator客户端就足以应付日常的ZooKeeper集群操作的需求。</p></li><li class="lvl-2"><p>引入依赖说明：</p></li></ul><table><thead><tr><th>模块</th><th>依赖关系</th><th>功能定位</th><th>典型功能举例</th><th>常用场景</th></tr></thead><tbody><tr><td><strong>curator-client</strong></td><td>依赖 zookeeper</td><td>连接管理、重试策略、底层 API</td><td>连接会话管理、RetryPolicy</td><td>需要最轻量的 ZooKeeper 客户端</td></tr><tr><td><strong>curator-framework</strong></td><td>依赖 curator-client</td><td>高层 API 封装，简化 ZK 操作</td><td>创建节点、Watcher 管理、自动重连</td><td>通用 ZooKeeper 客户端开发</td></tr><tr><td><strong>curator-recipes</strong></td><td>依赖 curator-framework → curator-client</td><td>分布式模式现成实现</td><td>分布式锁、Leader 选举、队列、Barrier</td><td>直接用分布式工具，无需自己实现</td></tr></tbody></table><blockquote><p>使用建议</p></blockquote><ul class="lvl-0"><li class="lvl-4"><p>如果你只想轻量访问 ZooKeeper → <code>curator-client</code> 就够了，但几乎没人单独用。</p></li><li class="lvl-4"><p>如果你想方便操作 ZooKeeper API → <code>curator-framework</code>，大部分情况都适用。</p></li><li class="lvl-4"><p>如果你想用分布式锁、选举、Barrier → <code>curator-recipes</code>（它会自动引入前两个）。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zookeeper client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--curator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 CentOS9 中 Zookeeper 的安装与使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://zookeeper.apache.org&quot;&gt;Zookeeper官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文使用的 Zookeeper 版本为 3.8.4。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="zookeeper" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/zookeeper/"/>
    
    <category term="分布式" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/zookeeper/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="zookeeper" scheme="https://blog.hanqunfeng.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>ShardingSphere-Proxy5.5.2 DistSQL</title>
    <link href="https://blog.hanqunfeng.com/2025/09/11/springboot3-shardingsphere-proxy-distsql/"/>
    <id>https://blog.hanqunfeng.com/2025/09/11/springboot3-shardingsphere-proxy-distsql/</id>
    <published>2025-09-11T13:30:05.000Z</published>
    <updated>2025-09-15T02:14:23.413Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 ShardingSphere-Proxy5.5.2 DistSQL 的使用。</p></li><li class="lvl-2"><p><a href="https://shardingsphere.apache.org/index_zh.html">ShardingSphere官网</a></p></li></ul><span id="more"></span><h2 id="DistSQL">DistSQL</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/">DistSQL</a>（Distributed SQL）是 Apache ShardingSphere 特有的操作语言。 它与标准 SQL 的使用方式完全一致，用于提供增量功能的 SQL 级别操作能力。</p></li><li class="lvl-2"><p>灵活的规则配置和资源管控能力是 Apache ShardingSphere 的特点之一。</p></li><li class="lvl-2"><p>在使用 4.x 及其之前版本时，开发者虽然可以像使用原生数据库一样操作数据，但却需要通过本地文件或注册中心配置资源和规则。然而，操作习惯变更，对于运维工程师并不友好。</p></li><li class="lvl-2"><p>从 5.x 版本开始，DistSQL（Distributed SQL）让用户可以像操作数据库一样操作 Apache ShardingSphere，使其从面向开发人员的框架和中间件转变为面向运维人员的数据库产品。</p></li><li class="lvl-2"><p>DistSQL 细分为 RDL、RQL、RAL 和 RUL 四种类型。</p><ul class="lvl-2"><li class="lvl-4">RDL: Resource &amp; Rule Definition Language，负责资源和规则的创建、修改和删除。</li><li class="lvl-4">RQL: Resource &amp; Rule Query Language，负责资源和规则的查询和展现。</li><li class="lvl-4">RAL: Resource &amp; Rule Administration Language，负责强制路由、熔断、配置导入导出、数据迁移控制等管理功能。</li><li class="lvl-4">RUL: Resource &amp; Rule Utility Language，负责 SQL 解析、SQL 格式化、执行计划预览等功能。</li></ul></li><li class="lvl-2"><p>DistSQL 仅可以在 ShardingSphere-Proxy 中使用，不能在 ShardingSphere-JDBC 中使用。</p></li></ul><h2 id="示例准备">示例准备</h2><ul class="lvl-0"><li class="lvl-2"><p>具体的语法，官网介绍的很详细，这里基于 <a href="/2025/09/04/springboot3-shardingsphere-proxy/" title="SpringBoot3 + ShardingSphere-Proxy5.5.2 分库分表">SpringBoot3 + ShardingSphere-Proxy5.5.2 分库分表</a> 中的配置进行示例说明。</p></li><li class="lvl-2"><p>为了尽可能多的使用 DistSQL 语法，这里仅在 <code>global.yaml</code> 中配置如下内容:</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置为基于 zookeeper 集群模式，为了演示 DistSQL 语法，这里需要将配置持久化，使用 JDBC 的单机模式也可以</span></span><br><span class="line"><span class="attr">mode:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">Cluster</span>                 <span class="comment"># 运行模式，默认是单机模式 Standalone</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ZooKeeper</span>             <span class="comment"># 注册中心类型</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">governance_ds</span>  <span class="comment"># ZooKeeper 上的根路径（逻辑命名空间），ShardingSphere 会把所有元数据（schema 的 data_sources、rules、版本信息、运行时实例节点等）放在该 namespace 下</span></span><br><span class="line">      <span class="attr">server-lists:</span> <span class="string">localhost:2181</span> <span class="comment"># ZooKeeper 集群地址列表，以逗号分隔的 host:port 列表</span></span><br><span class="line">      <span class="attr">retryIntervalMilliseconds:</span> <span class="number">500</span> <span class="comment"># 与注册中心交互失败后的重试间隔（毫秒）。网络不稳定或短暂故障时用于重试回退。</span></span><br><span class="line">      <span class="attr">timeToLiveSeconds:</span> <span class="number">60</span>     <span class="comment"># 表示“临时/短期数据”的生存时间（秒），用于控制某些临时节点/实例信息的存活策略</span></span><br><span class="line">      <span class="attr">maxRetries:</span> <span class="number">3</span>             <span class="comment"># 最大重试次数（超过则认为操作失败）。</span></span><br><span class="line">      <span class="attr">operationTimeoutMilliseconds:</span> <span class="number">500</span>  <span class="comment"># 单次 ZooKeeper 操作（读写）的超时时间（毫秒）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置用户和权限，因为 DistSQL 暂不支持 用户和权限管理，所以这里需要先配置用户和权限</span></span><br><span class="line"><span class="attr">authority:</span></span><br><span class="line">  <span class="attr">users:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">user:</span> <span class="string">root@127.0.0.1</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">admin:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">user:</span> <span class="string">sharding@%</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">sharding</span></span><br><span class="line">  <span class="attr">privilege:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">DATABASE_PERMITTED</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">user-database-mappings:</span> <span class="string">root@127.0.0.1=*,sharding@%=sharding_db</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动 ShardingSphere-Proxy 服务，并登录</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 ShardingSphere-Proxy</span></span><br><span class="line">./shardingsphere-proxy-bin/bin/start.sh</span><br><span class="line"><span class="comment"># 使用管理员登录</span></span><br><span class="line">mysql -h127.0.0.1 -uroot -proot -P3307</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前用户权限</span></span><br><span class="line">mysql&gt; SHOW AUTHORITY RULE;</span><br><span class="line">+----------------------------+--------------------+----------------------------------------------------------------------+</span><br><span class="line">| <span class="built_in">users</span>                      | provider           | props                                                                |</span><br><span class="line">+----------------------------+--------------------+----------------------------------------------------------------------+</span><br><span class="line">| root@127.0.0.1; sharding@% | DATABASE_PERMITTED | &#123;<span class="string">&quot;user-database-mappings&quot;</span>:<span class="string">&quot;root@127.0.0.1=*,sharding@%=sharding_db&quot;</span>&#125; |</span><br><span class="line">+----------------------------+--------------------+----------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.49 sec)</span><br></pre></td></tr></table></figure><h2 id="全局配置，即global-yaml中的配置">全局配置，即<code>global.yaml</code>中的配置</h2><ul class="lvl-0"><li class="lvl-2"><p>全局配置对所有逻辑数据库有效</p></li></ul><h3 id="属性配置">属性配置</h3><ul class="lvl-0"><li class="lvl-2"><p>配置文件中的配置</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span> <span class="comment"># 控制台打印改写后的 SQL，便于排错，默认为 false</span></span><br></pre></td></tr></table></figure><h4 id="DistSQL-语法">DistSQL 语法</h4><ul class="lvl-0"><li class="lvl-2"><p>设置属性，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/ral/set-dist-vairable/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里要注意，属性名需要使用下划线格式</span></span><br><span class="line">SET DIST VARIABLE sql_show = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看属性，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/ral/show-dist-variable/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DIST VARIABLES;</span><br><span class="line">+-----------------------------------------+-----------------+</span><br><span class="line">| variable_name                           | variable_value  |</span><br><span class="line">+-----------------------------------------+-----------------+</span><br><span class="line">| agent_plugins_enabled                   | <span class="literal">true</span>            |</span><br><span class="line">| cached_connections                      | 0               |</span><br><span class="line">| cdc_server_port                         | 33071           |</span><br><span class="line">| check_table_metadata_enabled            | <span class="literal">false</span>           |</span><br><span class="line">| kernel_executor_size                    | 0               |</span><br><span class="line">| load_table_metadata_batch_size          | 1000            |</span><br><span class="line">| max_connections_size_per_query          | 1               |</span><br><span class="line">| proxy_backend_query_fetch_size          | -1              |</span><br><span class="line">| proxy_default_port                      | 3307            |</span><br><span class="line">| proxy_frontend_database_protocol_type   |                 |</span><br><span class="line">| proxy_frontend_executor_size            | 0               |</span><br><span class="line">| proxy_frontend_flush_threshold          | 128             |</span><br><span class="line">| proxy_frontend_max_connections          | 0               |</span><br><span class="line">| proxy_frontend_ssl_cipher               |                 |</span><br><span class="line">| proxy_frontend_ssl_enabled              | <span class="literal">false</span>           |</span><br><span class="line">| proxy_frontend_ssl_version              | TLSv1.2,TLSv1.3 |</span><br><span class="line">| proxy_meta_data_collector_enabled       | <span class="literal">false</span>           |</span><br><span class="line">| proxy_netty_backlog                     | 1024            |</span><br><span class="line">| sql_show                                | <span class="literal">true</span>            |</span><br><span class="line">| sql_simple                              | <span class="literal">false</span>           |</span><br><span class="line">| system_log_level                        | INFO            |</span><br><span class="line">| system_schema_metadata_assembly_enabled | <span class="literal">true</span>            |</span><br><span class="line">+-----------------------------------------+-----------------+</span><br></pre></td></tr></table></figure><h3 id="分布式事务配置">分布式事务配置</h3><ul class="lvl-0"><li class="lvl-2"><p>配置文件中的配置</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">transaction:</span></span><br><span class="line">  <span class="attr">defaultType:</span> <span class="string">XA</span></span><br><span class="line">  <span class="attr">providerType:</span> <span class="string">Atomikos</span></span><br></pre></td></tr></table></figure><h4 id="DistSQL-语法-2">DistSQL 语法</h4><ul class="lvl-0"><li class="lvl-2"><p>查看事务规则，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/ral/global-rule/show-transaction-rule/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TRANSACTION RULE;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改事务规则，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/ral/global-rule/alter-transaction-rule/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TRANSACTION RULE(</span><br><span class="line">  DEFAULT=<span class="string">&quot;XA&quot;</span>, TYPE(NAME=<span class="string">&quot;Atomikos&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="规则配置，即database-xxx-yaml中的配置">规则配置，即<code>database-xxx.yaml</code>中的配置</h2><ul class="lvl-0"><li class="lvl-2"><p>以下 DistSQL 仅可以在逻辑库中执行，所以需要先创建一个逻辑数据库</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE sharding_db;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use sharding_db;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><h3 id="数据源配置">数据源配置</h3><ul class="lvl-0"><li class="lvl-2"><p>在 DistSQL中，官方将数据源叫做<code>存储单元(STORAGE UNIT)</code></p></li><li class="lvl-2"><p>配置文件中的配置</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span> <span class="comment"># 逻辑数据源名称</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb0?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span>  <span class="comment"># 注意这里属性为 url</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ds_1:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb1?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br></pre></td></tr></table></figure><h4 id="DistSQL-语法-3">DistSQL 语法</h4><ul class="lvl-0"><li class="lvl-2"><p>注册存储单元，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/storage-unit-definition/register-storage-unit/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">REGISTER STORAGE UNIT ds_0 (</span><br><span class="line">    URL=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/shardingdb0?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">    USER=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    PASSWORD=<span class="string">&quot;newpwd&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">REGISTER STORAGE UNIT ds_1 (</span><br><span class="line">    URL=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/shardingdb1?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">    USER=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    PASSWORD=<span class="string">&quot;newpwd&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查询存储单元，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rql/storage-unit-query/show-storage-units/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW STORAGE UNITS FROM sharding_db \G;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改存储单元，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/storage-unit-definition/alter-storage-unit/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALTER STORAGE UNIT ds_1 (</span><br><span class="line">    URL=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/shardingdb1?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">    USER=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    PASSWORD=<span class="string">&quot;newpwd&quot;</span>,</span><br><span class="line">    PROPERTIES(<span class="string">&quot;maximumPoolSize&quot;</span>=10,<span class="string">&quot;idleTimeout&quot;</span>=30000)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>取消注册存储单元，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/storage-unit-definition/unregister-storage-unit/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无法移除已经被规则使用的存储单元</span></span><br><span class="line">UNREGISTER STORAGE UNIT ds_0;</span><br></pre></td></tr></table></figure><h3 id="单表配置">单表配置</h3><ul class="lvl-0"><li class="lvl-2"><p>配置文件中的配置</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SINGLE</span> <span class="comment"># 单表规则配置，单表规则优先级高于分库分表规则</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="comment"># MySQL 风格</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ds_0.t_address</span> <span class="comment"># 加载指定单表</span></span><br></pre></td></tr></table></figure><h4 id="DistSQL-语法-4">DistSQL 语法</h4><ul class="lvl-0"><li class="lvl-2"><p>加载单表，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/single-table/load-single-table/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOAD SINGLE TABLE ds_0.t_address;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查询单表，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rql/rule-query/single-table/show-single-table/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW SINGLE TABLES;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>卸载单表，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/single-table/unload-single-table/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNLOAD SINGLE TABLE ds_0.t_address;</span><br></pre></td></tr></table></figure><h3 id="广播表配置">广播表配置</h3><ul class="lvl-0"><li class="lvl-2"><p>广播表，即所有数据源都包含的表，比如字典表</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!BROADCAST</span>  <span class="comment"># 广播表配置，即所有的库中都包含指定的表，写入数据时同时写入多个库，查询时随机读一个</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dict</span>    <span class="comment"># 广播表名称，⼴播表不能配置分表逻辑，只往多个库的同⼀个表中插⼊数据。</span></span><br></pre></td></tr></table></figure><h4 id="DistSQL-语法-5">DistSQL 语法</h4><ul class="lvl-0"><li class="lvl-2"><p>创建广播表，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/broadcast-table/create-broadcast-table-rule/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE BROADCAST TABLE RULE dict;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除广播表，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/broadcast-table/drop-broadcast-table-rule/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP BROADCAST TABLE RULE dict;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查询广播表，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rql/rule-query/broadcast-table/show-broadcast-table-rule/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询当前逻辑库中具有广播规则的表</span></span><br><span class="line">SHOW BROADCAST TABLE RULES;</span><br><span class="line"><span class="comment"># 查询指定数据库中具有广播规则的表</span></span><br><span class="line">SHOW BROADCAST TABLE RULES FROM sharding_db;</span><br></pre></td></tr></table></figure><h3 id="分库分表配置">分库分表配置</h3><h4 id="单分片键，Long-类型">单分片键，Long 类型</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">course:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.course_$&#123;1..2&#125;</span> <span class="comment"># 实际数据节点，建表时写成了 1和2，懒得改了，所以下面分表规则中对2取余后要+1</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">cid</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_inline</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">cid</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法</span></span><br><span class="line">      <span class="attr">course_inline:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span> <span class="comment"># 基于行表达式的分片算法，这里使用 MOD 会报错</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 属性</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">course_$&#123;cid</span> <span class="string">%</span> <span class="number">2</span> <span class="string">+</span> <span class="number">1</span><span class="string">&#125;</span> <span class="comment"># 表达式，这是因为表名称为 course_1, course_2</span></span><br><span class="line">          <span class="attr">allow-range-query-with-inline-sharding:</span> <span class="literal">true</span> <span class="comment"># 允许范围查询</span></span><br><span class="line">      <span class="attr">course_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 表示 ds_0, ds_1</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br></pre></td></tr></table></figure><h5 id="DistSQL-语法-6">DistSQL 语法</h5><ul class="lvl-0"><li class="lvl-2"><p>创建分片规则，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-rule/#1%E6%A0%87%E5%87%86%E5%88%86%E7%89%87%E8%A7%84%E5%88%99">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE SHARDING TABLE RULE course (</span><br><span class="line">  DATANODES(<span class="string">&quot;ds_<span class="variable">$&#123;0..1&#125;</span>.course_<span class="variable">$&#123;1..2&#125;</span>&quot;</span>),</span><br><span class="line">  DATABASE_STRATEGY(TYPE=<span class="string">&quot;standard&quot;</span>,SHARDING_COLUMN=user_id,SHARDING_ALGORITHM(TYPE(NAME=<span class="string">&quot;inline&quot;</span>,PROPERTIES(<span class="string">&quot;algorithm-expression&quot;</span>=<span class="string">&quot;ds_<span class="variable">$&#123;user_id % 2&#125;</span>&quot;</span>)))),</span><br><span class="line">  TABLE_STRATEGY(TYPE=<span class="string">&quot;standard&quot;</span>,SHARDING_COLUMN=cid,SHARDING_ALGORITHM(TYPE(NAME=<span class="string">&quot;inline&quot;</span>,PROPERTIES(<span class="string">&quot;algorithm-expression&quot;</span>=<span class="string">&quot;course_<span class="variable">$&#123;cid % 2 + 1&#125;</span>&quot;</span>,<span class="string">&quot;allow-range-query-with-inline-sharding&quot;</span>=<span class="literal">true</span> )))),</span><br><span class="line">  KEY_GENERATE_STRATEGY(COLUMN=cid,TYPE(NAME=<span class="string">&quot;snowflake&quot;</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="单分片键，String-类型">单分片键，String 类型</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">t_user:</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_user_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span>  <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">id</span> <span class="comment"># 自增列名称，字符串类型</span></span><br><span class="line"><span class="comment">#           keyGeneratorName: uuid # 分布式序列算法名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">custom_snowflake_string</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法</span></span><br><span class="line">      <span class="attr">t_user_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;Math.abs(id.hashCode()%2)&#125;</span> <span class="comment"># 分库，ds_0, ds_1，id 为字符串，所以要转换为数字再进行运算</span></span><br><span class="line">      <span class="attr">t_user_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_user_$&#123;Math.abs(id.hashCode()%4).intdiv(2)&#125;</span> <span class="comment"># 分表，t_user_0, t_user_1</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式序列算法</span></span><br><span class="line">      <span class="attr">uuid:</span>    <span class="comment"># 定义名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">UUID</span> <span class="comment"># 字符串主键，String</span></span><br><span class="line">      <span class="attr">custom_snowflake_string:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">CUSTOM_SNOWFLAKE_STRING</span> <span class="comment"># 自定义雪花算法，String，spi</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">workerId:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">datacenterId:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="DistSQL-语法-7">DistSQL 语法</h5><ul class="lvl-0"><li class="lvl-2"><p>创建分片规则</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE SHARDING TABLE RULE t_user (</span><br><span class="line">  DATANODES(<span class="string">&quot;ds_<span class="variable">$&#123;0..1&#125;</span>.t_user_<span class="variable">$&#123;0..1&#125;</span>&quot;</span>),</span><br><span class="line">  DATABASE_STRATEGY(TYPE=<span class="string">&quot;standard&quot;</span>,SHARDING_COLUMN=<span class="built_in">id</span>,SHARDING_ALGORITHM(TYPE(NAME=<span class="string">&quot;inline&quot;</span>,PROPERTIES(<span class="string">&quot;algorithm-expression&quot;</span>=<span class="string">&quot;ds_<span class="variable">$&#123;Math.abs(id.hashCode()%2)&#125;</span>&quot;</span>)))),</span><br><span class="line">  TABLE_STRATEGY(TYPE=<span class="string">&quot;standard&quot;</span>,SHARDING_COLUMN=<span class="built_in">id</span>,SHARDING_ALGORITHM(TYPE(NAME=<span class="string">&quot;inline&quot;</span>,PROPERTIES(<span class="string">&quot;algorithm-expression&quot;</span>=<span class="string">&quot;t_user_<span class="variable">$&#123;Math.abs(id.hashCode()%4).intdiv(2)&#125;</span>&quot;</span>)))),</span><br><span class="line">  KEY_GENERATE_STRATEGY(COLUMN=<span class="built_in">id</span>,TYPE(NAME=<span class="string">&quot;CUSTOM_SNOWFLAKE_STRING&quot;</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="多分片键，Long-类型">多分片键，Long 类型</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">t_order_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order-complex-algorithm</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_item_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span>  <span class="comment"># 分片列名称,多个逗号分隔</span></span><br><span class="line"><span class="comment">#             shardingAlgorithmName: t_order_item-class-based-algorithm   # 基于自定义类的分片算法</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_item-class-based-algorithm_spi</span> <span class="comment"># 基于 SPI 的分片算法，效果同上，建议生产环境使用 SPI</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法</span></span><br><span class="line">      <span class="attr">t_order_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order-complex-algorithm:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">COMPLEX_INLINE</span> <span class="comment"># 基于行表达式的复合分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_order_complex_$&#123;(user_id</span> <span class="string">+</span> <span class="string">order_id</span> <span class="string">+</span> <span class="number">1</span><span class="string">)</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order_item-class-based-algorithm_spi:</span> <span class="comment"># SPI</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">T_ORDER_ITEM_COMPLEX</span> <span class="comment"># 基于自定义类的分片算法</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br></pre></td></tr></table></figure><h5 id="DistSQL-语法-8">DistSQL 语法</h5><ul class="lvl-0"><li class="lvl-2"><p>创建分片规则</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE SHARDING TABLE RULE t_order_complex (</span><br><span class="line">  DATANODES(<span class="string">&quot;ds_<span class="variable">$&#123;0..1&#125;</span>.t_order_complex_<span class="variable">$&#123;0..1&#125;</span>&quot;</span>),</span><br><span class="line">  DATABASE_STRATEGY(TYPE=<span class="string">&quot;standard&quot;</span>,SHARDING_COLUMN=user_id,SHARDING_ALGORITHM(TYPE(NAME=<span class="string">&quot;inline&quot;</span>,PROPERTIES(<span class="string">&quot;algorithm-expression&quot;</span>=<span class="string">&quot;ds_<span class="variable">$&#123;user_id % 2&#125;</span>&quot;</span>)))),</span><br><span class="line">  TABLE_STRATEGY(TYPE=<span class="string">&quot;complex&quot;</span>,SHARDING_COLUMNS=user_id,order_id,SHARDING_ALGORITHM(TYPE(NAME=<span class="string">&quot;complex_inline&quot;</span>,PROPERTIES(<span class="string">&quot;algorithm-expression&quot;</span>=<span class="string">&quot;t_order_complex_<span class="variable">$&#123;(user_id + order_id + 1) % 2&#125;</span>&quot;</span>)))),</span><br><span class="line">  KEY_GENERATE_STRATEGY(COLUMN=order_id,TYPE(NAME=<span class="string">&quot;snowflake&quot;</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE SHARDING TABLE RULE t_order_item_complex (</span><br><span class="line">  DATANODES(<span class="string">&quot;ds_<span class="variable">$&#123;0..1&#125;</span>.t_order_item_complex_<span class="variable">$&#123;0..1&#125;</span>&quot;</span>),</span><br><span class="line">  DATABASE_STRATEGY(TYPE=<span class="string">&quot;standard&quot;</span>,SHARDING_COLUMN=user_id,SHARDING_ALGORITHM(TYPE(NAME=<span class="string">&quot;inline&quot;</span>,PROPERTIES(<span class="string">&quot;algorithm-expression&quot;</span>=<span class="string">&quot;ds_<span class="variable">$&#123;user_id % 2&#125;</span>&quot;</span>)))),</span><br><span class="line">  TABLE_STRATEGY(TYPE=<span class="string">&quot;complex&quot;</span>,SHARDING_COLUMNS=user_id,order_id,SHARDING_ALGORITHM(TYPE(NAME=<span class="string">&quot;T_ORDER_ITEM_COMPLEX&quot;</span>))),</span><br><span class="line">  KEY_GENERATE_STRATEGY(COLUMN=item_id,TYPE(NAME=<span class="string">&quot;SNOWFLAKE&quot;</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="自动分片规则">自动分片规则</h4><ul class="lvl-0"><li class="lvl-2"><p>上面介绍的都是手工配置分片规则，用于配置较为复杂的分片规则，如果分片规则比价简单，可以使用自动分片规则</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">   <span class="comment"># 绑定表：同分片键 join 时走同路由，多个逗号分隔，要求分片规则一致</span></span><br><span class="line">    <span class="attr">bindingTables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t_order,t_order_item</span></span><br><span class="line">    <span class="attr">autoTables:</span> <span class="comment"># 自动分片规则配置</span></span><br><span class="line">      <span class="attr">t_order:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法</span></span><br><span class="line">      <span class="attr">mod_2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MOD</span> <span class="comment"># 基于 MOD 的分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">sharding-count:</span> <span class="number">2</span> <span class="comment"># 分片数量，即 对 2 进行取余</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br></pre></td></tr></table></figure><h5 id="DistSQL-语法-9">DistSQL 语法</h5><ul class="lvl-0"><li class="lvl-2"><p>创建分片规则</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE SHARDING TABLE RULE t_order (</span><br><span class="line">  STORAGE_UNITS(ds_0,ds_1),</span><br><span class="line">  SHARDING_COLUMN=user_id,TYPE(NAME=<span class="string">&quot;mod&quot;</span>,PROPERTIES(<span class="string">&quot;sharding-count&quot;</span>=<span class="string">&quot;2&quot;</span>)),</span><br><span class="line">  KEY_GENERATE_STRATEGY(COLUMN=order_id,TYPE(NAME=<span class="string">&quot;snowflake&quot;</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE SHARDING TABLE RULE t_order_item (</span><br><span class="line">  STORAGE_UNITS(ds_0,ds_1),</span><br><span class="line">  SHARDING_COLUMN=user_id,TYPE(NAME=<span class="string">&quot;mod&quot;</span>,PROPERTIES(<span class="string">&quot;sharding-count&quot;</span>=<span class="string">&quot;2&quot;</span>)),</span><br><span class="line">  KEY_GENERATE_STRATEGY(COLUMN=item_id,TYPE(NAME=<span class="string">&quot;snowflake&quot;</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="其它分片操作语句">其它分片操作语句</h4><ul class="lvl-0"><li class="lvl-2"><p>查询分片规则，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rql/rule-query/sharding/show-sharding-table-rule/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前逻辑库下的所有分片规则</span></span><br><span class="line">SHOW SHARDING TABLE RULES \G;</span><br><span class="line"><span class="comment"># 查看指定逻辑库下的分片规则</span></span><br><span class="line">SHOW SHARDING TABLE RULES FROM sharding_db; \G;</span><br><span class="line"><span class="comment"># 查看指定分片规则</span></span><br><span class="line">SHOW SHARDING TABLE RULE t_user \G;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改分片规则，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding/alter-sharding-table-rule/">官网文档</a>，与创建分片规则类似，将<code>CREATE</code>改为<code>ALTER</code>即可</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALTER SHARDING TABLE RULE t_order_item_complex (</span><br><span class="line">  DATANODES(<span class="string">&quot;ds_<span class="variable">$&#123;0..1&#125;</span>.t_order_item_complex_<span class="variable">$&#123;0..1&#125;</span>&quot;</span>),</span><br><span class="line">  DATABASE_STRATEGY(TYPE=<span class="string">&quot;standard&quot;</span>,SHARDING_COLUMN=user_id,SHARDING_ALGORITHM(TYPE(NAME=<span class="string">&quot;inline&quot;</span>,PROPERTIES(<span class="string">&quot;algorithm-expression&quot;</span>=<span class="string">&quot;ds_<span class="variable">$&#123;user_id % 2&#125;</span>&quot;</span>)))),</span><br><span class="line">  TABLE_STRATEGY(TYPE=<span class="string">&quot;complex&quot;</span>,SHARDING_COLUMNS=user_id,order_id,SHARDING_ALGORITHM(TYPE(NAME=<span class="string">&quot;T_ORDER_ITEM_COMPLEX&quot;</span>))),</span><br><span class="line">  KEY_GENERATE_STRATEGY(COLUMN=item_id,TYPE(NAME=<span class="string">&quot;SNOWFLAKE&quot;</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除分片规则，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/sharding/drop-sharding-table-rule/">官网文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP SHARDING TABLE RULE t_order;</span><br><span class="line"><span class="comment"># 删除多个表</span></span><br><span class="line">DROP SHARDING TABLE RULE t_order,t_order_item;</span><br></pre></td></tr></table></figure><h3 id="数据加密规则">数据加密规则</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!ENCRYPT</span>    <span class="comment"># 数据加密配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span>  <span class="comment"># 加密表名称</span></span><br><span class="line">        <span class="attr">columns:</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 加密列名称</span></span><br><span class="line">            <span class="attr">cipher:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">password</span> <span class="comment"># 密文列名称</span></span><br><span class="line">              <span class="attr">encryptorName:</span> <span class="string">aes_encryptor</span> <span class="comment"># 密文列加密算法名称</span></span><br><span class="line">    <span class="comment"># 加密算法配置: https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/encrypt/</span></span><br><span class="line">    <span class="attr">encryptors:</span></span><br><span class="line">      <span class="attr">aes_encryptor:</span> <span class="comment"># 加解密算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">AES</span> <span class="comment"># 加解密算法类型</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 加解密算法属性配置</span></span><br><span class="line">          <span class="attr">aes-key-value:</span> <span class="string">123456abc</span>     <span class="comment"># AES 使用的 KEY</span></span><br><span class="line">          <span class="attr">digest-algorithm-name:</span> <span class="string">SHA-1</span> <span class="comment"># AES KEY 的摘要算法</span></span><br></pre></td></tr></table></figure><h5 id="DistSQL-语法-10">DistSQL 语法</h5><ul class="lvl-0"><li class="lvl-2"><p>创建加密规则，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/encrypt/create-encrypt-rule/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE ENCRYPT RULE t_user (</span><br><span class="line">COLUMNS(</span><br><span class="line">  (NAME=password,CIPHER=password,ENCRYPT_ALGORITHM(TYPE(NAME=<span class="string">&#x27;AES&#x27;</span>,PROPERTIES(<span class="string">&#x27;aes-key-value&#x27;</span>=<span class="string">&#x27;123456abc&#x27;</span>, <span class="string">&#x27;digest-algorithm-name&#x27;</span>=<span class="string">&#x27;SHA-1&#x27;</span>))))</span><br><span class="line">));</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改加密规则</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER ENCRYPT RULE t_user (</span><br><span class="line">COLUMNS(</span><br><span class="line">  (NAME=password,CIPHER=password,ENCRYPT_ALGORITHM(TYPE(NAME=<span class="string">&#x27;AES&#x27;</span>,PROPERTIES(<span class="string">&#x27;aes-key-value&#x27;</span>=<span class="string">&#x27;123456abc&#x27;</span>, <span class="string">&#x27;digest-algorithm-name&#x27;</span>=<span class="string">&#x27;SHA-1&#x27;</span>))))</span><br><span class="line">));</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除加密规则</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP ENCRYPT RULE t_user;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查询加密规则，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rql/rule-query/encrypt/show-encrypt-rule/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询当前逻辑库中所有加密规则</span></span><br><span class="line">SHOW ENCRYPT RULES \G;</span><br><span class="line"><span class="comment"># 获取指定逻辑库中的加密规则</span></span><br><span class="line">SHOW ENCRYPT RULES FROM sharding_db \G;</span><br><span class="line"><span class="comment"># 获取指定逻辑表中的加密规则</span></span><br><span class="line">SHOW ENCRYPT RULE t_user \G;</span><br></pre></td></tr></table></figure><h3 id="数据脱敏规则">数据脱敏规则</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!MASK</span>  <span class="comment"># 数据脱敏配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span>  <span class="comment"># 脱敏表名称</span></span><br><span class="line">        <span class="attr">columns:</span>  <span class="comment"># 脱敏列配置</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 脱敏列名称</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">md5_mask</span> <span class="comment"># 脱敏算法名称</span></span><br><span class="line">          <span class="attr">email:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">mask_before_special_chars_mask</span></span><br><span class="line">          <span class="attr">telephone:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">keep_first_n_last_m_mask</span></span><br><span class="line">          <span class="attr">name:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">my_mask</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">maskAlgorithms:</span> <span class="comment"># 脱敏算法配置</span></span><br><span class="line">      <span class="attr">md5_mask:</span> <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span>  <span class="comment"># 脱敏算法类型，md5加密后展示</span></span><br><span class="line">      <span class="attr">mask_before_special_chars_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MASK_BEFORE_SPECIAL_CHARS</span> <span class="comment"># 在特殊字符（比如邮箱里的 @）前面做脱敏，示例：myemail@example.com → *******@example.com</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">special-chars:</span> <span class="string">&#x27;@&#x27;</span>  <span class="comment"># 遇到 @ 之前的部分做脱敏</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span>   <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">keep_first_n_last_m_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">KEEP_FIRST_N_LAST_M</span> <span class="comment"># 保留前 n 位和后 m 位，其余用替换字符填充，示例：13812345678 → 138****5678</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">first-n:</span> <span class="number">3</span>     <span class="comment"># 保留前 3 位</span></span><br><span class="line">          <span class="attr">last-m:</span> <span class="number">4</span>      <span class="comment"># 保留后 4 位</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">my_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MY_CUSTOM_MASK</span>  <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&quot;#&quot;</span></span><br></pre></td></tr></table></figure><h5 id="DistSQL-语法-11">DistSQL 语法</h5><ul class="lvl-0"><li class="lvl-2"><p>创建脱敏规则，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rdl/rule-definition/mask/create-mask-rule/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE MASK RULE t_user (</span><br><span class="line">  COLUMNS(</span><br><span class="line">    (NAME=password, TYPE(NAME=<span class="string">&#x27;MD5&#x27;</span>)),</span><br><span class="line">    (NAME=email, TYPE(NAME=<span class="string">&#x27;MASK_BEFORE_SPECIAL_CHARS&#x27;</span>, PROPERTIES(<span class="string">&quot;special-chars&quot;</span>=<span class="string">&quot;@&quot;</span>,  <span class="string">&quot;replace-char&quot;</span>=<span class="string">&quot;*&quot;</span>))),</span><br><span class="line">    (NAME=telephone, TYPE(NAME=<span class="string">&#x27;KEEP_FIRST_N_LAST_M&#x27;</span>, PROPERTIES(<span class="string">&quot;first-n&quot;</span>=3, <span class="string">&quot;last-m&quot;</span>=4, <span class="string">&quot;replace-char&quot;</span>=<span class="string">&quot;*&quot;</span>))),</span><br><span class="line">    (NAME=`name`, TYPE(NAME=<span class="string">&#x27;MY_CUSTOM_MASK&#x27;</span>, PROPERTIES(<span class="string">&quot;replace-char&quot;</span>=<span class="string">&quot;#&quot;</span>)))</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 这里注意 name 是关键字，所以需要用 `` 包起来</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改脱敏规则</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ALTER MASK RULE t_user (</span><br><span class="line">  COLUMNS(</span><br><span class="line">    (NAME=password, TYPE(NAME=<span class="string">&#x27;MD5&#x27;</span>)),</span><br><span class="line">    (NAME=email, TYPE(NAME=<span class="string">&#x27;MASK_BEFORE_SPECIAL_CHARS&#x27;</span>, PROPERTIES(<span class="string">&quot;special-chars&quot;</span>=<span class="string">&quot;@&quot;</span>,  <span class="string">&quot;replace-char&quot;</span>=<span class="string">&quot;*&quot;</span>))),</span><br><span class="line">    (NAME=telephone, TYPE(NAME=<span class="string">&#x27;KEEP_FIRST_N_LAST_M&#x27;</span>, PROPERTIES(<span class="string">&quot;first-n&quot;</span>=3, <span class="string">&quot;last-m&quot;</span>=4, <span class="string">&quot;replace-char&quot;</span>=<span class="string">&quot;*&quot;</span>))),</span><br><span class="line">    (NAME=`name`, TYPE(NAME=<span class="string">&#x27;MY_CUSTOM_MASK&#x27;</span>, PROPERTIES(<span class="string">&quot;replace-char&quot;</span>=<span class="string">&quot;#&quot;</span>)))</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除脱敏规则</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP MASK RULE t_user;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查询脱敏规则，<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/syntax/rql/rule-query/mask/show-mask-rule/">官方文档</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询当前逻辑库中所有脱敏规则</span></span><br><span class="line">SHOW MASK RULES;</span><br><span class="line"><span class="comment"># 仅查询指定逻辑库中的脱敏规则</span></span><br><span class="line">SHOW MASK RULES FROM sharding_db;</span><br><span class="line"><span class="comment"># 查询指定规则</span></span><br><span class="line">mysql&gt; SHOW MASK RULE t_user;</span><br><span class="line">+--------+-----------+---------------------------+-------------------------------------------------+</span><br><span class="line">| table  | column    | algorithm_type            | algorithm_props                                 |</span><br><span class="line">+--------+-----------+---------------------------+-------------------------------------------------+</span><br><span class="line">| t_user | password  | MD5                       |                                                 |</span><br><span class="line">| t_user | email     | MASK_BEFORE_SPECIAL_CHARS | &#123;<span class="string">&quot;replace-char&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;special-chars&quot;</span>:<span class="string">&quot;@&quot;</span>&#125;        |</span><br><span class="line">| t_user | telephone | KEEP_FIRST_N_LAST_M       | &#123;<span class="string">&quot;first-n&quot;</span>:<span class="string">&quot;3&quot;</span>,<span class="string">&quot;last-m&quot;</span>:<span class="string">&quot;4&quot;</span>,<span class="string">&quot;replace-char&quot;</span>:<span class="string">&quot;*&quot;</span>&#125; |</span><br><span class="line">| t_user | name      | MY_CUSTOM_MASK            | &#123;<span class="string">&quot;replace-char&quot;</span>:<span class="string">&quot;#&quot;</span>&#125;                            |</span><br><span class="line">+--------+-----------+---------------------------+-------------------------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 ShardingSphere-Proxy5.5.2 DistSQL 的使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://shardingsphere.apache.org/index_zh.html&quot;&gt;ShardingSphere官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/"/>
    
    <category term="sharding-sphere" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/sharding-sphere/"/>
    
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/tags/springboot/"/>
    
    <category term="sharding-sphere" scheme="https://blog.hanqunfeng.com/tags/sharding-sphere/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot3 + ShardingSphere-Proxy5.5.2 运行模式</title>
    <link href="https://blog.hanqunfeng.com/2025/09/10/springboot3-shardingsphere-proxy-mode/"/>
    <id>https://blog.hanqunfeng.com/2025/09/10/springboot3-shardingsphere-proxy-mode/</id>
    <published>2025-09-10T13:30:05.000Z</published>
    <updated>2025-09-15T06:26:28.238Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 SpringBoot3.5.5 + ShardingSphere-Proxy5.5.2 运行模式的配置与使用。</p></li><li class="lvl-2"><p><a href="https://shardingsphere.apache.org/index_zh.html">ShardingSphere官网</a></p></li><li class="lvl-2"><p>本文在 <a href="/2025/09/04/springboot3-shardingsphere-proxy/" title="SpringBoot3 + ShardingSphere-Proxy5.5.2 分库分表">SpringBoot3 + ShardingSphere-Proxy5.5.2 分库分表</a> 的基础上进行修改。</p></li></ul><span id="more"></span><h2 id="运行模式说明">运行模式说明</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://shardingsphere.apache.org/document/5.5.2/cn/dev-manual/mode/">运行模式</a></p></li><li class="lvl-2"><p>ShardingSphere-Proxy 运行模式分为两种：单机模式(Standalone) 和 集群模式(Cluster)。</p></li><li class="lvl-2"><p>运行模式就是指定将<code>元数据</code>(认证、数据源、分片规则等等)持久化的存储方式。</p></li><li class="lvl-2"><p>默认运行模式为单机模式，使用<code>H2</code>的内存方式。</p></li></ul><h2 id="单机模式-Standalone">单机模式(Standalone)</h2><ul class="lvl-0"><li class="lvl-2"><p>单机模式能够将数据源和规则等元数据信息持久化，但无法将元数据同步至多个 Apache ShardingSphere 实例，无法在集群环境中相互感知。 通过某一实例更新元数据之后，会导致其他实例由于获取不到最新的元数据而产生不一致的错误。</p></li><li class="lvl-2"><p>适用于工程师在本地搭建 Apache ShardingSphere 环境。</p></li><li class="lvl-2"><p>单机模式目前仅支持一种：JDBC，即数据库持久化。以下为默认值(<code>JDBCRepositoryPropertyKey</code>)。</p></li></ul><table><thead><tr><th>名称</th><th>数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>provider</td><td>String</td><td>元数据存储类型，可选值为 <code>H2</code>、<code>MySQL</code> 、<code>EmbeddedDerby</code>、<code>DerbyNetworkServer</code>、<code>HSQLDB</code></td><td>H2</td></tr><tr><td>jdbc_url</td><td>String</td><td>JDBC URL</td><td><code>jdbc:h2:mem:config;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false;MODE=MYSQL</code></td></tr><tr><td>username</td><td>String</td><td>账号</td><td>sa</td></tr><tr><td>password</td><td>String</td><td>密码</td><td>空（无默认值）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>这里以 Mysql 存储元数据为例，相关属性参考<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/common-config/builtin-algorithm/metadata-repository/#jdbc-%E6%8C%81%E4%B9%85%E5%8C%96">官网说明</a></p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mode:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">Standalone</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">JDBC</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">provider:</span> <span class="string">MySQL</span></span><br><span class="line">      <span class="attr">jdbc_url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingsphere?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">newpwd</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>此时需要将 mysql 的驱动 jar 包 添加到 <code>ext-lib</code> 目录下</p></li><li class="lvl-2"><p>启动 ShardingSphere Proxy 成功后会自动在上面的数据库中创建一张表，并将配置文件的中的元数据存储进去</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `repository` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">36</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `key` text <span class="keyword">COLLATE</span> utf8mb4_bin,</span><br><span class="line">  `<span class="keyword">value</span>` text <span class="keyword">COLLATE</span> utf8mb4_bin,</span><br><span class="line">  `parent` text <span class="keyword">COLLATE</span> utf8mb4_bin,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_bin;</span><br></pre></td></tr></table></figure><h3 id="重点说明">重点说明</h3><ul class="lvl-0"><li class="lvl-2"><p>当数据库中不存在该表时，会自动创建该表，并将配置文件的元数据插入该表中。</p></li><li class="lvl-2"><p>当数据库中已存在该表时，会读取该表中的数据并将其加载到内存，而不会读取配置文件中的元数据。即此时配置文件中的元数据不会生效。</p></li><li class="lvl-2"><p>若此时想修改配置规则，有三种方法：</p><ul class="lvl-2"><li class="lvl-4">1.删除该表，修改配置文件后重新启动Proxy，此时会重新创建该表并加载配置文件中的元数据。</li><li class="lvl-4">2.手工修改数据表中的元数据，但修改后需要重新启动Proxy才会加载新的元数据。但手工修改需要对数据的组织形式非常清楚，否则极易出错。</li><li class="lvl-4">3.<code>[推荐]</code>登录逻辑数据库后，使用 <a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/">DistSQL</a> 动态修改配置，修改后的配置会被保存在该表中，并立即生效，无需重启Proxy。</li></ul></li><li class="lvl-2"><p>开发和测试环境可以直接使用默认的 H2 内存数据库，生产环境可以使用 MySQL等数据库对元数据进行持久化保存或者使用下面的集群模式。</p></li></ul><h2 id="集群模式-Cluster">集群模式(Cluster)</h2><ul class="lvl-0"><li class="lvl-2"><p>集群模式提供了多个 Apache ShardingSphere 实例之间的元数据共享和分布式场景下状态协调的能力。 它能够提供计算能力水平扩展和高可用等分布式系统必备的能力，集群环境需要通过独立部署的注册中心来存储元数据和协调节点状态。</p></li><li class="lvl-2"><p>在生产环境建议使用集群模式。</p></li><li class="lvl-2"><p>这里以 zookeeper 集群模式为例，相关属性参考<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/common-config/builtin-algorithm/metadata-repository/#zookeeper-%E6%8C%81%E4%B9%85%E5%8C%96">官网说明</a></p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mode:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">Cluster</span>                 <span class="comment"># 运行模式，默认是单机模式 Standalone</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ZooKeeper</span>             <span class="comment"># 注册中心类型，当前版本仅支持 ZooKeeper 和 etcd</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">governance_ds</span>  <span class="comment"># ZooKeeper 上的根路径（逻辑命名空间），ShardingSphere 会把所有元数据（schema 的 data_sources、rules、版本信息、运行时实例节点等）放在该 namespace 下</span></span><br><span class="line">      <span class="attr">server-lists:</span> <span class="string">localhost:2181</span> <span class="comment"># ZooKeeper 集群地址列表，以逗号分隔的 host:port 列表</span></span><br><span class="line">      <span class="attr">retryIntervalMilliseconds:</span> <span class="number">500</span> <span class="comment"># 与注册中心交互失败后的重试间隔（毫秒）。网络不稳定或短暂故障时用于重试回退。</span></span><br><span class="line">      <span class="attr">timeToLiveSeconds:</span> <span class="number">60</span>     <span class="comment"># 表示“临时/短期数据”的生存时间（秒），用于控制某些临时节点/实例信息的存活策略</span></span><br><span class="line">      <span class="attr">maxRetries:</span> <span class="number">3</span>             <span class="comment"># 最大重试次数（超过则认为操作失败）。</span></span><br><span class="line">      <span class="attr">operationTimeoutMilliseconds:</span> <span class="number">500</span>  <span class="comment"># 单次 ZooKeeper 操作（读写）的超时时间（毫秒）。</span></span><br></pre></td></tr></table></figure><h3 id="重点说明-2">重点说明</h3><ul class="lvl-0"><li class="lvl-2"><p>不要手工修改 Zookeeper 集群中的 namespace 下的配置信息!</p></li><li class="lvl-2"><p>既然是集群，就需要多个 ShardingSphere-Proxy 实例。 当第一个 ShardingSphere-Proxy 实例 启动后，其它相同配置的 ShardingSphere-Proxy 实例仅需要一个 <code>global.yaml</code> 全局配置文件即可，并仅需在其中配置上面的<code>运行模式</code>信息，而不需要再配置其它配置，比如认证、数据源、分片规则等信息，这些信息会通过 Zookeeper 集群中的 namespace 获取并保存到本地内存中。</p></li><li class="lvl-2"><p>每个 ShardingSphere-Proxy 实例启动时，都会自动将自己注册到 Zookeeper 集群中指定的 namespace 下，并自动获取该 namespace 下的配置信息。</p></li><li class="lvl-2"><p>当 Zookeeper 集群中不存在指定的 namespace 时，此时第一次启动 ShardingSphere-Proxy 会自动在 Zookeeper 中创建 namespace，并写入配置文件中的配置信息到 Zookeeper 中。</p></li><li class="lvl-2"><p>当 Zookeeper 集群中已存在指定的 namespace 时，此时再启动 ShardingSphere-Proxy 会自动从 Zookeeper 中读取 namespace 下的配置信息，并将其加载到内存中，不会再读取本地配置文件中的配置信息。</p></li><li class="lvl-2"><p>当 Zookeeper 集群中已存在指定的 namespace 时，根据上面的规则，此时修改本地的配置文件中的分片规则后重启ShardingSphere-Proxy 并不会生效。</p><ul class="lvl-2"><li class="lvl-4">此时有三种方法：<ul class="lvl-4"><li class="lvl-6"><ol><li class="lvl-9">删除 Zookeeper 集群中指定的 namespace，然后重启 ShardingSphere-Proxy。这种方法有个弊端，即会导致连接到相同 ZooKeeper 集群的 namespace 的其它 ShardingSphere-Proxy 实例数据丢失(完全不可用)，也需要重启才能重新获取到数据。</li></ol></li><li class="lvl-6"><ol start="2"><li class="lvl-9">手工修改 Zookeeper 集群中指定的 namespace 下的分片规则，修改后会立即同步到所有 ShardingSphere-Proxy 实例。但手工修改需要对数据的组织形式非常清楚，否则极易出错。</li></ol></li><li class="lvl-6"><ol start="3"><li class="lvl-9"><code>[推荐]</code>登录逻辑数据库后，使用 <a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-proxy/distsql/">DistSQL</a> 动态修改配置，此时会自动同步到所有 ShardingSphere-Proxy 实例。所以，灵活掌握 <code>DistSQL</code> 是维护 ShardingSphere-Proxy 集群的关键。</li></ol></li></ul></li></ul></li><li class="lvl-2"><p>多个 ShardingSphere-Proxy 实例 可以通过负载均衡器，比如 Nginx，将请求路由到不同的 ShardingSphere-Proxy 实例。比如：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">stream&#123;</span><br><span class="line">    upstream shardingsphere_proxy&#123;</span><br><span class="line">        server  10.10.21.35:3307;</span><br><span class="line">        server  10.10.21.36:3307;</span><br><span class="line">    &#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        listen 3310;</span><br><span class="line">        proxy_connect_timeout 20s;</span><br><span class="line">        proxy_timeout 5m;</span><br><span class="line">        proxy_pass shardingsphere_proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="与-Spring-Boot3-整合">与 Spring Boot3 整合</h2><ul class="lvl-0"><li class="lvl-2"><p>无论是 <code>单机模式</code> 还是 <code>集群模式</code>，其目的都是将 <code>配置</code> 保存到独立的 <code>配置中心(数据库 或 Zookeeper)</code>中，并让其它 <code>ShardingSphere-Proxy</code> 实例从该配置中心中读取配置信息。</p></li><li class="lvl-2"><p>前文我们介绍过 <code>Spring Boot3</code> + <code>ShardingSphere-Proxy</code> 就相当于是集成普通的MySql数据库，而 <code>Spring Boot3</code> + <code>ShardingSphere-JDBC</code> 就需要单独在本地配置各种规则。</p></li><li class="lvl-2"><p>实际上 <code>ShardingSphere-JDBC</code> 也可以从 <code>配置中心</code> 中读取配置信息，这样我们就不需要在本地配置任何规则了，我们仅需要在 <code>sharding.yaml</code> 中配置好<code>运行模式</code>，并配置好 <code>databaseName</code> 的名称即可。注意，此时配置中心的的事务不能是 <code>XA</code>，因为<code>Spring Boot3</code> + <code>ShardingSphere-JDBC</code>目前不支持 <code>XA</code> 事务。</p></li><li class="lvl-2"><p>此时，springboot项目启动后会拉取<code>配置中心</code>中的配置信息并将其保存到本地内存，本地配置文件中的其它配置信息会被忽略。<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/G3kESF.png" alt=""></p></li></ul><h3 id="单机模式">单机模式</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo/shardingsphere-demo-03">代码示例</a></p></li><li class="lvl-2"><p>通过 DistSQL 改规则后，必须重启应用才能生效</p></li><li class="lvl-2"><p>sharding.yaml</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mode:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">Standalone</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">JDBC</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">provider:</span> <span class="string">MySQL</span></span><br><span class="line">      <span class="attr">jdbc_url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingsphere?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line"><span class="comment"># 数据库名称，默认值：logic_db</span></span><br><span class="line"><span class="attr">databaseName:</span> <span class="string">sharding_db</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Maven 依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL Connector/J --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis plus，本项目用到，非必须 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ShardingSphere JDBC 主依赖（5.5.2 建议） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自定义 的 SPI --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hanqf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>algorithm-swapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="集群模式">集群模式</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo/shardingsphere-demo-04">代码示例</a></p></li><li class="lvl-2"><p>通过 DistSQL 改规则后，立即推送到所有实例，无需重启应用。</p></li><li class="lvl-2"><p>sharding.yaml，注意这里一定要配置 <code>databaseName</code></p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # 开启集群模式</span></span><br><span class="line"><span class="attr">mode:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">Cluster</span>                 <span class="comment"># 运行模式，默认是单机模式 Standalone</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ZooKeeper</span>             <span class="comment"># 注册中心类型</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">governance_ds</span>  <span class="comment"># ZooKeeper 上的根路径（逻辑命名空间），ShardingSphere 会把所有元数据（schema 的 data_sources、rules、版本信息、运行时实例节点等）放在该 namespace 下</span></span><br><span class="line">      <span class="attr">server-lists:</span> <span class="string">localhost:2181</span> <span class="comment"># ZooKeeper 集群地址列表，以逗号分隔的 host:port 列表</span></span><br><span class="line">      <span class="attr">retryIntervalMilliseconds:</span> <span class="number">500</span> <span class="comment"># 与注册中心交互失败后的重试间隔（毫秒）。网络不稳定或短暂故障时用于重试回退。</span></span><br><span class="line">      <span class="attr">timeToLiveSeconds:</span> <span class="number">60</span>     <span class="comment"># 表示“临时/短期数据”的生存时间（秒），用于控制某些临时节点/实例信息的存活策略</span></span><br><span class="line">      <span class="attr">maxRetries:</span> <span class="number">3</span>             <span class="comment"># 最大重试次数（超过则认为操作失败）。</span></span><br><span class="line">      <span class="attr">operationTimeoutMilliseconds:</span> <span class="number">500</span>  <span class="comment"># 单次 ZooKeeper 操作（读写）的超时时间（毫秒）。</span></span><br><span class="line"><span class="comment"># 数据库名称，默认值：logic_db</span></span><br><span class="line"><span class="attr">databaseName:</span> <span class="string">sharding_db</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Maven 依赖，注意要加上 <code>shardingsphere-cluster-mode-repository-zookeeper</code> 的依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL Connector/J --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis plus，本项目用到，非必须 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ShardingSphere JDBC 主依赖（5.5.2 建议） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自定义 的 SPI --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hanqf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>algorithm-swapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- shardingsphere-cluster-mode-repository-zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-cluster-mode-repository-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="如何选择">如何选择</h3><ul class="lvl-0"><li class="lvl-2"><p>当我使用<code>springboot3+shardingSphere-JDBC5.5.2</code>时，我应该使用本地<code>配置文件</code>的方式还是使用<code>配置中心</code>（比如：zookeeper）的方式呢？</p></li></ul><table><thead><tr><th>方式</th><th>部署复杂度</th><th>配置动态更新</th><th>多实例共享配置</th><th>热更新支持</th><th>适用环境</th></tr></thead><tbody><tr><td>本地配置文件</td><td>简单</td><td>不支持</td><td>不支持</td><td>否</td><td>开发/测试/小型项目</td></tr><tr><td>配置中心（ZooKeeper/etcd）</td><td>略高</td><td>支持</td><td>支持</td><td>是</td><td>生产/分布式环境</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>注意</p><ul class="lvl-2"><li class="lvl-4">DistSQL 目前确实只支持在 ShardingSphere-Proxy 上执行，并且 Proxy 只支持 MySQL 和 PostgreSQL 协议。</li><li class="lvl-4">如果你在 Spring Boot + ShardingSphere-JDBC 里用 其它数据库（比如 SQL Server、Oracle、DB2 等），就无法直接通过 DistSQL 去动态改配置。</li><li class="lvl-4">此时你可以选择通过 Zookeeper 的客户端直接修改或配置规则，也可以不选择 <code>配置中心</code> 的方式，直接使用 <code>本地配置文件</code>。</li></ul></li></ul><h2 id="什么时候需要分库分表">什么时候需要分库分表</h2><ul class="lvl-0"><li class="lvl-2"><p>分库分表的主要目的是 <strong>解决数据量大带来的性能、可用性和可扩展性问题</strong>。通常需要考虑的几个关键指标：</p></li></ul><h3 id="1-数据量指标">1. 数据量指标</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>单表数据量过大</strong>：一般来说，单表数据量在 <strong>千万级</strong> 以上时，查询、写入和索引的性能会明显下降。</p></li><li class="lvl-2"><p>例如：一个订单表一天有上百万条数据，一年下来可能有上亿条，单表性能会成为瓶颈。</p></li></ul><h3 id="2-访问量指标">2. 访问量指标</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>高并发写入或查询</strong>：数据库连接、事务锁、IO 等资源会成为瓶颈。</p></li><li class="lvl-2"><p>如果你的系统每天有上千万的请求，数据库可能无法承受。</p></li></ul><h3 id="3-业务隔离需求">3. 业务隔离需求</h3><ul class="lvl-0"><li class="lvl-2"><p>不同业务的数据分离，避免单个业务影响整个数据库的稳定性。</p></li><li class="lvl-2"><p>例如：电商系统中的订单和日志数据，日志量非常大，和订单分开存储更合理。</p></li></ul><h3 id="4-运营与成本因素">4. 运营与成本因素</h3><ul class="lvl-0"><li class="lvl-2"><p>分库分表后，可以分布到多个数据库实例上，支持 <strong>水平扩展</strong>，而不必依赖昂贵的单机数据库。</p></li></ul><h2 id="使用-ShardingSphere-可能带来的问题">使用 ShardingSphere 可能带来的问题</h2><ul class="lvl-0"><li class="lvl-2"><p>使用 <strong>ShardingSphere</strong> 可以方便地解决分库分表问题，但在实际生产中，它会带来一些新的复杂性和潜在问题，主要体现在性能、运维、功能限制等方面。</p></li></ul><h3 id="1-性能与延迟">1. 性能与延迟</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>跨库 JOIN 性能差</strong><br>分库分表后，跨库的 <code>JOIN</code> 查询会在各个分片上分别执行，然后在 ShardingSphere 层合并结果，性能明显下降。</p><ul class="lvl-2"><li class="lvl-4">例如：订单表在多个库，查询订单 + 用户信息时必须跨库 JOIN，执行效率比单库低很多。</li></ul></li><li class="lvl-2"><p><strong>分页查询慢</strong><br>分库分表后，如果要全局排序 + 分页，需要所有分片查出数据再合并，代价非常大。</p><ul class="lvl-2"><li class="lvl-4">解决方式：使用分片键范围分页，或引入 ElasticSearch/ClickHouse 做搜索和统计。</li></ul></li><li class="lvl-2"><p><strong>广播表压力</strong><br>配置了广播表（每个库一份完整数据）后，更新需要同步所有库，写入性能下降。</p></li></ul><h3 id="2-SQL-兼容性限制">2. SQL 兼容性限制</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>复杂 SQL 支持不完整</strong><br>ShardingSphere 对某些复杂 SQL（如子查询、窗口函数）支持有限，可能报错或性能极差。</p></li><li class="lvl-2"><p><strong>存储过程、触发器受限</strong><br>分库分表后，存储过程、触发器在分片数据库执行可能不一致，维护成本高。</p></li></ul><h3 id="3-分布式事务问题">3. 分布式事务问题</h3><ul class="lvl-0"><li class="lvl-2"><p>ShardingSphere 支持 <strong>XA 分布式事务</strong>，但性能不如单机事务，出现网络抖动时可能会卡住。</p></li><li class="lvl-2"><p>如果业务需要强一致性，必须结合可靠消息或 TCC、SAGA 等分布式事务模式，架构会更复杂。</p></li></ul><h3 id="4-运维与管理复杂度">4. 运维与管理复杂度</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>分片规则变更困难</strong><br>例如，最初按 <code>user_id % 2</code> 分成两个库，后续想增加到 4 个库，需要迁移数据，非常麻烦。</p></li><li class="lvl-2"><p><strong>监控与调优</strong><br>ShardingSphere 增加了中间层，SQL 路由、执行计划、数据节点状态都需要额外的监控工具支持。</p></li></ul><h3 id="5-成本与学习曲线">5. 成本与学习曲线</h3><ul class="lvl-0"><li class="lvl-2"><p>配置相对复杂：分片规则、读写分离、分布式事务、弹性扩容都需要仔细设计。</p></li><li class="lvl-2"><p>学习曲线较陡：开发和运维人员必须了解 ShardingSphere 的工作机制，否则定位问题很困难。</p></li></ul><h3 id="6-高可用与扩展问题">6. 高可用与扩展问题</h3><ul class="lvl-0"><li class="lvl-2"><p>ShardingSphere-JDBC 是应用内库，无法独立扩展，需要依赖应用扩容。</p></li><li class="lvl-2"><p>ShardingSphere-Proxy 支持集群，但需要自己搭建高可用架构，涉及负载均衡、故障切换等问题。</p></li></ul><h2 id="其它技术方案：分布式数据库">其它技术方案：分布式数据库</h2><ul class="lvl-0"><li class="lvl-2"><p>开源产品: 核心功能完全开源，企业版提供额外商业特性</p></li></ul><table><thead><tr><th>数据库</th><th>架构类型</th><th>SQL 兼容性</th><th>分布式事务支持</th><th>数据存储模型</th><th>主要特点</th><th>典型应用场景</th></tr></thead><tbody><tr><td><strong><a href="https://www.pingcap.com/">TiDB</a></strong></td><td>分布式 HTAP</td><td>MySQL 协议兼容</td><td>支持（Percolator 模型）</td><td>行存 + 列存混合</td><td>开源、云原生、强一致性、弹性扩展</td><td>在线事务处理 + 实时分析</td></tr><tr><td><strong><a href="https://en.oceanbase.com/">OceanBase</a></strong></td><td>分布式关系型数据库</td><td>MySQL/Oracle 兼容</td><td>支持（两阶段提交）</td><td>行存</td><td>高性能、金融级事务、阿里蚂蚁金服核心系统使用</td><td>金融、电商、核心交易系统</td></tr><tr><td><strong><a href="https://www.cockroachlabs.com/">CockroachDB</a></strong></td><td>分布式 NewSQL</td><td>PostgreSQL 兼容</td><td>支持（分布式事务）</td><td>行存</td><td>类 Spanner 架构，全球分布，强一致性</td><td>全球化分布式应用</td></tr><tr><td><strong><a href="https://www.citusdata.com/">Citus</a> (PostgreSQL)</strong></td><td>PostgreSQL 扩展</td><td>PostgreSQL 兼容</td><td>部分支持（基于逻辑分片）</td><td>行存</td><td>基于 PostgreSQL 的分布式扩展，支持大规模 OLAP</td><td>大数据实时分析、BI 场景</td></tr><tr><td><strong><a href="https://vitess.io/">Vitess</a></strong></td><td>分布式中间件 + 存储</td><td>MySQL 协议兼容</td><td>弱事务（最终一致性）</td><td>行存</td><td>YouTube 开源，K8s 友好，分库分表自动化</td><td>大规模 Web 应用，在线服务</td></tr><tr><td><strong><a href="https://www.yugabyte.com/">YugabyteDB</a></strong></td><td>分布式 SQL + NoSQL</td><td>PostgreSQL 兼容</td><td>支持（两阶段提交）</td><td>行存 + 列存混合</td><td>融合 NewSQL 和 NoSQL，强一致性，跨区域部署</td><td>金融级事务 + 分析混合场景</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>商业产品</p></li></ul><table><thead><tr><th>数据库</th><th>架构类型</th><th>SQL 兼容性</th><th>分布式事务支持</th><th>数据存储模型</th><th>主要特点</th><th>典型应用场景</th></tr></thead><tbody><tr><td><strong><a href="https://www.alibabacloud.com/product/polardb">PolarDB</a></strong></td><td>云原生分布式数据库</td><td>MySQL/PostgreSQL 兼容</td><td>支持（云端分布式事务）</td><td>行存</td><td>阿里云产品，弹性扩容，存储计算分离</td><td>云上企业数据库解决方案</td></tr><tr><td><strong><a href="https://www.huaweicloud.com/product/gaussdb.html">GaussDB</a></strong></td><td>分布式关系型数据库</td><td>MySQL/Oracle 兼容</td><td>支持（分布式事务）</td><td>行存 + 列存混合</td><td>华为推出，分布式 HTAP，云原生架构</td><td>企业级 OLTP + OLAP 混合负载</td></tr><tr><td><strong><a href="https://cloud.google.com/spanner">Spanner</a></strong></td><td>全球分布式数据库</td><td>类 SQL</td><td>支持（TrueTime 协议）</td><td>行存</td><td>Google 云产品，全球分布式强一致事务</td><td>全球化分布式事务，金融场景</td></tr><tr><td><strong><a href="https://aws.amazon.com/rds/aurora/">Amazon Aurora</a></strong></td><td>云原生分布式关系型数据库</td><td>MySQL/PostgreSQL 兼容</td><td>支持（单实例事务，多 AZ 高可用）</td><td>行存</td><td>AWS 托管，自动扩展存储，多可用区高可用</td><td>OLTP、企业级业务</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 SpringBoot3.5.5 + ShardingSphere-Proxy5.5.2 运行模式的配置与使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://shardingsphere.apache.org/index_zh.html&quot;&gt;ShardingSphere官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文在 &lt;a href=&quot;/2025/09/04/springboot3-shardingsphere-proxy/&quot; title=&quot;SpringBoot3 + ShardingSphere-Proxy5.5.2 分库分表&quot;&gt;SpringBoot3 + ShardingSphere-Proxy5.5.2 分库分表&lt;/a&gt; 的基础上进行修改。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/"/>
    
    <category term="sharding-sphere" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/sharding-sphere/"/>
    
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/tags/springboot/"/>
    
    <category term="sharding-sphere" scheme="https://blog.hanqunfeng.com/tags/sharding-sphere/"/>
    
  </entry>
  
  <entry>
    <title>Maven 私服 Nexus 升级实录</title>
    <link href="https://blog.hanqunfeng.com/2025/09/08/maven-nexus-upgrade/"/>
    <id>https://blog.hanqunfeng.com/2025/09/08/maven-nexus-upgrade/</id>
    <published>2025-09-08T13:30:05.000Z</published>
    <updated>2025-09-15T06:26:27.872Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 Mavne 私服 Nexus 升级的全过程，从 <code>3.29.2-02</code> 升级到 <code>3.83.2-01</code></p></li><li class="lvl-2"><p><a href="https://help.sonatype.com/en/sonatype-nexus-repository.html">Nexus官网</a></p></li><li class="lvl-2"><p><a href="https://mirrors.tuna.tsinghua.edu.cn/Adoptium/">OpenJdk下载地址</a></p></li><li class="lvl-2"><p><a href="https://help.sonatype.com/en/sonatype-nexus-repository-system-requirements.html">Nexus系统配置要求</a></p></li></ul><span id="more"></span><h2 id="升级过程说明">升级过程说明</h2><ul class="lvl-0"><li class="lvl-2"><p>Nexus 从 <code>3.71.x</code> 开始，不再支持 <code>OrientDB</code>，后续版本仅支持 <code>H2</code> 和 <code>PostgreSQL</code> ，根据<a href="https://help.sonatype.com/en/upgrading-to-nexus-repository-3-71-0-and-beyond.html">官网说明</a>，<code>3.70.x</code> 以下的版本需要将 Nexus 先升级到 <code>3.70.x</code> 的最新版本，然后使用官方提供的数据库迁移工具，将数据库迁移到 <code>H2</code> 后，再升级到 <code>3.71.x</code> 以后的版本</p></li></ul><h2 id="从-3-29-2-02-升级到-nexus-3-70-4-02">从 <code>3.29.2-02</code> 升级到 <code>nexus-3.70.4-02</code></h2><h3 id="安装-OpenJDK">安装 <code>OpenJDK</code></h3><ul class="lvl-0"><li class="lvl-2"><p>需要先安装好 <code>OpenJDK</code>，原因是<code>Nexus的数据库迁移工具</code>仅支持 <code>OpenJDK</code>，不支持 <code>Oracle JDK</code>，我这里选择安装 <code>OpenJDK11</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line">curl -O https://mirrors.tuna.tsinghua.edu.cn/Adoptium/11/jdk/x64/linux/OpenJDK11U-jdk_x64_linux_hotspot_11.0.28_6.tar.gz</span><br><span class="line">tar -zxvf OpenJDK11U-jdk_x64_linux_hotspot_11.0.28_6.tar.gz</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/jdk-11.0.28+6/bin/java /usr/bin/java</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk-11.0.28+6</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h3 id="安装-nexus-3-70-x">安装 <code>nexus-3.70.x</code></h3><ul class="lvl-0"><li class="lvl-2"><p>目前官网发布的<code>nexus-3.70.x</code>的最新版本为 <code>nexus-3.70.4-02</code>，<a href="https://help.sonatype.com/en/orientdb-downloads.html">下载页面</a>，其对应的数据库迁移工具也可以从该页面下载。</p></li><li class="lvl-2"><p>这里我们选择 <a href="https://download.sonatype.com/nexus/3/nexus-3.70.4-02-java11-unix.tar.gz">Java 11 的版本</a>，升级安装与第一次安装方式一样。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到 nexus 用户，原 nexus-3.29.2-02 就安装在 该用户的 `home` 目录下</span></span><br><span class="line">su - nexus</span><br><span class="line"><span class="comment"># 关闭 原 nexus 服务，关于如何将 Nexus 配置为系统服务，可以参考：https://help.sonatype.com/en/run-as-a-service.html</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop nexus</span><br><span class="line"><span class="comment">#~/nexus3/bin/nexus stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要科学上网</span></span><br><span class="line">curl -O https://download.sonatype.com/nexus/3/nexus-3.70.4-02-java11-unix.tar.gz</span><br><span class="line">tar -zxvf nexus-3.70.4-02-java11-unix.tar.gz</span><br><span class="line"><span class="built_in">rm</span> -f ~/nexus3</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/nexus-3.70.4-02 ~/nexus3</span><br><span class="line"><span class="comment"># 启动 nexus</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start nexus</span><br><span class="line"><span class="comment"># ~/nexus3/bin/nexus start</span></span><br></pre></td></tr></table></figure><h3 id="迁移数据到-H2">迁移数据到 H2</h3><ul class="lvl-0"><li class="lvl-2"><p>下载数据库迁移工具</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/backup</span><br><span class="line"><span class="built_in">cd</span> ~/backup</span><br><span class="line"><span class="comment"># 与 nexus 版本一致</span></span><br><span class="line">curl -O https://download.sonatype.com/nexus/nxrm3-migrator/nexus-db-migrator-3.70.4-02.jar</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>登录 Nexus 导出数据: 设置 -&gt; System -&gt; Tasks -&gt; Create task -&gt; Admin - Export databases for backup<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/MS26e5.png" alt=""></p></li><li class="lvl-2"><p>任务创建后点击<code>Run</code>，即可在 <code>/home/nexus/backup</code> 目录下看到备份文件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ll /home/nexus/backup</span><br><span class="line">-rw-rw-r-- 1 nexus nexus   121066 Sep  8 07:25 analytics-2025-09-08-07-25-57-3.70.4-02.bak</span><br><span class="line">-rw-rw-r-- 1 nexus nexus 19349428 Sep  8 07:25 component-2025-09-08-07-25-57-3.70.4-02.bak</span><br><span class="line">-rw-rw-r-- 1 nexus nexus   266208 Sep  8 07:25 config-2025-09-08-07-25-57-3.70.4-02.bak</span><br><span class="line">-rw-r--r-- 1 nexus nexus 56809625 Sep  8 06:41 nexus-db-migrator-3.70.4-02.jar</span><br><span class="line">-rw-rw-r-- 1 nexus nexus   132802 Sep  8 07:25 security-2025-09-08-07-25-57-3.70.4-02.bak</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用迁移工具生成H2数据库文件，官网参考资料: <a href="https://help.sonatype.com/en/migrating-to-a-new-database.html#migrating-from-orientdb-to-h2">Migrating From OrientDB to H2</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开始迁移前需要先关闭 nexus 服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop nexus</span><br><span class="line"><span class="comment"># ~/nexus3/bin/nexus stop</span></span><br><span class="line"><span class="comment"># 进入备份目录</span></span><br><span class="line"><span class="built_in">cd</span> /home/nexus/backup</span><br><span class="line"><span class="comment"># 这里要使用 OpenJDK 11 运行，根据需要适当调整内存参数</span></span><br><span class="line">java -Xmx2G -Xms2G -XX:+UseG1GC -jar nexus-db-migrator-3.70.4-02.jar --migration_type=h2</span><br><span class="line"><span class="comment"># 运行后会提示你迁移数据库前需要先关闭 nexus 服务，我们输入 y 继续</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>运行成功后会生成 <code>nexus.mv.db</code>，将其移动到 <code>/home/nexus/sonatype-work/nexus3/db/</code> 目录下</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> nexus.mv.db /home/nexus/sonatype-work/nexus3/db/</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>编辑<code>/home/nexus/sonatype-work/nexus3/etc/nexus.properties</code> 文件，添加如下内容</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable db h2</span></span><br><span class="line">nexus.datastore.enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动 nexus，此时我们就完成了 从 <code>3.29.2-02</code> 到 <code>nexus-3.70.4-02</code> 的升级</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start nexus</span><br><span class="line"><span class="comment"># ~/nexus3/bin/nexus start</span></span><br></pre></td></tr></table></figure><h2 id="从-nexus-3-70-4-02-升级到-nexus-3-83-2-01">从 <code>nexus-3.70.4-02</code> 升级到 <code>nexus-3.83.2-01</code></h2><ul class="lvl-0"><li class="lvl-2"><p>这个升级就比较简单了，和我们此前的升级方式是一样的，下载解压后替换安装目录即可，这里要注意，从<code>nexus-3.71.0+</code>开始仅支持<code>jdk17</code>，所以需要提前安装好<code>jdk17</code>，另外从<code>nexus-3.78.0</code>开始，Nexus 内置了<code>openjdk17</code>，所以不需要再额外安装jdk。</p></li><li class="lvl-2"><p><code>nexus-3.83.2-01</code> 是目前的最新版，<a href="https://help.sonatype.com/en/download.html">最新版下载页面</a>，<a href="https://help.sonatype.com/en/download-archives---repository-manager-3.html">历史版本下载页面地址</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭 Nexus 服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop nexus</span><br><span class="line"><span class="comment"># ~/nexus3/bin/nexus stop</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">curl -O https://download.sonatype.com/nexus/3/nexus-3.83.2-01-linux-x86_64.tar.gz</span><br><span class="line">tar -zxvf nexus-3.83.2-01-linux-x86_64.tar.gz</span><br><span class="line"><span class="built_in">rm</span> -f nexus3</span><br><span class="line"><span class="built_in">ln</span> -s nexus-3.83.2-01 nexus3</span><br><span class="line"><span class="comment"># 启动 Nexus，nexus-3.83.2-01 自带 openjdk17，所以不需要单独安装 openjdk</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start nexus</span><br><span class="line"><span class="comment"># ~/nexus3/bin/nexus start</span></span><br></pre></td></tr></table></figure><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/rgLwWf.png" alt=""><br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/mdWh22.png" alt="" width="1400" height="1000"><br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/56aOWz.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 Mavne 私服 Nexus 升级的全过程，从 &lt;code&gt;3.29.2-02&lt;/code&gt; 升级到 &lt;code&gt;3.83.2-01&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://help.sonatype.com/en/sonatype-nexus-repository.html&quot;&gt;Nexus官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/Adoptium/&quot;&gt;OpenJdk下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://help.sonatype.com/en/sonatype-nexus-repository-system-requirements.html&quot;&gt;Nexus系统配置要求&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="maven" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/maven/"/>
    
    <category term="nexus" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/maven/nexus/"/>
    
    
    <category term="mavne" scheme="https://blog.hanqunfeng.com/tags/mavne/"/>
    
    <category term="nexus" scheme="https://blog.hanqunfeng.com/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot3 + ShardingSphere-Proxy5.5.2 分库分表</title>
    <link href="https://blog.hanqunfeng.com/2025/09/04/springboot3-shardingsphere-proxy/"/>
    <id>https://blog.hanqunfeng.com/2025/09/04/springboot3-shardingsphere-proxy/</id>
    <published>2025-09-04T13:30:05.000Z</published>
    <updated>2025-09-15T06:26:28.249Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 SpringBoot3.5.5 + ShardingSphere-Proxy5.5.2 分库分表的使用。</p></li><li class="lvl-2"><p><a href="https://shardingsphere.apache.org/index_zh.html">ShardingSphere官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo/shardingsphere-proxy">本文项目代码Github地址</a></p></li><li class="lvl-2"><p>本文将 <a href="/2025/09/01/springboot3-shardingsphere/" title="SpringBoot3 + ShardingSphere-JDBC5.5.2 分库分表">SpringBoot3 + ShardingSphere-JDBC5.5.2 分库分表</a> 修改为 <code>ShardingSphere-Proxy</code> 的模式</p></li></ul><span id="more"></span><h2 id="ShardingSphere-Proxy-简介">ShardingSphere-Proxy 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>ShardingSphere-Proxy 定位为透明化的数据库代理端，通过实现数据库二进制协议，对异构语言提供支持。 目前提供 MySQL 和 PostgreSQL 协议，透明化数据库操作，对 DBA 更加友好。</p><ul class="lvl-2"><li class="lvl-4">向应用程序完全透明，可直接当做 MySQL/PostgreSQL 使用；</li><li class="lvl-4">兼容 MariaDB 等基于 MySQL 协议的数据库，以及 openGauss 等基于 PostgreSQL 协议的数据库；</li><li class="lvl-4">适用于任何兼容 MySQL/PostgreSQL 协议的的客户端，如：MySQL Command Client, MySQL Workbench, Navicat 等。</li></ul></li><li class="lvl-2"><p>ShardingSphere-Proxy 独立部署架构图<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/AMn2pu.png" alt=""></p></li><li class="lvl-2"><p>ShardingSphere-Proxy 与 ShardingSphere-JDBC 的特性比较</p></li></ul><table><thead><tr><th>特性</th><th>ShardingSphere-JDBC</th><th>ShardingSphere-Proxy</th></tr></thead><tbody><tr><td><strong>数据库支持</strong></td><td>任意数据库</td><td>MySQL / PostgreSQL</td></tr><tr><td><strong>连接消耗数</strong></td><td>高</td><td>低</td></tr><tr><td><strong>异构语言支持</strong></td><td>仅支持 Java</td><td>支持任意语言</td></tr><tr><td><strong>性能</strong></td><td>损耗低</td><td>损耗略高</td></tr><tr><td><strong>无中心化</strong></td><td>是</td><td>否</td></tr><tr><td><strong>静态入口</strong></td><td>无</td><td>有</td></tr></tbody></table><h2 id="部署-ShardingSphere-Proxy">部署 ShardingSphere-Proxy</h2><ul class="lvl-0"><li class="lvl-2"><p>运行 ShardingSphere-Proxy 要求 JDK 1.8+</p></li><li class="lvl-2"><p>下载 <a href="https://shardingsphere.apache.org/document/current/cn/downloads/">ShardingSphere-Proxy5.5.2</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.apache.org/dyn/closer.lua/shardingsphere/5.5.2/apache-shardingsphere-5.5.2-shardingsphere-proxy-bin.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf apache-shardingsphere-5.5.2-shardingsphere-proxy-bin.tar.gz</span><br><span class="line"><span class="built_in">cd</span> apache-shardingsphere-5.5.2-shardingsphere-proxy-bin/</span><br></pre></td></tr></table></figure><h2 id="配置-ShardingSphere-Proxy">配置 ShardingSphere-Proxy</h2><ul class="lvl-0"><li class="lvl-2"><p><code>conf/global.yaml</code>: 全局配置，所谓全局，就是对所有逻辑库都生效的配置</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/yaml-config/authority/</span></span><br><span class="line"><span class="attr">authority:</span></span><br><span class="line"> <span class="attr">users:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">user:</span> <span class="string">root@127.0.0.1</span> <span class="comment"># 格式：用户名@IP</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">     <span class="attr">admin:</span> <span class="literal">true</span>          <span class="comment"># 是否是管理员</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">user:</span> <span class="string">sharding@%</span>     <span class="comment"># 所有IP都可以访问</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">sharding</span></span><br><span class="line"> <span class="attr">privilege:</span></span><br><span class="line">   <span class="attr">type:</span> <span class="string">DATABASE_PERMITTED</span> <span class="comment"># 权限类型</span></span><br><span class="line">   <span class="attr">props:</span></span><br><span class="line">      <span class="attr">user-database-mappings:</span> <span class="string">root@127.0.0.1=*,sharding@%=sharding_db</span> <span class="comment"># 用户权限映射，*表示所有数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启XA事务，如果是 springboot项目，只需要在方法上加上 @Transactional 注解即可开启事务(从 MySQL 5.7 开始就全面支持 XA 分布式事务)</span></span><br><span class="line"><span class="comment"># https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/transaction/</span></span><br><span class="line"><span class="attr">transaction:</span>  <span class="comment"># 配置事务</span></span><br><span class="line">  <span class="attr">defaultType:</span> <span class="string">XA</span>        <span class="comment"># 事务类型，默认 LOCAL</span></span><br><span class="line">  <span class="attr">providerType:</span> <span class="string">Atomikos</span> <span class="comment"># 事务管理器具体实现，默认就是 Atomikos</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性配置：https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/yaml-config/props/</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span> <span class="comment"># 控制台打印改写后的 SQL，便于排错，默认为 false</span></span><br><span class="line">  <span class="attr">check-table-metadata-enabled:</span> <span class="literal">false</span> <span class="comment"># 在程序启动和更新时，是否检查分片元数据的结构一致性，默认为 false</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>conf/database-my.yaml</code>: 自定义分配规则配置</p></li></ul><blockquote><p>注意:<br>1.名称必须以 <code>database-</code>开头，实际上<code>conf</code>目录下有很多示例，我们可以根据需要进行配置<br>2.<code>global.yaml</code>中的配置项不能配置到 <code>database-my.yaml</code>中</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库名称，默认值：logic_db</span></span><br><span class="line"><span class="attr">databaseName:</span> <span class="string">sharding_db</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据源配置: https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/data-source/</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span> <span class="comment"># 逻辑数据源名称</span></span><br><span class="line">    <span class="comment"># dataSourceClassName: com.zaxxer.hikari.HikariDataSource # 不要指定</span></span><br><span class="line">    <span class="comment"># driverClassName: com.mysql.cj.jdbc.Driver               # 不要指定</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb0?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span>  <span class="comment"># 注意这里属性为 url</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ds_1:</span></span><br><span class="line">    <span class="comment"># dataSourceClassName: com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment"># driverClassName: com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb1?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下规则与前文中的 shardingsphere-jdbc 中的 rules 相同</span></span><br><span class="line"><span class="comment"># 分片规则配置: https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="comment"># 绑定表：同分片键 join 时走同路由，减少广播,多个逗号分隔，要求分片规则一致</span></span><br><span class="line">    <span class="attr">bindingTables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t_order,t_order_item</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">course:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.course_$&#123;1..2&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">cid</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_inline</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">cid</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order-complex-algorithm</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_item_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span>  <span class="comment"># 分片列名称,多个逗号分隔</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_item-class-based-algorithm_spi</span> <span class="comment"># 基于 SPI 的分片算法，效果同上，建议生产环境使用 SPI</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">t_user:</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_user_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span>  <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">id</span> <span class="comment"># 自增列名称，字符串类型</span></span><br><span class="line">          <span class="comment">#           keyGeneratorName: uuid # 分布式序列算法名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">custom_snowflake_string</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#       t_address:      # 普通表（不分库分表，绑定到 ds_0）,没有默认的数据源配置，所以每个都要显示声明</span></span><br><span class="line">    <span class="comment">#         actualDataNodes: ds_0.t_address # 实际数据节点</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">autoTables:</span> <span class="comment"># 自动分片规则配置</span></span><br><span class="line">      <span class="attr">t_order:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法 https://shardingsphere.apache.org/document/current/cn/dev-manual/sharding/</span></span><br><span class="line">      <span class="attr">course_inline:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span> <span class="comment"># 基于行表达式的分片算法，这里使用 MOD 会报错</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 属性</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">course_$&#123;cid</span> <span class="string">%</span> <span class="number">2</span> <span class="string">+</span> <span class="number">1</span><span class="string">&#125;</span> <span class="comment"># 表达式，这是因为表名称为 course_1, course_2</span></span><br><span class="line">          <span class="attr">allow-range-query-with-inline-sharding:</span> <span class="literal">true</span> <span class="comment"># 允许范围查询</span></span><br><span class="line">      <span class="attr">course_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 表示 ds_0, ds_1</span></span><br><span class="line">      <span class="attr">mod_2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MOD</span> <span class="comment"># 基于 MOD 的分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">sharding-count:</span> <span class="number">2</span> <span class="comment"># 分片数量，即 对 2 进行取余</span></span><br><span class="line">      <span class="attr">t_order_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order-complex-algorithm:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">COMPLEX_INLINE</span> <span class="comment"># 基于行表达式的复合分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_order_complex_$&#123;(user_id</span> <span class="string">+</span> <span class="string">order_id</span> <span class="string">+</span> <span class="number">1</span><span class="string">)</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order_item-class-based-algorithm_spi:</span> <span class="comment"># SPI</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">T_ORDER_ITEM_COMPLEX</span> <span class="comment"># 基于自定义类的分片算法</span></span><br><span class="line">      <span class="attr">t_user_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;Math.abs(id.hashCode()%2)&#125;</span></span><br><span class="line">      <span class="attr">t_user_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_user_$&#123;Math.abs(id.hashCode()%4).intdiv(2)&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器: https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/keygen/</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br><span class="line">      <span class="attr">uuid:</span> <span class="comment"># 定义名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">UUID</span> <span class="comment"># 字符串主键，String</span></span><br><span class="line">      <span class="attr">custom_snowflake_string:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">CUSTOM_SNOWFLAKE_STRING</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">workerId:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">datacenterId:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!BROADCAST</span>  <span class="comment"># 广播表配置，即所有的库中都包含指定的表，写入数据时同时写入多个库，查询时随机读一个</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dict</span>    <span class="comment"># 广播表名称，⼴播表不能配置分表逻辑，只往多个库的同⼀个表中插⼊数据。</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!ENCRYPT</span>    <span class="comment"># 数据加密配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span> <span class="comment"># 加密表名称</span></span><br><span class="line">        <span class="attr">columns:</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 加密列名称</span></span><br><span class="line">            <span class="attr">cipher:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">password</span> <span class="comment"># 密文列名称</span></span><br><span class="line">              <span class="attr">encryptorName:</span> <span class="string">aes_encryptor</span> <span class="comment"># 密文列加密算法名称</span></span><br><span class="line">    <span class="comment"># 加密算法配置: https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/encrypt/</span></span><br><span class="line">    <span class="attr">encryptors:</span></span><br><span class="line">      <span class="attr">aes_encryptor:</span> <span class="comment"># 加解密算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">AES</span> <span class="comment"># 加解密算法类型</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 加解密算法属性配置</span></span><br><span class="line">          <span class="attr">aes-key-value:</span> <span class="string">123456abc</span>     <span class="comment"># AES 使用的 KEY</span></span><br><span class="line">          <span class="attr">digest-algorithm-name:</span> <span class="string">SHA-1</span> <span class="comment"># AES KEY 的摘要算法</span></span><br><span class="line">      <span class="attr">md5_encryptor:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">salt:</span> <span class="number">123456</span>  <span class="comment"># 盐值（可选）</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!MASK</span>  <span class="comment"># 数据脱敏配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span> <span class="comment"># 脱敏表名称</span></span><br><span class="line">        <span class="attr">columns:</span> <span class="comment"># 脱敏列配置</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 脱敏列名称</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">md5_mask</span> <span class="comment"># 脱敏算法名称</span></span><br><span class="line">          <span class="attr">email:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">mask_before_special_chars_mask</span></span><br><span class="line">          <span class="attr">telephone:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">keep_first_n_last_m_mask</span></span><br><span class="line">          <span class="attr">name:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">my_mask</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">maskAlgorithms:</span> <span class="comment"># 脱敏算法配置</span></span><br><span class="line">      <span class="attr">md5_mask:</span> <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span>  <span class="comment"># 脱敏算法类型，md5加密后展示</span></span><br><span class="line">      <span class="attr">mask_before_special_chars_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MASK_BEFORE_SPECIAL_CHARS</span> <span class="comment"># 在特殊字符（比如邮箱里的 @）前面做脱敏，示例：myemail@example.com → *******@example.com</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">special-chars:</span> <span class="string">&#x27;@&#x27;</span>  <span class="comment"># 遇到 @ 之前的部分做脱敏</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span>   <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">keep_first_n_last_m_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">KEEP_FIRST_N_LAST_M</span> <span class="comment"># 保留前 n 位和后 m 位，其余用替换字符填充，示例：13812345678 → 138****5678</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">first-n:</span> <span class="number">3</span>     <span class="comment"># 保留前 3 位</span></span><br><span class="line">          <span class="attr">last-m:</span> <span class="number">4</span>      <span class="comment"># 保留后 4 位</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">my_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MY_CUSTOM_MASK</span>  <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&quot;#&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SINGLE</span> <span class="comment"># 单表规则配置，单表规则优先级高于分库分表规则</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="comment"># MySQL 风格</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ds_0.t_address</span> <span class="comment"># 加载指定单表</span></span><br><span class="line"><span class="comment">#       - ds_1.* # 加载指定数据源中的全部单表</span></span><br><span class="line"><span class="comment">#       - &quot;*.*&quot; # 加载全部单表</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>上面的<code>rules</code>中使用的是<code>mysql</code>数据库，所以我们需要引入<code>mysql</code>数据库的依赖</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> apache-shardingsphere-5.5.2-shardingsphere-proxy-bin/</span><br><span class="line"><span class="built_in">mkdir</span> ext-lib</span><br><span class="line"><span class="built_in">cd</span> ext-lib</span><br><span class="line">wget https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.11/mysql-connector-java-8.0.11.jar</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>同时<code>rules</code>中包含一些自定义的算法，我们也需要将这些算法作为依赖进行引入，将这些算法类打成<code>jar</code>，然后也拷贝到<code>ext-lib</code>目录下，我已经将其发布到了github上，实际上和前文中的 <code>shardingsphere-jdbc</code> 项目中将算法配置为 <code>spi</code> 的方式是一致的。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 只克隆仓库的基本信息，不下载所有文件</span></span><br><span class="line">git <span class="built_in">clone</span> --filter=blob:none --sparse https://github.com/hanqunfeng/springbootchapter.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 进入仓库目录</span></span><br><span class="line"><span class="built_in">cd</span> springbootchapter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 设置只检出你需要的目录</span></span><br><span class="line">git sparse-checkout <span class="built_in">set</span> springboot3-demo/shardingsphere-demo/algorithm-swapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 编译打包</span></span><br><span class="line"><span class="built_in">cd</span> springboot3-demo/shardingsphere-demo/algorithm-swapper</span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 将打好的包复制到 shardingsphere-proxy 的 ext-lib 目录下</span></span><br><span class="line"><span class="built_in">cp</span> target/algorithm-swapper-1.0.0.jar <span class="variable">$shardingsphere</span>-proxy$/ext-lib</span><br></pre></td></tr></table></figure><h2 id="启动与关闭-ShardingSphere-Proxy">启动与关闭 ShardingSphere Proxy</h2><ul class="lvl-0"><li class="lvl-2"><p>ShardingSphere Proxy 要求 JDK 1.8 或以上版本</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$shardingsphere</span>-proxy$/bin</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./start.sh</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">./stop.sh</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>参数说明</p></li></ul><table><thead><tr><th>参数</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td><code>-a</code></td><td>绑定地址，可以是 IPv4、IPv6 或主机名，多个地址用逗号分隔。</td><td><code>0.0.0.0</code></td></tr><tr><td><code>-p</code></td><td>绑定端口号，可以在 <code>global.yaml</code> 中修改。<code>-p</code> 优先级更高</td><td><code>3307</code></td></tr><tr><td><code>-c</code></td><td>ShardingSphere-Proxy 配置目录路径。</td><td><code>conf</code></td></tr><tr><td><code>-f</code></td><td>强制启动 ShardingSphere-Proxy。</td><td>无</td></tr><tr><td><code>-g</code></td><td>如果在 <code>agent</code> 目录下部署了 <code>shardingsphere-agent</code>，启用 agent 功能。</td><td>无</td></tr><tr><td><code>-s</code></td><td>指定用于连接的 socket 文件路径。</td><td>无</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>ShardingSphere-Proxy 启动命令速查表</p></li></ul><table><thead><tr><th>场景</th><th>命令示例</th><th>说明</th></tr></thead><tbody><tr><td><strong>默认启动</strong></td><td><code>./start.sh</code></td><td>默认端口 <code>3307</code>，配置目录 <code>conf</code></td></tr><tr><td><strong>指定端口和配置目录</strong></td><td><code>./start.sh 3308 /opt/shardingsphere-proxy/conf</code></td><td>简写模式，指定端口和配置目录</td></tr><tr><td><strong>参数形式启动</strong></td><td><code>./start.sh -p 3308 -c /opt/shardingsphere-proxy/conf</code></td><td>与上面等效，但更明确</td></tr><tr><td><strong>指定监听地址</strong></td><td><code>./start.sh -a 192.168.1.100 -p 3307 -c conf</code></td><td>指定单个 IP 地址</td></tr><tr><td><strong>指定多个监听地址</strong></td><td><code>./start.sh -a 192.168.1.100,127.0.0.1 -p 3307 -c conf</code></td><td>多个地址用逗号分隔</td></tr><tr><td><strong>强制启动</strong></td><td><code>./start.sh -p 3307 -c conf -f</code></td><td>遇到残留 PID 文件时使用</td></tr><tr><td><strong>启用 agent</strong></td><td><code>./start.sh -p 3307 -c conf -g</code></td><td>启动 ShardingSphere-Agent</td></tr><tr><td><strong>使用 Unix Socket</strong></td><td><code>./start.sh -p 3307 -c conf -s /tmp/sharding-proxy.sock</code></td><td>通过 Socket 文件进行连接</td></tr><tr><td><strong>多选项组合</strong></td><td><code>./start.sh -a 127.0.0.1 -p 3310 -c /opt/proxy/conf -f -g -s /tmp/proxy.sock</code></td><td>一次性指定多个选项</td></tr></tbody></table><h2 id="项目连接-ShardingSphere-Proxy-时，就像连接普通的-mysql-服务一样">项目连接 ShardingSphere-Proxy 时，就像连接普通的 mysql 服务一样</h2><ul class="lvl-0"><li class="lvl-2"><p>示例项目：<a href="https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo/shardingsphere-proxy">https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo/shardingsphere-proxy</a></p></li></ul><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p>在 <code>ShardingSphere-JDBC</code> 和 <code>ShardingSphere-Proxy</code> 中，存在部分 MySQL(其它数据库也类似) 的 SQL 语法或功能目前还不完全支持的情况。<code>ShardingSphere</code> 在做 SQL 路由、改写、执行时，必须能解析 SQL 并理解其语义，但并不是 MySQL 的 100% 完全代理。因此，有些复杂或特定场景下的 SQL 可能无法被正确解析或执行。</p></li><li class="lvl-2"><p>支持良好的 SQL 语法</p><ul class="lvl-2"><li class="lvl-4">基础 DML<br>SELECT、INSERT、UPDATE、DELETE<br>基本的条件查询、排序、分页、分组、聚合函数（如 COUNT、SUM、AVG）</li><li class="lvl-4">DCL<br>基本的事务语句：BEGIN、COMMIT、ROLLBACK</li><li class="lvl-4">DDL<br>部分表结构管理语句：CREATE TABLE、ALTER TABLE、DROP TABLE</li><li class="lvl-4">函数支持<br>大部分常用的 MySQL 内置函数，如字符串、数学、日期函数</li></ul></li></ul><h3 id="在-ShardingSphere-MySQL-下建议避免或谨慎使用的-SQL-清单">在 ShardingSphere + MySQL 下建议避免或谨慎使用的 SQL 清单</h3><ul class="lvl-0"><li class="lvl-2"><ol><li class="lvl-5">跨分片复杂查询</li></ol></li></ul><table><thead><tr><th>SQL 场景</th><th>原因</th><th>建议处理方式</th></tr></thead><tbody><tr><td>多表复杂 JOIN（特别是跨分片）</td><td>需要跨库数据聚合，性能差，可能报错</td><td>使用广播表/绑定表，或在应用层完成</td></tr><tr><td>跨分片子查询</td><td>SQL 路由困难，可能不支持</td><td>尽量改成单表查询或分步查询</td></tr><tr><td>跨分片的 GROUP BY / ORDER BY</td><td>在 Proxy 层聚合，性能很差</td><td>尽量避免，或控制数据量</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><ol start="2"><li class="lvl-5">DDL 相关</li></ol></li></ul><table><thead><tr><th>SQL 场景</th><th>原因</th><th>建议处理方式</th></tr></thead><tbody><tr><td><code>ALTER TABLE</code> 复杂变更</td><td>需在所有分片执行，可能执行失败</td><td>手动在每个分片库执行</td></tr><tr><td><code>CREATE TRIGGER</code>、<code>PROCEDURE</code></td><td>Proxy 不解析这些语法，直接透传不安全</td><td>尽量在单库手动创建</td></tr><tr><td><code>CREATE FUNCTION</code></td><td>同上</td><td>单库执行或应用层替代</td></tr><tr><td><code>FULLTEXT INDEX</code>、<code>SPATIAL INDEX</code></td><td>分片环境下无法自动维护索引</td><td>单库手动维护或避免使用</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><ol start="3"><li class="lvl-5">文件导入导出</li></ol></li></ul><table><thead><tr><th>SQL 场景</th><th>原因</th><th>建议处理方式</th></tr></thead><tbody><tr><td><code>LOAD DATA INFILE</code></td><td>Proxy 不支持文件系统直接访问</td><td>在分片库手动执行或通过应用导入</td></tr><tr><td><code>SELECT ... INTO OUTFILE</code></td><td>同上</td><td>应用层处理导出</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><ol start="4"><li class="lvl-5">MySQL 特有功能</li></ol></li></ul><table><thead><tr><th>功能</th><th>支持情况</th><th>建议</th></tr></thead><tbody><tr><td>MySQL 8.0 公共表表达式（CTE）</td><td>部分支持</td><td>避免跨分片使用</td></tr><tr><td>窗口函数（<code>OVER() PARTITION BY</code>）</td><td>部分支持</td><td>避免跨分片大数据量使用</td></tr><tr><td>JSON 函数</td><td>基本支持</td><td>单表场景可用，跨分片需谨慎</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>分布式事务</p></li></ul><table><thead><tr><th>场景</th><th>问题原因</th><th>建议处理方式</th></tr></thead><tbody><tr><td>跨分片原生事务</td><td>MySQL 原生事务不支持跨库</td><td>使用 ShardingSphere XA / BASE</td></tr><tr><td>大事务 + 分布式事务</td><td>性能开销大</td><td>尽量控制事务范围</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 SpringBoot3.5.5 + ShardingSphere-Proxy5.5.2 分库分表的使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://shardingsphere.apache.org/index_zh.html&quot;&gt;ShardingSphere官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo/shardingsphere-proxy&quot;&gt;本文项目代码Github地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文将 &lt;a href=&quot;/2025/09/01/springboot3-shardingsphere/&quot; title=&quot;SpringBoot3 + ShardingSphere-JDBC5.5.2 分库分表&quot;&gt;SpringBoot3 + ShardingSphere-JDBC5.5.2 分库分表&lt;/a&gt; 修改为 &lt;code&gt;ShardingSphere-Proxy&lt;/code&gt; 的模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/"/>
    
    <category term="sharding-sphere" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/sharding-sphere/"/>
    
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/tags/springboot/"/>
    
    <category term="sharding-sphere" scheme="https://blog.hanqunfeng.com/tags/sharding-sphere/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot3 + ShardingSphere-JDBC5.5.2 分库分表</title>
    <link href="https://blog.hanqunfeng.com/2025/09/01/springboot3-shardingsphere/"/>
    <id>https://blog.hanqunfeng.com/2025/09/01/springboot3-shardingsphere/</id>
    <published>2025-09-01T13:30:05.000Z</published>
    <updated>2025-09-15T06:26:28.263Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 SpringBoot3.5.5 + ShardingSphere-JDBC5.5.2 分库分表的使用。</p></li><li class="lvl-2"><p><a href="https://shardingsphere.apache.org/index_zh.html">ShardingSphere官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo/shardingsphere-demo-01">本文项目代码Github地址</a></p></li></ul><span id="more"></span><h2 id="ShardingSphere-JDBC-简介">ShardingSphere-JDBC 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>ShardingSphere-JDBC 定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p><ul class="lvl-2"><li class="lvl-4">适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC；</li><li class="lvl-4">支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, HikariCP 等；</li><li class="lvl-4">支持任意实现 JDBC 规范的数据库，目前支持 MySQL，PostgreSQL，Oracle，SQLServer 以及任何可使用 JDBC 访问的数据库。</li></ul></li><li class="lvl-2"><p>ShardingSphere-JDBC 独立部署架构图<br><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/RgXClY.png" alt=""></p></li></ul><h2 id="maven依赖">maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本项目 基于 mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis plus，本项目用到，非必须 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ShardingSphere JDBC 主依赖（5.5.2 建议） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="application-yml">application.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.apache.shardingsphere.driver.ShardingSphereDriver</span></span><br><span class="line">    <span class="comment"># 指向类路径下的 sharding.yaml（也可 absolute path / file: / http: 等，见官方说明）</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:shardingsphere:classpath:sharding.yaml</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>也可以不在 <code>application.yml</code> 中配置，而是通过 <code>@Configuration</code> 创建 <code>@Bean</code>，这样就可以配置多数据源了。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;shardingDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">shardingDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, IOException &#123;</span><br><span class="line">        <span class="comment">// ShardingSphere 提供的工厂方法，根据配置构建 DataSource</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;sharding.yaml&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Cannot find sharding.yaml in classpath&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] yamlBytes = inputStream.readAllBytes();</span><br><span class="line">            <span class="keyword">return</span> YamlShardingSphereDataSourceFactory.createDataSource(yamlBytes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sharding-yaml">sharding.yaml</h2><ul class="lvl-0"><li class="lvl-2"><p>完整配置，下文会介绍部分配置</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据源配置: https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/data-source/</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span> <span class="comment"># 逻辑数据源名称</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb0?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ds_1:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb1?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分片规则配置: https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="comment"># 绑定表：同分片键 join 时走同路由，减少广播,多个逗号分隔，要求分片规则一致</span></span><br><span class="line">    <span class="attr">bindingTables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t_order,t_order_item</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">course:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.course_$&#123;1..2&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">cid</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_inline</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">cid</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order-complex-algorithm</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_item_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span>  <span class="comment"># 分片列名称,多个逗号分隔</span></span><br><span class="line"><span class="comment">#             shardingAlgorithmName: t_order_item-class-based-algorithm   # 基于自定义类的分片算法</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_item-class-based-algorithm_spi</span> <span class="comment"># 基于 SPI 的分片算法，效果同上，建议生产环境使用 SPI</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">t_user:</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_user_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span>  <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">id</span> <span class="comment"># 自增列名称，字符串类型</span></span><br><span class="line"><span class="comment">#           keyGeneratorName: uuid # 分布式序列算法名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">custom_snowflake_string</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#       t_address:      # 普通表（不分库分表，绑定到 ds_0）,没有默认的数据源配置，所以每个都要显示声明</span></span><br><span class="line"><span class="comment">#         actualDataNodes: ds_0.t_address # 实际数据节点</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">autoTables:</span> <span class="comment"># 自动分片规则配置</span></span><br><span class="line">      <span class="attr">t_order:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法 https://shardingsphere.apache.org/document/current/cn/dev-manual/sharding/</span></span><br><span class="line">      <span class="attr">course_inline:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span> <span class="comment"># 基于行表达式的分片算法，这里使用 MOD 会报错</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 属性</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">course_$&#123;cid</span> <span class="string">%</span> <span class="number">2</span> <span class="string">+</span> <span class="number">1</span><span class="string">&#125;</span> <span class="comment"># 表达式，这是因为表名称为 course_1, course_2</span></span><br><span class="line">          <span class="attr">allow-range-query-with-inline-sharding:</span> <span class="literal">true</span> <span class="comment"># 允许范围查询</span></span><br><span class="line">      <span class="attr">course_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 表示 ds_0, ds_1</span></span><br><span class="line">      <span class="attr">mod_2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MOD</span> <span class="comment"># 基于 MOD 的分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">sharding-count:</span> <span class="number">2</span> <span class="comment"># 分片数量，即 对 2 进行取余</span></span><br><span class="line">      <span class="attr">t_order_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order-complex-algorithm:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">COMPLEX_INLINE</span> <span class="comment"># 基于行表达式的复合分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_order_complex_$&#123;(user_id</span> <span class="string">+</span> <span class="string">order_id</span> <span class="string">+</span> <span class="number">1</span><span class="string">)</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order_item-class-based-algorithm:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">CLASS_BASED</span> <span class="comment"># 基于自定义类的分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">strategy:</span> <span class="string">COMPLEX</span> <span class="comment"># 指定策略 STANDARD|COMPLEX|HINT ，告诉 ShardingSphere 分片算法类实现了什么策略</span></span><br><span class="line">          <span class="attr">algorithmClassName:</span> <span class="string">com.hanqf.demo.support.algorithm.OrderItemComplexAlgorithm</span> <span class="comment"># 指定算法类</span></span><br><span class="line">      <span class="attr">t_order_item-class-based-algorithm_spi:</span> <span class="comment"># SPI</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">T_ORDER_ITEM_COMPLEX</span> <span class="comment"># 基于自定义类的分片算法</span></span><br><span class="line">      <span class="attr">t_user_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;Math.abs(id.hashCode()%2)&#125;</span></span><br><span class="line">      <span class="attr">t_user_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_user_$&#123;Math.abs(id.hashCode()%4).intdiv(2)&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器: https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/keygen/</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br><span class="line">      <span class="attr">uuid:</span>    <span class="comment"># 定义名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">UUID</span> <span class="comment"># 字符串主键，String</span></span><br><span class="line">      <span class="attr">custom_snowflake_string:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">CUSTOM_SNOWFLAKE_STRING</span>  <span class="comment"># 自定义雪花算法，String</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">workerId:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">datacenterId:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!BROADCAST</span>  <span class="comment"># 广播表配置，即所有的库中都包含指定的表，写入数据时同时写入多个库，查询时随机读一个</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dict</span>    <span class="comment"># 广播表名称，⼴播表不能配置分表逻辑，只往多个库的同⼀个表中插⼊数据。</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!ENCRYPT</span>    <span class="comment"># 数据加密配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span>  <span class="comment"># 加密表名称</span></span><br><span class="line">        <span class="attr">columns:</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 加密列名称</span></span><br><span class="line">            <span class="attr">cipher:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">password</span> <span class="comment"># 密文列名称</span></span><br><span class="line">              <span class="attr">encryptorName:</span> <span class="string">aes_encryptor</span> <span class="comment"># 密文列加密算法名称</span></span><br><span class="line">    <span class="comment"># 加密算法配置: https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/encrypt/</span></span><br><span class="line">    <span class="attr">encryptors:</span></span><br><span class="line">      <span class="attr">aes_encryptor:</span> <span class="comment"># 加解密算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">AES</span> <span class="comment"># 加解密算法类型</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 加解密算法属性配置</span></span><br><span class="line">          <span class="attr">aes-key-value:</span> <span class="string">123456abc</span>     <span class="comment"># AES 使用的 KEY</span></span><br><span class="line">          <span class="attr">digest-algorithm-name:</span> <span class="string">SHA-1</span> <span class="comment"># AES KEY 的摘要算法</span></span><br><span class="line">      <span class="attr">md5_encryptor:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">salt:</span> <span class="number">123456</span>  <span class="comment"># 盐值（可选）</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!MASK</span>  <span class="comment"># 数据脱敏配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span>  <span class="comment"># 脱敏表名称</span></span><br><span class="line">        <span class="attr">columns:</span>  <span class="comment"># 脱敏列配置</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 脱敏列名称</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">md5_mask</span> <span class="comment"># 脱敏算法名称</span></span><br><span class="line">          <span class="attr">email:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">mask_before_special_chars_mask</span></span><br><span class="line">          <span class="attr">telephone:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">keep_first_n_last_m_mask</span></span><br><span class="line">          <span class="attr">name:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">my_mask</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">maskAlgorithms:</span> <span class="comment"># 脱敏算法配置</span></span><br><span class="line">      <span class="attr">md5_mask:</span> <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span>  <span class="comment"># 脱敏算法类型，md5加密后展示</span></span><br><span class="line">      <span class="attr">mask_before_special_chars_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MASK_BEFORE_SPECIAL_CHARS</span> <span class="comment"># 在特殊字符（比如邮箱里的 @）前面做脱敏，示例：myemail@example.com → *******@example.com</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">special-chars:</span> <span class="string">&#x27;@&#x27;</span>  <span class="comment"># 遇到 @ 之前的部分做脱敏</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span>   <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">keep_first_n_last_m_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">KEEP_FIRST_N_LAST_M</span> <span class="comment"># 保留前 n 位和后 m 位，其余用替换字符填充，示例：13812345678 → 138****5678</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">first-n:</span> <span class="number">3</span>     <span class="comment"># 保留前 3 位</span></span><br><span class="line">          <span class="attr">last-m:</span> <span class="number">4</span>      <span class="comment"># 保留后 4 位</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">my_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MY_CUSTOM_MASK</span>  <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&quot;#&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SINGLE</span> <span class="comment"># 单表规则配置，单表规则优先级高于分库分表规则</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="comment"># MySQL 风格</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ds_0.t_address</span> <span class="comment"># 加载指定单表</span></span><br><span class="line"><span class="comment">#       - ds_1.* # 加载指定数据源中的全部单表</span></span><br><span class="line"><span class="comment">#       - &quot;*.*&quot; # 加载全部单表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性配置：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/props/</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span> <span class="comment"># 控制台打印改写后的 SQL，便于排错，默认为 false</span></span><br><span class="line">  <span class="attr">check-table-metadata-enabled:</span> <span class="literal">false</span> <span class="comment"># 在程序启动和更新时，是否检查分片元数据的结构一致性，默认为 false</span></span><br></pre></td></tr></table></figure><h3 id="数据源配置">数据源配置</h3><ul class="lvl-0"><li class="lvl-2"><p>hikari + mysql</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span> <span class="comment"># 逻辑数据源名称</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb0?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ds_1:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb1?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>druid + mysql</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_1:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/shardingdb1?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line">    <span class="comment"># Druid 特有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>druid + mysql + p6spy</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span> <span class="comment"># 逻辑数据源名称</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.p6spy.engine.spy.P6SpyDriver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:p6spy:mysql://127.0.0.1:3306/shardingdb0?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">newpwd</span></span><br><span class="line">    <span class="comment"># Druid 特有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br></pre></td></tr></table></figure><h3 id="分库分表配置">分库分表配置</h3><h4 id="单分片键，Long-类型">单分片键，Long 类型</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">course:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.course_$&#123;1..2&#125;</span> <span class="comment"># 实际数据节点，建表时写成了 1和2，懒得改了，所以下面分表规则中对2取余后要+1</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">cid</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">course_inline</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">cid</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法</span></span><br><span class="line">      <span class="attr">course_inline:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span> <span class="comment"># 基于行表达式的分片算法，这里使用 MOD 会报错</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 属性</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">course_$&#123;cid</span> <span class="string">%</span> <span class="number">2</span> <span class="string">+</span> <span class="number">1</span><span class="string">&#125;</span> <span class="comment"># 表达式，这是因为表名称为 course_1, course_2</span></span><br><span class="line">          <span class="attr">allow-range-query-with-inline-sharding:</span> <span class="literal">true</span> <span class="comment"># 允许范围查询</span></span><br><span class="line">      <span class="attr">course_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 表示 ds_0, ds_1</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这里分库与分表采用了不同的字段，分库使用 user_id，分表使用 cid</p></li><li class="lvl-2"><p>allow-range-query-with-inline-sharding: true ，这里设置为允许范围查询，默认值是 false，不允许 between 查询</p></li></ul><h4 id="单分片键，String-类型">单分片键，String 类型</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">t_user:</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_user_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span>  <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_user_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">id</span> <span class="comment"># 自增列名称，字符串类型</span></span><br><span class="line"><span class="comment">#           keyGeneratorName: uuid # 分布式序列算法名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">custom_snowflake_string</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法</span></span><br><span class="line">      <span class="attr">t_user_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;Math.abs(id.hashCode()%2)&#125;</span> <span class="comment"># 分库，ds_0, ds_1，id 为字符串，所以要转换为数字再进行运算</span></span><br><span class="line">      <span class="attr">t_user_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_user_$&#123;Math.abs(id.hashCode()%4).intdiv(2)&#125;</span> <span class="comment"># 分表，t_user_0, t_user_1</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式序列算法</span></span><br><span class="line">      <span class="attr">uuid:</span>    <span class="comment"># 定义名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">UUID</span> <span class="comment"># 字符串主键，String</span></span><br><span class="line">      <span class="attr">custom_snowflake_string:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">CUSTOM_SNOWFLAKE_STRING</span> <span class="comment"># 自定义雪花算法，String，spi</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">workerId:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">datacenterId:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这里分库与分表采用了相同的字段，即主键id，因其为字符串类型，所以需要使用 hashCode() 获取数字，再进行运算</p></li><li class="lvl-2"><p>主键获取规则使用的自定义的雪花算法，spi，详见<code>src/main/resources/META-INF/services/org.apache.shardingsphere.infra.algorithm.keygen.core.KeyGenerateAlgorithm</code>，这里注意，从 <code>5.5.3</code> 开始会更换为 <code>org.apache.shardingsphere.infra.algorithm.keygen.spi.KeyGenerateAlgorithm</code></p></li></ul><h4 id="多分片键，Long-类型">多分片键，Long 类型</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">    <span class="attr">tables:</span> <span class="comment"># 手工分片规则配置</span></span><br><span class="line">      <span class="attr">t_order_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order-complex-algorithm</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item_complex:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_$&#123;0..1&#125;.t_order_item_complex_$&#123;0..1&#125;</span> <span class="comment"># 实际数据节点</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span> <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_db_inline</span> <span class="comment"># 分片算法名称</span></span><br><span class="line">        <span class="attr">tableStrategy:</span> <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">complex:</span> <span class="comment"># 用于多分片键的复杂分片场景</span></span><br><span class="line">            <span class="attr">shardingColumns:</span> <span class="string">user_id,order_id</span>  <span class="comment"># 分片列名称,多个逗号分隔</span></span><br><span class="line"><span class="comment">#             shardingAlgorithmName: t_order_item-class-based-algorithm   # 基于自定义类的分片算法</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_item-class-based-algorithm_spi</span> <span class="comment"># 基于 SPI 的分片算法，效果同上，建议生产环境使用 SPI</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法</span></span><br><span class="line">      <span class="attr">t_order_db_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order-complex-algorithm:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">COMPLEX_INLINE</span> <span class="comment"># 基于行表达式的复合分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_order_complex_$&#123;(user_id</span> <span class="string">+</span> <span class="string">order_id</span> <span class="string">+</span> <span class="number">1</span><span class="string">)</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">t_order_item-class-based-algorithm:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">CLASS_BASED</span> <span class="comment"># 基于自定义类的分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">strategy:</span> <span class="string">COMPLEX</span> <span class="comment"># 指定策略 STANDARD|COMPLEX|HINT ，告诉 ShardingSphere 分片算法类实现了什么策略</span></span><br><span class="line">          <span class="attr">algorithmClassName:</span> <span class="string">com.hanqf.demo.support.algorithm.OrderItemComplexAlgorithm</span> <span class="comment"># 指定算法类</span></span><br><span class="line">      <span class="attr">t_order_item-class-based-algorithm_spi:</span> <span class="comment"># SPI</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">T_ORDER_ITEM_COMPLEX</span> <span class="comment"># 基于自定义类的分片算法</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>多个分片键，<code>t_order_complex</code>表使用了内置的<code>COMPLEX_INLINE</code>算法，而<code>t_order_item_complex</code>表使用了自定义的的分片算法，spi，详见<code>src/main/resources/META-INF/services/org.apache.shardingsphere.sharding.spi.ShardingAlgorithm</code></p></li></ul><h4 id="自动分片规则">自动分片规则</h4><ul class="lvl-0"><li class="lvl-2"><p>上面介绍的都是手工配置分片规则，用于配置较为复杂的分片规则，如果分片规则比价简单，可以使用自动分片规则</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span> <span class="comment"># 分片规则配置</span></span><br><span class="line">   <span class="comment"># 绑定表：同分片键 join 时走同路由，多个逗号分隔，要求分片规则一致</span></span><br><span class="line">    <span class="attr">bindingTables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t_order,t_order_item</span></span><br><span class="line">    <span class="attr">autoTables:</span> <span class="comment"># 自动分片规则配置</span></span><br><span class="line">      <span class="attr">t_order:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line">      <span class="attr">t_order_item:</span> <span class="comment"># 逻辑表名称</span></span><br><span class="line">        <span class="attr">actualDataSources:</span> <span class="string">ds_$&#123;0..1&#125;</span> <span class="comment"># 数据源名称</span></span><br><span class="line">        <span class="attr">shardingStrategy:</span> <span class="comment"># 切分策略</span></span><br><span class="line">          <span class="attr">standard:</span> <span class="comment"># 用于单分片键的标准分片场景</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span> <span class="comment"># 分片列名称</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">mod_2</span> <span class="comment"># 自动分片算法名称</span></span><br><span class="line">        <span class="attr">keyGenerateStrategy:</span> <span class="comment"># 分布式序列策略</span></span><br><span class="line">          <span class="attr">column:</span> <span class="string">item_id</span> <span class="comment"># 自增列名称</span></span><br><span class="line">          <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span> <span class="comment"># 分布式序列算法名称</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span> <span class="comment"># 分片算法</span></span><br><span class="line">      <span class="attr">mod_2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MOD</span> <span class="comment"># 基于 MOD 的分片算法</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">sharding-count:</span> <span class="number">2</span> <span class="comment"># 分片数量，即 对 2 进行取余</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keyGenerators:</span> <span class="comment"># 分布式主键生成器</span></span><br><span class="line">      <span class="attr">snowflake:</span> <span class="comment"># 定义名称，在上面引用</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment"># 使用雪花算法，Long</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>自动分片规则需要声明数据库，但不需要声明表分配规则，其根据分片算法自动确定具体的数据表。</p></li><li class="lvl-2"><p>同时这里还配置了<code>bindingTables</code>，用来指定其分片路由一致。</p></li></ul><h3 id="广播表配置">广播表配置</h3><ul class="lvl-0"><li class="lvl-2"><p>广播表，即所有数据源都包含的表，比如字典表</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!BROADCAST</span>  <span class="comment"># 广播表配置，即所有的库中都包含指定的表，写入数据时同时写入多个库，查询时随机读一个</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dict</span>    <span class="comment"># 广播表名称，⼴播表不能配置分表逻辑，只往多个库的同⼀个表中插⼊数据。</span></span><br></pre></td></tr></table></figure><h3 id="数据加密规则">数据加密规则</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!ENCRYPT</span>    <span class="comment"># 数据加密配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span>  <span class="comment"># 加密表名称</span></span><br><span class="line">        <span class="attr">columns:</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 加密列名称</span></span><br><span class="line">            <span class="attr">cipher:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">password</span> <span class="comment"># 密文列名称</span></span><br><span class="line">              <span class="attr">encryptorName:</span> <span class="string">aes_encryptor</span> <span class="comment"># 密文列加密算法名称</span></span><br><span class="line">    <span class="comment"># 加密算法配置: https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/encrypt/</span></span><br><span class="line">    <span class="attr">encryptors:</span></span><br><span class="line">      <span class="attr">aes_encryptor:</span> <span class="comment"># 加解密算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">AES</span> <span class="comment"># 加解密算法类型</span></span><br><span class="line">        <span class="attr">props:</span> <span class="comment"># 加解密算法属性配置</span></span><br><span class="line">          <span class="attr">aes-key-value:</span> <span class="string">123456abc</span>     <span class="comment"># AES 使用的 KEY</span></span><br><span class="line">          <span class="attr">digest-algorithm-name:</span> <span class="string">SHA-1</span> <span class="comment"># AES KEY 的摘要算法</span></span><br><span class="line">      <span class="attr">md5_encryptor:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">salt:</span> <span class="number">123456</span>  <span class="comment"># 盐值（可选）</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>配置加密字段规则后，新增数据时，会自动对加密字段加密后存储，查询时也会加密后进行比较查询。</p></li></ul><h3 id="数据脱敏规则">数据脱敏规则</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!MASK</span>  <span class="comment"># 数据脱敏配置</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_user:</span>  <span class="comment"># 脱敏表名称</span></span><br><span class="line">        <span class="attr">columns:</span>  <span class="comment"># 脱敏列配置</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment"># 脱敏列名称</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">md5_mask</span> <span class="comment"># 脱敏算法名称</span></span><br><span class="line">          <span class="attr">email:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">mask_before_special_chars_mask</span></span><br><span class="line">          <span class="attr">telephone:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">keep_first_n_last_m_mask</span></span><br><span class="line">          <span class="attr">name:</span></span><br><span class="line">            <span class="attr">maskAlgorithm:</span> <span class="string">my_mask</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">maskAlgorithms:</span> <span class="comment"># 脱敏算法配置</span></span><br><span class="line">      <span class="attr">md5_mask:</span> <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MD5</span>  <span class="comment"># 脱敏算法类型，md5加密后展示</span></span><br><span class="line">      <span class="attr">mask_before_special_chars_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MASK_BEFORE_SPECIAL_CHARS</span> <span class="comment"># 在特殊字符（比如邮箱里的 @）前面做脱敏，示例：myemail@example.com → *******@example.com</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">special-chars:</span> <span class="string">&#x27;@&#x27;</span>  <span class="comment"># 遇到 @ 之前的部分做脱敏</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span>   <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">keep_first_n_last_m_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">KEEP_FIRST_N_LAST_M</span> <span class="comment"># 保留前 n 位和后 m 位，其余用替换字符填充，示例：13812345678 → 138****5678</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">first-n:</span> <span class="number">3</span>     <span class="comment"># 保留前 3 位</span></span><br><span class="line">          <span class="attr">last-m:</span> <span class="number">4</span>      <span class="comment"># 保留后 4 位</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment"># 脱敏字符用 * 代替</span></span><br><span class="line">      <span class="attr">my_mask:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">MY_CUSTOM_MASK</span>  <span class="comment"># 自定义脱敏算法名称</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">replace-char:</span> <span class="string">&quot;#&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>被脱敏的字段在查询时会进行脱敏展示。</p></li><li class="lvl-2"><p>这里还自定义了脱敏算法，spi，详见<code>src/main/resources/META-INF/services/org.apache.shardingsphere.mask.spi.MaskAlgorithm</code></p></li></ul><h3 id="单表规则">单表规则</h3><ul class="lvl-0"><li class="lvl-2"><p>即不需要进行分库分表的表</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SINGLE</span> <span class="comment"># 单表规则配置，单表规则优先级高于分库分表规则</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="comment"># MySQL 风格</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ds_0.t_address</span> <span class="comment"># 加载指定单表</span></span><br></pre></td></tr></table></figure><h3 id="属性配置">属性配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 属性配置：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/props/</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span> <span class="comment"># 控制台打印改写后的 SQL，便于排错，默认为 false</span></span><br><span class="line">  <span class="attr">check-table-metadata-enabled:</span> <span class="literal">false</span> <span class="comment"># 在程序启动和更新时，是否检查分片元数据的结构一致性，默认为 false</span></span><br></pre></td></tr></table></figure><h3 id="事务配置">事务配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/transaction/</span></span><br><span class="line"><span class="attr">transaction:</span></span><br><span class="line">  <span class="attr">defaultType:</span> <span class="string">LOCAL</span> <span class="comment"># 默认事务类型就是 LOCAL</span></span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p>springboot3 集成 shardingsphere-JDBC5.5.2 与 springboot2 不同，不再提供 <code>springboot-starter-shardingsphere</code>，相关配置也采用了独立的配置文件。</p></li><li class="lvl-2"><p>代码中包含两个库中使用到的数据库脚本，<code>shardingsphere-demo/shardingsphere-demo-01/sql</code></p></li><li class="lvl-2"><p>具体使用效果可以通过项目中提供的单元测试类进行验证。</p></li><li class="lvl-2"><p>springboot3 集成 shardingsphere-JDBC5.5.2 目前<a href="https://shardingsphere.apache.org/document/5.5.2/cn/user-manual/shardingsphere-jdbc/yaml-config/jdbc-driver/spring-boot/">尚不支持 <code>XA</code> 分布式事务</a>，这是因为从 <code>Spring Boot 3.x</code> 开始，就全面迁移到了 <code>Jakarta EE 9+</code>，也就是说，所有 <code>javax.*</code> 的类都迁移到 <code>jakarta.*</code> 命名空间(事务、JPA、Servlet 等 API 都受影响)，而 <code>ShardingSphere 5.5</code> 中的 XA 事务主要依赖 <code>Atomikos</code> 或 <code>Narayana</code> 等第三方分布式事务管理器，这些库目前大部分还是基于 <code>javax.transaction.*</code> 的 API。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 SpringBoot3.5.5 + ShardingSphere-JDBC5.5.2 分库分表的使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://shardingsphere.apache.org/index_zh.html&quot;&gt;ShardingSphere官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hanqunfeng/springbootchapter/tree/master/springboot3-demo/shardingsphere-demo/shardingsphere-demo-01&quot;&gt;本文项目代码Github地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/"/>
    
    <category term="sharding-sphere" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/springboot/sharding-sphere/"/>
    
    
    <category term="springboot" scheme="https://blog.hanqunfeng.com/tags/springboot/"/>
    
    <category term="sharding-sphere" scheme="https://blog.hanqunfeng.com/tags/sharding-sphere/"/>
    
  </entry>
  
  <entry>
    <title>K8S UI 之 Rancher</title>
    <link href="https://blog.hanqunfeng.com/2025/07/25/k8s-ui-rancher/"/>
    <id>https://blog.hanqunfeng.com/2025/07/25/k8s-ui-rancher/</id>
    <published>2025-07-25T14:33:05.000Z</published>
    <updated>2025-09-15T06:26:27.684Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 UI 管理工具 Rancher ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://ranchermanager.docs.rancher.com/zh/">Rancher 官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/rancher/rancher">Rancher Github</a></p></li></ul><span id="more"></span><h2 id="Rancher-简介">Rancher 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>Rancher 是一个 开源的 Kubernetes 管理平台，用于帮助用户部署、管理和运维多个 Kubernetes 集群，具有易用的 Web UI、权限控制、集群监控、应用管理等功能，广泛应用于企业的云原生平台建设中。</p></li></ul><h2 id="部署-Rancher">部署 Rancher</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://ranchermanager.docs.rancher.com/zh/getting-started/quick-start-guides/deploy-rancher-manager/helm-cli#%E4%BD%BF%E7%94%A8-helm-%E6%9D%A5%E5%AE%89%E8%A3%85-rancher">使用 Helm 安装 Rancher</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 rancher 的 Helm 仓库</span></span><br><span class="line">helm repo add rancher-latest https://releases.rancher.com/server-charts/latest</span><br><span class="line"><span class="comment"># 更新 rancher 的 Helm 仓库</span></span><br><span class="line">helm repo update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 rancher 的版本</span></span><br><span class="line">$ helm search repo rancher -l | <span class="built_in">head</span></span><br><span class="line">NAME                  CHART VERSIONAPP VERSIONDESCRIPTION</span><br><span class="line">rancher-latest/rancher2.11.3       v2.11.3    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.11.2       v2.11.2    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.11.1       v2.11.1    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.11.0       v2.11.0    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.10.3       v2.10.3    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.10.2       v2.10.2    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.10.1       v2.10.1    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.10.0       v2.10.0    Install Rancher Server to manage Kubernetes clu...</span><br><span class="line">rancher-latest/rancher2.9.3        v2.9.3     Install Rancher Server to manage Kubernetes clu...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建命名空间</span></span><br><span class="line">kubectl create namespace cattle-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建证书，证书是机构颁发的</span></span><br><span class="line">kubectl create secret tls tls-rancher-ingress \</span><br><span class="line">  --key=nginx_ssl/nginx.hanqunfeng.com.key \</span><br><span class="line">  --cert=nginx_ssl/nginx.hanqunfeng.com.pem \</span><br><span class="line">  -n cattle-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Rancher  --version v2.11.3 可以指定版本，默认最新版</span></span><br><span class="line">helm install rancher rancher-latest/rancher \</span><br><span class="line">  --namespace cattle-system \</span><br><span class="line">  --create-namespace \</span><br><span class="line">  --<span class="built_in">set</span> hostname=rancher.hanqunfeng.com \</span><br><span class="line">  --<span class="built_in">set</span> ingress.tls.source=secret \</span><br><span class="line">  --<span class="built_in">set</span> replicas=3 \</span><br><span class="line">  --<span class="built_in">set</span> bootstrapPassword=rancher#2025</span><br><span class="line"></span><br><span class="line"><span class="comment">## 参数说明</span></span><br><span class="line"><span class="comment"># --set hostname=rancher.hanqunfeng.com 设置 rancher 的域名</span></span><br><span class="line"><span class="comment"># --set ingress.tls.source=secret 配置 rancher 的证书，名称为 tls-rancher-ingress</span></span><br><span class="line"><span class="comment"># --set replicas=3 设置 rancher 的副本数</span></span><br><span class="line"><span class="comment"># --set bootstrapPassword=rancher#2025 设置 rancher 的初始密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 不过执行上面的安装命令会报错，应该是当前的 rancher 版本不支持 Kubernetes v1.33.2</span></span><br><span class="line">Error: INSTALLATION FAILED: chart requires kubeVersion: &lt; 1.33.0-0 <span class="built_in">which</span> is incompatible with Kubernetes v1.33.2</span><br><span class="line"></span><br><span class="line"><span class="comment">## 解决办法</span></span><br><span class="line"><span class="comment"># 下载并解压 rancher 安装包</span></span><br><span class="line">helm pull rancher-latest/rancher --untar --untardir ./</span><br><span class="line"><span class="comment"># 修改其中的 Chart.yaml 文件</span></span><br><span class="line">kubeVersion: &lt; 1.33.0-0 ==&gt; kubeVersion: &lt; 1.34.0-0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 rancher</span></span><br><span class="line">helm install rancher rancher \</span><br><span class="line">  --namespace cattle-system \</span><br><span class="line">  --create-namespace \</span><br><span class="line">  --<span class="built_in">set</span> hostname=rancher.hanqunfeng.com \</span><br><span class="line">  --<span class="built_in">set</span> ingress.tls.source=secret \</span><br><span class="line">  --<span class="built_in">set</span> replicas=3 \</span><br><span class="line">  --<span class="built_in">set</span> bootstrapPassword=rancher#2025</span><br><span class="line"><span class="comment">## 输出</span></span><br><span class="line">NAME: rancher</span><br><span class="line">LAST DEPLOYED: Thu Jul 24 23:55:24 2025</span><br><span class="line">NAMESPACE: cattle-system</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">Rancher Server has been installed.</span><br><span class="line"></span><br><span class="line">NOTE: Rancher may take several minutes to fully initialize. Please standby <span class="keyword">while</span> Certificates are being issued, Containers are started and the Ingress rule comes up.</span><br><span class="line"></span><br><span class="line">Check out our docs at https://rancher.com/docs/</span><br><span class="line"></span><br><span class="line">If you provided your own bootstrap password during installation, browse to https://rancher.hanqunfeng.com to get started.</span><br><span class="line"></span><br><span class="line">If this is the first time you installed Rancher, get started by running this <span class="built_in">command</span> and clicking the URL it generates:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> https://rancher.hanqunfeng.com/dashboard/?setup=$(kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=<span class="string">&#x27;&#123;&#123;.data.bootstrapPassword|base64decode&#125;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To get just the bootstrap password on its own, run:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=<span class="string">&#x27;&#123;&#123;.data.bootstrapPassword|base64decode&#125;&#125;&#123;&#123; &quot;\n&quot; &#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Happy Containering!</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看创建的资源</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ k get all,ing -n cattle-system</span><br><span class="line">NAME                                   READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod/helm-operation-8257k               0/2     Completed   0          11m</span><br><span class="line">pod/helm-operation-g8blp               0/2     Completed   0          12m</span><br><span class="line">pod/helm-operation-hwpbp               0/2     Completed   0          10m</span><br><span class="line">pod/helm-operation-qbs5n               0/2     Completed   0          10m</span><br><span class="line">pod/helm-operation-wlptb               0/2     Completed   0          13m</span><br><span class="line">pod/rancher-56689b7d8c-v7hpd           1/1     Running     0          21m</span><br><span class="line">pod/rancher-56689b7d8c-xnrbf           1/1     Running     0          21m</span><br><span class="line">pod/rancher-56689b7d8c-xvqgs           1/1     Running     0          21m</span><br><span class="line">pod/rancher-webhook-5fd5fc44f9-8xwjk   1/1     Running     0          11m</span><br><span class="line"></span><br><span class="line">NAME                               TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">service/imperative-api-extension   ClusterIP   10.96.188.28   &lt;none&gt;        6666/TCP         15m</span><br><span class="line">service/rancher                    ClusterIP   10.96.21.41    &lt;none&gt;        80/TCP,443/TCP   21m</span><br><span class="line">service/rancher-webhook            ClusterIP   10.96.85.153   &lt;none&gt;        443/TCP          11m</span><br><span class="line"></span><br><span class="line">NAME                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/rancher           3/3     3            3           21m</span><br><span class="line">deployment.apps/rancher-webhook   1/1     1            1           11m</span><br><span class="line"></span><br><span class="line">NAME                                         DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/rancher-56689b7d8c           3         3         3       21m</span><br><span class="line">replicaset.apps/rancher-webhook-5fd5fc44f9   1         1         1       11m</span><br><span class="line"></span><br><span class="line">NAME                                CLASS   HOSTS                    ADDRESS         PORTS     AGE</span><br><span class="line">ingress.networking.k8s.io/rancher   nginx   rancher.hanqunfeng.com   10.211.55.201   80, 443   21m</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>浏览器访问：<a href="https://rancher.hanqunfeng.com">https://rancher.hanqunfeng.com</a>，输入上面设置的密码即可。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果忘记初始密码可以通过如下命令查看密码</span></span><br><span class="line">kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=<span class="string">&#x27;&#123;&#123;.data.bootstrapPassword|base64decode&#125;&#125;&#123;&#123;&quot;\n&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/rHDDMN.png" alt=""></p><h2 id="卸载-Rancher">卸载 Rancher</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载 Rancher</span></span><br><span class="line">helm uninstall rancher -n cattle-system</span><br><span class="line"><span class="comment"># 删除 cattle-system 命名空间</span></span><br><span class="line">kubectl delete namespace cattle-system</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 UI 管理工具 Rancher ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://ranchermanager.docs.rancher.com/zh/&quot;&gt;Rancher 官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rancher/rancher&quot;&gt;Rancher Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S UI 之 Kubesphere</title>
    <link href="https://blog.hanqunfeng.com/2025/07/24/k8s-ui-kubesphere/"/>
    <id>https://blog.hanqunfeng.com/2025/07/24/k8s-ui-kubesphere/</id>
    <published>2025-07-24T14:33:05.000Z</published>
    <updated>2025-07-24T13:38:25.076Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 UI 管理工具 Kubesphere，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubesphere.io/zh/">Kubesphere 官网</a></p></li></ul><span id="more"></span><h2 id="Kubesphere-简介">Kubesphere 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>KubeSphere 是一个基于 Kubernetes 构建的 企业级多租户容器管理平台，提供了一套完整的容器平台解决方案，让用户以图形化方式轻松使用 Kubernetes 和 DevOps 能力，不需要深入理解复杂的底层架构。</p></li><li class="lvl-2"><p>与 K8S 的 Dashboard 相比具有如下优势：</p></li></ul><table><thead><tr><th>功能 / 特性</th><th>Kubernetes Dashboard</th><th><strong>KubeSphere</strong></th></tr></thead><tbody><tr><td>✅ 基础资源管理</td><td>✅ 支持</td><td>✅ 更丰富，支持更多细粒度控制</td></tr><tr><td>👥 多租户支持</td><td>❌ 无</td><td>✅ 内建企业级多租户、空间（Workspace）隔离</td></tr><tr><td>🔐 身份认证与权限控制</td><td>⚠️ 需手动整合 RBAC</td><td>✅ 内建用户管理、角色、团队、企业组织架构</td></tr><tr><td>🌐 多集群支持</td><td>❌ 不支持</td><td>✅ 支持跨区域多集群统一管理</td></tr><tr><td>🚀 DevOps（CI/CD 流水线）</td><td>❌ 无</td><td>✅ 内置图形化流水线（Jenkins 驱动）</td></tr><tr><td>📊 监控与指标（Prometheus）</td><td>❌ 手动安装</td><td>✅ 内置，图形化展示 Pod/Node/服务等监控数据</td></tr><tr><td>📁 日志查询与分析（EFK）</td><td>❌ 无</td><td>✅ 内建 Fluent Bit + Elasticsearch + Kibana</td></tr><tr><td>💡 微服务治理（Istio）</td><td>❌ 无</td><td>✅ 可选启用，支持服务拓扑、灰度发布、流量治理等</td></tr><tr><td>🧰 应用商店（Helm 可视化部署）</td><td>❌ 无</td><td>✅ 支持 Helm 应用市场，点击即可安装常见中间件</td></tr><tr><td>🔌 插件架构</td><td>❌ 无</td><td>✅ 支持模块按需启用/关闭</td></tr><tr><td>🧪 容器镜像仓库（Harbor）</td><td>❌ 无</td><td>✅ 可集成或内建 Harbor 容器仓库</td></tr><tr><td>📦 安装复杂度</td><td>✅ 简单</td><td>⚠️ 略复杂，但可按需启用模块</td></tr></tbody></table><h2 id="部署-Kubesphere">部署 Kubesphere</h2><ul class="lvl-0"><li class="lvl-2"><p>Kubesphere 对系统资源有最低要求，具体参考<a href="https://kubesphere.io/zh/docs/v4.1/03-installation-and-upgrade/01-preparations/01-supported-k8s/">官网:环境要求</a></p></li><li class="lvl-2"><p>部署</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果无法访问 charts.kubesphere.io, 可将 charts.kubesphere.io 替换为 charts.kubesphere.com.cn</span></span><br><span class="line">helm upgrade --install -n kubesphere-system --create-namespace ks-core https://charts.kubesphere.io/main/ks-core-1.1.4.tgz --debug --<span class="built_in">wait</span></span><br><span class="line"><span class="comment">## 安装成功后会输出如下信息：</span></span><br><span class="line">NOTES:</span><br><span class="line">Thank you <span class="keyword">for</span> choosing KubeSphere Helm Chart.</span><br><span class="line"></span><br><span class="line">Please be patient and <span class="built_in">wait</span> <span class="keyword">for</span> several seconds <span class="keyword">for</span> the KubeSphere deployment to complete.</span><br><span class="line"></span><br><span class="line">1. Wait <span class="keyword">for</span> Deployment Completion</span><br><span class="line"></span><br><span class="line">    Confirm that all KubeSphere components are running by executing the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    kubectl get pods -n kubesphere-system</span><br><span class="line">2. Access the KubeSphere Console</span><br><span class="line"></span><br><span class="line">    Once the deployment is complete, you can access the KubeSphere console using the following URL:</span><br><span class="line"></span><br><span class="line">    http://10.211.55.11:30880</span><br><span class="line"></span><br><span class="line">3. Login to KubeSphere Console</span><br><span class="line"></span><br><span class="line">    Use the following credentials to <span class="built_in">log</span> <span class="keyword">in</span>:</span><br><span class="line"></span><br><span class="line">    Account: admin</span><br><span class="line">    Password: P@88w0rd</span><br><span class="line"></span><br><span class="line">NOTE: It is highly recommended to change the default password immediately after the first login.</span><br><span class="line">For additional information and details, please visit https://kubesphere.io.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有组件</span></span><br><span class="line">$ kubectl get pod,deploy,svc -n kubesphere-system</span><br><span class="line">NAME                                         READY   STATUS    RESTARTS       AGE</span><br><span class="line">pod/extensions-museum-ffd8bd9d8-fvcw4        1/1     Running   1 (28m ago)    5h5m</span><br><span class="line">pod/ks-apiserver-7b4479d5f5-2k4c9            1/1     Running   2 (27m ago)    5h5m</span><br><span class="line">pod/ks-console-6bd9b9f5d9-xqlzs              1/1     Running   0              26m</span><br><span class="line">pod/ks-controller-manager-547f9fc8c9-5b88z   1/1     Running   10 (27m ago)   5h5m</span><br><span class="line"></span><br><span class="line">NAME                                    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/extensions-museum       1/1     1            1           5h14m</span><br><span class="line">deployment.apps/ks-apiserver            1/1     1            1           5h14m</span><br><span class="line">deployment.apps/ks-console              1/1     1            1           5h14m</span><br><span class="line">deployment.apps/ks-controller-manager   1/1     1            1           5h14m</span><br><span class="line"></span><br><span class="line">NAME                            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">service/extensions-museum       ClusterIP   10.96.95.71    &lt;none&gt;        443/TCP        5h14m</span><br><span class="line">service/ks-apiserver            ClusterIP   10.96.12.106   &lt;none&gt;        80/TCP         5h14m</span><br><span class="line">service/ks-console              NodePort    10.96.55.165   &lt;none&gt;        80:30880/TCP   5h14m</span><br><span class="line">service/ks-controller-manager   ClusterIP   10.96.13.243   &lt;none&gt;        443/TCP        5h14m</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>浏览器访问：<a href="http://10.211.55.11:30880">http://10.211.55.11:30880</a>，输入账号密码：admin/P@88w0rd，首次登录需要修改密码。</p></li></ul><h2 id="配置-ingress">配置 ingress</h2><ul class="lvl-0"><li class="lvl-2"><p>创建证书</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret tls nginx-tls \</span><br><span class="line">    --key=nginx_ssl/nginx.hanqunfeng.com.key \</span><br><span class="line">    --cert=nginx_ssl/nginx.hanqunfeng.com.pem \</span><br><span class="line">    -n kubesphere-system</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建 ingress</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubesphere-ingress.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubesphere-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubesphere-system</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/force-ssl-redirect:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubesphere.hanqunfeng.com</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">nginx-tls</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">kubesphere.hanqunfeng.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">ks-console</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h2 id="卸载-Kubesphere">卸载 Kubesphere</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm uninstall ks-core -n kubesphere-system</span><br><span class="line">kubectl delete namespace kubesphere-system</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 UI 管理工具 Kubesphere，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubesphere.io/zh/&quot;&gt;Kubesphere 官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S UI 之 Dashboard</title>
    <link href="https://blog.hanqunfeng.com/2025/07/24/k8s-ui-dashboard/"/>
    <id>https://blog.hanqunfeng.com/2025/07/24/k8s-ui-dashboard/</id>
    <published>2025-07-24T13:33:05.000Z</published>
    <updated>2025-07-24T13:37:46.313Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 UI 管理工具 Dashboard，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/web-ui-dashboard/">Dashboard k8s介绍</a></p></li></ul><span id="more"></span><h2 id="Dashboard-简介">Dashboard 简介</h2><ul class="lvl-0"><li class="lvl-2"><p>Dashboard 是基于网页的 Kubernetes 用户界面。</p></li><li class="lvl-2"><p>你可以使用 Dashboard 将容器应用部署到 Kubernetes 集群中，也可以对容器应用排错，还能管理集群资源。</p></li><li class="lvl-2"><p>你可以使用 Dashboard 获取运行在集群中的应用的概览信息，也可以创建或者修改 Kubernetes 资源 （如 Deployment、Job、DaemonSet 等等）。 例如，你可以对 Deployment 实现弹性伸缩、发起滚动升级、重启 Pod 或者使用向导创建新的应用。</p></li><li class="lvl-2"><p>Dashboard 同时展示了 Kubernetes 集群中的资源状态信息和所有报错信息。</p></li></ul><h2 id="部署-Dashboard">部署 Dashboard</h2><ul class="lvl-0"><li class="lvl-2"><p>Kubernetes Dashboard 目前仅支持基于 Helm 的安装，因为它速度更快， 并且可以让我们更好地控制 Dashboard 运行所需的所有依赖项。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 kubernetes-dashboard 仓库</span></span><br><span class="line">helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/</span><br><span class="line"><span class="comment"># 使用 kubernetes-dashboard Chart 部署名为 `kubernetes-dashboard` 的 Helm Release</span></span><br><span class="line">$ helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard \</span><br><span class="line">    --create-namespace \</span><br><span class="line">    --namespace kubernetes-dashboard</span><br><span class="line"><span class="comment">## 输出</span></span><br><span class="line">Release <span class="string">&quot;kubernetes-dashboard&quot;</span> does not exist. Installing it now.</span><br><span class="line">NAME: kubernetes-dashboard</span><br><span class="line">LAST DEPLOYED: Sun Jul  6 00:40:02 2025</span><br><span class="line">NAMESPACE: kubernetes-dashboard</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">*************************************************************************************************</span><br><span class="line">*** PLEASE BE PATIENT: Kubernetes Dashboard may need a few minutes to get up and become ready ***</span><br><span class="line">*************************************************************************************************</span><br><span class="line"></span><br><span class="line">Congratulations! You have just installed Kubernetes Dashboard <span class="keyword">in</span> your cluster.</span><br><span class="line"></span><br><span class="line">To access Dashboard run:</span><br><span class="line">  kubectl -n kubernetes-dashboard port-forward svc/kubernetes-dashboard-kong-proxy 8443:443</span><br><span class="line"></span><br><span class="line">NOTE: In <span class="keyword">case</span> port-forward <span class="built_in">command</span> does not work, make sure that kong service name is correct.</span><br><span class="line">      Check the services <span class="keyword">in</span> Kubernetes Dashboard namespace using:</span><br><span class="line">        kubectl -n kubernetes-dashboard get svc</span><br><span class="line"></span><br><span class="line">Dashboard will be available at:</span><br><span class="line">  https://localhost:8443</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 helm 安装的包，注意指定 命名空间</span></span><br><span class="line">$ helm list -n kubernetes-dashboard</span><br><span class="line">NAME                NAMESPACE           REVISIONUPDATED                                STATUS  CHART                      APP VERSION</span><br><span class="line">kubernetes-dashboardkubernetes-dashboard1       2025-07-24 14:01:06.678570212 +0800 CSTdeployedkubernetes-dashboard-7.13.0</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看启动的资源</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n kubernetes-dashboard get all</span><br><span class="line">NAME                                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/kubernetes-dashboard-api-568f47ddd7-tx6f8              1/1     Running   0          20m</span><br><span class="line">pod/kubernetes-dashboard-auth-645b944589-t6v2m             1/1     Running   0          20m</span><br><span class="line">pod/kubernetes-dashboard-kong-648658d45f-7qsm9             1/1     Running   0          20m</span><br><span class="line">pod/kubernetes-dashboard-metrics-scraper-547874fcf-87mrv   1/1     Running   0          20m</span><br><span class="line">pod/kubernetes-dashboard-web-7796b9fbbb-xsdlw              1/1     Running   0          20m</span><br><span class="line"></span><br><span class="line">NAME                                           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">service/kubernetes-dashboard-api               ClusterIP   10.96.149.59    &lt;none&gt;        8000/TCP   20m</span><br><span class="line">service/kubernetes-dashboard-auth              ClusterIP   10.96.145.120   &lt;none&gt;        8000/TCP   20m</span><br><span class="line">service/kubernetes-dashboard-kong-proxy        ClusterIP   10.96.171.40    &lt;none&gt;        443/TCP    20m</span><br><span class="line">service/kubernetes-dashboard-metrics-scraper   ClusterIP   10.96.79.48     &lt;none&gt;        8000/TCP   20m</span><br><span class="line">service/kubernetes-dashboard-web               ClusterIP   10.96.247.143   &lt;none&gt;        8000/TCP   20m</span><br><span class="line"></span><br><span class="line">NAME                                                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/kubernetes-dashboard-api               1/1     1            1           20m</span><br><span class="line">deployment.apps/kubernetes-dashboard-auth              1/1     1            1           20m</span><br><span class="line">deployment.apps/kubernetes-dashboard-kong              1/1     1            1           20m</span><br><span class="line">deployment.apps/kubernetes-dashboard-metrics-scraper   1/1     1            1           20m</span><br><span class="line">deployment.apps/kubernetes-dashboard-web               1/1     1            1           20m</span><br><span class="line"></span><br><span class="line">NAME                                                             DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/kubernetes-dashboard-api-568f47ddd7              1         1         1       20m</span><br><span class="line">replicaset.apps/kubernetes-dashboard-auth-645b944589             1         1         1       20m</span><br><span class="line">replicaset.apps/kubernetes-dashboard-kong-648658d45f             1         1         1       20m</span><br><span class="line">replicaset.apps/kubernetes-dashboard-metrics-scraper-547874fcf   1         1         1       20m</span><br><span class="line">replicaset.apps/kubernetes-dashboard-web-7796b9fbbb              1         1         1       20m</span><br></pre></td></tr></table></figure><div class="tips"><p><em><strong>小贴士</strong></em></p><ul class="lvl-1"><li class="lvl-2">第一次创建kubernetes-dashboard时，有几个 pod 一直处于 ContainerCreating 状态，通过 describe 命令，查看 pod 的状态发现报如下错误：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning  FailedCreatePodSandBox  4m52s                kubelet            Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network <span class="keyword">for</span> sandbox <span class="string">&quot;cfa0b6062fabd77353e6d832ab0e62f96787b4d59346d9e57c28dbc0e19a3127&quot;</span>: plugin <span class="built_in">type</span>=<span class="string">&quot;calico&quot;</span> failed (add): error getting ClusterInformation: connection is unauthorized: Unauthorized</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2"><p>这条错误说明：</p><ul class="lvl-3"><li class="lvl-6">容器网络插件（CNI）使用的是 Calico</li><li class="lvl-6">Calico 在尝试获取 Kubernetes 集群的 ClusterInformation 时 认证失败</li><li class="lvl-6">错误关键词：connection is unauthorized: Unauthorized</li></ul></li><li class="lvl-2"><p>不确定导致这一问题的原因，我的解决方法是重新安装 Calico</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f calico.yaml</span><br><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure></div><ul class="lvl-0"><li class="lvl-2"><p>开放代理端口</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在哪个机器上运行的命令，开放的就是哪个机器的端口</span></span><br><span class="line">kubectl -n kubernetes-dashboard port-forward svc/kubernetes-dashboard-kong-proxy 8443:443</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>访问：在开放代理端口的机器上使用浏览器访问：<a href="https://localhost:8443">https://localhost:8443</a></p></li></ul><h2 id="登录帐号">登录帐号</h2><ul class="lvl-0"><li class="lvl-2"><p>创建管理员用户</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dashboard-adminuser.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span>                    <span class="comment"># 创建 ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span>                      <span class="comment"># SA 名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span>       <span class="comment"># SA 所在命名空间</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span>                <span class="comment"># 集群角色绑定</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span>   <span class="comment"># 集群角色组，这个是 k8s 内置的</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span>                     <span class="comment"># 集群角色</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span>                   <span class="comment"># 集群管理员角色</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span>                  <span class="comment"># 服务账号</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span>                      <span class="comment"># 服务账号名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span>       <span class="comment"># 服务账号命名空间</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建并获取token</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f dashboard-adminuser.yaml</span><br><span class="line"><span class="comment"># 获取token，该 token 有效期为 1 小时，token格式为 jwt，可以通过 jwt.io 解析</span></span><br><span class="line">kubectl -n kubernetes-dashboard create token admin-user</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>获取长效token</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dashboard-secret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/service-account.name:</span> <span class="string">&quot;admin-user&quot;</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">kubernetes.io/service-account-token</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f dashboard-secret.yaml</span><br><span class="line"><span class="comment"># 该命令获取token，永不过期，将其保存下来</span></span><br><span class="line">kubectl get secret admin-user -n kubernetes-dashboard -o jsonpath=<span class="string">&quot;&#123;.data.token&#125;&quot;</span> | <span class="built_in">base64</span> -d</span><br></pre></td></tr></table></figure><h2 id="卸载-kubernetes-dashboard">卸载 kubernetes-dashboard</h2><ul class="lvl-0"><li class="lvl-2"><p>卸载 kubernetes-dashboard</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm uninstall kubernetes-dashboard --namespace kubernetes-dashboard</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>清理用户信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard delete serviceaccount admin-user</span><br><span class="line">kubectl -n kubernetes-dashboard delete clusterrolebinding admin-user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以直接删除 命名空间，删除命名空间会同时删除所有资源</span></span><br><span class="line">kubectl delete namespace kubernetes-dashboard</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 UI 管理工具 Dashboard，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/web-ui-dashboard/&quot;&gt;Dashboard k8s介绍&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 Tools</title>
    <link href="https://blog.hanqunfeng.com/2025/07/24/k8s-tools/"/>
    <id>https://blog.hanqunfeng.com/2025/07/24/k8s-tools/</id>
    <published>2025-07-24T13:30:05.000Z</published>
    <updated>2025-08-26T02:21:30.959Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-3"><p>K8S 的 Tools: crictl、nerdctl、helm ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li></ul><span id="more"></span><h2 id="crictl-命令">crictl 命令</h2><ul class="lvl-0"><li class="lvl-2"><p><code>crictl</code> 是k8s官方出品的一个命令行工具，用于与 containerd 进行通信。</p></li><li class="lvl-2"><p><code>crictl</code> 命令默认需要 sudo 权限，如果不想每次都加 sudo，可以将用户加入 containerd 的 socket 权限组</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># containerd 的默认 socket 是 /var/run/containerd/containerd.sock</span></span><br><span class="line">$ <span class="built_in">ls</span> -l /var/run/containerd/containerd.sock</span><br><span class="line">srw-rw---- 1 root root 0 7月   1 10:57 /var/run/containerd/containerd.sock</span><br><span class="line"><span class="comment"># 如果 group 是 root：你可以改为其它组，比如 docker</span></span><br><span class="line"><span class="comment"># 如果 docker 组不存在则创建</span></span><br><span class="line"><span class="built_in">sudo</span> groupadd docker</span><br><span class="line"><span class="comment"># 修改文件所属组为 docker</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chgrp</span> docker /var/run/containerd/containerd.sock</span><br><span class="line"><span class="comment"># 为组添加读写权限</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> g+rw /var/run/containerd/containerd.sock</span><br><span class="line"><span class="comment"># 添加用户到 docker 组</span></span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">newgrp docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时虽然已经可以不用 sudo 了，但是一旦重启 containerd 就会重新回到 root 权限，因此需要添加如下配置</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/systemd/system/containerd.service.d/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/systemd/system/containerd.service.d/override.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">ExecStartPost=/bin/bash -c &#x27;chmod 660 /run/containerd/containerd.sock &amp;&amp; chgrp docker /run/containerd/containerd.sock&#x27;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart containerd</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>crictl</code> 命令的使用方式比较类似<code>docker</code>命令</p></li></ul><table><thead><tr><th>操作</th><th><code>docker</code> 命令</th><th><code>crictl</code> 命令</th><th>说明</th></tr></thead><tbody><tr><td>查看正在运行的容器</td><td><code>docker ps</code></td><td><code>crictl ps</code></td><td></td></tr><tr><td>查看所有容器（包括已停止）</td><td><code>docker ps -a</code></td><td><code>crictl ps -a</code></td><td></td></tr><tr><td>查看镜像</td><td><code>docker images</code></td><td><code>crictl images</code></td><td></td></tr><tr><td>查看容器日志</td><td><code>docker logs &lt;container_id&gt;</code></td><td><code>crictl logs &lt;container_id&gt;</code></td><td></td></tr><tr><td>进入容器交互</td><td><code>docker exec -it &lt;id&gt; sh</code></td><td><code>crictl exec -it &lt;id&gt; sh</code></td><td></td></tr><tr><td>查看容器详细信息</td><td><code>docker inspect &lt;container_id&gt;</code></td><td><code>crictl inspect &lt;container_id&gt;</code></td><td></td></tr><tr><td>查看 Pod 详细信息</td><td>❌（不支持）</td><td><code>crictl inspectp &lt;pod_id&gt;</code></td><td>K8s 专属</td></tr><tr><td>删除容器</td><td><code>docker rm &lt;container_id&gt;</code></td><td><code>crictl rm &lt;container_id&gt;</code></td><td></td></tr><tr><td>删除镜像</td><td><code>docker rmi &lt;image_id&gt;</code></td><td><code>crictl rmi &lt;image_id&gt;</code></td><td></td></tr><tr><td>拉取镜像</td><td><code>docker pull nginx</code></td><td><code>crictl pull nginx</code></td><td></td></tr><tr><td>运行容器（非 K8s 场景）</td><td><code>docker run -it nginx</code></td><td>❌（不支持）</td><td><code>crictl</code> 不运行容器，仅调试现有容器</td></tr><tr><td>列出容器运行时信息</td><td><code>docker info</code></td><td><code>crictl info</code></td><td></td></tr><tr><td>查看容器运行状态</td><td><code>docker stats</code></td><td><code>crictl stats</code></td><td>简要版</td></tr><tr><td>设置配置文件</td><td><code>~/.docker/config.json</code></td><td><code>/etc/crictl.yaml</code></td><td>如设置 endpoint</td></tr></tbody></table><h2 id="nerdctl">nerdctl</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://github.com/containerd/nerdctl">nerdctl</a> 是一个 兼容 Docker CLI 的容器命令行工具，用于管理 containerd 容器运行时。</p></li><li class="lvl-2"><p>它是 containerd 官方子项目，由 CNCF 维护，其命令语法与 Docker CLI 兼容，目标是让习惯 Docker 的用户也能轻松使用 containerd。</p></li><li class="lvl-2"><p>安装 nerdctl</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 下载最新版本</span></span><br><span class="line">VERSION=2.1.3</span><br><span class="line">wget https://github.com/containerd/nerdctl/releases/download/v<span class="variable">$&#123;VERSION&#125;</span>/nerdctl-<span class="variable">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 解压</span></span><br><span class="line">tar -xvf nerdctl-<span class="variable">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 移动到系统 PATH</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> nerdctl /usr/local/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># nerdctl 需要 sudo 权限</span></span><br><span class="line"><span class="comment">## 为 sudo 添加 PATH</span></span><br><span class="line"><span class="built_in">sudo</span> visudo</span><br><span class="line"><span class="comment">## 找到这一行</span></span><br><span class="line">Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line"><span class="comment">## 修改为，即将 nerdctl 所在的目录加入 PATH</span></span><br><span class="line">Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.测试</span></span><br><span class="line"><span class="comment">## 查看版本</span></span><br><span class="line"><span class="built_in">sudo</span> nerdctl version</span><br><span class="line"><span class="comment">## 列出容器，--namespace k8s.io 表示查看 k8s 中的容器</span></span><br><span class="line"><span class="built_in">sudo</span> nerdctl ps --namespace k8s.io</span><br><span class="line"></span><br><span class="line"><span class="comment">## 如果不想每次都加上 --namespace k8s.io，可以设置别名</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;alias kps=&#x27;sudo nerdctl --namespace=k8s.io ps&#x27;&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment">## 测试</span></span><br><span class="line">kps</span><br></pre></td></tr></table></figure><h2 id="Helm">Helm</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="https://helm.sh/zh/docs/">官网文档</a></p></li><li class="lvl-2"><p>Helm 是 Kubernetes 的包管理器，类似于 Linux 下的包管理工具如 yum、apt 等。可以方便的将之前打包好的 yaml 文件部署到 Kunernetes 上。</p></li></ul><h3 id="Helm的安装">Helm的安装</h3><ul class="lvl-0"><li class="lvl-2"><p>官网<a href="https://helm.sh/zh/docs/intro/install/">安装方法</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://get.helm.sh/helm-v3.17.4-linux-amd64.tar.gz</span><br><span class="line">tar -zxvf helm-v3.17.4-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> linux-amd64/helm /usr/local/bin/helm</span><br><span class="line">$ helm version</span><br><span class="line">version.BuildInfo&#123;Version:<span class="string">&quot;v3.17.4&quot;</span>, GitCommit:<span class="string">&quot;595a05da6166037d0abebaa27ac8a498fa4d7ed2&quot;</span>, GitTreeState:<span class="string">&quot;clean&quot;</span>, GoVersion:<span class="string">&quot;go1.23.10&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Helm<a href="https://helm.sh/zh/docs/helm/helm_completion_bash/">自动补全</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 helm 的自动补全功能</span></span><br><span class="line"><span class="comment"># 1 当前用户</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;source &lt;(helm completion bash)&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 所有用户</span></span><br><span class="line">helm completion bash | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/bash_completion.d/helm &gt; /dev/null</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+r /etc/bash_completion.d/helm</span><br></pre></td></tr></table></figure><h3 id="Helm的使用">Helm的使用</h3><ul class="lvl-0"><li class="lvl-2"><p>可以参考 <a href="/2023/07/10/aws-eks14-helm/" title="AWS-EKS-14--Helm">AWS-EKS-14--Helm</a></p></li></ul><h4 id="仓库管理">仓库管理</h4><ul class="lvl-0"><li class="lvl-2"><p>add：添加图表存储库</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>list：列出图表存储库</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm repo list</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>remove：删除图表存储库</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm repo remove bitnami</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>update：从图表存储库更新本地可用图表的信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新所有仓库</span></span><br><span class="line">helm repo update</span><br><span class="line"><span class="comment"># 更新指定的仓库</span></span><br><span class="line">helm repo update bitnami</span><br></pre></td></tr></table></figure><h4 id="在仓库中搜索">在仓库中搜索</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在所有仓库中搜索，默认只展示最新的版本</span></span><br><span class="line">helm search repo nginx</span><br><span class="line"><span class="comment"># 在指定的仓库中搜索</span></span><br><span class="line">helm search repo bitnami/wordpress</span><br><span class="line"><span class="comment"># 显示所有版本</span></span><br><span class="line">helm search repo nginx -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在全部版本中搜索大于等于指定版本</span></span><br><span class="line">$ helm search repo nginx --version ^21.0.0 -l</span><br><span class="line">NAME         CHART VERSIONAPP VERSIONDESCRIPTION</span><br><span class="line">bitnami/nginx21.0.8       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.7       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.6       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.4       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.3       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.2       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.1       1.29.0     NGINX Open Source is a web server that can be a...</span><br><span class="line">bitnami/nginx21.0.0       1.29.0     NGINX Open Source is a web server that can be a...</span><br></pre></td></tr></table></figure><h4 id="安装包">安装包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装最新版</span></span><br><span class="line">helm install nginx bitnami/nginx</span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">helm install nginx bitnami/nginx --version 21.0.3</span><br><span class="line"><span class="comment"># 安装包到指定命名空间</span></span><br><span class="line">helm install nginx bitnami/nginx -n &lt;namespace&gt;</span><br><span class="line"><span class="comment"># 安装包并创建命名空间</span></span><br><span class="line">helm install nginx bitnami/nginx -n &lt;namespace&gt; --create-namespace</span><br><span class="line"><span class="comment"># oci： 从 docker 仓库中安装</span></span><br><span class="line">helm pull oci://registry-1.docker.io/bitnamicharts/nginx --version 21.0.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装本地 chart 目录</span></span><br><span class="line">helm install my-release ./nginx</span><br><span class="line"><span class="comment"># 安装 .tgz 格式的打包 chart</span></span><br><span class="line">helm install my-release ./nginx-1.2.3.tgz</span><br><span class="line"><span class="comment"># 从远程tgz安装</span></span><br><span class="line">helm install my-release https://example.com/charts/nginx-1.2.3.tgz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Git 仓库中的 chart（结合 plugin）</span></span><br><span class="line">helm plugin install https://github.com/aslafy-z/helm-git</span><br><span class="line">helm repo add mychart <span class="string">&#x27;git+https://github.com/myorg/mychart.git&#x27;</span></span><br><span class="line">helm install my-release mychart/nginx</span><br><span class="line"><span class="comment"># 卸载helm-git插件</span></span><br><span class="line">helm plugin remove helm-git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 --set 传递单个或多个值</span></span><br><span class="line">helm install my-release bitnami/nginx --<span class="built_in">set</span> service.type=NodePort</span><br><span class="line"><span class="comment"># 使用 --values 或 -f 加载 YAML 配置文件</span></span><br><span class="line">helm install my-release bitnami/nginx -f custom-values.yaml</span><br><span class="line"><span class="comment"># 同时使用多种 values 文件 + --set</span></span><br><span class="line">helm install my-release bitnami/nginx -f base.yaml -f prod.yaml --<span class="built_in">set</span> replicaCount=3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查看已经安装的包">查看已经安装的包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看指定命名空间已安装的包</span></span><br><span class="line">helm list -n &lt;namespace&gt;</span><br><span class="line"><span class="comment"># 查看所有已安装的包</span></span><br><span class="line">helm list -A</span><br><span class="line"><span class="comment"># 查看已安装的包状态</span></span><br><span class="line">helm status ngxin -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure><h4 id="卸载包">卸载包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm uninstall nginx -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-3&quot;&gt;
&lt;p&gt;K8S 的 Tools: crictl、nerdctl、helm ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 远程连接</title>
    <link href="https://blog.hanqunfeng.com/2025/07/24/k8s-connection/"/>
    <id>https://blog.hanqunfeng.com/2025/07/24/k8s-connection/</id>
    <published>2025-07-24T12:30:05.000Z</published>
    <updated>2025-07-24T02:27:51.050Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍  K8S 的 远程连接 方法，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li></ul><span id="more"></span><h2 id="远程连接-k8s-集群">远程连接 k8s 集群</h2><h3 id="本地不存在-kubeconfig-文件">本地不存在 kubeconfig 文件</h3><ul class="lvl-0"><li class="lvl-2"><p>获取 kubeconfig 文件，位于 Master 节点：/etc/kubernetes/admin.conf，将其拷贝到本地</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp k8s-master:/etc/kubernetes/admin.conf ~/.kube/config</span><br></pre></td></tr></table></figure><h3 id="本地已存在-kubeconfig-文件">本地已存在 kubeconfig 文件</h3><ul class="lvl-0"><li class="lvl-2"><p>已经配置了一个集群的连接，还想再添加一个集群，可以通过通过合并的方式添加</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将新集群的 kubeconfig 文件拷贝到本地</span></span><br><span class="line">scp k8s-master:/etc/kubernetes/admin.conf ~/.kube/new-cluster.conf</span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line">KUBECONFIG=~/.kube/config:new-cluster.conf kubectl config view --flatten &gt; merged-config.yaml</span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line"><span class="built_in">mv</span> merged-config.yaml ~/.kube/config</span><br></pre></td></tr></table></figure><h3 id="集群配置相关命令">集群配置相关命令</h3><ul class="lvl-0"><li class="lvl-2"><p>获取集群配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取所有集群配置</span></span><br><span class="line">kubectl config get-contexts</span><br><span class="line"><span class="comment"># 查看当前默认的 context</span></span><br><span class="line">kubectl config current-context</span><br><span class="line"><span class="comment"># 切换 context</span></span><br><span class="line">kubectl config use-context &lt;context_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取集群名称</span></span><br><span class="line">kubectl config get-clusters</span><br><span class="line"><span class="comment"># 获取用户名称</span></span><br><span class="line">kubectl config get-users</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>测试</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除集群配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 context</span></span><br><span class="line">kubectl config delete-context &lt;context_name&gt;</span><br><span class="line"><span class="comment"># 删除 cluster</span></span><br><span class="line">kubectl config delete-cluster &lt;cluster_name&gt;</span><br><span class="line"><span class="comment"># 删除 user</span></span><br><span class="line">kubectl config delete-user &lt;user_name&gt;</span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p>也可以直接编辑 kubeconfig（~/.kube/config） 文件，添加或删除不需要的集群、用户、上下文等信息</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍  K8S 的 远程连接 方法，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 Secret</title>
    <link href="https://blog.hanqunfeng.com/2025/07/23/k8s-secret/"/>
    <id>https://blog.hanqunfeng.com/2025/07/23/k8s-secret/</id>
    <published>2025-07-23T13:35:15.000Z</published>
    <updated>2025-07-23T09:36:36.272Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 Secret ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/">k8s Secret 官方文档</a></p></li></ul><span id="more"></span><h2 id="Secret-介绍">Secret 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>Secret 是一种包含少量敏感信息例如密码、令牌或密钥的对象。 这样的信息可能会被放在 Pod 规约中或者镜像中。 使用 Secret 意味着你不需要在应用程序代码中包含机密数据。</p></li><li class="lvl-2"><p>由于创建 Secret 可以独立于使用它们的 Pod， 因此在创建、查看和编辑 Pod 的工作流程中暴露 Secret（及其数据）的风险较小。 Kubernetes 和在集群中运行的应用程序也可以对 Secret 采取额外的预防措施， 例如避免将敏感数据写入非易失性存储。</p></li><li class="lvl-2"><p>Secret 类似于 ConfigMap 但专门用于保存机密数据。</p></li><li class="lvl-2"><p>每个 Secret 的尺寸最多为 1MiB</p></li><li class="lvl-2"><p>在 K8S 中，Secret 有多种类型：本文只讲解 <code>Opaque</code> 类型，其余类型参考[官网]((<a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/">https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/</a>)。</p></li></ul><table><thead><tr><th>内置类型</th><th>用法描述</th></tr></thead><tbody><tr><td><code>Opaque</code></td><td>用户自定义的任意数据（默认类型）</td></tr><tr><td><code>kubernetes.io/service-account-token</code></td><td>自动挂载的服务账号令牌，供 Pod 访问 API 使用</td></tr><tr><td><code>kubernetes.io/dockercfg</code></td><td>序列化的 <code>~/.dockercfg</code> 文件，用于私有仓库认证（旧格式）</td></tr><tr><td><code>kubernetes.io/dockerconfigjson</code></td><td>序列化的 <code>~/.docker/config.json</code> 文件（推荐）</td></tr><tr><td><code>kubernetes.io/basic-auth</code></td><td>存储用户名和密码，用于 HTTP 基本认证</td></tr><tr><td><code>kubernetes.io/ssh-auth</code></td><td>存储 SSH 私钥，用于 SSH 身份认证</td></tr><tr><td><code>kubernetes.io/tls</code></td><td>存储 TLS 密钥和证书，用于 HTTPS 或服务加密通信</td></tr><tr><td><code>bootstrap.kubernetes.io/token</code></td><td>用于 kubelet 加入集群的引导令牌</td></tr></tbody></table><h2 id="Secret-创建及使用">Secret 创建及使用</h2><ul class="lvl-0"><li class="lvl-2"><p>Secret 与 ConfigMap 创建及使用类似，都是存储键值对，但存储内容不同，Secret 存储的是 Base64 编码后的内容。</p></li></ul><h3 id="环境变量引用">环境变量引用</h3><ul class="lvl-0"><li class="lvl-2"><p>yaml创建</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysevret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span>                  <span class="comment"># 默认类型 ，可以省略</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">YWRtaW4=</span>          <span class="comment"># &quot;admin&quot; 的 base64 编码</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MWYyZDFlMmU2N2Rm</span>  <span class="comment"># &quot;1f2d1e2e67df&quot; 的 base64 编码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>命令行创建</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># key：value 方式创建，这里 value 值是 明文，k8s 会进行 base64 编码</span></span><br><span class="line">kubectl create secret generic my-secret \</span><br><span class="line">  --from-literal=username=admin \</span><br><span class="line">  --from-literal=password=1f2d1e2e67df</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件方式创建</span></span><br><span class="line"><span class="comment"># --from-env-file=app.env 作用：将 app.env 中的每一行解析为 key=value，每一行变成 Secret 中的一个键值对。</span></span><br><span class="line">kubectl create secret generic my-secret \</span><br><span class="line">  --from-env-file=username.env \</span><br><span class="line">  --from-env-file=password.env</span><br><span class="line"></span><br><span class="line"><span class="comment"># username.env 文件内容如下：</span></span><br><span class="line"><span class="comment"># username=admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># password.env 文件内容如下：</span></span><br><span class="line"><span class="comment"># password=1f2d1e2e67df</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建完成后，查看 Secret 的内容</span></span><br><span class="line">$ k get secrets my-secret -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  password: MWYyZDFlMmU2N2Rm</span><br><span class="line">  username: YWRtaW4=</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2025-07-05T13:21:22Z&quot;</span></span><br><span class="line">  name: my-secret</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;747355&quot;</span></span><br><span class="line">  uid: 4f77269d-d4c3-4ae8-aafc-7cfa56b84a5d</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>将 Secret 中的全部数据作为环境变量使用</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-secret</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;printenv&quot;</span>] <span class="comment"># 打印环境变量</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">      <span class="attr">envFrom:</span>                  <span class="comment"># 环境变量引用文件、 Secret ，等等</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">secretRef:</span>            <span class="comment"># 这里引用 Secret ，此处将 Secret 中的全部数据作为环境变量使用</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">my-secret</span>     <span class="comment"># Secret 名称</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>将 Secret 中的部分数据作为环境变量使用</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pod2.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-secret2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">    <span class="attr">args:</span>                       <span class="comment"># 容器启动命令</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        echo &quot;username: $&#123;SECRET_USERNAME&#125;&quot;</span></span><br><span class="line"><span class="string">        echo &quot;password: $&#123;SECRET_PASSWORD&#125;&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">env:</span>                        <span class="comment"># 环境变量配置，key: value 形式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SECRET_USERNAME</span>     <span class="comment"># 要在pod中配置的环境变量的 key</span></span><br><span class="line">      <span class="attr">valueFrom:</span>                <span class="comment"># value 来源</span></span><br><span class="line">        <span class="attr">secretKeyRef:</span>           <span class="comment"># 引用 Secret 中的 key</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">my-secret</span>       <span class="comment"># Secret 名称</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">username</span>         <span class="comment"># Secret 中 key 的名称</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SECRET_PASSWORD</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">secretKeyRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">my-secret</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看pod日志</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ k logs pods/env-secret</span><br><span class="line">KUBERNETES_PORT=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_SERVICE_PORT=443</span><br><span class="line">HOSTNAME=env-secret</span><br><span class="line">SHLVL=1</span><br><span class="line">username=admin</span><br><span class="line">HOME=/root</span><br><span class="line">KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">KUBERNETES_PORT_443_TCP_PORT=443</span><br><span class="line">password=1f2d1e2e67df</span><br><span class="line">KUBERNETES_PORT_443_TCP_PROTO=tcp</span><br><span class="line">KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_SERVICE_PORT_HTTPS=443</span><br><span class="line">KUBERNETES_SERVICE_HOST=10.96.0.1</span><br><span class="line">PWD=/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ k logs pods/env-secret2</span><br><span class="line">username: admin</span><br><span class="line">password: 1f2d1e2e67df</span><br></pre></td></tr></table></figure><h3 id="存储卷引用">存储卷引用</h3><ul class="lvl-0"><li class="lvl-2"><p>yaml创建</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># secret-configfile.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">stringData:</span>                          <span class="comment"># 使用 stringData，K8s 会自动将其转换为 base64 编码</span></span><br><span class="line">  <span class="attr">app.properties:</span> <span class="string">|</span>                  <span class="comment"># 文件名</span></span><br><span class="line">    <span class="string">server.port=8080</span></span><br><span class="line">    <span class="string">log.level=INFO</span></span><br><span class="line">  <span class="attr">db.properties:</span> <span class="string">|</span>                   <span class="comment"># 文件名</span></span><br><span class="line">    <span class="string">db.host=localhost</span></span><br><span class="line">    <span class="string">db.port=5432</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>命令行创建</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这里是 --from-file，作为文件配置，而非环境变量</span></span><br><span class="line"><span class="comment"># 文件内容是明文，k8s 会自动将其转换为 base64 编码</span></span><br><span class="line">kubectl create secret generic my-secret \</span><br><span class="line">  --from-file=app.properties \</span><br><span class="line">  --from-file=db.properties</span><br><span class="line"><span class="comment"># app.properties 文件内容如下：</span></span><br><span class="line"><span class="comment"># server.port=8080</span></span><br><span class="line"><span class="comment"># log.level=INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># db.properties 文件内容如下：</span></span><br><span class="line"><span class="comment"># db.host=localhost</span></span><br><span class="line"><span class="comment"># db.port=5432</span></span><br><span class="line"></span><br><span class="line">$ k get secrets my-secret -oyaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  app.properties: c2VydmVyLnBvcnQ9ODA4MApsb2cubGV2ZWw9SU5GTwo=</span><br><span class="line">  db.properties: ZGIuaG9zdD1sb2NhbGhvc3QKZGIucG9ydD0xMjU0MzIK</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2025-07-05T13:45:14Z&quot;</span></span><br><span class="line">  name: my-secret</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;750742&quot;</span></span><br><span class="line">  uid: 35ffcdd6-d70a-4f3a-9246-5c56da630bc1</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Pod 挂载 Secret 为文件</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># secret-pod.yaml 文件内容如下：</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">secret-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/etc/config</span>              <span class="comment"># 挂载路径</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span>                   <span class="comment"># 存储卷 名称</span></span><br><span class="line">    <span class="attr">secret:</span>                               <span class="comment"># 存储卷类型为 Secret</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">my-secret</span>               <span class="comment"># 挂载的 Secret 名称，本利中将 Secret 中的全部文件都挂载到pod目录下</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>容器内的 <code>/etc/config/</code> 目录下会有两个文件：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/config/app.properties</span><br><span class="line">/etc/config/db.properties</span><br><span class="line"></span><br><span class="line">$ k <span class="built_in">exec</span> -it secret-demo -- <span class="built_in">ls</span> /etc/config/</span><br><span class="line">app.properties  db.properties</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果只想挂载 Secret 中的某些文件，可以通过 <code>items</code> 字段指定：</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># secret-pod2.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">secret-demo2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">my-secret</span></span><br><span class="line">      <span class="attr">items:</span>                   <span class="comment"># 明确指定挂载的key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app.properties</span>    <span class="comment"># secret 中的key</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">app.properties</span>   <span class="comment"># 映射到容器内的路径，最终挂载路径为 /etc/config/app.properties</span></span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p>Secret 的特点与使用方法与 ConfigMap 非常类似。</p></li><li class="lvl-2"><p>🔍 ConfigMap vs Secret 对比表：</p></li></ul><table><thead><tr><th>特性</th><th>ConfigMap</th><th>Secret</th></tr></thead><tbody><tr><td><strong>用途</strong></td><td>存储非敏感配置信息（如环境变量、配置文件）</td><td>存储敏感信息（如密码、证书、token）</td></tr><tr><td><strong>数据是否加密</strong></td><td>否，明文存储（Base64 编码可读）</td><td>否（默认 Base64 编码），可配置加密存储（如使用 KMS）</td></tr><tr><td><strong>字段名</strong></td><td><code>data</code> / <code>binaryData</code></td><td><code>data</code>（需 base64） / <code>stringData</code>（明文）</td></tr><tr><td><strong>可存储的最大大小</strong></td><td>每个对象最多约 1MB</td><td>每个对象最多约 1MB</td></tr><tr><td><strong>支持的挂载方式</strong></td><td>- 环境变量<br>- 卷（文件）</td><td>- 环境变量<br>- 卷（文件）</td></tr><tr><td><strong>默认类型（type）</strong></td><td>无类型字段</td><td>默认为 <code>Opaque</code></td></tr><tr><td><strong>可定义为多个文件挂载</strong></td><td>✅</td><td>✅</td></tr><tr><td><strong>默认 RBAC 访问控制强度</strong></td><td>弱（多数用户/Pod 可读取）</td><td>强（默认受限访问）</td></tr><tr><td><strong>支持的内置类型</strong></td><td>无</td><td>✅ 如：<code>kubernetes.io/tls</code>、<code>kubernetes.io/basic-auth</code> 等</td></tr><tr><td><strong>是否适合存储密钥/密码</strong></td><td>❌ 不推荐</td><td>✅ 推荐</td></tr><tr><td><strong>可视化明文读取</strong></td><td>✅ 直接读取</td><td>✅ 但 Base64 编码后需要解码</td></tr><tr><td><strong>常见用途示例</strong></td><td>App 配置、日志级别、连接参数等</td><td>数据库密码、TLS 证书、API Token 等</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 Secret ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/&quot;&gt;k8s Secret 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 ConfigMap</title>
    <link href="https://blog.hanqunfeng.com/2025/07/23/k8s-configmap/"/>
    <id>https://blog.hanqunfeng.com/2025/07/23/k8s-configmap/</id>
    <published>2025-07-23T12:35:15.000Z</published>
    <updated>2025-07-23T09:14:54.663Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 ConfigMap ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/configmap/">k8s ConfigMap 官方文档</a></p></li></ul><span id="more"></span><h2 id="ConfigMap-别名cm-介绍">ConfigMap(别名cm) 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>ConfigMap 是一种 API 对象，用来将非机密性的数据保存到键值对中。</p></li><li class="lvl-2"><p>使用时， Pod 可以将其用作环境变量、命令行参数或者存储卷中的配置文件。</p></li><li class="lvl-2"><p>ConfigMap 将你的环境配置信息和容器镜像解耦，便于应用配置的修改。</p></li><li class="lvl-2"><p>多个 Pod 可以关联同一个 ConfigMap</p></li></ul><h2 id="ConfigMap-创建及使用">ConfigMap 创建及使用</h2><h3 id="环境变量引用">环境变量引用</h3><ul class="lvl-0"><li class="lvl-2"><p>yaml创建</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># configmap.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span>       <span class="comment"># ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myconfigmap</span>   <span class="comment"># configmap 名称</span></span><br><span class="line"><span class="attr">data:</span>                 <span class="comment"># data 字段设计用来保存 UTF-8 字符串，最大值为 1M</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">k8s-admin</span> <span class="comment"># key: value</span></span><br><span class="line">  <span class="attr">access_level:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>命令行创建</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># key：value 方式创建</span></span><br><span class="line">kubectl create configmap myconfigmap --from-literal=username=k8s-admin --from-literal=access_level=1 --from-literal=password=123456</span><br><span class="line"><span class="comment"># 文件方式创建</span></span><br><span class="line"><span class="comment"># --from-env-file=app.env 作用：将 app.env 中的每一行解析为 key=value，每一行变成 ConfigMap 中的一个键值对。</span></span><br><span class="line">kubectl create configmap myconfigmap --from-env-file=app.env --from-env-file=other.env</span><br><span class="line"><span class="comment"># app.env 文件内容如下：</span></span><br><span class="line"><span class="comment"># username=k8s-admin</span></span><br><span class="line"><span class="comment"># access_level=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># other.env 文件内容如下：</span></span><br><span class="line"><span class="comment"># password=123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建完成后，查看 ConfigMap 的内容</span></span><br><span class="line">$ k get cm myconfigmap -oyaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  access_level: <span class="string">&quot;1&quot;</span></span><br><span class="line">  password: <span class="string">&quot;123456&quot;</span></span><br><span class="line">  username: k8s-admin</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2025-07-05T10:29:15Z&quot;</span></span><br><span class="line">  name: myconfigmap</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;723770&quot;</span></span><br><span class="line">  uid: ee850cf9-9014-4be2-97d8-5d1840e78d54</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>将 ConfigMap 中的全部数据作为环境变量使用</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-configmap</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;printenv&quot;</span>] <span class="comment"># 打印环境变量</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">      <span class="attr">envFrom:</span>                  <span class="comment"># 环境变量引用文件、configMap，等等</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMapRef:</span>         <span class="comment"># 这里引用 ConfigMap，此处将 ConfigMap 中的全部数据作为环境变量使用</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">myconfigmap</span>   <span class="comment"># configMap 名称</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>将 ConfigMap 中的部分数据作为环境变量使用</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pod2.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-configmap2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">    <span class="attr">args:</span>                       <span class="comment"># 容器启动命令</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        echo &quot;username: $&#123;CONFIGMAP_USERNAME&#125;&quot;</span></span><br><span class="line"><span class="string">        echo &quot;password: $&#123;CONFIGMAP_PASSWORD&#125;&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">env:</span>                        <span class="comment"># 环境变量配置，key: value 形式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CONFIGMAP_USERNAME</span>  <span class="comment"># 要在pod中配置的环境变量的 key</span></span><br><span class="line">      <span class="attr">valueFrom:</span>                <span class="comment"># value 来源</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span>        <span class="comment"># 引用 ConfigMap 中的 key</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">myconfigmap</span>     <span class="comment"># configMap 名称</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">username</span>         <span class="comment"># configMap 中 key 的名称</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CONFIGMAP_PASSWORD</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">myconfigmap</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看pod日志</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs pods/env-configmap</span><br><span class="line">access_level=1</span><br><span class="line">KUBERNETES_SERVICE_PORT=443</span><br><span class="line">KUBERNETES_PORT=tcp://10.96.0.1:443</span><br><span class="line">HOSTNAME=env-configmap</span><br><span class="line">SHLVL=1</span><br><span class="line">username=k8s-admin</span><br><span class="line">HOME=/root</span><br><span class="line">KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">KUBERNETES_PORT_443_TCP_PORT=443</span><br><span class="line">password=123456</span><br><span class="line">KUBERNETES_PORT_443_TCP_PROTO=tcp</span><br><span class="line">KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_SERVICE_PORT_HTTPS=443</span><br><span class="line">KUBERNETES_SERVICE_HOST=10.96.0.1</span><br><span class="line">PWD=/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl logs pods/env-configmap2</span><br><span class="line">username: k8s-admin</span><br><span class="line">password: 123456</span><br></pre></td></tr></table></figure><h3 id="存储卷引用">存储卷引用</h3><ul class="lvl-0"><li class="lvl-2"><p>yaml创建</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># configmap-configfile.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">app.properties:</span> <span class="string">|</span>  <span class="comment"># 文件名称 ，使用 | 创建多行</span></span><br><span class="line">    <span class="string">server.port=8080</span></span><br><span class="line">    <span class="string">log.level=INFO</span></span><br><span class="line">  <span class="attr">db.properties:</span> <span class="string">|</span>   <span class="comment"># 文件名称</span></span><br><span class="line">    <span class="string">db.host=localhost</span></span><br><span class="line">    <span class="string">db.port=5432</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>命令行创建</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 注意这里是 --from-file，作为文件配置，而非环境变量</span></span><br><span class="line">kubectl create configmap app-config \</span><br><span class="line">  --from-file=app.properties \</span><br><span class="line">  --from-file=db.properties</span><br><span class="line"><span class="comment"># app.properties 文件内容如下：</span></span><br><span class="line"><span class="comment"># server.port=8080</span></span><br><span class="line"><span class="comment"># log.level=INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># db.properties 文件内容如下：</span></span><br><span class="line"><span class="comment"># db.host=localhost</span></span><br><span class="line"><span class="comment"># db.port=5432</span></span><br><span class="line"></span><br><span class="line">$ k get cm app-config -oyaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  app.properties: |</span><br><span class="line">    server.port=8080</span><br><span class="line">    log.level=INFO</span><br><span class="line">  db.properties: |</span><br><span class="line">    db.host=localhost</span><br><span class="line">    db.port=5432</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2025-07-05T10:49:00Z&quot;</span></span><br><span class="line">  name: app-config</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;726507&quot;</span></span><br><span class="line">  uid: 05c9a228-ec69-4e88-b8d8-63f97eff2651</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Pod 挂载 ConfigMap 为文件</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># configmap-pod.yaml 文件内容如下：</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">configmap-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/etc/config</span>              <span class="comment"># 挂载路径</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span>                   <span class="comment"># 存储卷 名称</span></span><br><span class="line">    <span class="attr">configMap:</span>                            <span class="comment"># 存储卷类型为 ConfigMap</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">app-config</span>                    <span class="comment"># 挂载的 ConfigMap 名称，本利中将 configMap 中的全部文件都挂载到pod目录下</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>容器内的 <code>/etc/config/</code> 目录下会有两个文件：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/config/app.properties</span><br><span class="line">/etc/config/db.properties</span><br><span class="line"></span><br><span class="line">$ k <span class="built_in">exec</span> -it configmap-demo -- <span class="built_in">ls</span> /etc/config/</span><br><span class="line">app.properties  db.properties</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>如果只想挂载 ConfigMap 中的某些文件，可以通过 <code>items</code> 字段指定：</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">configmap-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">    <span class="attr">configMap:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">app-config</span></span><br><span class="line">      <span class="attr">items:</span>                   <span class="comment"># 明确指定挂载的key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app.properties</span>    <span class="comment"># configMap中的key</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">app.properties</span>   <span class="comment"># 映射到容器内的路径，最终挂载路径为 /etc/config/app.properties</span></span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p><code>--from-env-file=app.env</code> 与 <code>--from-file=app.env</code> 的区别</p></li></ul><table><thead><tr><th>项目</th><th><code>--from-env-file=app.env</code></th><th><code>--from-file=app.env</code></th></tr></thead><tbody><tr><td>用途</td><td>解析为环境变量形式键值对</td><td>按文件整体读入为内容</td></tr><tr><td>适合场景</td><td>想把每个变量都单独用掉</td><td>挂载为配置文件使用</td></tr><tr><td>data 结构</td><td>每一行变一个键值对</td><td>文件名为 key，内容为值</td></tr><tr><td>读取方式</td><td>用 <code>envFrom</code> 注入环境变量</td><td>用 <code>volumeMount</code> 挂载整个文件</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>ConfigMap 也支持 <code>二进制</code> 数据，但需要用 <code>base64</code> 编码</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">config.txt:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    Hello, world!</span></span><br><span class="line"><span class="string"></span><span class="attr">binaryData:</span></span><br><span class="line">  <span class="attr">config.bin:</span> <span class="string">aGVsbG8gd29ybGQK</span>   <span class="comment"># 这是 &quot;hello world&quot; 的 base64 编码</span></span><br></pre></td></tr></table></figure><blockquote><p>binaryData 和 data 的区别</p></blockquote><table><thead><tr><th>字段</th><th>内容类型</th><th>编码方式</th><th>适合存储</th></tr></thead><tbody><tr><td><code>data</code></td><td>文本（UTF-8）</td><td>明文</td><td>配置文件、参数、脚本等</td></tr><tr><td><code>binaryData</code></td><td>任意二进制数据</td><td>base64 编码</td><td>图片、证书、非UTF-8文件等</td></tr></tbody></table><blockquote><p>❗注意事项</p></blockquote><table><thead><tr><th>项目</th><th>说明</th></tr></thead><tbody><tr><td>base64 编码格式</td><td><code>binaryData</code> 中的值必须是标准 base64，不支持换行</td></tr><tr><td>解码后大小限制</td><td>ConfigMap 单个对象最大 1MB（无论 data 还是 binaryData）</td></tr><tr><td>二者可共存</td><td><code>data</code> 与 <code>binaryData</code> 可以同时出现在同一个 ConfigMap 中（字段名不能重复）</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>修改 ConfigMap 后 ：<code>k edit configmap &lt;configmap-name&gt;</code></p><ul class="lvl-2"><li class="lvl-4">如果 Pod 是作为 环境变量 关联的，Pod 不会更新，只能重新创建</li><li class="lvl-4">如果 Pod 是作为 volume 挂载的，Pod 会自动更新(大约几秒后)</li></ul></li><li class="lvl-2"><p>删除 ConfigMap 后：<code>k delete configmap &lt;configmap-name&gt;</code></p></li></ul><table><thead><tr><th>Pod 状态</th><th>ConfigMap 删除后影响</th></tr></thead><tbody><tr><td>正在运行</td><td>不受影响</td></tr><tr><td>重启 / 扩容</td><td><strong>失败</strong>：找不到 ConfigMap，无法创建容器</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 ConfigMap ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/configuration/configmap/&quot;&gt;k8s ConfigMap 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 StorageClass</title>
    <link href="https://blog.hanqunfeng.com/2025/07/22/k8s-storageclass/"/>
    <id>https://blog.hanqunfeng.com/2025/07/22/k8s-storageclass/</id>
    <published>2025-07-22T12:35:15.000Z</published>
    <updated>2025-09-15T06:26:27.650Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 StorageClass，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/storage-classes/">k8s StorageClass 官方文档</a></p></li><li class="lvl-2"><p>本文底层存储卷是 NFS</p></li></ul><span id="more"></span><h2 id="StorageClass-别名sc-介绍">StorageClass(别名sc) 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>K8s 的存储资源分为两种供应模式：静态供应模式 和 动态供应模式。</p><ul class="lvl-2"><li class="lvl-4">静态模式下，管理员需要预先创建许多PV，等待 PVC  来绑定。</li><li class="lvl-4">动态模式下，Kubernetes 会通过 StorageClass 自动创建 PV，并完成与 PVC 的绑定。</li></ul></li><li class="lvl-2"><p>StorageClass 是 Kubernetes 中用来定义 <code>存储后端类型和配置参数</code> 的资源</p></li><li class="lvl-2"><p>作用： 自动创建 PV（PersistentVolume）的“模板”或“规则”</p></li><li class="lvl-2"><p>使用场景： 配合 PVC 使用时，Kubernetes 可以根据 StorageClass 自动 动态创建 对应的持久卷。</p></li><li class="lvl-2"><p>✅ 核心优势：</p><ul class="lvl-2"><li class="lvl-4">无需手动创建 PV</li><li class="lvl-4">支持多种存储后端（NFS、云盘、Ceph、GlusterFS、iSCSI…）</li></ul></li></ul><p><img src="https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/OGGWYb.png" alt=""></p><h2 id="创建-StorageClass">创建 StorageClass</h2><ul class="lvl-0"><li class="lvl-2"><p>一个 NFS 的 StorageClass 的 yaml 示例</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nfs-storage.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-csi</span>                                           <span class="comment"># 存储类名称</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">nfs.csi.k8s.io</span>                               <span class="comment"># 指定存储插件的 CSI 驱动名称，需要安装 nfs-csi-driver</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Delete</span>                                     <span class="comment"># Retain：PVC 删除后，PV 不会被自动删除（数据保留），默认是 Delete,生产环境慎用。</span></span><br><span class="line"><span class="attr">allowVolumeExpansion:</span> <span class="literal">true</span>                                <span class="comment"># 是否允许 PVC 自动扩容，nfs 支持扩容</span></span><br><span class="line"><span class="attr">mountOptions:</span>                                             <span class="comment"># 挂载选项，csi插件不同，选项不同。这里是 nfs的</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hard</span>                                                  <span class="comment"># 服务器异常时客户端会一直发请求直到挂载成功</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nfsvers=4.1</span>                                           <span class="comment"># nfs版本    nfs4.1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nolock</span>                                                <span class="comment"># 允许多个客户端同时访问</span></span><br><span class="line"><span class="attr">volumeBindingMode:</span> <span class="string">Immediate</span>                              <span class="comment"># 默认值：Immediate: 创建PVC时立即绑定 ,WaitForFirstConsumer：等到 Pod 调度到节点后再分配卷，适合多可用区场景</span></span><br><span class="line"><span class="attr">parameters:</span>                                               <span class="comment"># 参数配置</span></span><br><span class="line">  <span class="attr">server:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.88</span>                                    <span class="comment"># nfs服务器地址</span></span><br><span class="line">  <span class="attr">share:</span> <span class="string">/nfs-server/data</span>                                 <span class="comment"># nfs-server上的存储目录</span></span><br></pre></td></tr></table></figure><blockquote><p>csi-driver-nfs 从 v4.x 起，已经支持 Delete reclaimPolicy 和 allowVolumeExpansion 自动扩容。<br>生产环境慎用 Delete reclaimPolicy，因为此时删除 PVC 后，nfs-server 上的存储目录也会被删除。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>每个 StorageClass 配置中有三个必填的参数：<code>provisioner</code>、<code>parameters</code> 和 <code>reclaimPolicy</code> 字段， 这些字段会在 StorageClass 需要动态制备 PersistentVolume (PV) 以满足 PersistentVolumeClaim (PVC) 时使用到。</p></li></ul><h3 id="provisioner-存储制备器">provisioner: 存储制备器</h3><ul class="lvl-0"><li class="lvl-2"><p>每个 StorageClass 都有一个制备器（Provisioner），用来决定使用哪个卷插件制备 PV。 该字段必须指定。</p></li><li class="lvl-2"><p>比如 NFS 存储制备器：<code>provisioner: nfs.csi.k8s.io</code>，是 K8S 官方维护的 NFS CSI 插件。<a href="https://github.com/kubernetes-csi/csi-driver-nfs">Github</a>。</p></li><li class="lvl-2"><p>安装 NFS CSI 插件：<a href="https://github.com/kubernetes-csi/csi-driver-nfs/blob/master/docs/install-csi-driver-master.md">Install NFS CSI Driver</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在线安装</span></span><br><span class="line">curl -skSL https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/master/deploy/install-driver.sh | bash -s master --</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">kubectl -n kube-system get pod -o wide -l app=csi-nfs-controller</span><br><span class="line">kubectl -n kube-system get pod -o wide -l app=csi-nfs-node</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>卸载</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -skSL https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/master/deploy/uninstall-driver.sh | bash -s master --</span><br></pre></td></tr></table></figure><h2 id="示例">示例</h2><ul class="lvl-0"><li class="lvl-2"><p>创建 StorageClass</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nfs-storage.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看 storageclass</span></span><br><span class="line">$ k get sc</span><br><span class="line">NAME      PROVISIONER      RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">nfs-csi   nfs.csi.k8s.io   Delete          Immediate           <span class="literal">true</span>                   5s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建 PVC 时指定 storageclass，StorageClass 会自动创建 PV</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nfs-pvc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-pvc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs-csi</span>  <span class="comment"># 指定 StorageClass 的名称，如果设置了默认的sc，此处可以删除该配置</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span>          <span class="comment"># 指定访问模式</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">800Mi</span>         <span class="comment"># 申请的容量</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建 PVC</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 PVC</span></span><br><span class="line">$ k apply -f nfs-pvc.yaml</span><br><span class="line">persistentvolumeclaim/nfs-pvc created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 PV和PVC，可以看到 PV 自动创建了</span></span><br><span class="line">$ k get pv,pvc</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM             STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">persistentvolume/pvc-c1d33fec-5e16-4156-8405-1af4fc171907   800Mi      RWX            Delete           Bound    default/nfs-pvc   nfs-csi        &lt;<span class="built_in">unset</span>&gt;                          2m4s</span><br><span class="line"></span><br><span class="line">NAME                            STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE</span><br><span class="line">persistentvolumeclaim/nfs-pvc   Bound    pvc-c1d33fec-5e16-4156-8405-1af4fc171907   800Mi      RWX            nfs-csi        &lt;<span class="built_in">unset</span>&gt;                 2m4s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>自动扩容，修改 PVC 容量到 1Gi</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit pvc nfs-pvc</span><br><span class="line"><span class="comment"># 修改如下</span></span><br><span class="line"><span class="comment"># &quot;storage&quot;:&quot;1Gi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看 PV 和 PVC，可以看到 自动扩容成功</span></span><br><span class="line">$ k get pv,pvc</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM             STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">persistentvolume/pvc-c1d33fec-5e16-4156-8405-1af4fc171907   1Gi        RWX            Delete           Bound    default/nfs-pvc   nfs-csi        &lt;<span class="built_in">unset</span>&gt;                          4m50s</span><br><span class="line"></span><br><span class="line">NAME                            STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE</span><br><span class="line">persistentvolumeclaim/nfs-pvc   Bound    pvc-c1d33fec-5e16-4156-8405-1af4fc171907   1Gi        RWX            nfs-csi        &lt;<span class="built_in">unset</span>&gt;                 4m50s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除PVC，自动删除PV</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pvc nfs-pvc</span><br><span class="line"><span class="comment"># 再次查看 PV 和 PVC，可以看到 PV 已经被自动删除， reclaimPolicy: Delete</span></span><br><span class="line">$ k get pv,pvc</span><br><span class="line">No resources found</span><br><span class="line"><span class="comment"># 此时 nfs-server 的目录下的文件也会被删除，生产环境慎用</span></span><br></pre></td></tr></table></figure><h2 id="设置默认的-StorageClass">设置默认的 StorageClass</h2><ul class="lvl-0"><li class="lvl-2"><p>上面我们创建 PVC 的时候需要指定 StorageClass，如果我们设置一个默认的 StorageClass，那么在PVC里就可以省略掉 StorageClass 的设置。</p></li><li class="lvl-2"><p>K8S 中只能设置一个默认的 StorageClass，如果有多个，那么就会报错。</p></li><li class="lvl-2"><p>设置默认的 StorageClass</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为 sc 添加 `默认` 注解，去掉该注解 或者 设置为 false 就取消默认了。</span></span><br><span class="line">$ kubectl patch storageclass nfs-csi -p <span class="string">&#x27;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io/is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line">storageclass.storage.k8s.io/nfs-csi patched</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看sc，此时看到名称后面多了一个 (default) ，表示这是默认的 StorageClass</span></span><br><span class="line">$ k get sc</span><br><span class="line">NAME                PROVISIONER      RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">nfs-csi (default)   nfs.csi.k8s.io   Delete          Immediate           <span class="literal">true</span>                   14m</span><br></pre></td></tr></table></figure><h2 id="StatefulSet-自动创建-PVC">StatefulSet: 自动创建 PVC</h2><ul class="lvl-0"><li class="lvl-2"><p>上面的方式还是要求我们必须创建 PVC，有什么方法可以不用创建 PVC ，而是在创建控制器的时候就一起把 PVC 创建好呢？</p></li><li class="lvl-2"><p>目前只有 <code>StatefulSet</code>控制器 才支持自动创建 PVC</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis-statefulset.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span>                  <span class="comment"># 指定使用的 API 版本，这里是 apps/v1，适用于 StatefulSet 资源</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span>                    <span class="comment"># Kubernetes 资源类型，这里是部署（StatefulSet）</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-sts</span>                    <span class="comment"># 资源名称，必须唯一（在同一命名空间下）</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">sts-ns</span></span><br><span class="line"><span class="attr">spec:</span>                                <span class="comment"># 配置项</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span>           <span class="comment"># 保留的历史版本数，默认值为 10，Deployment 和 StatefulSet 都有这个配置项。回滚时有用。</span></span><br><span class="line">  <span class="attr">selector:</span>                          <span class="comment"># 选择器，指定要管理的 Pod</span></span><br><span class="line">    <span class="attr">matchLabels:</span>                     <span class="comment"># 标签选择器</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span>                     <span class="comment"># 选择器，指定 StatefulSet 管理哪些 Pod（标签必须与 template 中匹配）</span></span><br><span class="line">  <span class="attr">updateStrategy:</span>                    <span class="comment"># 更新策略，这里要注意这个更新策略与Deployment的属性名字不一样</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span>              <span class="comment"># 1.RollingUpdate：这是默认的更新策略。使用 RollingUpdate 更新策略时，在更新 StatefulSet 模板后， 老的 StatefulSet Pod 将被终止，并且将以受控方式自动创建新的 StatefulSet Pod。 更新期间，最多只能有 StatefulSet 的一个 Pod 运行于每个节点上。</span></span><br><span class="line">                                     <span class="comment"># 2.OnDelete：使用 OnDelete 更新策略时，在更新 StatefulSet 模板后，只有当你手动删除老的 StatefulSet Pod 之后，新的 StatefulSet Pod 才会被自动创建。</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span>                   <span class="comment"># 滚动升级的配置</span></span><br><span class="line">      <span class="attr">partition:</span> <span class="number">0</span>                   <span class="comment"># 用于控制从第几个 Pod 开始滚动升级</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">redis-svc</span>             <span class="comment"># 服务名称,sts对象使用无头服务，这个是必填项，需要事先创建好</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span>                        <span class="comment"># 副本数，默认是 1</span></span><br><span class="line">  <span class="attr">template:</span>                          <span class="comment"># 模板，定义 Pod 的内容，具体可以参考 Pod 的配置</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span>                   <span class="comment"># Pod 的标签，必须与 selector 中的 matchLabels 一致</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">redis:6.2</span>             <span class="comment"># 容器使用的镜像，这里是官方的 redis 镜像</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">redis</span>                  <span class="comment"># 容器的名称</span></span><br><span class="line">        <span class="attr">volumeMounts:</span>                <span class="comment"># 挂载数据卷</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/data</span>           <span class="comment"># Redis 持久化数据存储路径，根据实际情况修改</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span>              <span class="comment"># 配置 PVC 模板</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-data</span>               <span class="comment"># PVC 名称</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ReadWriteMany</span>              <span class="comment"># 访问模式：多节点读写</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">500Mi</span>             <span class="comment"># 请求的存储容量，根据实际需求调整</span></span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">nfs-csi</span>      <span class="comment"># 存储类名称，如果使用默认存储类，则不需要指定</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建 StatefulSet，并查看 PV,PVC</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 StatefulSet</span></span><br><span class="line">$ kubectl apply -f redis-statefulset.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 PV,PVC</span></span><br><span class="line">$ k get pv,pvc -n sts-ns</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                           STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">persistentvolume/pvc-748fc0d3-a142-4d08-b5c4-7320daea5618   500Mi      RWX            Delete           Bound    sts-ns/redis-data-redis-sts-1   nfs-csi        &lt;<span class="built_in">unset</span>&gt;                          19s</span><br><span class="line">persistentvolume/pvc-807018bb-ec66-4a5c-87f1-9c11df6f4784   500Mi      RWX            Delete           Bound    sts-ns/redis-data-redis-sts-0   nfs-csi        &lt;<span class="built_in">unset</span>&gt;                          22s</span><br><span class="line"></span><br><span class="line">NAME                                           STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE</span><br><span class="line">persistentvolumeclaim/redis-data-redis-sts-0   Bound    pvc-807018bb-ec66-4a5c-87f1-9c11df6f4784   500Mi      RWX            nfs-csi        &lt;<span class="built_in">unset</span>&gt;                 22s</span><br><span class="line">persistentvolumeclaim/redis-data-redis-sts-1   Bound    pvc-748fc0d3-a142-4d08-b5c4-7320daea5618   500Mi      RWX            nfs-csi        &lt;<span class="built_in">unset</span>&gt;                 20s</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>StatefulSet 的 volumeClaimTemplates 每个 Pod 单独创建 PVC，Pod 和 PVC 一一对应，即有几个副本就创建几个 PVC。PVC 名称是：<code>&lt;volumeClaimTemplates.metadata.name&gt;-&lt;statefulset-name&gt;-&lt;pod-ordinal&gt;</code></p></li><li class="lvl-2"><p>删除 StatefulSet</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f redis-statefulset.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 PV,PVC，发现删除 StatefulSet 后，PV 和 PVC 是不会被自动删除的，需要手动删除 PVC</span></span><br><span class="line">$ k get pv,pvc -n sts-ns</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                           STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">persistentvolume/pvc-748fc0d3-a142-4d08-b5c4-7320daea5618   500Mi      RWX            Delete           Bound    sts-ns/redis-data-redis-sts-1   nfs-csi        &lt;<span class="built_in">unset</span>&gt;                          6m30s</span><br><span class="line">persistentvolume/pvc-807018bb-ec66-4a5c-87f1-9c11df6f4784   500Mi      RWX            Delete           Bound    sts-ns/redis-data-redis-sts-0   nfs-csi        &lt;<span class="built_in">unset</span>&gt;                          6m33s</span><br><span class="line"></span><br><span class="line">NAME                                           STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE</span><br><span class="line">persistentvolumeclaim/redis-data-redis-sts-0   Bound    pvc-807018bb-ec66-4a5c-87f1-9c11df6f4784   500Mi      RWX            nfs-csi        &lt;<span class="built_in">unset</span>&gt;                 6m33s</span><br><span class="line">persistentvolumeclaim/redis-data-redis-sts-1   Bound    pvc-748fc0d3-a142-4d08-b5c4-7320daea5618   500Mi      RWX            nfs-csi        &lt;<span class="built_in">unset</span>&gt;                 6m31s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动删除 PVC，因为sc配置的回收策略为 Delete，所以 PV 也会被删除</span></span><br><span class="line">k delete pvc -n sts-ns redis-data-redis-sts-0</span><br><span class="line">k delete pvc -n sts-ns redis-data-redis-sts-1</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>实际上，无论是删除 statefulset 还是缩容 statefulset，PVC 都不会被自动删除。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 StorageClass，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/storage/storage-classes/&quot;&gt;k8s StorageClass 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文底层存储卷是 NFS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 持久卷 PV 和 PVC</title>
    <link href="https://blog.hanqunfeng.com/2025/07/21/k8s-storage-pv-pvc/"/>
    <id>https://blog.hanqunfeng.com/2025/07/21/k8s-storage-pv-pvc/</id>
    <published>2025-07-21T15:35:15.000Z</published>
    <updated>2025-07-22T08:52:10.994Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 持久卷 PV 和 PVC ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/">k8s PV/PVC 官方文档</a></p></li><li class="lvl-2"><p>本文底层存储卷是 NFS</p></li></ul><span id="more"></span><h2 id="PV-和-PVC-介绍">PV 和 PVC 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>PV(PersistentVolume) 是 Kubernetes 中的一种存储资源，用于将底层的物理存储（如 NFS、iSCSI、Ceph、云存储等）抽象成 Kubernetes 资源，供 Pod 使用。它是对存储的一种“声明式”管理，类似于 Pod 声明计算资源。PV 是集群级别的存储资源，不支持 Namespace。</p></li><li class="lvl-2"><p>PVC(PersistentVolumeClaim)，持久卷声明， 是 Kubernetes 中用于申请存储资源的对象。PVC 是 Namespace 级别的资源。</p></li><li class="lvl-2"><p>简而言之：</p><ul class="lvl-2"><li class="lvl-4">PV 是集群中的一块存储，由管理员提前配置或动态创建。</li><li class="lvl-4">PVC（PersistentVolumeClaim） 是用户对存储的申请。</li><li class="lvl-4">Pod 通过 PVC 绑定到 PV，使用持久化存储。</li><li class="lvl-4">开发者用 PVC 来申请存储空间，不关心存储的具体实现方式。</li><li class="lvl-4">PVC 通过 Kubernetes 自动匹配一个合适的 PersistentVolume（PV）进行绑定。</li></ul></li><li class="lvl-2"><p>PV 与 PVC 的基本流程</p><ul class="lvl-2"><li class="lvl-4">管理员创建 PV（或者集群通过 StorageClass 自动创建）。</li><li class="lvl-4">用户提交 PVC，声明自己需要多少容量、什么访问模式。</li><li class="lvl-4">Kubernetes 查找可用的 PV，条件符合（容量、访问模式、StorageClass）就自动绑定。</li><li class="lvl-4">Pod 挂载 PVC，实现持久化存储。</li></ul></li></ul><h2 id="PV-示例">PV 示例</h2><ul class="lvl-0"><li class="lvl-2"><p>一个使用 NFS 存储卷的 PV 示例</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pv-nfs.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv-nfs-1g</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span>                 <span class="comment"># 存储卷模式，默认为 Filesystem</span></span><br><span class="line">  <span class="attr">capacity:</span>                              <span class="comment"># 存储能力</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span>                         <span class="comment"># 容量大小，Gi 或 Mi</span></span><br><span class="line">  <span class="attr">accessModes:</span>                           <span class="comment"># 访问模式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span>                      <span class="comment"># 访问模式</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span>  <span class="comment"># 回收策略</span></span><br><span class="line">  <span class="attr">nfs:</span>                                   <span class="comment"># 持久卷类型（如 hostPath、nfs、ceph 等）</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs-server/data/pv-nfs-1g</span>     <span class="comment"># 存储路径要确保已经存在</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.88</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv-nfs-2g</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span>                              <span class="comment"># 存储能力</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">2Gi</span>                         <span class="comment"># 容量大小，Gi 或 Mi</span></span><br><span class="line">  <span class="attr">accessModes:</span>                           <span class="comment"># 访问模式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span>                      <span class="comment"># 访问模式</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span>  <span class="comment"># 回收策略</span></span><br><span class="line">  <span class="attr">nfs:</span>                                   <span class="comment"># 存储类型（如 hostPath、nfs、ceph 等）</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/nfs-server/data/pv-nfs-2g</span>     <span class="comment"># 存储路径要确保已经存在</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.88</span></span><br></pre></td></tr></table></figure><h3 id="存储卷模式">存储卷模式</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#volume-mode">官网文档:存储卷模式</a></p></li><li class="lvl-2"><p>Kubernetes 支持两种卷模式（volumeModes）：Filesystem（文件系统） 和 Block（块）。</p></li><li class="lvl-2"><p>如果该参数被省略，默认的卷模式是 Filesystem。</p></li><li class="lvl-2"><p>volumeMode 属性设置为 Filesystem 的卷会被 Pod 挂载（Mount） 到某个目录。</p></li></ul><h3 id="持久卷类型">持久卷类型</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes">官网文档:持久卷类型</a></p></li><li class="lvl-2"><p>✅ 当前支持的插件</p></li></ul><table><thead><tr><th>插件类型</th><th>描述</th></tr></thead><tbody><tr><td><strong>csi</strong></td><td><strong>容器存储接口（CSI）</strong>，推荐的现代存储接口</td></tr><tr><td><strong>fc</strong></td><td>Fibre Channel 存储</td></tr><tr><td><strong>hostPath</strong></td><td>HostPath 卷（仅供单节点测试使用；多节点不推荐，推荐使用 local 卷替代）</td></tr><tr><td><strong>iscsi</strong></td><td>iSCSI（基于 IP 的 SCSI 存储）</td></tr><tr><td><strong>local</strong></td><td>节点本地存储设备</td></tr><tr><td><strong>nfs</strong></td><td>网络文件系统（NFS）存储</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>⚠️ 已弃用但仍可用（需 CSI 迁移）</p></li></ul><table><thead><tr><th>插件类型</th><th>描述</th><th>CSI 迁移状态</th></tr></thead><tbody><tr><td><strong>awsElasticBlockStore</strong></td><td>AWS EBS 块存储</td><td>从 v1.23 开始默认迁移</td></tr><tr><td><strong>azureDisk</strong></td><td>Azure 磁盘存储</td><td>从 v1.23 开始默认迁移</td></tr><tr><td><strong>azureFile</strong></td><td>Azure 文件存储</td><td>从 v1.24 开始默认迁移</td></tr><tr><td><strong>cinder</strong></td><td>OpenStack 块存储</td><td>从 v1.21 开始默认迁移</td></tr><tr><td><strong>flexVolume</strong></td><td>FlexVolume（无迁移计划，但未计划移除）</td><td>从 v1.23 开始弃用</td></tr><tr><td><strong>gcePersistentDisk</strong></td><td>GCP 持久磁盘</td><td>从 v1.23 开始默认迁移</td></tr><tr><td><strong>portworxVolume</strong></td><td>Portworx 存储卷</td><td>从 v1.31 开始默认迁移</td></tr><tr><td><strong>vsphereVolume</strong></td><td>vSphere VMDK 卷</td><td>从 v1.25 开始默认迁移</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>❌ 已废弃/即将移除的 In-Tree 插件</p></li></ul><table><thead><tr><th>插件类型</th><th>描述</th><th>弃用/移除版本</th></tr></thead><tbody><tr><td><strong>cephfs</strong></td><td>Ceph 文件系统卷</td><td>v1.31 之后不可用</td></tr><tr><td><strong>flocker</strong></td><td>Flocker 存储</td><td>v1.25 之后不可用</td></tr><tr><td><strong>glusterfs</strong></td><td>GlusterFS 存储</td><td>v1.26 之后不可用</td></tr><tr><td><strong>photonPersistentDisk</strong></td><td>Photon 持久磁盘</td><td>v1.15 之后不可用</td></tr><tr><td><strong>quobyte</strong></td><td>Quobyte 卷</td><td>v1.25 之后不可用</td></tr><tr><td><strong>rbd</strong></td><td>Rados 块设备（Ceph RBD）</td><td>v1.31 之后不可用</td></tr><tr><td><strong>scaleIO</strong></td><td>ScaleIO 卷</td><td>v1.21 之后不可用</td></tr><tr><td><strong>storageos</strong></td><td>StorageOS 卷</td><td>v1.25 之后不可用</td></tr></tbody></table><h3 id="accessModes-访问模式">accessModes 访问模式</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#access-modes">官网文档:访问模式</a></p></li></ul><table><thead><tr><th>访问模式</th><th>说明</th><th>是否跨节点挂载</th><th>是否支持多 Pod 挂载</th><th>是否支持读写</th></tr></thead><tbody><tr><td><strong>ReadWriteOnce (RWO)</strong></td><td>卷可以被一个节点以读写方式挂载，同一节点内多个 Pod 可共享使用。</td><td>❌ 否</td><td>✅ 是（同一节点）</td><td>✅ 是</td></tr><tr><td><strong>ReadOnlyMany (ROX)</strong></td><td>卷可以被多个节点以只读方式挂载。</td><td>✅ 是</td><td>✅ 是</td><td>❌ 否（只读）</td></tr><tr><td><strong>ReadWriteMany (RWX)</strong></td><td>卷可以被多个节点以读写方式挂载。</td><td>✅ 是</td><td>✅ 是</td><td>✅ 是</td></tr><tr><td><strong>ReadWriteOncePod (RWOP)</strong></td><td>卷只能被单个 Pod 以读写方式挂载，确保集群中只有一个 Pod 使用该卷（v1.29+稳定）。</td><td>❌ 否</td><td>❌ 否（只能一个 Pod）</td><td>✅ 是</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>NFS 支持前三种访问模式，hostPath 只支持 ReadWriteOnce。</p></li></ul><h3 id="persistentVolumeReclaimPolicy-回收策略">persistentVolumeReclaimPolicy 回收策略</h3><ul class="lvl-0"><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#reclaim-policy">官方文档:回收策略</a></p></li></ul><table><thead><tr><th>回收策略</th><th>含义</th><th>回收行为</th><th>典型使用场景</th></tr></thead><tbody><tr><td><strong>Retain</strong></td><td><strong>保留</strong>：删除 PVC 后，PV 和后端存储仍然保留</td><td>手动回收，PVC 删除后 PV 状态为 <code>Released</code>，需要手动清理或重新绑定</td><td>重要数据，避免误删；如数据库数据盘</td></tr><tr><td><strong>Delete</strong></td><td><strong>删除</strong>：删除 PVC 后，PV 和后端存储都会被删除</td><td>自动回收，PVC 删除时自动删除 PV 和后端存储资源（如云盘）</td><td>临时数据、不重要的存储</td></tr><tr><td><strong>Recycle</strong></td><td><strong>回收</strong>：简单清空数据</td><td>自动执行 <code>rm -rf /thevolume/*</code>，然后 PV 变回 <code>Available</code> 状态</td><td>旧版本集群的小文件临时存储</td></tr></tbody></table><div class="warning"><ul class="lvl-1"><li class="lvl-2"><p><strong>注意</strong>: 创建 <strong>Recycle</strong> 的 PV 时，会提示如下内容</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: spec.persistentVolumeReclaimPolicy: The Recycle reclaim policy is deprecated. Instead, the recommended approach is to use dynamic provisioning.</span><br></pre></td></tr></table></figure><ul class="lvl-1"><li class="lvl-2"><p>意思就是 <strong>Recycle</strong> 策略已被弃用，建议使用<code>动态供应模式</code>。但<a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#reclaim-policy">官方文档</a>中却提示 <code>对于 Kubernetes 1.33 来说，只有 nfs 和 hostPath 卷类型支持回收（Recycle）。</code></p></li><li class="lvl-2"><p>本人在 Kubernetes 1.33.2 中测试，NFS 支持 Recycle，删除 PVC 后 PV 状态会变为 <strong>Available</strong></p></li></ul></div><h3 id="管理-PV">管理 PV</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl create -f pv-nfs.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">$ k get pv</span><br><span class="line">NAME        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">pv-nfs-1g   1Gi        RWO            Retain           Available                          &lt;<span class="built_in">unset</span>&gt;                          80s</span><br><span class="line">pv-nfs-2g   2Gi        RWX            Retain           Available                          &lt;<span class="built_in">unset</span>&gt;                          80s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">kubectl delete pv pv-nfs-1g</span><br><span class="line">k delete -f pv-nfs.yaml</span><br></pre></td></tr></table></figure><h2 id="PVC-示例">PVC 示例</h2><ul class="lvl-0"><li class="lvl-2"><p>Pod 通过 PVC 向 PV 申请存储空间，如果 PVC 一直无法匹配到 PV，则 PVC 处于 Pending 状态。</p></li><li class="lvl-2"><p>Pod 必须与 PVC 处于同一命名空间。</p></li><li class="lvl-2"><p>PVC 与 PV 是 1:1 的关系。一旦 PV 绑定到 PVC，则 PVC 状态变为 Bound。该 PV 将不再被其他 PVC 绑定。</p></li><li class="lvl-2"><p>PVC 与 PV 匹配的条件</p></li></ul><table><thead><tr><th>匹配条件</th><th>说明</th></tr></thead><tbody><tr><td><strong>容量</strong></td><td><strong>PVC 请求的容量 ≤ PV 提供的容量</strong>。PV 必须至少满足 PVC 的容量请求。</td></tr><tr><td><strong>访问模式</strong></td><td><strong>PV 支持 PVC 请求的访问模式</strong>。PVC 要求的所有访问模式，PV 都必须具备。例如：PVC 要求 <code>ReadWriteOnce</code>，PV 至少要支持 <code>ReadWriteOnce</code>。</td></tr><tr><td><strong>StorageClass</strong></td><td><strong>PVC 和 PV 的 <code>storageClassName</code> 必须一致</strong>。如果 PVC 指定了 <code>storageClassName</code>，只能绑定同名的 PV。</td></tr><tr><td><strong>Selector（可选）</strong></td><td>如果 PVC 有设置 <code>selector</code>（基于标签），PV 的标签也必须匹配。</td></tr></tbody></table><div class="tips"><p><em><strong>小贴士</strong></em></p><ul class="lvl-1"><li class="lvl-2">PV 中声明的 <code>accessModes</code> 仅作为与 PVC 的访问模式进行匹配，实际挂载到 Pod 后，不会限制 Pod 的读写访问</li></ul></div><ul class="lvl-0"><li class="lvl-2"><p>一个简单的 yaml</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pvc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mypvc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span>   <span class="comment"># 申请匹配的访问模式</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">500Mi</span>  <span class="comment"># 申请的容量，实际容量以匹配的 PV 为准</span></span><br><span class="line">  <span class="comment"># selector:         # 匹配的 PV 标签</span></span><br><span class="line">  <span class="comment">#   matchLabels:</span></span><br><span class="line">  <span class="comment">#     pv: nfs-pv1   # pv 的标签，创建 pv 时要指定</span></span><br></pre></td></tr></table></figure><h3 id="管理-PVC">管理 PVC</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 PVC</span></span><br><span class="line">kubectl apply -f pvc.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看PVC，此时看到 pv-nfs-1g 绑定了 PVC</span></span><br><span class="line">$ k get pv,pvc</span><br><span class="line">NAME                         CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM           STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">persistentvolume/pv-nfs-1g   1Gi        RWO            Retain           Available                                  &lt;<span class="built_in">unset</span>&gt;                          16s</span><br><span class="line">persistentvolume/pv-nfs-2g   2Gi        RWX            Retain           Bound       default/mypvc                  &lt;<span class="built_in">unset</span>&gt;                          16s</span><br><span class="line"></span><br><span class="line">NAME                          STATUS   VOLUME      CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE</span><br><span class="line">persistentvolumeclaim/mypvc   Bound    pv-nfs-2g   2Gi        RWX                           &lt;<span class="built_in">unset</span>&gt;                 9s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 PVC</span></span><br><span class="line">kubectl delete pvc mypvc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时再次查看 PV，pv-nfs-1g 状态变更为 Released，表示已经释放，但是不能再被其它 PVC 绑定了，只能删除重建了</span></span><br><span class="line">$ k get pv</span><br><span class="line">NAME        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM           STORAGECLASS   VOLUMEATTRIBUTESCLASS   REASON   AGE</span><br><span class="line">pv-nfs-1g   1Gi        RWO            Retain           Available                                              &lt;<span class="built_in">unset</span>&gt;                          18m</span><br><span class="line">pv-nfs-2g   2Gi        RWX            Retain           Released     default/mypvc                             &lt;<span class="built_in">unset</span>&gt;                          18m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 PV</span></span><br><span class="line">k delete pv pv-nfs-1g</span><br></pre></td></tr></table></figure><h2 id="Pod-绑定-PVC">Pod 绑定 PVC</h2><ul class="lvl-0"><li class="lvl-2"><p>这里以 nginx deployment 为例</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx-pvc-deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-pvc-deployment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span>                              <span class="comment"># 3个 pod会共享一个 PVC</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pvc</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pvc</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-storage</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span>  <span class="comment"># 挂载到 nginx 的默认网页目录</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-storage</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span>              <span class="comment"># 指定存储卷类型是 PVC</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">mypvc</span>                  <span class="comment"># 对应你创建的 PVC 名称</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>一个 PVC 对应一个 PV，但是一个 PVC 可以对应多个 Deployment 等控制器。下面我们就再创建一个 Deployment，将 相同的 PVC 挂载到容器中，并且每隔5秒修改一次 PVC 挂载的网页，并通过 nginx 容器查看结果</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># busybox-deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;while true; do echo $(date) &gt; /data/index.html; sleep 5; done&quot;</span>]</span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-volume</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">mypvc</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建后查看 pod ip</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ k get pod -o wide</span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE     IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">busybox-deployment-d7589665d-dx2rs      1/1     Running   0          2m59s   10.244.126.6     k8s-worker2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-pvc-deployment-775b8c4f8b-89cw7   1/1     Running   0          44s     10.244.126.8     k8s-worker2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-pvc-deployment-775b8c4f8b-fszlf   1/1     Running   0          44s     10.244.194.123   k8s-worker1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-pvc-deployment-775b8c4f8b-w9qkt   1/1     Running   0          44s     10.244.126.7     k8s-worker2   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>访问任意一个 nginx pod</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时会看到页面内容在变化</span></span><br><span class="line">watch -n 5 curl 10.244.194.123</span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><ul class="lvl-0"><li class="lvl-2"><p>为 pod 绑定 pvc时，每次都要先创建 pv 和 pvc，非常麻烦。有什么好的解决方案吗？</p><blockquote><p>使用 StorageClass 实现自动创建 PV，我们下文将介绍如何实现。</p></blockquote></li><li class="lvl-2"><p>如果 PVC 被 Pod 使用，则此时可以删除 PVC 吗？</p><blockquote><p>不可以，PVC 被 Pod 使用，此时只能等待 Pod 删除后才能删除 PVC。<br>若此时执行了删除 PVC 命令，终端会一直等待，ctrl + c 退出后再次查看 PVC 状态，会看到 PVC 状态为 Terminating。但此时不会影响存Pod对储卷的使用。<br>此时一旦Pod 删除，PVC 就会被删除。</p></blockquote></li><li class="lvl-2"><p>如果PV 被 PVC 使用，则此时可以删除 PV 吗？</p><blockquote><p>不可以，PV 被 PVC 使用，此时只能等待 PVC 删除后才能删除 PV。<br>若此时执行了删除 PV 命令，终端会一直等待，ctrl + c 退出后再次查看 PV 状态，会看到 PV 状态为 Terminating。但此时不会影响Pod对存储卷的使用。<br>此时一旦 PVC 删除，PV 就会被删除。</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 持久卷 PV 和 PVC ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/&quot;&gt;k8s PV/PVC 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文底层存储卷是 NFS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S 之 存储卷 NFS</title>
    <link href="https://blog.hanqunfeng.com/2025/07/21/k8s-storage-nfs/"/>
    <id>https://blog.hanqunfeng.com/2025/07/21/k8s-storage-nfs/</id>
    <published>2025-07-21T15:34:15.000Z</published>
    <updated>2025-07-21T08:34:49.791Z</updated>
    
    <content type="html"><![CDATA[<!-- **加粗** *斜体* ***加粗并斜体*** ~~删除线~~ ==突出显示== `突出显示(推荐)` ++下划线++ ~下标~ ^上标^ 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference. 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600) +++ **点击折叠** 这是被隐藏的内容 +++::: tips success warning danger这里是容器内的内容:::% note info % success warning danger这里是容器内的内容% endnote %引用本地其它文章连接{} 大括号开始% post_link 文件名称(不包含.md) %大括号结束 --><h2 id="摘要">摘要</h2><ul class="lvl-0"><li class="lvl-2"><p>本文介绍 K8S 的 存储卷 NFS ，本文以 CentOS 8 为例。</p></li><li class="lvl-2"><p><a href="https://kubernetes.io/zh-cn/">K8S官网</a></p></li><li class="lvl-2"><p><a href="https://github.com/kubernetes/kubernetes">k8s Github</a></p></li></ul><span id="more"></span><h2 id="存储卷-NFS-介绍">存储卷 NFS 介绍</h2><ul class="lvl-0"><li class="lvl-2"><p>在 Kubernetes 中，NFS (Network File System) 是一种通过网络将远程存储挂载到 Pod 的方式。它允许多个 Pod 跨节点共享相同的存储目录，常用于 ReadWriteMany（RWX） 场景。</p></li><li class="lvl-2"><p>我们需要准备一个NFS 服务器，并配置 NFS 存储卷。具体可以参考 <a href="/2025/07/21/linux-nfs/" title="Linux 安装 NFS">Linux 安装 NFS</a></p></li><li class="lvl-2"><p>k8s中每个worker节点都需要安装 NFS 客户端，但是不需要挂载 NFS 存储卷，这个会在pod中进行。</p></li></ul><h2 id="示例">示例</h2><ul class="lvl-0"><li class="lvl-2"><p>一个使用 NFS 存储卷的 pod 示例</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nfs-direct-pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-direct-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;sleep 3600&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data</span>          <span class="comment"># 容器内挂载点</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-volume</span></span><br><span class="line">    <span class="attr">nfs:</span></span><br><span class="line">      <span class="attr">server:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.88</span>      <span class="comment"># NFS 服务端地址</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/nfs-server/data</span>    <span class="comment"># NFS 服务端共享目录</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">false</span>           <span class="comment"># 是否只读挂载，false 表示可读写</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建 Pod</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nfs-direct-pod.yaml</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看 Pod 挂载点</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看pod部署到哪个节点</span></span><br><span class="line">$ kubectl get pod nfs-direct-pod -o wide</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE   IP               NODE          NOMINATED NODE   READINESS GATES</span><br><span class="line">nfs-direct-pod   1/1     Running   0          12m   10.244.194.115   k8s-worker1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 k8s-worker1 节点，查看 nfs 挂载点，也就是说 创建 pod时会自动在宿主机上挂载 nfs</span></span><br><span class="line">$ <span class="built_in">df</span> -t nfs4</span><br><span class="line">Filesystem                    1K-blocks    Used Available Use% Mounted on</span><br><span class="line">10.211.55.88:/nfs-server/data  42872832 3630080  39242752   9% /var/lib/kubelet/pods/e44786a9-fbd9-4ee8-bb28-84eb074fb7d9/volumes/kubernetes.io~nfs/nfs-volume</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod挂载的目录</span></span><br><span class="line">$ k <span class="built_in">exec</span> -it nfs-direct-pod -- <span class="built_in">df</span> -t nfs4</span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">10.211.55.88:/nfs-server/data</span><br><span class="line">                      42872832   3630080  39242752   8% /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向nfs挂载目录中写入数据</span></span><br><span class="line">k <span class="built_in">exec</span> -it nfs-direct-pod -- sh -c <span class="string">&#x27;echo &quot;hello world&quot; &gt; /data/test.txt&#x27;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>删除pod</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">k delete pod nfs-direct-pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次登录 宿主机节点，发现 nfs 挂载点也被卸载了，但是 nfs-server 中的文件仍然存在</span></span><br><span class="line">$ <span class="built_in">df</span> -t nfs4</span><br><span class="line"><span class="built_in">df</span>: no file systems processed</span><br></pre></td></tr></table></figure><h2 id="存储卷类型-emptyDir、hostPath、NFS-的对比表">存储卷类型 emptyDir、hostPath、NFS 的对比表</h2><table><thead><tr><th>特性</th><th><code>emptyDir</code></th><th><code>hostPath</code></th><th><code>nfs</code></th></tr></thead><tbody><tr><td><strong>数据生命周期</strong></td><td>Pod 生命周期内有效，Pod 删除数据丢失</td><td>绑定节点上的目录，Pod 删了数据仍保留</td><td>存储在远程 NFS Server，Pod 删除数据不丢失</td></tr><tr><td><strong>共享范围</strong></td><td><strong>同一个 Pod 的多个容器可共享</strong></td><td>同一节点上多个 Pod 可共享</td><td>集群内多个 Pod 跨节点可共享</td></tr><tr><td><strong>持久化能力</strong></td><td>❌ 不持久化，随 Pod 生命周期结束消失</td><td>✅ 持久化，只要宿主机目录存在数据就在</td><td>✅ 持久化，NFS 存储独立于 Pod 存在</td></tr><tr><td><strong>跨节点共享</strong></td><td>❌ 不能</td><td>❌ 不能</td><td>✅ 支持跨节点共享</td></tr><tr><td><strong>适用场景</strong></td><td>临时缓存、进程间共享数据</td><td>宿主机特定目录挂载，日志存储、宿主机插件对接</td><td>多副本服务共享存储、持久化数据、共享配置文件</td></tr><tr><td><strong>数据安全性</strong></td><td>随 Pod 删除，<strong>数据易丢失</strong></td><td>容器有权限可修改宿主机文件，存在风险</td><td>依赖 NFS Server 稳定性，配置不当可能被所有节点读写</td></tr><tr><td><strong>典型用例</strong></td><td>Redis 缓存目录、Sidecar 容器共享日志</td><td>挂载宿主机 docker.sock、宿主机日志目录</td><td>跨 Pod 文件共享、Web 静态资源、Tensorflow 多副本训练共享数据</td></tr></tbody></table><h2 id="为什么已经有-NFS，还推荐用-PV-PVC？">为什么已经有 NFS，还推荐用 PV/PVC？</h2><ul class="lvl-0"><li class="lvl-2"><p>✅ 简短回答：PV/PVC 是对底层存储（如 NFS）的抽象和标准化管理。</p></li></ul><table><thead><tr><th>原因</th><th>说明</th></tr></thead><tbody><tr><td>✅ <strong>Kubernetes 标准资源</strong></td><td>用 PVC 声明存储需求，由 K8s 统一调度和管理。</td></tr><tr><td>✅ <strong>存储与 Pod 解耦</strong></td><td>Pod 专注于应用逻辑，PVC 专注于声明“我要一个 10Gi 的 RWX 存储”，背后是 NFS、Ceph 还是别的，开发者无需关心。</td></tr><tr><td>✅ <strong>动态供应</strong></td><td>搭配 StorageClass 可以实现 <strong>自动创建 PV</strong>，不需要手动维护 PV。</td></tr><tr><td>✅ <strong>生命周期管理</strong></td><td>PVC 被删除时可触发 PV 回收、保留或删除策略（<code>Retain</code>、<code>Recycle</code>、<code>Delete</code>）。直接挂载 NFS 没有这些机制。</td></tr><tr><td>✅ <strong>权限隔离</strong></td><td>PV/PVC 可以通过 <code>accessModes</code> 控制访问级别，比如只允许特定 Pod 访问。直接挂载 NFS 容易权限混乱。</td></tr><tr><td>✅ <strong>更好兼容性</strong></td><td>某些工作负载（如 StatefulSet）<strong>只能用 PVC</strong>，不支持直接 <code>nfs</code> 卷。</td></tr><tr><td>✅ <strong>更灵活的切换存储方案</strong></td><td>后期如果换成 Ceph、EBS、GlusterFS，只需改 PV/PVC，不需要改 Pod 配置。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;!--
 **加粗**
 *斜体*
 ***加粗并斜体***
 ~~删除线~~
 ==突出显示==
 `突出显示(推荐)`
 ++下划线++
 ~下标~
 ^上标^
 脚注，参考文献[^1]，然后在文档最下方要添加这个1对应的内容，如：[^1]: My reference.
 图片设置宽度和高度(通过uPic上传后，需要将upic修改过为blog，用于添加水印) ![](https://upic-oss.oss-cn-beijing.aliyuncs.com/blog/innodb_buffer_pool.png =900x600)

 +++ **点击折叠**
 这是被隐藏的内容
 +++

::: tips success warning danger
这里是容器内的内容
:::

% note info % success warning danger
这里是容器内的内容
% endnote %

引用本地其它文章连接{}
 大括号开始% post_link 文件名称(不包含.md) %大括号结束
 --&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;本文介绍 K8S 的 存储卷 NFS ，本文以 CentOS 8 为例。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;K8S官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;k8s Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="k8s" scheme="https://blog.hanqunfeng.com/categories/%E6%8A%80%E6%9C%AF/k8s/"/>
    
    
    <category term="K8S" scheme="https://blog.hanqunfeng.com/tags/K8S/"/>
    
  </entry>
  
</feed>
